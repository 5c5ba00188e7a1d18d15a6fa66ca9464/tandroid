package org.telegram.messenger;

import android.app.Activity;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Paint;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.view.View;
import android.widget.FrameLayout;
import androidx.collection.LongSparseArray;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.ColorUtils;
import androidx.core.util.Consumer;
import j$.util.concurrent.ConcurrentHashMap;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SavedMessagesController;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.Timer;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.messenger.support.LongSparseLongArray;
import org.telegram.messenger.voip.VoIPPreNotificationService;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.tgnet.tl.TL_account;
import org.telegram.tgnet.tl.TL_bots;
import org.telegram.tgnet.tl.TL_chatlists;
import org.telegram.tgnet.tl.TL_stories;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Business.QuickRepliesController;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.ChannelMonetizationLayout;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChatRightsEditActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.JoinCallAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.LaunchActivity;
import org.telegram.ui.PremiumPreviewFragment;
import org.telegram.ui.ProfileActivity;
import org.telegram.ui.SecretMediaViewer;
import org.telegram.ui.Stars.BotStarsController;
import org.telegram.ui.Stars.StarsController;
import org.telegram.ui.Stories.StoriesController;
import org.telegram.ui.ThemeActivity;
import org.telegram.ui.TopicsFragment;
import org.telegram.ui.bots.BotWebViewSheet;
import org.telegram.ui.bots.WebViewRequestProps;

/* loaded from: classes.dex */
public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = 31;
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CHATLIST = 512;
    public static int DIALOG_FILTER_FLAG_CHATLIST_ADMIN = 1024;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    public static final int LOAD_AROUND_DATE = 4;
    public static final int LOAD_AROUND_MESSAGE = 3;
    public static final int LOAD_BACKWARD = 0;
    public static final int LOAD_FORWARD = 1;
    public static final int LOAD_FROM_UNREAD = 2;
    public static int PROMO_TYPE_OTHER = 2;
    public static int PROMO_TYPE_PROXY = 0;
    public static int PROMO_TYPE_PSA = 1;
    public static int UPDATE_MASK_ALL = 1050111;
    public static int UPDATE_MASK_AVATAR = 2;
    public static int UPDATE_MASK_CHAT = 8192;
    public static int UPDATE_MASK_CHAT_AVATAR = 8;
    public static int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static int UPDATE_MASK_CHAT_NAME = 16;
    public static int UPDATE_MASK_CHECK = 65536;
    public static int UPDATE_MASK_EMOJI_INTERACTIONS = 262144;
    public static int UPDATE_MASK_EMOJI_STATUS = 524288;
    public static int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static int UPDATE_MASK_NAME = 1;
    public static int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static int UPDATE_MASK_PHONE = 1024;
    public static int UPDATE_MASK_REACTIONS_READ = 1048576;
    public static int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static int UPDATE_MASK_REORDER = 131072;
    public static int UPDATE_MASK_SELECT_DIALOG = 512;
    public static int UPDATE_MASK_SEND_STATE = 4096;
    public static int UPDATE_MASK_STATUS = 4;
    public static int UPDATE_MASK_USER_PHONE = 128;
    public static int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime = 0;
    private static volatile long lastThemeCheckTime = 0;
    public static int stableIdPointer = 100;
    private int DIALOGS_LOAD_TYPE_CACHE;
    private int DIALOGS_LOAD_TYPE_CHANNEL;
    private int DIALOGS_LOAD_TYPE_UNKNOWN;
    public int aboutLengthLimitDefault;
    public int aboutLengthLimitPremium;
    private final HashMap<Long, TLRPC.Chat> activeVoiceChatsMap;
    protected ArrayList<TLRPC.Dialog> allDialogs;
    public boolean androidDisableRoundCamera2;
    public float animatedEmojisZoom;
    private final CacheFetcher<Integer, TLRPC.TL_help_appConfig> appConfigFetcher;
    public Set<String> authDomains;
    public int authorizationAutoconfirmPeriod;
    public boolean autoarchiveAvailable;
    public Set<String> autologinDomains;
    public String autologinToken;
    private TLRPC.messages_AvailableEffects availableEffects;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public LongSparseIntArray blockePeers;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int boostsChannelLevelMax;
    public long boostsPerSentGift;
    public int botPreviewMediasMax;
    public int businessChatLinksLimit;
    public SparseIntArray businessFeaturesTypesToPosition;
    private CacheByChatsController cacheByChatsController;
    private HashMap<Long, ChannelRecommendations> cachedChannelRecommendations;
    private TLRPC.TL_exportedContactToken cachedContactToken;
    private LongSparseArray cachedIsUserPremiumBlocked;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canEditFactcheck;
    public boolean canRevokePmInbox;
    public int captionLengthLimitDefault;
    public int captionLengthLimitPremium;
    private LongSparseArray channelAdmins;
    public int channelBgIconLevelMin;
    private ChannelBoostsController channelBoostsControler;
    public int channelCustomWallpaperLevelMin;
    public int channelEmojiStatusLevelMin;
    public int channelProfileIconLevelMin;
    public int channelRestrictSponsoredLevelMin;
    public boolean channelRevenueWithdrawalEnabled;
    private LongSparseArray channelViewsToSend;
    public int channelWallpaperLevelMin;
    public int channelsLimitDefault;
    public int channelsLimitPremium;
    private LongSparseIntArray channelsPts;
    public int chatReadMarkExpirePeriod;
    public int chatReadMarkSizeThreshold;
    private SparseArray<ChatlistUpdatesStat> chatlistFoldersUpdates;
    public int chatlistInvitesLimitDefault;
    public int chatlistInvitesLimitPremium;
    public int chatlistJoinedLimitDefault;
    public int chatlistJoinedLimitPremium;
    private int chatlistUpdatePeriod;
    private final ConcurrentHashMap<Long, TLRPC.Chat> chats;
    public int checkResetLangpack;
    private LongSparseArray checkingLastMessagesDialogs;
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray clearingHistoryDialogs;
    public boolean collectDeviceStats;
    private TL_account.contentSettings contentSettings;
    private ArrayList<Utilities.Callback<TL_account.contentSettings>> contentSettingsCallbacks;
    private long contentSettingsLoadedTime;
    private boolean contentSettingsLoading;
    private ArrayList<Long> createdDialogIds;
    private ArrayList<Long> createdDialogMainThreadIds;
    private ArrayList<Long> createdScheduledDialogIds;
    private Runnable currentDeleteTaskRunnable;
    private LongSparseArray currentDeletingTaskMediaMids;
    private LongSparseArray currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseIntArray deletedHistory;
    private LongSparseArray deletingDialogs;
    private Comparator<TLRPC.Dialog> dialogComparator;
    private final Comparator<TLRPC.Dialog> dialogDateComparator;
    public ArrayList<DialogFilter> dialogFilters;
    public SparseArray<DialogFilter> dialogFiltersById;
    public int dialogFiltersChatsLimitDefault;
    public int dialogFiltersChatsLimitPremium;
    public int dialogFiltersLimitDefault;
    public int dialogFiltersLimitPremium;
    public boolean dialogFiltersLoaded;
    public int dialogFiltersPinnedLimitDefault;
    public int dialogFiltersPinnedLimitPremium;
    public LongSparseArray dialogMessage;
    public SparseArray<MessageObject> dialogMessagesByIds;
    public LongSparseArray dialogMessagesByRandomIds;
    private LongSparseArray dialogPhotos;
    public SparseArray<ArrayList<TLRPC.Dialog>> dialogsByFolder;
    public ArrayList<TLRPC.Dialog> dialogsCanAddUsers;
    public ArrayList<TLRPC.Dialog> dialogsChannelsOnly;
    private SparseBooleanArray dialogsEndReached;
    public ArrayList<TLRPC.Dialog> dialogsForBlock;
    public ArrayList<TLRPC.Dialog> dialogsForward;
    public ArrayList<TLRPC.Dialog> dialogsGroupsOnly;
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate;
    public ArrayList<TLRPC.Dialog> dialogsMyChannels;
    public ArrayList<TLRPC.Dialog> dialogsMyGroups;
    public ArrayList<TLRPC.Dialog> dialogsServerOnly;
    public ArrayList<TLRPC.Dialog> dialogsUsersOnly;
    public LongSparseArray dialogs_dict;
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max;
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max;
    public HashSet<String> diceEmojies;
    public HashMap<String, DiceFrameSuccess> diceSuccess;
    public List<String> directPaymentsCurrency;
    public Set<String> dismissedSuggestions;
    private final CacheFetcher<Integer, TLRPC.messages_AvailableEffects> effectsFetcher;
    public HashMap<Long, ArrayList<TLRPC.TL_sendMessageEmojiInteraction>> emojiInteractions;
    private final SharedPreferences emojiPreferences;
    public HashMap<String, EmojiSound> emojiSounds;
    private LongSparseArray emojiStatusUntilValues;
    public boolean enableJoined;
    private final ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats;
    public Set<String> exportGroupUri;
    public Set<String> exportPrivateUri;
    public Set<String> exportUri;
    private final LongSparseArray exportedChats;
    public int factcheckLengthLimit;
    public ArrayList<FaqSearchResult> faqSearchArray;
    public TLRPC.WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    public boolean folderTags;
    public int forumUpgradeParticipantsMin;
    public ArrayList<DialogFilter> frozenDialogFilters;
    private LongSparseArray fullChats;
    private LongSparseArray fullUsers;
    private boolean getDifferenceFirstSync;
    public boolean getfileExperimentalParams;
    private LongSparseArray gettingChatInviters;
    public boolean gettingDifference;
    private LongSparseArray gettingDifferenceChannels;
    private boolean gettingNewDeleteTask;
    private LongSparseArray gettingUnknownChannels;
    private LongSparseArray gettingUnknownDialogs;
    public String gifSearchBot;
    public ArrayList<String> gifSearchEmojies;
    public boolean giftAttachMenuIcon;
    public boolean giftTextFieldIcon;
    public long giveawayAddPeersMax;
    public long giveawayBoostsPerPremium;
    public long giveawayCountriesMax;
    public boolean giveawayGiftsPurchaseAvailable;
    public long giveawayPeriodMax;
    public int groupCallVideoMaxParticipants;
    private LongSparseArray groupCalls;
    private LongSparseArray groupCallsByChatId;
    public int groupCustomWallpaperLevelMin;
    public int groupEmojiStatusLevelMin;
    public int groupEmojiStickersLevelMin;
    public int groupProfileBgIconLevelMin;
    public int groupTranscribeLevelMin;
    public int groupWallpaperLevelMin;
    private boolean hasArchivedChats;
    private boolean hasStories;
    public int hiddenMembersGroupSizeMin;
    public ArrayList<Long> hiddenUndoChats;
    public ArrayList<TLRPC.RecentMeUrl> hintDialogs;
    public Set<String> ignoreRestrictionReasons;
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    public int introDescriptionLengthLimit;
    public int introTitleLengthLimit;
    private boolean isLeftPromoChannel;
    private final ArrayList<Long> joiningToChannels;
    public boolean keepAliveService;
    public int largeQueueMaxActiveOperations;
    private int lastCheckPromoId;
    public int lastKnownSessionsCount;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray lastQuickReplyServerQueryTime;
    private LongSparseArray lastSavedServerQueryTime;
    private LongSparseArray lastScheduledServerQueryTime;
    private LongSparseArray lastServerQueryTime;
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private Runnable loadAppConfigRunnable;
    public LongSparseLongArray loadedFullChats;
    private HashSet<Long> loadedFullParticipants;
    private LongSparseLongArray loadedFullUsers;
    private boolean loadingArePaidReactionsAnonymous;
    private boolean loadingAvailableEffects;
    public boolean loadingBlockedPeers;
    private LongSparseIntArray loadingChannelAdmins;
    private SparseBooleanArray loadingDialogs;
    private HashSet<Long> loadingFullChats;
    private HashSet<Long> loadingFullParticipants;
    private HashSet<Long> loadingFullUsers;
    private HashSet<Long> loadingGroupCalls;
    private HashSet<Long> loadingIsUserPremiumBlocked;
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private boolean loadingPeerColors;
    private LongSparseArray loadingPeerSettings;
    private SparseIntArray loadingPinnedDialogs;
    private boolean loadingProfilePeerColors;
    private HashSet<Long> loadingReactionTags;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private boolean loggedDeviceStats;
    private final SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCountDefault;
    public int maxFolderPinnedDialogsCountPremium;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCountDefault;
    public int maxPinnedDialogsCountPremium;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats;
    private boolean migratingDialogs;
    public int minGroupConvertSize;
    private LongSparseArray needShortPollChannels;
    private LongSparseArray needShortPollOnlines;
    public NewMessageCallback newMessageCallback;
    public boolean newNoncontactPeersRequirePremiumWithoutOwnpremium;
    private SparseIntArray nextDialogsCacheOffset;
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private final SharedPreferences notificationsPreferences;
    private final Runnable notifyTranscriptionAudioCooldownUpdate;
    private final ConcurrentHashMap<String, TLObject> objectsByUsernames;
    private boolean offlineSent;
    private Utilities.Callback<Boolean> onLoadedRemoteFilters;
    public ConcurrentHashMap<Long, Integer> onlinePrivacy;
    public Boolean paidReactionsAnonymous;
    public long paidReactionsAnonymousTime;
    private Runnable passwordCheckRunnable;
    public PeerColors peerColors;
    private final long peerDialogRequestTimeout;
    private final LongSparseArray peerDialogsRequested;
    public Set<String> pendingSuggestions;
    private LongSparseIntArray pendingUnreadCounter;
    public SparseArray<ImageUpdater> photoSuggestion;
    public int pmReadDateExpirePeriod;
    private LongSparseArray pollsToCheck;
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public String premiumBotUsername;
    public SparseIntArray premiumFeaturesTypesToPosition;
    public String premiumInvoiceSlug;
    public boolean premiumLocked;
    public String premiumManageSubscriptionUrl;
    public LongSparseArray printingStrings;
    public LongSparseArray printingStringsTypes;
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers;
    public PeerColors profilePeerColors;
    private TLRPC.Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public int publicLinksLimitDefault;
    public int publicLinksLimitPremium;
    public boolean qrLoginCamera;
    public int quickRepliesLimit;
    public int quickReplyMessagesLimit;
    public int quoteLengthMax;
    public int ratingDecay;
    private LongSparseArray reactionTags;
    public int reactionsInChatMax;
    public int reactionsUniqMax;
    public int reactionsUserMaxDefault;
    public int reactionsUserMaxPremium;
    private ArrayList<ReadTask> readTasks;
    private LongSparseArray readTasksMap;
    private Runnable recentEmojiStatusUpdateRunnable;
    private long recentEmojiStatusUpdateRunnableTime;
    private long recentEmojiStatusUpdateRunnableTimeout;
    public int recommendedChannelsLimitDefault;
    public int recommendedChannelsLimitPremium;
    public boolean registeringForPush;
    private LongSparseArray reloadingMessages;
    private HashMap<String, ArrayList<MessageObject>> reloadingSavedWebpages;
    private LongSparseArray reloadingSavedWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages;
    private LongSparseArray reloadingScheduledWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages;
    private LongSparseArray reloadingWebpagesPending;
    public boolean remoteConfigLoaded;
    private ArrayList<ReadTask> repliesReadTasks;
    private Runnable requestIsUserPremiumBlockedRunnable;
    private boolean requestingContactToken;
    private TLRPC.messages_Dialogs resetDialogsAll;
    private TLRPC.TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int ringtoneDurationMax;
    public int ringtoneSizeMax;
    public int roundAudioBitrate;
    public int roundVideoBitrate;
    public int roundVideoSize;
    public boolean saveGifsWithStickers;
    public int savedDialogsPinnedLimitDefault;
    public int savedDialogsPinnedLimitPremium;
    public int savedGifsLimitDefault;
    public int savedGifsLimitPremium;
    public SavedMessagesController savedMessagesController;
    public boolean savedViewAsChats;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter;
    private LongSparseArray sendAsPeers;
    public LongSparseArray[] sendingTypings;
    private final HashSet<Long> sensitiveAgreed;
    private SparseBooleanArray serverDialogsEndReached;
    private LongSparseIntArray shortPollChannels;
    private LongSparseIntArray shortPollOnlines;
    public boolean showAnnualPerMonth;
    public boolean showFiltersTooltip;
    public int smallQueueMaxActiveOperations;
    public boolean smsjobsStickyNotificationEnabled;
    private DialogFilter sortingDialogFilter;
    public boolean sponsoredLinksInappAllow;
    private LongSparseArray sponsoredMessages;
    public boolean stargiftsBlocked;
    public int stargiftsConvertPeriodMax;
    public int stargiftsMessageLengthMax;
    public boolean starsGiftsEnabled;
    public boolean starsLocked;
    public long starsPaidPostAmountMax;
    public long starsPaidReactionAmountMax;
    public long starsRevenueWithdrawalMin;
    public long starsSubscriptionAmountMax;
    public float starsUsdSellRate1000;
    public float starsUsdWithdrawRate1000;
    private int statusRequest;
    private int statusSettingState;
    public int stealthModeCooldown;
    public int stealthModeFuture;
    public int stealthModePast;
    public int stickersFavedLimitDefault;
    public int stickersFavedLimitPremium;
    public long storiesChangelogUserId;
    public StoriesController storiesController;
    public String storiesEntities;
    public boolean storiesExportNopublicLink;
    public int storiesPinnedToTopCountMax;
    public String storiesPosting;
    public int storiesSentMonthlyLimitDefault;
    public int storiesSentMonthlyLimitPremium;
    public int storiesSentWeeklyLimitDefault;
    public int storiesSentWeeklyLimitPremium;
    public int storiesSuggestedReactionsLimitDefault;
    public int storiesSuggestedReactionsLimitPremium;
    public int storyCaptionLengthLimitDefault;
    public int storyCaptionLengthLimitPremium;
    public int storyExpiringLimitDefault;
    public int storyExpiringLimitPremium;
    public boolean storyQualityFull;
    public String storyVenueSearchBot;
    public boolean storyWeatherPreload;
    public boolean suggestContacts;
    public boolean suggestStickersApiOnly;
    public ArrayList<TLRPC.TL_dialogFilterSuggested> suggestedFilters;
    public String suggestedLangCode;
    public int telegramAntispamGroupSizeMin;
    public long telegramAntispamUserId;
    private Runnable themeCheckRunnable;
    private HashMap<String, ReadTask> threadsReadTasksMap;
    public String tonProxyAddress;
    private TopicsController topicsController;
    public int topicsPinnedLimit;
    public int totalBlockedCount;
    public int transcribeAudioTrialCooldownUntil;
    public int transcribeAudioTrialCurrentNumber;
    public int transcribeAudioTrialDurationMax;
    public int transcribeAudioTrialWeeklyNumber;
    public int transcribeButtonPressed;
    private TranslateController translateController;
    public UnconfirmedAuthController unconfirmedAuthController;
    public int unreadUnmutedDialogs;
    public int updateCheckDelay;
    private Comparator<TLRPC.Update> updatesComparator;
    private final LongSparseArray updatesQueueChannels;
    private ArrayList<TLRPC.Updates> updatesQueuePts;
    private ArrayList<TLRPC.Updates> updatesQueueQts;
    private ArrayList<TLRPC.Updates> updatesQueueSeq;
    private LongSparseLongArray updatesStartWaitTimeChannels;
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    public boolean uploadMarkupVideo;
    public int uploadMaxFileParts;
    public int uploadMaxFilePartsPremium;
    public float uploadPremiumSpeedupDownload;
    public int uploadPremiumSpeedupNotifyPeriod;
    public float uploadPremiumSpeedupUpload;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes;
    public String uploadingWallpaper;
    public Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private UserNameResolver userNameResolver;
    private final ConcurrentHashMap<Long, TLRPC.User> users;
    public String venueSearchBot;
    public boolean videoIgnoreAltDocuments;
    private ArrayList<Long> visibleDialogMainThreadIds;
    private ArrayList<Long> visibleScheduledDialogMainThreadIds;
    public String weatherSearchUsername;
    public Set<String> webAppAllowedProtocols;
    public int webFileDatacenterId;
    public String youtubePipType;
    private static volatile MessagesController[] Instance = new MessagesController[4];
    private static final Object[] lockObjects = new Object[4];

    /* loaded from: classes3.dex */
    class 1 extends CacheFetcher<Integer, TLRPC.TL_help_appConfig> {
        1() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Removed duplicated region for block: B:33:0x006a  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public static /* synthetic */ void lambda$getLocal$1(int i, Utilities.Callback2 callback2) {
            SQLiteCursor sQLiteCursor;
            TLRPC.help_AppConfig help_appconfig;
            NativeByteBuffer byteBufferValue;
            SQLiteCursor sQLiteCursor2 = null;
            try {
                try {
                    SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                    if (database != null) {
                        sQLiteCursor = database.queryFinalized("SELECT data FROM app_config", new Object[0]);
                        try {
                            if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                                help_appconfig = null;
                            } else {
                                help_appconfig = TLRPC.help_AppConfig.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), true);
                                byteBufferValue.reuse();
                            }
                            if (help_appconfig instanceof TLRPC.TL_help_appConfig) {
                                callback2.run(Long.valueOf(r4.hash), (TLRPC.TL_help_appConfig) help_appconfig);
                            } else {
                                callback2.run(0L, null);
                            }
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e) {
                            e = e;
                            FileLog.e(e);
                            callback2.run(0L, null);
                            if (sQLiteCursor != null) {
                                sQLiteCursor2 = sQLiteCursor;
                                sQLiteCursor2.dispose();
                            }
                            return;
                        }
                    }
                    if (sQLiteCursor2 == null) {
                        return;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor2 = i;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
            sQLiteCursor2.dispose();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getRemote$0(Utilities.Callback4 callback4, TLObject tLObject, TLRPC.TL_error tL_error) {
            String str;
            int i;
            if (tLObject instanceof TLRPC.TL_help_appConfigNotModified) {
                Boolean bool = Boolean.TRUE;
                callback4.run(bool, null, 0L, bool);
                return;
            }
            if (tLObject instanceof TLRPC.TL_help_appConfig) {
                callback4.run(Boolean.FALSE, (TLRPC.TL_help_appConfig) tLObject, Long.valueOf(r5.hash), Boolean.TRUE);
                return;
            }
            StringBuilder sb = new StringBuilder();
            sb.append("getting appconfig error ");
            if (tL_error != null) {
                str = tL_error.code + " " + tL_error.text;
            } else {
                str = "";
            }
            sb.append(str);
            FileLog.e(sb.toString());
            callback4.run(Boolean.FALSE, null, 0L, Boolean.valueOf(tL_error == null || !((i = tL_error.code) == -2000 || i == -2001)));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setLocal$2(int i, TLRPC.TL_help_appConfig tL_help_appConfig) {
            try {
                SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                if (database != null) {
                    database.executeFast("DELETE FROM app_config").stepThis().dispose();
                    if (tL_help_appConfig != null) {
                        SQLitePreparedStatement executeFast = database.executeFast("INSERT INTO app_config VALUES(?)");
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_help_appConfig.getObjectSize());
                        tL_help_appConfig.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        executeFast.dispose();
                    }
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void getLocal(final int i, Integer num, final Utilities.Callback2<Long, TLRPC.TL_help_appConfig> callback2) {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.1.lambda$getLocal$1(i, callback2);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void getRemote(int i, Integer num, long j, final Utilities.Callback4<Boolean, TLRPC.TL_help_appConfig, Long, Boolean> callback4) {
            TLRPC.TL_help_getAppConfig tL_help_getAppConfig = new TLRPC.TL_help_getAppConfig();
            tL_help_getAppConfig.hash = (int) j;
            MessagesController.this.getConnectionsManager().sendRequest(tL_help_getAppConfig, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda0
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.1.lambda$getRemote$0(Utilities.Callback4.this, tLObject, tL_error);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void setLocal(final int i, Integer num, final TLRPC.TL_help_appConfig tL_help_appConfig, long j) {
            MessagesStorage.getInstance(i).getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.1.lambda$setLocal$2(i, tL_help_appConfig);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public boolean useCache(Integer num) {
            return false;
        }
    }

    /* loaded from: classes3.dex */
    class 4 extends CacheFetcher<Integer, TLRPC.messages_AvailableEffects> {
        4() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Removed duplicated region for block: B:33:0x006a  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public static /* synthetic */ void lambda$getLocal$1(int i, Utilities.Callback2 callback2) {
            SQLiteCursor sQLiteCursor;
            TLRPC.messages_AvailableEffects messages_availableeffects;
            NativeByteBuffer byteBufferValue;
            SQLiteCursor sQLiteCursor2 = null;
            try {
                try {
                    SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                    if (database != null) {
                        sQLiteCursor = database.queryFinalized("SELECT data FROM effects", new Object[0]);
                        try {
                            if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                                messages_availableeffects = null;
                            } else {
                                messages_availableeffects = TLRPC.messages_AvailableEffects.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), true);
                                byteBufferValue.reuse();
                            }
                            if (messages_availableeffects instanceof TLRPC.TL_messages_availableEffects) {
                                callback2.run(Long.valueOf(r4.hash), (TLRPC.TL_messages_availableEffects) messages_availableeffects);
                            } else {
                                callback2.run(0L, null);
                            }
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e) {
                            e = e;
                            FileLog.e(e);
                            callback2.run(0L, null);
                            if (sQLiteCursor != null) {
                                sQLiteCursor2 = sQLiteCursor;
                                sQLiteCursor2.dispose();
                            }
                            return;
                        }
                    }
                    if (sQLiteCursor2 == null) {
                        return;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor2 = i;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
            sQLiteCursor2.dispose();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getRemote$0(Utilities.Callback4 callback4, TLObject tLObject, TLRPC.TL_error tL_error) {
            String str;
            int i;
            if (tLObject instanceof TLRPC.TL_messages_availableEffectsNotModified) {
                Boolean bool = Boolean.TRUE;
                callback4.run(bool, null, 0L, bool);
                return;
            }
            if (tLObject instanceof TLRPC.TL_messages_availableEffects) {
                callback4.run(Boolean.FALSE, (TLRPC.TL_messages_availableEffects) tLObject, Long.valueOf(r5.hash), Boolean.TRUE);
                return;
            }
            StringBuilder sb = new StringBuilder();
            sb.append("getting available effects error ");
            if (tL_error != null) {
                str = tL_error.code + " " + tL_error.text;
            } else {
                str = "";
            }
            sb.append(str);
            FileLog.e(sb.toString());
            callback4.run(Boolean.FALSE, null, 0L, Boolean.valueOf(tL_error == null || !((i = tL_error.code) == -2000 || i == -2001)));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setLocal$2(int i, TLRPC.messages_AvailableEffects messages_availableeffects) {
            try {
                SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                if (database != null) {
                    database.executeFast("DELETE FROM effects").stepThis().dispose();
                    if (messages_availableeffects != null) {
                        SQLitePreparedStatement executeFast = database.executeFast("INSERT INTO effects VALUES(?)");
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messages_availableeffects.getObjectSize());
                        messages_availableeffects.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        executeFast.dispose();
                    }
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public boolean emitLocal(Integer num) {
            return true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void getLocal(final int i, Integer num, final Utilities.Callback2<Long, TLRPC.messages_AvailableEffects> callback2) {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.4.lambda$getLocal$1(i, callback2);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void getRemote(int i, Integer num, long j, final Utilities.Callback4<Boolean, TLRPC.messages_AvailableEffects, Long, Boolean> callback4) {
            TLRPC.TL_messages_getAvailableEffects tL_messages_getAvailableEffects = new TLRPC.TL_messages_getAvailableEffects();
            tL_messages_getAvailableEffects.hash = (int) j;
            MessagesController.this.getConnectionsManager().sendRequest(tL_messages_getAvailableEffects, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda0
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.4.lambda$getRemote$0(Utilities.Callback4.this, tLObject, tL_error);
                }
            });
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected long getSavedLastTimeRequested(int i) {
            return MessagesController.this.mainPreferences.getLong("effects_last_" + i, 0L);
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected boolean saveLastTimeRequested() {
            return true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.messenger.CacheFetcher
        public void setLocal(final int i, Integer num, final TLRPC.messages_AvailableEffects messages_availableeffects, long j) {
            MessagesStorage.getInstance(i).getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.4.lambda$setLocal$2(i, messages_availableeffects);
                }
            });
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected void setSavedLastTimeRequested(int i, long j) {
            MessagesController.this.mainPreferences.edit().putLong("effects_last_" + i, j).apply();
        }
    }

    /* loaded from: classes3.dex */
    public static class ChannelRecommendations {
        public final ArrayList<TLRPC.Chat> chats = new ArrayList<>();
        public int more;
        public boolean wasPremium;

        public static boolean hasRecommendations(int i, long j) {
            return hasRecommendations(MessagesController.getInstance(i).getChannelRecommendations(j));
        }

        public static boolean hasRecommendations(ChannelRecommendations channelRecommendations) {
            return (channelRecommendations == null || channelRecommendations.chats.isEmpty()) ? false : true;
        }
    }

    /* loaded from: classes3.dex */
    class ChatlistUpdatesStat {
        long lastRequestTime;
        TL_chatlists.TL_chatlists_chatlistUpdates lastValue;
        boolean loading;

        public ChatlistUpdatesStat() {
            this.loading = true;
        }

        public ChatlistUpdatesStat(TL_chatlists.TL_chatlists_chatlistUpdates tL_chatlists_chatlistUpdates) {
            this.loading = false;
            this.lastRequestTime = System.currentTimeMillis();
            this.lastValue = tL_chatlists_chatlistUpdates;
        }
    }

    /* loaded from: classes3.dex */
    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public int color;
        public int flags;
        public int id;
        public int localId;
        public boolean locked;
        public String name;
        public int order;
        public volatile int pendingUnreadCount;
        public int unreadCount;
        public ArrayList<Long> alwaysShow = new ArrayList<>();
        public ArrayList<Long> neverShow = new ArrayList<>();
        public LongSparseIntArray pinnedDialogs = new LongSparseIntArray();
        public ArrayList<TLRPC.Dialog> dialogs = new ArrayList<>();
        public ArrayList<TLRPC.Dialog> dialogsForward = new ArrayList<>();
        public ArrayList<TL_chatlists.TL_exportedChatlistInvite> invites = null;

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean alwaysShow(int i, TLRPC.Dialog dialog) {
            TLRPC.EncryptedChat encryptedChat;
            if (dialog == null) {
                return false;
            }
            long j = dialog.id;
            if (DialogObject.isEncryptedDialog(j) && (encryptedChat = MessagesController.getInstance(i).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                j = encryptedChat.user_id;
            }
            return this.alwaysShow.contains(Long.valueOf(j));
        }

        public boolean includesDialog(AccountInstance accountInstance, long j) {
            TLRPC.Dialog dialog = (TLRPC.Dialog) accountInstance.getMessagesController().dialogs_dict.get(j);
            if (dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, j, dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, long j, TLRPC.Dialog dialog) {
            TLRPC.Chat chat;
            if (this.neverShow.contains(Long.valueOf(j))) {
                return false;
            }
            if (this.alwaysShow.contains(Long.valueOf(j))) {
                return true;
            }
            if (dialog.folder_id != 0 && (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) != 0) {
                return false;
            }
            MessagesController messagesController = accountInstance.getMessagesController();
            ContactsController contactsController = accountInstance.getContactsController();
            if (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(dialog.id, 0L) && dialog.unread_mentions_count == 0) || ((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0 && messagesController.getDialogUnreadCount(dialog) == 0 && !dialog.unread_mark && dialog.unread_mentions_count == 0)) {
                return false;
            }
            if (j > 0) {
                TLRPC.User user = messagesController.getUser(Long.valueOf(j));
                if (user != null) {
                    if (user.bot) {
                        if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                            return true;
                        }
                    } else if (user.self || user.contact || contactsController.isContact(j)) {
                        if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                            return true;
                        }
                    } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                        return true;
                    }
                }
            } else if (j < 0 && (chat = messagesController.getChat(Long.valueOf(-j))) != null) {
                if (!ChatObject.isChannel(chat) || chat.megagroup) {
                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                        return true;
                    }
                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                    return true;
                }
            }
            return false;
        }

        public boolean isChatlist() {
            return (this.flags & MessagesController.DIALOG_FILTER_FLAG_CHATLIST) > 0;
        }

        public boolean isDefault() {
            return this.id == 0;
        }

        public boolean isMyChatlist() {
            return isChatlist() && (this.flags & MessagesController.DIALOG_FILTER_FLAG_CHATLIST_ADMIN) > 0;
        }
    }

    /* loaded from: classes3.dex */
    public class DialogPhotos {
        public static final int STEP = 80;
        public final long dialogId;
        private boolean loading;
        public final ArrayList<TLRPC.Photo> photos = new ArrayList<>();
        public boolean fromCache = true;
        public boolean loaded = false;

        public DialogPhotos(long j) {
            this.dialogId = j;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$load$0(TLRPC.photos_Photos photos_photos, int i, int i2) {
            MessagesController.this.putUsers(photos_photos.users, false);
            onLoaded(i, i2, photos_photos);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$load$1(final int i, final int i2, TLObject tLObject, TLRPC.TL_error tL_error) {
            if (tL_error == null) {
                final TLRPC.photos_Photos photos_photos = (TLRPC.photos_Photos) tLObject;
                MessagesController.this.getMessagesStorage().putUsersAndChats(photos_photos.users, null, true, true);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.DialogPhotos.this.lambda$load$0(photos_photos, i, i2);
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$load$2(TLRPC.messages_Messages messages_messages, int i, int i2) {
            TLRPC.Photo photo;
            MessagesController.this.putUsers(messages_messages.users, false);
            MessagesController.this.putChats(messages_messages.chats, false);
            TLRPC.TL_photos_photos tL_photos_photos = new TLRPC.TL_photos_photos();
            tL_photos_photos.count = messages_messages.count;
            for (int i3 = 0; i3 < messages_messages.messages.size(); i3++) {
                TLRPC.MessageAction messageAction = messages_messages.messages.get(i3).action;
                if (messageAction != null && (photo = messageAction.photo) != null) {
                    tL_photos_photos.photos.add(photo);
                }
            }
            onLoaded(i, i2, tL_photos_photos);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$load$3(final int i, final int i2, TLObject tLObject, TLRPC.TL_error tL_error) {
            if (tL_error == null) {
                final TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
                MessagesController.this.getMessagesStorage().putUsersAndChats(messages_messages.users, messages_messages.chats, true, true);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.DialogPhotos.this.lambda$load$2(messages_messages, i, i2);
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadCache$4(int i, HashMap hashMap) {
            this.photos.clear();
            for (int i2 = 0; i2 < i; i2++) {
                this.photos.add(null);
            }
            for (Map.Entry entry : hashMap.entrySet()) {
                this.photos.set(((Integer) entry.getKey()).intValue(), (TLRPC.Photo) entry.getValue());
            }
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            load(0, 80);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadCache$5() {
            int i;
            int readInt32;
            int i2 = 0;
            SQLiteDatabase database = MessagesController.this.getMessagesStorage().getDatabase();
            final HashMap hashMap = new HashMap();
            SQLiteCursor sQLiteCursor = null;
            try {
                try {
                    Locale locale = Locale.US;
                    SQLiteCursor queryFinalized = database.queryFinalized(String.format(locale, "SELECT count FROM dialog_photos_count WHERE uid = %d", Long.valueOf(this.dialogId)), new Object[0]);
                    try {
                        try {
                            i = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            try {
                                queryFinalized.dispose();
                                try {
                                    SQLiteCursor queryFinalized2 = database.queryFinalized(String.format(locale, "SELECT num, data FROM dialog_photos WHERE uid = %d", Long.valueOf(this.dialogId)), new Object[0]);
                                    while (queryFinalized2.next()) {
                                        try {
                                            int intValue = queryFinalized2.intValue(0);
                                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                                            TLRPC.Photo TLdeserialize = (byteBufferValue == null || (readInt32 = byteBufferValue.readInt32(false)) == 1450380236) ? null : TLRPC.Photo.TLdeserialize(byteBufferValue, readInt32, false);
                                            if (TLdeserialize != null) {
                                                i = Math.max(intValue + 1, i);
                                                hashMap.put(Integer.valueOf(intValue), TLdeserialize);
                                            }
                                        } catch (Exception unused) {
                                            sQLiteCursor = queryFinalized2;
                                            i2 = i;
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            i = i2;
                                            final int max = Math.max(i, hashMap.size());
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda6
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.DialogPhotos.this.lambda$loadCache$4(max, hashMap);
                                                }
                                            });
                                        } catch (Throwable th) {
                                            th = th;
                                            sQLiteCursor = queryFinalized2;
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            throw th;
                                        }
                                    }
                                    queryFinalized2.dispose();
                                } catch (Exception unused2) {
                                }
                            } catch (Exception unused3) {
                                sQLiteCursor = queryFinalized;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                        }
                    } catch (Exception unused4) {
                        sQLiteCursor = queryFinalized;
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            } catch (Exception unused5) {
            }
            final int max2 = Math.max(i, hashMap.size());
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.DialogPhotos.this.lambda$loadCache$4(max2, hashMap);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$saveCache$6() {
            SQLiteDatabase database = MessagesController.this.getMessagesStorage().getDatabase();
            SQLitePreparedStatement sQLitePreparedStatement = null;
            try {
                database.executeFast("DELETE FROM dialog_photos WHERE uid = " + this.dialogId).stepThis().dispose();
                database.executeFast("DELETE FROM dialog_photos_count WHERE uid = " + this.dialogId).stepThis().dispose();
                database.executeFast("REPLACE INTO dialog_photos_count VALUES(" + this.dialogId + ", " + this.photos.size() + ")").stepThis().dispose();
                sQLitePreparedStatement = database.executeFast("REPLACE INTO dialog_photos VALUES(?, ?, ?, ?)");
                for (int i = 0; i < this.photos.size(); i++) {
                    TLRPC.Photo photo = this.photos.get(i);
                    if (photo != null) {
                        if (photo.file_reference == null) {
                            photo.file_reference = new byte[0];
                        }
                        sQLitePreparedStatement.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(photo.getObjectSize());
                        photo.serializeToStream(nativeByteBuffer);
                        sQLitePreparedStatement.bindLong(1, this.dialogId);
                        sQLitePreparedStatement.bindLong(2, photo.id);
                        sQLitePreparedStatement.bindInteger(3, i);
                        sQLitePreparedStatement.bindByteBuffer(4, nativeByteBuffer);
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    }
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception unused) {
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            } catch (Throwable th) {
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        }

        private void onLoaded(int i, int i2, TLRPC.photos_Photos photos_photos) {
            boolean z = this.loaded;
            this.loading = false;
            this.loaded = true;
            this.fromCache = false;
            int max = Math.max(photos_photos.count, photos_photos.photos.size());
            photos_photos.count = max;
            boolean z2 = max != this.photos.size() || i + i2 > this.photos.size();
            if (!z2) {
                int i3 = 0;
                while (true) {
                    if (i3 >= photos_photos.photos.size()) {
                        break;
                    }
                    int i4 = i + i3;
                    if (this.photos.get(i4) != null && this.photos.get(i4).id != photos_photos.photos.get(i3).id) {
                        z2 = true;
                        break;
                    }
                    i3++;
                }
            }
            if (z2) {
                this.photos.clear();
                for (int i5 = 0; i5 < photos_photos.count; i5++) {
                    int i6 = i5 - i;
                    this.photos.add((i6 < 0 || i6 >= photos_photos.photos.size()) ? null : photos_photos.photos.get(i6));
                }
            } else {
                for (int i7 = 0; i7 < photos_photos.photos.size(); i7++) {
                    this.photos.set(i + i7, photos_photos.photos.get(i7));
                }
            }
            saveCache();
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            if (z || i != 0 || i2 >= this.photos.size() || this.photos.size() - i2 <= 80) {
                return;
            }
            load(this.photos.size() - 80, 80);
        }

        private boolean removePhotoInternal(long j) {
            int i = 0;
            boolean z = false;
            while (i < this.photos.size()) {
                TLRPC.Photo photo = this.photos.get(i);
                if (photo != null && photo.id == j) {
                    this.photos.remove(i);
                    i--;
                    z = true;
                }
                i++;
            }
            return z;
        }

        private void saveCache() {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.DialogPhotos.this.lambda$saveCache$6();
                }
            });
        }

        public void addPhotoAtStart(TLRPC.Photo photo) {
        }

        public int getCount() {
            return this.photos.size();
        }

        public void load(final int i, final int i2) {
            if (this.loading || i2 <= 0 || i < 0) {
                return;
            }
            this.loading = true;
            long j = this.dialogId;
            if (j < 0) {
                TLRPC.TL_messages_search tL_messages_search = new TLRPC.TL_messages_search();
                tL_messages_search.filter = new TLRPC.TL_inputMessagesFilterChatPhotos();
                tL_messages_search.add_offset = i;
                tL_messages_search.limit = i2;
                tL_messages_search.offset_id = 0;
                tL_messages_search.q = "";
                tL_messages_search.peer = MessagesController.this.getInputPeer(this.dialogId);
                MessagesController.this.getConnectionsManager().sendRequest(tL_messages_search, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda4
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.DialogPhotos.this.lambda$load$3(i, i2, tLObject, tL_error);
                    }
                });
                return;
            }
            TLRPC.User user = MessagesController.this.getUser(Long.valueOf(j));
            if (user == null) {
                this.loading = false;
                return;
            }
            TLRPC.TL_photos_getUserPhotos tL_photos_getUserPhotos = new TLRPC.TL_photos_getUserPhotos();
            tL_photos_getUserPhotos.offset = i;
            tL_photos_getUserPhotos.limit = i2;
            tL_photos_getUserPhotos.max_id = 0L;
            tL_photos_getUserPhotos.user_id = MessagesController.this.getInputUser(user);
            MessagesController.this.getConnectionsManager().sendRequest(tL_photos_getUserPhotos, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda3
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.DialogPhotos.this.lambda$load$1(i, i2, tLObject, tL_error);
                }
            });
        }

        public void loadAfter(int i, boolean z) {
            int i2 = 0;
            if (this.photos.isEmpty()) {
                load(0, 80);
                return;
            }
            if (i < 0) {
                i += this.photos.size();
            }
            if (i >= this.photos.size()) {
                i -= this.photos.size();
            }
            if (i < 0 || i >= this.photos.size()) {
                return;
            }
            for (int i3 = 0; i3 < this.photos.size(); i3++) {
                if (this.photos.get(i3) == null) {
                    if (z) {
                        while (this.photos.get(i) != null) {
                            i++;
                            if (i >= this.photos.size()) {
                                i = 0;
                            }
                        }
                        while (i2 <= 80) {
                            int i4 = i + i2;
                            if (i4 >= this.photos.size() || this.photos.get(i4) != null) {
                                break;
                            } else {
                                i2++;
                            }
                        }
                        if (i2 <= 0) {
                            return;
                        }
                    } else {
                        while (this.photos.get(i) != null) {
                            i--;
                            if (i < 0) {
                                i = this.photos.size() - 1;
                            }
                        }
                        while (i2 <= 80) {
                            int i5 = i - i2;
                            if (i5 < 0 || this.photos.get(i5) != null) {
                                break;
                            } else {
                                i2++;
                            }
                        }
                        if (i2 <= 0) {
                            return;
                        } else {
                            i -= i2;
                        }
                    }
                    load(i, i2);
                    return;
                }
            }
        }

        public void loadCache() {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.DialogPhotos.this.lambda$loadCache$5();
                }
            });
        }

        public void moveToStart(int i) {
            if (i < 0 || i >= this.photos.size()) {
                return;
            }
            ArrayList<TLRPC.Photo> arrayList = this.photos;
            arrayList.add(0, arrayList.remove(i));
            saveCache();
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
        }

        public void removePhoto(long j) {
            if (removePhotoInternal(j)) {
                saveCache();
                MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            }
        }

        public void reset() {
            this.photos.clear();
            this.fromCache = true;
            saveCache();
        }
    }

    /* loaded from: classes3.dex */
    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int i, int i2) {
            this.frame = i;
            this.num = i2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof DiceFrameSuccess)) {
                return false;
            }
            DiceFrameSuccess diceFrameSuccess = (DiceFrameSuccess) obj;
            return this.frame == diceFrameSuccess.frame && this.num == diceFrameSuccess.num;
        }
    }

    /* loaded from: classes3.dex */
    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long j, long j2, String str) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = Base64.decode(str, 8);
        }

        public EmojiSound(long j, long j2, byte[] bArr) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = bArr;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof EmojiSound)) {
                return false;
            }
            EmojiSound emojiSound = (EmojiSound) obj;
            return this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference);
        }
    }

    /* loaded from: classes3.dex */
    public interface ErrorDelegate {
        boolean run(TLRPC.TL_error tL_error);
    }

    /* loaded from: classes3.dex */
    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String str, String[] strArr, String str2) {
            this.title = str;
            this.path = strArr;
            this.url = str2;
        }

        public boolean equals(Object obj) {
            if (obj instanceof FaqSearchResult) {
                return this.title.equals(((FaqSearchResult) obj).title);
            }
            return false;
        }

        public String toString() {
            SerializedData serializedData = new SerializedData();
            serializedData.writeInt32(this.num);
            int i = 0;
            serializedData.writeInt32(0);
            serializedData.writeString(this.title);
            String[] strArr = this.path;
            serializedData.writeInt32(strArr != null ? strArr.length : 0);
            if (this.path != null) {
                while (true) {
                    String[] strArr2 = this.path;
                    if (i >= strArr2.length) {
                        break;
                    }
                    serializedData.writeString(strArr2[i]);
                    i++;
                }
            }
            serializedData.writeString(this.url);
            return Utilities.bytesToHex(serializedData.toByteArray());
        }
    }

    /* loaded from: classes3.dex */
    public interface IsInChatCheckedCallback {
        void run(boolean z, TLRPC.TL_chatAdminRights tL_chatAdminRights, String str);
    }

    /* loaded from: classes3.dex */
    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    /* loaded from: classes3.dex */
    public interface NewMessageCallback {
        boolean onMessageReceived(TLRPC.Message message);
    }

    /* loaded from: classes3.dex */
    public static class PeerColor {
        public int channelLvl;
        private final int[] colors = new int[6];
        private final int[] darkColors = new int[6];
        public int groupLvl;
        public boolean hidden;
        public int id;
        public boolean isDefaultName;

        public static PeerColor fromString(String str) {
            int i;
            int i2;
            int i3;
            int indexOf;
            if (str != null && !str.isEmpty()) {
                if (str.charAt(0) == '#') {
                    boolean z = str.length() > 1 && str.charAt(1) == 'H';
                    int i4 = z ? 2 : 1;
                    if (str.length() <= i4 || str.charAt(i4) != '[' || (indexOf = str.indexOf(93)) <= i4) {
                        i = i4;
                        i2 = 0;
                        i3 = 0;
                    } else {
                        String substring = str.substring(i4 + 1, indexOf);
                        if (substring.contains(",")) {
                            String[] split = substring.split(",");
                            i3 = Utilities.parseInt((CharSequence) split[0]).intValue();
                            i2 = Utilities.parseInt((CharSequence) split[1]).intValue();
                        } else {
                            i3 = Utilities.parseInt((CharSequence) substring).intValue();
                            i2 = 0;
                        }
                        i = indexOf + 1;
                    }
                    int indexOf2 = str.indexOf(123);
                    if (indexOf2 < 0) {
                        return null;
                    }
                    try {
                        PeerColor peerColor = new PeerColor();
                        peerColor.id = Utilities.parseInt((CharSequence) str.substring(i, indexOf2)).intValue();
                        peerColor.hidden = z;
                        peerColor.channelLvl = i3;
                        peerColor.groupLvl = i2;
                        String[] split2 = str.substring(indexOf2 + 1, str.length() - 1).split("@");
                        String[] split3 = split2[0].split(",");
                        int i5 = 0;
                        while (i5 < 6) {
                            int[] iArr = peerColor.colors;
                            int i6 = i5 + 1;
                            iArr[i5] = split3.length >= i6 ? Utilities.parseInt((CharSequence) split3[i5]).intValue() : iArr[0];
                            i5 = i6;
                        }
                        if (split2.length >= 2) {
                            String[] split4 = split2[1].split(",");
                            int i7 = 0;
                            while (i7 < 6) {
                                int[] iArr2 = peerColor.darkColors;
                                int i8 = i7 + 1;
                                iArr2[i7] = split4.length >= i8 ? Utilities.parseInt((CharSequence) split4[i7]).intValue() : iArr2[0];
                                i7 = i8;
                            }
                        } else {
                            for (int i9 = 0; i9 < 6; i9++) {
                                peerColor.darkColors[i9] = peerColor.colors[i9];
                            }
                        }
                        return peerColor;
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
            }
            return null;
        }

        public static PeerColor fromTL(TLRPC.TL_help_peerColorOption tL_help_peerColorOption) {
            if (tL_help_peerColorOption == null) {
                return null;
            }
            PeerColor peerColor = new PeerColor();
            peerColor.id = tL_help_peerColorOption.color_id;
            peerColor.hidden = tL_help_peerColorOption.hidden;
            int i = tL_help_peerColorOption.flags;
            if ((i & 8) != 0) {
                peerColor.channelLvl = tL_help_peerColorOption.channel_min_level;
            }
            if ((i & 16) != 0) {
                peerColor.groupLvl = tL_help_peerColorOption.group_min_level;
            }
            System.arraycopy(optionToColors(tL_help_peerColorOption.colors), 0, peerColor.colors, 0, 6);
            System.arraycopy(optionToColors(tL_help_peerColorOption.dark_colors), 0, peerColor.darkColors, 0, 6);
            return peerColor;
        }

        public static int[] optionToColors(TLRPC.help_PeerColorSet help_peercolorset) {
            ArrayList<Integer> arrayList;
            int[] iArr = new int[6];
            iArr[0] = 0;
            iArr[1] = 0;
            iArr[2] = 0;
            iArr[3] = 0;
            iArr[4] = 0;
            iArr[5] = 0;
            if (help_peercolorset instanceof TLRPC.TL_help_peerColorSet) {
                arrayList = ((TLRPC.TL_help_peerColorSet) help_peercolorset).colors;
            } else if (help_peercolorset instanceof TLRPC.TL_help_peerColorProfileSet) {
                TLRPC.TL_help_peerColorProfileSet tL_help_peerColorProfileSet = (TLRPC.TL_help_peerColorProfileSet) help_peercolorset;
                ArrayList<Integer> arrayList2 = tL_help_peerColorProfileSet.palette_colors;
                ArrayList<Integer> arrayList3 = tL_help_peerColorProfileSet.bg_colors;
                ArrayList<Integer> arrayList4 = tL_help_peerColorProfileSet.story_colors;
                ArrayList<Integer> arrayList5 = new ArrayList<>();
                if (arrayList2 != null) {
                    for (int i = 0; i < Math.min(2, arrayList2.size()); i++) {
                        arrayList5.add(arrayList2.get(i));
                    }
                }
                if (arrayList3 != null) {
                    for (int i2 = 0; i2 < Math.min(2, arrayList3.size()); i2++) {
                        arrayList5.add(arrayList3.get(i2));
                    }
                }
                if (arrayList4 != null) {
                    for (int i3 = 0; i3 < Math.min(2, arrayList4.size()); i3++) {
                        arrayList5.add(arrayList4.get(i3));
                    }
                }
                arrayList = arrayList5;
            } else {
                arrayList = null;
            }
            if (arrayList != null) {
                if (arrayList.size() > 0) {
                    Arrays.fill(iArr, arrayList.get(0).intValue() | (-16777216));
                }
                for (int i4 = 0; i4 < Math.min(6, arrayList.size()); i4++) {
                    iArr[i4] = arrayList.get(i4).intValue() | (-16777216);
                }
            }
            return iArr;
        }

        public void appendString(StringBuilder sb) {
            sb.append("#");
            if (this.hidden) {
                sb.append("H");
            }
            if (this.channelLvl != 0 || this.groupLvl != 0) {
                sb.append("[");
                sb.append(this.channelLvl);
                sb.append(",");
                sb.append(this.groupLvl);
                sb.append("]");
            }
            sb.append(this.id);
            sb.append("{");
            sb.append(this.colors[0]);
            int[] iArr = this.colors;
            if (iArr[1] != iArr[0]) {
                sb.append(",");
                sb.append(this.colors[1]);
                int[] iArr2 = this.colors;
                int i = iArr2[2];
                int i2 = iArr2[0];
                if (i != i2 || iArr2[3] != i2) {
                    sb.append(",");
                    sb.append(this.colors[2]);
                    sb.append(",");
                    sb.append(this.colors[3]);
                    int[] iArr3 = this.colors;
                    int i3 = iArr3[4];
                    int i4 = iArr3[0];
                    if (i3 != i4 || iArr3[5] != i4) {
                        sb.append(",");
                        sb.append(this.colors[4]);
                        sb.append(",");
                        sb.append(this.colors[5]);
                    }
                }
            }
            int[] iArr4 = this.darkColors;
            int i5 = iArr4[0];
            int[] iArr5 = this.colors;
            if (i5 != iArr5[0] || iArr4[1] != iArr5[1] || iArr4[2] != iArr5[2]) {
                sb.append("@");
                sb.append(this.darkColors[0]);
                int[] iArr6 = this.darkColors;
                if (iArr6[1] != iArr6[0]) {
                    sb.append(",");
                    sb.append(this.darkColors[1]);
                    int[] iArr7 = this.darkColors;
                    int i6 = iArr7[2];
                    int i7 = iArr7[0];
                    if (i6 != i7 || iArr7[3] != i7) {
                        sb.append(",");
                        sb.append(this.darkColors[2]);
                        sb.append(",");
                        sb.append(this.darkColors[3]);
                        int[] iArr8 = this.darkColors;
                        int i8 = iArr8[4];
                        int i9 = iArr8[0];
                        if (i8 != i9 || iArr8[5] != i9) {
                            sb.append(",");
                            sb.append(this.darkColors[4]);
                            sb.append(",");
                            sb.append(this.darkColors[5]);
                        }
                    }
                }
            }
            sb.append("}");
        }

        public int getAvatarColor1() {
            return ColorUtils.blendARGB(getBgColor2(false), getStoryColor2(false), 0.5f);
        }

        public int getAvatarColor2() {
            return ColorUtils.blendARGB(getBgColor1(false), getStoryColor1(false), 0.5f);
        }

        public int getBgColor1(boolean z) {
            return hasColor6(z) ? getColor3(z) : getColor2(z);
        }

        public int getBgColor2(boolean z) {
            return hasColor6(z) ? getColor4(z) : getColor2(z);
        }

        public int getColor(int i, Theme.ResourcesProvider resourcesProvider) {
            int i2;
            if (i < 0 || i > 5) {
                return 0;
            }
            if (!this.isDefaultName || (i2 = this.id) < 0 || i2 >= 7) {
                return (resourcesProvider != null ? resourcesProvider.isDark() : Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[i];
            }
            return Theme.getColor(Theme.keys_avatar_nameInMessage[i2], resourcesProvider);
        }

        public int getColor1() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[0];
        }

        public int getColor1(boolean z) {
            return (z ? this.darkColors : this.colors)[0];
        }

        public int getColor2() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[1];
        }

        public int getColor2(boolean z) {
            return (z ? this.darkColors : this.colors)[1];
        }

        public int getColor3() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[2];
        }

        public int getColor3(boolean z) {
            return (z ? this.darkColors : this.colors)[2];
        }

        public int getColor4() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[3];
        }

        public int getColor4(boolean z) {
            return (z ? this.darkColors : this.colors)[3];
        }

        public int getColor5() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[4];
        }

        public int getColor5(boolean z) {
            return (z ? this.darkColors : this.colors)[4];
        }

        public int getColor6(boolean z) {
            return (z ? this.darkColors : this.colors)[5];
        }

        public int getLvl(boolean z) {
            return z ? this.groupLvl : this.channelLvl;
        }

        public int getStoryColor1(boolean z) {
            return hasColor6(z) ? getColor5(z) : getColor3(z);
        }

        public int getStoryColor2(boolean z) {
            return hasColor6(z) ? getColor6(z) : getColor4(z);
        }

        public boolean hasColor2() {
            return getColor2() != getColor1();
        }

        public boolean hasColor2(boolean z) {
            return getColor2(z) != getColor1(z);
        }

        public boolean hasColor3() {
            return getColor3() != getColor1();
        }

        public boolean hasColor3(boolean z) {
            return getColor3(z) != getColor1(z);
        }

        public boolean hasColor6(boolean z) {
            return getColor6(z) != getColor1(z);
        }
    }

    /* loaded from: classes3.dex */
    public static class PeerColors {
        public static final int TYPE_NAME = 0;
        public static final int TYPE_PROFILE = 1;
        public final ArrayList<PeerColor> colors = new ArrayList<>();
        private final LongSparseArray colorsById = new LongSparseArray();
        public final int hash;
        public final int type;

        private PeerColors(int i, int i2) {
            this.type = i;
            this.hash = i2;
        }

        private static int color(String str) {
            return MessagesController$PeerColors$$ExternalSyntheticBackport0.m("ff" + str, 16);
        }

        public static PeerColors fromJSON(int i, TLRPC.TL_jsonObject tL_jsonObject, TLRPC.TL_jsonObject tL_jsonObject2, TLRPC.TL_jsonArray tL_jsonArray) {
            try {
                PeerColors peerColors = new PeerColors(i, 0);
                if (tL_jsonObject != null) {
                    Iterator<TLRPC.TL_jsonObjectValue> it = tL_jsonObject.value.iterator();
                    while (it.hasNext()) {
                        TLRPC.TL_jsonObjectValue next = it.next();
                        int intValue = Utilities.parseInt((CharSequence) next.key).intValue();
                        TLRPC.JSONValue jSONValue = next.value;
                        if (jSONValue instanceof TLRPC.TL_jsonArray) {
                            ArrayList<TLRPC.JSONValue> arrayList = ((TLRPC.TL_jsonArray) jSONValue).value;
                            if (!arrayList.isEmpty()) {
                                PeerColor peerColor = new PeerColor();
                                try {
                                    peerColor.id = intValue;
                                    int i2 = 0;
                                    while (i2 < 6) {
                                        int[] iArr = peerColor.colors;
                                        int[] iArr2 = peerColor.darkColors;
                                        int color = arrayList.size() > i2 ? color(((TLRPC.TL_jsonString) arrayList.get(i2)).value) : peerColor.colors[0];
                                        iArr2[i2] = color;
                                        iArr[i2] = color;
                                        i2++;
                                    }
                                    peerColor.isDefaultName = peerColor.id < 7 && i == 0;
                                    peerColors.colorsById.put(intValue, peerColor);
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                            }
                        }
                    }
                }
                if (tL_jsonObject2 != null) {
                    Iterator<TLRPC.TL_jsonObjectValue> it2 = tL_jsonObject2.value.iterator();
                    while (it2.hasNext()) {
                        TLRPC.TL_jsonObjectValue next2 = it2.next();
                        int intValue2 = Utilities.parseInt((CharSequence) next2.key).intValue();
                        TLRPC.JSONValue jSONValue2 = next2.value;
                        if (jSONValue2 instanceof TLRPC.TL_jsonArray) {
                            ArrayList<TLRPC.JSONValue> arrayList2 = ((TLRPC.TL_jsonArray) jSONValue2).value;
                            if (!arrayList2.isEmpty()) {
                                long j = intValue2;
                                PeerColor peerColor2 = (PeerColor) peerColors.colorsById.get(j);
                                if (peerColor2 != null) {
                                    try {
                                        peerColor2.id = intValue2;
                                        int i3 = 0;
                                        while (i3 < 6) {
                                            peerColor2.darkColors[i3] = arrayList2.size() > i3 ? color(((TLRPC.TL_jsonString) arrayList2.get(i3)).value) : peerColor2.darkColors[0];
                                            i3++;
                                        }
                                        peerColors.colorsById.put(j, peerColor2);
                                    } catch (Exception e2) {
                                        FileLog.e(e2);
                                    }
                                }
                            }
                        }
                    }
                }
                peerColors.colors.clear();
                if (tL_jsonArray != null) {
                    Iterator<TLRPC.JSONValue> it3 = tL_jsonArray.value.iterator();
                    while (it3.hasNext()) {
                        if (it3.next() instanceof TLRPC.TL_jsonNumber) {
                            PeerColor peerColor3 = (PeerColor) peerColors.colorsById.get((int) ((TLRPC.TL_jsonNumber) r11).value);
                            if (peerColor3 != null) {
                                peerColors.colors.add(peerColor3);
                            }
                        }
                    }
                }
                return peerColors;
            } catch (Exception e3) {
                FileLog.e(e3);
                return null;
            }
        }

        public static PeerColors fromString(int i, String str) {
            int i2;
            int indexOf;
            if (str == null) {
                return null;
            }
            if (!str.startsWith("@") || (indexOf = str.indexOf("^")) < 0) {
                i2 = 0;
            } else {
                i2 = Utilities.parseInt((CharSequence) str.substring(1, indexOf)).intValue();
                str = str.substring(indexOf + 1);
            }
            PeerColors peerColors = new PeerColors(i, i2);
            for (String str2 : str.split(";")) {
                PeerColor fromString = PeerColor.fromString(str2);
                if (fromString != null) {
                    fromString.isDefaultName = fromString.id < 7 && i == 0;
                    if (!fromString.hidden) {
                        peerColors.colors.add(fromString);
                    }
                    peerColors.colorsById.put(fromString.id, fromString);
                }
            }
            return peerColors;
        }

        public static PeerColors fromTL(int i, TLRPC.TL_help_peerColors tL_help_peerColors) {
            if (tL_help_peerColors == null) {
                return null;
            }
            try {
                PeerColors peerColors = new PeerColors(i, tL_help_peerColors.hash);
                for (int i2 = 0; i2 < tL_help_peerColors.colors.size(); i2++) {
                    PeerColor fromTL = PeerColor.fromTL(tL_help_peerColors.colors.get(i2));
                    if (fromTL != null) {
                        fromTL.isDefaultName = fromTL.id < 7 && i == 0;
                        if (!fromTL.hidden) {
                            peerColors.colors.add(fromTL);
                        }
                        peerColors.colorsById.put(fromTL.id, fromTL);
                    }
                }
                return peerColors;
            } catch (Exception e) {
                FileLog.e(e);
                return null;
            }
        }

        public int colorsAvailable(int i, boolean z) {
            int i2 = 0;
            for (int i3 = 0; i3 < this.colors.size(); i3++) {
                PeerColor peerColor = this.colors.get(i3);
                if (!peerColor.hidden && i >= peerColor.getLvl(z)) {
                    i2++;
                }
            }
            return i2;
        }

        public PeerColor getColor(int i) {
            return (PeerColor) this.colorsById.get(i);
        }

        public int maxLevel() {
            return maxLevel(false);
        }

        public int maxLevel(boolean z) {
            int i = 0;
            for (int i2 = 0; i2 < this.colors.size(); i2++) {
                PeerColor peerColor = this.colors.get(i2);
                if (!peerColor.hidden) {
                    i = Math.max(i, peerColor.getLvl(z));
                }
            }
            return i;
        }

        public int minLevel() {
            return minLevel(false);
        }

        public int minLevel(boolean z) {
            int maxLevel = maxLevel(z);
            for (int i = 0; i < this.colors.size(); i++) {
                PeerColor peerColor = this.colors.get(i);
                if (!peerColor.hidden) {
                    maxLevel = Math.min(maxLevel, peerColor.getLvl(z));
                }
            }
            return maxLevel;
        }

        public boolean needUpdate() {
            boolean z = true;
            boolean z2 = false;
            for (int i = 0; i < this.colors.size(); i++) {
                if (this.colors.get(i).channelLvl > 0) {
                    z = false;
                }
                if (this.colors.get(i).id < 7) {
                    z2 = true;
                }
            }
            if (this.type == 1 && !z) {
                Iterator<PeerColor> it = this.colors.iterator();
                while (true) {
                    if (!it.hasNext()) {
                        z = true;
                        break;
                    }
                    if (it.next().groupLvl > 0) {
                        z = false;
                        break;
                    }
                }
            }
            if (z) {
                return true;
            }
            return this.type == 0 && !z2;
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            if (this.hash != 0) {
                sb.append("@");
                sb.append(this.hash);
                sb.append("^");
            }
            for (int i = 0; i < this.colors.size(); i++) {
                PeerColor peerColor = this.colors.get(i);
                if (i > 0) {
                    sb.append(";");
                }
                peerColor.appendString(sb);
            }
            return sb.toString();
        }
    }

    /* loaded from: classes3.dex */
    public static class PrintingUser {
        public TLRPC.SendMessageAction action;
        public long lastTime;
        public long userId;
    }

    /* loaded from: classes3.dex */
    private static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }

        /* synthetic */ ReadTask(1 r1) {
            this();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    class SendAsPeersInfo {
        private long loadTime;
        private boolean loading;
        private TLRPC.TL_channels_sendAsPeers sendAsPeers;

        private SendAsPeersInfo() {
        }

        /* synthetic */ SendAsPeersInfo(MessagesController messagesController, 1 r2) {
            this();
        }
    }

    /* loaded from: classes3.dex */
    public class SponsoredMessagesInfo {
        public long loadTime;
        public boolean loading;
        public ArrayList<MessageObject> messages;
        public Integer posts_between;

        public SponsoredMessagesInfo() {
        }
    }

    /* loaded from: classes3.dex */
    private static class UserActionUpdatesPts extends TLRPC.Updates {
        private UserActionUpdatesPts() {
        }

        /* synthetic */ UserActionUpdatesPts(1 r1) {
            this();
        }
    }

    /* loaded from: classes3.dex */
    private static class UserActionUpdatesSeq extends TLRPC.Updates {
        private UserActionUpdatesSeq() {
        }

        /* synthetic */ UserActionUpdatesSeq(1 r1) {
            this();
        }
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
    }

    public MessagesController(int i) {
        super(i);
        Context context;
        String str;
        this.chats = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
        this.users = new ConcurrentHashMap<>(100, 1.0f, 3);
        this.objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.activeVoiceChatsMap = new HashMap<>();
        this.joiningToChannels = new ArrayList<>();
        this.exportedChats = new LongSparseArray();
        this.hintDialogs = new ArrayList<>();
        this.dialogsByFolder = new SparseArray<>();
        this.allDialogs = new ArrayList<>();
        this.dialogsForward = new ArrayList<>();
        this.dialogsServerOnly = new ArrayList<>();
        this.dialogsCanAddUsers = new ArrayList<>();
        this.dialogsMyChannels = new ArrayList<>();
        this.dialogsMyGroups = new ArrayList<>();
        this.dialogsChannelsOnly = new ArrayList<>();
        this.dialogsUsersOnly = new ArrayList<>();
        this.dialogsForBlock = new ArrayList<>();
        this.dialogsGroupsOnly = new ArrayList<>();
        this.selectedDialogFilter = new DialogFilter[2];
        this.dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.dialogs_dict = new LongSparseArray();
        this.dialogMessage = new LongSparseArray();
        this.dialogMessagesByRandomIds = new LongSparseArray();
        this.deletedHistory = new LongSparseIntArray();
        this.dialogMessagesByIds = new SparseArray<>();
        this.printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
        this.printingStrings = new LongSparseArray();
        this.printingStringsTypes = new LongSparseArray();
        this.sendingTypings = new LongSparseArray[12];
        this.onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
        this.pendingUnreadCounter = new LongSparseIntArray();
        this.chatlistFoldersUpdates = new SparseArray<>();
        this.largeQueueMaxActiveOperations = 2;
        this.smallQueueMaxActiveOperations = 5;
        this.storiesChangelogUserId = 777000L;
        this.giveawayAddPeersMax = 10L;
        this.giveawayPeriodMax = 7L;
        this.giveawayCountriesMax = 10L;
        this.giveawayBoostsPerPremium = 4L;
        this.boostsPerSentGift = 3L;
        this.loadingPeerSettings = new LongSparseArray();
        this.createdDialogIds = new ArrayList<>();
        this.createdScheduledDialogIds = new ArrayList<>();
        this.createdDialogMainThreadIds = new ArrayList<>();
        this.visibleDialogMainThreadIds = new ArrayList<>();
        this.visibleScheduledDialogMainThreadIds = new ArrayList<>();
        this.shortPollChannels = new LongSparseIntArray();
        this.needShortPollChannels = new LongSparseArray();
        this.shortPollOnlines = new LongSparseIntArray();
        this.needShortPollOnlines = new LongSparseArray();
        this.deletingDialogs = new LongSparseArray();
        this.clearingHistoryDialogs = new LongSparseArray();
        this.loadingBlockedPeers = false;
        this.blockePeers = new LongSparseIntArray();
        this.totalBlockedCount = -1;
        this.channelViewsToSend = new LongSparseArray();
        this.pollsToCheck = new LongSparseArray();
        this.premiumFeaturesTypesToPosition = new SparseIntArray();
        this.businessFeaturesTypesToPosition = new SparseIntArray();
        this.dialogFilters = new ArrayList<>();
        this.frozenDialogFilters = null;
        this.hiddenUndoChats = new ArrayList<>();
        this.dialogFiltersById = new SparseArray<>();
        this.suggestedFilters = new ArrayList<>();
        this.updatesQueueChannels = new LongSparseArray();
        this.updatesStartWaitTimeChannels = new LongSparseLongArray();
        this.channelsPts = new LongSparseIntArray();
        this.gettingDifferenceChannels = new LongSparseArray();
        this.gettingChatInviters = new LongSparseArray();
        this.gettingUnknownChannels = new LongSparseArray();
        this.gettingUnknownDialogs = new LongSparseArray();
        this.checkingLastMessagesDialogs = new LongSparseArray();
        this.updatesQueueSeq = new ArrayList<>();
        this.updatesQueuePts = new ArrayList<>();
        this.updatesQueueQts = new ArrayList<>();
        this.fullUsers = new LongSparseArray();
        this.fullChats = new LongSparseArray();
        this.groupCalls = new LongSparseArray();
        this.groupCallsByChatId = new LongSparseArray();
        this.loadingFullUsers = new HashSet<>();
        this.loadedFullUsers = new LongSparseLongArray();
        this.loadingFullChats = new HashSet<>();
        this.loadingGroupCalls = new HashSet<>();
        this.loadingFullParticipants = new HashSet<>();
        this.loadedFullParticipants = new HashSet<>();
        this.loadedFullChats = new LongSparseLongArray();
        this.channelAdmins = new LongSparseArray();
        this.loadingChannelAdmins = new LongSparseIntArray();
        this.migratedChats = new SparseIntArray();
        this.sponsoredMessages = new LongSparseArray();
        this.sendAsPeers = new LongSparseArray();
        this.reloadingWebpages = new HashMap<>();
        this.reloadingWebpagesPending = new LongSparseArray();
        this.reloadingScheduledWebpages = new HashMap<>();
        this.reloadingScheduledWebpagesPending = new LongSparseArray();
        this.reloadingSavedWebpages = new HashMap<>();
        this.reloadingSavedWebpagesPending = new LongSparseArray();
        this.lastScheduledServerQueryTime = new LongSparseArray();
        this.lastQuickReplyServerQueryTime = new LongSparseArray();
        this.lastSavedServerQueryTime = new LongSparseArray();
        this.lastServerQueryTime = new LongSparseArray();
        this.reloadingMessages = new LongSparseArray();
        this.readTasks = new ArrayList<>();
        this.readTasksMap = new LongSparseArray();
        this.repliesReadTasks = new ArrayList<>();
        this.threadsReadTasksMap = new HashMap<>();
        this.nextDialogsCacheOffset = new SparseIntArray();
        this.loadingDialogs = new SparseBooleanArray();
        this.dialogsEndReached = new SparseBooleanArray();
        this.serverDialogsEndReached = new SparseBooleanArray();
        this.getDifferenceFirstSync = true;
        this.loadingPinnedDialogs = new SparseIntArray();
        this.faqSearchArray = new ArrayList<>();
        this.suggestContacts = true;
        this.themeCheckRunnable = new MessagesController$$ExternalSyntheticLambda92();
        this.passwordCheckRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda95
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$0();
            }
        };
        this.uploadingThemes = new HashMap<>();
        this.appConfigFetcher = new 1();
        this.maxBroadcastCount = 100;
        this.minGroupConvertSize = NotificationCenter.storyQualityUpdate;
        this.gifSearchEmojies = new ArrayList<>();
        this.diceSuccess = new HashMap<>();
        this.emojiSounds = new HashMap<>();
        this.emojiInteractions = new HashMap<>();
        this.showAnnualPerMonth = false;
        this.directPaymentsCurrency = new ArrayList();
        this.emojiStatusUntilValues = new LongSparseArray();
        this.photoSuggestion = new SparseArray<>();
        this.dialogDateComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$10;
                lambda$new$10 = MessagesController.this.lambda$new$10((TLRPC.Dialog) obj, (TLRPC.Dialog) obj2);
                return lambda$new$10;
            }
        };
        this.dialogComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda97
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$11;
                lambda$new$11 = MessagesController.this.lambda$new$11((TLRPC.Dialog) obj, (TLRPC.Dialog) obj2);
                return lambda$new$11;
            }
        };
        this.updatesComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda98
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$12;
                lambda$new$12 = MessagesController.this.lambda$new$12((TLRPC.Update) obj, (TLRPC.Update) obj2);
                return lambda$new$12;
            }
        };
        this.loadAppConfigRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda99
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.loadAppConfig();
            }
        };
        this.notifyTranscriptionAudioCooldownUpdate = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$34();
            }
        };
        this.peerDialogsRequested = new LongSparseArray();
        this.peerDialogRequestTimeout = 240000L;
        this.dialogPhotos = new LongSparseArray();
        this.DIALOGS_LOAD_TYPE_CACHE = 1;
        this.DIALOGS_LOAD_TYPE_CHANNEL = 2;
        this.DIALOGS_LOAD_TYPE_UNKNOWN = 3;
        this.sensitiveAgreed = new HashSet<>();
        this.cachedIsUserPremiumBlocked = new LongSparseArray();
        this.loadingIsUserPremiumBlocked = new HashSet<>();
        this.requestIsUserPremiumBlockedRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda101
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.requestIsUserPremiumBlocked();
            }
        };
        this.effectsFetcher = new 4();
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$13();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            context = ApplicationLoader.applicationContext;
            str = "emoji";
        } else {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications" + this.currentAccount, 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            context = ApplicationLoader.applicationContext;
            str = "emoji" + this.currentAccount;
        }
        this.emojiPreferences = context.getSharedPreferences(str, 0);
        System.currentTimeMillis();
        this.remoteConfigLoaded = this.mainPreferences.getBoolean("remoteConfigLoaded", false);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", NotificationCenter.storyQualityUpdate);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", NotificationCenter.storyQualityUpdate);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.updateCheckDelay = this.mainPreferences.getInt("updateCheckDelay", 86400);
        this.maxFolderPinnedDialogsCountDefault = this.mainPreferences.getInt("maxFolderPinnedDialogsCountDefault", 100);
        this.maxFolderPinnedDialogsCountPremium = this.mainPreferences.getInt("maxFolderPinnedDialogsCountPremium", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", LiteMode.FLAG_ANIMATED_EMOJI_CHAT_NOT_PREMIUM);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", null);
        this.installReferer = this.mainPreferences.getString("installReferer", null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", ConnectionsManager.DEFAULT_DATACENTER_ID);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", ConnectionsManager.DEFAULT_DATACENTER_ID);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0L);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", null);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.storyVenueSearchBot = this.mainPreferences.getString("storyVenueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", true);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.getfileExperimentalParams = this.mainPreferences.getBoolean("getfileExperimentalParams", false);
        this.smsjobsStickyNotificationEnabled = this.mainPreferences.getBoolean("smsjobsStickyNotificationEnabled", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        this.groupCallVideoMaxParticipants = this.mainPreferences.getInt("groipCallVideoMaxParticipants", 30);
        this.chatReadMarkSizeThreshold = this.mainPreferences.getInt("chatReadMarkSizeThreshold", 100);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.ringtoneDurationMax = this.mainPreferences.getInt("ringtoneDurationMax", 5);
        this.ringtoneSizeMax = this.mainPreferences.getInt("ringtoneSizeMax", 102400);
        this.pmReadDateExpirePeriod = this.mainPreferences.getInt("pmReadDateExpirePeriod", 604800);
        this.suggestStickersApiOnly = this.mainPreferences.getBoolean("suggestStickersApiOnly", false);
        this.roundVideoSize = this.mainPreferences.getInt("roundVideoSize", 384);
        this.roundVideoBitrate = this.mainPreferences.getInt("roundVideoBitrate", 1000);
        this.roundAudioBitrate = this.mainPreferences.getInt("roundAudioBitrate", 64);
        this.pendingSuggestions = this.mainPreferences.getStringSet("pendingSuggestions", null);
        this.dismissedSuggestions = this.mainPreferences.getStringSet("dismissedSuggestions", null);
        int i2 = this.mainPreferences.getInt("channelsLimitDefault", 500);
        this.channelsLimitDefault = i2;
        this.channelsLimitPremium = this.mainPreferences.getInt("channelsLimitPremium", i2 * 2);
        this.savedGifsLimitDefault = this.mainPreferences.getInt("savedGifsLimitDefault", NotificationCenter.storyQualityUpdate);
        this.savedGifsLimitPremium = this.mainPreferences.getInt("savedGifsLimitPremium", 400);
        this.stickersFavedLimitDefault = this.mainPreferences.getInt("stickersFavedLimitDefault", 5);
        this.stickersFavedLimitPremium = this.mainPreferences.getInt("stickersFavedLimitPremium", NotificationCenter.storyQualityUpdate);
        this.maxPinnedDialogsCountDefault = this.mainPreferences.getInt("maxPinnedDialogsCountDefault", 5);
        this.maxPinnedDialogsCountPremium = this.mainPreferences.getInt("maxPinnedDialogsCountPremium", 5);
        this.maxPinnedDialogsCountDefault = this.mainPreferences.getInt("maxPinnedDialogsCountDefault", 5);
        this.maxPinnedDialogsCountPremium = this.mainPreferences.getInt("maxPinnedDialogsCountPremium", 5);
        this.dialogFiltersLimitDefault = this.mainPreferences.getInt("dialogFiltersLimitDefault", 10);
        this.dialogFiltersLimitPremium = this.mainPreferences.getInt("dialogFiltersLimitPremium", 20);
        this.dialogFiltersChatsLimitDefault = this.mainPreferences.getInt("dialogFiltersChatsLimitDefault", 100);
        this.dialogFiltersChatsLimitPremium = this.mainPreferences.getInt("dialogFiltersChatsLimitPremium", NotificationCenter.storyQualityUpdate);
        this.dialogFiltersPinnedLimitDefault = this.mainPreferences.getInt("dialogFiltersPinnedLimitDefault", 5);
        this.dialogFiltersPinnedLimitPremium = this.mainPreferences.getInt("dialogFiltersPinnedLimitPremium", 10);
        this.publicLinksLimitDefault = this.mainPreferences.getInt("publicLinksLimitDefault", 10);
        this.publicLinksLimitPremium = this.mainPreferences.getInt("publicLinksLimitPremium", 20);
        this.captionLengthLimitDefault = this.mainPreferences.getInt("captionLengthLimitDefault", 1024);
        this.captionLengthLimitPremium = this.mainPreferences.getInt("captionLengthLimitPremium", LiteMode.FLAG_ANIMATED_EMOJI_CHAT_NOT_PREMIUM);
        this.storyCaptionLengthLimitDefault = this.mainPreferences.getInt("storyCaptionLengthLimit", NotificationCenter.storyQualityUpdate);
        this.storyCaptionLengthLimitPremium = this.mainPreferences.getInt("storyCaptionLengthLimitPremium", 2048);
        this.aboutLengthLimitDefault = this.mainPreferences.getInt("aboutLengthLimitDefault", 70);
        this.aboutLengthLimitPremium = this.mainPreferences.getInt("aboutLengthLimitPremium", NotificationCenter.filePreparingStarted);
        this.reactionsUserMaxDefault = this.mainPreferences.getInt("reactionsUserMaxDefault", 1);
        this.reactionsUserMaxPremium = this.mainPreferences.getInt("reactionsUserMaxPremium", 3);
        this.reactionsInChatMax = this.mainPreferences.getInt("reactionsInChatMax", 3);
        int i3 = this.mainPreferences.getInt("uploadMaxFileParts", 4000);
        this.uploadMaxFileParts = i3;
        this.uploadMaxFilePartsPremium = this.mainPreferences.getInt("uploadMaxFilePartsPremium", i3 * 2);
        this.premiumInvoiceSlug = this.mainPreferences.getString("premiumInvoiceSlug", null);
        this.premiumBotUsername = this.mainPreferences.getString("premiumBotUsername", null);
        this.premiumLocked = this.mainPreferences.getBoolean("premiumLocked", false);
        this.starsLocked = this.mainPreferences.getBoolean("starsLocked", true);
        this.transcribeButtonPressed = this.mainPreferences.getInt("transcribeButtonPressed", 0);
        this.forumUpgradeParticipantsMin = this.mainPreferences.getInt("forumUpgradeParticipantsMin", NotificationCenter.storyQualityUpdate);
        this.topicsPinnedLimit = this.mainPreferences.getInt("topicsPinnedLimit", 3);
        this.telegramAntispamUserId = this.mainPreferences.getLong("telegramAntispamUserId", -1L);
        this.telegramAntispamGroupSizeMin = this.mainPreferences.getInt("telegramAntispamGroupSizeMin", 100);
        this.hiddenMembersGroupSizeMin = this.mainPreferences.getInt("hiddenMembersGroupSizeMin", 100);
        this.chatlistUpdatePeriod = this.mainPreferences.getInt("chatlistUpdatePeriod", 3600);
        this.uploadMarkupVideo = this.mainPreferences.getBoolean("uploadMarkupVideo", true);
        this.giftAttachMenuIcon = this.mainPreferences.getBoolean("giftAttachMenuIcon", false);
        this.giftTextFieldIcon = this.mainPreferences.getBoolean("giftTextFieldIcon", false);
        this.checkResetLangpack = this.mainPreferences.getInt("checkResetLangpack", 0);
        this.smallQueueMaxActiveOperations = this.mainPreferences.getInt("smallQueueMaxActiveOperations", 5);
        this.largeQueueMaxActiveOperations = this.mainPreferences.getInt("largeQueueMaxActiveOperations", 2);
        this.stealthModeFuture = this.mainPreferences.getInt("stories_stealth_future_period", 1500);
        this.storiesChangelogUserId = this.mainPreferences.getLong("stories_changelog_user_id", 777000L);
        this.giveawayAddPeersMax = this.mainPreferences.getLong("giveaway_add_peers_max", 10L);
        this.giveawayCountriesMax = this.mainPreferences.getLong("giveaway_countries_max", 10L);
        this.giveawayBoostsPerPremium = this.mainPreferences.getLong("giveaway_boosts_per_premium", 4L);
        this.boostsPerSentGift = this.mainPreferences.getLong("boosts_per_sent_gift", 3L);
        this.giveawayPeriodMax = this.mainPreferences.getLong("giveaway_period_max", 7L);
        this.stealthModePast = this.mainPreferences.getInt("stories_stealth_past_period", NotificationCenter.customTypefacesLoaded);
        this.stealthModeCooldown = this.mainPreferences.getInt("stories_stealth_cooldown_period", 3600);
        boolean z = ConnectionsManager.native_isTestBackend(this.currentAccount) != 0;
        this.chatlistInvitesLimitDefault = this.mainPreferences.getInt("chatlistInvitesLimitDefault", 3);
        this.storyExpiringLimitDefault = this.mainPreferences.getInt("storyExpiringLimitDefault", 50);
        this.storyExpiringLimitPremium = this.mainPreferences.getInt("storyExpiringLimitPremium", 100);
        this.storiesSentWeeklyLimitDefault = this.mainPreferences.getInt("storiesSentWeeklyLimitDefault", 7);
        this.storiesSuggestedReactionsLimitDefault = this.mainPreferences.getInt("storiesSuggestedReactionsLimitDefault", 1);
        this.storiesSuggestedReactionsLimitPremium = this.mainPreferences.getInt("storiesSuggestedReactionsLimitPremium", 5);
        this.storiesSentWeeklyLimitPremium = this.mainPreferences.getInt("storiesSentWeeklyLimitPremium", 70);
        this.storiesSentMonthlyLimitDefault = this.mainPreferences.getInt("storiesSentMonthlyLimitDefault", 30);
        this.storiesSentMonthlyLimitPremium = this.mainPreferences.getInt("storiesSentMonthlyLimitPremium", NotificationCenter.customTypefacesLoaded);
        this.channelBgIconLevelMin = this.mainPreferences.getInt("channelBgIconLevelMin", 1);
        this.channelProfileIconLevelMin = this.mainPreferences.getInt("channelProfileIconLevelMin", 1);
        this.channelEmojiStatusLevelMin = this.mainPreferences.getInt("channelEmojiStatusLevelMin", 1);
        this.groupProfileBgIconLevelMin = this.mainPreferences.getInt("groupProfileBgIconLevelMin", 1);
        this.groupEmojiStatusLevelMin = this.mainPreferences.getInt("groupEmojiStatusLevelMin", 1);
        this.groupEmojiStickersLevelMin = this.mainPreferences.getInt("groupEmojiStickersLevelMin", 1);
        this.groupWallpaperLevelMin = this.mainPreferences.getInt("groupWallpaperLevelMin", 1);
        this.groupCustomWallpaperLevelMin = this.mainPreferences.getInt("groupCustomWallpaperLevelMin", 1);
        this.groupTranscribeLevelMin = this.mainPreferences.getInt("groupTranscribeLevelMin", 1);
        this.quickRepliesLimit = this.mainPreferences.getInt("quickRepliesLimit", 10);
        this.quickReplyMessagesLimit = this.mainPreferences.getInt("quickReplyMessagesLimit", 20);
        this.channelWallpaperLevelMin = this.mainPreferences.getInt("channelWallpaperLevelMin", 1);
        this.channelCustomWallpaperLevelMin = this.mainPreferences.getInt("channelCustomWallpaperLevelMin", 1);
        this.chatlistInvitesLimitPremium = this.mainPreferences.getInt("chatlistInvitesLimitPremium", z ? 5 : 20);
        this.chatlistJoinedLimitDefault = this.mainPreferences.getInt("chatlistJoinedLimitDefault", 2);
        this.chatlistJoinedLimitPremium = this.mainPreferences.getInt("chatlistJoinedLimitPremium", z ? 5 : 20);
        this.stargiftsMessageLengthMax = this.mainPreferences.getInt("stargiftsMessageLengthMax", NotificationCenter.notificationsCountUpdated);
        this.stargiftsConvertPeriodMax = this.mainPreferences.getInt("stargiftsConvertPeriodMax", z ? NotificationCenter.customTypefacesLoaded : 7776000);
        this.videoIgnoreAltDocuments = this.mainPreferences.getBoolean("videoIgnoreAltDocuments", false);
        this.storiesPosting = this.mainPreferences.getString("storiesPosting", "enabled");
        this.storiesEntities = this.mainPreferences.getString("storiesEntities", "premium");
        this.storiesExportNopublicLink = this.mainPreferences.getBoolean("storiesExportNopublicLink", false);
        this.authorizationAutoconfirmPeriod = this.mainPreferences.getInt("authorization_autoconfirm_period", 604800);
        this.quoteLengthMax = this.mainPreferences.getInt("quoteLengthMax", 1024);
        this.giveawayGiftsPurchaseAvailable = this.mainPreferences.getBoolean("giveawayGiftsPurchaseAvailable", false);
        this.peerColors = PeerColors.fromString(0, this.mainPreferences.getString("peerColors", ""));
        this.profilePeerColors = PeerColors.fromString(1, this.mainPreferences.getString("profilePeerColors", ""));
        int i4 = this.mainPreferences.getInt("transcribeAudioTrialWeeklyNumber", BuildVars.DEBUG_PRIVATE_VERSION ? 2 : 0);
        this.transcribeAudioTrialWeeklyNumber = i4;
        this.transcribeAudioTrialCurrentNumber = this.mainPreferences.getInt("transcribeAudioTrialCurrentNumber", i4);
        this.transcribeAudioTrialDurationMax = this.mainPreferences.getInt("transcribeAudioTrialDurationMax", NotificationCenter.customTypefacesLoaded);
        this.transcribeAudioTrialCooldownUntil = this.mainPreferences.getInt("transcribeAudioTrialCooldownUntil", 0);
        this.recommendedChannelsLimitDefault = this.mainPreferences.getInt("recommendedChannelsLimitDefault", 10);
        this.recommendedChannelsLimitPremium = this.mainPreferences.getInt("recommendedChannelsLimitPremium", 100);
        this.boostsChannelLevelMax = this.mainPreferences.getInt("boostsChannelLevelMax", 100);
        this.channelRestrictSponsoredLevelMin = this.mainPreferences.getInt("channelRestrictSponsoredLevelMin", 30);
        this.savedDialogsPinnedLimitDefault = this.mainPreferences.getInt("savedDialogsPinnedLimitDefault", 4);
        this.savedDialogsPinnedLimitPremium = this.mainPreferences.getInt("savedDialogsPinnedLimitPremium", 6);
        this.storyQualityFull = this.mainPreferences.getBoolean("storyQualityFull", true);
        this.savedViewAsChats = this.mainPreferences.getBoolean("savedViewAsChats", false);
        this.folderTags = this.mainPreferences.getBoolean("folderTags", false);
        this.uploadPremiumSpeedupUpload = this.mainPreferences.getFloat("uploadPremiumSpeedupUpload", 10.0f);
        this.uploadPremiumSpeedupDownload = this.mainPreferences.getFloat("uploadPremiumSpeedupDownload", 10.0f);
        this.uploadPremiumSpeedupNotifyPeriod = this.mainPreferences.getInt("uploadPremiumSpeedupNotifyPeriod2", 3600);
        this.introTitleLengthLimit = this.mainPreferences.getInt("introTitleLengthLimit", 32);
        this.introDescriptionLengthLimit = this.mainPreferences.getInt("introDescriptionLengthLimit", 72);
        this.businessChatLinksLimit = this.mainPreferences.getInt("businessChatLinksLimit", 100);
        this.channelRevenueWithdrawalEnabled = this.mainPreferences.getBoolean("channelRevenueWithdrawalEnabled", false);
        this.newNoncontactPeersRequirePremiumWithoutOwnpremium = this.mainPreferences.getBoolean("newNoncontactPeersRequirePremiumWithoutOwnpremium", false);
        this.reactionsUniqMax = this.mainPreferences.getInt("reactionsUniqMax", 11);
        this.premiumManageSubscriptionUrl = this.mainPreferences.getString("premiumManageSubscriptionUrl", ApplicationLoader.isStandaloneBuild() ? "https://t.me/premiumbot?start=status" : "https://play.google.com/store/account/subscriptions?sku=telegram_premium&package=org.telegram.messenger");
        this.androidDisableRoundCamera2 = this.mainPreferences.getBoolean("androidDisableRoundCamera2", true);
        this.storiesPinnedToTopCountMax = this.mainPreferences.getInt("storiesPinnedToTopCountMax", 3);
        this.showAnnualPerMonth = this.mainPreferences.getBoolean("showAnnualPerMonth", false);
        this.canEditFactcheck = this.mainPreferences.getBoolean("canEditFactcheck", false);
        this.factcheckLengthLimit = this.mainPreferences.getInt("factcheckLengthLimit", 1024);
        this.starsRevenueWithdrawalMin = this.mainPreferences.getLong("starsRevenueWithdrawalMin", 1000L);
        this.starsPaidPostAmountMax = this.mainPreferences.getLong("starsPaidPostAmountMax", 10000L);
        this.botPreviewMediasMax = this.mainPreferences.getInt("botPreviewMediasMax", 10);
        this.webAppAllowedProtocols = this.mainPreferences.getStringSet("webAppAllowedProtocols", new HashSet(Arrays.asList("http", "https")));
        this.ignoreRestrictionReasons = this.mainPreferences.getStringSet("ignoreRestrictionReasons", new HashSet(Arrays.asList(new String[0])));
        this.tonProxyAddress = this.mainPreferences.getString("tonProxyAddress", "magic.org");
        this.weatherSearchUsername = this.mainPreferences.getString("weatherSearchUsername", "izweatherbot");
        this.storyWeatherPreload = this.mainPreferences.getBoolean("storyWeatherPreload", true);
        this.starsGiftsEnabled = this.mainPreferences.getBoolean("starsGiftsEnabled", true);
        this.stargiftsBlocked = this.mainPreferences.getBoolean("stargiftsBlocked", true);
        this.starsPaidReactionAmountMax = this.mainPreferences.getLong("starsPaidReactionAmountMax", 10000L);
        this.starsSubscriptionAmountMax = this.mainPreferences.getLong("starsSubscriptionAmountMax", 2500L);
        this.starsUsdSellRate1000 = this.mainPreferences.getFloat("starsUsdSellRate1000", 2000.0f);
        this.starsUsdWithdrawRate1000 = this.mainPreferences.getFloat("starsUsdWithdrawRate1000", 1200.0f);
        this.sponsoredLinksInappAllow = this.mainPreferences.getBoolean("sponsoredLinksInappAllow", false);
        this.paidReactionsAnonymousTime = this.mainPreferences.getLong("paidReactionsAnonymousTime", 0L);
        this.paidReactionsAnonymous = (!this.mainPreferences.contains("paidReactionsAnonymous") || System.currentTimeMillis() - this.paidReactionsAnonymousTime >= 7200000) ? null : Boolean.valueOf(this.mainPreferences.getBoolean("paidReactionsAnonymous", false));
        scheduleTranscriptionUpdate();
        BuildVars.GOOGLE_AUTH_CLIENT_ID = this.mainPreferences.getString("googleAuthClientId", BuildVars.GOOGLE_AUTH_CLIENT_ID);
        this.dcDomainName = this.mainPreferences.contains("dcDomainName2") ? this.mainPreferences.getString("dcDomainName2", "apv3.stel.com") : z ? "tapv3.stel.com" : "apv3.stel.com";
        if (this.mainPreferences.contains("webFileDatacenterId")) {
            this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", 4);
        } else {
            this.webFileDatacenterId = z ? 2 : 4;
        }
        Set<String> stringSet = this.mainPreferences.getStringSet("directPaymentsCurrency", null);
        if (stringSet != null) {
            this.directPaymentsCurrency.clear();
            this.directPaymentsCurrency.addAll(stringSet);
        }
        loadPremiumFeaturesPreviewOrder(this.premiumFeaturesTypesToPosition, this.mainPreferences.getString("premiumFeaturesTypesToPosition", null));
        loadPremiumFeaturesPreviewOrder(this.businessFeaturesTypesToPosition, this.mainPreferences.getString("businessFeaturesTypesToPosition", null));
        this.pendingSuggestions = this.pendingSuggestions != null ? new HashSet(this.pendingSuggestions) : new HashSet();
        this.dismissedSuggestions = this.dismissedSuggestions != null ? new HashSet(this.dismissedSuggestions) : new HashSet();
        Set<String> stringSet2 = this.mainPreferences.getStringSet("exportUri2", null);
        this.exportUri = stringSet2;
        if (stringSet2 != null) {
            this.exportUri = new HashSet(this.exportUri);
        } else {
            HashSet hashSet = new HashSet();
            this.exportUri = hashSet;
            hashSet.add("content://(\\d+@)?com\\.whatsapp\\.provider\\.media/export_chat/");
            this.exportUri.add("content://(\\d+@)?com\\.whatsapp\\.w4b\\.provider\\.media/export_chat/");
            this.exportUri.add("content://jp\\.naver\\.line\\.android\\.line\\.common\\.FileProvider/export-chat/");
            this.exportUri.add(".*WhatsApp.*\\.txt$");
            this.exportUri.add(".*WhatsApp.*\\.zip$");
        }
        Set<String> stringSet3 = this.mainPreferences.getStringSet("exportGroupUri", null);
        this.exportGroupUri = stringSet3;
        if (stringSet3 != null) {
            this.exportGroupUri = new HashSet(this.exportGroupUri);
        } else {
            HashSet hashSet2 = new HashSet();
            this.exportGroupUri = hashSet2;
            hashSet2.add("@g.us/");
        }
        Set<String> stringSet4 = this.mainPreferences.getStringSet("exportPrivateUri", null);
        this.exportPrivateUri = stringSet4;
        if (stringSet4 != null) {
            this.exportPrivateUri = new HashSet(this.exportPrivateUri);
        } else {
            HashSet hashSet3 = new HashSet();
            this.exportPrivateUri = hashSet3;
            hashSet3.add("@s.whatsapp.net/");
        }
        Set<String> stringSet5 = this.mainPreferences.getStringSet("autologinDomains", null);
        this.autologinDomains = stringSet5;
        this.autologinDomains = stringSet5 != null ? new HashSet(this.autologinDomains) : new HashSet();
        Set<String> stringSet6 = this.mainPreferences.getStringSet("authDomains", null);
        this.authDomains = stringSet6;
        this.authDomains = stringSet6 != null ? new HashSet(this.authDomains) : new HashSet();
        this.autologinToken = this.mainPreferences.getString("autologinToken", null);
        Set<String> stringSet7 = this.mainPreferences.getStringSet("diceEmojies", null);
        if (stringSet7 == null) {
            HashSet<String> hashSet4 = new HashSet<>();
            this.diceEmojies = hashSet4;
            hashSet4.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(stringSet7);
        }
        String string = this.mainPreferences.getString("diceSuccess", null);
        if (string == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] decode = Base64.decode(string, 0);
                if (decode != null) {
                    SerializedData serializedData = new SerializedData(decode);
                    int readInt32 = serializedData.readInt32(true);
                    for (int i5 = 0; i5 < readInt32; i5++) {
                        this.diceSuccess.put(serializedData.readString(true), new DiceFrameSuccess(serializedData.readInt32(true), serializedData.readInt32(true)));
                    }
                    serializedData.cleanup();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        String string2 = this.mainPreferences.getString("emojiSounds", null);
        if (string2 != null) {
            try {
                byte[] decode2 = Base64.decode(string2, 0);
                if (decode2 != null) {
                    SerializedData serializedData2 = new SerializedData(decode2);
                    int readInt322 = serializedData2.readInt32(true);
                    for (int i6 = 0; i6 < readInt322; i6++) {
                        this.emojiSounds.put(serializedData2.readString(true), new EmojiSound(serializedData2.readInt64(true), serializedData2.readInt64(true), serializedData2.readByteArray(true)));
                    }
                    serializedData2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
        String string3 = this.mainPreferences.getString("gifSearchEmojies", null);
        if (string3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("\u1f973");
            this.gifSearchEmojies.add("😎");
        } else {
            try {
                byte[] decode3 = Base64.decode(string3, 0);
                if (decode3 != null) {
                    SerializedData serializedData3 = new SerializedData(decode3);
                    int readInt323 = serializedData3.readInt32(true);
                    for (int i7 = 0; i7 < readInt323; i7++) {
                        this.gifSearchEmojies.add(serializedData3.readString(true));
                    }
                    serializedData3.cleanup();
                }
            } catch (Exception e3) {
                FileLog.e(e3);
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda99
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.loadAppConfig();
            }
        }, 2000L);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda93
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$14();
            }
        }, 400L);
        this.topicsController = new TopicsController(i);
        this.cacheByChatsController = new CacheByChatsController(i);
        this.translateController = new TranslateController(this);
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$15();
            }
        });
    }

    private void addDialogToItsFolder(int i, TLRPC.Dialog dialog) {
        int i2 = dialog instanceof TLRPC.TL_dialogFolder ? 0 : dialog.folder_id;
        ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(dialog);
            return;
        }
        if (i == -2) {
            if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC.TL_dialogFolder)) {
                arrayList.add(0, dialog);
                return;
            }
            i = 1;
        }
        arrayList.add(i, dialog);
    }

    private void addOrRemoveActiveVoiceChat(final TLRPC.Chat chat) {
        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda206
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addOrRemoveActiveVoiceChat$55(chat);
                }
            });
        } else {
            lambda$addOrRemoveActiveVoiceChat$55(chat);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: addOrRemoveActiveVoiceChatInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$addOrRemoveActiveVoiceChat$55(TLRPC.Chat chat) {
        TLRPC.Chat chat2 = this.activeVoiceChatsMap.get(Long.valueOf(chat.id));
        if (chat.call_active && chat.call_not_empty && chat.migrated_to == null && !ChatObject.isNotInChat(chat)) {
            if (chat2 != null) {
                return;
            }
            this.activeVoiceChatsMap.put(Long.valueOf(chat.id), chat);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
            return;
        }
        if (chat2 == null) {
            return;
        }
        this.activeVoiceChatsMap.remove(Long.valueOf(chat.id));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:1580:0x1eb0, code lost:
    
        if (getConnectionsManager().getCurrentTime() > r9) goto L1676;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1582:0x1eba, code lost:
    
        if (r29.transcribeAudioTrialCurrentNumber > r28) goto L1676;
     */
    /* JADX WARN: Code restructure failed: missing block: B:312:0x10b3, code lost:
    
        if (r0 != r29.updateCheckDelay) goto L985;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:8:0x0a7a. Please report as an issue. */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void applyAppConfig(TLRPC.TL_jsonObject tL_jsonObject) {
        int i;
        boolean z;
        boolean z2;
        int i2;
        char c;
        HashMap<String, EmojiSound> hashMap;
        int i3;
        String str;
        boolean z3;
        String str2;
        long parseLong;
        boolean z4;
        boolean z5;
        long j;
        String str3;
        float f;
        String str4;
        HashSet<String> hashSet;
        String str5;
        int i4;
        String str6;
        String str7;
        boolean z6;
        String str8;
        SparseIntArray sparseIntArray;
        ArrayList<TLRPC.JSONValue> arrayList;
        String str9;
        TLRPC.TL_jsonObject tL_jsonObject2;
        int i5;
        int i6;
        TLRPC.TL_jsonObject tL_jsonObject3;
        int i7;
        char c2;
        int i8;
        String str10;
        TLRPC.TL_jsonObject tL_jsonObject4 = tL_jsonObject;
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        resetAppConfig();
        int size = tL_jsonObject4.value.size();
        int i9 = 0;
        int i10 = 0;
        int i11 = 0;
        boolean z7 = false;
        TLRPC.TL_jsonObject tL_jsonObject5 = null;
        boolean z8 = false;
        boolean z9 = false;
        while (i9 < size) {
            TLRPC.TL_jsonObjectValue tL_jsonObjectValue = tL_jsonObject4.value.get(i9);
            String str11 = tL_jsonObjectValue.key;
            str11.hashCode();
            int i12 = size;
            boolean z10 = z7;
            boolean z11 = z9;
            boolean z12 = z8;
            TLRPC.TL_jsonObject tL_jsonObject6 = tL_jsonObject5;
            switch (str11.hashCode()) {
                case -2144614625:
                    i2 = i11;
                    if (str11.equals("chatlists_joined_limit_premium")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case -2123640970:
                    i2 = i11;
                    if (str11.equals("channel_revenue_withdrawal_enabled")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case -2086426873:
                    i2 = i11;
                    if (str11.equals("dialog_filters_pinned_limit_premium")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case -2085529619:
                    i2 = i11;
                    if (str11.equals("business_chat_links_limit")) {
                        c = 3;
                        break;
                    }
                    c = 65535;
                    break;
                case -2031587591:
                    i2 = i11;
                    if (str11.equals("telegram_antispam_user_id")) {
                        c = 4;
                        break;
                    }
                    c = 65535;
                    break;
                case -2010078200:
                    i2 = i11;
                    if (str11.equals("channel_custom_wallpaper_level_min")) {
                        c = 5;
                        break;
                    }
                    c = 65535;
                    break;
                case -1983931574:
                    i2 = i11;
                    if (str11.equals("channel_restrict_sponsored_level_min")) {
                        c = 6;
                        break;
                    }
                    c = 65535;
                    break;
                case -1960821615:
                    i2 = i11;
                    if (str11.equals("stargifts_message_length_max")) {
                        c = 7;
                        break;
                    }
                    c = 65535;
                    break;
                case -1921306872:
                    i2 = i11;
                    if (str11.equals("large_queue_max_active_operations_count")) {
                        c = '\b';
                        break;
                    }
                    c = 65535;
                    break;
                case -1906216435:
                    i2 = i11;
                    if (str11.equals("upload_max_fileparts_default")) {
                        c = '\t';
                        break;
                    }
                    c = 65535;
                    break;
                case -1905041797:
                    i2 = i11;
                    if (str11.equals("pinned_dialogs_count_max_default")) {
                        c = '\n';
                        break;
                    }
                    c = 65535;
                    break;
                case -1899955653:
                    i2 = i11;
                    if (str11.equals("android_collect_device_stats")) {
                        c = 11;
                        break;
                    }
                    c = 65535;
                    break;
                case -1878957152:
                    i2 = i11;
                    if (str11.equals("stories_suggested_reactions_limit_default")) {
                        c = '\f';
                        break;
                    }
                    c = 65535;
                    break;
                case -1842555673:
                    i2 = i11;
                    if (str11.equals("stars_gifts_enabled")) {
                        c = '\r';
                        break;
                    }
                    c = 65535;
                    break;
                case -1841535911:
                    i2 = i11;
                    if (str11.equals("dismissed_suggestions")) {
                        c = 14;
                        break;
                    }
                    c = 65535;
                    break;
                case -1802366185:
                    i2 = i11;
                    if (str11.equals("pm_read_date_expire_period")) {
                        c = 15;
                        break;
                    }
                    c = 65535;
                    break;
                case -1741981325:
                    i2 = i11;
                    if (str11.equals("smsjobs_sticky_notification_enabled")) {
                        c = 16;
                        break;
                    }
                    c = 65535;
                    break;
                case -1736722060:
                    i2 = i11;
                    if (str11.equals("upload_premium_speedup_notify_period")) {
                        c = 17;
                        break;
                    }
                    c = 65535;
                    break;
                case -1730760944:
                    i2 = i11;
                    if (str11.equals("stories_sent_monthly_limit_default")) {
                        c = 18;
                        break;
                    }
                    c = 65535;
                    break;
                case -1727638397:
                    i2 = i11;
                    if (str11.equals("bot_preview_medias_max")) {
                        c = 19;
                        break;
                    }
                    c = 65535;
                    break;
                case -1688620344:
                    i2 = i11;
                    if (str11.equals("dialog_filters_tooltip")) {
                        c = 20;
                        break;
                    }
                    c = 65535;
                    break;
                case -1683918311:
                    i2 = i11;
                    if (str11.equals("qr_login_camera")) {
                        c = 21;
                        break;
                    }
                    c = 65535;
                    break;
                case -1631139636:
                    i2 = i11;
                    if (str11.equals("stars_purchase_blocked")) {
                        c = 22;
                        break;
                    }
                    c = 65535;
                    break;
                case -1560863476:
                    i2 = i11;
                    if (str11.equals("group_custom_wallpaper_level_min")) {
                        c = 23;
                        break;
                    }
                    c = 65535;
                    break;
                case -1557626216:
                    i2 = i11;
                    if (str11.equals("giveaway_add_peers_max")) {
                        c = 24;
                        break;
                    }
                    c = 65535;
                    break;
                case -1547147298:
                    i2 = i11;
                    if (str11.equals("channel_wallpaper_level_min")) {
                        c = 25;
                        break;
                    }
                    c = 65535;
                    break;
                case -1547044498:
                    i2 = i11;
                    if (str11.equals("chatlist_update_period")) {
                        c = 26;
                        break;
                    }
                    c = 65535;
                    break;
                case -1512224895:
                    i2 = i11;
                    if (str11.equals("stars_subscription_amount_max")) {
                        c = 27;
                        break;
                    }
                    c = 65535;
                    break;
                case -1489089702:
                    i2 = i11;
                    if (str11.equals("group_wallpaper_level_min")) {
                        c = 28;
                        break;
                    }
                    c = 65535;
                    break;
                case -1481182919:
                    i2 = i11;
                    if (str11.equals("video_ignore_alt_documents")) {
                        c = 29;
                        break;
                    }
                    c = 65535;
                    break;
                case -1391118177:
                    i2 = i11;
                    if (str11.equals("channel_emoji_status_level_min")) {
                        c = 30;
                        break;
                    }
                    c = 65535;
                    break;
                case -1391086521:
                    i2 = i11;
                    if (str11.equals("pending_suggestions")) {
                        c = 31;
                        break;
                    }
                    c = 65535;
                    break;
                case -1385240692:
                    i2 = i11;
                    if (str11.equals("channels_public_limit_premium")) {
                        c = ' ';
                        break;
                    }
                    c = 65535;
                    break;
                case -1379354758:
                    i2 = i11;
                    if (str11.equals("story_expiring_limit_premium")) {
                        c = '!';
                        break;
                    }
                    c = 65535;
                    break;
                case -1351431371:
                    i2 = i11;
                    if (str11.equals("group_profile_bg_icon_level_min")) {
                        c = '\"';
                        break;
                    }
                    c = 65535;
                    break;
                case -1340158869:
                    i2 = i11;
                    if (str11.equals("upload_premium_speedup_download")) {
                        c = '#';
                        break;
                    }
                    c = 65535;
                    break;
                case -1318497457:
                    i2 = i11;
                    if (str11.equals("ignore_restriction_reasons")) {
                        c = '$';
                        break;
                    }
                    c = 65535;
                    break;
                case -1304621435:
                    i2 = i11;
                    if (str11.equals("new_noncontact_peers_require_premium_without_ownpremium")) {
                        c = '%';
                        break;
                    }
                    c = 65535;
                    break;
                case -1289139185:
                    i2 = i11;
                    if (str11.equals("quick_reply_messages_limit")) {
                        c = '&';
                        break;
                    }
                    c = 65535;
                    break;
                case -1287877531:
                    i2 = i11;
                    if (str11.equals("stickers_faved_limit_premium")) {
                        c = '\'';
                        break;
                    }
                    c = 65535;
                    break;
                case -1253023507:
                    i2 = i11;
                    if (str11.equals("stories_stealth_cooldown_period")) {
                        c = '(';
                        break;
                    }
                    c = 65535;
                    break;
                case -1241485120:
                    i2 = i11;
                    if (str11.equals("stargifts_convert_period_max")) {
                        c = ')';
                        break;
                    }
                    c = 65535;
                    break;
                case -1133154193:
                    i2 = i11;
                    if (str11.equals("lite_app_options")) {
                        c = '*';
                        break;
                    }
                    c = 65535;
                    break;
                case -1086302656:
                    i2 = i11;
                    if (str11.equals("lite_device_class")) {
                        c = '+';
                        break;
                    }
                    c = 65535;
                    break;
                case -1071072567:
                    i2 = i11;
                    if (str11.equals("premium_gift_text_field_icon")) {
                        c = ',';
                        break;
                    }
                    c = 65535;
                    break;
                case -1056002991:
                    i2 = i11;
                    if (str11.equals("chat_read_mark_expire_period")) {
                        c = '-';
                        break;
                    }
                    c = 65535;
                    break;
                case -1049689381:
                    i2 = i11;
                    if (str11.equals("reactions_uniq_max")) {
                        c = '.';
                        break;
                    }
                    c = 65535;
                    break;
                case -1032177933:
                    i2 = i11;
                    if (str11.equals("emojies_send_dice")) {
                        c = '/';
                        break;
                    }
                    c = 65535;
                    break;
                case -980397720:
                    i2 = i11;
                    if (str11.equals("url_auth_domains")) {
                        c = '0';
                        break;
                    }
                    c = 65535;
                    break;
                case -973235223:
                    i2 = i11;
                    if (str11.equals("stars_revenue_withdrawal_min")) {
                        c = '1';
                        break;
                    }
                    c = 65535;
                    break;
                case -947423642:
                    i2 = i11;
                    if (str11.equals("stories_stealth_past_period")) {
                        c = '2';
                        break;
                    }
                    c = 65535;
                    break;
                case -915535880:
                    i2 = i11;
                    if (str11.equals("saved_dialogs_pinned_limit_premium")) {
                        c = '3';
                        break;
                    }
                    c = 65535;
                    break;
                case -896467099:
                    i2 = i11;
                    if (str11.equals("saved_gifs_limit_default")) {
                        c = '4';
                        break;
                    }
                    c = 65535;
                    break;
                case -736509977:
                    i2 = i11;
                    if (str11.equals("story_caption_length_limit_default")) {
                        c = '5';
                        break;
                    }
                    c = 65535;
                    break;
                case -728445056:
                    i2 = i11;
                    if (str11.equals("show_annual_per_month")) {
                        c = '6';
                        break;
                    }
                    c = 65535;
                    break;
                case -581904190:
                    i2 = i11;
                    if (str11.equals("dialog_filters_limit_default")) {
                        c = '7';
                        break;
                    }
                    c = 65535;
                    break;
                case -561040027:
                    i2 = i11;
                    if (str11.equals("premium_invoice_slug")) {
                        c = '8';
                        break;
                    }
                    c = 65535;
                    break;
                case -542518288:
                    i2 = i11;
                    if (str11.equals("stories_sent_weekly_limit_premium")) {
                        c = '9';
                        break;
                    }
                    c = 65535;
                    break;
                case -533076272:
                    i2 = i11;
                    if (str11.equals("stories_export_nopublic_link")) {
                        c = ':';
                        break;
                    }
                    c = 65535;
                    break;
                case -515715076:
                    i2 = i11;
                    if (str11.equals("export_regex")) {
                        c = ';';
                        break;
                    }
                    c = 65535;
                    break;
                case -507953835:
                    i2 = i11;
                    if (str11.equals("chatlist_invites_limit_premium")) {
                        c = '<';
                        break;
                    }
                    c = 65535;
                    break;
                case -505523666:
                    i2 = i11;
                    if (str11.equals("stars_usd_sell_rate_x1000")) {
                        c = '=';
                        break;
                    }
                    c = 65535;
                    break;
                case -488472170:
                    i2 = i11;
                    if (str11.equals("about_length_limit_default")) {
                        c = '>';
                        break;
                    }
                    c = 65535;
                    break;
                case -473866179:
                    i2 = i11;
                    if (str11.equals("reactions_user_max_premium")) {
                        c = '?';
                        break;
                    }
                    c = 65535;
                    break;
                case -416504589:
                    i2 = i11;
                    if (str11.equals("caption_length_limit_premium")) {
                        c = '@';
                        break;
                    }
                    c = 65535;
                    break;
                case -413144568:
                    i2 = i11;
                    if (str11.equals("recommended_channels_limit_premium")) {
                        c = 'A';
                        break;
                    }
                    c = 65535;
                    break;
                case -404170231:
                    i2 = i11;
                    if (str11.equals("keep_alive_service")) {
                        c = 'B';
                        break;
                    }
                    c = 65535;
                    break;
                case -381432266:
                    i2 = i11;
                    if (str11.equals("premium_promo_order")) {
                        c = 'C';
                        break;
                    }
                    c = 65535;
                    break;
                case -377047005:
                    i2 = i11;
                    if (str11.equals("ringtone_size_max")) {
                        c = 'D';
                        break;
                    }
                    c = 65535;
                    break;
                case -350971916:
                    i2 = i11;
                    if (str11.equals("dialog_filters_chats_limit_premium")) {
                        c = 'E';
                        break;
                    }
                    c = 65535;
                    break;
                case -297801185:
                    i2 = i11;
                    if (str11.equals("business_promo_order")) {
                        c = 'F';
                        break;
                    }
                    c = 65535;
                    break;
                case -281358583:
                    i2 = i11;
                    if (str11.equals("chatlists_joined_limit_default")) {
                        c = 'G';
                        break;
                    }
                    c = 65535;
                    break;
                case -273604959:
                    i2 = i11;
                    if (str11.equals("stories_pinned_to_top_count_max")) {
                        c = 'H';
                        break;
                    }
                    c = 65535;
                    break;
                case -256319580:
                    i2 = i11;
                    if (str11.equals("channels_limit_premium")) {
                        c = 'I';
                        break;
                    }
                    c = 65535;
                    break;
                case -253815153:
                    i2 = i11;
                    if (str11.equals("background_connection")) {
                        c = 'J';
                        break;
                    }
                    c = 65535;
                    break;
                case -253729626:
                    i2 = i11;
                    if (str11.equals("giveaway_period_max")) {
                        c = 'K';
                        break;
                    }
                    c = 65535;
                    break;
                case -232883529:
                    i2 = i11;
                    if (str11.equals("emojies_send_dice_success")) {
                        c = 'L';
                        break;
                    }
                    c = 65535;
                    break;
                case -223170831:
                    i2 = i11;
                    if (str11.equals("dialog_filters_pinned_limit_default")) {
                        c = 'M';
                        break;
                    }
                    c = 65535;
                    break;
                case -191129361:
                    i2 = i11;
                    if (str11.equals("hidden_members_group_size_min")) {
                        c = 'N';
                        break;
                    }
                    c = 65535;
                    break;
                case -111779186:
                    i2 = i11;
                    if (str11.equals("autoarchive_setting_available")) {
                        c = 'O';
                        break;
                    }
                    c = 65535;
                    break;
                case -100192526:
                    i2 = i11;
                    if (str11.equals("quick_replies_limit")) {
                        c = 'P';
                        break;
                    }
                    c = 65535;
                    break;
                case -76561797:
                    i2 = i11;
                    if (str11.equals("youtube_pip")) {
                        c = 'Q';
                        break;
                    }
                    c = 65535;
                    break;
                case -44956361:
                    i2 = i11;
                    if (str11.equals("ton_proxy_address")) {
                        c = 'R';
                        break;
                    }
                    c = 65535;
                    break;
                case -24016028:
                    i2 = i11;
                    if (str11.equals("emojies_animated_zoom")) {
                        c = 'S';
                        break;
                    }
                    c = 65535;
                    break;
                case -14783830:
                    i2 = i11;
                    if (str11.equals("telegram_antispam_group_size_min")) {
                        c = 'T';
                        break;
                    }
                    c = 65535;
                    break;
                case 81433671:
                    i2 = i11;
                    if (str11.equals("giveaway_gifts_purchase_available")) {
                        c = 'U';
                        break;
                    }
                    c = 65535;
                    break;
                case 141709566:
                    i2 = i11;
                    if (str11.equals("stars_paid_reaction_amount_max")) {
                        c = 'V';
                        break;
                    }
                    c = 65535;
                    break;
                case 169095108:
                    i2 = i11;
                    if (str11.equals("stickers_emoji_suggest_only_api")) {
                        c = 'W';
                        break;
                    }
                    c = 65535;
                    break;
                case 222975416:
                    i2 = i11;
                    if (str11.equals("gif_search_emojies")) {
                        c = 'X';
                        break;
                    }
                    c = 65535;
                    break;
                case 227342346:
                    i2 = i11;
                    if (str11.equals("autologin_domains")) {
                        c = 'Y';
                        break;
                    }
                    c = 65535;
                    break;
                case 246778895:
                    i2 = i11;
                    if (str11.equals("export_group_urls")) {
                        c = 'Z';
                        break;
                    }
                    c = 65535;
                    break;
                case 280936278:
                    i2 = i11;
                    if (str11.equals("stories_posting")) {
                        c = '[';
                        break;
                    }
                    c = 65535;
                    break;
                case 296645817:
                    i2 = i11;
                    if (str11.equals("channel_profile_bg_icon_level_min")) {
                        c = '\\';
                        break;
                    }
                    c = 65535;
                    break;
                case 357521218:
                    i2 = i11;
                    if (str11.equals("weather_search_username")) {
                        c = ']';
                        break;
                    }
                    c = 65535;
                    break;
                case 396402384:
                    i2 = i11;
                    if (str11.equals("getfile_experimental_params")) {
                        c = '^';
                        break;
                    }
                    c = 65535;
                    break;
                case 411331190:
                    i2 = i11;
                    if (str11.equals("can_edit_factcheck")) {
                        c = '_';
                        break;
                    }
                    c = 65535;
                    break;
                case 428604605:
                    i2 = i11;
                    if (str11.equals("premium_playmarket_direct_currency_list")) {
                        c = '`';
                        break;
                    }
                    c = 65535;
                    break;
                case 450843102:
                    i2 = i11;
                    if (str11.equals("android_check_reset_langpack")) {
                        c = 'a';
                        break;
                    }
                    c = 65535;
                    break;
                case 478015350:
                    i2 = i11;
                    if (str11.equals("channels_public_limit_default")) {
                        c = 'b';
                        break;
                    }
                    c = 65535;
                    break;
                case 483901284:
                    i2 = i11;
                    if (str11.equals("story_expiring_limit_default")) {
                        c = 'c';
                        break;
                    }
                    c = 65535;
                    break;
                case 511041306:
                    i2 = i11;
                    if (str11.equals("sponsored_links_inapp_allow")) {
                        c = 'd';
                        break;
                    }
                    c = 65535;
                    break;
                case 517315989:
                    i2 = i11;
                    if (str11.equals("stories_stealth_future_period")) {
                        c = 'e';
                        break;
                    }
                    c = 65535;
                    break;
                case 525494819:
                    i2 = i11;
                    if (str11.equals("upload_max_fileparts_premium")) {
                        c = 'f';
                        break;
                    }
                    c = 65535;
                    break;
                case 526669457:
                    i2 = i11;
                    if (str11.equals("pinned_dialogs_count_max_premium")) {
                        c = 'g';
                        break;
                    }
                    c = 65535;
                    break;
                case 552754102:
                    i2 = i11;
                    if (str11.equals("stories_suggested_reactions_limit_premium")) {
                        c = 'h';
                        break;
                    }
                    c = 65535;
                    break;
                case 575378511:
                    i2 = i11;
                    if (str11.equals("stickers_faved_limit_default")) {
                        c = 'i';
                        break;
                    }
                    c = 65535;
                    break;
                case 670122854:
                    i2 = i11;
                    if (str11.equals("giveaway_boosts_per_premium")) {
                        c = 'j';
                        break;
                    }
                    c = 65535;
                    break;
                case 676199595:
                    i2 = i11;
                    if (str11.equals("groupcall_video_participants_max")) {
                        c = 'k';
                        break;
                    }
                    c = 65535;
                    break;
                case 684764449:
                    i2 = i11;
                    if (str11.equals("save_gifs_with_stickers")) {
                        c = 'l';
                        break;
                    }
                    c = 65535;
                    break;
                case 700206086:
                    i2 = i11;
                    if (str11.equals("boosts_per_sent_gift")) {
                        c = 'm';
                        break;
                    }
                    c = 65535;
                    break;
                case 700950310:
                    i2 = i11;
                    if (str11.equals("stories_sent_monthly_limit_premium")) {
                        c = 'n';
                        break;
                    }
                    c = 65535;
                    break;
                case 805025045:
                    i2 = i11;
                    if (str11.equals("android_disable_round_camera2")) {
                        c = 'o';
                        break;
                    }
                    c = 65535;
                    break;
                case 812427767:
                    i2 = i11;
                    if (str11.equals("login_google_oauth_client_id")) {
                        c = 'p';
                        break;
                    }
                    c = 65535;
                    break;
                case 856667894:
                    i2 = i11;
                    if (str11.equals("stars_usd_withdraw_rate_x1000")) {
                        c = 'q';
                        break;
                    }
                    c = 65535;
                    break;
                case 878681646:
                    i2 = i11;
                    if (str11.equals("quote_length_max")) {
                        c = 'r';
                        break;
                    }
                    c = 65535;
                    break;
                case 917364150:
                    i2 = i11;
                    if (str11.equals("ringtone_duration_max")) {
                        c = 's';
                        break;
                    }
                    c = 65535;
                    break;
                case 947720162:
                    i2 = i11;
                    if (str11.equals("saved_dialogs_pinned_limit_default")) {
                        c = 't';
                        break;
                    }
                    c = 65535;
                    break;
                case 992898905:
                    i2 = i11;
                    if (str11.equals("inapp_update_check_delay")) {
                        c = 'u';
                        break;
                    }
                    c = 65535;
                    break;
                case 1012863815:
                    i2 = i11;
                    if (str11.equals("group_emoji_stickers_level_min")) {
                        c = 'v';
                        break;
                    }
                    c = 65535;
                    break;
                case 1021871313:
                    i2 = i11;
                    if (str11.equals("stories_venue_search_username")) {
                        c = 'w';
                        break;
                    }
                    c = 65535;
                    break;
                case 1022209700:
                    i2 = i11;
                    if (str11.equals("upload_premium_speedup_upload")) {
                        c = 'x';
                        break;
                    }
                    c = 65535;
                    break;
                case 1052355894:
                    i2 = i11;
                    if (str11.equals("premium_bot_username")) {
                        c = 'y';
                        break;
                    }
                    c = 65535;
                    break;
                case 1085221270:
                    i2 = i11;
                    if (str11.equals("premium_purchase_blocked")) {
                        c = 'z';
                        break;
                    }
                    c = 65535;
                    break;
                case 1143898023:
                    i2 = i11;
                    if (str11.equals("stars_paid_post_amount_max")) {
                        c = '{';
                        break;
                    }
                    c = 65535;
                    break;
                case 1155587444:
                    i2 = i11;
                    if (str11.equals("story_weather_preload")) {
                        c = '|';
                        break;
                    }
                    c = 65535;
                    break;
                case 1236470876:
                    i2 = i11;
                    if (str11.equals("intro_title_length_limit")) {
                        c = '}';
                        break;
                    }
                    c = 65535;
                    break;
                case 1262162175:
                    i2 = i11;
                    if (str11.equals("premium_manage_subscription_url")) {
                        c = '~';
                        break;
                    }
                    c = 65535;
                    break;
                case 1295838485:
                    i2 = i11;
                    if (str11.equals("authorization_autoconfirm_period")) {
                        c = 127;
                        break;
                    }
                    c = 65535;
                    break;
                case 1316035878:
                    i2 = i11;
                    if (str11.equals("premium_gift_attach_menu_icon")) {
                        c = 128;
                        break;
                    }
                    c = 65535;
                    break;
                case 1320737754:
                    i2 = i11;
                    if (str11.equals("stories_sent_weekly_limit_default")) {
                        c = 129;
                        break;
                    }
                    c = 65535;
                    break;
                case 1322701672:
                    i2 = i11;
                    if (str11.equals("round_video_encoding")) {
                        c = 130;
                        break;
                    }
                    c = 65535;
                    break;
                case 1355302207:
                    i2 = i11;
                    if (str11.equals("chatlist_invites_limit_default")) {
                        c = 131;
                        break;
                    }
                    c = 65535;
                    break;
                case 1366527782:
                    i2 = i11;
                    if (str11.equals("transcribe_audio_trial_cooldown_until")) {
                        c = 132;
                        break;
                    }
                    c = 65535;
                    break;
                case 1389389863:
                    i2 = i11;
                    if (str11.equals("reactions_user_max_default")) {
                        c = 133;
                        break;
                    }
                    c = 65535;
                    break;
                case 1446751453:
                    i2 = i11;
                    if (str11.equals("caption_length_limit_default")) {
                        c = 134;
                        break;
                    }
                    c = 65535;
                    break;
                case 1450111474:
                    i2 = i11;
                    if (str11.equals("recommended_channels_limit_default")) {
                        c = 135;
                        break;
                    }
                    c = 65535;
                    break;
                case 1466044629:
                    i2 = i11;
                    if (str11.equals("transcribe_audio_trial_duration_max")) {
                        c = 136;
                        break;
                    }
                    c = 65535;
                    break;
                case 1468149675:
                    i2 = i11;
                    if (str11.equals("transcribe_audio_trial_weekly_number")) {
                        c = 137;
                        break;
                    }
                    c = 65535;
                    break;
                case 1477031202:
                    i2 = i11;
                    if (str11.equals("upload_markup_video")) {
                        c = 138;
                        break;
                    }
                    c = 65535;
                    break;
                case 1508636733:
                    i2 = i11;
                    if (str11.equals("chat_read_mark_size_threshold")) {
                        c = 139;
                        break;
                    }
                    c = 65535;
                    break;
                case 1512284126:
                    i2 = i11;
                    if (str11.equals("dialog_filters_chats_limit_default")) {
                        c = 140;
                        break;
                    }
                    c = 65535;
                    break;
                case 1535244155:
                    i2 = i11;
                    if (str11.equals("saved_gifs_limit_premium")) {
                        c = 141;
                        break;
                    }
                    c = 65535;
                    break;
                case 1548722654:
                    i2 = i11;
                    if (str11.equals("stargifts_blocked")) {
                        c = 142;
                        break;
                    }
                    c = 65535;
                    break;
                case 1554302509:
                    i2 = i11;
                    if (str11.equals("stories_entities")) {
                        c = 143;
                        break;
                    }
                    c = 65535;
                    break;
                case 1556659663:
                    i2 = i11;
                    if (str11.equals("channel_bg_icon_level_min")) {
                        c = 144;
                        break;
                    }
                    c = 65535;
                    break;
                case 1564023449:
                    i2 = i11;
                    if (str11.equals("giveaway_countries_max")) {
                        c = 145;
                        break;
                    }
                    c = 65535;
                    break;
                case 1586523512:
                    i2 = i11;
                    if (str11.equals("stories_changelog_user_id")) {
                        c = 146;
                        break;
                    }
                    c = 65535;
                    break;
                case 1597443023:
                    i2 = i11;
                    if (str11.equals("topics_pinned_limit")) {
                        c = 147;
                        break;
                    }
                    c = 65535;
                    break;
                case 1606936462:
                    i2 = i11;
                    if (str11.equals("channels_limit_default")) {
                        c = 148;
                        break;
                    }
                    c = 65535;
                    break;
                case 1625871267:
                    i2 = i11;
                    if (str11.equals("group_emoji_status_level_min")) {
                        c = 149;
                        break;
                    }
                    c = 65535;
                    break;
                case 1637671355:
                    i2 = i11;
                    if (str11.equals("web_app_allowed_protocols")) {
                        c = 150;
                        break;
                    }
                    c = 65535;
                    break;
                case 1667601876:
                    i2 = i11;
                    if (str11.equals("small_queue_max_active_operations_count")) {
                        c = 151;
                        break;
                    }
                    c = 65535;
                    break;
                case 1695201277:
                    i2 = i11;
                    if (str11.equals("story_caption_length_limit_premium")) {
                        c = 152;
                        break;
                    }
                    c = 65535;
                    break;
                case 1782655589:
                    i2 = i11;
                    if (str11.equals("factcheck_length_limit")) {
                        c = 153;
                        break;
                    }
                    c = 65535;
                    break;
                case 1785205890:
                    i2 = i11;
                    if (str11.equals("reactions_in_chat_max")) {
                        c = 154;
                        break;
                    }
                    c = 65535;
                    break;
                case 1849807064:
                    i2 = i11;
                    if (str11.equals("dialog_filters_limit_premium")) {
                        c = 155;
                        break;
                    }
                    c = 65535;
                    break;
                case 1850325103:
                    i2 = i11;
                    if (str11.equals("emojies_sounds")) {
                        c = 156;
                        break;
                    }
                    c = 65535;
                    break;
                case 1907641101:
                    i2 = i11;
                    if (str11.equals("group_transcribe_level_min")) {
                        c = 157;
                        break;
                    }
                    c = 65535;
                    break;
                case 1943239084:
                    i2 = i11;
                    if (str11.equals("about_length_limit_premium")) {
                        c = 158;
                        break;
                    }
                    c = 65535;
                    break;
                case 1956490398:
                    i2 = i11;
                    if (str11.equals("boosts_channel_level_max")) {
                        c = 159;
                        break;
                    }
                    c = 65535;
                    break;
                case 2000413432:
                    i2 = i11;
                    if (str11.equals("intro_description_length_limit")) {
                        c = 160;
                        break;
                    }
                    c = 65535;
                    break;
                case 2074702027:
                    i2 = i11;
                    if (str11.equals("export_private_urls")) {
                        c = 161;
                        break;
                    }
                    c = 65535;
                    break;
                case 2130452052:
                    i2 = i11;
                    if (str11.equals("forum_upgrade_participants_min")) {
                        c = 162;
                        break;
                    }
                    c = 65535;
                    break;
                case 2136829446:
                    i2 = i11;
                    if (str11.equals("dialog_filters_enabled")) {
                        c = 163;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    i2 = i11;
                    c = 65535;
                    break;
            }
            int i13 = i10;
            switch (c) {
                case 0:
                    TLRPC.JSONValue jSONValue = tL_jsonObjectValue.value;
                    if (jSONValue instanceof TLRPC.TL_jsonNumber) {
                        double d = ((TLRPC.TL_jsonNumber) jSONValue).value;
                        if (d != this.chatlistJoinedLimitPremium) {
                            i3 = (int) d;
                            this.chatlistJoinedLimitPremium = i3;
                            str = "chatlistJoinedLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 1:
                    TLRPC.JSONValue jSONValue2 = tL_jsonObjectValue.value;
                    if ((jSONValue2 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue2).value) != this.channelRevenueWithdrawalEnabled) {
                        this.channelRevenueWithdrawalEnabled = z3;
                        str2 = "channelRevenueWithdrawalEnabled";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 2:
                    TLRPC.JSONValue jSONValue3 = tL_jsonObjectValue.value;
                    if (jSONValue3 instanceof TLRPC.TL_jsonNumber) {
                        double d2 = ((TLRPC.TL_jsonNumber) jSONValue3).value;
                        if (d2 != this.dialogFiltersPinnedLimitPremium) {
                            i3 = (int) d2;
                            this.dialogFiltersPinnedLimitPremium = i3;
                            str = "dialogFiltersPinnedLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 3:
                    TLRPC.JSONValue jSONValue4 = tL_jsonObjectValue.value;
                    if (jSONValue4 instanceof TLRPC.TL_jsonNumber) {
                        double d3 = ((TLRPC.TL_jsonNumber) jSONValue4).value;
                        if (d3 != this.businessChatLinksLimit) {
                            i3 = (int) d3;
                            this.businessChatLinksLimit = i3;
                            str = "businessChatLinksLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 4:
                    TLRPC.JSONValue jSONValue5 = tL_jsonObjectValue.value;
                    if (jSONValue5 instanceof TLRPC.TL_jsonString) {
                        try {
                            parseLong = Long.parseLong(((TLRPC.TL_jsonString) jSONValue5).value);
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                        if (parseLong != this.telegramAntispamUserId) {
                            this.telegramAntispamUserId = parseLong;
                            edit.putLong("telegramAntispamUserId", parseLong);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 5:
                    TLRPC.JSONValue jSONValue6 = tL_jsonObjectValue.value;
                    if (jSONValue6 instanceof TLRPC.TL_jsonNumber) {
                        double d4 = ((TLRPC.TL_jsonNumber) jSONValue6).value;
                        if (d4 != this.channelCustomWallpaperLevelMin) {
                            i3 = (int) d4;
                            this.channelCustomWallpaperLevelMin = i3;
                            str = "channelCustomWallpaperLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 6:
                    TLRPC.JSONValue jSONValue7 = tL_jsonObjectValue.value;
                    if (jSONValue7 instanceof TLRPC.TL_jsonNumber) {
                        double d5 = this.channelRestrictSponsoredLevelMin;
                        double d6 = ((TLRPC.TL_jsonNumber) jSONValue7).value;
                        if (d5 != d6) {
                            i3 = (int) d6;
                            this.channelRestrictSponsoredLevelMin = i3;
                            str = "channelRestrictSponsoredLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 7:
                    TLRPC.JSONValue jSONValue8 = tL_jsonObjectValue.value;
                    if (jSONValue8 instanceof TLRPC.TL_jsonNumber) {
                        double d7 = ((TLRPC.TL_jsonNumber) jSONValue8).value;
                        if (d7 != this.stargiftsMessageLengthMax) {
                            i3 = (int) d7;
                            this.stargiftsMessageLengthMax = i3;
                            str = "stargiftsMessageLengthMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\b':
                    TLRPC.JSONValue jSONValue9 = tL_jsonObjectValue.value;
                    if (jSONValue9 instanceof TLRPC.TL_jsonNumber) {
                        int i14 = (int) ((TLRPC.TL_jsonNumber) jSONValue9).value;
                        this.largeQueueMaxActiveOperations = i14;
                        edit.putInt("largeQueueMaxActiveOperations", i14);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '\t':
                    TLRPC.JSONValue jSONValue10 = tL_jsonObjectValue.value;
                    if (jSONValue10 instanceof TLRPC.TL_jsonNumber) {
                        double d8 = ((TLRPC.TL_jsonNumber) jSONValue10).value;
                        if (d8 != this.uploadMaxFileParts) {
                            i3 = (int) d8;
                            this.uploadMaxFileParts = i3;
                            str = "uploadMaxFileParts";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\n':
                    TLRPC.JSONValue jSONValue11 = tL_jsonObjectValue.value;
                    if (jSONValue11 instanceof TLRPC.TL_jsonNumber) {
                        double d9 = ((TLRPC.TL_jsonNumber) jSONValue11).value;
                        if (d9 != this.maxPinnedDialogsCountDefault) {
                            i3 = (int) d9;
                            this.maxPinnedDialogsCountDefault = i3;
                            str = "maxPinnedDialogsCountDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 11:
                    TLRPC.JSONValue jSONValue12 = tL_jsonObjectValue.value;
                    if ((jSONValue12 instanceof TLRPC.TL_jsonBool) && (z4 = ((TLRPC.TL_jsonBool) jSONValue12).value) != this.collectDeviceStats) {
                        this.collectDeviceStats = z4;
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '\f':
                    TLRPC.JSONValue jSONValue13 = tL_jsonObjectValue.value;
                    if (jSONValue13 instanceof TLRPC.TL_jsonNumber) {
                        double d10 = ((TLRPC.TL_jsonNumber) jSONValue13).value;
                        if (d10 != this.storiesSuggestedReactionsLimitDefault) {
                            i3 = (int) d10;
                            this.storiesSuggestedReactionsLimitDefault = i3;
                            str = "storiesSuggestedReactionsLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\r':
                    TLRPC.JSONValue jSONValue14 = tL_jsonObjectValue.value;
                    if ((jSONValue14 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue14).value) != this.starsGiftsEnabled) {
                        this.starsGiftsEnabled = z3;
                        str2 = "starsGiftsEnabled";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 14:
                    HashSet hashSet2 = new HashSet();
                    TLRPC.JSONValue jSONValue15 = tL_jsonObjectValue.value;
                    if (jSONValue15 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray = (TLRPC.TL_jsonArray) jSONValue15;
                        int size2 = tL_jsonArray.value.size();
                        for (int i15 = 0; i15 < size2; i15++) {
                            TLRPC.JSONValue jSONValue16 = tL_jsonArray.value.get(i15);
                            if (jSONValue16 instanceof TLRPC.TL_jsonString) {
                                hashSet2.add(((TLRPC.TL_jsonString) jSONValue16).value);
                            }
                        }
                    }
                    if (!this.dismissedSuggestions.equals(hashSet2)) {
                        this.dismissedSuggestions = hashSet2;
                        edit.putStringSet("dismissedSuggestions", hashSet2);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 15:
                    TLRPC.JSONValue jSONValue17 = tL_jsonObjectValue.value;
                    if (jSONValue17 instanceof TLRPC.TL_jsonNumber) {
                        double d11 = ((TLRPC.TL_jsonNumber) jSONValue17).value;
                        if (d11 != this.pmReadDateExpirePeriod) {
                            i3 = (int) d11;
                            this.pmReadDateExpirePeriod = i3;
                            str = "pmReadDateExpirePeriod";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 16:
                    TLRPC.JSONValue jSONValue18 = tL_jsonObjectValue.value;
                    if ((jSONValue18 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue18).value) != this.smsjobsStickyNotificationEnabled) {
                        this.smsjobsStickyNotificationEnabled = z3;
                        str2 = "smsjobsStickyNotificationEnabled";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 17:
                    TLRPC.JSONValue jSONValue19 = tL_jsonObjectValue.value;
                    if (jSONValue19 instanceof TLRPC.TL_jsonNumber) {
                        double d12 = ((TLRPC.TL_jsonNumber) jSONValue19).value;
                        if (d12 != this.uploadPremiumSpeedupNotifyPeriod) {
                            i3 = (int) d12;
                            this.uploadPremiumSpeedupNotifyPeriod = i3;
                            str = "uploadPremiumSpeedupNotifyPeriod2";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 18:
                    TLRPC.JSONValue jSONValue20 = tL_jsonObjectValue.value;
                    if (jSONValue20 instanceof TLRPC.TL_jsonNumber) {
                        double d13 = ((TLRPC.TL_jsonNumber) jSONValue20).value;
                        if (d13 != this.storiesSentMonthlyLimitDefault) {
                            i3 = (int) d13;
                            this.storiesSentMonthlyLimitDefault = i3;
                            str = "storiesSentMonthlyLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 19:
                    TLRPC.JSONValue jSONValue21 = tL_jsonObjectValue.value;
                    if ((jSONValue21 instanceof TLRPC.TL_jsonNumber) && (i3 = (int) ((TLRPC.TL_jsonNumber) jSONValue21).value) != this.botPreviewMediasMax) {
                        this.botPreviewMediasMax = i3;
                        str = "botPreviewMediasMax";
                        edit.putInt(str, i3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 20:
                    TLRPC.JSONValue jSONValue22 = tL_jsonObjectValue.value;
                    if ((jSONValue22 instanceof TLRPC.TL_jsonBool) && (z5 = ((TLRPC.TL_jsonBool) jSONValue22).value) != this.showFiltersTooltip) {
                        this.showFiltersTooltip = z5;
                        edit.putBoolean("showFiltersTooltip", z5);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.filterSettingsUpdated, new Object[0]);
                        i11 = i2;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        z7 = true;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 21:
                    TLRPC.JSONValue jSONValue23 = tL_jsonObjectValue.value;
                    if ((jSONValue23 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue23).value) != this.qrLoginCamera) {
                        this.qrLoginCamera = z3;
                        str2 = "qrLoginCamera";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 22:
                    TLRPC.JSONValue jSONValue24 = tL_jsonObjectValue.value;
                    if (jSONValue24 instanceof TLRPC.TL_jsonBool) {
                        boolean z13 = this.starsLocked;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue24).value;
                        if (z13 != z3) {
                            this.starsLocked = z3;
                            str2 = "starsLocked";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 23:
                    TLRPC.JSONValue jSONValue25 = tL_jsonObjectValue.value;
                    if (jSONValue25 instanceof TLRPC.TL_jsonNumber) {
                        double d14 = ((TLRPC.TL_jsonNumber) jSONValue25).value;
                        if (d14 != this.groupCustomWallpaperLevelMin) {
                            i3 = (int) d14;
                            this.groupCustomWallpaperLevelMin = i3;
                            str = "groupCustomWallpaperLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 24:
                    TLRPC.JSONValue jSONValue26 = tL_jsonObjectValue.value;
                    if (jSONValue26 instanceof TLRPC.TL_jsonNumber) {
                        long j2 = (long) ((TLRPC.TL_jsonNumber) jSONValue26).value;
                        if (j2 != this.giveawayAddPeersMax) {
                            this.giveawayAddPeersMax = j2;
                            edit.putLong("giveaway_add_peers_max", j2);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 25:
                    TLRPC.JSONValue jSONValue27 = tL_jsonObjectValue.value;
                    if (jSONValue27 instanceof TLRPC.TL_jsonNumber) {
                        double d15 = ((TLRPC.TL_jsonNumber) jSONValue27).value;
                        if (d15 != this.channelWallpaperLevelMin) {
                            i3 = (int) d15;
                            this.channelWallpaperLevelMin = i3;
                            str = "channelWallpaperLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 26:
                    TLRPC.JSONValue jSONValue28 = tL_jsonObjectValue.value;
                    if (jSONValue28 instanceof TLRPC.TL_jsonNumber) {
                        double d16 = ((TLRPC.TL_jsonNumber) jSONValue28).value;
                        if (d16 != this.chatlistUpdatePeriod) {
                            i3 = (int) d16;
                            this.chatlistUpdatePeriod = i3;
                            str = "chatlistUpdatePeriod";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 27:
                    TLRPC.JSONValue jSONValue29 = tL_jsonObjectValue.value;
                    if (jSONValue29 instanceof TLRPC.TL_jsonNumber) {
                        j = (long) ((TLRPC.TL_jsonNumber) jSONValue29).value;
                        if (j != this.starsSubscriptionAmountMax) {
                            this.starsSubscriptionAmountMax = j;
                            str3 = "starsSubscriptionAmountMax";
                            edit.putLong(str3, j);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 28:
                    TLRPC.JSONValue jSONValue30 = tL_jsonObjectValue.value;
                    if (jSONValue30 instanceof TLRPC.TL_jsonNumber) {
                        double d17 = ((TLRPC.TL_jsonNumber) jSONValue30).value;
                        if (d17 != this.groupWallpaperLevelMin) {
                            i3 = (int) d17;
                            this.groupWallpaperLevelMin = i3;
                            str = "groupWallpaperLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 29:
                    TLRPC.JSONValue jSONValue31 = tL_jsonObjectValue.value;
                    if ((jSONValue31 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue31).value) != this.videoIgnoreAltDocuments) {
                        this.videoIgnoreAltDocuments = z3;
                        str2 = "videoIgnoreAltDocuments";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 30:
                    TLRPC.JSONValue jSONValue32 = tL_jsonObjectValue.value;
                    if (jSONValue32 instanceof TLRPC.TL_jsonNumber) {
                        double d18 = ((TLRPC.TL_jsonNumber) jSONValue32).value;
                        if (d18 != this.channelEmojiStatusLevelMin) {
                            i3 = (int) d18;
                            this.channelEmojiStatusLevelMin = i3;
                            str = "channelEmojiStatusLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 31:
                    HashSet hashSet3 = new HashSet();
                    TLRPC.JSONValue jSONValue33 = tL_jsonObjectValue.value;
                    if (jSONValue33 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray2 = (TLRPC.TL_jsonArray) jSONValue33;
                        int size3 = tL_jsonArray2.value.size();
                        for (int i16 = 0; i16 < size3; i16++) {
                            TLRPC.JSONValue jSONValue34 = tL_jsonArray2.value.get(i16);
                            if (jSONValue34 instanceof TLRPC.TL_jsonString) {
                                hashSet3.add(((TLRPC.TL_jsonString) jSONValue34).value);
                            }
                        }
                    }
                    if (!this.pendingSuggestions.equals(hashSet3)) {
                        this.pendingSuggestions = hashSet3;
                        edit.putStringSet("pendingSuggestions", hashSet3);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case ' ':
                    TLRPC.JSONValue jSONValue35 = tL_jsonObjectValue.value;
                    if (jSONValue35 instanceof TLRPC.TL_jsonNumber) {
                        double d19 = ((TLRPC.TL_jsonNumber) jSONValue35).value;
                        if (d19 != this.publicLinksLimitPremium) {
                            i3 = (int) d19;
                            this.publicLinksLimitPremium = i3;
                            str = "publicLinksLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '!':
                    TLRPC.JSONValue jSONValue36 = tL_jsonObjectValue.value;
                    if (jSONValue36 instanceof TLRPC.TL_jsonNumber) {
                        double d20 = ((TLRPC.TL_jsonNumber) jSONValue36).value;
                        if (d20 != this.storyExpiringLimitPremium) {
                            i3 = (int) d20;
                            this.storyExpiringLimitPremium = i3;
                            str = "storyExpiringLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\"':
                    TLRPC.JSONValue jSONValue37 = tL_jsonObjectValue.value;
                    if (jSONValue37 instanceof TLRPC.TL_jsonNumber) {
                        double d21 = ((TLRPC.TL_jsonNumber) jSONValue37).value;
                        if (d21 != this.groupProfileBgIconLevelMin) {
                            i3 = (int) d21;
                            this.groupProfileBgIconLevelMin = i3;
                            str = "groupProfileBgIconLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '#':
                    TLRPC.JSONValue jSONValue38 = tL_jsonObjectValue.value;
                    if (jSONValue38 instanceof TLRPC.TL_jsonNumber) {
                        TLRPC.TL_jsonNumber tL_jsonNumber = (TLRPC.TL_jsonNumber) jSONValue38;
                        double d22 = tL_jsonNumber.value;
                        double d23 = this.uploadPremiumSpeedupDownload;
                        Double.isNaN(d23);
                        if (Math.abs(d22 - d23) >= 0.009999999776482582d) {
                            f = (float) tL_jsonNumber.value;
                            this.uploadPremiumSpeedupDownload = f;
                            str4 = "uploadPremiumSpeedupDownload";
                            edit.putFloat(str4, f);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '$':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue39 = tL_jsonObjectValue.value;
                    if (jSONValue39 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray3 = (TLRPC.TL_jsonArray) jSONValue39;
                        int size4 = tL_jsonArray3.value.size();
                        for (int i17 = 0; i17 < size4; i17++) {
                            TLRPC.JSONValue jSONValue40 = tL_jsonArray3.value.get(i17);
                            if (jSONValue40 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue40).value.toLowerCase());
                            }
                        }
                    }
                    if (!this.ignoreRestrictionReasons.equals(hashSet)) {
                        this.ignoreRestrictionReasons = hashSet;
                        str5 = "ignoreRestrictionReasons";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '%':
                    TLRPC.JSONValue jSONValue41 = tL_jsonObjectValue.value;
                    if ((jSONValue41 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue41).value) != this.newNoncontactPeersRequirePremiumWithoutOwnpremium) {
                        this.newNoncontactPeersRequirePremiumWithoutOwnpremium = z3;
                        str2 = "newNoncontactPeersRequirePremiumWithoutOwnpremium";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '&':
                    TLRPC.JSONValue jSONValue42 = tL_jsonObjectValue.value;
                    if (jSONValue42 instanceof TLRPC.TL_jsonNumber) {
                        double d24 = ((TLRPC.TL_jsonNumber) jSONValue42).value;
                        if (d24 != this.quickReplyMessagesLimit) {
                            i3 = (int) d24;
                            this.quickReplyMessagesLimit = i3;
                            str = "quickReplyMessagesLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\'':
                    TLRPC.JSONValue jSONValue43 = tL_jsonObjectValue.value;
                    if (jSONValue43 instanceof TLRPC.TL_jsonNumber) {
                        double d25 = ((TLRPC.TL_jsonNumber) jSONValue43).value;
                        if (d25 != this.stickersFavedLimitPremium) {
                            i3 = (int) d25;
                            this.stickersFavedLimitPremium = i3;
                            str = "stickersFavedLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '(':
                    TLRPC.JSONValue jSONValue44 = tL_jsonObjectValue.value;
                    if (jSONValue44 instanceof TLRPC.TL_jsonNumber) {
                        int i18 = (int) ((TLRPC.TL_jsonNumber) jSONValue44).value;
                        this.stealthModeCooldown = i18;
                        edit.putInt("stories_stealth_cooldown_period", i18);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case ')':
                    TLRPC.JSONValue jSONValue45 = tL_jsonObjectValue.value;
                    if (jSONValue45 instanceof TLRPC.TL_jsonNumber) {
                        double d26 = ((TLRPC.TL_jsonNumber) jSONValue45).value;
                        if (d26 != this.stargiftsConvertPeriodMax) {
                            i3 = (int) d26;
                            this.stargiftsConvertPeriodMax = i3;
                            str = "stargiftsConvertPeriodMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '*':
                    TLRPC.JSONValue jSONValue46 = tL_jsonObjectValue.value;
                    if (jSONValue46 instanceof TLRPC.TL_jsonObject) {
                        tL_jsonObject5 = (TLRPC.TL_jsonObject) jSONValue46;
                        i11 = i2;
                        z7 = z10;
                        z9 = z11;
                        z8 = z12;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '+':
                    TLRPC.JSONValue jSONValue47 = tL_jsonObjectValue.value;
                    if ((jSONValue47 instanceof TLRPC.TL_jsonNumber) && (i4 = (int) ((TLRPC.TL_jsonNumber) jSONValue47).value) > 0) {
                        SharedConfig.overrideDevicePerformanceClass(i4 - 1);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case ',':
                    TLRPC.JSONValue jSONValue48 = tL_jsonObjectValue.value;
                    if (jSONValue48 instanceof TLRPC.TL_jsonBool) {
                        boolean z14 = this.giftTextFieldIcon;
                        boolean z15 = ((TLRPC.TL_jsonBool) jSONValue48).value;
                        if (z14 != z15) {
                            this.giftTextFieldIcon = z15;
                            edit.putBoolean("giftTextFieldIcon", z15);
                            NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdatePremiumGiftFieldIcon, new Object[0]);
                            i11 = i2;
                            z9 = z11;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            z7 = true;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '-':
                    TLRPC.JSONValue jSONValue49 = tL_jsonObjectValue.value;
                    if (jSONValue49 instanceof TLRPC.TL_jsonNumber) {
                        double d27 = ((TLRPC.TL_jsonNumber) jSONValue49).value;
                        if (d27 != this.chatReadMarkExpirePeriod) {
                            i3 = (int) d27;
                            this.chatReadMarkExpirePeriod = i3;
                            str = "chatReadMarkExpirePeriod";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '.':
                    TLRPC.JSONValue jSONValue50 = tL_jsonObjectValue.value;
                    if (jSONValue50 instanceof TLRPC.TL_jsonBool) {
                        double d28 = ((TLRPC.TL_jsonNumber) jSONValue50).value;
                        if (d28 != this.reactionsUniqMax) {
                            i3 = (int) d28;
                            this.reactionsUniqMax = i3;
                            str = "reactionsUniqMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '/':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue51 = tL_jsonObjectValue.value;
                    if (jSONValue51 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray4 = (TLRPC.TL_jsonArray) jSONValue51;
                        int size5 = tL_jsonArray4.value.size();
                        for (int i19 = 0; i19 < size5; i19++) {
                            TLRPC.JSONValue jSONValue52 = tL_jsonArray4.value.get(i19);
                            if (jSONValue52 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue52).value.replace("️", ""));
                            }
                        }
                    }
                    if (!this.diceEmojies.equals(hashSet)) {
                        this.diceEmojies = hashSet;
                        str5 = "diceEmojies";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '0':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue53 = tL_jsonObjectValue.value;
                    if (jSONValue53 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray5 = (TLRPC.TL_jsonArray) jSONValue53;
                        int size6 = tL_jsonArray5.value.size();
                        for (int i20 = 0; i20 < size6; i20++) {
                            TLRPC.JSONValue jSONValue54 = tL_jsonArray5.value.get(i20);
                            if (jSONValue54 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue54).value);
                            }
                        }
                    }
                    if (!this.authDomains.equals(hashSet)) {
                        this.authDomains = hashSet;
                        str5 = "authDomains";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '1':
                    TLRPC.JSONValue jSONValue55 = tL_jsonObjectValue.value;
                    if (jSONValue55 instanceof TLRPC.TL_jsonNumber) {
                        j = (long) ((TLRPC.TL_jsonNumber) jSONValue55).value;
                        if (j != this.starsRevenueWithdrawalMin) {
                            this.starsRevenueWithdrawalMin = j;
                            str3 = "starsRevenueWithdrawalMin";
                            edit.putLong(str3, j);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '2':
                    TLRPC.JSONValue jSONValue56 = tL_jsonObjectValue.value;
                    if (jSONValue56 instanceof TLRPC.TL_jsonNumber) {
                        int i21 = (int) ((TLRPC.TL_jsonNumber) jSONValue56).value;
                        this.stealthModePast = i21;
                        edit.putInt("stories_stealth_past_period", i21);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '3':
                    TLRPC.JSONValue jSONValue57 = tL_jsonObjectValue.value;
                    if (jSONValue57 instanceof TLRPC.TL_jsonNumber) {
                        double d29 = ((TLRPC.TL_jsonNumber) jSONValue57).value;
                        if (d29 != this.savedDialogsPinnedLimitPremium) {
                            i3 = (int) d29;
                            this.savedDialogsPinnedLimitPremium = i3;
                            str = "savedDialogsPinnedLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '4':
                    TLRPC.JSONValue jSONValue58 = tL_jsonObjectValue.value;
                    if (jSONValue58 instanceof TLRPC.TL_jsonNumber) {
                        double d30 = ((TLRPC.TL_jsonNumber) jSONValue58).value;
                        if (d30 != this.savedGifsLimitDefault) {
                            i3 = (int) d30;
                            this.savedGifsLimitDefault = i3;
                            str = "savedGifsLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '5':
                    TLRPC.JSONValue jSONValue59 = tL_jsonObjectValue.value;
                    if (jSONValue59 instanceof TLRPC.TL_jsonNumber) {
                        double d31 = ((TLRPC.TL_jsonNumber) jSONValue59).value;
                        if (d31 != this.storyCaptionLengthLimitDefault) {
                            i3 = (int) d31;
                            this.storyCaptionLengthLimitDefault = i3;
                            str = "storyCaptionLengthLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '6':
                    TLRPC.JSONValue jSONValue60 = tL_jsonObjectValue.value;
                    if ((jSONValue60 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue60).value) != this.showAnnualPerMonth) {
                        this.showAnnualPerMonth = z3;
                        str2 = "showAnnualPerMonth";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '7':
                    TLRPC.JSONValue jSONValue61 = tL_jsonObjectValue.value;
                    if (jSONValue61 instanceof TLRPC.TL_jsonNumber) {
                        double d32 = ((TLRPC.TL_jsonNumber) jSONValue61).value;
                        if (d32 != this.dialogFiltersLimitDefault) {
                            i3 = (int) d32;
                            this.dialogFiltersLimitDefault = i3;
                            str = "dialogFiltersLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '8':
                    TLRPC.JSONValue jSONValue62 = tL_jsonObjectValue.value;
                    if (jSONValue62 instanceof TLRPC.TL_jsonString) {
                        str6 = ((TLRPC.TL_jsonString) jSONValue62).value;
                        if (!str6.equals(this.premiumInvoiceSlug)) {
                            this.premiumInvoiceSlug = str6;
                            str7 = "premiumInvoiceSlug";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '9':
                    TLRPC.JSONValue jSONValue63 = tL_jsonObjectValue.value;
                    if (jSONValue63 instanceof TLRPC.TL_jsonNumber) {
                        double d33 = ((TLRPC.TL_jsonNumber) jSONValue63).value;
                        if (d33 != this.storiesSentWeeklyLimitPremium) {
                            i3 = (int) d33;
                            this.storiesSentWeeklyLimitPremium = i3;
                            str = "storiesSentWeeklyLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case ':':
                    TLRPC.JSONValue jSONValue64 = tL_jsonObjectValue.value;
                    if (jSONValue64 instanceof TLRPC.TL_jsonBool) {
                        boolean z16 = this.storiesExportNopublicLink;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue64).value;
                        if (z16 != z3) {
                            this.storiesExportNopublicLink = z3;
                            str2 = "storiesExportNopublicLink";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case ';':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue65 = tL_jsonObjectValue.value;
                    if (jSONValue65 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray6 = (TLRPC.TL_jsonArray) jSONValue65;
                        int size7 = tL_jsonArray6.value.size();
                        for (int i22 = 0; i22 < size7; i22++) {
                            TLRPC.JSONValue jSONValue66 = tL_jsonArray6.value.get(i22);
                            if (jSONValue66 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue66).value);
                            }
                        }
                    }
                    if (!this.exportUri.equals(hashSet)) {
                        this.exportUri = hashSet;
                        str5 = "exportUri2";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '<':
                    TLRPC.JSONValue jSONValue67 = tL_jsonObjectValue.value;
                    if (jSONValue67 instanceof TLRPC.TL_jsonNumber) {
                        double d34 = ((TLRPC.TL_jsonNumber) jSONValue67).value;
                        if (d34 != this.chatlistInvitesLimitPremium) {
                            i3 = (int) d34;
                            this.chatlistInvitesLimitPremium = i3;
                            str = "chatlistInvitesLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '=':
                    TLRPC.JSONValue jSONValue68 = tL_jsonObjectValue.value;
                    if (jSONValue68 instanceof TLRPC.TL_jsonNumber) {
                        TLRPC.TL_jsonNumber tL_jsonNumber2 = (TLRPC.TL_jsonNumber) jSONValue68;
                        double d35 = tL_jsonNumber2.value;
                        double d36 = this.starsUsdSellRate1000;
                        Double.isNaN(d36);
                        if (Math.abs(d35 - d36) > 0.0010000000474974513d) {
                            f = (float) tL_jsonNumber2.value;
                            this.starsUsdSellRate1000 = f;
                            str4 = "starsUsdSellRate1000";
                            edit.putFloat(str4, f);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '>':
                    TLRPC.JSONValue jSONValue69 = tL_jsonObjectValue.value;
                    if (jSONValue69 instanceof TLRPC.TL_jsonNumber) {
                        double d37 = ((TLRPC.TL_jsonNumber) jSONValue69).value;
                        if (d37 != this.aboutLengthLimitDefault) {
                            i3 = (int) d37;
                            this.aboutLengthLimitDefault = i3;
                            str = "aboutLengthLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '?':
                    TLRPC.JSONValue jSONValue70 = tL_jsonObjectValue.value;
                    if (jSONValue70 instanceof TLRPC.TL_jsonNumber) {
                        double d38 = ((TLRPC.TL_jsonNumber) jSONValue70).value;
                        if (d38 != this.reactionsUserMaxPremium) {
                            i3 = (int) d38;
                            this.reactionsUserMaxPremium = i3;
                            str = "reactionsUserMaxPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '@':
                    TLRPC.JSONValue jSONValue71 = tL_jsonObjectValue.value;
                    if (jSONValue71 instanceof TLRPC.TL_jsonNumber) {
                        double d39 = ((TLRPC.TL_jsonNumber) jSONValue71).value;
                        if (d39 != this.captionLengthLimitPremium) {
                            i3 = (int) d39;
                            this.captionLengthLimitPremium = i3;
                            str = "captionLengthLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'A':
                    TLRPC.JSONValue jSONValue72 = tL_jsonObjectValue.value;
                    if (jSONValue72 instanceof TLRPC.TL_jsonNumber) {
                        double d40 = this.recommendedChannelsLimitPremium;
                        double d41 = ((TLRPC.TL_jsonNumber) jSONValue72).value;
                        if (d40 != d41) {
                            i3 = (int) d41;
                            this.recommendedChannelsLimitPremium = i3;
                            str = "recommendedChannelsLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'B':
                    TLRPC.JSONValue jSONValue73 = tL_jsonObjectValue.value;
                    if ((jSONValue73 instanceof TLRPC.TL_jsonBool) && (z6 = ((TLRPC.TL_jsonBool) jSONValue73).value) != this.keepAliveService) {
                        this.keepAliveService = z6;
                        str8 = "keepAliveService";
                        edit.putBoolean(str8, z6);
                        i11 = i2;
                        z9 = z11;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        z7 = true;
                        z8 = true;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'C':
                    TLRPC.JSONValue jSONValue74 = tL_jsonObjectValue.value;
                    if (jSONValue74 instanceof TLRPC.TL_jsonArray) {
                        sparseIntArray = this.premiumFeaturesTypesToPosition;
                        arrayList = ((TLRPC.TL_jsonArray) jSONValue74).value;
                        str9 = "premiumFeaturesTypesToPosition";
                        z7 = savePremiumFeaturesPreviewOrder(str9, sparseIntArray, edit, arrayList);
                        z9 = z11;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'D':
                    TLRPC.JSONValue jSONValue75 = tL_jsonObjectValue.value;
                    if (jSONValue75 instanceof TLRPC.TL_jsonNumber) {
                        double d42 = ((TLRPC.TL_jsonNumber) jSONValue75).value;
                        if (d42 != this.ringtoneSizeMax) {
                            i3 = (int) d42;
                            this.ringtoneSizeMax = i3;
                            str = "ringtoneSizeMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'E':
                    TLRPC.JSONValue jSONValue76 = tL_jsonObjectValue.value;
                    if (jSONValue76 instanceof TLRPC.TL_jsonNumber) {
                        double d43 = ((TLRPC.TL_jsonNumber) jSONValue76).value;
                        if (d43 != this.dialogFiltersChatsLimitPremium) {
                            i3 = (int) d43;
                            this.dialogFiltersChatsLimitPremium = i3;
                            str = "dialogFiltersChatsLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'F':
                    TLRPC.JSONValue jSONValue77 = tL_jsonObjectValue.value;
                    if (jSONValue77 instanceof TLRPC.TL_jsonArray) {
                        sparseIntArray = this.businessFeaturesTypesToPosition;
                        arrayList = ((TLRPC.TL_jsonArray) jSONValue77).value;
                        str9 = "businessFeaturesTypesToPosition";
                        z7 = savePremiumFeaturesPreviewOrder(str9, sparseIntArray, edit, arrayList);
                        z9 = z11;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'G':
                    TLRPC.JSONValue jSONValue78 = tL_jsonObjectValue.value;
                    if (jSONValue78 instanceof TLRPC.TL_jsonNumber) {
                        double d44 = ((TLRPC.TL_jsonNumber) jSONValue78).value;
                        if (d44 != this.chatlistJoinedLimitDefault) {
                            i3 = (int) d44;
                            this.chatlistJoinedLimitDefault = i3;
                            str = "chatlistJoinedLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'H':
                    TLRPC.JSONValue jSONValue79 = tL_jsonObjectValue.value;
                    if (jSONValue79 instanceof TLRPC.TL_jsonNumber) {
                        double d45 = ((TLRPC.TL_jsonNumber) jSONValue79).value;
                        if (d45 != this.storiesPinnedToTopCountMax) {
                            i3 = (int) d45;
                            this.storiesPinnedToTopCountMax = i3;
                            str = "storiesPinnedToTopCountMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'I':
                    TLRPC.JSONValue jSONValue80 = tL_jsonObjectValue.value;
                    if (jSONValue80 instanceof TLRPC.TL_jsonNumber) {
                        double d46 = ((TLRPC.TL_jsonNumber) jSONValue80).value;
                        if (d46 != this.channelsLimitPremium) {
                            i3 = (int) d46;
                            this.channelsLimitPremium = i3;
                            str = "channelsLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'J':
                    TLRPC.JSONValue jSONValue81 = tL_jsonObjectValue.value;
                    if ((jSONValue81 instanceof TLRPC.TL_jsonBool) && (z6 = ((TLRPC.TL_jsonBool) jSONValue81).value) != this.backgroundConnection) {
                        this.backgroundConnection = z6;
                        str8 = "backgroundConnection";
                        edit.putBoolean(str8, z6);
                        i11 = i2;
                        z9 = z11;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        z7 = true;
                        z8 = true;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'K':
                    TLRPC.JSONValue jSONValue82 = tL_jsonObjectValue.value;
                    if (jSONValue82 instanceof TLRPC.TL_jsonNumber) {
                        long j3 = (long) ((TLRPC.TL_jsonNumber) jSONValue82).value;
                        if (j3 != this.giveawayPeriodMax) {
                            this.giveawayPeriodMax = j3;
                            edit.putLong("giveaway_period_max", j3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'L':
                    HashMap<String, DiceFrameSuccess> hashMap2 = new HashMap<>();
                    TLRPC.JSONValue jSONValue83 = tL_jsonObjectValue.value;
                    if (jSONValue83 instanceof TLRPC.TL_jsonObject) {
                        TLRPC.TL_jsonObject tL_jsonObject7 = (TLRPC.TL_jsonObject) jSONValue83;
                        int size8 = tL_jsonObject7.value.size();
                        int i23 = 0;
                        while (i23 < size8) {
                            TLRPC.TL_jsonObjectValue tL_jsonObjectValue2 = tL_jsonObject7.value.get(i23);
                            TLRPC.JSONValue jSONValue84 = tL_jsonObjectValue2.value;
                            if (jSONValue84 instanceof TLRPC.TL_jsonObject) {
                                TLRPC.TL_jsonObject tL_jsonObject8 = (TLRPC.TL_jsonObject) jSONValue84;
                                int size9 = tL_jsonObject8.value.size();
                                int i24 = 0;
                                int i25 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                int i26 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                while (i24 < size9) {
                                    TLRPC.TL_jsonObjectValue tL_jsonObjectValue3 = tL_jsonObject8.value.get(i24);
                                    TLRPC.TL_jsonObject tL_jsonObject9 = tL_jsonObject7;
                                    if (tL_jsonObjectValue3.value instanceof TLRPC.TL_jsonNumber) {
                                        i6 = size8;
                                        if ("value".equals(tL_jsonObjectValue3.key)) {
                                            tL_jsonObject3 = tL_jsonObject8;
                                            i7 = size9;
                                            i26 = (int) ((TLRPC.TL_jsonNumber) tL_jsonObjectValue3.value).value;
                                        } else {
                                            tL_jsonObject3 = tL_jsonObject8;
                                            i7 = size9;
                                            if ("frame_start".equals(tL_jsonObjectValue3.key)) {
                                                i25 = (int) ((TLRPC.TL_jsonNumber) tL_jsonObjectValue3.value).value;
                                            }
                                        }
                                    } else {
                                        i6 = size8;
                                        tL_jsonObject3 = tL_jsonObject8;
                                        i7 = size9;
                                    }
                                    i24++;
                                    tL_jsonObject8 = tL_jsonObject3;
                                    tL_jsonObject7 = tL_jsonObject9;
                                    size8 = i6;
                                    size9 = i7;
                                }
                                tL_jsonObject2 = tL_jsonObject7;
                                i5 = size8;
                                if (i25 != Integer.MAX_VALUE && i26 != Integer.MAX_VALUE) {
                                    hashMap2.put(tL_jsonObjectValue2.key.replace("️", ""), new DiceFrameSuccess(i25, i26));
                                }
                            } else {
                                tL_jsonObject2 = tL_jsonObject7;
                                i5 = size8;
                            }
                            i23++;
                            tL_jsonObject7 = tL_jsonObject2;
                            size8 = i5;
                        }
                    }
                    if (!this.diceSuccess.equals(hashMap2)) {
                        this.diceSuccess = hashMap2;
                        SerializedData serializedData = new SerializedData();
                        serializedData.writeInt32(this.diceSuccess.size());
                        for (Map.Entry<String, DiceFrameSuccess> entry : this.diceSuccess.entrySet()) {
                            serializedData.writeString(entry.getKey());
                            DiceFrameSuccess value = entry.getValue();
                            serializedData.writeInt32(value.frame);
                            serializedData.writeInt32(value.num);
                        }
                        edit.putString("diceSuccess", Base64.encodeToString(serializedData.toByteArray(), 0));
                        serializedData.cleanup();
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'M':
                    TLRPC.JSONValue jSONValue85 = tL_jsonObjectValue.value;
                    if (jSONValue85 instanceof TLRPC.TL_jsonNumber) {
                        double d47 = ((TLRPC.TL_jsonNumber) jSONValue85).value;
                        if (d47 != this.dialogFiltersPinnedLimitDefault) {
                            i3 = (int) d47;
                            this.dialogFiltersPinnedLimitDefault = i3;
                            str = "dialogFiltersPinnedLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'N':
                    TLRPC.JSONValue jSONValue86 = tL_jsonObjectValue.value;
                    if (jSONValue86 instanceof TLRPC.TL_jsonNumber) {
                        double d48 = ((TLRPC.TL_jsonNumber) jSONValue86).value;
                        if (d48 != this.hiddenMembersGroupSizeMin) {
                            i3 = (int) d48;
                            this.hiddenMembersGroupSizeMin = i3;
                            str = "hiddenMembersGroupSizeMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'O':
                    TLRPC.JSONValue jSONValue87 = tL_jsonObjectValue.value;
                    if ((jSONValue87 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue87).value) != this.autoarchiveAvailable) {
                        this.autoarchiveAvailable = z3;
                        str2 = "autoarchiveAvailable";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'P':
                    TLRPC.JSONValue jSONValue88 = tL_jsonObjectValue.value;
                    if (jSONValue88 instanceof TLRPC.TL_jsonNumber) {
                        double d49 = ((TLRPC.TL_jsonNumber) jSONValue88).value;
                        if (d49 != this.quickRepliesLimit) {
                            i3 = (int) d49;
                            this.quickRepliesLimit = i3;
                            str = "quickRepliesLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'Q':
                    TLRPC.JSONValue jSONValue89 = tL_jsonObjectValue.value;
                    if (jSONValue89 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString = (TLRPC.TL_jsonString) jSONValue89;
                        if (!tL_jsonString.value.equals(this.youtubePipType)) {
                            str6 = tL_jsonString.value;
                            this.youtubePipType = str6;
                            str7 = "youtubePipType";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'R':
                    TLRPC.JSONValue jSONValue90 = tL_jsonObjectValue.value;
                    if (jSONValue90 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString2 = (TLRPC.TL_jsonString) jSONValue90;
                        if (!TextUtils.equals(tL_jsonString2.value, this.tonProxyAddress)) {
                            str6 = tL_jsonString2.value;
                            this.tonProxyAddress = str6;
                            str7 = "tonProxyAddress";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'S':
                    TLRPC.JSONValue jSONValue91 = tL_jsonObjectValue.value;
                    if (jSONValue91 instanceof TLRPC.TL_jsonNumber) {
                        double d50 = this.animatedEmojisZoom;
                        double d51 = ((TLRPC.TL_jsonNumber) jSONValue91).value;
                        if (d50 != d51) {
                            f = (float) d51;
                            this.animatedEmojisZoom = f;
                            str4 = "animatedEmojisZoom";
                            edit.putFloat(str4, f);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'T':
                    TLRPC.JSONValue jSONValue92 = tL_jsonObjectValue.value;
                    if (jSONValue92 instanceof TLRPC.TL_jsonNumber) {
                        double d52 = ((TLRPC.TL_jsonNumber) jSONValue92).value;
                        if (d52 != this.telegramAntispamGroupSizeMin) {
                            i3 = (int) d52;
                            this.telegramAntispamGroupSizeMin = i3;
                            str = "telegramAntispamGroupSizeMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'U':
                    TLRPC.JSONValue jSONValue93 = tL_jsonObjectValue.value;
                    if (jSONValue93 instanceof TLRPC.TL_jsonBool) {
                        boolean z17 = this.giveawayGiftsPurchaseAvailable;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue93).value;
                        if (z17 != z3) {
                            this.giveawayGiftsPurchaseAvailable = z3;
                            str2 = "giveawayGiftsPurchaseAvailable";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'V':
                    TLRPC.JSONValue jSONValue94 = tL_jsonObjectValue.value;
                    if (jSONValue94 instanceof TLRPC.TL_jsonNumber) {
                        j = (long) ((TLRPC.TL_jsonNumber) jSONValue94).value;
                        if (j != this.starsPaidReactionAmountMax) {
                            this.starsPaidReactionAmountMax = j;
                            str3 = "starsPaidReactionAmountMax";
                            edit.putLong(str3, j);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'W':
                    TLRPC.JSONValue jSONValue95 = tL_jsonObjectValue.value;
                    if ((jSONValue95 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue95).value) != this.suggestStickersApiOnly) {
                        this.suggestStickersApiOnly = z3;
                        str2 = "suggestStickersApiOnly";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'X':
                    ArrayList<String> arrayList2 = new ArrayList<>();
                    TLRPC.JSONValue jSONValue96 = tL_jsonObjectValue.value;
                    if (jSONValue96 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray7 = (TLRPC.TL_jsonArray) jSONValue96;
                        int size10 = tL_jsonArray7.value.size();
                        for (int i27 = 0; i27 < size10; i27++) {
                            TLRPC.JSONValue jSONValue97 = tL_jsonArray7.value.get(i27);
                            if (jSONValue97 instanceof TLRPC.TL_jsonString) {
                                arrayList2.add(((TLRPC.TL_jsonString) jSONValue97).value.replace("️", ""));
                            }
                        }
                    }
                    if (!this.gifSearchEmojies.equals(arrayList2)) {
                        this.gifSearchEmojies = arrayList2;
                        SerializedData serializedData2 = new SerializedData();
                        serializedData2.writeInt32(this.gifSearchEmojies.size());
                        int size11 = this.gifSearchEmojies.size();
                        for (int i28 = 0; i28 < size11; i28++) {
                            serializedData2.writeString(this.gifSearchEmojies.get(i28));
                        }
                        edit.putString("gifSearchEmojies", Base64.encodeToString(serializedData2.toByteArray(), 0));
                        serializedData2.cleanup();
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'Y':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue98 = tL_jsonObjectValue.value;
                    if (jSONValue98 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray8 = (TLRPC.TL_jsonArray) jSONValue98;
                        int size12 = tL_jsonArray8.value.size();
                        for (int i29 = 0; i29 < size12; i29++) {
                            TLRPC.JSONValue jSONValue99 = tL_jsonArray8.value.get(i29);
                            if (jSONValue99 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue99).value);
                            }
                        }
                    }
                    if (!this.autologinDomains.equals(hashSet)) {
                        this.autologinDomains = hashSet;
                        str5 = "autologinDomains";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'Z':
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue100 = tL_jsonObjectValue.value;
                    if (jSONValue100 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray9 = (TLRPC.TL_jsonArray) jSONValue100;
                        int size13 = tL_jsonArray9.value.size();
                        for (int i30 = 0; i30 < size13; i30++) {
                            TLRPC.JSONValue jSONValue101 = tL_jsonArray9.value.get(i30);
                            if (jSONValue101 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue101).value);
                            }
                        }
                    }
                    if (!this.exportGroupUri.equals(hashSet)) {
                        this.exportGroupUri = hashSet;
                        str5 = "exportGroupUri";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '[':
                    TLRPC.JSONValue jSONValue102 = tL_jsonObjectValue.value;
                    if (jSONValue102 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString3 = (TLRPC.TL_jsonString) jSONValue102;
                        if (!TextUtils.equals(tL_jsonString3.value, this.storiesPosting)) {
                            String str12 = tL_jsonString3.value;
                            this.storiesPosting = str12;
                            edit.putString("storiesPosting", str12);
                            z7 = true;
                            z9 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '\\':
                    TLRPC.JSONValue jSONValue103 = tL_jsonObjectValue.value;
                    if (jSONValue103 instanceof TLRPC.TL_jsonNumber) {
                        double d53 = ((TLRPC.TL_jsonNumber) jSONValue103).value;
                        if (d53 != this.channelProfileIconLevelMin) {
                            i3 = (int) d53;
                            this.channelProfileIconLevelMin = i3;
                            str = "channelProfileIconLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case ']':
                    TLRPC.JSONValue jSONValue104 = tL_jsonObjectValue.value;
                    if (jSONValue104 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString4 = (TLRPC.TL_jsonString) jSONValue104;
                        if (!TextUtils.equals(tL_jsonString4.value, this.weatherSearchUsername)) {
                            str6 = tL_jsonString4.value;
                            this.weatherSearchUsername = str6;
                            str7 = "weatherSearchUsername";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '^':
                    TLRPC.JSONValue jSONValue105 = tL_jsonObjectValue.value;
                    if ((jSONValue105 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue105).value) != this.getfileExperimentalParams) {
                        this.getfileExperimentalParams = z3;
                        str2 = "getfileExperimentalParams";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '_':
                    TLRPC.JSONValue jSONValue106 = tL_jsonObjectValue.value;
                    if ((jSONValue106 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue106).value) != this.canEditFactcheck) {
                        this.canEditFactcheck = z3;
                        str2 = "canEditFactcheck";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '`':
                    TLRPC.JSONValue jSONValue107 = tL_jsonObjectValue.value;
                    if (jSONValue107 instanceof TLRPC.TL_jsonArray) {
                        HashSet hashSet4 = new HashSet();
                        Iterator<TLRPC.JSONValue> it = ((TLRPC.TL_jsonArray) jSONValue107).value.iterator();
                        while (it.hasNext()) {
                            TLRPC.JSONValue next = it.next();
                            if (next instanceof TLRPC.TL_jsonString) {
                                hashSet4.add(((TLRPC.TL_jsonString) next).value);
                            }
                        }
                        if (!this.directPaymentsCurrency.containsAll(hashSet4) || !hashSet4.containsAll(this.directPaymentsCurrency)) {
                            this.directPaymentsCurrency.clear();
                            this.directPaymentsCurrency.addAll(hashSet4);
                            edit.putStringSet("directPaymentsCurrency", hashSet4);
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.billingProductDetailsUpdated, new Object[0]);
                            i11 = i2;
                            z9 = z11;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            z7 = true;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'a':
                    TLRPC.JSONValue jSONValue108 = tL_jsonObjectValue.value;
                    if (jSONValue108 instanceof TLRPC.TL_jsonNumber) {
                        double d54 = ((TLRPC.TL_jsonNumber) jSONValue108).value;
                        if (d54 != this.checkResetLangpack) {
                            int i31 = (int) d54;
                            this.checkResetLangpack = i31;
                            edit.putInt("checkResetLangpack", i31);
                            LocaleController.getInstance().checkPatchLangpack(this.currentAccount);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'b':
                    TLRPC.JSONValue jSONValue109 = tL_jsonObjectValue.value;
                    if (jSONValue109 instanceof TLRPC.TL_jsonNumber) {
                        double d55 = ((TLRPC.TL_jsonNumber) jSONValue109).value;
                        if (d55 != this.publicLinksLimitDefault) {
                            i3 = (int) d55;
                            this.publicLinksLimitDefault = i3;
                            str = "publicLinksLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'c':
                    TLRPC.JSONValue jSONValue110 = tL_jsonObjectValue.value;
                    if (jSONValue110 instanceof TLRPC.TL_jsonNumber) {
                        double d56 = ((TLRPC.TL_jsonNumber) jSONValue110).value;
                        if (d56 != this.storyExpiringLimitDefault) {
                            i3 = (int) d56;
                            this.storyExpiringLimitDefault = i3;
                            str = "storyExpiringLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'd':
                    TLRPC.JSONValue jSONValue111 = tL_jsonObjectValue.value;
                    if ((jSONValue111 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue111).value) != this.sponsoredLinksInappAllow) {
                        this.sponsoredLinksInappAllow = z3;
                        str2 = "sponsoredLinksInappAllow";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'e':
                    TLRPC.JSONValue jSONValue112 = tL_jsonObjectValue.value;
                    if (jSONValue112 instanceof TLRPC.TL_jsonNumber) {
                        int i32 = (int) ((TLRPC.TL_jsonNumber) jSONValue112).value;
                        this.stealthModeFuture = i32;
                        edit.putInt("stories_stealth_future_period", i32);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'f':
                    TLRPC.JSONValue jSONValue113 = tL_jsonObjectValue.value;
                    if (jSONValue113 instanceof TLRPC.TL_jsonNumber) {
                        double d57 = ((TLRPC.TL_jsonNumber) jSONValue113).value;
                        if (d57 != this.uploadMaxFilePartsPremium) {
                            i3 = (int) d57;
                            this.uploadMaxFilePartsPremium = i3;
                            str = "uploadMaxFilePartsPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'g':
                    TLRPC.JSONValue jSONValue114 = tL_jsonObjectValue.value;
                    if (jSONValue114 instanceof TLRPC.TL_jsonNumber) {
                        double d58 = ((TLRPC.TL_jsonNumber) jSONValue114).value;
                        if (d58 != this.maxPinnedDialogsCountPremium) {
                            i3 = (int) d58;
                            this.maxPinnedDialogsCountPremium = i3;
                            str = "maxPinnedDialogsCountPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'h':
                    TLRPC.JSONValue jSONValue115 = tL_jsonObjectValue.value;
                    if (jSONValue115 instanceof TLRPC.TL_jsonNumber) {
                        double d59 = ((TLRPC.TL_jsonNumber) jSONValue115).value;
                        if (d59 != this.storiesSuggestedReactionsLimitPremium) {
                            i3 = (int) d59;
                            this.storiesSuggestedReactionsLimitPremium = i3;
                            str = "storiesSuggestedReactionsLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'i':
                    TLRPC.JSONValue jSONValue116 = tL_jsonObjectValue.value;
                    if (jSONValue116 instanceof TLRPC.TL_jsonNumber) {
                        double d60 = ((TLRPC.TL_jsonNumber) jSONValue116).value;
                        if (d60 != this.stickersFavedLimitDefault) {
                            i3 = (int) d60;
                            this.stickersFavedLimitDefault = i3;
                            str = "stickersFavedLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'j':
                    TLRPC.JSONValue jSONValue117 = tL_jsonObjectValue.value;
                    if (jSONValue117 instanceof TLRPC.TL_jsonNumber) {
                        long j4 = (long) ((TLRPC.TL_jsonNumber) jSONValue117).value;
                        if (j4 != this.giveawayBoostsPerPremium) {
                            this.giveawayBoostsPerPremium = j4;
                            edit.putLong("giveaway_boosts_per_premium", j4);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'k':
                    TLRPC.JSONValue jSONValue118 = tL_jsonObjectValue.value;
                    if (jSONValue118 instanceof TLRPC.TL_jsonNumber) {
                        double d61 = ((TLRPC.TL_jsonNumber) jSONValue118).value;
                        if (d61 != this.groupCallVideoMaxParticipants) {
                            i3 = (int) d61;
                            this.groupCallVideoMaxParticipants = i3;
                            str = "groipCallVideoMaxParticipants";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'l':
                    TLRPC.JSONValue jSONValue119 = tL_jsonObjectValue.value;
                    if ((jSONValue119 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue119).value) != this.saveGifsWithStickers) {
                        this.saveGifsWithStickers = z3;
                        str2 = "saveGifsWithStickers";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'm':
                    TLRPC.JSONValue jSONValue120 = tL_jsonObjectValue.value;
                    if (jSONValue120 instanceof TLRPC.TL_jsonNumber) {
                        long j5 = (long) ((TLRPC.TL_jsonNumber) jSONValue120).value;
                        if (j5 != this.boostsPerSentGift) {
                            this.boostsPerSentGift = j5;
                            edit.putLong("boosts_per_sent_gift", j5);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'n':
                    TLRPC.JSONValue jSONValue121 = tL_jsonObjectValue.value;
                    if (jSONValue121 instanceof TLRPC.TL_jsonNumber) {
                        double d62 = ((TLRPC.TL_jsonNumber) jSONValue121).value;
                        if (d62 != this.storiesSentMonthlyLimitPremium) {
                            i3 = (int) d62;
                            this.storiesSentMonthlyLimitPremium = i3;
                            str = "storiesSentMonthlyLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'o':
                    TLRPC.JSONValue jSONValue122 = tL_jsonObjectValue.value;
                    if ((jSONValue122 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue122).value) != this.androidDisableRoundCamera2) {
                        this.androidDisableRoundCamera2 = z3;
                        str2 = "androidDisableRoundCamera2";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case 'p':
                    TLRPC.JSONValue jSONValue123 = tL_jsonObjectValue.value;
                    if (jSONValue123 instanceof TLRPC.TL_jsonString) {
                        str6 = ((TLRPC.TL_jsonString) jSONValue123).value;
                        if (!Objects.equals(BuildVars.GOOGLE_AUTH_CLIENT_ID, str6)) {
                            BuildVars.GOOGLE_AUTH_CLIENT_ID = str6;
                            str7 = "googleAuthClientId";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'q':
                    TLRPC.JSONValue jSONValue124 = tL_jsonObjectValue.value;
                    if (jSONValue124 instanceof TLRPC.TL_jsonNumber) {
                        TLRPC.TL_jsonNumber tL_jsonNumber3 = (TLRPC.TL_jsonNumber) jSONValue124;
                        double d63 = tL_jsonNumber3.value;
                        double d64 = this.starsUsdWithdrawRate1000;
                        Double.isNaN(d64);
                        if (Math.abs(d63 - d64) > 0.0010000000474974513d) {
                            f = (float) tL_jsonNumber3.value;
                            this.starsUsdWithdrawRate1000 = f;
                            str4 = "starsUsdWithdrawRate1000";
                            edit.putFloat(str4, f);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'r':
                    TLRPC.JSONValue jSONValue125 = tL_jsonObjectValue.value;
                    if (jSONValue125 instanceof TLRPC.TL_jsonNumber) {
                        double d65 = this.quoteLengthMax;
                        double d66 = ((TLRPC.TL_jsonNumber) jSONValue125).value;
                        if (d65 != d66) {
                            i3 = (int) d66;
                            this.quoteLengthMax = i3;
                            str = "quoteLengthMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 's':
                    TLRPC.JSONValue jSONValue126 = tL_jsonObjectValue.value;
                    if (jSONValue126 instanceof TLRPC.TL_jsonNumber) {
                        double d67 = ((TLRPC.TL_jsonNumber) jSONValue126).value;
                        if (d67 != this.ringtoneDurationMax) {
                            i3 = (int) d67;
                            this.ringtoneDurationMax = i3;
                            str = "ringtoneDurationMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 't':
                    TLRPC.JSONValue jSONValue127 = tL_jsonObjectValue.value;
                    if (jSONValue127 instanceof TLRPC.TL_jsonNumber) {
                        double d68 = ((TLRPC.TL_jsonNumber) jSONValue127).value;
                        if (d68 != this.savedDialogsPinnedLimitDefault) {
                            i3 = (int) d68;
                            this.savedDialogsPinnedLimitDefault = i3;
                            str = "savedDialogsPinnedLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'u':
                    TLRPC.JSONValue jSONValue128 = tL_jsonObjectValue.value;
                    if (jSONValue128 instanceof TLRPC.TL_jsonNumber) {
                        double d69 = ((TLRPC.TL_jsonNumber) jSONValue128).value;
                        if (d69 != this.updateCheckDelay) {
                            i3 = (int) d69;
                        }
                        i11 = i2;
                        z7 = z10;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    } else {
                        if (jSONValue128 instanceof TLRPC.TL_jsonString) {
                            i3 = Utilities.parseInt((CharSequence) ((TLRPC.TL_jsonString) jSONValue128).value).intValue();
                            break;
                        }
                        i11 = i2;
                        z7 = z10;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                    }
                    this.updateCheckDelay = i3;
                    str = "updateCheckDelay";
                    edit.putInt(str, i3);
                    z9 = z11;
                    z7 = true;
                    i11 = i2;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'v':
                    TLRPC.JSONValue jSONValue129 = tL_jsonObjectValue.value;
                    if (jSONValue129 instanceof TLRPC.TL_jsonNumber) {
                        double d70 = ((TLRPC.TL_jsonNumber) jSONValue129).value;
                        if (d70 != this.groupEmojiStickersLevelMin) {
                            i3 = (int) d70;
                            this.groupEmojiStickersLevelMin = i3;
                            str = "groupEmojiStickersLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'w':
                    TLRPC.JSONValue jSONValue130 = tL_jsonObjectValue.value;
                    if (jSONValue130 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString5 = (TLRPC.TL_jsonString) jSONValue130;
                        if (!TextUtils.equals(this.storyVenueSearchBot, tL_jsonString5.value)) {
                            str6 = tL_jsonString5.value;
                            this.storyVenueSearchBot = str6;
                            str7 = "storyVenueSearchBot";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'x':
                    TLRPC.JSONValue jSONValue131 = tL_jsonObjectValue.value;
                    if (jSONValue131 instanceof TLRPC.TL_jsonNumber) {
                        TLRPC.TL_jsonNumber tL_jsonNumber4 = (TLRPC.TL_jsonNumber) jSONValue131;
                        double d71 = tL_jsonNumber4.value;
                        double d72 = this.uploadPremiumSpeedupUpload;
                        Double.isNaN(d72);
                        if (Math.abs(d71 - d72) >= 0.009999999776482582d) {
                            f = (float) tL_jsonNumber4.value;
                            this.uploadPremiumSpeedupUpload = f;
                            str4 = "uploadPremiumSpeedupUpload";
                            edit.putFloat(str4, f);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'y':
                    TLRPC.JSONValue jSONValue132 = tL_jsonObjectValue.value;
                    if (jSONValue132 instanceof TLRPC.TL_jsonString) {
                        str6 = ((TLRPC.TL_jsonString) jSONValue132).value;
                        if (!str6.equals(this.premiumBotUsername)) {
                            this.premiumBotUsername = str6;
                            str7 = "premiumBotUsername";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 'z':
                    TLRPC.JSONValue jSONValue133 = tL_jsonObjectValue.value;
                    if (jSONValue133 instanceof TLRPC.TL_jsonBool) {
                        boolean z18 = this.premiumLocked;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue133).value;
                        if (z18 != z3) {
                            this.premiumLocked = z3;
                            str2 = "premiumLocked";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '{':
                    TLRPC.JSONValue jSONValue134 = tL_jsonObjectValue.value;
                    if (jSONValue134 instanceof TLRPC.TL_jsonNumber) {
                        j = (long) ((TLRPC.TL_jsonNumber) jSONValue134).value;
                        if (j != this.starsPaidPostAmountMax) {
                            this.starsPaidPostAmountMax = j;
                            str3 = "starsPaidPostAmountMax";
                            edit.putLong(str3, j);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '|':
                    TLRPC.JSONValue jSONValue135 = tL_jsonObjectValue.value;
                    if ((jSONValue135 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue135).value) != this.storyWeatherPreload) {
                        this.storyWeatherPreload = z3;
                        str2 = "storyWeatherPreload";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case '}':
                    TLRPC.JSONValue jSONValue136 = tL_jsonObjectValue.value;
                    if (jSONValue136 instanceof TLRPC.TL_jsonNumber) {
                        double d73 = ((TLRPC.TL_jsonNumber) jSONValue136).value;
                        if (d73 != this.introTitleLengthLimit) {
                            i3 = (int) d73;
                            this.introTitleLengthLimit = i3;
                            str = "introTitleLengthLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case '~':
                    TLRPC.JSONValue jSONValue137 = tL_jsonObjectValue.value;
                    if (jSONValue137 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString6 = (TLRPC.TL_jsonString) jSONValue137;
                        if (!TextUtils.equals(tL_jsonString6.value, this.premiumManageSubscriptionUrl)) {
                            str6 = tL_jsonString6.value;
                            this.premiumManageSubscriptionUrl = str6;
                            str7 = "premiumManageSubscriptionUrl";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.dialogTranslate /* 127 */:
                    TLRPC.JSONValue jSONValue138 = tL_jsonObjectValue.value;
                    if (jSONValue138 instanceof TLRPC.TL_jsonNumber) {
                        double d74 = this.authorizationAutoconfirmPeriod;
                        double d75 = ((TLRPC.TL_jsonNumber) jSONValue138).value;
                        if (d74 != d75) {
                            i3 = (int) d75;
                            this.authorizationAutoconfirmPeriod = i3;
                            str = "authorizationAutoconfirmPeriod";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 128:
                    TLRPC.JSONValue jSONValue139 = tL_jsonObjectValue.value;
                    if (jSONValue139 instanceof TLRPC.TL_jsonBool) {
                        boolean z19 = this.giftAttachMenuIcon;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue139).value;
                        if (z19 != z3) {
                            this.giftAttachMenuIcon = z3;
                            str2 = "giftAttachMenuIcon";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.walletPendingTransactionsChanged /* 129 */:
                    TLRPC.JSONValue jSONValue140 = tL_jsonObjectValue.value;
                    if (jSONValue140 instanceof TLRPC.TL_jsonNumber) {
                        double d76 = ((TLRPC.TL_jsonNumber) jSONValue140).value;
                        if (d76 != this.storiesSentWeeklyLimitDefault) {
                            i3 = (int) d76;
                            this.storiesSentWeeklyLimitDefault = i3;
                            str = "storiesSentWeeklyLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.walletSyncProgressChanged /* 130 */:
                    TLRPC.JSONValue jSONValue141 = tL_jsonObjectValue.value;
                    if (jSONValue141 instanceof TLRPC.TL_jsonObject) {
                        TLRPC.TL_jsonObject tL_jsonObject10 = (TLRPC.TL_jsonObject) jSONValue141;
                        int size14 = tL_jsonObject10.value.size();
                        z7 = z10;
                        for (int i33 = 0; i33 < size14; i33++) {
                            TLRPC.TL_jsonObjectValue tL_jsonObjectValue4 = tL_jsonObject10.value.get(i33);
                            String str13 = tL_jsonObjectValue4.key;
                            str13.hashCode();
                            switch (str13.hashCode()) {
                                case -233204595:
                                    if (str13.equals("diameter")) {
                                        c2 = 0;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                case 258902020:
                                    if (str13.equals("audio_bitrate")) {
                                        c2 = 1;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                case 1924434857:
                                    if (str13.equals("video_bitrate")) {
                                        c2 = 2;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                default:
                                    c2 = 65535;
                                    break;
                            }
                            switch (c2) {
                                case 0:
                                    TLRPC.JSONValue jSONValue142 = tL_jsonObjectValue4.value;
                                    if (jSONValue142 instanceof TLRPC.TL_jsonNumber) {
                                        double d77 = ((TLRPC.TL_jsonNumber) jSONValue142).value;
                                        if (d77 != this.roundVideoSize) {
                                            i8 = (int) d77;
                                            this.roundVideoSize = i8;
                                            str10 = "roundVideoSize";
                                            edit.putInt(str10, i8);
                                            z7 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                case 1:
                                    TLRPC.JSONValue jSONValue143 = tL_jsonObjectValue4.value;
                                    if (jSONValue143 instanceof TLRPC.TL_jsonNumber) {
                                        double d78 = ((TLRPC.TL_jsonNumber) jSONValue143).value;
                                        if (d78 != this.roundAudioBitrate) {
                                            i8 = (int) d78;
                                            this.roundAudioBitrate = i8;
                                            str10 = "roundAudioBitrate";
                                            edit.putInt(str10, i8);
                                            z7 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                case 2:
                                    TLRPC.JSONValue jSONValue144 = tL_jsonObjectValue4.value;
                                    if (jSONValue144 instanceof TLRPC.TL_jsonNumber) {
                                        double d79 = ((TLRPC.TL_jsonNumber) jSONValue144).value;
                                        if (d79 != this.roundVideoBitrate) {
                                            i8 = (int) d79;
                                            this.roundVideoBitrate = i8;
                                            str10 = "roundVideoBitrate";
                                            edit.putInt(str10, i8);
                                            z7 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                            }
                        }
                        i11 = i2;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.httpFileDidLoad /* 131 */:
                    TLRPC.JSONValue jSONValue145 = tL_jsonObjectValue.value;
                    if (jSONValue145 instanceof TLRPC.TL_jsonNumber) {
                        double d80 = ((TLRPC.TL_jsonNumber) jSONValue145).value;
                        if (d80 != this.chatlistInvitesLimitDefault) {
                            i3 = (int) d80;
                            this.chatlistInvitesLimitDefault = i3;
                            str = "chatlistInvitesLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.httpFileDidFailedLoad /* 132 */:
                    TLRPC.JSONValue jSONValue146 = tL_jsonObjectValue.value;
                    if (jSONValue146 instanceof TLRPC.TL_jsonNumber) {
                        i11 = (int) ((TLRPC.TL_jsonNumber) jSONValue146).value;
                        z7 = z10;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.didUpdateConnectionState /* 133 */:
                    TLRPC.JSONValue jSONValue147 = tL_jsonObjectValue.value;
                    if (jSONValue147 instanceof TLRPC.TL_jsonNumber) {
                        double d81 = ((TLRPC.TL_jsonNumber) jSONValue147).value;
                        if (d81 != this.reactionsUserMaxDefault) {
                            i3 = (int) d81;
                            this.reactionsUserMaxDefault = i3;
                            str = "reactionsUserMaxDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileUploaded /* 134 */:
                    TLRPC.JSONValue jSONValue148 = tL_jsonObjectValue.value;
                    if (jSONValue148 instanceof TLRPC.TL_jsonNumber) {
                        double d82 = ((TLRPC.TL_jsonNumber) jSONValue148).value;
                        if (d82 != this.captionLengthLimitDefault) {
                            i3 = (int) d82;
                            this.captionLengthLimitDefault = i3;
                            str = "captionLengthLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileUploadFailed /* 135 */:
                    TLRPC.JSONValue jSONValue149 = tL_jsonObjectValue.value;
                    if (jSONValue149 instanceof TLRPC.TL_jsonNumber) {
                        double d83 = this.recommendedChannelsLimitDefault;
                        double d84 = ((TLRPC.TL_jsonNumber) jSONValue149).value;
                        if (d83 != d84) {
                            i3 = (int) d84;
                            this.recommendedChannelsLimitDefault = i3;
                            str = "recommendedChannelsLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileUploadProgressChanged /* 136 */:
                    TLRPC.JSONValue jSONValue150 = tL_jsonObjectValue.value;
                    if (jSONValue150 instanceof TLRPC.TL_jsonNumber) {
                        double d85 = this.transcribeAudioTrialDurationMax;
                        double d86 = ((TLRPC.TL_jsonNumber) jSONValue150).value;
                        if (d85 != d86) {
                            i3 = (int) d86;
                            this.transcribeAudioTrialDurationMax = i3;
                            str = "transcribeAudioTrialDurationMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileLoadProgressChanged /* 137 */:
                    TLRPC.JSONValue jSONValue151 = tL_jsonObjectValue.value;
                    if (jSONValue151 instanceof TLRPC.TL_jsonNumber) {
                        i10 = (int) ((TLRPC.TL_jsonNumber) jSONValue151).value;
                        i11 = i2;
                        z7 = z10;
                        z9 = z11;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.fileLoaded /* 138 */:
                    TLRPC.JSONValue jSONValue152 = tL_jsonObjectValue.value;
                    if (jSONValue152 instanceof TLRPC.TL_jsonBool) {
                        boolean z20 = this.uploadMarkupVideo;
                        z3 = ((TLRPC.TL_jsonBool) jSONValue152).value;
                        if (z20 != z3) {
                            this.uploadMarkupVideo = z3;
                            str2 = "uploadMarkupVideo";
                            edit.putBoolean(str2, z3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileLoadFailed /* 139 */:
                    TLRPC.JSONValue jSONValue153 = tL_jsonObjectValue.value;
                    if (jSONValue153 instanceof TLRPC.TL_jsonNumber) {
                        double d87 = ((TLRPC.TL_jsonNumber) jSONValue153).value;
                        if (d87 != this.chatReadMarkSizeThreshold) {
                            i3 = (int) d87;
                            this.chatReadMarkSizeThreshold = i3;
                            str = "chatReadMarkSizeThreshold";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.filePreparingStarted /* 140 */:
                    TLRPC.JSONValue jSONValue154 = tL_jsonObjectValue.value;
                    if (jSONValue154 instanceof TLRPC.TL_jsonNumber) {
                        double d88 = ((TLRPC.TL_jsonNumber) jSONValue154).value;
                        if (d88 != this.dialogFiltersChatsLimitDefault) {
                            i3 = (int) d88;
                            this.dialogFiltersChatsLimitDefault = i3;
                            str = "dialogFiltersChatsLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.fileNewChunkAvailable /* 141 */:
                    TLRPC.JSONValue jSONValue155 = tL_jsonObjectValue.value;
                    if (jSONValue155 instanceof TLRPC.TL_jsonNumber) {
                        double d89 = ((TLRPC.TL_jsonNumber) jSONValue155).value;
                        if (d89 != this.savedGifsLimitPremium) {
                            i3 = (int) d89;
                            this.savedGifsLimitPremium = i3;
                            str = "savedGifsLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.filePreparingFailed /* 142 */:
                    TLRPC.JSONValue jSONValue156 = tL_jsonObjectValue.value;
                    if ((jSONValue156 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue156).value) != this.stargiftsBlocked) {
                        this.stargiftsBlocked = z3;
                        str2 = "stargiftsBlocked";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.dialogsUnreadCounterChanged /* 143 */:
                    TLRPC.JSONValue jSONValue157 = tL_jsonObjectValue.value;
                    if (jSONValue157 instanceof TLRPC.TL_jsonString) {
                        TLRPC.TL_jsonString tL_jsonString7 = (TLRPC.TL_jsonString) jSONValue157;
                        if (!TextUtils.equals(tL_jsonString7.value, this.storiesEntities)) {
                            str6 = tL_jsonString7.value;
                            this.storiesEntities = str6;
                            str7 = "storiesEntities";
                            edit.putString(str7, str6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.messagePlayingProgressDidChanged /* 144 */:
                    TLRPC.JSONValue jSONValue158 = tL_jsonObjectValue.value;
                    if (jSONValue158 instanceof TLRPC.TL_jsonNumber) {
                        double d90 = ((TLRPC.TL_jsonNumber) jSONValue158).value;
                        if (d90 != this.channelBgIconLevelMin) {
                            i3 = (int) d90;
                            this.channelBgIconLevelMin = i3;
                            str = "channelBgIconLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.messagePlayingDidReset /* 145 */:
                    TLRPC.JSONValue jSONValue159 = tL_jsonObjectValue.value;
                    if (jSONValue159 instanceof TLRPC.TL_jsonNumber) {
                        long j6 = (long) ((TLRPC.TL_jsonNumber) jSONValue159).value;
                        if (j6 != this.giveawayCountriesMax) {
                            this.giveawayCountriesMax = j6;
                            edit.putLong("giveaway_countries_max", j6);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.messagePlayingPlayStateChanged /* 146 */:
                    TLRPC.JSONValue jSONValue160 = tL_jsonObjectValue.value;
                    if (jSONValue160 instanceof TLRPC.TL_jsonNumber) {
                        long j7 = (long) ((TLRPC.TL_jsonNumber) jSONValue160).value;
                        this.storiesChangelogUserId = j7;
                        edit.putLong("stories_changelog_user_id", j7);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.messagePlayingDidStart /* 147 */:
                    TLRPC.JSONValue jSONValue161 = tL_jsonObjectValue.value;
                    if (jSONValue161 instanceof TLRPC.TL_jsonNumber) {
                        double d91 = ((TLRPC.TL_jsonNumber) jSONValue161).value;
                        if (d91 != this.topicsPinnedLimit) {
                            i3 = (int) d91;
                            this.topicsPinnedLimit = i3;
                            str = "topicsPinnedLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.messagePlayingDidSeek /* 148 */:
                    TLRPC.JSONValue jSONValue162 = tL_jsonObjectValue.value;
                    if (jSONValue162 instanceof TLRPC.TL_jsonNumber) {
                        double d92 = ((TLRPC.TL_jsonNumber) jSONValue162).value;
                        if (d92 != this.channelsLimitDefault) {
                            i3 = (int) d92;
                            this.channelsLimitDefault = i3;
                            str = "channelsLimitDefault";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.messagePlayingGoingToStop /* 149 */:
                    TLRPC.JSONValue jSONValue163 = tL_jsonObjectValue.value;
                    if (jSONValue163 instanceof TLRPC.TL_jsonNumber) {
                        double d93 = ((TLRPC.TL_jsonNumber) jSONValue163).value;
                        if (d93 != this.groupEmojiStatusLevelMin) {
                            i3 = (int) d93;
                            this.groupEmojiStatusLevelMin = i3;
                            str = "groupEmojiStatusLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 150:
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue164 = tL_jsonObjectValue.value;
                    if (jSONValue164 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray10 = (TLRPC.TL_jsonArray) jSONValue164;
                        int size15 = tL_jsonArray10.value.size();
                        for (int i34 = 0; i34 < size15; i34++) {
                            TLRPC.JSONValue jSONValue165 = tL_jsonArray10.value.get(i34);
                            if (jSONValue165 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue165).value.toLowerCase());
                            }
                        }
                    }
                    if (!this.webAppAllowedProtocols.equals(hashSet)) {
                        this.webAppAllowedProtocols = hashSet;
                        str5 = "webAppAllowedProtocols";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.recordStarted /* 151 */:
                    TLRPC.JSONValue jSONValue166 = tL_jsonObjectValue.value;
                    if (jSONValue166 instanceof TLRPC.TL_jsonNumber) {
                        int i35 = (int) ((TLRPC.TL_jsonNumber) jSONValue166).value;
                        this.smallQueueMaxActiveOperations = i35;
                        edit.putInt("smallQueueMaxActiveOperations", i35);
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.recordStartError /* 152 */:
                    TLRPC.JSONValue jSONValue167 = tL_jsonObjectValue.value;
                    if (jSONValue167 instanceof TLRPC.TL_jsonNumber) {
                        double d94 = ((TLRPC.TL_jsonNumber) jSONValue167).value;
                        if (d94 != this.storyCaptionLengthLimitPremium) {
                            i3 = (int) d94;
                            this.storyCaptionLengthLimitPremium = i3;
                            str = "storyCaptionLengthLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.recordStopped /* 153 */:
                    TLRPC.JSONValue jSONValue168 = tL_jsonObjectValue.value;
                    if ((jSONValue168 instanceof TLRPC.TL_jsonNumber) && (i3 = (int) ((TLRPC.TL_jsonNumber) jSONValue168).value) != this.factcheckLengthLimit) {
                        this.factcheckLengthLimit = i3;
                        str = "factcheckLengthLimit";
                        edit.putInt(str, i3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.recordPaused /* 154 */:
                    TLRPC.JSONValue jSONValue169 = tL_jsonObjectValue.value;
                    if (jSONValue169 instanceof TLRPC.TL_jsonNumber) {
                        double d95 = ((TLRPC.TL_jsonNumber) jSONValue169).value;
                        if (d95 != this.reactionsInChatMax) {
                            i3 = (int) d95;
                            this.reactionsInChatMax = i3;
                            str = "reactionsInChatMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.recordResumed /* 155 */:
                    TLRPC.JSONValue jSONValue170 = tL_jsonObjectValue.value;
                    if (jSONValue170 instanceof TLRPC.TL_jsonNumber) {
                        double d96 = ((TLRPC.TL_jsonNumber) jSONValue170).value;
                        if (d96 != this.dialogFiltersLimitPremium) {
                            i3 = (int) d96;
                            this.dialogFiltersLimitPremium = i3;
                            str = "dialogFiltersLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.screenshotTook /* 156 */:
                    try {
                        hashMap = new HashMap<>();
                        TLRPC.JSONValue jSONValue171 = tL_jsonObjectValue.value;
                        if (jSONValue171 instanceof TLRPC.TL_jsonObject) {
                            TLRPC.TL_jsonObject tL_jsonObject11 = (TLRPC.TL_jsonObject) jSONValue171;
                            int size16 = tL_jsonObject11.value.size();
                            for (int i36 = 0; i36 < size16; i36++) {
                                TLRPC.TL_jsonObjectValue tL_jsonObjectValue5 = tL_jsonObject11.value.get(i36);
                                TLRPC.JSONValue jSONValue172 = tL_jsonObjectValue5.value;
                                if (jSONValue172 instanceof TLRPC.TL_jsonObject) {
                                    TLRPC.TL_jsonObject tL_jsonObject12 = (TLRPC.TL_jsonObject) jSONValue172;
                                    int size17 = tL_jsonObject12.value.size();
                                    long j8 = 0;
                                    long j9 = 0;
                                    String str14 = null;
                                    for (int i37 = 0; i37 < size17; i37++) {
                                        TLRPC.TL_jsonObjectValue tL_jsonObjectValue6 = tL_jsonObject12.value.get(i37);
                                        if (tL_jsonObjectValue6.value instanceof TLRPC.TL_jsonString) {
                                            if ("id".equals(tL_jsonObjectValue6.key)) {
                                                j8 = Utilities.parseLong(((TLRPC.TL_jsonString) tL_jsonObjectValue6.value).value).longValue();
                                            } else if ("access_hash".equals(tL_jsonObjectValue6.key)) {
                                                j9 = Utilities.parseLong(((TLRPC.TL_jsonString) tL_jsonObjectValue6.value).value).longValue();
                                            } else if ("file_reference_base64".equals(tL_jsonObjectValue6.key)) {
                                                str14 = ((TLRPC.TL_jsonString) tL_jsonObjectValue6.value).value;
                                            }
                                        }
                                    }
                                    if (j8 != 0 && j9 != 0 && str14 != null) {
                                        hashMap.put(tL_jsonObjectValue5.key.replace("️", ""), new EmojiSound(j8, j9, str14));
                                    }
                                }
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    if (!this.emojiSounds.equals(hashMap)) {
                        this.emojiSounds = hashMap;
                        SerializedData serializedData3 = new SerializedData();
                        serializedData3.writeInt32(this.emojiSounds.size());
                        for (Map.Entry<String, EmojiSound> entry2 : this.emojiSounds.entrySet()) {
                            serializedData3.writeString(entry2.getKey());
                            EmojiSound value2 = entry2.getValue();
                            serializedData3.writeInt64(value2.id);
                            serializedData3.writeInt64(value2.accessHash);
                            serializedData3.writeByteArray(value2.fileReference);
                        }
                        edit.putString("emojiSounds", Base64.encodeToString(serializedData3.toByteArray(), 0));
                        serializedData3.cleanup();
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                case NotificationCenter.albumsDidLoad /* 157 */:
                    TLRPC.JSONValue jSONValue173 = tL_jsonObjectValue.value;
                    if (jSONValue173 instanceof TLRPC.TL_jsonNumber) {
                        double d97 = ((TLRPC.TL_jsonNumber) jSONValue173).value;
                        if (d97 != this.groupTranscribeLevelMin) {
                            i3 = (int) d97;
                            this.groupTranscribeLevelMin = i3;
                            str = "groupTranscribeLevelMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.audioDidSent /* 158 */:
                    TLRPC.JSONValue jSONValue174 = tL_jsonObjectValue.value;
                    if (jSONValue174 instanceof TLRPC.TL_jsonNumber) {
                        double d98 = ((TLRPC.TL_jsonNumber) jSONValue174).value;
                        if (d98 != this.aboutLengthLimitPremium) {
                            i3 = (int) d98;
                            this.aboutLengthLimitPremium = i3;
                            str = "aboutLengthLimitPremium";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case 159:
                    TLRPC.JSONValue jSONValue175 = tL_jsonObjectValue.value;
                    if (jSONValue175 instanceof TLRPC.TL_jsonNumber) {
                        double d99 = this.boostsChannelLevelMax;
                        double d100 = ((TLRPC.TL_jsonNumber) jSONValue175).value;
                        if (d99 != d100) {
                            i3 = (int) d100;
                            this.boostsChannelLevelMax = i3;
                            str = "boostsChannelLevelMax";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.audioRouteChanged /* 160 */:
                    TLRPC.JSONValue jSONValue176 = tL_jsonObjectValue.value;
                    if (jSONValue176 instanceof TLRPC.TL_jsonNumber) {
                        double d101 = ((TLRPC.TL_jsonNumber) jSONValue176).value;
                        if (d101 != this.introDescriptionLengthLimit) {
                            i3 = (int) d101;
                            this.introDescriptionLengthLimit = i3;
                            str = "introDescriptionLengthLimit";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.didStartedCall /* 161 */:
                    hashSet = new HashSet<>();
                    TLRPC.JSONValue jSONValue177 = tL_jsonObjectValue.value;
                    if (jSONValue177 instanceof TLRPC.TL_jsonArray) {
                        TLRPC.TL_jsonArray tL_jsonArray11 = (TLRPC.TL_jsonArray) jSONValue177;
                        int size18 = tL_jsonArray11.value.size();
                        for (int i38 = 0; i38 < size18; i38++) {
                            TLRPC.JSONValue jSONValue178 = tL_jsonArray11.value.get(i38);
                            if (jSONValue178 instanceof TLRPC.TL_jsonString) {
                                hashSet.add(((TLRPC.TL_jsonString) jSONValue178).value);
                            }
                        }
                    }
                    if (!this.exportPrivateUri.equals(hashSet)) {
                        this.exportPrivateUri = hashSet;
                        str5 = "exportPrivateUri";
                        edit.putStringSet(str5, hashSet);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.groupCallUpdated /* 162 */:
                    TLRPC.JSONValue jSONValue179 = tL_jsonObjectValue.value;
                    if (jSONValue179 instanceof TLRPC.TL_jsonNumber) {
                        double d102 = ((TLRPC.TL_jsonNumber) jSONValue179).value;
                        if (d102 != this.forumUpgradeParticipantsMin) {
                            i3 = (int) d102;
                            this.forumUpgradeParticipantsMin = i3;
                            str = "forumUpgradeParticipantsMin";
                            edit.putInt(str, i3);
                            z9 = z11;
                            z7 = true;
                            i11 = i2;
                            z8 = z12;
                            tL_jsonObject5 = tL_jsonObject6;
                            i10 = i13;
                            break;
                        }
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                case NotificationCenter.groupCallSpeakingUsersUpdated /* 163 */:
                    TLRPC.JSONValue jSONValue180 = tL_jsonObjectValue.value;
                    if ((jSONValue180 instanceof TLRPC.TL_jsonBool) && (z3 = ((TLRPC.TL_jsonBool) jSONValue180).value) != this.filtersEnabled) {
                        this.filtersEnabled = z3;
                        str2 = "filtersEnabled";
                        edit.putBoolean(str2, z3);
                        z9 = z11;
                        z7 = true;
                        i11 = i2;
                        z8 = z12;
                        tL_jsonObject5 = tL_jsonObject6;
                        i10 = i13;
                        break;
                    }
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
                default:
                    i11 = i2;
                    z7 = z10;
                    z9 = z11;
                    z8 = z12;
                    tL_jsonObject5 = tL_jsonObject6;
                    i10 = i13;
                    break;
            }
            i9++;
            tL_jsonObject4 = tL_jsonObject;
            size = i12;
        }
        int i39 = i10;
        int i40 = i11;
        boolean z21 = z7;
        TLRPC.TL_jsonObject tL_jsonObject13 = tL_jsonObject5;
        boolean z22 = z8;
        boolean z23 = z9;
        if (i39 != this.transcribeAudioTrialWeeklyNumber) {
            this.transcribeAudioTrialWeeklyNumber = i39;
            edit.putInt("transcribeAudioTrialWeeklyNumber", i39);
            if (this.transcribeAudioTrialCurrentNumber <= 0) {
                if (i40 != 0) {
                    i = i40;
                } else {
                    i = i40;
                }
                this.transcribeAudioTrialCurrentNumber = i39;
                edit.putInt("transcribeAudioTrialCurrentNumber", i39);
                z = true;
            } else {
                i = i40;
            }
        } else {
            i = i40;
            z = z21;
        }
        if (i != this.transcribeAudioTrialCooldownUntil) {
            this.transcribeAudioTrialCooldownUntil = i;
            edit.putInt("transcribeAudioTrialCooldownUntil", i);
            scheduleTranscriptionUpdate();
            z2 = true;
        } else {
            z2 = z;
        }
        if (z2) {
            edit.apply();
        }
        if (tL_jsonObject13 != null) {
            LiteMode.updatePresets(tL_jsonObject13);
        }
        if (z22) {
            ApplicationLoader.startPushService();
            ConnectionsManager connectionsManager = getConnectionsManager();
            connectionsManager.setPushConnectionEnabled(connectionsManager.isPushConnectionEnabled());
        }
        if (z23) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda137
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$applyAppConfig$32();
                }
            });
        }
        logDeviceStats();
    }

    private void applyDialogNotificationsSettings(long j, long j2, TLRPC.PeerNotifySettings peerNotifySettings) {
        getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j, j2, peerNotifySettings);
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC.Dialog> arrayList) {
        SharedPreferences.Editor edit = getNotificationsSettings(this.currentAccount).edit();
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC.Dialog dialog = arrayList.get(i);
            if (dialog.peer != null && (dialog.notify_settings instanceof TLRPC.TL_peerNotifySettings)) {
                getNotificationsController().getNotificationsSettingsFacade().setSettingsForDialog(edit, dialog, dialog.notify_settings);
            }
        }
        edit.apply();
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC.TL_updateFolderPeers> arrayList) {
        if (arrayList == null) {
            return false;
        }
        int size = arrayList.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            TLRPC.TL_updateFolderPeers tL_updateFolderPeers = arrayList.get(i);
            int size2 = tL_updateFolderPeers.folder_peers.size();
            for (int i2 = 0; i2 < size2; i2++) {
                TLRPC.TL_folderPeer tL_folderPeer = tL_updateFolderPeers.folder_peers.get(i2);
                TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(DialogObject.getPeerDialogId(tL_folderPeer.peer));
                if (dialog != null) {
                    int i3 = dialog.folder_id;
                    int i4 = tL_folderPeer.folder_id;
                    if (i3 != i4) {
                        dialog.pinned = false;
                        dialog.pinnedNum = 0;
                        dialog.folder_id = i4;
                        this.hasArchivedChats = true;
                        checkArchiveFolder();
                    }
                }
            }
            getMessagesStorage().setDialogsFolderId(arrayList.get(i).folder_peers, null, 0L, 0);
            i++;
            z = true;
        }
        return z;
    }

    private void checkChannelError(String str, long j) {
        str.hashCode();
        switch (str) {
            case "USER_BANNED_IN_CHANNEL":
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 2);
                break;
            case "CHANNEL_PRIVATE":
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 0);
                break;
            case "CHANNEL_PUBLIC_GROUP_NA":
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 1);
                break;
        }
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if ((this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null) || (!z && ((i = this.currentDeletingTaskTime) == 0 || i > currentTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !z) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        this.currentDeleteTaskRunnable = null;
        LongSparseArray longSparseArray = this.currentDeletingTaskMids;
        final LongSparseArray clone = longSparseArray != null ? longSparseArray.clone() : null;
        LongSparseArray longSparseArray2 = this.currentDeletingTaskMediaMids;
        final LongSparseArray clone2 = longSparseArray2 != null ? longSparseArray2.clone() : null;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda234
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$80(clone, clone2);
            }
        });
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: checkPromoInfoInternal, reason: merged with bridge method [inline-methods] */
    public void lambda$checkPromoInfo$155(boolean z) {
        String str;
        boolean z2 = false;
        if (z && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((z || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences globalMainSettings = getGlobalMainSettings();
            globalMainSettings.getBoolean("proxy_enabled", false);
            final String string = globalMainSettings.getString("proxy_ip", "");
            final String string2 = globalMainSettings.getString("proxy_secret", "");
            if (this.promoDialogId != 0 && this.promoDialogType == PROMO_TYPE_PROXY && (str = this.proxyDialogAddress) != null) {
                if (!str.equals(string + string2)) {
                    z2 = true;
                }
            }
            final int i = this.lastCheckPromoId + 1;
            this.lastCheckPromoId = i;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLRPC.TL_help_getPromoData(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda65
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkPromoInfoInternal$160(i, string, string2, tLObject, tL_error);
                }
            });
            if (z2) {
                this.promoDialogId = 0L;
                this.proxyDialogAddress = null;
                this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda66(this));
            }
        }
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            ReadTask readTask = this.readTasks.get(i2);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i2);
                this.readTasksMap.remove(readTask.dialogId);
                i2--;
                size--;
            }
            i2++;
        }
        int size2 = this.repliesReadTasks.size();
        while (i < size2) {
            ReadTask readTask2 = this.repliesReadTasks.get(i);
            if (readTask2.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask2);
                this.repliesReadTasks.remove(i);
                this.threadsReadTasksMap.remove(readTask2.dialogId + "_" + readTask2.replyId);
                i += -1;
                size2 += -1;
            }
            i++;
        }
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime > getConnectionsManager().getCurrentTime() || this.checkingTosUpdate || !getUserConfig().isClientActivated()) {
            return;
        }
        this.checkingTosUpdate = true;
        getConnectionsManager().sendRequest(new TLRPC.TL_help_getTermsOfServiceUpdate(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda282
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$checkTosUpdate$154(tLObject, tL_error);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void completeReadTask(ReadTask readTask) {
        TLRPC.TL_messages_readHistory tL_messages_readHistory;
        RequestDelegate requestDelegate;
        ConnectionsManager connectionsManager;
        TLRPC.TL_messages_readHistory tL_messages_readHistory2;
        if (readTask.replyId != 0) {
            TLRPC.TL_messages_readDiscussion tL_messages_readDiscussion = new TLRPC.TL_messages_readDiscussion();
            tL_messages_readDiscussion.msg_id = (int) readTask.replyId;
            tL_messages_readDiscussion.peer = getInputPeer(readTask.dialogId);
            tL_messages_readDiscussion.read_max_id = readTask.maxId;
            ConnectionsManager connectionsManager2 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda207
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$completeReadTask$226(tLObject, tL_error);
                }
            };
            tL_messages_readHistory2 = tL_messages_readDiscussion;
            connectionsManager = connectionsManager2;
        } else {
            if (DialogObject.isEncryptedDialog(readTask.dialogId)) {
                TLRPC.EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(readTask.dialogId)));
                byte[] bArr = encryptedChat.auth_key;
                if (bArr == null || bArr.length <= 1 || !(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
                    return;
                }
                TLRPC.TL_messages_readEncryptedHistory tL_messages_readEncryptedHistory = new TLRPC.TL_messages_readEncryptedHistory();
                TLRPC.TL_inputEncryptedChat tL_inputEncryptedChat = new TLRPC.TL_inputEncryptedChat();
                tL_messages_readEncryptedHistory.peer = tL_inputEncryptedChat;
                tL_inputEncryptedChat.chat_id = encryptedChat.id;
                tL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tL_messages_readEncryptedHistory.max_date = readTask.maxDate;
                getConnectionsManager().sendRequest(tL_messages_readEncryptedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda209
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.lambda$completeReadTask$228(tLObject, tL_error);
                    }
                });
                return;
            }
            TLRPC.InputPeer inputPeer = getInputPeer(readTask.dialogId);
            if (inputPeer instanceof TLRPC.TL_inputPeerChannel) {
                TLRPC.TL_channels_readHistory tL_channels_readHistory = new TLRPC.TL_channels_readHistory();
                tL_channels_readHistory.channel = getInputChannel(-readTask.dialogId);
                tL_channels_readHistory.max_id = readTask.maxId;
                tL_messages_readHistory = tL_channels_readHistory;
            } else {
                TLRPC.TL_messages_readHistory tL_messages_readHistory3 = new TLRPC.TL_messages_readHistory();
                tL_messages_readHistory3.peer = inputPeer;
                tL_messages_readHistory3.max_id = readTask.maxId;
                tL_messages_readHistory = tL_messages_readHistory3;
            }
            ConnectionsManager connectionsManager3 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda208
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$completeReadTask$227(tLObject, tL_error);
                }
            };
            tL_messages_readHistory2 = tL_messages_readHistory;
            connectionsManager = connectionsManager3;
        }
        connectionsManager.sendRequest(tL_messages_readHistory2, requestDelegate);
    }

    public static boolean equals(TLRPC.MessageMedia messageMedia, TLRPC.MessageMedia messageMedia2) {
        return messageMedia instanceof TLRPC.TL_messageMediaDocument ? (messageMedia2 instanceof TLRPC.TL_messageMediaDocument) && messageMedia.document.id == messageMedia2.document.id : (messageMedia2 instanceof TLRPC.TL_messageMediaPhoto) && (messageMedia2 instanceof TLRPC.TL_messageMediaPhoto) && messageMedia.photo.id == messageMedia2.photo.id;
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs) {
        TLRPC.InputPeer tL_inputPeerUser;
        long j;
        int size = tL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC.Dialog dialog = tL_messages_peerDialogs.dialogs.get(i2);
            if (dialog instanceof TLRPC.TL_dialogFolder) {
                TLRPC.TL_dialogFolder tL_dialogFolder = (TLRPC.TL_dialogFolder) dialog;
                long peerDialogId = DialogObject.getPeerDialogId(dialog.peer);
                if (tL_dialogFolder.top_message != 0 && peerDialogId != 0) {
                    int size2 = tL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC.Message message = tL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(message) && dialog.top_message == message.id) {
                            TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                            tL_dialog.peer = dialog.peer;
                            tL_dialog.top_message = dialog.top_message;
                            tL_dialog.folder_id = tL_dialogFolder.folder.id;
                            tL_dialog.flags |= 16;
                            tL_messages_peerDialogs.dialogs.add(tL_dialog);
                            TLRPC.Peer peer = dialog.peer;
                            if (peer instanceof TLRPC.TL_peerChannel) {
                                tL_inputPeerUser = new TLRPC.TL_inputPeerChannel();
                                tL_inputPeerUser.channel_id = dialog.peer.channel_id;
                                int size3 = tL_messages_peerDialogs.chats.size();
                                while (i < size3) {
                                    TLRPC.Chat chat = tL_messages_peerDialogs.chats.get(i);
                                    if (chat.id == tL_inputPeerUser.channel_id) {
                                        j = chat.access_hash;
                                        tL_inputPeerUser.access_hash = j;
                                        break;
                                    }
                                    i++;
                                }
                                loadUnknownDialog(tL_inputPeerUser, 0L);
                                return;
                            }
                            if (peer instanceof TLRPC.TL_peerChat) {
                                tL_inputPeerUser = new TLRPC.TL_inputPeerChat();
                                tL_inputPeerUser.chat_id = dialog.peer.chat_id;
                            } else {
                                tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
                                tL_inputPeerUser.user_id = dialog.peer.user_id;
                                int size4 = tL_messages_peerDialogs.users.size();
                                while (i < size4) {
                                    TLRPC.User user = tL_messages_peerDialogs.users.get(i);
                                    if (user.id == tL_inputPeerUser.user_id) {
                                        j = user.access_hash;
                                        tL_inputPeerUser.access_hash = j;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tL_inputPeerUser, 0L);
                            return;
                        }
                    }
                    return;
                }
                tL_messages_peerDialogs.dialogs.remove(tL_dialogFolder);
            }
        }
    }

    private void getChannelDifference(long j) {
        getChannelDifference(j, 0, 0L, null);
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static TLRPC.InputChannel getInputChannel(TLRPC.Chat chat) {
        if (!(chat instanceof TLRPC.TL_channel) && !(chat instanceof TLRPC.TL_channelForbidden)) {
            return new TLRPC.TL_inputChannelEmpty();
        }
        TLRPC.TL_inputChannel tL_inputChannel = new TLRPC.TL_inputChannel();
        tL_inputChannel.channel_id = chat.id;
        tL_inputChannel.access_hash = chat.access_hash;
        return tL_inputChannel;
    }

    public static TLRPC.InputChannel getInputChannel(TLRPC.InputPeer inputPeer) {
        TLRPC.TL_inputChannel tL_inputChannel = new TLRPC.TL_inputChannel();
        tL_inputChannel.channel_id = inputPeer.channel_id;
        tL_inputChannel.access_hash = inputPeer.access_hash;
        return tL_inputChannel;
    }

    public static TLRPC.InputPeer getInputPeer(TLObject tLObject) {
        if (tLObject instanceof TLRPC.User) {
            return getInputPeer((TLRPC.User) tLObject);
        }
        if (tLObject instanceof TLRPC.Chat) {
            return getInputPeer((TLRPC.Chat) tLObject);
        }
        return null;
    }

    public static TLRPC.InputPeer getInputPeer(TLRPC.Chat chat) {
        if (!ChatObject.isChannel(chat)) {
            TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
            tL_inputPeerChat.chat_id = chat.id;
            return tL_inputPeerChat;
        }
        TLRPC.TL_inputPeerChannel tL_inputPeerChannel = new TLRPC.TL_inputPeerChannel();
        tL_inputPeerChannel.channel_id = chat.id;
        tL_inputPeerChannel.access_hash = chat.access_hash;
        return tL_inputPeerChannel;
    }

    public static TLRPC.InputPeer getInputPeer(TLRPC.User user) {
        TLRPC.TL_inputPeerUser tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
        tL_inputPeerUser.user_id = user.id;
        tL_inputPeerUser.access_hash = user.access_hash;
        return tL_inputPeerUser;
    }

    public static TLRPC.InputWallPaper getInputWallpaper(Theme.OverrideWallpaperInfo overrideWallpaperInfo) {
        if (overrideWallpaperInfo.wallpaperId <= 0) {
            TLRPC.TL_inputWallPaperSlug tL_inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
            tL_inputWallPaperSlug.slug = overrideWallpaperInfo.slug;
            return tL_inputWallPaperSlug;
        }
        TLRPC.TL_inputWallPaper tL_inputWallPaper = new TLRPC.TL_inputWallPaper();
        tL_inputWallPaper.id = overrideWallpaperInfo.wallpaperId;
        tL_inputWallPaper.access_hash = overrideWallpaperInfo.accessHash;
        return tL_inputWallPaper;
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (lockObjects[i]) {
                try {
                    messagesController = Instance[i];
                    if (messagesController == null) {
                        MessagesController[] messagesControllerArr = Instance;
                        MessagesController messagesController2 = new MessagesController(i);
                        messagesControllerArr[i] = messagesController2;
                        messagesController = messagesController2;
                    }
                } finally {
                }
            }
        }
        return messagesController;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static TLRPC.Peer getPeerFromInputPeer(TLRPC.InputPeer inputPeer) {
        if (inputPeer.chat_id != 0) {
            TLRPC.TL_peerChat tL_peerChat = new TLRPC.TL_peerChat();
            tL_peerChat.chat_id = inputPeer.chat_id;
            return tL_peerChat;
        }
        if (inputPeer.channel_id != 0) {
            TLRPC.TL_peerChannel tL_peerChannel = new TLRPC.TL_peerChannel();
            tL_peerChannel.channel_id = inputPeer.channel_id;
            return tL_peerChannel;
        }
        TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
        tL_peerUser.user_id = inputPeer.user_id;
        return tL_peerUser;
    }

    private long getTagLongId(TLRPC.Reaction reaction) {
        long j;
        if (reaction == null) {
            return 0L;
        }
        long j2 = reaction.tag_long_id;
        if (j2 != 0) {
            return j2;
        }
        if (reaction instanceof TLRPC.TL_reactionEmoji) {
            j = MessagesController$$ExternalSyntheticBackport8.m(r0, 0, Utilities.MD5(((TLRPC.TL_reactionEmoji) reaction).emoticon).substring(0, 16).length(), 16);
        } else {
            if (!(reaction instanceof TLRPC.TL_reactionCustomEmoji)) {
                return 0L;
            }
            j = ((TLRPC.TL_reactionCustomEmoji) reaction).document_id;
        }
        reaction.tag_long_id = j;
        return j;
    }

    public static long getUpdateChannelId(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).message.peer_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).message.peer_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelOutbox) {
            return ((TLRPC.TL_updateReadChannelOutbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelMessageViews) {
            return ((TLRPC.TL_updateChannelMessageViews) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelMessageForwards) {
            return ((TLRPC.TL_updateChannelMessageForwards) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelReadMessagesContents) {
            return ((TLRPC.TL_updateChannelReadMessagesContents) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelAvailableMessages) {
            return ((TLRPC.TL_updateChannelAvailableMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannel) {
            return ((TLRPC.TL_updateChannel) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelInbox) {
            return ((TLRPC.TL_updateReadChannelInbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelPinnedTopic) {
            return ((TLRPC.TL_updateChannelPinnedTopic) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelPinnedTopics) {
            return ((TLRPC.TL_updateChannelPinnedTopics) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC.TL_updateReadChannelDiscussionInbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC.TL_updateReadChannelDiscussionOutbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelUserTyping) {
            return ((TLRPC.TL_updateChannelUserTyping) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelViewForumAsMessages) {
            return ((TLRPC.TL_updateChannelViewForumAsMessages) update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0L;
        }
        FileLog.e("trying to get unknown update channel_id for " + update);
        return 0L;
    }

    private static int getUpdatePts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).pts;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updatePinnedMessages) {
            return ((TLRPC.TL_updatePinnedMessages) update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updatePinnedMessages) {
            return ((TLRPC.TL_updatePinnedMessages) update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return ((TLRPC.TL_updateNewEncryptedMessage) update).qts;
        }
        return 0;
    }

    private int getUpdateSeq(TLRPC.Updates updates) {
        return updates instanceof TLRPC.TL_updatesCombined ? updates.seq_start : updates.seq;
    }

    private int getUpdateType(TLRPC.Update update) {
        if ((update instanceof TLRPC.TL_updateNewMessage) || (update instanceof TLRPC.TL_updateReadMessagesContents) || (update instanceof TLRPC.TL_updateReadHistoryInbox) || (update instanceof TLRPC.TL_updateReadHistoryOutbox) || (update instanceof TLRPC.TL_updateDeleteMessages) || (update instanceof TLRPC.TL_updateWebPage) || (update instanceof TLRPC.TL_updateEditMessage) || (update instanceof TLRPC.TL_updateFolderPeers) || (update instanceof TLRPC.TL_updatePinnedMessages)) {
            return 0;
        }
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((update instanceof TLRPC.TL_updateNewChannelMessage) || (update instanceof TLRPC.TL_updateDeleteChannelMessages) || (update instanceof TLRPC.TL_updateEditChannelMessage) || (update instanceof TLRPC.TL_updateChannelWebPage) || (update instanceof TLRPC.TL_updatePinnedChannelMessages)) ? 2 : 3;
    }

    private String getUserNameForTyping(TLRPC.User user) {
        String str;
        if (user == null) {
            return "";
        }
        String str2 = user.first_name;
        if (str2 == null || str2.length() <= 0) {
            String str3 = user.last_name;
            if (str3 == null || str3.length() <= 0) {
                return "";
            }
            str = user.last_name;
        } else {
            str = user.first_name;
        }
        return AndroidUtilities.removeDiacritics(str);
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0052  */
    /* JADX WARN: Removed duplicated region for block: B:13:0x005f  */
    /* JADX WARN: Removed duplicated region for block: B:7:0x003c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static TLRPC.TL_wallPaperSettings getWallpaperSetting(Theme.OverrideWallpaperInfo overrideWallpaperInfo) {
        int i;
        int i2;
        int i3;
        int i4;
        TLRPC.TL_wallPaperSettings tL_wallPaperSettings = new TLRPC.TL_wallPaperSettings();
        tL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
        tL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
        int i5 = overrideWallpaperInfo.color;
        if (i5 == 0) {
            float f = overrideWallpaperInfo.intensity;
            if (f > 0.0f) {
                tL_wallPaperSettings.intensity = (int) (f * 100.0f);
                i = tL_wallPaperSettings.flags | 8;
            }
            i2 = overrideWallpaperInfo.gradientColor1;
            if (i2 != 0) {
                tL_wallPaperSettings.second_background_color = i2 & 16777215;
                tL_wallPaperSettings.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
                tL_wallPaperSettings.flags |= 16;
            }
            i3 = overrideWallpaperInfo.gradientColor2;
            if (i3 != 0) {
                tL_wallPaperSettings.third_background_color = i3 & 16777215;
                tL_wallPaperSettings.flags |= 32;
            }
            i4 = overrideWallpaperInfo.gradientColor3;
            if (i4 != 0) {
                tL_wallPaperSettings.fourth_background_color = i4 & 16777215;
                tL_wallPaperSettings.flags |= 64;
            }
            return tL_wallPaperSettings;
        }
        tL_wallPaperSettings.background_color = i5 & 16777215;
        int i6 = tL_wallPaperSettings.flags;
        tL_wallPaperSettings.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
        i = i6 | 9;
        tL_wallPaperSettings.flags = i;
        i2 = overrideWallpaperInfo.gradientColor1;
        if (i2 != 0) {
        }
        i3 = overrideWallpaperInfo.gradientColor2;
        if (i3 != 0) {
        }
        i4 = overrideWallpaperInfo.gradientColor3;
        if (i4 != 0) {
        }
        return tL_wallPaperSettings;
    }

    public static boolean isStoryQualityFull() {
        return getInstance(UserConfig.selectedAccount).isStoryQualityFullOnAccount();
    }

    public static boolean isSupportUser(TLRPC.User user) {
        if (user != null) {
            if (!user.support) {
                long j = user.id;
                if (j == 777000 || j == 333000 || j == 4240000 || j == 4244000 || j == 4245000 || j == 4246000 || j == 410000 || j == 420000 || j == 431000 || j == 431415000 || j == 434000 || j == 4243000 || j == 439000 || j == 449000 || j == 450000 || j == 452000 || j == 454000 || j == 4254000 || j == 455000 || j == 460000 || j == 470000 || j == 479000 || j == 796000 || j == 482000 || j == 490000 || j == 496000 || j == 497000 || j == 498000 || j == 4298000) {
                }
            }
            return true;
        }
        return false;
    }

    private int isValidUpdate(TLRPC.Updates updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        }
        if (i == 1) {
            if (updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + updates.pts_count == updates.pts ? 0 : 1;
        }
        if (i != 2) {
            return 0;
        }
        if (updates.pts <= getMessagesStorage().getLastQtsValue()) {
            return 2;
        }
        return getMessagesStorage().getLastQtsValue() + updates.updates.size() == updates.pts ? 0 : 1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addDialogToFolder$187(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addToViewsQueue$219(MessageObject messageObject) {
        long dialogId = messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList arrayList = (ArrayList) this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (arrayList.contains(Integer.valueOf(id))) {
            return;
        }
        arrayList.add(Integer.valueOf(id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$279(long j) {
        this.joiningToChannels.remove(Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$280(Utilities.Callback callback, TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers, long j) {
        if (callback != null) {
            callback.run(tL_messages_invitedUsers);
        } else {
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tL_messages_invitedUsers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$addUserToChat$281(Utilities.Callback callback) {
        if (callback != null) {
            callback.run(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$282(ErrorDelegate errorDelegate, TLRPC.TL_error tL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2) {
        if (errorDelegate.run(tL_error)) {
            AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tLObject, Boolean.valueOf(z && !z2));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$283(ErrorDelegate errorDelegate, TLRPC.TL_error tL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC.InputUser inputUser) {
        if (errorDelegate == null) {
            AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tLObject, Boolean.valueOf(z && !z2));
        }
        if (z && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$addUserToChat$284(Utilities.Callback callback) {
        if (callback != null) {
            callback.run(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$285(TLRPC.Updates updates, Utilities.Callback callback, TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers, long j) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (callback != null) {
            callback.run(tL_messages_invitedUsers);
        } else {
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tL_messages_invitedUsers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$286(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$288(final boolean z, final TLRPC.InputUser inputUser, final long j, TLRPC.User user, final Utilities.Callback callback, boolean z2, Runnable runnable, final ErrorDelegate errorDelegate, final BaseFragment baseFragment, final TLObject tLObject, final boolean z3, TLObject tLObject2, final TLRPC.TL_error tL_error) {
        TLRPC.Updates updates;
        TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers;
        boolean z4;
        if (z && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda213
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$279(j);
                }
            });
        }
        if (tL_error != null) {
            if ("PRIVACY_PREMIUM_REQUIRED".equals(tL_error.text)) {
                final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers2 = new TLRPC.TL_messages_invitedUsers();
                tL_messages_invitedUsers2.updates = new TLRPC.TL_updates();
                TLRPC.TL_missingInvitee tL_missingInvitee = new TLRPC.TL_missingInvitee();
                tL_missingInvitee.user_id = user.id;
                tL_missingInvitee.premium_would_allow_invite = true;
                tL_missingInvitee.premium_required_for_pm = true;
                tL_messages_invitedUsers2.missing_invitees.add(tL_missingInvitee);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda214
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUserToChat$280(callback, tL_messages_invitedUsers2, j);
                    }
                });
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda215
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$addUserToChat$281(Utilities.Callback.this);
                }
            });
            if ("USER_ALREADY_PARTICIPANT".equals(tL_error.text) && z2) {
                if (runnable != null) {
                    AndroidUtilities.runOnUIThread(runnable);
                    return;
                }
                return;
            } else {
                if (errorDelegate != null) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda216
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$addUserToChat$282(errorDelegate, tL_error, baseFragment, tLObject, z, z3);
                        }
                    });
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda217
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUserToChat$283(errorDelegate, tL_error, baseFragment, tLObject, z, z3, inputUser);
                    }
                });
                return;
            }
        }
        if (tLObject2 instanceof TLRPC.TL_messages_invitedUsers) {
            tL_messages_invitedUsers = (TLRPC.TL_messages_invitedUsers) tLObject2;
            updates = tL_messages_invitedUsers.updates;
        } else {
            if (!(tLObject2 instanceof TLRPC.Updates)) {
                FileLog.e("unexpected " + tLObject2 + " in addUserToChat");
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda221
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$addUserToChat$284(Utilities.Callback.this);
                    }
                });
                return;
            }
            updates = (TLRPC.Updates) tLObject2;
            tL_messages_invitedUsers = null;
        }
        int i = 0;
        while (true) {
            if (i >= updates.updates.size()) {
                z4 = false;
                break;
            }
            TLRPC.Update update = updates.updates.get(i);
            if ((update instanceof TLRPC.TL_updateNewChannelMessage) && (((TLRPC.TL_updateNewChannelMessage) update).message.action instanceof TLRPC.TL_messageActionChatAddUser)) {
                z4 = true;
                break;
            }
            i++;
        }
        processUpdates(updates, false);
        if (tL_messages_invitedUsers != null && !tL_messages_invitedUsers.missing_invitees.isEmpty()) {
            final TLRPC.Updates updates2 = updates;
            final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers3 = tL_messages_invitedUsers;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda218
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$285(updates2, callback, tL_messages_invitedUsers3, j);
                }
            });
            return;
        }
        if (z) {
            if (!z4 && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
                generateJoinMessage(j, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda219
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$286(j);
                }
            }, 1000L);
        }
        if (z && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(-j, j, new ArrayList<>(), null, true);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
        if (callback != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda220
                @Override // java.lang.Runnable
                public final void run() {
                    Utilities.Callback.this.run(null);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChannel$252(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_channels_inviteToChannel tL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_channels_inviteToChannel, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChannel$253(TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers, long j) {
        putUsers(tL_messages_invitedUsers.updates.users, false);
        putChats(tL_messages_invitedUsers.updates.chats, false);
        AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tL_messages_invitedUsers);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChannel$254(final BaseFragment baseFragment, final TLRPC.TL_channels_inviteToChannel tL_channels_inviteToChannel, final long j, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda200
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUsersToChannel$252(tL_error, baseFragment, tL_channels_inviteToChannel);
                }
            });
        } else if (tLObject instanceof TLRPC.TL_messages_invitedUsers) {
            final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers = (TLRPC.TL_messages_invitedUsers) tLObject;
            processUpdates(tL_messages_invitedUsers.updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda201
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUsersToChannel$253(tL_messages_invitedUsers, j);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$addUsersToChat$275(Consumer consumer, TLRPC.User user) {
        if (consumer != null) {
            consumer.accept(user);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$addUsersToChat$276(Consumer consumer, TLRPC.User user, TLRPC.TL_error tL_error) {
        if (consumer != null) {
            consumer.accept(user);
        }
        return tL_error == null || !"USER_PRIVACY_RESTRICTED".equals(tL_error.text);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChat$277(TLRPC.Chat chat, TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers) {
        AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, chat, tL_messages_invitedUsers);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChat$278(final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers, int[] iArr, int i, final TLRPC.Chat chat, Runnable runnable, TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers2) {
        if (tL_messages_invitedUsers2 != null) {
            tL_messages_invitedUsers.missing_invitees.addAll(tL_messages_invitedUsers2.missing_invitees);
        }
        int i2 = iArr[0] + 1;
        iArr[0] = i2;
        if (i2 >= i) {
            if (!tL_messages_invitedUsers.missing_invitees.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda438
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUsersToChat$277(chat, tL_messages_invitedUsers);
                    }
                });
            }
            if (runnable != null) {
                runnable.run();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyAppConfig$32() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storiesEnabledUpdate, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$blockPeer$83(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatAvatar$296(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatAvatar$297(TLRPC.TL_inputChatPhoto tL_inputChatPhoto, TLRPC.FileLocation fileLocation, TLRPC.FileLocation fileLocation2, String str, long j, final Runnable runnable, TLObject tLObject, TLRPC.TL_error tL_error) {
        TLRPC.Photo photo;
        if (tL_error != null) {
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) tLObject;
        if (tL_inputChatPhoto == null) {
            int size = updates.updates.size();
            int i = 0;
            while (true) {
                if (i >= size) {
                    photo = null;
                    break;
                }
                TLRPC.Update update = updates.updates.get(i);
                if (update instanceof TLRPC.TL_updateNewChannelMessage) {
                    TLRPC.MessageAction messageAction = ((TLRPC.TL_updateNewChannelMessage) update).message.action;
                    if (messageAction instanceof TLRPC.TL_messageActionChatEditPhoto) {
                        photo = messageAction.photo;
                        if (photo instanceof TLRPC.TL_photo) {
                            break;
                        }
                    } else {
                        continue;
                    }
                    i++;
                } else {
                    if (update instanceof TLRPC.TL_updateNewMessage) {
                        TLRPC.MessageAction messageAction2 = ((TLRPC.TL_updateNewMessage) update).message.action;
                        if (messageAction2 instanceof TLRPC.TL_messageActionChatEditPhoto) {
                            photo = messageAction2.photo;
                            if (photo instanceof TLRPC.TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    i++;
                }
            }
            if (photo != null) {
                TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 150);
                TLRPC.VideoSize videoSize = photo.video_sizes.isEmpty() ? null : photo.video_sizes.get(0);
                if (closestPhotoSizeWithSize != null && fileLocation != null) {
                    getFileLoader().getPathToAttach(fileLocation, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize, true));
                    ImageLoader.getInstance().replaceImageInCache(fileLocation.volume_id + "_" + fileLocation.local_id + "@50_50", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@50_50", ImageLocation.getForPhoto(closestPhotoSizeWithSize, photo), true);
                }
                TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 800);
                if (closestPhotoSizeWithSize2 != null && fileLocation2 != null) {
                    getFileLoader().getPathToAttach(fileLocation2, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize2, true));
                }
                if (videoSize != null && str != null) {
                    new File(str).renameTo(getFileLoader().getPathToAttach(videoSize, "mp4", true));
                }
                getDialogPhotos(-j).addPhotoAtStart(photo);
            }
        }
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda185
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$changeChatAvatar$296(runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatTitle$295(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$405(AlertDialog alertDialog, Browser.Progress progress, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        if (alertDialog != null) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        if (progress != null) {
            progress.end();
        }
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        putUsers(messages_messages.users, false);
        putChats(messages_messages.chats, false);
        getMessagesStorage().putUsersAndChats(messages_messages.users, messages_messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$406(final AlertDialog alertDialog, final Browser.Progress progress, final BaseFragment baseFragment, final Bundle bundle, final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda279
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkCanOpenChat$405(alertDialog, progress, tLObject, baseFragment, bundle);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$407(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog(null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$408(int i, BaseFragment baseFragment) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog(null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$349(TLRPC.TL_channels_channelParticipant tL_channels_channelParticipant) {
        putUsers(tL_channels_channelParticipant.users, false);
        putChats(tL_channels_channelParticipant.chats, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$350(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$351(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda406
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkChatInviter$350(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$352(long j, ArrayList arrayList, TLRPC.TL_channels_channelParticipant tL_channels_channelParticipant) {
        this.gettingChatInviters.delete(j);
        if (arrayList != null) {
            updateInterfaceWithMessages(-j, arrayList, 0);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadChatInviter, Long.valueOf(j), Long.valueOf(tL_channels_channelParticipant.participant.inviter_id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$353(TLRPC.Chat chat, boolean z, final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        final ArrayList arrayList;
        final TLRPC.TL_channels_channelParticipant tL_channels_channelParticipant = (TLRPC.TL_channels_channelParticipant) tLObject;
        if (tL_channels_channelParticipant != null) {
            TLRPC.ChannelParticipant channelParticipant = tL_channels_channelParticipant.participant;
            if (channelParticipant instanceof TLRPC.TL_channelParticipantSelf) {
                TLRPC.TL_channelParticipantSelf tL_channelParticipantSelf = (TLRPC.TL_channelParticipantSelf) channelParticipant;
                if (chat.megagroup && getMessagesStorage().isMigratedChat(chat.id)) {
                    return;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda384
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkChatInviter$349(tL_channels_channelParticipant);
                    }
                });
                getMessagesStorage().putUsersAndChats(tL_channels_channelParticipant.users, tL_channels_channelParticipant.chats, true, true);
                if (!z || Math.abs(getConnectionsManager().getCurrentTime() - tL_channels_channelParticipant.participant.date) >= 86400 || getMessagesStorage().hasInviteMeMessage(j)) {
                    arrayList = null;
                } else {
                    TLRPC.TL_messageService tL_messageService = new TLRPC.TL_messageService();
                    tL_messageService.flags = 256;
                    int newMessageId = getUserConfig().getNewMessageId();
                    tL_messageService.id = newMessageId;
                    tL_messageService.local_id = newMessageId;
                    tL_messageService.date = tL_channels_channelParticipant.participant.date;
                    TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
                    tL_messageService.from_id = tL_peerUser;
                    tL_peerUser.user_id = tL_channels_channelParticipant.participant.inviter_id;
                    TLRPC.TL_peerChannel tL_peerChannel = new TLRPC.TL_peerChannel();
                    tL_messageService.peer_id = tL_peerChannel;
                    tL_peerChannel.channel_id = j;
                    tL_messageService.media_unread = true;
                    tL_messageService.unread = true;
                    tL_messageService.post = true;
                    tL_messageService.action = (tL_channelParticipantSelf.via_invite && tL_channelParticipantSelf.inviter_id == getUserConfig().getClientUserId()) ? new TLRPC.TL_messageActionChatJoinedByRequest() : new TLRPC.TL_messageActionChatAddUser();
                    tL_messageService.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                    tL_messageService.dialog_id = -j;
                    getUserConfig().saveConfig(false);
                    final ArrayList arrayList2 = new ArrayList();
                    ArrayList<TLRPC.Message> arrayList3 = new ArrayList<>();
                    ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                    for (int i = 0; i < tL_channels_channelParticipant.users.size(); i++) {
                        TLRPC.User user = tL_channels_channelParticipant.users.get(i);
                        concurrentHashMap.put(Long.valueOf(user.id), user);
                    }
                    arrayList3.add(tL_messageService);
                    arrayList2.add(new MessageObject(this.currentAccount, (TLRPC.Message) tL_messageService, (AbstractMap<Long, TLRPC.User>) concurrentHashMap, true, false));
                    if (tL_messageService.from_id.user_id != getUserConfig().getClientUserId()) {
                        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda385
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$checkChatInviter$351(arrayList2);
                            }
                        });
                    }
                    getMessagesStorage().putMessages(arrayList3, true, true, false, 0, 0, 0L);
                    arrayList = arrayList2;
                }
                getMessagesStorage().saveChatInviter(j, tL_channels_channelParticipant.participant.inviter_id);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda386
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkChatInviter$352(j, arrayList, tL_channels_channelParticipant);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatlistFolderUpdate$431(TLObject tLObject, int i, ChatlistUpdatesStat chatlistUpdatesStat) {
        if (!(tLObject instanceof TL_chatlists.TL_chatlists_chatlistUpdates)) {
            chatlistUpdatesStat.loading = false;
            return;
        }
        TL_chatlists.TL_chatlists_chatlistUpdates tL_chatlists_chatlistUpdates = (TL_chatlists.TL_chatlists_chatlistUpdates) tLObject;
        putChats(tL_chatlists_chatlistUpdates.chats, false);
        putUsers(tL_chatlists_chatlistUpdates.users, false);
        this.chatlistFoldersUpdates.put(i, new ChatlistUpdatesStat(tL_chatlists_chatlistUpdates));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatlistFolderUpdate, Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatlistFolderUpdate$432(final int i, final ChatlistUpdatesStat chatlistUpdatesStat, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkChatlistFolderUpdate$431(tLObject, i, chatlistUpdatesStat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkDeletingTask$79(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        getNewDeleteTask(longSparseArray, longSparseArray2);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkDeletingTask$80(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        long j;
        ArrayList<Integer> arrayList;
        boolean z = true;
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                ArrayList<Integer> arrayList2 = (ArrayList) longSparseArray.valueAt(i);
                deleteMessages(arrayList2, null, null, longSparseArray.keyAt(i), 0, true, 0, !arrayList2.isEmpty() && arrayList2.get(0).intValue() > 0);
            }
        }
        if (longSparseArray2 != null) {
            boolean z2 = SecretMediaViewer.hasInstance() && SecretMediaViewer.getInstance().isVisible();
            MessageObject currentMessageObject = z2 ? SecretMediaViewer.getInstance().getCurrentMessageObject() : null;
            int size2 = longSparseArray2.size();
            int i2 = 0;
            while (i2 < size2) {
                final long keyAt = longSparseArray2.keyAt(i2);
                ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray2.valueAt(i2);
                if (z2 && currentMessageObject != null && currentMessageObject.currentAccount == this.currentAccount && currentMessageObject.getDialogId() == keyAt && arrayList3.contains(Integer.valueOf(currentMessageObject.getId()))) {
                    final int id = currentMessageObject.getId();
                    arrayList3.remove(Integer.valueOf(id));
                    currentMessageObject.forceExpired = z;
                    final long createDeleteShowOnceTask = createDeleteShowOnceTask(keyAt, id);
                    j = keyAt;
                    arrayList = arrayList3;
                    SecretMediaViewer.getInstance().setOnClose(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda141
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$checkDeletingTask$78(createDeleteShowOnceTask, keyAt, id);
                        }
                    });
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMessageMedia, currentMessageObject.messageOwner);
                } else {
                    j = keyAt;
                    arrayList = arrayList3;
                }
                if (!arrayList.isEmpty()) {
                    getMessagesStorage().emptyMessagesMedia(j, arrayList);
                }
                i2++;
                z = true;
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda142
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$79(longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkIsInChat$427(IsInChatCheckedCallback isInChatCheckedCallback, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (isInChatCheckedCallback != null) {
            TLRPC.ChannelParticipant channelParticipant = tLObject instanceof TLRPC.TL_channels_channelParticipant ? ((TLRPC.TL_channels_channelParticipant) tLObject).participant : null;
            isInChatCheckedCallback.run((tL_error != null || channelParticipant == null || channelParticipant.left) ? false : true, channelParticipant != null ? channelParticipant.admin_rights : null, channelParticipant != null ? channelParticipant.rank : null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$213(TLRPC.Dialog dialog) {
        deleteDialog(dialog.id, 3);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$214(final TLRPC.Dialog dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + dialog.id + " has not message");
        }
        if (getMediaDataController().getDraft(dialog.id, 0L) == null) {
            TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(dialog.id);
            if (dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + dialog.id + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(dialog.id, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda412
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$213(dialog);
                    }
                });
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + dialog.id + " current dialog top message " + dialog2.top_message);
            }
            if (dialog2.top_message == 0) {
                deleteDialog(dialog.id, 3);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$215(TLRPC.Dialog dialog) {
        this.checkingLastMessagesDialogs.delete(dialog.id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$216(final TLRPC.Dialog dialog, long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
            removeDeletedMessagesFromArray(dialog.id, messages_messages.messages);
            if (messages_messages.messages.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda17
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$214(dialog);
                    }
                });
            } else {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + dialog.id + " has message");
                }
                TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
                TLRPC.Message message = messages_messages.messages.get(0);
                TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                tL_dialog.flags = dialog.flags;
                tL_dialog.top_message = message.id;
                tL_dialog.last_message_date = message.date;
                tL_dialog.notify_settings = dialog.notify_settings;
                tL_dialog.pts = dialog.pts;
                tL_dialog.unread_count = dialog.unread_count;
                tL_dialog.unread_mark = dialog.unread_mark;
                tL_dialog.unread_mentions_count = dialog.unread_mentions_count;
                tL_dialog.unread_reactions_count = dialog.unread_reactions_count;
                tL_dialog.read_inbox_max_id = dialog.read_inbox_max_id;
                tL_dialog.read_outbox_max_id = dialog.read_outbox_max_id;
                tL_dialog.pinned = dialog.pinned;
                tL_dialog.pinnedNum = dialog.pinnedNum;
                tL_dialog.folder_id = dialog.folder_id;
                long j2 = dialog.id;
                tL_dialog.id = j2;
                message.dialog_id = j2;
                tL_messages_dialogs.users.addAll(messages_messages.users);
                tL_messages_dialogs.chats.addAll(messages_messages.chats);
                tL_messages_dialogs.dialogs.add(tL_dialog);
                tL_messages_dialogs.messages.addAll(messages_messages.messages);
                tL_messages_dialogs.count = 1;
                processDialogsUpdate(tL_messages_dialogs, null, false);
                getMessagesStorage().putMessages(messages_messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, 0, 0L);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda18
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkLastDialogMessage$215(dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPeerColors$444(TLObject tLObject) {
        this.loadingPeerColors = false;
        this.peerColors = PeerColors.fromTL(0, (TLRPC.TL_help_peerColors) tLObject);
        this.mainPreferences.edit().putString("peerColors", this.peerColors.toString()).apply();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPeerColors$445(final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.TL_help_peerColors) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda435
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPeerColors$444(tLObject);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPeerColors$446(TLObject tLObject) {
        this.loadingProfilePeerColors = false;
        this.profilePeerColors = PeerColors.fromTL(1, (TLRPC.TL_help_peerColors) tLObject);
        this.mainPreferences.edit().putString("profilePeerColors", this.profilePeerColors.toString()).apply();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPeerColors$447(final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.TL_help_peerColors) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda193
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPeerColors$446(tLObject);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$156(TLRPC.TL_help_promoData tL_help_promoData, TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs, long j) {
        putUsers(tL_help_promoData.users, false);
        putChats(tL_help_promoData.chats, false);
        putUsers(tL_messages_peerDialogs.users, false);
        putChats(tL_messages_peerDialogs.chats, false);
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null) {
            long j2 = dialog.id;
            if (j2 < 0) {
                TLRPC.Chat chat = getChat(Long.valueOf(-j2));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    dialog = this.promoDialog;
                }
            }
            removeDialog(dialog);
        }
        TLRPC.Dialog dialog2 = tL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = dialog2;
        dialog2.id = j;
        dialog2.folder_id = 0;
        if (DialogObject.isChannel(dialog2)) {
            LongSparseIntArray longSparseIntArray = this.channelsPts;
            TLRPC.Dialog dialog3 = this.promoDialog;
            longSparseIntArray.put(-dialog3.id, dialog3.pts);
        }
        Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num == null) {
            num = r3;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max((num2 != null ? num2 : 0).intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tL_messages_peerDialogs.messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i = 0; i < tL_messages_peerDialogs.users.size(); i++) {
                TLRPC.User user = tL_messages_peerDialogs.users.get(i);
                longSparseArray.put(user.id, user);
            }
            for (int i2 = 0; i2 < tL_messages_peerDialogs.chats.size(); i2++) {
                TLRPC.Chat chat2 = tL_messages_peerDialogs.chats.get(i2);
                longSparseArray2.put(chat2.id, chat2);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tL_messages_peerDialogs.messages.get(0), longSparseArray, longSparseArray2, false, true);
            ArrayList arrayList = (ArrayList) this.dialogMessage.get(j);
            if (arrayList == null) {
                arrayList = new ArrayList(1);
            }
            if (arrayList.size() > 0 && arrayList.get(0) != null && ((MessageObject) arrayList.get(0)).hasValidGroupId() && ((MessageObject) arrayList.get(0)).getGroupIdForUse() != messageObject.getGroupIdForUse()) {
                arrayList.clear();
            }
            arrayList.add(messageObject);
            this.dialogMessage.put(j, arrayList);
            TLRPC.Dialog dialog4 = this.promoDialog;
            if (dialog4.last_message_date == 0) {
                dialog4.last_message_date = messageObject.messageOwner.date;
            }
            getTranslateController().checkDialogMessage(j);
        }
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$157() {
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null) {
            long j = dialog.id;
            if (j < 0) {
                TLRPC.Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    dialog = this.promoDialog;
                }
                this.promoDialog = null;
                sortDialogs(null);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            removeDialog(dialog);
            this.promoDialog = null;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$158(int i, final TLRPC.TL_help_promoData tL_help_promoData, final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (i != this.lastCheckPromoId) {
            return;
        }
        this.checkingPromoInfoRequestId = 0;
        final TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
        if (tL_messages_peerDialogs == null || tL_messages_peerDialogs.dialogs.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda177
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$157();
                }
            });
        } else {
            getMessagesStorage().putUsersAndChats(tL_help_promoData.users, tL_help_promoData.chats, true, true);
            TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
            tL_messages_dialogs.chats = tL_messages_peerDialogs.chats;
            tL_messages_dialogs.users = tL_messages_peerDialogs.users;
            tL_messages_dialogs.dialogs = tL_messages_peerDialogs.dialogs;
            tL_messages_dialogs.messages = tL_messages_peerDialogs.messages;
            getMessagesStorage().putDialogs(tL_messages_dialogs, 2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda176
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$156(tL_help_promoData, tL_messages_peerDialogs, j);
                }
            });
        }
        this.checkingPromoInfo = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x00b4, code lost:
    
        if (r2 != null) goto L30;
     */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x00cc, code lost:
    
        r3 = r1.peer;
        r4 = r2.access_hash;
     */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x00ca, code lost:
    
        if (r2 != null) goto L30;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkPromoInfoInternal$159(final long j, final TLRPC.TL_help_promoData tL_help_promoData, final int i) {
        TLRPC.Chat chat;
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null && j != dialog.id) {
            removePromoDialog();
        }
        TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(j);
        this.promoDialog = dialog2;
        if (dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            return;
        }
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int i2 = 0; i2 < tL_help_promoData.users.size(); i2++) {
            TLRPC.User user = tL_help_promoData.users.get(i2);
            longSparseArray.put(user.id, user);
        }
        for (int i3 = 0; i3 < tL_help_promoData.chats.size(); i3++) {
            TLRPC.Chat chat2 = tL_help_promoData.chats.get(i3);
            longSparseArray2.put(chat2.id, chat2);
        }
        TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
        TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
        TLRPC.Peer peer = tL_help_promoData.peer;
        if (peer.user_id != 0) {
            TLRPC.TL_inputPeerUser tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
            tL_inputDialogPeer.peer = tL_inputPeerUser;
            long j2 = tL_help_promoData.peer.user_id;
            tL_inputPeerUser.user_id = j2;
            TLRPC.User user2 = (TLRPC.User) longSparseArray.get(j2);
            if (user2 != null) {
                TLRPC.InputPeer inputPeer = tL_inputDialogPeer.peer;
                long j3 = user2.access_hash;
                inputPeer.access_hash = j3;
            }
            tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda175
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkPromoInfoInternal$158(i, tL_help_promoData, j, tLObject, tL_error);
                }
            });
        }
        if (peer.chat_id != 0) {
            TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
            tL_inputDialogPeer.peer = tL_inputPeerChat;
            long j4 = tL_help_promoData.peer.chat_id;
            tL_inputPeerChat.chat_id = j4;
            chat = (TLRPC.Chat) longSparseArray2.get(j4);
        } else {
            TLRPC.TL_inputPeerChannel tL_inputPeerChannel = new TLRPC.TL_inputPeerChannel();
            tL_inputDialogPeer.peer = tL_inputPeerChannel;
            long j5 = tL_help_promoData.peer.channel_id;
            tL_inputPeerChannel.channel_id = j5;
            chat = (TLRPC.Chat) longSparseArray2.get(j5);
        }
        inputPeer.access_hash = j3;
        tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda175
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$checkPromoInfoInternal$158(i, tL_help_promoData, j, tLObject, tL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x005b, code lost:
    
        if (r13.restricted == false) goto L28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x0089, code lost:
    
        if (r3.restricted == false) goto L28;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0127  */
    /* JADX WARN: Removed duplicated region for block: B:12:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00f9  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x010a  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00fd  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x009c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkPromoInfoInternal$160(final int i, String str, String str2, TLObject tLObject, TLRPC.TL_error tL_error) {
        int currentTime;
        long j;
        final long j2;
        boolean z;
        int i2;
        String str3;
        String str4;
        boolean z2;
        if (i != this.lastCheckPromoId) {
            return;
        }
        if (tLObject instanceof TLRPC.TL_help_promoDataEmpty) {
            currentTime = ((TLRPC.TL_help_promoDataEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC.TL_help_promoData) {
            final TLRPC.TL_help_promoData tL_help_promoData = (TLRPC.TL_help_promoData) tLObject;
            TLRPC.Peer peer = tL_help_promoData.peer;
            long j3 = peer.user_id;
            if (j3 == 0) {
                long j4 = peer.chat_id;
                if (j4 != 0) {
                    j = -j4;
                    int i3 = 0;
                    while (true) {
                        if (i3 >= tL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC.Chat chat = tL_help_promoData.chats.get(i3);
                        if (chat.id != tL_help_promoData.peer.chat_id) {
                            i3++;
                        } else if (!chat.kicked) {
                        }
                    }
                    j2 = j;
                    z = true;
                    this.promoDialogId = j2;
                    if (!tL_help_promoData.proxy) {
                        i2 = PROMO_TYPE_PROXY;
                    } else if (TextUtils.isEmpty(tL_help_promoData.psa_type)) {
                        i2 = PROMO_TYPE_OTHER;
                    } else {
                        this.promoDialogType = PROMO_TYPE_PSA;
                        this.promoPsaType = tL_help_promoData.psa_type;
                        this.proxyDialogAddress = str + str2;
                        this.promoPsaMessage = tL_help_promoData.psa_message;
                        this.nextPromoInfoCheckTime = tL_help_promoData.expires;
                        SharedPreferences.Editor edit = getGlobalMainSettings().edit();
                        edit.putLong("proxy_dialog", this.promoDialogId);
                        edit.putString("proxyDialogAddress", this.proxyDialogAddress);
                        edit.putInt("promo_dialog_type", this.promoDialogType);
                        str3 = this.promoPsaMessage;
                        if (str3 != null) {
                            edit.putString("promo_psa_message", str3);
                        } else {
                            edit.remove("promo_psa_message");
                        }
                        str4 = this.promoPsaType;
                        if (str4 != null) {
                            edit.putString("promo_psa_type", str4);
                        } else {
                            edit.remove("promo_psa_type");
                        }
                        edit.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
                        edit.commit();
                        if (!z) {
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda328
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$checkPromoInfoInternal$159(j2, tL_help_promoData, i);
                                }
                            });
                        }
                        z2 = z;
                    }
                    this.promoDialogType = i2;
                    this.proxyDialogAddress = str + str2;
                    this.promoPsaMessage = tL_help_promoData.psa_message;
                    this.nextPromoInfoCheckTime = tL_help_promoData.expires;
                    SharedPreferences.Editor edit2 = getGlobalMainSettings().edit();
                    edit2.putLong("proxy_dialog", this.promoDialogId);
                    edit2.putString("proxyDialogAddress", this.proxyDialogAddress);
                    edit2.putInt("promo_dialog_type", this.promoDialogType);
                    str3 = this.promoPsaMessage;
                    if (str3 != null) {
                    }
                    str4 = this.promoPsaType;
                    if (str4 != null) {
                    }
                    edit2.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
                    edit2.commit();
                    if (!z) {
                    }
                    z2 = z;
                } else {
                    j = -peer.channel_id;
                    int i4 = 0;
                    while (true) {
                        if (i4 >= tL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC.Chat chat2 = tL_help_promoData.chats.get(i4);
                        if (chat2.id != tL_help_promoData.peer.channel_id) {
                            i4++;
                        } else if (!chat2.kicked) {
                        }
                    }
                    j2 = j;
                }
                if (z2) {
                    this.promoDialogId = 0L;
                    getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                    this.checkingPromoInfoRequestId = 0;
                    this.checkingPromoInfo = false;
                    AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda66(this));
                    return;
                }
                return;
            }
            j2 = j3;
            z = false;
            this.promoDialogId = j2;
            if (!tL_help_promoData.proxy) {
            }
            this.promoDialogType = i2;
            this.proxyDialogAddress = str + str2;
            this.promoPsaMessage = tL_help_promoData.psa_message;
            this.nextPromoInfoCheckTime = tL_help_promoData.expires;
            SharedPreferences.Editor edit22 = getGlobalMainSettings().edit();
            edit22.putLong("proxy_dialog", this.promoDialogId);
            edit22.putString("proxyDialogAddress", this.proxyDialogAddress);
            edit22.putInt("promo_dialog_type", this.promoDialogType);
            str3 = this.promoPsaMessage;
            if (str3 != null) {
            }
            str4 = this.promoPsaType;
            if (str4 != null) {
            }
            edit22.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
            edit22.commit();
            if (!z) {
            }
            z2 = z;
            if (z2) {
            }
        } else {
            currentTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.nextPromoInfoCheckTime = currentTime;
        z2 = true;
        if (z2) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSensitive$400(boolean[] zArr, View view) {
        boolean z = !zArr[0];
        zArr[0] = z;
        ((CheckBoxCell) view).setChecked(z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSensitive$401(BaseFragment baseFragment) {
        baseFragment.presentFragment(new ThemeActivity(0).highlightSensitiveRow());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSensitive$402(boolean[] zArr, long j, boolean[] zArr2, TL_account.contentSettings contentsettings, final BaseFragment baseFragment, Runnable runnable, DialogInterface dialogInterface, int i) {
        zArr[0] = true;
        this.sensitiveAgreed.add(Long.valueOf(j));
        if (zArr2[0] && contentsettings != null && contentsettings.sensitive_can_change) {
            getMessagesController().setContentSettings(true);
            BulletinFactory.of(baseFragment).createSimpleBulletinDetail(R.raw.chats_infotip, AndroidUtilities.replaceArrows(AndroidUtilities.premiumText(LocaleController.getString(R.string.SensitiveContentSettingsToast), new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda470
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$checkSensitive$401(BaseFragment.this);
                }
            }), true)).show(true);
        }
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSensitive$403(boolean[] zArr, Runnable runnable, DialogInterface dialogInterface) {
        if (zArr[0] || runnable == null) {
            return;
        }
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSensitive$404(AlertDialog alertDialog, final BaseFragment baseFragment, final long j, final Runnable runnable, final Runnable runnable2, final TL_account.contentSettings contentsettings) {
        alertDialog.dismissUnless(200L);
        final boolean[] zArr = new boolean[1];
        FrameLayout frameLayout = new FrameLayout(baseFragment.getContext());
        if (contentsettings != null && contentsettings.sensitive_can_change) {
            CheckBoxCell checkBoxCell = new CheckBoxCell(baseFragment.getContext(), 1, baseFragment.getResourceProvider());
            checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
            checkBoxCell.setText(LocaleController.getString(R.string.MessageShowSensitiveContentAlways), "", zArr[0], false);
            checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
            frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
            checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda442
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    MessagesController.lambda$checkSensitive$400(zArr, view);
                }
            });
        }
        final boolean[] zArr2 = new boolean[1];
        new AlertDialog.Builder(baseFragment.getContext(), baseFragment.getResourceProvider()).setTitle(LocaleController.getString(R.string.MessageShowSensitiveContentChannelTitle)).setMessage(LocaleController.getString(R.string.MessageShowSensitiveContentChannelText)).setView(frameLayout).setCustomViewOffset(9).setNegativeButton(LocaleController.getString(R.string.Cancel), null).setPositiveButton(LocaleController.getString(R.string.MessageShowSensitiveContentButton), new DialogInterface.OnClickListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda443
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                MessagesController.this.lambda$checkSensitive$402(zArr2, j, zArr, contentsettings, baseFragment, runnable, dialogInterface, i);
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda444
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                MessagesController.lambda$checkSensitive$403(zArr2, runnable2, dialogInterface);
            }
        }).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkTosUpdate$153(TLRPC.TL_help_termsOfServiceUpdate tL_help_termsOfServiceUpdate) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needShowAlert, 4, tL_help_termsOfServiceUpdate.terms_of_service);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkTosUpdate$154(TLObject tLObject, TLRPC.TL_error tL_error) {
        int currentTime;
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC.TL_help_termsOfServiceUpdateEmpty) {
            currentTime = ((TLRPC.TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else {
            if (tLObject instanceof TLRPC.TL_help_termsOfServiceUpdate) {
                final TLRPC.TL_help_termsOfServiceUpdate tL_help_termsOfServiceUpdate = (TLRPC.TL_help_termsOfServiceUpdate) tLObject;
                this.nextTosCheckTime = tL_help_termsOfServiceUpdate.expires;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda455
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkTosUpdate$153(tL_help_termsOfServiceUpdate);
                    }
                });
                this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
            }
            currentTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.nextTosCheckTime = currentTime;
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkUnreadReactions$386(long j, int i, long j2, ArrayList arrayList) {
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(j, 0L, i, false);
            return;
        }
        dialog.unread_reactions_count = i;
        getMessagesStorage().updateUnreadReactionsCount(j, j2, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkUnreadReactions$387(final long j, final long j2, final ArrayList arrayList, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            final int i = tL_messages_peerDialogs.dialogs.size() == 0 ? 0 : tL_messages_peerDialogs.dialogs.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda334
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$386(j, i, j2, arrayList);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkUnreadReactions$388(long j, long j2, int i, ArrayList arrayList) {
        getMessagesController().getTopicsController().updateReactionsUnread(j, j2, i, false);
        getMessagesStorage().updateUnreadReactionsCount(j, j2, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkUnreadReactions$389(final long j, final long j2, final ArrayList arrayList, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.TL_messages_forumTopics tL_messages_forumTopics = (TLRPC.TL_messages_forumTopics) tLObject;
            final int i = tL_messages_forumTopics.topics.size() == 0 ? 0 : tL_messages_forumTopics.topics.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda84
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$388(j, j2, i, arrayList);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkUnreadReactions$390(long j, long j2, int i) {
        if (j != 0) {
            int updateReactionsUnread = getMessagesController().getTopicsController().updateReactionsUnread(j2, j, i, true);
            if (updateReactionsUnread >= 0) {
                getMessagesStorage().updateUnreadReactionsCount(j2, j, updateReactionsUnread, true);
                return;
            }
            return;
        }
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j2);
        if (dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(j2, 0L, i, true);
            return;
        }
        int i2 = dialog.unread_reactions_count + i;
        dialog.unread_reactions_count = i2;
        if (i2 < 0) {
            dialog.unread_reactions_count = 0;
        }
        getMessagesStorage().updateUnreadReactionsCount(j2, 0L, dialog.unread_reactions_count);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$checkUnreadReactions$391(SparseBooleanArray sparseBooleanArray, final long j, final long j2) {
        RequestDelegate requestDelegate;
        ConnectionsManager connectionsManager;
        TLRPC.TL_channels_getForumTopicsByID tL_channels_getForumTopicsByID;
        int i;
        boolean z;
        boolean z2;
        SQLitePreparedStatement executeFast;
        final ArrayList arrayList = new ArrayList();
        StringBuilder sb = new StringBuilder();
        int i2 = 0;
        for (int i3 = 0; i3 < sparseBooleanArray.size(); i3++) {
            int keyAt = sparseBooleanArray.keyAt(i3);
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(keyAt);
        }
        SparseBooleanArray sparseBooleanArray2 = new SparseBooleanArray();
        try {
            SQLiteCursor queryFinalized = j != 0 ? getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions WHERE message_id IN (%s) AND dialog_id = %d", sb, Long.valueOf(j2)), new Object[0]) : getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions_topics WHERE message_id IN (%s) AND dialog_id = %d AND topic_id = %d", sb, Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
            while (queryFinalized.next()) {
                sparseBooleanArray2.put(queryFinalized.intValue(0), queryFinalized.intValue(1) == 1);
            }
            queryFinalized.dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        boolean z3 = false;
        int i4 = 0;
        boolean z4 = false;
        while (i4 < sparseBooleanArray.size()) {
            int keyAt2 = sparseBooleanArray.keyAt(i4);
            boolean valueAt = sparseBooleanArray.valueAt(i4);
            if (sparseBooleanArray2.indexOfKey(keyAt2) < 0) {
                i = i2;
                z = z4;
                z2 = true;
            } else if (sparseBooleanArray2.get(keyAt2) != valueAt) {
                z2 = z3;
                i = i2 + (valueAt ? 1 : -1);
                z = true;
            } else {
                i = i2;
                z = z4;
                z2 = z3;
            }
            if (valueAt) {
                arrayList.add(Integer.valueOf(keyAt2));
            }
            if (j == 0) {
                try {
                    executeFast = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions VALUES(?, ?, ?)");
                    executeFast.requery();
                    executeFast.bindInteger(1, keyAt2);
                    executeFast.bindInteger(2, valueAt ? 1 : 0);
                    executeFast.bindLong(3, j2);
                    executeFast.step();
                } catch (SQLiteException e2) {
                    e = e2;
                    e.printStackTrace();
                    i4++;
                    z3 = z2;
                    z4 = z;
                    i2 = i;
                }
            } else {
                executeFast = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions_topics VALUES(?, ?, ?, ?)");
                executeFast.requery();
                executeFast.bindInteger(1, keyAt2);
                try {
                    executeFast.bindInteger(2, valueAt ? 1 : 0);
                } catch (SQLiteException e3) {
                    e = e3;
                    e.printStackTrace();
                    i4++;
                    z3 = z2;
                    z4 = z;
                    i2 = i;
                }
                try {
                    executeFast.bindLong(3, j2);
                    executeFast.bindLong(4, j);
                    executeFast.step();
                } catch (SQLiteException e4) {
                    e = e4;
                    e.printStackTrace();
                    i4++;
                    z3 = z2;
                    z4 = z;
                    i2 = i;
                }
            }
            executeFast.dispose();
            i4++;
            z3 = z2;
            z4 = z;
            i2 = i;
        }
        if (!z3) {
            if (z4) {
                final int i5 = i2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda447
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkUnreadReactions$390(j, j2, i5);
                    }
                });
                return;
            }
            return;
        }
        if (j == 0) {
            TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
            TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
            tL_inputDialogPeer.peer = getInputPeer(j2);
            tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
            ConnectionsManager connectionsManager2 = ConnectionsManager.getInstance(this.currentAccount);
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda445
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$387(j2, j, arrayList, tLObject, tL_error);
                }
            };
            tL_channels_getForumTopicsByID = tL_messages_getPeerDialogs;
            connectionsManager = connectionsManager2;
        } else {
            TLRPC.TL_channels_getForumTopicsByID tL_channels_getForumTopicsByID2 = new TLRPC.TL_channels_getForumTopicsByID();
            tL_channels_getForumTopicsByID2.topics.add(Integer.valueOf((int) j));
            tL_channels_getForumTopicsByID2.channel = getMessagesController().getInputChannel(-j2);
            ConnectionsManager connectionsManager3 = ConnectionsManager.getInstance(this.currentAccount);
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda446
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$389(j2, j, arrayList, tLObject, tL_error);
                }
            };
            tL_channels_getForumTopicsByID = tL_channels_getForumTopicsByID2;
            connectionsManager = connectionsManager3;
        }
        connectionsManager.sendRequest(tL_channels_getForumTopicsByID, requestDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$47() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0L;
        this.updatesStartWaitTimePts = 0L;
        this.updatesStartWaitTimeQts = 0L;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$48() {
        FileLog.d("cleanup: isUpdating = false");
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$49() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$completeDialogsReset$200(TLRPC.messages_Dialogs messages_dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        MediaDataController mediaDataController;
        long j;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(messages_dialogs.dialogs);
        MediaDataController mediaDataController2 = getMediaDataController();
        mediaDataController2.clearAllDrafts(false);
        mediaDataController2.loadDraftsIfNeed();
        putUsers(messages_dialogs.users, false);
        putChats(messages_dialogs.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC.Dialog dialog = this.allDialogs.get(i);
            if (!DialogObject.isEncryptedDialog(dialog.id)) {
                this.dialogs_dict.remove(dialog.id);
                ArrayList arrayList = (ArrayList) this.dialogMessage.get(dialog.id);
                this.dialogMessage.remove(dialog.id);
                if (arrayList != null) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        MessageObject messageObject = (MessageObject) arrayList.get(i2);
                        if (messageObject != null) {
                            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject.getId());
                            }
                            long j2 = messageObject.messageOwner.random_id;
                            if (j2 != 0) {
                                this.dialogMessagesByRandomIds.remove(j2);
                            }
                        }
                    }
                }
            }
        }
        int i3 = 0;
        while (i3 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i3);
            TLRPC.Dialog dialog2 = (TLRPC.Dialog) longSparseArray.valueAt(i3);
            TLRPC.DraftMessage draftMessage = dialog2.draft;
            if (draftMessage instanceof TLRPC.TL_draftMessage) {
                mediaDataController = mediaDataController2;
                j = keyAt;
                mediaDataController2.saveDraft(dialog2.id, 0L, draftMessage, null, false);
            } else {
                mediaDataController = mediaDataController2;
                j = keyAt;
            }
            this.dialogs_dict.put(j, dialog2);
            ArrayList arrayList2 = (ArrayList) longSparseArray2.get(dialog2.id);
            this.dialogMessage.put(j, arrayList2);
            if (arrayList2 != null) {
                for (int i4 = 0; i4 < arrayList2.size(); i4++) {
                    MessageObject messageObject2 = (MessageObject) arrayList2.get(i4);
                    if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                        long j3 = messageObject2.messageOwner.random_id;
                        if (j3 != 0) {
                            this.dialogMessagesByRandomIds.put(j3, messageObject2);
                        }
                    }
                }
            }
            getTranslateController().checkDialogMessage(j);
            i3++;
            mediaDataController2 = mediaDataController;
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i5 = 0; i5 < size; i5++) {
            TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.valueAt(i5);
            if (this.deletingDialogs.indexOfKey(dialog3.id) < 0) {
                this.allDialogs.add(dialog3);
            }
        }
        sortDialogs(null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (totalDialogsCount < 400) {
            long j4 = dialogLoadOffsets[0];
            if (j4 != -1 && j4 != 2147483647L) {
                loadDialogs(0, 0, 100, false);
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$completeDialogsReset$201(int i, int i2, int i3, final TLRPC.messages_Dialogs messages_dialogs, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda269
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$200(messages_dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$completeReadTask$226(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$completeReadTask$227(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null && (tLObject instanceof TLRPC.TL_messages_affectedMessages)) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tL_messages_affectedMessages.pts, -1, tL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$completeReadTask$228(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToGigaGroup$247(Context context, AlertDialog alertDialog) {
        if (((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToGigaGroup$248(MessagesStorage.BooleanCallback booleanCallback) {
        if (booleanCallback != null) {
            booleanCallback.run(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$249(MessagesStorage.BooleanCallback booleanCallback, Context context, AlertDialog alertDialog, TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_channels_convertToGigagroup tL_channels_convertToGigagroup) {
        if (booleanCallback != null) {
            booleanCallback.run(false);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_channels_convertToGigagroup, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$250(final Context context, final AlertDialog alertDialog, final MessagesStorage.BooleanCallback booleanCallback, final BaseFragment baseFragment, final TLRPC.TL_channels_convertToGigagroup tL_channels_convertToGigagroup, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda392
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$convertToGigaGroup$249(booleanCallback, context, alertDialog, tL_error, baseFragment, tL_channels_convertToGigagroup);
                }
            });
            return;
        }
        if (context != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda390
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToGigaGroup$247(context, alertDialog);
                }
            });
        }
        processUpdates((TLRPC.Updates) tLObject, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda391
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$convertToGigaGroup$248(MessagesStorage.BooleanCallback.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$251(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToMegaGroup$242(Context context, AlertDialog alertDialog) {
        if (((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToMegaGroup$243(MessagesStorage.LongCallback longCallback, TLRPC.Updates updates, long j) {
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        TLRPC.InputChannel inputChannel;
        if (longCallback != null) {
            int i = 0;
            int i2 = 0;
            while (true) {
                chat = null;
                if (i2 >= updates.chats.size()) {
                    chat2 = null;
                    break;
                }
                chat2 = updates.chats.get(i2);
                if (j == chat2.id) {
                    break;
                } else {
                    i2++;
                }
            }
            if (chat2 == null || (inputChannel = chat2.migrated_to) == null) {
                return;
            }
            long j2 = inputChannel.channel_id;
            while (true) {
                if (i >= updates.chats.size()) {
                    break;
                }
                TLRPC.Chat chat3 = updates.chats.get(i);
                if (j2 == chat3.id) {
                    chat = chat3;
                    break;
                }
                i++;
            }
            if (chat != null) {
                longCallback.run(j2);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$244(MessagesStorage.LongCallback longCallback, Context context, AlertDialog alertDialog, TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_messages_migrateChat tL_messages_migrateChat) {
        if (longCallback != null) {
            longCallback.run(0L);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_messages_migrateChat, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$245(final Context context, final AlertDialog alertDialog, final MessagesStorage.LongCallback longCallback, final long j, Runnable runnable, final BaseFragment baseFragment, final TLRPC.TL_messages_migrateChat tL_messages_migrateChat, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            if (runnable != null) {
                runnable.run();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda77
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$convertToMegaGroup$244(longCallback, context, alertDialog, tL_error, baseFragment, tL_messages_migrateChat);
                }
            });
        } else {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda75
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$convertToMegaGroup$242(context, alertDialog);
                    }
                });
            }
            final TLRPC.Updates updates = (TLRPC.Updates) tLObject;
            processUpdates(updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda76
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToMegaGroup$243(MessagesStorage.LongCallback.this, updates, j);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$246(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$236(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_messages_createChat tL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_messages_createChat, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$237(TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers) {
        putUsers(tL_messages_invitedUsers.updates.users, false);
        putChats(tL_messages_invitedUsers.updates.chats, false);
        ArrayList<TLRPC.Chat> arrayList = tL_messages_invitedUsers.updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
        } else {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidCreated, Long.valueOf(tL_messages_invitedUsers.updates.chats.get(0).id));
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, tL_messages_invitedUsers.updates.chats.get(0), tL_messages_invitedUsers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$238(final BaseFragment baseFragment, final TLRPC.TL_messages_createChat tL_messages_createChat, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda426
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$236(tL_error, baseFragment, tL_messages_createChat);
                }
            });
        } else if (tLObject instanceof TLRPC.TL_messages_invitedUsers) {
            final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers = (TLRPC.TL_messages_invitedUsers) tLObject;
            processUpdates(tL_messages_invitedUsers.updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda427
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$237(tL_messages_invitedUsers);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$239(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_channels_createChannel tL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_channels_createChannel, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$240(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        ArrayList<TLRPC.Chat> arrayList = updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
        } else {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidCreated, Long.valueOf(updates.chats.get(0).id));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$241(final BaseFragment baseFragment, final TLRPC.TL_channels_createChannel tL_channels_createChannel, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda105
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$239(tL_error, baseFragment, tL_channels_createChannel);
                }
            });
            return;
        }
        final TLRPC.Updates updates = (TLRPC.Updates) tLObject;
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$createChat$240(updates);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$129(long j, int i, boolean z, TLRPC.InputPeer inputPeer, long j2, int i2) {
        if (j == getUserConfig().getClientUserId()) {
            getSavedMessagesController().deleteAllDialogs();
        }
        deleteDialog(j, 2, i, Math.max(0, i2), z, inputPeer, j2);
        checkIfFolderEmpty(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$130(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$131(final long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteDialog$130(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$132(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$133(long j, long j2, int i, int i2, boolean z, TLRPC.InputPeer inputPeer, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tL_error == null) {
            TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory = (TLRPC.TL_messages_affectedHistory) tLObject;
            if (tL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, 0, i, i2, z, inputPeer, 0L);
            }
            processNewDifferenceParams(-1, tL_messages_affectedHistory.pts, -1, tL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$118(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$119(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$120(long j, long j2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tL_messages_affectedMessages.pts, tL_messages_affectedMessages.pts_count, j);
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$121(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tL_messages_affectedMessages.pts, -1, tL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesByPush$347(ArrayList arrayList, long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        if (j == 0) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
            }
            return;
        }
        ArrayList arrayList2 = (ArrayList) this.dialogMessage.get(-j);
        if (arrayList2 != null) {
            for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                MessageObject messageObject2 = (MessageObject) arrayList2.get(i2);
                int size2 = arrayList.size();
                int i3 = 0;
                while (true) {
                    if (i3 >= size2) {
                        break;
                    }
                    if (messageObject2.getId() == ((Integer) arrayList.get(i3)).intValue()) {
                        messageObject2.deleted = true;
                        break;
                    }
                    i3++;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesByPush$348(final ArrayList arrayList, final long j, long j2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda86
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$347(arrayList, j);
            }
        });
        getMessagesStorage().deletePushMessages(j2, arrayList);
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, j, arrayList, getMessagesStorage().markMessagesAsDeleted(j2, arrayList, false, true, 0, 0), false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesRange$417(ArrayList arrayList, long j, TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory, long j2, int i, int i2, boolean z, Runnable runnable) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        if (tL_messages_affectedHistory.offset > 0) {
            deleteMessagesRange(j2, j, i, i2, z, runnable);
        } else {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesRange$418(final long j, final int i, final int i2, final long j2, final TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory, final boolean z, final Runnable runnable) {
        final ArrayList<Integer> cachedMessagesInRange = getMessagesStorage().getCachedMessagesInRange(j, i, i2);
        getMessagesStorage().markMessagesAsDeleted(j, cachedMessagesInRange, false, true, 0, 0);
        getMessagesStorage().updateDialogsWithDeletedMessages(j, 0L, cachedMessagesInRange, null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda359
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesRange$417(cachedMessagesInRange, j2, tL_messages_affectedHistory, j, i, i2, z, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesRange$420(final long j, final int i, final int i2, final long j2, final boolean z, final Runnable runnable, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda466
                @Override // java.lang.Runnable
                public final void run() {
                    runnable.run();
                }
            });
            return;
        }
        final TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory = (TLRPC.TL_messages_affectedHistory) tLObject;
        processNewDifferenceParams(-1, tL_messages_affectedHistory.pts, -1, tL_messages_affectedHistory.pts_count);
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda465
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesRange$418(j, i, i2, j2, tL_messages_affectedHistory, z, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteParticipantFromChat$289(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$290(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$291(boolean z, boolean z2, final long j, Runnable runnable, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
        if (z && !z2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda159
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteParticipantFromChat$290(j);
                }
            }, 1000L);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteParticipantFromChat$292(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$293(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$294(boolean z, TLRPC.User user, final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
        if (!z || UserObject.isUserSelf(user)) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda196
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteParticipantFromChat$293(j);
            }
        }, 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$134(long j, int[] iArr, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory = (TLRPC.TL_messages_affectedHistory) tLObject;
            if (tL_messages_affectedHistory.offset > 0) {
                deleteSavedDialog(j, iArr[0]);
            }
            processNewDifferenceParams(-1, tL_messages_affectedHistory.pts, -1, tL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$135(final long j, int i, final int[] iArr) {
        SavedMessagesController.SavedDialog savedDialog;
        getMessagesStorage().deleteSavedDialog(j);
        TLRPC.TL_messages_deleteSavedHistory tL_messages_deleteSavedHistory = new TLRPC.TL_messages_deleteSavedHistory();
        tL_messages_deleteSavedHistory.peer = getInputPeer(j);
        if (i == 0) {
            int i2 = 0;
            while (true) {
                if (i2 >= getSavedMessagesController().allDialogs.size()) {
                    savedDialog = null;
                    break;
                } else {
                    if (getSavedMessagesController().allDialogs.get(i2).dialogId == j) {
                        savedDialog = getSavedMessagesController().allDialogs.get(i2);
                        break;
                    }
                    i2++;
                }
            }
            if (savedDialog != null) {
                iArr[0] = Math.max(iArr[0], savedDialog.top_message_id);
                getSavedMessagesController().deleteDialog(j);
            }
            int i3 = iArr[0];
            if (i3 <= 0) {
                i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            tL_messages_deleteSavedHistory.max_id = i3;
        }
        getConnectionsManager().sendRequest(tL_messages_deleteSavedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda411
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteSavedDialog$134(j, iArr, tLObject, tL_error);
            }
        }, 64);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteSavedDialog$136(int[] iArr, Runnable runnable, int i) {
        iArr[0] = i;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChannelHistory$124(TLRPC.Chat chat, TLRPC.User user, TLRPC.Chat chat2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory = (TLRPC.TL_messages_affectedHistory) tLObject;
            int i = tL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(chat, user, chat2, i);
            }
            processNewChannelDifferenceParams(tL_messages_affectedHistory.pts, tL_messages_affectedHistory.pts_count, chat.id);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserPhoto$109(TLObject tLObject, long j) {
        TLRPC.TL_photos_photo tL_photos_photo = (TLRPC.TL_photos_photo) tLObject;
        TLRPC.User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
        if (user == null) {
            user = getUserConfig().getCurrentUser();
            putUser(user, false);
        } else {
            getUserConfig().setCurrentUser(user);
        }
        if (user == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(user);
        getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
        if (tL_photos_photo.photo instanceof TLRPC.TL_photo) {
            TLRPC.TL_userProfilePhoto tL_userProfilePhoto = new TLRPC.TL_userProfilePhoto();
            user.photo = tL_userProfilePhoto;
            tL_userProfilePhoto.has_video = !tL_photos_photo.photo.video_sizes.isEmpty();
            TLRPC.UserProfilePhoto userProfilePhoto = user.photo;
            TLRPC.Photo photo = tL_photos_photo.photo;
            userProfilePhoto.photo_id = photo.id;
            userProfilePhoto.photo_small = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 150).location;
            user.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(tL_photos_photo.photo.sizes, 800).location;
            user.photo.dc_id = tL_photos_photo.photo.dc_id;
        } else {
            user.photo = new TLRPC.TL_userProfilePhotoEmpty();
        }
        TLRPC.UserFull userFull = getUserFull(j);
        if (userFull != null) {
            userFull.profile_photo = tL_photos_photo.photo;
            getMessagesStorage().updateUserInfo(userFull, false);
        }
        getUserConfig().getCurrentUser().photo = user.photo;
        putUser(user, false);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.updateInterfaces;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, Integer.valueOf(UPDATE_MASK_ALL));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserPhoto$110(final long j, final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda150
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteUserPhoto$109(tLObject, j);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteUserPhoto$111(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didAddedNewTask$75(int i) {
        int i2;
        if (!(this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null && !this.gettingNewDeleteTask) && ((i2 = this.currentDeletingTaskTime) == 0 || i >= i2)) {
            return;
        }
        getNewDeleteTask(null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didAddedNewTask$76(long j, SparseArray sparseArray) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didCreatedNewDeleteTask, Long.valueOf(j), sparseArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$37() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$38(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user == null) {
                return;
            }
            TLRPC.TL_photos_photo tL_photos_photo = (TLRPC.TL_photos_photo) tLObject;
            ArrayList<TLRPC.PhotoSize> arrayList = tL_photos_photo.photo.sizes;
            TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
            TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
            TLRPC.TL_userProfilePhoto tL_userProfilePhoto = new TLRPC.TL_userProfilePhoto();
            user.photo = tL_userProfilePhoto;
            tL_userProfilePhoto.photo_id = tL_photos_photo.photo.id;
            if (closestPhotoSizeWithSize != null) {
                tL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
            }
            if (closestPhotoSizeWithSize2 != null) {
                tL_userProfilePhoto.photo_big = closestPhotoSizeWithSize2.location;
            }
            getDialogPhotos(user.id).reset();
            getDialogPhotos(user.id).load(0, 80);
            ArrayList arrayList2 = new ArrayList();
            arrayList2.add(user);
            getMessagesStorage().putUsersAndChats(arrayList2, null, false, true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda72
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didReceivedNotification$37();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$39(TLRPC.WallPaper wallPaper, TLRPC.TL_wallPaperSettings tL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file, String str) {
        if (this.uploadingWallpaper == null || this.uploadingWallpaperInfo.requestIds == null || wallPaper == null) {
            return;
        }
        wallPaper.settings = tL_wallPaperSettings;
        wallPaper.flags |= 4;
        overrideWallpaperInfo.slug = wallPaper.slug;
        overrideWallpaperInfo.saveOverrideWallpaper();
        ArrayList<TLRPC.WallPaper> arrayList = new ArrayList<>();
        arrayList.add(wallPaper);
        getMessagesStorage().putWallpapers(arrayList, 2);
        TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(wallPaper.document.thumbs, 320);
        if (closestPhotoSizeWithSize != null) {
            ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, wallPaper.document), false);
        }
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.wallpapersNeedReload, wallPaper.slug);
        ArrayList arrayList2 = this.uploadingWallpaperInfo.requestIds;
        if (arrayList2 == null || overrideWallpaperInfo.dialogId == 0) {
            return;
        }
        arrayList2.add(Integer.valueOf(ChatThemeController.getInstance(this.currentAccount).setWallpaperToPeer(overrideWallpaperInfo.dialogId, str, overrideWallpaperInfo, null, null)));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$40(final Theme.OverrideWallpaperInfo overrideWallpaperInfo, final TLRPC.TL_wallPaperSettings tL_wallPaperSettings, final String str, TLObject tLObject, TLRPC.TL_error tL_error) {
        final TLRPC.WallPaper wallPaper = (TLRPC.WallPaper) tLObject;
        final File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (wallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, getFileLoader().getPathToAttach(wallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$39(wallPaper, tL_wallPaperSettings, overrideWallpaperInfo, file, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$41(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (!(tLObject instanceof TLRPC.TL_theme)) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
            return;
        }
        Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC.TL_theme) tLObject, this.currentAccount, false);
        installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$42(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda471
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$41(tLObject, themeInfo, themeAccent);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$43(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (!(tLObject instanceof TLRPC.TL_theme)) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
        } else {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC.TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$44(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda380
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$43(tLObject, themeInfo, themeAccent);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$45(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$didReceivedNotification$46(TLRPC.TL_theme tL_theme, final Theme.ThemeInfo themeInfo, TLRPC.TL_inputThemeSettings tL_inputThemeSettings, final Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC.TL_error tL_error) {
        RequestDelegate requestDelegate;
        TLRPC.TL_account_createTheme tL_account_createTheme;
        ConnectionsManager connectionsManager;
        String name = tL_theme != null ? tL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda148
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didReceivedNotification$45(themeInfo, themeAccent);
                }
            });
            return;
        }
        TLRPC.Document document = (TLRPC.Document) tLObject;
        TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
        tL_inputDocument.access_hash = document.access_hash;
        tL_inputDocument.id = document.id;
        tL_inputDocument.file_reference = document.file_reference;
        if (tL_theme == null || !tL_theme.creator) {
            TLRPC.TL_account_createTheme tL_account_createTheme2 = new TLRPC.TL_account_createTheme();
            tL_account_createTheme2.document = tL_inputDocument;
            tL_account_createTheme2.flags |= 4;
            tL_account_createTheme2.slug = (tL_theme == null || TextUtils.isEmpty(tL_theme.slug)) ? "" : tL_theme.slug;
            tL_account_createTheme2.title = name;
            if (tL_inputThemeSettings != null) {
                tL_account_createTheme2.settings = tL_inputThemeSettings;
                tL_account_createTheme2.flags |= 8;
            }
            ConnectionsManager connectionsManager2 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda147
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC.TL_error tL_error2) {
                    MessagesController.this.lambda$didReceivedNotification$42(themeInfo, themeAccent, tLObject2, tL_error2);
                }
            };
            connectionsManager = connectionsManager2;
            tL_account_createTheme = tL_account_createTheme2;
        } else {
            TLRPC.TL_account_updateTheme tL_account_updateTheme = new TLRPC.TL_account_updateTheme();
            TLRPC.TL_inputTheme tL_inputTheme = new TLRPC.TL_inputTheme();
            tL_inputTheme.id = tL_theme.id;
            tL_inputTheme.access_hash = tL_theme.access_hash;
            tL_account_updateTheme.theme = tL_inputTheme;
            tL_account_updateTheme.slug = tL_theme.slug;
            int i = tL_account_updateTheme.flags;
            tL_account_updateTheme.title = name;
            tL_account_updateTheme.document = tL_inputDocument;
            tL_account_updateTheme.flags = i | 7;
            if (tL_inputThemeSettings != null) {
                tL_account_updateTheme.settings = tL_inputThemeSettings;
                tL_account_updateTheme.flags = i | 15;
            }
            tL_account_updateTheme.format = "android";
            ConnectionsManager connectionsManager3 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda146
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC.TL_error tL_error2) {
                    MessagesController.this.lambda$didReceivedNotification$44(themeInfo, themeAccent, tLObject2, tL_error2);
                }
            };
            connectionsManager = connectionsManager3;
            tL_account_createTheme = tL_account_updateTheme;
        }
        connectionsManager.sendRequest(tL_account_createTheme, requestDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMessagesLoaded$413(boolean[] zArr, TLRPC.Chat chat, Runnable[] runnableArr, long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        if (zArr[0]) {
            return;
        }
        if (chat != null) {
            getMessagesController().putChat(chat, true);
            runnableArr[0] = ensureMessagesLoaded(j, i, messagesLoadedCallback);
        } else if (messagesLoadedCallback != null) {
            messagesLoadedCallback.onError();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMessagesLoaded$414(final boolean[] zArr, MessagesStorage messagesStorage, long j, final Runnable[] runnableArr, final long j2, final int i, final MessagesLoadedCallback messagesLoadedCallback) {
        if (zArr[0]) {
            return;
        }
        final TLRPC.Chat chat = messagesStorage.getChat(j);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$ensureMessagesLoaded$413(zArr, chat, runnableArr, j2, i, messagesLoadedCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$ensureMessagesLoaded$415(boolean[] zArr, Runnable[] runnableArr) {
        zArr[0] = true;
        Runnable runnable = runnableArr[0];
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMessagesLoaded$416(int i) {
        getConnectionsManager().cancelRequestsForGuid(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$generateJoinMessage$346(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(-j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getAvailableEffects$450(TLRPC.messages_AvailableEffects messages_availableeffects) {
        if (this.availableEffects != messages_availableeffects) {
            this.availableEffects = messages_availableeffects;
            if (messages_availableeffects != null) {
                AnimatedEmojiDrawable.getDocumentFetcher(this.currentAccount).putDocuments(this.availableEffects.documents);
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.availableEffectsUpdate, new Object[0]);
        }
        this.loadingAvailableEffects = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getBlockedPeers$107(TLObject tLObject, boolean z, TLRPC.TL_contacts_getBlocked tL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC.contacts_Blocked contacts_blocked = (TLRPC.contacts_Blocked) tLObject;
            putUsers(contacts_blocked.users, false);
            putChats(contacts_blocked.chats, false);
            getMessagesStorage().putUsersAndChats(contacts_blocked.users, contacts_blocked.chats, true, true);
            if (z) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(contacts_blocked.count, contacts_blocked.blocked.size());
            this.blockedEndReached = contacts_blocked.blocked.size() < tL_contacts_getBlocked.limit;
            int size = contacts_blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockePeers.put(MessageObject.getPeerId(contacts_blocked.blocked.get(i).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getBlockedPeers$108(final boolean z, final TLRPC.TL_contacts_getBlocked tL_contacts_getBlocked, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getBlockedPeers$107(tLObject, z, tL_contacts_getBlocked);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$312(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$313(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$314(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$315(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$316(TLRPC.updates_ChannelDifference updates_channeldifference) {
        putUsers(updates_channeldifference.users, false);
        putChats(updates_channeldifference.chats, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$317(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.messageReceivedByServer;
            Integer valueOf = Integer.valueOf((int) jArr[1]);
            Integer valueOf2 = Integer.valueOf(keyAt);
            Long valueOf3 = Long.valueOf(jArr[0]);
            Boolean bool = Boolean.FALSE;
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, valueOf, valueOf2, null, valueOf3, 0L, -1, bool);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messageReceivedByServer2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$318(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), 0);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$319(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$320(final ArrayList arrayList, TLRPC.updates_ChannelDifference updates_channeldifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda278
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$319(arrayList);
                }
            });
        }
        getMessagesStorage().putMessages(updates_channeldifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), 0, 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$321(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$322(final long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda436
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$321(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$323(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:36:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x01ef  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x01f6  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x026c  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0275  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x017d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelDifference$324(final TLRPC.updates_ChannelDifference updates_channeldifference, final long j, TLRPC.Chat chat, LongSparseArray longSparseArray, int i, long j2) {
        boolean z;
        MessageObject messageObject;
        ArrayList arrayList;
        boolean z2;
        TLRPC.Chat chat2 = chat;
        boolean z3 = false;
        if ((updates_channeldifference instanceof TLRPC.TL_updates_channelDifference) || (updates_channeldifference instanceof TLRPC.TL_updates_channelDifferenceEmpty)) {
            if (!updates_channeldifference.new_messages.isEmpty()) {
                final LongSparseArray longSparseArray2 = new LongSparseArray();
                ImageLoader.saveMessagesThumbs(updates_channeldifference.new_messages);
                final ArrayList arrayList2 = new ArrayList();
                long j3 = -j;
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j3));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j3));
                    this.dialogs_read_inbox_max.put(Long.valueOf(j3), num);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j3));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j3));
                    this.dialogs_read_outbox_max.put(Long.valueOf(j3), num2);
                }
                int i2 = 0;
                while (i2 < updates_channeldifference.new_messages.size()) {
                    TLRPC.Message message = updates_channeldifference.new_messages.get(i2);
                    if (!(message instanceof TLRPC.TL_messageEmpty)) {
                        if (chat2 == null || !chat2.left) {
                            if ((message.out ? num2 : num).intValue() < message.id && !(message.action instanceof TLRPC.TL_messageActionChannelCreate)) {
                                z = true;
                                message.unread = z;
                                boolean contains = this.createdDialogIds.contains(Long.valueOf(j3));
                                messageObject = new MessageObject(this.currentAccount, message, longSparseArray, contains, contains);
                                if ((messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                                    arrayList2.add(messageObject);
                                }
                                arrayList = (ArrayList) longSparseArray2.get(j3);
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                    longSparseArray2.put(j3, arrayList);
                                }
                                arrayList.add(messageObject);
                            }
                        }
                        z = false;
                        message.unread = z;
                        boolean contains2 = this.createdDialogIds.contains(Long.valueOf(j3));
                        messageObject = new MessageObject(this.currentAccount, message, longSparseArray, contains2, contains2);
                        if (messageObject.isOut()) {
                        }
                        arrayList2.add(messageObject);
                        arrayList = (ArrayList) longSparseArray2.get(j3);
                        if (arrayList == null) {
                        }
                        arrayList.add(messageObject);
                    }
                    i2++;
                    chat2 = chat;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda29
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$318(longSparseArray2);
                    }
                });
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda30
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$320(arrayList2, updates_channeldifference);
                    }
                });
            }
            if (!updates_channeldifference.other_updates.isEmpty()) {
                processUpdateArray(updates_channeldifference.other_updates, updates_channeldifference.users, updates_channeldifference.chats, true, 0);
            }
            processChannelsUpdatesQueue(j, 1);
            getMessagesStorage().saveChannelPts(j, updates_channeldifference.pts);
        } else if (updates_channeldifference instanceof TLRPC.TL_updates_channelDifferenceTooLong) {
            long j4 = -j;
            Integer num3 = this.dialogs_read_inbox_max.get(Long.valueOf(j4));
            if (num3 == null) {
                num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j4));
                this.dialogs_read_inbox_max.put(Long.valueOf(j4), num3);
            }
            Integer num4 = this.dialogs_read_outbox_max.get(Long.valueOf(j4));
            if (num4 == null) {
                num4 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j4));
                this.dialogs_read_outbox_max.put(Long.valueOf(j4), num4);
            }
            for (int i3 = 0; i3 < updates_channeldifference.messages.size(); i3++) {
                TLRPC.Message message2 = updates_channeldifference.messages.get(i3);
                message2.dialog_id = j4;
                if (!(message2.action instanceof TLRPC.TL_messageActionChannelCreate) && (chat2 == null || !chat2.left)) {
                    if ((message2.out ? num4 : num3).intValue() < message2.id) {
                        z2 = true;
                        message2.unread = z2;
                    }
                }
                z2 = false;
                message2.unread = z2;
            }
            getMessagesStorage().overwriteChannel(j, (TLRPC.TL_updates_channelDifferenceTooLong) updates_channeldifference, i, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda28
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$322(j);
                }
            });
            this.gettingDifferenceChannels.delete(j);
            this.channelsPts.put(j, updates_channeldifference.pts);
            if ((updates_channeldifference.flags & 2) != 0) {
                this.shortPollChannels.put(j, ((int) (System.currentTimeMillis() / 1000)) + updates_channeldifference.timeout);
            }
            if (!updates_channeldifference.isFinal) {
                getChannelDifference(j);
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("received channel difference with pts = " + updates_channeldifference.pts + " channelId = " + j);
                FileLog.d("new_messages = " + updates_channeldifference.new_messages.size() + " messages = " + updates_channeldifference.messages.size() + " users = " + updates_channeldifference.users.size() + " chats = " + updates_channeldifference.chats.size() + " other updates = " + updates_channeldifference.other_updates.size());
            }
            if (j2 != 0) {
                getMessagesStorage().removePendingTask(j2);
            }
            if (z3) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda31
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$323(j);
                }
            });
            return;
        }
        z3 = true;
        this.gettingDifferenceChannels.delete(j);
        this.channelsPts.put(j, updates_channeldifference.pts);
        if ((updates_channeldifference.flags & 2) != 0) {
        }
        if (!updates_channeldifference.isFinal) {
        }
        if (BuildVars.LOGS_ENABLED) {
        }
        if (j2 != 0) {
        }
        if (z3) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$325(ArrayList arrayList, final long j, final TLRPC.updates_ChannelDifference updates_channeldifference, final TLRPC.Chat chat, final LongSparseArray longSparseArray, final int i, final long j2) {
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC.TL_updateMessageID tL_updateMessageID = (TLRPC.TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tL_updateMessageID.random_id, -j, null, tL_updateMessageID.id, 0, false, -1, 0);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda404
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$317(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda405
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$324(updates_channeldifference, j, chat, longSparseArray, i, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$326(TLRPC.TL_error tL_error, long j) {
        checkChannelError(tL_error.text, j);
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$327(final long j, final int i, final long j2, TLObject tLObject, final TLRPC.TL_error tL_error) {
        final TLRPC.Chat chat;
        if (tLObject == null) {
            if (tL_error != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda275
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$326(tL_error, j);
                    }
                });
                this.gettingDifferenceChannels.delete(j);
                if (j2 != 0) {
                    getMessagesStorage().removePendingTask(j2);
                    return;
                }
                return;
            }
            return;
        }
        final TLRPC.updates_ChannelDifference updates_channeldifference = (TLRPC.updates_ChannelDifference) tLObject;
        final LongSparseArray longSparseArray = new LongSparseArray();
        int i2 = 0;
        for (int i3 = 0; i3 < updates_channeldifference.users.size(); i3++) {
            TLRPC.User user = updates_channeldifference.users.get(i3);
            longSparseArray.put(user.id, user);
        }
        int i4 = 0;
        while (true) {
            if (i4 >= updates_channeldifference.chats.size()) {
                chat = null;
                break;
            }
            TLRPC.Chat chat2 = updates_channeldifference.chats.get(i4);
            if (chat2.id == j) {
                chat = chat2;
                break;
            }
            i4++;
        }
        final ArrayList arrayList = new ArrayList();
        if (!updates_channeldifference.other_updates.isEmpty()) {
            while (i2 < updates_channeldifference.other_updates.size()) {
                TLRPC.Update update = updates_channeldifference.other_updates.get(i2);
                if (update instanceof TLRPC.TL_updateMessageID) {
                    arrayList.add((TLRPC.TL_updateMessageID) update);
                    updates_channeldifference.other_updates.remove(i2);
                    i2--;
                }
                i2++;
            }
        }
        getMessagesStorage().putUsersAndChats(updates_channeldifference.users, updates_channeldifference.chats, true, true);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda273
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$316(updates_channeldifference);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda274
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$325(arrayList, j, updates_channeldifference, chat, longSparseArray, i, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getChannelParticipant$426(Utilities.Callback callback, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (callback != null) {
            callback.run(tLObject instanceof TLRPC.TL_channels_channelParticipant ? ((TLRPC.TL_channels_channelParticipant) tLObject).participant : null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelRecommendations$435(TLObject tLObject, boolean z, long j) {
        int i;
        if (tLObject instanceof TLRPC.messages_Chats) {
            ArrayList<TLRPC.Chat> arrayList = ((TLRPC.messages_Chats) tLObject).chats;
            putChats(arrayList, false);
            ChannelRecommendations channelRecommendations = new ChannelRecommendations();
            channelRecommendations.wasPremium = z;
            channelRecommendations.chats.addAll(arrayList);
            if (!(tLObject instanceof TLRPC.TL_messages_chatsSlice)) {
                if (!getUserConfig().isPremium() && BuildVars.DEBUG_PRIVATE_VERSION) {
                    i = 90;
                }
                this.cachedChannelRecommendations.put(Long.valueOf(j), channelRecommendations);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRecommendationsLoaded, Long.valueOf(j));
            }
            i = Math.max(0, ((TLRPC.TL_messages_chatsSlice) tLObject).count - arrayList.size());
            channelRecommendations.more = i;
            this.cachedChannelRecommendations.put(Long.valueOf(j), channelRecommendations);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRecommendationsLoaded, Long.valueOf(j));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelRecommendations$436(final boolean z, final long j, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda377
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelRecommendations$435(tLObject, z, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getContentSettings$455(TLObject tLObject) {
        if (tLObject instanceof TL_account.contentSettings) {
            this.contentSettings = (TL_account.contentSettings) tLObject;
            this.contentSettingsLoadedTime = System.currentTimeMillis();
        }
        this.contentSettingsLoading = false;
        ArrayList<Utilities.Callback<TL_account.contentSettings>> arrayList = this.contentSettingsCallbacks;
        if (arrayList != null) {
            Iterator<Utilities.Callback<TL_account.contentSettings>> it = arrayList.iterator();
            while (it.hasNext()) {
                it.next().run(this.contentSettings);
            }
            this.contentSettingsCallbacks.clear();
            this.contentSettingsCallbacks = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getContentSettings$456(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda407
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getContentSettings$455(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$328(TLRPC.updates_Difference updates_difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), updates_difference.pts, i, i2);
        getStoriesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$329(TLRPC.updates_Difference updates_difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(updates_difference.users, false);
        putChats(updates_difference.chats, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$330(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.messageReceivedByServer;
            Integer valueOf = Integer.valueOf((int) jArr[1]);
            Integer valueOf2 = Integer.valueOf(keyAt);
            Long valueOf3 = Long.valueOf(jArr[0]);
            Boolean bool = Boolean.FALSE;
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, valueOf, valueOf2, null, valueOf3, 0L, -1, bool);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messageReceivedByServer2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$331(ArrayList arrayList, TLRPC.updates_Difference updates_difference) {
        getNotificationsController().processNewMessages(arrayList, !(updates_difference instanceof TLRPC.TL_updates_differenceSlice), false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$332(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$333(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$332(j, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$334(final ArrayList arrayList, final TLRPC.updates_Difference updates_difference, LongSparseArray longSparseArray) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda191
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$331(arrayList, updates_difference);
                }
            });
        }
        getMessagesStorage().putMessages(updates_difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), 0, 0L);
        for (int i = 0; i < longSparseArray.size(); i++) {
            final long keyAt = longSparseArray.keyAt(i);
            final ArrayList<MessageObject> arrayList2 = (ArrayList) longSparseArray.valueAt(i);
            getMediaDataController().loadReplyMessagesForMessages(arrayList2, keyAt, 0, 0L, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda192
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$333(keyAt, arrayList2);
                }
            }, 0, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:76:0x0121, code lost:
    
        if (r10.messageOwner.from_scheduled != false) goto L59;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDifference$335(final TLRPC.updates_Difference updates_difference, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        MessageObject messageObject;
        TLRPC.User user;
        int i = 0;
        if (!updates_difference.new_messages.isEmpty() || !updates_difference.new_encrypted_messages.isEmpty()) {
            final LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i2 = 0; i2 < updates_difference.new_encrypted_messages.size(); i2++) {
                ArrayList<TLRPC.Message> decryptMessage = getSecretChatHelper().decryptMessage(updates_difference.new_encrypted_messages.get(i2));
                if (decryptMessage != null && !decryptMessage.isEmpty()) {
                    updates_difference.new_messages.addAll(decryptMessage);
                }
            }
            ImageLoader.saveMessagesThumbs(updates_difference.new_messages);
            final ArrayList arrayList = new ArrayList();
            long clientUserId = getUserConfig().getClientUserId();
            for (int i3 = 0; i3 < updates_difference.new_messages.size(); i3++) {
                TLRPC.Message message = updates_difference.new_messages.get(i3);
                if (!(message instanceof TLRPC.TL_messageEmpty)) {
                    MessageObject.getDialogId(message);
                    if (!DialogObject.isEncryptedDialog(message.dialog_id)) {
                        TLRPC.MessageAction messageAction = message.action;
                        if ((messageAction instanceof TLRPC.TL_messageActionChatDeleteUser) && (user = (TLRPC.User) longSparseArray.get(messageAction.user_id)) != null && user.bot) {
                            message.reply_markup = new TLRPC.TL_replyKeyboardHide();
                            message.flags |= 64;
                        }
                        TLRPC.MessageAction messageAction2 = message.action;
                        if ((messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo) || (messageAction2 instanceof TLRPC.TL_messageActionChannelCreate)) {
                            message.unread = false;
                            message.media_unread = false;
                        } else {
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer num = concurrentHashMap.get(Long.valueOf(message.dialog_id));
                            if (num == null) {
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(message.out, message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(message.dialog_id), num);
                            }
                            message.unread = num.intValue() < message.id;
                        }
                    }
                    long j = message.dialog_id;
                    if (j == clientUserId) {
                        message.unread = false;
                        message.media_unread = false;
                        message.out = true;
                    }
                    boolean contains = this.createdDialogIds.contains(Long.valueOf(j));
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, message, longSparseArray, longSparseArray2, contains, contains);
                    if (messageObject2.isOut()) {
                        messageObject = messageObject2;
                    } else {
                        messageObject = messageObject2;
                    }
                    if (messageObject.isUnread()) {
                        arrayList.add(messageObject);
                    }
                    ArrayList arrayList2 = (ArrayList) longSparseArray3.get(message.dialog_id);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                        longSparseArray3.put(message.dialog_id, arrayList2);
                    }
                    arrayList2.add(messageObject);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda171
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$334(arrayList, updates_difference, longSparseArray3);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!updates_difference.other_updates.isEmpty()) {
            processUpdateArray(updates_difference.other_updates, updates_difference.users, updates_difference.chats, true, 0);
        }
        if (updates_difference instanceof TLRPC.TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.state.seq);
            getMessagesStorage().setLastDateValue(updates_difference.state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.state.qts);
            FileLog.d("received difference: isUpdating = false");
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(updates_difference.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.intermediate_state.qts);
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.seq);
            getMessagesStorage().setLastDateValue(updates_difference.date);
            getConnectionsManager().setIsUpdating(false);
            FileLog.d("received differenceEmpty: isUpdating = false");
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + updates_difference.new_messages.size() + " users = " + updates_difference.users.size() + " chats = " + updates_difference.chats.size() + " other updates = " + updates_difference.other_updates.size());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$336(final TLRPC.updates_Difference updates_difference, ArrayList arrayList, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        getMessagesStorage().putUsersAndChats(updates_difference.users, updates_difference.chats, true, false);
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC.TL_updateMessageID tL_updateMessageID = (TLRPC.TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tL_updateMessageID.random_id, 0L, null, tL_updateMessageID.id, 0, false, -1, 0);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda161
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getDifference$330(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$335(updates_difference, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$337(final int i, final int i2, TLObject tLObject, TLRPC.TL_error tL_error) {
        int i3 = 0;
        if (tL_error != null) {
            this.gettingDifference = false;
            getConnectionsManager().setIsUpdating(false);
            FileLog.d("received: isUpdating = false");
            return;
        }
        final TLRPC.updates_Difference updates_difference = (TLRPC.updates_Difference) tLObject;
        if (updates_difference instanceof TLRPC.TL_updates_differenceTooLong) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda228
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$328(updates_difference, i, i2);
                }
            });
            return;
        }
        if (updates_difference instanceof TLRPC.TL_updates_differenceSlice) {
            TLRPC.TL_updates_state tL_updates_state = updates_difference.intermediate_state;
            getDifference(tL_updates_state.pts, tL_updates_state.date, tL_updates_state.qts, true);
        }
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int i4 = 0; i4 < updates_difference.users.size(); i4++) {
            TLRPC.User user = updates_difference.users.get(i4);
            longSparseArray.put(user.id, user);
        }
        for (int i5 = 0; i5 < updates_difference.chats.size(); i5++) {
            TLRPC.Chat chat = updates_difference.chats.get(i5);
            longSparseArray2.put(chat.id, chat);
        }
        final ArrayList arrayList = new ArrayList();
        if (!updates_difference.other_updates.isEmpty()) {
            while (i3 < updates_difference.other_updates.size()) {
                TLRPC.Update update = updates_difference.other_updates.get(i3);
                if (update instanceof TLRPC.TL_updateMessageID) {
                    arrayList.add((TLRPC.TL_updateMessageID) update);
                } else {
                    if (getUpdateType(update) == 2) {
                        long updateChannelId = getUpdateChannelId(update);
                        int i6 = this.channelsPts.get(updateChannelId);
                        if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                            this.channelsPts.put(updateChannelId, i6);
                        }
                        if (i6 != 0) {
                            if (getUpdatePts(update) > i6) {
                            }
                        }
                    }
                    i3++;
                }
                updates_difference.other_updates.remove(i3);
                i3--;
                i3++;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda229
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$329(updates_difference);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda230
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$336(updates_difference, arrayList, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getGroupCall$56(TLObject tLObject, long j, Runnable runnable) {
        if (tLObject != null) {
            TLRPC.TL_phone_groupCall tL_phone_groupCall = (TLRPC.TL_phone_groupCall) tLObject;
            putUsers(tL_phone_groupCall.users, false);
            putChats(tL_phone_groupCall.chats, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), j, tL_phone_groupCall);
            this.groupCalls.put(tL_phone_groupCall.call.id, call);
            this.groupCallsByChatId.put(j, call);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(tL_phone_groupCall.call.id), Boolean.FALSE);
            if (runnable != null) {
                runnable.run();
            }
        }
        this.loadingGroupCalls.remove(Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getGroupCall$57(final long j, final Runnable runnable, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda340
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getGroupCall$56(tLObject, j, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getNewDeleteTask$77(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(longSparseArray, longSparseArray2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getNextReactionMention$1(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getNextReactionMention$2(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getNextReactionMention$3(TLObject tLObject, TLRPC.TL_error tL_error, final Consumer consumer) {
        ArrayList<TLRPC.Message> arrayList;
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        final int i = 0;
        if (tL_error != null && messages_messages != null && (arrayList = messages_messages.messages) != null && !arrayList.isEmpty()) {
            i = messages_messages.messages.get(0).id;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$2(Consumer.this, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getNextReactionMention$4(final Consumer consumer, final TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda342
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$3(TLObject.this, tL_error, consumer);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:15:0x007e  */
    /* JADX WARN: Removed duplicated region for block: B:18:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNextReactionMention$5(long j, long j2, final Consumer consumer, int i) {
        boolean z;
        SQLiteCursor queryFinalized;
        final int i2 = 0;
        try {
            queryFinalized = j != 0 ? getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions_topics WHERE state = 1 AND dialog_id = %d AND topic_id = %d LIMIT 1", Long.valueOf(j2), Long.valueOf(j)), new Object[0]) : getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions WHERE state = 1 AND dialog_id = %d LIMIT 1", Long.valueOf(j2)), new Object[0]);
            if (queryFinalized.next()) {
                i2 = queryFinalized.intValue(0);
                z = false;
            } else {
                z = true;
            }
        } catch (SQLiteException e) {
            e = e;
            z = true;
        }
        try {
            queryFinalized.dispose();
            if (i2 != 0) {
                getMessagesStorage().markMessageReactionsAsRead(j2, j, i2, false);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda270
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$getNextReactionMention$1(Consumer.this, i2);
                    }
                });
            }
        } catch (SQLiteException e2) {
            e = e2;
            e.printStackTrace();
            if (z) {
            }
        }
        if (z) {
            return;
        }
        TLRPC.TL_messages_getUnreadReactions tL_messages_getUnreadReactions = new TLRPC.TL_messages_getUnreadReactions();
        tL_messages_getUnreadReactions.peer = getMessagesController().getInputPeer(j2);
        tL_messages_getUnreadReactions.limit = 1;
        tL_messages_getUnreadReactions.add_offset = i - 1;
        getConnectionsManager().sendRequest(tL_messages_getUnreadReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda271
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$getNextReactionMention$4(Consumer.this, tLObject, tL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSavedReactionTags$439(TLObject tLObject, long j, TLRPC.messages_SavedReactionTags messages_savedreactiontags, TLRPC.TL_messages_getSavedReactionTags tL_messages_getSavedReactionTags) {
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags;
        if (tLObject instanceof TLRPC.TL_messages_savedReactionsTags) {
            tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) tLObject;
            this.reactionTags.put(j, tL_messages_savedReactionsTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
        } else {
            if (!(tLObject instanceof TLRPC.TL_messages_savedReactionsTagsNotModified) || messages_savedreactiontags != null || tL_messages_getSavedReactionTags.hash != 0) {
                return;
            }
            tL_messages_savedReactionsTags = new TLRPC.TL_messages_savedReactionsTags();
            this.reactionTags.put(j, tL_messages_savedReactionsTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
        }
        saveSavedReactionsTags(j, tL_messages_savedReactionsTags);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSavedReactionTags$440(final long j, final TLRPC.messages_SavedReactionTags messages_savedreactiontags, final TLRPC.TL_messages_getSavedReactionTags tL_messages_getSavedReactionTags, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$439(tLObject, j, messages_savedreactiontags, tL_messages_getSavedReactionTags);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSavedReactionTags$441(final TLRPC.messages_SavedReactionTags messages_savedreactiontags, final long j) {
        if (this.reactionTags == null) {
            this.reactionTags = new LongSparseArray();
        }
        boolean z = messages_savedreactiontags instanceof TLRPC.TL_messages_savedReactionsTags;
        if (z) {
            this.reactionTags.put(j, (TLRPC.TL_messages_savedReactionsTags) messages_savedreactiontags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
        }
        final TLRPC.TL_messages_getSavedReactionTags tL_messages_getSavedReactionTags = new TLRPC.TL_messages_getSavedReactionTags();
        if (z) {
            tL_messages_getSavedReactionTags.hash = messages_savedreactiontags.hash;
        }
        if (j != 0) {
            tL_messages_getSavedReactionTags.flags = 1 | tL_messages_getSavedReactionTags.flags;
            tL_messages_getSavedReactionTags.peer = getInputPeer(j);
        }
        getConnectionsManager().sendRequest(tL_messages_getSavedReactionTags, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda170
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getSavedReactionTags$440(j, messages_savedreactiontags, tL_messages_getSavedReactionTags, tLObject, tL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x003a, code lost:
    
        if (r2 == null) goto L21;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:23:0x004a  */
    /* JADX WARN: Type inference failed for: r2v1, types: [org.telegram.SQLite.SQLiteDatabase] */
    /* JADX WARN: Type inference failed for: r2v10 */
    /* JADX WARN: Type inference failed for: r2v3 */
    /* JADX WARN: Type inference failed for: r2v5, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r2v7 */
    /* JADX WARN: Type inference failed for: r2v8 */
    /* JADX WARN: Type inference failed for: r2v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getSavedReactionTags$442(final long j) {
        SQLiteCursor sQLiteCursor;
        ?? database = getMessagesStorage().getDatabase();
        SQLiteCursor sQLiteCursor2 = null;
        r3 = null;
        r3 = null;
        r3 = null;
        final TLRPC.messages_SavedReactionTags messages_savedreactiontags = null;
        try {
            try {
                sQLiteCursor = database.queryFinalized("SELECT data FROM saved_reaction_tags WHERE topic_id = ?", Long.valueOf(j));
                try {
                    boolean next = sQLiteCursor.next();
                    database = sQLiteCursor;
                    if (next) {
                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                        database = sQLiteCursor;
                        if (byteBufferValue != null) {
                            messages_savedreactiontags = TLRPC.messages_SavedReactionTags.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                            database = sQLiteCursor;
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    FileLog.e(e);
                    database = sQLiteCursor;
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor2 = database;
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor2 != null) {
            }
            throw th;
        }
        database.dispose();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda32
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$441(messages_savedreactiontags, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSendAsPeers$396(TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers) {
        putUsers(tL_channels_sendAsPeers.users, false);
        putChats(tL_channels_sendAsPeers.chats, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSendAsPeers$397(TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers, long j, SendAsPeersInfo sendAsPeersInfo) {
        if (tL_channels_sendAsPeers == null) {
            this.sendAsPeers.remove(j);
            return;
        }
        sendAsPeersInfo.loadTime = SystemClock.elapsedRealtime();
        sendAsPeersInfo.sendAsPeers = tL_channels_sendAsPeers;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadSendAsPeers, Long.valueOf(j), tL_channels_sendAsPeers);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSendAsPeers$398(final long j, final SendAsPeersInfo sendAsPeersInfo, TLObject tLObject, TLRPC.TL_error tL_error) {
        final TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers;
        if (tLObject != null) {
            tL_channels_sendAsPeers = (TLRPC.TL_channels_sendAsPeers) tLObject;
            if (!tL_channels_sendAsPeers.peers.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda245
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSendAsPeers$396(tL_channels_sendAsPeers);
                    }
                });
                final TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers2 = tL_channels_sendAsPeers;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSendAsPeers$397(tL_channels_sendAsPeers2, j, sendAsPeersInfo);
                    }
                });
            }
        }
        tL_channels_sendAsPeers = null;
        final TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers22 = tL_channels_sendAsPeers;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSendAsPeers$397(tL_channels_sendAsPeers22, j, sendAsPeersInfo);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$393(TLRPC.messages_SponsoredMessages messages_sponsoredmessages) {
        putUsers(messages_sponsoredmessages.users, false);
        putChats(messages_sponsoredmessages.chats, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$394(ArrayList arrayList, long j, SponsoredMessagesInfo sponsoredMessagesInfo, Integer num) {
        if (arrayList == null) {
            this.sponsoredMessages.remove(j);
            return;
        }
        sponsoredMessagesInfo.loadTime = SystemClock.elapsedRealtime();
        sponsoredMessagesInfo.messages = arrayList;
        sponsoredMessagesInfo.posts_between = num;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadSponsoredMessages, Long.valueOf(j), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$395(final long j, final SponsoredMessagesInfo sponsoredMessagesInfo, TLObject tLObject, TLRPC.TL_error tL_error) {
        final Integer num;
        final ArrayList arrayList = null;
        r2 = null;
        Integer num2 = null;
        if (tLObject instanceof TLRPC.messages_SponsoredMessages) {
            final TLRPC.messages_SponsoredMessages messages_sponsoredmessages = (TLRPC.messages_SponsoredMessages) tLObject;
            if (!messages_sponsoredmessages.messages.isEmpty()) {
                if ((messages_sponsoredmessages instanceof TLRPC.TL_messages_sponsoredMessages) && (messages_sponsoredmessages.flags & 1) > 0) {
                    num2 = Integer.valueOf(messages_sponsoredmessages.posts_between);
                }
                ArrayList arrayList2 = new ArrayList();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda194
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSponsoredMessages$393(messages_sponsoredmessages);
                    }
                });
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                int i = 0;
                for (int i2 = 0; i2 < messages_sponsoredmessages.users.size(); i2++) {
                    TLRPC.User user = messages_sponsoredmessages.users.get(i2);
                    longSparseArray.put(user.id, user);
                }
                for (int i3 = 0; i3 < messages_sponsoredmessages.chats.size(); i3++) {
                    TLRPC.Chat chat = messages_sponsoredmessages.chats.get(i3);
                    longSparseArray2.put(chat.id, chat);
                }
                int size = messages_sponsoredmessages.messages.size();
                int i4 = -10000000;
                while (i < size) {
                    TLRPC.TL_sponsoredMessage tL_sponsoredMessage = messages_sponsoredmessages.messages.get(i);
                    TLRPC.TL_message tL_message = new TLRPC.TL_message();
                    if (!tL_sponsoredMessage.entities.isEmpty()) {
                        tL_message.entities = tL_sponsoredMessage.entities;
                        tL_message.flags |= 128;
                    }
                    tL_message.peer_id = getPeer(j);
                    tL_message.flags |= 256;
                    tL_message.date = getConnectionsManager().getCurrentTime();
                    int i5 = i4 - 1;
                    tL_message.id = i4;
                    tL_message.message = tL_sponsoredMessage.message;
                    TLRPC.MessageMedia messageMedia = tL_sponsoredMessage.media;
                    if (messageMedia != null) {
                        tL_message.flags |= 512;
                    }
                    tL_message.media = messageMedia;
                    MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC.Message) tL_message, longSparseArray, longSparseArray2, true, true);
                    messageObject.sponsoredId = tL_sponsoredMessage.random_id;
                    messageObject.sponsoredTitle = tL_sponsoredMessage.title;
                    messageObject.sponsoredUrl = tL_sponsoredMessage.url;
                    messageObject.sponsoredRecommended = tL_sponsoredMessage.recommended;
                    messageObject.sponsoredPhoto = tL_sponsoredMessage.photo;
                    messageObject.sponsoredInfo = tL_sponsoredMessage.sponsor_info;
                    messageObject.sponsoredAdditionalInfo = tL_sponsoredMessage.additional_info;
                    messageObject.sponsoredButtonText = tL_sponsoredMessage.button_text;
                    messageObject.sponsoredCanReport = tL_sponsoredMessage.can_report;
                    messageObject.sponsoredColor = tL_sponsoredMessage.color;
                    messageObject.sponsoredMedia = tL_sponsoredMessage.media;
                    messageObject.setType();
                    messageObject.textLayoutBlocks = new ArrayList<>();
                    messageObject.generateThumbs(true);
                    arrayList2.add(messageObject);
                    i++;
                    messages_sponsoredmessages = messages_sponsoredmessages;
                    i4 = i5;
                }
                num = num2;
                arrayList = arrayList2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda195
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSponsoredMessages$394(arrayList, j, sponsoredMessagesInfo, num);
                    }
                });
            }
        }
        num = null;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSponsoredMessages$394(arrayList, j, sponsoredMessagesInfo, num);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$hidePeerSettingsBar$69(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$hidePromoDialog$126(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hidePromoDialog$127() {
        this.promoDialogId = 0L;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$installTheme$113(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$installTheme$114(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadAppConfig$30(TLRPC.TL_help_appConfig tL_help_appConfig) {
        if (tL_help_appConfig != null) {
            TLRPC.JSONValue jSONValue = tL_help_appConfig.config;
            if (jSONValue instanceof TLRPC.TL_jsonObject) {
                applyAppConfig((TLRPC.TL_jsonObject) jSONValue);
            }
        }
        AndroidUtilities.cancelRunOnUIThread(this.loadAppConfigRunnable);
        AndroidUtilities.runOnUIThread(this.loadAppConfigRunnable, 240010L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadAppConfig$31(final TLRPC.TL_help_appConfig tL_help_appConfig) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda58
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadAppConfig$30(tL_help_appConfig);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$59(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.TL_channels_channelParticipants) {
            processLoadedAdminsResponse(j, (TLRPC.TL_channels_channelParticipants) tLObject);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelParticipants$139(TLRPC.TL_error tL_error, TLObject tLObject, Long l, Utilities.Callback callback) {
        if (tL_error == null) {
            TLRPC.TL_channels_channelParticipants tL_channels_channelParticipants = (TLRPC.TL_channels_channelParticipants) tLObject;
            putUsers(tL_channels_channelParticipants.users, false);
            putChats(tL_channels_channelParticipants.chats, false);
            getMessagesStorage().putUsersAndChats(tL_channels_channelParticipants.users, tL_channels_channelParticipants.chats, true, true);
            getMessagesStorage().updateChannelUsers(l.longValue(), tL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(l);
        }
        this.loadingFullParticipants.remove(l);
        if (callback != null) {
            callback.run(tLObject instanceof TLRPC.TL_channels_channelParticipants ? (TLRPC.TL_channels_channelParticipants) tLObject : null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelParticipants$140(final Long l, final Utilities.Callback callback, final TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda222
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadChannelParticipants$139(tL_error, tLObject, l, callback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadCurrentState$303(TLObject tLObject, TLRPC.TL_error tL_error) {
        this.updatingState = false;
        if (tL_error != null) {
            if (tL_error.code != 401) {
                loadCurrentState();
                return;
            }
            return;
        }
        TLRPC.TL_updates_state tL_updates_state = (TLRPC.TL_updates_state) tLObject;
        getMessagesStorage().setLastDateValue(tL_updates_state.date);
        getMessagesStorage().setLastPtsValue(tL_updates_state.pts);
        getMessagesStorage().setLastSeqValue(tL_updates_state.seq);
        getMessagesStorage().setLastQtsValue(tL_updates_state.qts);
        for (int i = 0; i < 3; i++) {
            processUpdatesQueue(i, 2);
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDialogs$188(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.messages_Dialogs messages_dialogs = (TLRPC.messages_Dialogs) tLObject;
            processLoadedDialogs(messages_dialogs, null, null, i, 0, i2, 0, false, false, false);
            if (runnable == null || !messages_dialogs.dialogs.isEmpty()) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFilterPeers$17(HashMap hashMap, TLRPC.messages_Dialogs messages_dialogs, TLRPC.messages_Dialogs messages_dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashSet hashSet, Runnable runnable, HashMap hashMap3, HashMap hashMap4) {
        TLRPC.TL_users_getUsers tL_users_getUsers;
        int i;
        TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs;
        TLRPC.TL_messages_getChats tL_messages_getChats;
        TLRPC.TL_channels_getChannels tL_channels_getChannels;
        ArrayList<TLObject> arrayList5 = new ArrayList<>();
        loop0: while (true) {
            tL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tL_users_getUsers == null) {
                    tL_users_getUsers = new TLRPC.TL_users_getUsers();
                    arrayList5.add(tL_users_getUsers);
                }
                tL_users_getUsers.id.add(getInputUser((TLRPC.InputPeer) entry.getValue()));
                if (tL_users_getUsers.id.size() == 100) {
                    break;
                }
            }
            sendLoadPeersRequest(tL_users_getUsers, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tL_users_getUsers, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        } else {
            i = 100;
        }
        TLRPC.TL_messages_getChats tL_messages_getChats2 = null;
        TLRPC.TL_channels_getChannels tL_channels_getChannels2 = null;
        for (Map.Entry entry2 : hashMap3.entrySet()) {
            TLRPC.InputPeer inputPeer = (TLRPC.InputPeer) entry2.getValue();
            if (inputPeer.chat_id != 0) {
                if (tL_messages_getChats2 == null) {
                    tL_messages_getChats = new TLRPC.TL_messages_getChats();
                    arrayList5.add(tL_messages_getChats);
                } else {
                    tL_messages_getChats = tL_messages_getChats2;
                }
                tL_messages_getChats.id.add((Long) entry2.getKey());
                if (tL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tL_messages_getChats, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
                    tL_messages_getChats2 = null;
                } else {
                    tL_messages_getChats2 = tL_messages_getChats;
                }
            } else if (inputPeer.channel_id != 0) {
                if (tL_channels_getChannels2 == null) {
                    TLRPC.TL_channels_getChannels tL_channels_getChannels3 = new TLRPC.TL_channels_getChannels();
                    arrayList5.add(tL_channels_getChannels3);
                    tL_channels_getChannels = tL_channels_getChannels3;
                } else {
                    tL_channels_getChannels = tL_channels_getChannels2;
                }
                tL_channels_getChannels.id.add(getInputChannel(inputPeer));
                if (tL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tL_channels_getChannels, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
                    tL_channels_getChannels2 = null;
                } else {
                    tL_channels_getChannels2 = tL_channels_getChannels;
                }
            }
        }
        if (tL_messages_getChats2 != null) {
            sendLoadPeersRequest(tL_messages_getChats2, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tL_channels_getChannels2 != null) {
            sendLoadPeersRequest(tL_channels_getChannels2, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        loop3: while (true) {
            tL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap4.entrySet()) {
                if (tL_messages_getPeerDialogs == null) {
                    tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
                    arrayList5.add(tL_messages_getPeerDialogs);
                }
                TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                tL_inputDialogPeer.peer = (TLRPC.InputPeer) entry3.getValue();
                tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
                if (tL_messages_getPeerDialogs.peers.size() == i) {
                    break;
                }
            }
            sendLoadPeersRequest(tL_messages_getPeerDialogs, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tL_messages_getPeerDialogs, arrayList5, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$61(long j, TLRPC.TL_messages_chatFull tL_messages_chatFull, int i, long j2) {
        TLRPC.ChatFull chatFull = (TLRPC.ChatFull) this.fullChats.get(j);
        if (chatFull != null) {
            tL_messages_chatFull.full_chat.inviterId = chatFull.inviterId;
        }
        this.fullChats.put(j, tL_messages_chatFull.full_chat);
        long j3 = -j;
        getTranslateController().updateDialogFull(j3);
        applyDialogNotificationsSettings(j3, 0L, tL_messages_chatFull.full_chat.notify_settings);
        for (int i2 = 0; i2 < tL_messages_chatFull.full_chat.bot_info.size(); i2++) {
            getMediaDataController().putBotInfo(j3, tL_messages_chatFull.full_chat.bot_info.get(i2));
        }
        int indexOfKey = this.blockePeers.indexOfKey(j3);
        if (tL_messages_chatFull.full_chat.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(j3, 1);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(j, tL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Long.valueOf(j));
        this.loadedFullChats.put(j, System.currentTimeMillis());
        putUsers(tL_messages_chatFull.users, false);
        putChats(tL_messages_chatFull.chats, false);
        if (tL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tL_messages_chatFull.full_chat.stickerset);
        }
        if (tL_messages_chatFull.full_chat.emojiset != null) {
            getMediaDataController().getGroupStickerSetById(tL_messages_chatFull.full_chat.emojiset);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoDidLoad, tL_messages_chatFull.full_chat, Integer.valueOf(i), Boolean.FALSE, Boolean.TRUE);
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j3);
        if (dialog != null) {
            TLRPC.ChatFull chatFull2 = tL_messages_chatFull.full_chat;
            if ((chatFull2.flags & 2048) != 0) {
                int i3 = dialog.folder_id;
                int i4 = chatFull2.folder_id;
                if (i3 != i4) {
                    dialog.folder_id = i4;
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
            int i5 = dialog.ttl_period;
            int i6 = tL_messages_chatFull.full_chat.ttl_period;
            if (i5 != i6) {
                dialog.ttl_period = i6;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            boolean z = dialog.view_forum_as_messages;
            boolean z2 = tL_messages_chatFull.full_chat.view_forum_as_messages;
            if (z != z2) {
                dialog.view_forum_as_messages = z2;
                getMessagesStorage().setDialogViewThreadAsMessages(j2, tL_messages_chatFull.full_chat.view_forum_as_messages);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$62(TLRPC.TL_error tL_error, long j) {
        checkChannelError(tL_error.text, j);
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$63(final long j, final long j2, TLRPC.Chat chat, final int i, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda57
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullChat$62(tL_error, j2);
                }
            });
            return;
        }
        final TLRPC.TL_messages_chatFull tL_messages_chatFull = (TLRPC.TL_messages_chatFull) tLObject;
        getMessagesStorage().putUsersAndChats(tL_messages_chatFull.users, tL_messages_chatFull.chats, true, true);
        getMessagesStorage().updateChatInfo(tL_messages_chatFull.full_chat, false);
        getStoriesController().updateStoriesFromFullPeer(j, tL_messages_chatFull.full_chat.stories);
        ChatThemeController.getInstance(this.currentAccount).saveChatWallpaper(-j2, tL_messages_chatFull.full_chat.wallpaper);
        if (ChatObject.isChannel(chat)) {
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
            if (tL_messages_chatFull.full_chat.read_inbox_max_id > num.intValue()) {
                ArrayList<TLRPC.Update> arrayList = new ArrayList<>();
                TLRPC.TL_updateReadChannelInbox tL_updateReadChannelInbox = new TLRPC.TL_updateReadChannelInbox();
                tL_updateReadChannelInbox.channel_id = j2;
                TLRPC.ChatFull chatFull = tL_messages_chatFull.full_chat;
                tL_updateReadChannelInbox.max_id = chatFull.read_inbox_max_id;
                tL_updateReadChannelInbox.still_unread_count = chatFull.unread_count;
                arrayList.add(tL_updateReadChannelInbox);
                processUpdateArray(arrayList, null, null, false, 0);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
            if (tL_messages_chatFull.full_chat.read_outbox_max_id > num2.intValue()) {
                ArrayList<TLRPC.Update> arrayList2 = new ArrayList<>();
                TLRPC.TL_updateReadChannelOutbox tL_updateReadChannelOutbox = new TLRPC.TL_updateReadChannelOutbox();
                tL_updateReadChannelOutbox.channel_id = j2;
                tL_updateReadChannelOutbox.max_id = tL_messages_chatFull.full_chat.read_outbox_max_id;
                arrayList2.add(tL_updateReadChannelOutbox);
                processUpdateArray(arrayList2, null, null, false, 0);
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFullChat$61(j2, tL_messages_chatFull, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$64(TLRPC.UserFull userFull, TLRPC.User user, int i) {
        savePeerSettings(userFull.user.id, userFull.settings, false);
        applyDialogNotificationsSettings(user.id, 0L, userFull.notify_settings);
        TL_bots.BotInfo botInfo = userFull.bot_info;
        if (botInfo instanceof TL_bots.TL_botInfo) {
            botInfo.user_id = user.id;
            getMediaDataController().putBotInfo(user.id, userFull.bot_info);
        }
        int indexOfKey = this.blockePeers.indexOfKey(user.id);
        if (userFull.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(user.id, 1);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(user.id, userFull);
        getTranslateController().updateDialogFull(user.id);
        StarsController.getInstance(this.currentAccount).invalidateProfileGifts(userFull);
        this.loadingFullUsers.remove(Long.valueOf(user.id));
        this.loadedFullUsers.put(user.id, System.currentTimeMillis());
        String str = user.first_name + user.last_name + UserObject.getPublicUsername(user);
        ArrayList<TLRPC.User> arrayList = new ArrayList<>();
        arrayList.add(userFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
        if (!str.equals(userFull.user.first_name + userFull.user.last_name + UserObject.getPublicUsername(userFull.user))) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_NAME));
        }
        TLRPC.UserProfilePhoto userProfilePhoto = userFull.user.photo;
        if (userProfilePhoto != null && userProfilePhoto.has_video) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        }
        TL_bots.BotInfo botInfo2 = userFull.bot_info;
        if (botInfo2 instanceof TL_bots.TL_botInfo) {
            botInfo2.user_id = userFull.id;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.botInfoDidLoad, userFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(user.id), userFull);
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(user.id);
        if (dialog != null) {
            if ((userFull.flags & 2048) != 0) {
                int i2 = dialog.folder_id;
                int i3 = userFull.folder_id;
                if (i2 != i3) {
                    dialog.folder_id = i3;
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
            if ((userFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM) != 0) {
                int i4 = dialog.ttl_period;
                int i5 = userFull.ttl_period;
                if (i4 != i5) {
                    dialog.ttl_period = i5;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$65(TLRPC.User user) {
        this.loadingFullUsers.remove(Long.valueOf(user.id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$66(long j, Utilities.Callback callback, final TLRPC.User user, final int i, TLObject tLObject, TLRPC.TL_error tL_error) {
        Runnable runnable;
        if (tL_error == null) {
            TLRPC.TL_users_userFull tL_users_userFull = (TLRPC.TL_users_userFull) tLObject;
            final TLRPC.UserFull userFull = tL_users_userFull.full_user;
            putUsers(tL_users_userFull.users, false);
            putChats(tL_users_userFull.chats, false);
            TLRPC.UserFull userFull2 = tL_users_userFull.full_user;
            userFull2.user = getUser(Long.valueOf(userFull2.id));
            getMessagesStorage().updateUserInfo(userFull, false);
            getStoriesController().updateStoriesFromFullPeer(j, userFull.stories);
            ChatThemeController chatThemeController = ChatThemeController.getInstance(this.currentAccount);
            TLRPC.UserFull userFull3 = tL_users_userFull.full_user;
            chatThemeController.saveChatWallpaper(userFull3.id, userFull3.wallpaper);
            if (callback != null) {
                callback.run(userFull);
            }
            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda354
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullUser$64(userFull, user, i);
                }
            };
        } else {
            runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda355
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullUser$65(user);
                }
            };
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:12:0x009b  */
    /* JADX WARN: Removed duplicated region for block: B:15:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$189(TLObject tLObject, int i) {
        int i2;
        String str;
        if (tLObject == null) {
            return;
        }
        this.loadingNotificationSettings--;
        TLRPC.TL_peerNotifySettings tL_peerNotifySettings = (TLRPC.TL_peerNotifySettings) tLObject;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        int i3 = tL_peerNotifySettings.flags & 1;
        if (i == 0) {
            if (i3 != 0) {
                edit.putBoolean("EnablePreviewGroup", tL_peerNotifySettings.show_previews);
            }
            if ((tL_peerNotifySettings.flags & 4) != 0) {
                i2 = tL_peerNotifySettings.mute_until;
                str = "EnableGroup2";
                edit.putInt(str, i2);
            }
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_peerNotifySettings.android_sound, edit, 0L, 0L, i, false);
            edit.apply();
            if (this.loadingNotificationSettings != 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
                return;
            }
            return;
        }
        if (i == 1) {
            if (i3 != 0) {
                edit.putBoolean("EnablePreviewAll", tL_peerNotifySettings.show_previews);
            }
            if ((tL_peerNotifySettings.flags & 64) != 0) {
                edit.putBoolean("EnableAllStories", !tL_peerNotifySettings.stories_muted);
            }
            if ((tL_peerNotifySettings.flags & 128) != 0) {
                edit.putBoolean("EnableHideStoriesSenders", tL_peerNotifySettings.stories_hide_sender);
            }
            if ((tL_peerNotifySettings.flags & 4) != 0) {
                edit.putInt("EnableAll2", tL_peerNotifySettings.mute_until);
            }
            if ((tL_peerNotifySettings.flags & 64) != 0) {
                edit.putBoolean("EnableAllStories", !tL_peerNotifySettings.stories_muted);
            }
        } else {
            if (i3 != 0) {
                edit.putBoolean("EnablePreviewChannel", tL_peerNotifySettings.show_previews);
            }
            if ((tL_peerNotifySettings.flags & 4) != 0) {
                i2 = tL_peerNotifySettings.mute_until;
                str = "EnableChannel2";
                edit.putInt(str, i2);
            }
        }
        getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_peerNotifySettings.android_sound, edit, 0L, 0L, i, false);
        edit.apply();
        if (this.loadingNotificationSettings != 0) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$190(final int i, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda79
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadGlobalNotificationsSettings$189(tLObject, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$191(TLObject tLObject) {
        this.loadingNotificationSettings--;
        if (tLObject instanceof TLRPC.TL_reactionsNotifySettings) {
            TLRPC.TL_reactionsNotifySettings tL_reactionsNotifySettings = (TLRPC.TL_reactionsNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putBoolean("EnableReactionsMessages", tL_reactionsNotifySettings.messages_notify_from != null);
            TLRPC.ReactionNotificationsFrom reactionNotificationsFrom = tL_reactionsNotifySettings.messages_notify_from;
            if (reactionNotificationsFrom != null) {
                edit.putBoolean("EnableReactionsMessagesContacts", reactionNotificationsFrom instanceof TLRPC.TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsStories", tL_reactionsNotifySettings.stories_notify_from != null);
            TLRPC.ReactionNotificationsFrom reactionNotificationsFrom2 = tL_reactionsNotifySettings.stories_notify_from;
            if (reactionNotificationsFrom2 != null) {
                edit.putBoolean("EnableReactionsStoriesContacts", reactionNotificationsFrom2 instanceof TLRPC.TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsPreview", tL_reactionsNotifySettings.show_previews);
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_reactionsNotifySettings.sound, edit, 0L, 0L, 4, false);
            edit.apply();
        }
        if (this.loadingNotificationSettings == 0) {
            getUserConfig().notificationsSettingsLoaded = true;
            getUserConfig().saveConfig(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$192(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda169
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadGlobalNotificationsSettings$191(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadHintDialogs$184(TLObject tLObject) {
        TLRPC.TL_help_recentMeUrls tL_help_recentMeUrls = (TLRPC.TL_help_recentMeUrls) tLObject;
        putUsers(tL_help_recentMeUrls.users, false);
        putChats(tL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tL_help_recentMeUrls.urls);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadHintDialogs$185(final TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda190
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadHintDialogs$184(tLObject);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$166(long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
            if (messages_messages instanceof TLRPC.TL_messages_messagesNotModified) {
                return;
            }
            processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i2, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
            return;
        }
        if (tL_error == null || !"SHORTCUT_INVALID".equals(tL_error.text)) {
            return;
        }
        processLoadedMessages(new TLRPC.TL_messages_messages(), 0, j, j2, i, i2, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$167(int i, TLRPC.TL_messages_getSavedHistory tL_messages_getSavedHistory, TLRPC.TL_error tL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tL_messages_getSavedHistory, tL_error);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$168(long j, int i, int i2, int i3, long j2, final int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC.TL_messages_getSavedHistory tL_messages_getSavedHistory, TLObject tLObject, final TLRPC.TL_error tL_error) {
        int i13;
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda264
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadMessagesInternal$167(i4, tL_messages_getSavedHistory, tL_error);
                }
            });
            return;
        }
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        removeDeletedMessagesFromArray(j, messages_messages.messages);
        if (messages_messages.messages.size() > i) {
            messages_messages.messages.remove(0);
        }
        if (i3 == 0 || messages_messages.messages.isEmpty()) {
            i13 = i2;
        } else {
            int i14 = messages_messages.messages.get(r0.size() - 1).id;
            int size = messages_messages.messages.size() - 1;
            while (true) {
                if (size < 0) {
                    break;
                }
                TLRPC.Message message = messages_messages.messages.get(size);
                if (message.date > i3) {
                    i14 = message.id;
                    break;
                }
                size--;
            }
            i13 = i14;
        }
        processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$169(int i, TLRPC.TL_messages_getReplies tL_messages_getReplies, TLRPC.TL_error tL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tL_messages_getReplies, tL_error);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$170(int i, int i2, int i3, int i4, int i5, long j, long j2, final int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC.TL_messages_getReplies tL_messages_getReplies, TLObject tLObject, final TLRPC.TL_error tL_error) {
        int i13;
        int i14;
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda166
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadMessagesInternal$169(i6, tL_messages_getReplies, tL_error);
                }
            });
            return;
        }
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        if (messages_messages.messages.size() > i) {
            messages_messages.messages.remove(0);
        }
        if (!messages_messages.messages.isEmpty()) {
            if (i3 != 0) {
                int i15 = messages_messages.messages.get(r0.size() - 1).id;
                int size = messages_messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC.Message message = messages_messages.messages.get(size);
                    if (message.date > i3) {
                        i15 = message.id;
                        break;
                    }
                    size--;
                }
                i13 = i15;
                i14 = 0;
                processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
            }
            if (i4 != 0) {
                if (i5 == 2 && i2 > 0) {
                    for (int size2 = messages_messages.messages.size() - 1; size2 >= 0; size2--) {
                        TLRPC.Message message2 = messages_messages.messages.get(size2);
                        int i16 = message2.id;
                        if (i16 > i4 && !message2.out) {
                            i13 = i2;
                            i14 = i16;
                            break;
                        }
                    }
                }
                i13 = i2;
                i14 = 0;
                processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
            }
        }
        i13 = i2;
        i14 = 0;
        processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$171(int i, int i2, long j, long j2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, TLObject tLObject, TLRPC.TL_error tL_error) {
        int i13;
        if (tLObject != null) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
            if (messages_messages instanceof TLRPC.TL_messages_messagesNotModified) {
                return;
            }
            if (i2 == 0 || messages_messages.messages.isEmpty()) {
                i13 = i;
            } else {
                int i14 = messages_messages.messages.get(r0.size() - 1).id;
                int size = messages_messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC.Message message = messages_messages.messages.get(size);
                    if (message.date > i2) {
                        i14 = message.id;
                        break;
                    }
                    size--;
                }
                i13 = i14;
            }
            processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i3, i13, i2, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$172(int i, TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs, TLRPC.TL_error tL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tL_messages_getPeerDialogs, tL_error);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$173(long j, long j2, boolean z, int i, int i2, int i3, int i4, final int i5, int i6, long j3, int i7, int i8, int i9, boolean z2, boolean z3, boolean z4, final TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda82
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadMessagesInternal$172(i5, tL_messages_getPeerDialogs, tL_error);
                }
            });
            return;
        }
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
        if (!tL_messages_peerDialogs.dialogs.isEmpty()) {
            TLRPC.Dialog dialog = tL_messages_peerDialogs.dialogs.get(0);
            if (dialog.top_message != 0) {
                TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
                tL_messages_dialogs.chats = tL_messages_peerDialogs.chats;
                tL_messages_dialogs.users = tL_messages_peerDialogs.users;
                tL_messages_dialogs.dialogs = tL_messages_peerDialogs.dialogs;
                tL_messages_dialogs.messages = tL_messages_peerDialogs.messages;
                getMessagesStorage().putDialogs(tL_messages_dialogs, 2);
            }
            loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, dialog.top_message, 0, j3, i7, i8, dialog.unread_count, i9, z2, dialog.unread_mentions_count, false, z3, z4, null, 0L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$174(int i, TLRPC.TL_messages_getHistory tL_messages_getHistory, TLRPC.TL_error tL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tL_messages_getHistory, tL_error);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$175(long j, int i, int i2, int i3, long j2, final int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC.TL_messages_getHistory tL_messages_getHistory, TLObject tLObject, final TLRPC.TL_error tL_error) {
        int i13;
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda63
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadMessagesInternal$174(i4, tL_messages_getHistory, tL_error);
                }
            });
            return;
        }
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        removeDeletedMessagesFromArray(j, messages_messages.messages);
        if (messages_messages.messages.size() > i) {
            messages_messages.messages.remove(0);
        }
        if (i3 == 0 || messages_messages.messages.isEmpty()) {
            i13 = i2;
        } else {
            int i14 = messages_messages.messages.get(r0.size() - 1).id;
            int size = messages_messages.messages.size() - 1;
            while (true) {
                if (size < 0) {
                    break;
                }
                TLRPC.Message message = messages_messages.messages.get(size);
                if (message.date > i3) {
                    i14 = message.id;
                    break;
                }
                size--;
            }
            i13 = i14;
        }
        processLoadedMessages(messages_messages, messages_messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPeerSettings$73(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            TLRPC.TL_messages_peerSettings tL_messages_peerSettings = (TLRPC.TL_messages_peerSettings) tLObject;
            TLRPC.PeerSettings peerSettings = tL_messages_peerSettings.settings;
            putUsers(tL_messages_peerSettings.users, false);
            putChats(tL_messages_peerSettings.chats, false);
            savePeerSettings(j, peerSettings, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPeerSettings$74(final long j, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda335
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPeerSettings$73(j, tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPinnedDialogs$343(int i, ArrayList arrayList, boolean z, TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC.TL_messages_dialogs tL_messages_dialogs) {
        boolean z2;
        boolean z3;
        boolean z4;
        ArrayList<Integer> arrayList2;
        ArrayList arrayList3;
        this.loadingPinnedDialogs.delete(i);
        applyDialogsNotificationsSettings(arrayList);
        ArrayList<TLRPC.Dialog> dialogs = getDialogs(i);
        int i2 = z ? 1 : 0;
        int i3 = 0;
        int i4 = 0;
        boolean z5 = false;
        while (true) {
            z2 = true;
            if (i3 >= dialogs.size()) {
                break;
            }
            TLRPC.Dialog dialog = dialogs.get(i3);
            if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                if (!DialogObject.isEncryptedDialog(dialog.id)) {
                    if (!dialog.pinned) {
                        if (dialog.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        i4 = Math.max(dialog.pinnedNum, i4);
                        dialog.pinned = false;
                        dialog.pinnedNum = 0;
                        i2++;
                        z5 = true;
                    }
                } else {
                    if (i2 < arrayList.size()) {
                        arrayList.add(i2, dialog);
                    } else {
                        arrayList.add(dialog);
                    }
                    i2++;
                }
            }
            i3++;
        }
        ArrayList<Long> arrayList4 = new ArrayList<>();
        if (arrayList.isEmpty()) {
            z3 = false;
        } else {
            putUsers(tL_messages_peerDialogs.users, false);
            putChats(tL_messages_peerDialogs.chats, false);
            ArrayList<Long> arrayList5 = new ArrayList<>();
            ArrayList<Integer> arrayList6 = new ArrayList<>();
            int size = arrayList.size();
            int i5 = 0;
            z3 = false;
            while (i5 < size) {
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) arrayList.get(i5);
                dialog2.pinnedNum = (size - i5) + i4;
                arrayList4.add(Long.valueOf(dialog2.id));
                TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.get(dialog2.id);
                if (dialog3 != null) {
                    dialog3.pinned = z2;
                    dialog3.pinnedNum = dialog2.pinnedNum;
                    arrayList5.add(Long.valueOf(dialog2.id));
                    arrayList6.add(Integer.valueOf(dialog2.pinnedNum));
                    arrayList2 = arrayList6;
                } else {
                    this.dialogs_dict.put(dialog2.id, dialog2);
                    ArrayList arrayList7 = (ArrayList) longSparseArray.get(dialog2.id);
                    arrayList2 = arrayList6;
                    this.dialogMessage.put(dialog2.id, arrayList7);
                    if (arrayList7 != null) {
                        int i6 = 0;
                        while (i6 < arrayList7.size()) {
                            MessageObject messageObject = (MessageObject) arrayList7.get(i6);
                            if (messageObject != null) {
                                arrayList3 = arrayList7;
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                    this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                                    long j = messageObject.messageOwner.random_id;
                                    if (j != 0) {
                                        this.dialogMessagesByRandomIds.put(j, messageObject);
                                    }
                                }
                            } else {
                                arrayList3 = arrayList7;
                            }
                            i6++;
                            arrayList7 = arrayList3;
                        }
                    }
                    getTranslateController().checkDialogMessage(dialog2.id);
                    z3 = true;
                }
                i5++;
                arrayList6 = arrayList2;
                z5 = true;
                z2 = true;
            }
            getMessagesStorage().setDialogsPinned(arrayList5, arrayList6);
        }
        if (z5) {
            if (z3) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    TLRPC.Dialog dialog4 = (TLRPC.Dialog) this.dialogs_dict.valueAt(i7);
                    if (this.deletingDialogs.indexOfKey(dialog4.id) < 0) {
                        this.allDialogs.add(dialog4);
                    }
                }
            }
            sortDialogs(null);
            z4 = false;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            z4 = false;
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList4, i);
        getMessagesStorage().putDialogs(tL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i, true);
        getUserConfig().saveConfig(z4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPinnedDialogs$344(final int i, final ArrayList arrayList, final boolean z, final TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs, final LongSparseArray longSparseArray, final TLRPC.TL_messages_dialogs tL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPinnedDialogs$343(i, arrayList, z, tL_messages_peerDialogs, longSparseArray, tL_messages_dialogs);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:21:0x009f, code lost:
    
        if (r9.left != false) goto L21;
     */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x00a1, code lost:
    
        r16 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x00b4, code lost:
    
        if (r9.migrated_to != null) goto L21;
     */
    /* JADX WARN: Removed duplicated region for block: B:27:0x00db  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPinnedDialogs$345(final int i, TLObject tLObject, TLRPC.TL_error tL_error) {
        TLRPC.Chat chat;
        ArrayList arrayList;
        TLRPC.Message message;
        int i2;
        TLRPC.Chat chat2;
        int i3;
        ArrayList arrayList2;
        if (tLObject != null) {
            final TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            final ArrayList arrayList3 = new ArrayList(tL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tL_messages_peerDialogs);
            final TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
            tL_messages_dialogs.users.addAll(tL_messages_peerDialogs.users);
            tL_messages_dialogs.chats.addAll(tL_messages_peerDialogs.chats);
            tL_messages_dialogs.dialogs.addAll(tL_messages_peerDialogs.dialogs);
            tL_messages_dialogs.messages.addAll(tL_messages_peerDialogs.messages);
            final LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i4 = 0; i4 < tL_messages_peerDialogs.users.size(); i4++) {
                TLRPC.User user = tL_messages_peerDialogs.users.get(i4);
                longSparseArray2.put(user.id, user);
            }
            for (int i5 = 0; i5 < tL_messages_peerDialogs.chats.size(); i5++) {
                TLRPC.Chat chat3 = tL_messages_peerDialogs.chats.get(i5);
                longSparseArray3.put(chat3.id, chat3);
            }
            ArrayList arrayList4 = new ArrayList();
            int i6 = 0;
            while (i6 < tL_messages_peerDialogs.messages.size()) {
                TLRPC.Message message2 = tL_messages_peerDialogs.messages.get(i6);
                TLRPC.Peer peer = message2.peer_id;
                long j = peer.channel_id;
                if (j != 0) {
                    TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray3.get(j);
                    if (chat4 != null) {
                    }
                    i3 = i6;
                    MessageObject messageObject = new MessageObject(this.currentAccount, message2, longSparseArray2, longSparseArray3, false, false);
                    arrayList4.add(messageObject);
                    long dialogId = messageObject.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(messageObject);
                    longSparseArray.put(dialogId, arrayList2);
                } else {
                    long j2 = peer.chat_id;
                    if (j2 != 0) {
                        TLRPC.Chat chat5 = (TLRPC.Chat) longSparseArray3.get(j2);
                        if (chat5 != null) {
                        }
                    }
                    i3 = i6;
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, message2, longSparseArray2, longSparseArray3, false, false);
                    arrayList4.add(messageObject2);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId2);
                    if (arrayList2 == null) {
                    }
                    arrayList2.add(messageObject2);
                    longSparseArray.put(dialogId2, arrayList2);
                }
                i6 = i3 + 1;
            }
            final boolean z = !arrayList3.isEmpty() && (arrayList3.get(0) instanceof TLRPC.TL_dialogFolder);
            int size = arrayList3.size();
            for (int i7 = 0; i7 < size; i7++) {
                TLRPC.Dialog dialog = (TLRPC.Dialog) arrayList3.get(i7);
                dialog.pinned = true;
                DialogObject.initDialog(dialog);
                if (!DialogObject.isChannel(dialog) ? !DialogObject.isChatDialog(dialog.id) || (chat = (TLRPC.Chat) longSparseArray3.get(-dialog.id)) == null || chat.migrated_to == null : (chat2 = (TLRPC.Chat) longSparseArray3.get(-dialog.id)) == null || !chat2.left) {
                    if (dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray.get(dialog.id)) != null) {
                        int i8 = Integer.MIN_VALUE;
                        for (int i9 = 0; i9 < arrayList.size(); i9++) {
                            MessageObject messageObject3 = (MessageObject) arrayList.get(i9);
                            if (messageObject3 != null && (message = messageObject3.messageOwner) != null && (i2 = message.date) > i8) {
                                i8 = i2;
                            }
                        }
                        if (i8 > Integer.MIN_VALUE) {
                            dialog.last_message_date = i8;
                        }
                    }
                    Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                    if (num == null) {
                        num = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                    Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                    if (num2 == null) {
                        num2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda233
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadPinnedDialogs$344(i, arrayList3, z, tL_messages_peerDialogs, longSparseArray, tL_messages_dialogs);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$23() {
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.TRUE);
            this.onLoadedRemoteFilters = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$24() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$25() {
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.TRUE);
            this.onLoadedRemoteFilters = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$26() {
        this.loadingRemoteFilters = false;
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.FALSE);
            this.onLoadedRemoteFilters = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$27(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.Vector) {
            ArrayList<TLRPC.DialogFilter> arrayList = new ArrayList<>();
            TLRPC.Vector vector = (TLRPC.Vector) tLObject;
            for (int i = 0; i < vector.objects.size(); i++) {
                arrayList.add((TLRPC.DialogFilter) vector.objects.get(i));
            }
            getMessagesStorage().checkLoadedRemoteFilters(arrayList, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda369
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$23();
                }
            });
            return;
        }
        if (!(tLObject instanceof TLRPC.TL_messages_dialogFilters)) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda372
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$26();
                }
            });
            return;
        }
        TLRPC.TL_messages_dialogFilters tL_messages_dialogFilters = (TLRPC.TL_messages_dialogFilters) tLObject;
        boolean z = this.folderTags;
        boolean z2 = tL_messages_dialogFilters.tags_enabled;
        if (z != z2) {
            setFolderTags(z2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda370
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$24();
                }
            });
        }
        getMessagesStorage().checkLoadedRemoteFilters(tL_messages_dialogFilters.filters, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda371
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadRemoteFilters$25();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$195(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC.TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$196(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda356
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSignUpNotificationsSettings$195(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSuggestedFilters$21(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC.Vector) {
            TLRPC.Vector vector = (TLRPC.Vector) tLObject;
            int size = vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC.TL_dialogFilterSuggested) vector.objects.get(i));
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSuggestedFilters$22(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda382
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSuggestedFilters$21(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnknownChannel$308(long j, TLRPC.Chat chat, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            if (!tL_messages_peerDialogs.dialogs.isEmpty() && !tL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC.TL_dialog tL_dialog = (TLRPC.TL_dialog) tL_messages_peerDialogs.dialogs.get(0);
                TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
                tL_messages_dialogs.dialogs.addAll(tL_messages_peerDialogs.dialogs);
                tL_messages_dialogs.messages.addAll(tL_messages_peerDialogs.messages);
                tL_messages_dialogs.users.addAll(tL_messages_peerDialogs.users);
                tL_messages_dialogs.chats.addAll(tL_messages_peerDialogs.chats);
                processLoadedDialogs(tL_messages_dialogs, null, null, tL_dialog.folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(chat.id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnknownDialog$197(long j, long j2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            if (!tL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC.TL_dialog tL_dialog = (TLRPC.TL_dialog) tL_messages_peerDialogs.dialogs.get(0);
                TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
                tL_messages_dialogs.dialogs.addAll(tL_messages_peerDialogs.dialogs);
                tL_messages_dialogs.messages.addAll(tL_messages_peerDialogs.messages);
                tL_messages_dialogs.users.addAll(tL_messages_peerDialogs.users);
                tL_messages_dialogs.chats.addAll(tL_messages_peerDialogs.chats);
                processLoadedDialogs(tL_messages_dialogs, null, null, tL_dialog.folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadDialogs$339(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC.Vector vector = (TLRPC.Vector) tLObject;
            int size = vector.objects.size();
            for (int i = 0; i < size; i++) {
                TLRPC.DialogPeer dialogPeer = (TLRPC.DialogPeer) vector.objects.get(i);
                if (dialogPeer instanceof TLRPC.TL_dialogPeer) {
                    TLRPC.Peer peer = ((TLRPC.TL_dialogPeer) dialogPeer).peer;
                    long j = peer.user_id;
                    if (j == 0) {
                        long j2 = peer.chat_id;
                        j = j2 != 0 ? -j2 : -peer.channel_id;
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
                    if (dialog != null && !dialog.unread_mark) {
                        dialog.unread_mark = true;
                        if (dialog.unread_count == 0 && !isDialogMuted(j, 0L)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            this.loadingUnreadDialogs = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadDialogs$340(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda242
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadUnreadDialogs$339(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$loadUsersPremiumLocked$273(TLObject tLObject, ArrayList arrayList, Utilities.Callback callback) {
        ArrayList arrayList2 = new ArrayList();
        if (tLObject instanceof TLRPC.Vector) {
            TLRPC.Vector vector = (TLRPC.Vector) tLObject;
            for (int i = 0; i < vector.objects.size(); i++) {
                if (i < arrayList.size() && (vector.objects.get(i) instanceof TLRPC.TL_boolTrue)) {
                    arrayList2.add(Long.valueOf(((TLRPC.User) arrayList.get(i)).id));
                }
            }
        }
        callback.run(arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$loadUsersPremiumLocked$274(final ArrayList arrayList, final Utilities.Callback callback, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$loadUsersPremiumLocked$273(TLObject.this, arrayList, callback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$logDeviceStats$28(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markAllTopicsAsRead$6() {
        getMessagesController().sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markAllTopicsAsRead$7() {
        getMessagesStorage().resetAllUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda432
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$6();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markAllTopicsAsRead$8(ArrayList arrayList, long j) {
        if (arrayList != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC.TL_forumTopic tL_forumTopic = (TLRPC.TL_forumTopic) arrayList.get(i);
                MessagesController messagesController = getMessagesController();
                int i2 = tL_forumTopic.top_message;
                TLRPC.Message message = tL_forumTopic.topMessage;
                messagesController.markDialogAsRead(j, i2, 0, message != null ? message.date : 0, false, tL_forumTopic.id, 0, true, 0);
                getMessagesStorage().updateRepliesMaxReadId(-j, tL_forumTopic.id, tL_forumTopic.top_message, 0, true);
            }
        }
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda375
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$7();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markAllTopicsAsRead$9(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda130
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$8(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$231(long j, int i, int i2, boolean z) {
        LongSparseIntArray longSparseIntArray;
        int i3;
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog != null) {
            int i4 = dialog.unread_count;
            if (i == 0 || i2 >= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i, 0);
                dialog.unread_count = max;
                if (i2 != Integer.MIN_VALUE && max > (i3 = dialog.top_message - i2)) {
                    dialog.unread_count = i3;
                }
            }
            boolean z2 = dialog.unread_mark;
            if (z2) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            if ((i4 != 0 || z2) && dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs--;
                }
                int i5 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i5 < dialogFilterArr.length) {
                        DialogFilter dialogFilter = dialogFilterArr[i5];
                        if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i5++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        NotificationsController notificationsController = getNotificationsController();
        if (z) {
            notificationsController.processReadMessages(null, j, 0, i2, true);
            longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j, -1);
        } else {
            notificationsController.processReadMessages(null, j, 0, i2, false);
            longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j, 0);
        }
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$232(final long j, final int i, final int i2, final boolean z) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda338
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$231(j, i, i2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$233(long j, int i, boolean z, int i2, int i3) {
        int i4;
        getNotificationsController().processReadMessages(null, j, i, 0, z);
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog != null) {
            int i5 = dialog.unread_count;
            if (i2 == 0 || i3 <= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                int max = Math.max(i5 - i2, 0);
                dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE && max > (i4 = i3 - dialog.top_message)) {
                    dialog.unread_count = i4;
                }
            }
            boolean z2 = dialog.unread_mark;
            if (z2) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            if ((i5 != 0 || z2) && dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        DialogFilter dialogFilter = dialogFilterArr[i6];
                        if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
        longSparseIntArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$234(final long j, final int i, final boolean z, final int i2, final int i3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda477
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$233(j, i, z, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$235(long j, long j2, boolean z, int i, int i2) {
        Object obj;
        ArrayList<ReadTask> arrayList;
        if (j != 0) {
            obj = this.threadsReadTasksMap.get(j2 + "_" + j);
        } else {
            obj = this.readTasksMap.get(j2);
        }
        ReadTask readTask = (ReadTask) obj;
        if (readTask == null) {
            readTask = new ReadTask(null);
            readTask.dialogId = j2;
            readTask.replyId = j;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                if (j != 0) {
                    this.threadsReadTasksMap.put(j2 + "_" + j, readTask);
                    arrayList = this.repliesReadTasks;
                } else {
                    this.readTasksMap.put(j2, readTask);
                    arrayList = this.readTasks;
                }
                arrayList.add(readTask);
            }
        }
        readTask.maxDate = i;
        readTask.maxId = i2;
        if (z) {
            completeReadTask(readTask);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsReadNow$229(long j, long j2) {
        if (j == 0) {
            ReadTask readTask = (ReadTask) this.readTasksMap.get(j2);
            if (readTask == null) {
                return;
            }
            completeReadTask(readTask);
            this.readTasks.remove(readTask);
            this.readTasksMap.remove(j2);
            return;
        }
        String str = j2 + "_" + j;
        ReadTask readTask2 = this.threadsReadTasksMap.get(str);
        if (readTask2 == null) {
            return;
        }
        completeReadTask(readTask2);
        this.repliesReadTasks.remove(readTask2);
        this.threadsReadTasksMap.remove(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsUnread$338(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMentionMessageAsRead$222(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$223(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tL_messages_affectedMessages.pts, -1, tL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMentionsAsRead$230(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsRead2$224(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsRead2$225(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tL_messages_affectedMessages.pts, -1, tL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMessageContentAsRead$220(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageContentAsRead$221(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.TL_messages_affectedMessages tL_messages_affectedMessages = (TLRPC.TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tL_messages_affectedMessages.pts, -1, tL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markReactionsAsRead$392(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$202() {
        this.migratingDialogs = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:105:0x0360 A[Catch: Exception -> 0x0064, TryCatch #0 {Exception -> 0x0064, blocks: (B:3:0x0006, B:4:0x001e, B:7:0x002a, B:9:0x0036, B:11:0x0069, B:14:0x0070, B:18:0x0072, B:20:0x0076, B:21:0x00a3, B:23:0x00ae, B:24:0x00fe, B:25:0x0111, B:27:0x0119, B:29:0x012a, B:31:0x012f, B:34:0x013c, B:35:0x015c, B:37:0x0162, B:39:0x0173, B:41:0x0179, B:42:0x017f, B:44:0x0187, B:47:0x01aa, B:48:0x0199, B:51:0x01a6, B:55:0x01ac, B:58:0x01b0, B:60:0x01b7, B:61:0x01d1, B:63:0x01e8, B:64:0x01f4, B:67:0x01fe, B:73:0x0210, B:75:0x025c, B:77:0x0266, B:79:0x0296, B:81:0x02ae, B:84:0x02be, B:91:0x02d1, B:97:0x02e0, B:99:0x031e, B:101:0x0322, B:103:0x034b, B:105:0x0360, B:106:0x0377, B:108:0x037f, B:112:0x0393, B:113:0x0397, B:114:0x041e, B:110:0x039b, B:115:0x0424, B:121:0x039e, B:123:0x03a4, B:124:0x03bb, B:126:0x03c3, B:130:0x03d7, B:128:0x03dc, B:132:0x03df, B:134:0x03e5, B:135:0x03fc, B:137:0x0404, B:141:0x0418, B:139:0x0421, B:145:0x00b3, B:147:0x00b7, B:150:0x00bf), top: B:2:0x0006 }] */
    /* JADX WARN: Removed duplicated region for block: B:121:0x039e A[Catch: Exception -> 0x0064, TryCatch #0 {Exception -> 0x0064, blocks: (B:3:0x0006, B:4:0x001e, B:7:0x002a, B:9:0x0036, B:11:0x0069, B:14:0x0070, B:18:0x0072, B:20:0x0076, B:21:0x00a3, B:23:0x00ae, B:24:0x00fe, B:25:0x0111, B:27:0x0119, B:29:0x012a, B:31:0x012f, B:34:0x013c, B:35:0x015c, B:37:0x0162, B:39:0x0173, B:41:0x0179, B:42:0x017f, B:44:0x0187, B:47:0x01aa, B:48:0x0199, B:51:0x01a6, B:55:0x01ac, B:58:0x01b0, B:60:0x01b7, B:61:0x01d1, B:63:0x01e8, B:64:0x01f4, B:67:0x01fe, B:73:0x0210, B:75:0x025c, B:77:0x0266, B:79:0x0296, B:81:0x02ae, B:84:0x02be, B:91:0x02d1, B:97:0x02e0, B:99:0x031e, B:101:0x0322, B:103:0x034b, B:105:0x0360, B:106:0x0377, B:108:0x037f, B:112:0x0393, B:113:0x0397, B:114:0x041e, B:110:0x039b, B:115:0x0424, B:121:0x039e, B:123:0x03a4, B:124:0x03bb, B:126:0x03c3, B:130:0x03d7, B:128:0x03dc, B:132:0x03df, B:134:0x03e5, B:135:0x03fc, B:137:0x0404, B:141:0x0418, B:139:0x0421, B:145:0x00b3, B:147:0x00b7, B:150:0x00bf), top: B:2:0x0006 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$migrateDialogs$203(TLRPC.messages_Dialogs messages_dialogs, int i) {
        TLRPC.Message message;
        int i2;
        SQLiteCursor sQLiteCursor;
        TLRPC.Message message2;
        TLRPC.Peer peer;
        UserConfig userConfig;
        long j;
        TLRPC.Chat chat;
        SQLiteCursor sQLiteCursor2;
        LongSparseArray longSparseArray;
        int i3;
        LongSparseArray longSparseArray2;
        int i4;
        int i5 = i;
        try {
            getUserConfig().setTotalDialogsCount(0, getUserConfig().getTotalDialogsCount(0) + messages_dialogs.dialogs.size());
            TLRPC.Message message3 = null;
            for (int i6 = 0; i6 < messages_dialogs.messages.size(); i6++) {
                TLRPC.Message message4 = messages_dialogs.messages.get(i6);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("search migrate id " + message4.id + " date " + LocaleController.getInstance().getFormatterStats().format(message4.date * 1000));
                }
                if (message3 == null || message4.date < message3.date) {
                    message3 = message4;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate step with id " + message3.id + " date " + LocaleController.getInstance().getFormatterStats().format(message3.date * 1000));
            }
            int i7 = 2;
            if (messages_dialogs.dialogs.size() >= 100) {
                i2 = message3.id;
                message = message3;
            } else {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("migrate stop due to not 100 dialogs");
                }
                int i8 = 0;
                while (i8 < 2) {
                    getUserConfig().setDialogsLoadOffset(i8, ConnectionsManager.DEFAULT_DATACENTER_ID, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                    i8++;
                    message3 = message3;
                }
                message = message3;
                i2 = -1;
            }
            StringBuilder sb = new StringBuilder(messages_dialogs.dialogs.size() * 12);
            LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i9 = 0; i9 < messages_dialogs.dialogs.size(); i9++) {
                TLRPC.Dialog dialog = messages_dialogs.dialogs.get(i9);
                DialogObject.initDialog(dialog);
                if (sb.length() > 0) {
                    sb.append(",");
                }
                sb.append(dialog.id);
                longSparseArray3.put(dialog.id, dialog);
            }
            int i10 = 0;
            SQLiteCursor queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN (%s)", sb.toString()), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(i10);
                int intValue = queryFinalized.intValue(1);
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) longSparseArray3.get(longValue);
                if (dialog2 != null) {
                    if (dialog2.folder_id == intValue) {
                        messages_dialogs.dialogs.remove(dialog2);
                        int i11 = 0;
                        while (true) {
                            if (i11 >= messages_dialogs.messages.size()) {
                                break;
                            }
                            TLRPC.Message message5 = messages_dialogs.messages.get(i11);
                            if (MessageObject.getDialogId(message5) == longValue) {
                                messages_dialogs.messages.remove(i11);
                                i11--;
                                if (message5.id == dialog2.top_message) {
                                    dialog2.top_message = 0;
                                    break;
                                }
                            }
                            i11++;
                        }
                    } else {
                        i10 = 0;
                    }
                }
                longSparseArray3.remove(longValue);
                i10 = 0;
            }
            queryFinalized.dispose();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate found missing dialogs " + messages_dialogs.dialogs.size());
            }
            SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized("SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 NOT IN (536870912, 1073741824)", new Object[0]);
            if (queryFinalized2.next()) {
                int max = Math.max(1441062000, queryFinalized2.intValue(0));
                int i12 = 0;
                while (i12 < messages_dialogs.messages.size()) {
                    TLRPC.Message message6 = messages_dialogs.messages.get(i12);
                    if (message6.date < max) {
                        if (i5 != -1) {
                            int i13 = 0;
                            while (i13 < i7) {
                                getUserConfig().setDialogsLoadOffset(i13, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                i13++;
                                queryFinalized2 = queryFinalized2;
                                longSparseArray3 = longSparseArray3;
                                max = max;
                                i7 = 2;
                            }
                            sQLiteCursor2 = queryFinalized2;
                            longSparseArray2 = longSparseArray3;
                            int i14 = max;
                            if (BuildVars.LOGS_ENABLED) {
                                StringBuilder sb2 = new StringBuilder();
                                sb2.append("migrate stop due to reached loaded dialogs ");
                                i3 = i14;
                                sb2.append(LocaleController.getInstance().getFormatterStats().format(i3 * 1000));
                                FileLog.d(sb2.toString());
                            } else {
                                i3 = i14;
                            }
                            i4 = -1;
                        } else {
                            sQLiteCursor2 = queryFinalized2;
                            longSparseArray2 = longSparseArray3;
                            i3 = max;
                            i4 = i2;
                        }
                        messages_dialogs.messages.remove(i12);
                        i12--;
                        long dialogId = MessageObject.getDialogId(message6);
                        longSparseArray = longSparseArray2;
                        TLRPC.Dialog dialog3 = (TLRPC.Dialog) longSparseArray.get(dialogId);
                        longSparseArray.remove(dialogId);
                        if (dialog3 != null) {
                            messages_dialogs.dialogs.remove(dialog3);
                        }
                        i2 = i4;
                    } else {
                        sQLiteCursor2 = queryFinalized2;
                        int i15 = max;
                        longSparseArray = longSparseArray3;
                        i3 = i15;
                    }
                    i12++;
                    i5 = i;
                    queryFinalized2 = sQLiteCursor2;
                    i7 = 2;
                    LongSparseArray longSparseArray4 = longSparseArray;
                    max = i3;
                    longSparseArray3 = longSparseArray4;
                }
                sQLiteCursor = queryFinalized2;
                int i16 = max;
                if (message != null) {
                    message2 = message;
                    if (message2.date < i16 && i != -1) {
                        int i17 = 0;
                        for (int i18 = 2; i17 < i18; i18 = 2) {
                            getUserConfig().setDialogsLoadOffset(i17, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                            i17++;
                        }
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().getFormatterStats().format(i16 * 1000));
                        }
                        i2 = -1;
                    }
                    sQLiteCursor.dispose();
                    getUserConfig().migrateOffsetDate = message2.date;
                    peer = message2.peer_id;
                    if (peer.channel_id == 0) {
                        getUserConfig().migrateOffsetChannelId = message2.peer_id.channel_id;
                        getUserConfig().migrateOffsetChatId = 0L;
                        getUserConfig().migrateOffsetUserId = 0L;
                        for (int i19 = 0; i19 < messages_dialogs.chats.size(); i19++) {
                            chat = messages_dialogs.chats.get(i19);
                            if (chat.id == getUserConfig().migrateOffsetChannelId) {
                                userConfig = getUserConfig();
                                j = chat.access_hash;
                                userConfig.migrateOffsetAccess = j;
                                break;
                            }
                        }
                    } else if (peer.chat_id != 0) {
                        getUserConfig().migrateOffsetChatId = message2.peer_id.chat_id;
                        getUserConfig().migrateOffsetChannelId = 0L;
                        getUserConfig().migrateOffsetUserId = 0L;
                        for (int i20 = 0; i20 < messages_dialogs.chats.size(); i20++) {
                            chat = messages_dialogs.chats.get(i20);
                            if (chat.id == getUserConfig().migrateOffsetChatId) {
                                userConfig = getUserConfig();
                                j = chat.access_hash;
                                userConfig.migrateOffsetAccess = j;
                                break;
                            }
                        }
                    } else if (peer.user_id != 0) {
                        getUserConfig().migrateOffsetUserId = message2.peer_id.user_id;
                        getUserConfig().migrateOffsetChatId = 0L;
                        getUserConfig().migrateOffsetChannelId = 0L;
                        for (int i21 = 0; i21 < messages_dialogs.users.size(); i21++) {
                            TLRPC.User user = messages_dialogs.users.get(i21);
                            if (user.id == getUserConfig().migrateOffsetUserId) {
                                userConfig = getUserConfig();
                                j = user.access_hash;
                                userConfig.migrateOffsetAccess = j;
                                break;
                            }
                        }
                    }
                    processLoadedDialogs(messages_dialogs, null, null, 0, i2, 0, 0, false, true, false);
                }
            } else {
                sQLiteCursor = queryFinalized2;
            }
            message2 = message;
            sQLiteCursor.dispose();
            getUserConfig().migrateOffsetDate = message2.date;
            peer = message2.peer_id;
            if (peer.channel_id == 0) {
            }
            processLoadedDialogs(messages_dialogs, null, null, 0, i2, 0, 0, false, true, false);
        } catch (Exception e) {
            FileLog.e(e);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda143
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$202();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$204() {
        this.migratingDialogs = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$205(final int i, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$204();
                }
            });
        } else {
            final TLRPC.messages_Dialogs messages_dialogs = (TLRPC.messages_Dialogs) tLObject;
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda283
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$203(messages_dialogs, i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        getUserConfig().checkSavedPassword();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$new$10(TLRPC.Dialog dialog, TLRPC.Dialog dialog2) {
        DialogFilter dialogFilter = this.sortingDialogFilter;
        int i = dialogFilter == null ? Integer.MIN_VALUE : dialogFilter.pinnedDialogs.get(dialog.id, Integer.MIN_VALUE);
        DialogFilter dialogFilter2 = this.sortingDialogFilter;
        int i2 = dialogFilter2 == null ? Integer.MIN_VALUE : dialogFilter2.pinnedDialogs.get(dialog2.id, Integer.MIN_VALUE);
        boolean z = dialog instanceof TLRPC.TL_dialogFolder;
        if (z && !(dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return -1;
        }
        if (!z && (dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return 1;
        }
        if (i == Integer.MIN_VALUE && i2 != Integer.MIN_VALUE) {
            return 1;
        }
        if (i != Integer.MIN_VALUE && i2 == Integer.MIN_VALUE) {
            return -1;
        }
        if (i != Integer.MIN_VALUE) {
            if (i > i2) {
                return 1;
            }
            return i < i2 ? -1 : 0;
        }
        MediaDataController mediaDataController = getMediaDataController();
        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(dialog, mediaDataController.getDraft(dialog.id, 0L));
        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(dialog2, mediaDataController.getDraft(dialog2.id, 0L));
        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
            return 1;
        }
        return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$new$11(TLRPC.Dialog dialog, TLRPC.Dialog dialog2) {
        boolean z = dialog instanceof TLRPC.TL_dialogFolder;
        if (z && !(dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return -1;
        }
        if (!z && (dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return 1;
        }
        boolean z2 = dialog.pinned;
        if (!z2 && dialog2.pinned) {
            return 1;
        }
        if (z2 && !dialog2.pinned) {
            return -1;
        }
        if (z2) {
            int i = dialog.pinnedNum;
            int i2 = dialog2.pinnedNum;
            if (i < i2) {
                return 1;
            }
            return i > i2 ? -1 : 0;
        }
        MediaDataController mediaDataController = getMediaDataController();
        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(dialog, mediaDataController.getDraft(dialog.id, 0L));
        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(dialog2, mediaDataController.getDraft(dialog2.id, 0L));
        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
            return 1;
        }
        return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$new$12(TLRPC.Update update, TLRPC.Update update2) {
        int updateQts;
        int updateQts2;
        int updateType = getUpdateType(update);
        int updateType2 = getUpdateType(update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType != 0) {
            if (updateType == 1) {
                updateQts = getUpdateQts(update);
                updateQts2 = getUpdateQts(update2);
                return AndroidUtilities.compare(updateQts, updateQts2);
            }
            if (updateType != 2) {
                return 0;
            }
            long updateChannelId = getUpdateChannelId(update);
            long updateChannelId2 = getUpdateChannelId(update2);
            if (updateChannelId != updateChannelId2) {
                return AndroidUtilities.compare(updateChannelId, updateChannelId2);
            }
        }
        updateQts = getUpdatePts(update);
        updateQts2 = getUpdatePts(update2);
        return AndroidUtilities.compare(updateQts, updateQts2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$13() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadProgressChanged);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$14() {
        checkPeerColors(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$15() {
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$34() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateTranscriptionLock, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFolderEmpty$186(int i) {
        if (i != 1) {
            removeFolder(i);
        } else {
            this.hasArchivedChats = false;
            checkArchiveFolder();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openApp$451(boolean[] zArr) {
        zArr[0] = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openApp$452(BaseFragment baseFragment, Browser.Progress progress, boolean[] zArr, TLRPC.User user, String str, boolean z, boolean z2, TL_bots.BotInfo[] botInfoArr) {
        BaseFragment baseFragment2;
        WebViewRequestProps of;
        BotWebViewSheet botWebViewSheet;
        BaseFragment safeLastFragment = baseFragment != null ? baseFragment : LaunchActivity.getSafeLastFragment();
        if (safeLastFragment == null) {
            return;
        }
        if (progress != null) {
            progress.end();
        }
        if (zArr[0]) {
            return;
        }
        if (user.bot_has_main_app) {
            if (safeLastFragment.getParentLayout() instanceof ActionBarLayout) {
                safeLastFragment = ((ActionBarLayout) safeLastFragment.getParentLayout()).getSheetFragment();
            }
            BaseFragment baseFragment3 = safeLastFragment;
            AndroidUtilities.hideKeyboard(baseFragment3.getFragmentView());
            int i = this.currentAccount;
            long j = user.id;
            baseFragment2 = baseFragment3;
            of = WebViewRequestProps.of(i, j, j, null, null, 4, 0, false, null, false, str, user, 0, z, z2);
            LaunchActivity launchActivity = LaunchActivity.instance;
            if (launchActivity != null && launchActivity.getBottomSheetTabs() != null && LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(of) != null) {
                return;
            }
            botWebViewSheet = new BotWebViewSheet(baseFragment2.getContext(), baseFragment2.getResourceProvider());
            botWebViewSheet.setDefaultFullsize(true);
            botWebViewSheet.setNeedsContext(false);
        } else {
            TL_bots.BotInfo botInfo = botInfoArr[0];
            if (botInfo == null || !(botInfo.menu_button instanceof TL_bots.TL_botMenuButton)) {
                safeLastFragment.presentFragment(ChatActivity.of(user.id));
                return;
            }
            if (safeLastFragment.getParentLayout() instanceof ActionBarLayout) {
                safeLastFragment = ((ActionBarLayout) safeLastFragment.getParentLayout()).getSheetFragment();
            }
            BaseFragment baseFragment4 = safeLastFragment;
            TL_bots.TL_botMenuButton tL_botMenuButton = (TL_bots.TL_botMenuButton) botInfoArr[0].menu_button;
            AndroidUtilities.hideKeyboard(baseFragment4.getFragmentView());
            int i2 = this.currentAccount;
            long j2 = user.id;
            baseFragment2 = baseFragment4;
            of = WebViewRequestProps.of(i2, j2, j2, tL_botMenuButton.text, tL_botMenuButton.url, 2, 0, false, null, false, str, user, 0, z, z2);
            LaunchActivity launchActivity2 = LaunchActivity.instance;
            if (launchActivity2 != null && launchActivity2.getBottomSheetTabs() != null && LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(of) != null) {
                return;
            }
            botWebViewSheet = new BotWebViewSheet(baseFragment2.getContext(), baseFragment2.getResourceProvider());
            botWebViewSheet.setDefaultFullsize(false);
            botWebViewSheet.setNeedsContext(true);
        }
        botWebViewSheet.setParentActivity(baseFragment2.getParentActivity());
        botWebViewSheet.requestWebView(baseFragment2, of);
        botWebViewSheet.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openApp$453(boolean[] zArr, TL_bots.BotInfo[] botInfoArr, Runnable runnable, TLRPC.UserFull userFull) {
        if (zArr[0]) {
            return;
        }
        if (userFull != null) {
            botInfoArr[0] = userFull.bot_info;
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openApp$454(final boolean[] zArr, final TL_bots.BotInfo[] botInfoArr, TLRPC.User user, int i, final Runnable runnable, TL_bots.BotInfo botInfo) {
        if (zArr[0]) {
            return;
        }
        botInfoArr[0] = botInfo;
        if (botInfo == null) {
            TLRPC.UserFull userFull = getUserFull(user.id);
            if (userFull == null) {
                if (zArr[0]) {
                    return;
                }
                loadFullUser(user, i, true, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda184
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        MessagesController.lambda$openApp$453(zArr, botInfoArr, runnable, (TLRPC.UserFull) obj);
                    }
                });
                return;
            }
            botInfoArr[0] = userFull.bot_info;
        }
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openByUserName$409(Browser.Progress progress, AlertDialog[] alertDialogArr, BaseFragment baseFragment, boolean[] zArr, int i, Long l) {
        TLRPC.User user;
        TLRPC.Chat chat;
        boolean z;
        MessagesController messagesController;
        BaseFragment baseFragment2;
        int i2;
        try {
            if (progress != null) {
                progress.end();
            } else {
                alertDialogArr[0].dismiss();
            }
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog(null);
        if (zArr[0]) {
            return;
        }
        if (l == null) {
            if (baseFragment.getParentActivity() != null) {
                try {
                    if (baseFragment instanceof ChatActivity) {
                        ((ChatActivity) baseFragment).shakeContent();
                    }
                    BulletinFactory.of(baseFragment).createErrorBulletin(LocaleController.getString(R.string.NoUsernameFound)).show();
                    return;
                } catch (Exception e) {
                    FileLog.e(e);
                    return;
                }
            }
            return;
        }
        if (l.longValue() < 0) {
            chat = getChat(Long.valueOf(-l.longValue()));
            i2 = 1;
            z = false;
            user = null;
            messagesController = this;
            baseFragment2 = baseFragment;
        } else {
            user = getUser(l);
            chat = null;
            z = false;
            messagesController = this;
            baseFragment2 = baseFragment;
            i2 = i;
        }
        messagesController.openChatOrProfileWith(user, chat, baseFragment2, i2, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openByUserName$410(boolean[] zArr) {
        zArr[0] = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openByUserName$411(boolean[] zArr, DialogInterface dialogInterface) {
        zArr[0] = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openByUserName$412(AlertDialog[] alertDialogArr, final boolean[] zArr, BaseFragment baseFragment) {
        AlertDialog alertDialog = alertDialogArr[0];
        if (alertDialog == null) {
            return;
        }
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda358
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.lambda$openByUserName$411(zArr, dialogInterface);
            }
        });
        baseFragment.showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$performLogout$299(TLObject tLObject) {
        if (tLObject instanceof TLRPC.TL_auth_loggedOut) {
            TLRPC.TL_auth_loggedOut tL_auth_loggedOut = (TLRPC.TL_auth_loggedOut) tLObject;
            if (tL_auth_loggedOut.future_auth_token != null) {
                AuthTokensHelper.addLogOutToken(tL_auth_loggedOut);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performLogout$300(final TLObject tLObject, TLRPC.TL_error tL_error) {
        getConnectionsManager().cleanup(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda408
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$performLogout$299(TLObject.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$pinDialog$342(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$pinMessage$123(int i, TLRPC.Chat chat, TLRPC.User user, boolean z, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            ArrayList<Integer> arrayList = new ArrayList<>();
            arrayList.add(Integer.valueOf(i));
            getMessagesStorage().updatePinnedMessages(chat != null ? -chat.id : user.id, arrayList, !z, -1, 0, false, null);
            processUpdates((TLRPC.Updates) tLObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processChannelsUpdatesQueue$304(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(updates.pts, updates2.pts);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processChatInfo$141(boolean z, long j, boolean z2, boolean z3, TLRPC.ChatFull chatFull, ArrayList arrayList, ArrayList arrayList2, HashMap hashMap, int i, boolean z4) {
        if (z && j > 0 && !z2 && System.currentTimeMillis() - this.loadedFullChats.get(j, 0L) > 60000) {
            loadFullChat(j, 0, z3);
        }
        if (chatFull != null) {
            if (this.fullChats.get(j) == null) {
                this.fullChats.put(j, chatFull);
                getTranslateController().updateDialogFull(-j);
            }
            putUsers(arrayList, z);
            if (chatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(chatFull.stickerset);
            }
            if (chatFull.emojiset != null) {
                getMediaDataController().getGroupStickerSetById(chatFull.emojiset);
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoDidLoad, chatFull, 0, Boolean.valueOf(z2), Boolean.FALSE);
        }
        if (arrayList2 != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(-j), arrayList2, hashMap, Integer.valueOf(i), Boolean.valueOf(z4));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x02c8, code lost:
    
        if (r1 != false) goto L117;
     */
    /* JADX WARN: Code restructure failed: missing block: B:145:0x02f3, code lost:
    
        if (r7.size() == r14.size()) goto L167;
     */
    /* JADX WARN: Removed duplicated region for block: B:150:0x03b5  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00ed  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$217(TLRPC.messages_Dialogs messages_dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, boolean z, LongSparseIntArray longSparseIntArray) {
        long j;
        int i;
        boolean z2;
        String str;
        int i2;
        int i3 = 1;
        putUsers(messages_dialogs.users, true);
        putChats(messages_dialogs.chats, true);
        boolean isFeatureAvailable = getTranslateController().isFeatureAvailable();
        int i4 = 0;
        int i5 = 0;
        while (i5 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i5);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processDialogsUpdate " + keyAt);
            }
            TLRPC.Dialog dialog = (TLRPC.Dialog) longSparseArray.valueAt(i5);
            TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(keyAt);
            ArrayList<MessageObject> arrayList = (ArrayList) longSparseArray2.get(dialog.id);
            if (dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog null");
                }
                this.nextDialogsCacheOffset.put(dialog.folder_id, this.nextDialogsCacheOffset.get(dialog.folder_id, i4) + i3);
                j = keyAt;
                this.dialogs_dict.put(j, dialog);
                this.dialogMessage.put(j, arrayList);
                if (arrayList == null || arrayList.size() <= 0) {
                    i = i5;
                    if (z) {
                        checkLastDialogMessage(dialog, null, 0L);
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        str = "processDialogsUpdate new message is null";
                        FileLog.d(str);
                    }
                    if (isFeatureAvailable) {
                        getTranslateController().checkDialogMessageSure(j);
                    }
                    i5 = i + 1;
                    i4 = 0;
                    i3 = 1;
                } else {
                    int i6 = 0;
                    while (i6 < arrayList.size()) {
                        MessageObject messageObject = arrayList.get(i6);
                        if (messageObject != null) {
                            i2 = i5;
                            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                                long j2 = messageObject.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject);
                                }
                            }
                            i3 = 1;
                        } else {
                            i2 = i5;
                        }
                        i6 += i3;
                        i5 = i2;
                    }
                    i = i5;
                    if (BuildVars.LOGS_ENABLED) {
                        str = "processDialogsUpdate new message not null";
                        FileLog.d(str);
                    }
                    if (isFeatureAvailable) {
                    }
                    i5 = i + 1;
                    i4 = 0;
                    i3 = 1;
                }
            } else {
                j = keyAt;
                i = i5;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog not null");
                }
                dialog2.unread_count = dialog.unread_count;
                int i7 = dialog2.unread_mentions_count;
                int i8 = dialog.unread_mentions_count;
                if (i7 != i8) {
                    dialog2.unread_mentions_count = i8;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(dialog2.id))) {
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMentionsCount, Long.valueOf(dialog2.id), 0L, Integer.valueOf(dialog2.unread_mentions_count));
                    }
                }
                int i9 = dialog2.unread_reactions_count;
                int i10 = dialog.unread_reactions_count;
                if (i9 != i10) {
                    dialog2.unread_reactions_count = i10;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(dialog2.id), 0L, Integer.valueOf(dialog2.unread_reactions_count), null);
                }
                ArrayList<MessageObject> arrayList2 = (ArrayList) this.dialogMessage.get(j);
                for (int i11 = 0; arrayList2 != null && i11 < arrayList2.size(); i11++) {
                    if (arrayList2.get(i11) != null && arrayList2.get(i11).deleted) {
                        z2 = true;
                        break;
                    }
                }
                z2 = false;
                if (BuildVars.LOGS_ENABLED) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("processDialogsUpdate oldMsgs (count = ");
                    sb.append(arrayList2 == null ? "null" : Integer.valueOf(arrayList2.size()));
                    sb.append(") old top_message = ");
                    sb.append(dialog2.top_message);
                    sb.append(" new top_message = ");
                    sb.append(dialog.top_message);
                    sb.append("  unread_count =");
                    sb.append(dialog2.unread_count);
                    sb.append(" fromCache=");
                    sb.append(z);
                    FileLog.d(sb.toString());
                    FileLog.d("processDialogsUpdate oldMsgDeleted " + z2);
                }
                if (arrayList2 == null || dialog2.top_message > 0) {
                    if (!z2 && dialog.top_message <= dialog2.top_message) {
                        if ((arrayList2 == null) == (arrayList == null)) {
                            if (arrayList2 != null) {
                                if (arrayList != null) {
                                }
                            }
                            if (z && arrayList == null) {
                                checkLastDialogMessage(dialog, null, 0L);
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("processDialogsUpdate new messages are null");
                                }
                            }
                        }
                    }
                    this.dialogs_dict.put(j, dialog);
                    this.dialogMessage.put(j, arrayList);
                    for (int i12 = 0; arrayList2 != null && i12 < arrayList2.size(); i12++) {
                        MessageObject messageObject2 = arrayList2.get(i12);
                        if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject2.getId());
                            long j3 = messageObject2.messageOwner.random_id;
                            if (j3 != 0) {
                                this.dialogMessagesByRandomIds.remove(j3);
                            }
                        }
                    }
                    if (arrayList != null) {
                        for (int i13 = 0; i13 < arrayList.size(); i13++) {
                            MessageObject messageObject3 = arrayList.get(i13);
                            int i14 = 0;
                            while (true) {
                                if (arrayList2 == null || i14 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject4 = arrayList2.get(i14);
                                if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                    messageObject3.deleted = messageObject4.deleted;
                                    break;
                                }
                                i14++;
                            }
                            if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject3.messageOwner.date);
                                long j4 = messageObject3.messageOwner.random_id;
                                if (j4 != 0) {
                                    this.dialogMessagesByRandomIds.put(j4, messageObject3);
                                }
                            }
                        }
                    }
                    if (isFeatureAvailable) {
                        getTranslateController().checkDialogMessageSure(j);
                    }
                    if (z) {
                        checkLastDialogMessage(dialog, null, 0L);
                        if (BuildVars.LOGS_ENABLED) {
                        }
                    }
                } else if (z2 || messagesMaxDate(arrayList) > messagesMaxDate(arrayList2)) {
                    this.dialogs_dict.put(j, dialog);
                    this.dialogMessage.put(j, arrayList);
                    for (int i15 = 0; i15 < arrayList2.size(); i15++) {
                        MessageObject messageObject5 = arrayList2.get(i15);
                        if (messageObject5 != null && messageObject5.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject5.getId());
                        }
                    }
                    if (arrayList != null) {
                        for (int i16 = 0; i16 < arrayList.size(); i16++) {
                            MessageObject messageObject6 = arrayList.get(i16);
                            int i17 = 0;
                            while (true) {
                                if (i17 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject7 = arrayList2.get(i17);
                                if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                    messageObject6.deleted = messageObject7.deleted;
                                    break;
                                }
                                i17++;
                            }
                            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject6.messageOwner.date);
                                long j5 = messageObject6.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.put(j5, messageObject6);
                                }
                            }
                        }
                    }
                    for (int i18 = 0; i18 < arrayList2.size(); i18++) {
                        long j6 = arrayList2.get(i18).messageOwner.random_id;
                        if (j6 != 0) {
                            this.dialogMessagesByRandomIds.remove(j6);
                        }
                    }
                }
                i5 = i + 1;
                i4 = 0;
                i3 = 1;
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i19 = 0; i19 < size; i19++) {
            TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.valueAt(i19);
            if (this.deletingDialogs.indexOfKey(dialog3.id) < 0) {
                this.allDialogs.add(dialog3);
            }
        }
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x009f, code lost:
    
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:42:0x00bf, code lost:
    
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L25;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$218(final TLRPC.messages_Dialogs messages_dialogs, final boolean z) {
        TLRPC.Chat chat;
        LongSparseIntArray longSparseIntArray;
        TLRPC.Chat chat2;
        ArrayList arrayList;
        TLRPC.Message message;
        int i;
        int i2;
        ArrayList<MessageObject> arrayList2;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray(messages_dialogs.users.size());
        LongSparseArray longSparseArray4 = new LongSparseArray(messages_dialogs.chats.size());
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        for (int i3 = 0; i3 < messages_dialogs.users.size(); i3++) {
            TLRPC.User user = messages_dialogs.users.get(i3);
            longSparseArray3.put(user.id, user);
        }
        for (int i4 = 0; i4 < messages_dialogs.chats.size(); i4++) {
            TLRPC.Chat chat3 = messages_dialogs.chats.get(i4);
            longSparseArray4.put(chat3.id, chat3);
        }
        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        int i5 = 0;
        while (i5 < messages_dialogs.messages.size()) {
            TLRPC.Message message2 = messages_dialogs.messages.get(i5);
            LongSparseIntArray longSparseIntArray3 = longSparseIntArray2;
            long j = this.promoDialogId;
            if (j == 0 || j != message2.dialog_id) {
                TLRPC.Peer peer = message2.peer_id;
                if (peer != null) {
                    long j2 = peer.channel_id;
                    if (j2 != 0) {
                        TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray4.get(j2);
                        if (chat4 != null) {
                        }
                    }
                }
                if (peer != null) {
                    long j3 = peer.chat_id;
                    if (j3 != 0) {
                        TLRPC.Chat chat5 = (TLRPC.Chat) longSparseArray4.get(j3);
                        if (chat5 != null) {
                            if (chat5.migrated_to == null) {
                            }
                            i2 = i5;
                            arrayList2 = arrayList3;
                            i5 = i2 + 1;
                            arrayList3 = arrayList2;
                            longSparseIntArray2 = longSparseIntArray3;
                        }
                    }
                }
            }
            i2 = i5;
            arrayList2 = arrayList3;
            MessageObject messageObject = new MessageObject(this.currentAccount, message2, longSparseArray3, longSparseArray4, false, false);
            arrayList2.add(messageObject);
            long dialogId = messageObject.getDialogId();
            ArrayList arrayList4 = (ArrayList) longSparseArray2.get(dialogId);
            if (arrayList4 == null) {
                arrayList4 = new ArrayList(1);
            }
            arrayList4.add(messageObject);
            longSparseArray2.put(dialogId, arrayList4);
            i5 = i2 + 1;
            arrayList3 = arrayList2;
            longSparseIntArray2 = longSparseIntArray3;
        }
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray2;
        getFileLoader().checkMediaExistance(arrayList3);
        int i6 = 0;
        while (i6 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog dialog = messages_dialogs.dialogs.get(i6);
            DialogObject.initDialog(dialog);
            long j4 = this.promoDialogId;
            if (j4 == 0 || j4 != dialog.id) {
                boolean isChannel = DialogObject.isChannel(dialog);
                long j5 = dialog.id;
                if (!isChannel ? !(!DialogObject.isChatDialog(j5) || (chat = (TLRPC.Chat) longSparseArray4.get(-dialog.id)) == null || (chat.migrated_to == null && !ChatObject.isNotInChat(chat))) : !((chat2 = (TLRPC.Chat) longSparseArray4.get(-j5)) == null || !ChatObject.isNotInChat(chat2))) {
                    longSparseIntArray = longSparseIntArray4;
                    i6++;
                    longSparseIntArray4 = longSparseIntArray;
                }
            }
            if (dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray2.get(dialog.id)) != null) {
                int i7 = Integer.MIN_VALUE;
                for (int i8 = 0; i8 < arrayList.size(); i8++) {
                    MessageObject messageObject2 = (MessageObject) arrayList.get(i8);
                    if (messageObject2 != null && (message = messageObject2.messageOwner) != null && (i = message.date) > i7) {
                        i7 = i;
                    }
                }
                if (i7 > Integer.MIN_VALUE) {
                    dialog.last_message_date = i7;
                }
            }
            longSparseArray.put(dialog.id, dialog);
            longSparseIntArray = longSparseIntArray4;
            longSparseIntArray.put(dialog.id, dialog.unread_count);
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
            if (num == null) {
                num = 0;
            }
            int i9 = dialog.read_inbox_max_id;
            int i10 = dialog.top_message;
            if (i9 > i10) {
                dialog.read_inbox_max_id = i10;
            }
            int intValue = num.intValue();
            int i11 = dialog.top_message;
            if (intValue > i11) {
                num = Integer.valueOf(i11);
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
            if (num2 == null) {
                num2 = 0;
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
            i6++;
            longSparseIntArray4 = longSparseIntArray;
        }
        final LongSparseIntArray longSparseIntArray5 = longSparseIntArray4;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda322
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$217(messages_dialogs, longSparseArray, longSparseArray2, z, longSparseIntArray5);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:42:0x00f3, code lost:
    
        r5 = true;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdateRead$212(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2) {
        boolean z;
        if (longSparseIntArray != null) {
            z = false;
            for (int i = 0; i < longSparseIntArray.size(); i++) {
                long keyAt = longSparseIntArray.keyAt(i);
                TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(keyAt);
                if (dialog == null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= this.allDialogs.size()) {
                            break;
                        }
                        if (this.allDialogs.get(i2).id == keyAt) {
                            this.dialogs_dict.put(keyAt, this.allDialogs.get(i2));
                            dialog = this.allDialogs.get(i2);
                            break;
                        }
                        i2++;
                    }
                }
                if (dialog == null) {
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("can't update dialog " + keyAt + " with new unread " + longSparseIntArray.valueAt(i));
                    }
                    this.pendingUnreadCounter.put(keyAt, longSparseIntArray.valueAt(i));
                }
                if (dialog != null) {
                    int i3 = dialog.unread_count;
                    dialog.unread_count = longSparseIntArray.valueAt(i);
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("update dialog " + keyAt + " with new unread " + dialog.unread_count);
                    }
                    if (i3 != 0 && dialog.unread_count == 0) {
                        if (!isDialogMuted(keyAt, 0L)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i4 >= dialogFilterArr.length) {
                                    break;
                                }
                                DialogFilter dialogFilter = dialogFilterArr[i4];
                                if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                } else {
                                    i4++;
                                }
                            }
                        }
                    } else if (i3 == 0 && !dialog.unread_mark && dialog.unread_count != 0) {
                        if (!isDialogMuted(keyAt, 0L)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i5 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i5 >= dialogFilterArr2.length) {
                                    break;
                                }
                                DialogFilter dialogFilter2 = dialogFilterArr2[i5];
                                if (dialogFilter2 != null && (dialogFilter2.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                } else {
                                    i5++;
                                }
                            }
                        }
                    }
                }
            }
        } else {
            z = false;
        }
        if (longSparseIntArray2 != null) {
            for (int i6 = 0; i6 < longSparseIntArray2.size(); i6++) {
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(longSparseIntArray2.keyAt(i6));
                if (dialog2 != null) {
                    dialog2.unread_mentions_count = longSparseIntArray2.valueAt(i6);
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(dialog2.id))) {
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMentionsCount, Long.valueOf(dialog2.id), 0L, Integer.valueOf(dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i7 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i7 >= dialogFilterArr3.length) {
                                break;
                            }
                            DialogFilter dialogFilter3 = dialogFilterArr3[i7];
                            if (dialogFilter3 != null) {
                                int i8 = dialogFilter3.flags;
                                if ((DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i8) != 0 || (i8 & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                            }
                            i7++;
                        }
                        z = true;
                    }
                }
            }
        }
        if (z) {
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        if (longSparseIntArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedChannelAdmins$60(long j, LongSparseArray longSparseArray, boolean z) {
        this.channelAdmins.put(j, longSparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(j);
            loadChannelAdmins(j, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadChatAdmins, Long.valueOf(j));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDeleteTask$81() {
        checkDeletingTask(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDeleteTask$82(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, int i) {
        this.gettingNewDeleteTask = false;
        if (longSparseArray == null && longSparseArray2 == null) {
            this.currentDeletingTaskTime = 0;
            this.currentDeletingTaskMids = null;
            this.currentDeletingTaskMediaMids = null;
            return;
        }
        this.currentDeletingTaskTime = i;
        this.currentDeletingTaskMids = longSparseArray;
        this.currentDeletingTaskMediaMids = longSparseArray2;
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        if (checkDeletingTask(false)) {
            return;
        }
        this.currentDeleteTaskRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$81();
            }
        };
        Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime) * 1000);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedDialogFilters$18(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v3 */
    public /* synthetic */ void lambda$processLoadedDialogFilters$19(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC.messages_Dialogs messages_dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, Runnable runnable) {
        int i2;
        ArrayList arrayList5;
        ArrayList arrayList6;
        if (i != 2) {
            this.dialogFilters = arrayList;
            this.dialogFiltersById.clear();
            int size = this.dialogFilters.size();
            for (int i3 = 0; i3 < size; i3++) {
                DialogFilter dialogFilter = this.dialogFilters.get(i3);
                this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
            }
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda416
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processLoadedDialogFilters$18;
                    lambda$processLoadedDialogFilters$18 = MessagesController.lambda$processLoadedDialogFilters$18((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$processLoadedDialogFilters$18;
                }
            });
            putUsers(arrayList2, true);
            putChats(arrayList3, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i == 0) {
                loadRemoteFilters(false);
            }
            if (messages_dialogs != null && !messages_dialogs.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(messages_dialogs.dialogs);
            }
            if (arrayList4 != null) {
                for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                    TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList4.get(i4);
                    if ((encryptedChat instanceof TLRPC.TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                        getSecretChatHelper().sendNotifyLayerMessage(encryptedChat, null);
                    }
                    putEncryptedChat(encryptedChat, true);
                }
            }
            for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                long keyAt = longSparseArray.keyAt(i5);
                TLRPC.Dialog dialog = (TLRPC.Dialog) longSparseArray.valueAt(i5);
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(keyAt);
                if (messages_dialogs != null && messages_dialogs.dialogs.contains(dialog)) {
                    if (dialog.draft instanceof TLRPC.TL_draftMessage) {
                        getMediaDataController().saveDraft(dialog.id, 0L, dialog.draft, null, false);
                    }
                    if (dialog2 != null) {
                        dialog2.notify_settings = dialog.notify_settings;
                    }
                }
                ArrayList arrayList7 = (ArrayList) longSparseArray2.get(dialog.id);
                long j = 0;
                if (dialog2 == null) {
                    this.dialogs_dict.put(keyAt, dialog);
                    this.dialogMessage.put(keyAt, arrayList7);
                    if (arrayList7 != null) {
                        for (int i6 = 0; i6 < arrayList7.size(); i6++) {
                            MessageObject messageObject = (MessageObject) arrayList7.get(i6);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j2 = messageObject.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject);
                                }
                            }
                        }
                    }
                } else {
                    dialog2.pinned = dialog.pinned;
                    dialog2.pinnedNum = dialog.pinnedNum;
                    ArrayList arrayList8 = (ArrayList) this.dialogMessage.get(keyAt);
                    for (int i7 = 0; arrayList8 != null && i7 < arrayList8.size(); i7++) {
                        if (arrayList8.get(i7) != null && ((MessageObject) arrayList8.get(i7)).deleted) {
                            break;
                        }
                    }
                    if (arrayList8 != null && dialog2.top_message <= 0) {
                        this.dialogs_dict.put(keyAt, dialog);
                        this.dialogMessage.put(keyAt, arrayList7);
                        int i8 = 0;
                        while (i8 < arrayList8.size()) {
                            MessageObject messageObject2 = (MessageObject) arrayList8.get(i8);
                            if (messageObject2 == null) {
                                arrayList6 = arrayList8;
                            } else {
                                arrayList6 = arrayList8;
                                if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject2.getId());
                                }
                                long j3 = messageObject2.messageOwner.random_id;
                                if (j3 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j3);
                                }
                            }
                            i8++;
                            arrayList8 = arrayList6;
                        }
                        ArrayList arrayList9 = arrayList8;
                        if (arrayList7 != null) {
                            int i9 = 0;
                            while (i9 < arrayList7.size()) {
                                MessageObject messageObject3 = (MessageObject) arrayList7.get(i9);
                                if (messageObject3 == null || messageObject3.messageOwner.peer_id.channel_id != j) {
                                    arrayList5 = arrayList9;
                                } else {
                                    int i10 = 0;
                                    while (true) {
                                        arrayList5 = arrayList9;
                                        if (i10 >= arrayList9.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = (MessageObject) arrayList5.get(i10);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        } else {
                                            i10++;
                                            arrayList9 = arrayList5;
                                        }
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j4 = messageObject3.messageOwner.random_id;
                                    if (j4 != 0) {
                                        this.dialogMessagesByRandomIds.put(j4, messageObject3);
                                    }
                                }
                                i9++;
                                arrayList9 = arrayList5;
                                j = 0;
                            }
                        }
                    }
                    if (dialog.top_message < dialog2.top_message) {
                        if ((arrayList8 == null) == (arrayList7 == null)) {
                            if (arrayList8 != null) {
                                if (arrayList7 != null) {
                                    if (arrayList8.size() == arrayList7.size()) {
                                    }
                                }
                            }
                        }
                    }
                    this.dialogs_dict.put(keyAt, dialog);
                    this.dialogMessage.put(keyAt, arrayList7);
                    if (arrayList8 != null) {
                        for (int i11 = 0; i11 < arrayList8.size(); i11++) {
                            MessageObject messageObject5 = (MessageObject) arrayList8.get(i11);
                            if (messageObject5 != null) {
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j5 = messageObject5.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j5);
                                }
                            }
                        }
                    }
                    if (arrayList7 != null) {
                        for (int i12 = 0; i12 < arrayList7.size(); i12++) {
                            MessageObject messageObject6 = (MessageObject) arrayList7.get(i12);
                            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                int i13 = 0;
                                while (true) {
                                    if (arrayList8 == null || i13 >= arrayList8.size()) {
                                        break;
                                    }
                                    MessageObject messageObject7 = (MessageObject) arrayList8.get(i13);
                                    if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                        messageObject6.deleted = messageObject7.deleted;
                                        break;
                                    }
                                    i13++;
                                }
                                this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                long j6 = messageObject6.messageOwner.random_id;
                                if (j6 != 0) {
                                    this.dialogMessagesByRandomIds.put(j6, messageObject6);
                                }
                            }
                        }
                    }
                }
                getTranslateController().checkDialogMessage(keyAt);
            }
            this.allDialogs.clear();
            int size2 = this.dialogs_dict.size();
            for (int i14 = 0; i14 < size2; i14++) {
                TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.valueAt(i14);
                if (this.deletingDialogs.indexOfKey(dialog3.id) < 0) {
                    this.allDialogs.add(dialog3);
                }
            }
            sortDialogs(null);
            i2 = 0;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            i2 = 0;
        }
        if (i != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(i2);
            this.loadingRemoteFilters = i2;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.filterSettingsUpdated, new Object[i2]);
        }
        lockFiltersInternal();
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x00a7, code lost:
    
        if (r6 == (-r3.id)) goto L36;
     */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x00bb, code lost:
    
        if (r3.migrated_to != null) goto L28;
     */
    /* JADX WARN: Removed duplicated region for block: B:102:0x01f6  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00dd  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01cc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogFilters$20(TLRPC.messages_Dialogs messages_dialogs, final ArrayList arrayList, final TLRPC.messages_Dialogs messages_dialogs2, final int i, final ArrayList arrayList2, final ArrayList arrayList3, final ArrayList arrayList4, final Runnable runnable) {
        SparseArray sparseArray;
        long j;
        LongSparseArray longSparseArray;
        TLRPC.Chat chat;
        Integer num;
        Integer num2;
        ArrayList arrayList5;
        TLRPC.Message message;
        int i2;
        int i3;
        long dialogId;
        TLRPC.messages_Dialogs messages_dialogs3 = messages_dialogs;
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        final LongSparseArray longSparseArray3 = new LongSparseArray();
        LongSparseArray longSparseArray4 = new LongSparseArray();
        LongSparseArray longSparseArray5 = new LongSparseArray();
        for (int i4 = 0; i4 < messages_dialogs3.users.size(); i4++) {
            TLRPC.User user = messages_dialogs3.users.get(i4);
            longSparseArray4.put(user.id, user);
        }
        for (int i5 = 0; i5 < messages_dialogs3.chats.size(); i5++) {
            TLRPC.Chat chat2 = messages_dialogs3.chats.get(i5);
            longSparseArray5.put(chat2.id, chat2);
        }
        if (arrayList != null) {
            sparseArray = new SparseArray();
            int size = arrayList.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList.get(i6);
                sparseArray.put(encryptedChat.id, encryptedChat);
            }
        } else {
            sparseArray = null;
        }
        ArrayList arrayList6 = new ArrayList();
        int i7 = 0;
        while (true) {
            j = 0;
            if (i7 >= messages_dialogs3.messages.size()) {
                break;
            }
            TLRPC.Message message2 = messages_dialogs3.messages.get(i7);
            TLRPC.Peer peer = message2.peer_id;
            long j2 = peer.channel_id;
            if (j2 != 0) {
                TLRPC.Chat chat3 = (TLRPC.Chat) longSparseArray5.get(j2);
                if (chat3 != null && chat3.left) {
                    long j3 = this.promoDialogId;
                    if (j3 != 0) {
                    }
                    i3 = i7;
                }
                i3 = i7;
                MessageObject messageObject = new MessageObject(this.currentAccount, message2, longSparseArray4, longSparseArray5, false, false);
                arrayList6.add(messageObject);
                dialogId = messageObject.getDialogId();
                if (longSparseArray3.containsKey(dialogId)) {
                    ArrayList arrayList7 = new ArrayList(1);
                    arrayList7.add(messageObject);
                    longSparseArray3.put(dialogId, arrayList7);
                } else {
                    ((ArrayList) longSparseArray3.get(dialogId)).add(messageObject);
                }
            } else {
                long j4 = peer.chat_id;
                if (j4 != 0) {
                    TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray5.get(j4);
                    if (chat4 != null) {
                    }
                }
                i3 = i7;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, message2, longSparseArray4, longSparseArray5, false, false);
                arrayList6.add(messageObject2);
                dialogId = messageObject2.getDialogId();
                if (longSparseArray3.containsKey(dialogId)) {
                }
            }
            i7 = i3 + 1;
        }
        int i8 = 0;
        while (i8 < messages_dialogs3.dialogs.size()) {
            TLRPC.Dialog dialog = messages_dialogs3.dialogs.get(i8);
            DialogObject.initDialog(dialog);
            LongSparseArray longSparseArray6 = longSparseArray4;
            long j5 = dialog.id;
            if (j5 != j && (!DialogObject.isEncryptedDialog(j5) || sparseArray == null || sparseArray.get(DialogObject.getEncryptedChatId(dialog.id)) != null)) {
                long j6 = this.promoDialogId;
                if (j6 != j && j6 == dialog.id) {
                    this.promoDialog = dialog;
                }
                if (dialog.last_message_date == 0 && (arrayList5 = (ArrayList) longSparseArray3.get(dialog.id)) != null) {
                    int i9 = Integer.MIN_VALUE;
                    for (int i10 = 0; i10 < arrayList5.size(); i10++) {
                        MessageObject messageObject3 = (MessageObject) arrayList5.get(i10);
                        if (messageObject3 != null && (message = messageObject3.messageOwner) != null && i9 < (i2 = message.date)) {
                            i9 = i2;
                        }
                    }
                    if (i9 > Integer.MIN_VALUE) {
                        dialog.last_message_date = i9;
                    }
                }
                if (DialogObject.isChannel(dialog)) {
                    TLRPC.Chat chat5 = (TLRPC.Chat) longSparseArray5.get(-dialog.id);
                    if (chat5 != null && chat5.left) {
                        long j7 = this.promoDialogId;
                        if (j7 != 0) {
                            if (j7 != dialog.id) {
                            }
                        }
                    }
                    this.channelsPts.put(-dialog.id, dialog.pts);
                    longSparseArray2.put(dialog.id, dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                    if (num == null) {
                        num = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                    if (num2 == null) {
                        num2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                } else {
                    long j8 = dialog.id;
                    if (j8 < 0 && (chat = (TLRPC.Chat) longSparseArray5.get(-j8)) != null && chat.migrated_to != null) {
                    }
                    longSparseArray2.put(dialog.id, dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                    if (num == null) {
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                    if (num2 == null) {
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                }
            }
            i8++;
            messages_dialogs3 = messages_dialogs;
            longSparseArray4 = longSparseArray6;
            j = 0;
        }
        LongSparseArray longSparseArray7 = longSparseArray4;
        if (messages_dialogs2 != null && !messages_dialogs2.dialogs.isEmpty()) {
            ImageLoader.saveMessagesThumbs(messages_dialogs2.messages);
            int i11 = 0;
            while (i11 < messages_dialogs2.messages.size()) {
                TLRPC.Message message3 = messages_dialogs2.messages.get(i11);
                TLRPC.MessageAction messageAction = message3.action;
                if (messageAction instanceof TLRPC.TL_messageActionChatDeleteUser) {
                    longSparseArray = longSparseArray7;
                    TLRPC.User user2 = (TLRPC.User) longSparseArray.get(messageAction.user_id);
                    if (user2 != null && user2.bot) {
                        message3.reply_markup = new TLRPC.TL_replyKeyboardHide();
                        message3.flags |= 64;
                    }
                } else {
                    longSparseArray = longSparseArray7;
                }
                TLRPC.MessageAction messageAction2 = message3.action;
                if ((messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo) || (messageAction2 instanceof TLRPC.TL_messageActionChannelCreate)) {
                    message3.unread = false;
                    message3.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num3 = concurrentHashMap.get(Long.valueOf(message3.dialog_id));
                    if (num3 == null) {
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message3.out, message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message3.dialog_id), num3);
                    }
                    message3.unread = num3.intValue() < message3.id;
                }
                i11++;
                longSparseArray7 = longSparseArray;
            }
            getMessagesStorage().putDialogs(messages_dialogs2, 0);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda118
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$19(i, arrayList2, arrayList3, arrayList4, messages_dialogs2, arrayList, longSparseArray2, longSparseArray3, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDialogs$206(TLRPC.messages_Dialogs messages_dialogs, ArrayList arrayList, int i, boolean z, long[] jArr, int i2) {
        putUsers(messages_dialogs.users, true);
        if (arrayList != null) {
            for (int i3 = 0; i3 < arrayList.size(); i3++) {
                long j = ((TLRPC.UserFull) arrayList.get(i3)).id;
                this.fullUsers.put(j, (TLRPC.UserFull) arrayList.get(i3));
                getTranslateController().updateDialogFull(j);
            }
        }
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (jArr[0] == 2147483647L) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDialogs$207(TLRPC.Chat chat) {
        checkChatInviter(chat.id, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:118:0x0291, code lost:
    
        if (r4.size() == r8.size()) goto L194;
     */
    /* JADX WARN: Code restructure failed: missing block: B:173:0x0332, code lost:
    
        if (r3 != false) goto L192;
     */
    /* JADX WARN: Code restructure failed: missing block: B:174:0x0334, code lost:
    
        r10 = r19;
     */
    /* JADX WARN: Code restructure failed: missing block: B:230:0x026f, code lost:
    
        if (r3 != false) goto L192;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v13 */
    /* JADX WARN: Type inference failed for: r13v14 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$208(TLRPC.Message message, int i, TLRPC.messages_Dialogs messages_dialogs, ArrayList arrayList, ArrayList arrayList2, boolean z, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, int i3, boolean z2, int i4, ArrayList arrayList3) {
        int i5;
        int i6;
        int i7;
        int i8;
        boolean z3;
        int i9;
        boolean z4;
        boolean z5;
        int i10 = i2;
        LongSparseArray longSparseArray4 = longSparseArray;
        this.dialogsLoadedTillDate = message != null ? Math.min(this.dialogsLoadedTillDate, message.date) : Integer.MIN_VALUE;
        if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
            applyDialogsNotificationsSettings(messages_dialogs.dialogs);
            getMediaDataController().loadDraftsIfNeed();
        }
        putUsers(messages_dialogs.users, i == this.DIALOGS_LOAD_TYPE_CACHE);
        putChats(messages_dialogs.chats, i == this.DIALOGS_LOAD_TYPE_CACHE);
        if (arrayList != null) {
            for (int i11 = 0; i11 < arrayList.size(); i11++) {
                long j = ((TLRPC.UserFull) arrayList.get(i11)).id;
                this.fullUsers.put(j, (TLRPC.UserFull) arrayList.get(i11));
                getTranslateController().updateDialogFull(j);
            }
        }
        if (arrayList2 != null) {
            for (int i12 = 0; i12 < arrayList2.size(); i12++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList2.get(i12);
                if ((encryptedChat instanceof TLRPC.TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                    getSecretChatHelper().sendNotifyLayerMessage(encryptedChat, null);
                }
                putEncryptedChat(encryptedChat, true);
            }
        }
        if (!z && i != this.DIALOGS_LOAD_TYPE_UNKNOWN && i != this.DIALOGS_LOAD_TYPE_CHANNEL) {
            this.loadingDialogs.put(i10, false);
        }
        this.dialogsLoaded = true;
        if (!z || this.allDialogs.isEmpty()) {
            i5 = 0;
        } else {
            ArrayList<TLRPC.Dialog> arrayList4 = this.allDialogs;
            i5 = arrayList4.get(arrayList4.size() - 1).last_message_date;
        }
        boolean isFeatureAvailable = getTranslateController().isFeatureAvailable();
        int i13 = 0;
        int i14 = 0;
        boolean z6 = false;
        while (true) {
            i6 = i14;
            if (i13 >= longSparseArray.size()) {
                break;
            }
            long keyAt = longSparseArray4.keyAt(i13);
            TLRPC.Dialog dialog = (TLRPC.Dialog) longSparseArray4.valueAt(i13);
            TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(keyAt);
            if (z && dialog2 != null) {
                dialog2.folder_id = dialog.folder_id;
            }
            if (!z || i5 == 0 || dialog.last_message_date >= i5) {
                if (i == this.DIALOGS_LOAD_TYPE_CACHE || !(dialog.draft instanceof TLRPC.TL_draftMessage)) {
                    i9 = i5;
                } else {
                    i9 = i5;
                    getMediaDataController().saveDraft(dialog.id, 0L, dialog.draft, null, false);
                }
                if (dialog.folder_id != i10) {
                    i6++;
                }
                ArrayList arrayList5 = (ArrayList) longSparseArray2.get(dialog.id);
                if (dialog2 == null) {
                    this.dialogs_dict.put(keyAt, dialog);
                    this.dialogMessage.put(keyAt, arrayList5);
                    if (arrayList5 != null) {
                        for (int i15 = 0; i15 < arrayList5.size(); i15++) {
                            MessageObject messageObject = (MessageObject) arrayList5.get(i15);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j2 = messageObject.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject);
                                }
                            }
                        }
                    }
                    if (isFeatureAvailable) {
                        z6 = true;
                        getTranslateController().checkDialogMessageSure(keyAt);
                        i14 = i6;
                    } else {
                        i14 = i6;
                        z6 = true;
                    }
                } else {
                    if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
                        dialog2.notify_settings = dialog.notify_settings;
                    }
                    dialog2.pinned = dialog.pinned;
                    dialog2.pinnedNum = dialog.pinnedNum;
                    ArrayList arrayList6 = (ArrayList) this.dialogMessage.get(keyAt);
                    for (int i16 = 0; arrayList6 != null && i16 < arrayList6.size(); i16++) {
                        if (arrayList6.get(i16) != null && ((MessageObject) arrayList6.get(i16)).deleted) {
                            break;
                        }
                    }
                    if (arrayList6 != null && dialog2.top_message <= 0) {
                        this.dialogs_dict.put(keyAt, dialog);
                        this.dialogMessage.put(keyAt, arrayList5);
                        int i17 = 0;
                        while (i17 < arrayList6.size()) {
                            MessageObject messageObject2 = (MessageObject) arrayList6.get(i17);
                            if (messageObject2 == null) {
                                z5 = z6;
                            } else {
                                z5 = z6;
                                if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject2.getId());
                                }
                                long j3 = messageObject2.messageOwner.random_id;
                                if (j3 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j3);
                                }
                            }
                            i17++;
                            z6 = z5;
                        }
                        z4 = z6;
                        if (arrayList5 != null) {
                            for (int i18 = 0; i18 < arrayList5.size(); i18++) {
                                MessageObject messageObject3 = (MessageObject) arrayList5.get(i18);
                                if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                    int i19 = 0;
                                    while (true) {
                                        if (i19 >= arrayList6.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = (MessageObject) arrayList6.get(i19);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        }
                                        i19++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j4 = messageObject3.messageOwner.random_id;
                                    if (j4 != 0) {
                                        this.dialogMessagesByRandomIds.put(j4, messageObject3);
                                    }
                                }
                            }
                        }
                    }
                    z4 = z6;
                    if (dialog.top_message < dialog2.top_message) {
                        if ((arrayList6 == null) == (arrayList5 == null)) {
                            if (arrayList6 != null) {
                                if (arrayList5 != null) {
                                }
                            }
                            i14 = i6;
                            z6 = z4;
                        }
                    }
                    this.dialogs_dict.put(keyAt, dialog);
                    this.dialogMessage.put(keyAt, arrayList5);
                    if (arrayList6 != null) {
                        for (int i20 = 0; i20 < arrayList6.size(); i20++) {
                            MessageObject messageObject5 = (MessageObject) arrayList6.get(i20);
                            if (messageObject5 != null) {
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j5 = messageObject5.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j5);
                                }
                            }
                        }
                    }
                    if (arrayList5 != null) {
                        for (int i21 = 0; i21 < arrayList5.size(); i21++) {
                            MessageObject messageObject6 = (MessageObject) arrayList5.get(i21);
                            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                int i22 = 0;
                                while (true) {
                                    if (arrayList6 == null || i22 >= arrayList6.size()) {
                                        break;
                                    }
                                    MessageObject messageObject7 = (MessageObject) arrayList6.get(i22);
                                    if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                        messageObject6.deleted = messageObject7.deleted;
                                        break;
                                    }
                                    i22++;
                                }
                                this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                long j6 = messageObject6.messageOwner.random_id;
                                if (j6 != 0) {
                                    this.dialogMessagesByRandomIds.put(j6, messageObject6);
                                }
                            }
                        }
                    }
                }
            } else {
                i14 = i6;
                i9 = i5;
            }
            i13++;
            i5 = i9;
            i10 = i2;
            longSparseArray4 = longSparseArray;
        }
        boolean z7 = z6;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i23 = 0; i23 < size; i23++) {
            TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.valueAt(i23);
            if (this.deletingDialogs.indexOfKey(dialog3.id) < 0) {
                this.allDialogs.add(dialog3);
            }
        }
        sortDialogs(z ? longSparseArray3 : null);
        putAllNeededDraftDialogs();
        if (i == this.DIALOGS_LOAD_TYPE_CHANNEL || i == this.DIALOGS_LOAD_TYPE_UNKNOWN || z) {
            i7 = i2;
        } else {
            SparseBooleanArray sparseBooleanArray = this.dialogsEndReached;
            if ((messages_dialogs.dialogs.size() == 0 || messages_dialogs.dialogs.size() != i3) && i == 0) {
                i7 = i2;
                z3 = true;
            } else {
                i7 = i2;
                z3 = false;
            }
            sparseBooleanArray.put(i7, z3);
            if (i6 > 0 && i6 < 20 && i7 == 0) {
                this.dialogsEndReached.put(1, true);
                if (getUserConfig().getDialogLoadOffsets(i7)[0] == 2147483647L) {
                    this.serverDialogsEndReached.put(1, true);
                }
            }
            if (!z2) {
                this.serverDialogsEndReached.put(i7, (messages_dialogs.dialogs.size() == 0 || messages_dialogs.dialogs.size() != i3) && i == 0);
            }
        }
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(i7);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i7);
        if (z2 || z || totalDialogsCount >= 400) {
            i8 = 0;
        } else {
            i8 = 0;
            i8 = 0;
            i8 = 0;
            long j7 = dialogLoadOffsets[0];
            if (j7 != -1 && j7 != 2147483647L) {
                loadDialogs(i7, 0, 100, false);
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[i8]);
        if (z) {
            getUserConfig().migrateOffsetId = i4;
            getUserConfig().saveConfig(i8);
            this.migratingDialogs = i8;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[i8]);
        } else if (!z7 && i == this.DIALOGS_LOAD_TYPE_CACHE && this.dialogsEndReached.get(i7)) {
            loadDialogs(i7, i8, i3, i8);
        }
        migrateDialogs(getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
        if (!arrayList3.isEmpty()) {
            reloadDialogsReadValue(arrayList3, 0L);
        }
        loadUnreadDialogs();
        if (messages_dialogs.dialogs != null) {
            for (int i24 = i8; i24 < messages_dialogs.dialogs.size(); i24++) {
                if (isForum(messages_dialogs.dialogs.get(i24).id)) {
                    this.topicsController.preloadTopics(-messages_dialogs.dialogs.get(i24).id);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x036d, code lost:
    
        if (r6 == r0.id) goto L161;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x012b, code lost:
    
        if (r10 == (-r6.id)) goto L60;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x0144, code lost:
    
        if (r5.migrated_to != null) goto L51;
     */
    /* JADX WARN: Removed duplicated region for block: B:148:0x03ad  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x03d9  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x0406  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x03c5  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x016b  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0172  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$209(final int i, final int i2, final TLRPC.messages_Dialogs messages_dialogs, final ArrayList arrayList, final boolean z, final int i3, final ArrayList arrayList2, final int i4, final boolean z2, final boolean z3) {
        SparseArray sparseArray;
        LongSparseArray longSparseArray;
        TLRPC.Message message;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        SparseArray sparseArray2;
        boolean z4;
        LongSparseArray longSparseArray5;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        boolean z5;
        TLRPC.Chat chat;
        LongSparseArray longSparseArray8;
        Integer num;
        Integer num2;
        TLRPC.Message message2;
        int i5;
        LongSparseArray longSparseArray9;
        int i6;
        long j;
        long j2;
        long j3;
        long j4;
        int i7;
        int i8;
        long j5;
        long j6;
        int i9;
        int i10;
        long j7;
        TLRPC.Message message3;
        ArrayList arrayList3;
        if (!this.firstGettingTask) {
            getNewDeleteTask(null, null);
            this.firstGettingTask = true;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("loaded folderId " + i + " loadType " + i2 + " count " + messages_dialogs.dialogs.size());
        }
        final long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE && messages_dialogs.dialogs.size() == 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda155
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$206(messages_dialogs, arrayList, i, z, dialogLoadOffsets, i3);
                }
            });
            return;
        }
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseArray longSparseArray11 = new LongSparseArray();
        LongSparseArray longSparseArray12 = new LongSparseArray();
        LongSparseArray longSparseArray13 = new LongSparseArray();
        int i11 = 0;
        while (i11 < messages_dialogs.users.size()) {
            TLRPC.User user = messages_dialogs.users.get(i11);
            longSparseArray12.put(user.id, user);
            i11++;
            dialogLoadOffsets = dialogLoadOffsets;
        }
        long[] jArr = dialogLoadOffsets;
        for (int i12 = 0; i12 < messages_dialogs.chats.size(); i12++) {
            TLRPC.Chat chat2 = messages_dialogs.chats.get(i12);
            longSparseArray13.put(chat2.id, chat2);
        }
        if (arrayList2 != null) {
            SparseArray sparseArray3 = new SparseArray();
            int size = arrayList2.size();
            for (int i13 = 0; i13 < size; i13++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList2.get(i13);
                sparseArray3.put(encryptedChat.id, encryptedChat);
            }
            sparseArray = sparseArray3;
        } else {
            sparseArray = null;
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE) {
            this.nextDialogsCacheOffset.put(i, i4 + i3);
        }
        ArrayList arrayList4 = new ArrayList();
        int i14 = 0;
        TLRPC.Message message4 = null;
        while (i14 < messages_dialogs.messages.size()) {
            TLRPC.Message message5 = messages_dialogs.messages.get(i14);
            int i15 = message5.date;
            SparseArray sparseArray4 = sparseArray;
            if (i15 != 0) {
                if (message4 == null || i15 < message4.date) {
                    message4 = message5;
                }
                TLRPC.Peer peer = message5.peer_id;
                long j8 = peer.channel_id;
                if (j8 != 0) {
                    TLRPC.Chat chat3 = (TLRPC.Chat) longSparseArray13.get(j8);
                    if (chat3 == null || !chat3.left) {
                        message3 = message4;
                    } else {
                        long j9 = this.promoDialogId;
                        message3 = message4;
                        if (j9 != 0) {
                        }
                    }
                    MessageObject messageObject = new MessageObject(this.currentAccount, message5, longSparseArray12, longSparseArray13, false, false);
                    arrayList4.add(messageObject);
                    long dialogId = messageObject.getDialogId();
                    arrayList3 = (ArrayList) longSparseArray11.get(dialogId);
                    if (arrayList3 != null) {
                        arrayList3 = new ArrayList(1);
                    }
                    arrayList3.add(messageObject);
                    longSparseArray11.put(dialogId, arrayList3);
                } else {
                    message3 = message4;
                    long j10 = peer.chat_id;
                    if (j10 != 0) {
                        TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray13.get(j10);
                        if (chat4 != null) {
                        }
                    }
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, message5, longSparseArray12, longSparseArray13, false, false);
                    arrayList4.add(messageObject2);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList3 = (ArrayList) longSparseArray11.get(dialogId2);
                    if (arrayList3 != null) {
                    }
                    arrayList3.add(messageObject2);
                    longSparseArray11.put(dialogId2, arrayList3);
                }
                message4 = message3;
            }
            i14++;
            sparseArray = sparseArray4;
        }
        SparseArray sparseArray5 = sparseArray;
        if (z2 || z3 || jArr[0] == -1 || i2 != 0) {
            longSparseArray = longSparseArray13;
            message = message4;
            longSparseArray2 = longSparseArray12;
            longSparseArray3 = longSparseArray10;
            longSparseArray4 = longSparseArray11;
            sparseArray2 = sparseArray5;
            z4 = false;
        } else {
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(i);
            if (message4 == null || message4.id == jArr[0]) {
                longSparseArray9 = longSparseArray12;
                i6 = totalDialogsCount;
                j = 0;
                j2 = 0;
                j3 = 0;
                j4 = 0;
                i7 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                i8 = 0;
            } else {
                int size2 = totalDialogsCount + messages_dialogs.dialogs.size();
                int i16 = message4.id;
                int i17 = message4.date;
                TLRPC.Peer peer2 = message4.peer_id;
                longSparseArray9 = longSparseArray12;
                long j11 = peer2.channel_id;
                if (j11 != 0) {
                    int i18 = 0;
                    while (true) {
                        if (i18 >= messages_dialogs.chats.size()) {
                            i9 = size2;
                            i10 = i16;
                            j7 = 0;
                            break;
                        }
                        TLRPC.Chat chat5 = messages_dialogs.chats.get(i18);
                        i9 = size2;
                        i10 = i16;
                        if (chat5.id == j11) {
                            j7 = chat5.access_hash;
                            break;
                        } else {
                            i18++;
                            size2 = i9;
                            i16 = i10;
                        }
                    }
                    j4 = j7;
                    i8 = i17;
                    j3 = j11;
                    j2 = 0;
                    i6 = i9;
                    i7 = i10;
                    j = 0;
                } else {
                    long j12 = peer2.chat_id;
                    if (j12 != 0) {
                        int i19 = 0;
                        while (true) {
                            if (i19 >= messages_dialogs.chats.size()) {
                                j6 = 0;
                                break;
                            }
                            TLRPC.Chat chat6 = messages_dialogs.chats.get(i19);
                            if (chat6.id == j12) {
                                j6 = chat6.access_hash;
                                break;
                            }
                            i19++;
                        }
                        j2 = j12;
                        i8 = i17;
                        j4 = j6;
                        j3 = 0;
                        i6 = size2;
                        i7 = i16;
                        j = 0;
                    } else {
                        long j13 = peer2.user_id;
                        if (j13 != 0) {
                            int i20 = 0;
                            while (true) {
                                if (i20 >= messages_dialogs.users.size()) {
                                    j5 = 0;
                                    break;
                                }
                                TLRPC.User user2 = messages_dialogs.users.get(i20);
                                if (user2.id == j13) {
                                    j5 = user2.access_hash;
                                    break;
                                }
                                i20++;
                            }
                            i8 = i17;
                            j4 = j5;
                            j2 = 0;
                            j3 = 0;
                            i6 = size2;
                            i7 = i16;
                            j = j13;
                        } else {
                            i8 = i17;
                            j2 = 0;
                            j3 = 0;
                            j4 = 0;
                            i6 = size2;
                            i7 = i16;
                            j = 0;
                        }
                    }
                }
            }
            message = message4;
            longSparseArray2 = longSparseArray9;
            longSparseArray = longSparseArray13;
            sparseArray2 = sparseArray5;
            longSparseArray3 = longSparseArray10;
            longSparseArray4 = longSparseArray11;
            getUserConfig().setDialogsLoadOffset(i, i7, i8, j, j2, j3, j4);
            getUserConfig().setTotalDialogsCount(i, i6);
            z4 = false;
            getUserConfig().saveConfig(false);
        }
        final ArrayList arrayList5 = new ArrayList();
        int i21 = 0;
        while (i21 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog dialog = messages_dialogs.dialogs.get(i21);
            DialogObject.initDialog(dialog);
            long j14 = dialog.id;
            if (j14 == 0 || (DialogObject.isEncryptedDialog(j14) && sparseArray2 != null && sparseArray2.get(DialogObject.getEncryptedChatId(dialog.id)) == null)) {
                longSparseArray8 = longSparseArray3;
                longSparseArray6 = longSparseArray4;
            } else {
                long j15 = this.promoDialogId;
                if (j15 != 0 && j15 == dialog.id) {
                    this.promoDialog = dialog;
                }
                if (dialog.last_message_date == 0) {
                    longSparseArray6 = longSparseArray4;
                    ArrayList arrayList6 = (ArrayList) longSparseArray6.get(dialog.id);
                    if (arrayList6 != null) {
                        int i22 = Integer.MIN_VALUE;
                        for (int i23 = 0; i23 < arrayList6.size(); i23++) {
                            MessageObject messageObject3 = (MessageObject) arrayList6.get(i23);
                            if (messageObject3 != null && (message2 = messageObject3.messageOwner) != null && (i5 = message2.date) > i22) {
                                i22 = i5;
                            }
                        }
                        if (i22 > Integer.MIN_VALUE) {
                            dialog.last_message_date = i22;
                        }
                    }
                } else {
                    longSparseArray6 = longSparseArray4;
                }
                if (DialogObject.isChannel(dialog)) {
                    longSparseArray7 = longSparseArray;
                    TLRPC.Chat chat7 = (TLRPC.Chat) longSparseArray7.get(-dialog.id);
                    if (chat7 != null) {
                        z5 = chat7.megagroup;
                        if (ChatObject.isNotInChat(chat7)) {
                            long j16 = this.promoDialogId;
                            if (j16 != 0) {
                            }
                            longSparseArray = longSparseArray7;
                            longSparseArray8 = longSparseArray3;
                        }
                    } else {
                        z5 = true;
                    }
                    this.channelsPts.put(-dialog.id, dialog.pts);
                    longSparseArray8 = longSparseArray3;
                    longSparseArray8.put(dialog.id, dialog);
                    if (z5) {
                        longSparseArray = longSparseArray7;
                    } else {
                        longSparseArray = longSparseArray7;
                        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE && ((dialog.read_outbox_max_id == 0 || dialog.read_inbox_max_id == 0) && dialog.top_message != 0)) {
                            arrayList5.add(dialog);
                        }
                    }
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                    if (num == null) {
                        num = Integer.valueOf(z4 ? 1 : 0);
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                    if (num2 == null) {
                        num2 = Integer.valueOf(z4 ? 1 : 0);
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                } else {
                    longSparseArray7 = longSparseArray;
                    if (!DialogObject.isChatDialog(dialog.id) || (chat = (TLRPC.Chat) longSparseArray7.get(-dialog.id)) == null || (chat.migrated_to == null && !ChatObject.isNotInChat(chat))) {
                        z5 = true;
                        longSparseArray8 = longSparseArray3;
                        longSparseArray8.put(dialog.id, dialog);
                        if (z5) {
                        }
                        num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                        if (num == null) {
                        }
                        this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                        num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                        if (num2 == null) {
                        }
                        this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                    }
                    longSparseArray = longSparseArray7;
                    longSparseArray8 = longSparseArray3;
                }
            }
            i21++;
            longSparseArray3 = longSparseArray8;
            longSparseArray4 = longSparseArray6;
        }
        final LongSparseArray longSparseArray14 = longSparseArray3;
        final LongSparseArray longSparseArray15 = longSparseArray4;
        if (i2 != this.DIALOGS_LOAD_TYPE_CACHE) {
            ImageLoader.saveMessagesThumbs(messages_dialogs.messages);
            int i24 = 0;
            while (i24 < messages_dialogs.messages.size()) {
                TLRPC.Message message6 = messages_dialogs.messages.get(i24);
                TLRPC.MessageAction messageAction = message6.action;
                if (messageAction instanceof TLRPC.TL_messageActionChatDeleteUser) {
                    long j17 = messageAction.user_id;
                    longSparseArray5 = longSparseArray2;
                    TLRPC.User user3 = (TLRPC.User) longSparseArray5.get(j17);
                    if (user3 != null && user3.bot) {
                        message6.reply_markup = new TLRPC.TL_replyKeyboardHide();
                        message6.flags |= 64;
                    }
                } else {
                    longSparseArray5 = longSparseArray2;
                }
                TLRPC.MessageAction messageAction2 = message6.action;
                if ((messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo) || (messageAction2 instanceof TLRPC.TL_messageActionChannelCreate)) {
                    longSparseArray2 = longSparseArray5;
                    message6.unread = z4;
                    message6.media_unread = z4;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message6.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num3 = concurrentHashMap.get(Long.valueOf(message6.dialog_id));
                    if (num3 == null) {
                        longSparseArray2 = longSparseArray5;
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message6.out, message6.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message6.dialog_id), num3);
                    } else {
                        longSparseArray2 = longSparseArray5;
                    }
                    message6.unread = num3.intValue() < message6.id;
                }
                i24++;
                z4 = false;
            }
            getMessagesStorage().putDialogs(messages_dialogs, i2 == this.DIALOGS_LOAD_TYPE_UNKNOWN ? 3 : 0);
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CHANNEL) {
            final TLRPC.Chat chat8 = messages_dialogs.chats.get(0);
            getChannelDifference(chat8.id);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda156
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$207(chat8);
                }
            });
        }
        final TLRPC.Message message7 = message;
        final LongSparseArray longSparseArray16 = longSparseArray;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$208(message7, i2, messages_dialogs, arrayList, arrayList2, z3, i, longSparseArray14, longSparseArray15, longSparseArray16, i3, z2, i4, arrayList5);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$178(long j, long j2, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, int i11, int i12, boolean z2, boolean z3, Timer timer, long j4) {
        loadMessagesInternal(j, j2, false, i, (i2 == 2 && z) ? i3 : i4, i5, false, 0, i6, i2, i7, i8, j3, i9, i3, i10, i11, z, i12, true, z2, z3, timer, j4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$179(int i, TLRPC.messages_Messages messages_messages, boolean z, boolean z2, int i2) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(messages_messages.messages.size()), Boolean.valueOf(z), Boolean.valueOf(z2), Integer.valueOf(i2));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedMessages$180(MessageObject messageObject, MessageObject messageObject2) {
        int i;
        int i2;
        if (messageObject.messageOwner.date != messageObject2.messageOwner.date || messageObject.getId() < 0 || messageObject2.getId() < 0) {
            i = messageObject2.messageOwner.date;
            i2 = messageObject.messageOwner.date;
        } else {
            i = messageObject2.getId();
            i2 = messageObject.getId();
        }
        return i - i2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedMessages$181(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject2.getId() - messageObject.getId();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$182(Timer.Task task, boolean z, int i, int i2, boolean z2, boolean z3, int i3, long j, int i4, ArrayList arrayList, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12) {
        Timer.done(task);
        NotificationCenter notificationCenter = getNotificationCenter();
        if (z) {
            notificationCenter.lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z2), Integer.valueOf(i5), Integer.valueOf(i3), Integer.valueOf(i6), Integer.valueOf(i7), Integer.valueOf(i8), Boolean.valueOf(z3), Integer.valueOf(i), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12));
        } else {
            notificationCenter.lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z2), Boolean.valueOf(z3), Integer.valueOf(i3));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$183(Timer.Task task, Timer timer, TLRPC.messages_Messages messages_messages, final boolean z, final boolean z2, final int i, boolean z3, final int i2, int i3, final int i4, final long j, final ArrayList arrayList, long j2, final int i5, final int i6, final boolean z4, final int i7, final int i8, final int i9, final int i10, final int i11, final int i12, ArrayList arrayList2, HashMap hashMap) {
        int i13;
        int i14;
        int i15;
        int i16;
        MessagesController messagesController;
        int i17;
        long j3;
        Timer.done(task);
        Timer.Task start = Timer.start(timer, "processLoadedMessages: post runOnUIThread");
        putUsers(messages_messages.users, z);
        putChats(messages_messages.chats, z);
        if (messages_messages.animatedEmoji != null && z2) {
            AnimatedEmojiDrawable.getDocumentFetcher(this.currentAccount).processDocuments(messages_messages.animatedEmoji);
        }
        if (i == 1) {
            i15 = 0;
        } else {
            if (z3 && i2 == 2) {
                i14 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                for (int i18 = 0; i18 < messages_messages.messages.size(); i18++) {
                    TLRPC.Message message = messages_messages.messages.get(i18);
                    if ((!message.out || message.from_scheduled) && (i16 = message.id) > i3 && i16 < i14) {
                        i14 = i16;
                    }
                }
                i13 = i3;
            } else {
                i13 = i3;
                i14 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            i15 = i14 == Integer.MAX_VALUE ? i13 : i14;
        }
        if (i == 1 && i4 == 1) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()), Boolean.FALSE);
        }
        if (DialogObject.isEncryptedDialog(j) || i == 5) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z), Integer.valueOf(i15), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i2), Boolean.valueOf(z4), Integer.valueOf(i5), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12), Integer.valueOf(i));
        } else {
            final Timer.Task start2 = Timer.start(timer, "loadReplyMessagesForMessages");
            final int i19 = i15;
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i, j2, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda413
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedMessages$182(start2, z2, i5, i6, z, z4, i7, j, i4, arrayList, i19, i8, i9, i2, i10, i11, i12, i);
                }
            }, i5, timer);
        }
        if (arrayList2.isEmpty()) {
            messagesController = this;
            i17 = i;
            j3 = j;
        } else {
            messagesController = this;
            i17 = i;
            j3 = j;
            messagesController.reloadMessages(arrayList2, j3, i17);
        }
        if (!hashMap.isEmpty()) {
            messagesController.reloadWebPages(j3, hashMap, i17);
        }
        Timer.done(start);
        Timer.finish(timer);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$360(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$361(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$362(TLRPC.TL_updateUserTyping tL_updateUserTyping) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(tL_updateUserTyping.user_id), tL_updateUserTyping.action);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$363(TLRPC.TL_updateChatUserTyping tL_updateChatUserTyping) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(-tL_updateChatUserTyping.chat_id), tL_updateChatUserTyping.action);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$364(TLRPC.TL_updatePeerBlocked tL_updatePeerBlocked) {
        long peerId = MessageObject.getPeerId(tL_updatePeerBlocked.peer_id);
        if (!tL_updatePeerBlocked.blocked) {
            this.blockePeers.delete(peerId);
        } else if (this.blockePeers.indexOfKey(peerId) < 0) {
            this.blockePeers.put(peerId, 1);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getStoriesController().updateBlockUser(peerId, tL_updatePeerBlocked.blocked_my_stories_from, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$365(final TLRPC.TL_updatePeerBlocked tL_updatePeerBlocked) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$364(tL_updatePeerBlocked);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$366(TLRPC.TL_updateServiceNotification tL_updateServiceNotification) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needShowAlert, 2, tL_updateServiceNotification.message, tL_updateServiceNotification.type);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$367(TLRPC.Message message) {
        getSendMessagesHelper().onMessageEdited(message);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$368(TLRPC.TL_updateLangPack tL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tL_updateLangPack.difference, this.currentAccount);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$369(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$370(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda400
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$369(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$371(LongSparseArray longSparseArray) {
        getNotificationsController().processEditedMessages(longSparseArray);
        getTopicsController().processEditedMessages(longSparseArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$372(final LongSparseArray longSparseArray) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda69
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$371(longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$373(TLRPC.User user) {
        getContactsController().addContactToPhoneBook(user, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$374() {
        getNotificationsController().deleteNotificationChannelGlobal(0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$375() {
        getNotificationsController().deleteNotificationChannelGlobal(1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$376() {
        getNotificationsController().deleteNotificationChannelGlobal(2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$377(TLRPC.TL_updateChannel tL_updateChannel) {
        getChannelDifference(tL_updateChannel.channel_id, 1, 0L, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$378(TLRPC.Chat chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRightsUpdated, chat);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$379(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:298:0x0640, code lost:
    
        if (r4 == r15) goto L289;
     */
    /* JADX WARN: Code restructure failed: missing block: B:300:0x0644, code lost:
    
        if (r7 == r6) goto L292;
     */
    /* JADX WARN: Code restructure failed: missing block: B:531:0x0b3b, code lost:
    
        if (r4.getCallState() == 0) goto L529;
     */
    /* JADX WARN: Removed duplicated region for block: B:303:0x066f  */
    /* JADX WARN: Removed duplicated region for block: B:566:0x0c13  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x015a  */
    /* JADX WARN: Removed duplicated region for block: B:864:0x1367  */
    /* JADX WARN: Removed duplicated region for block: B:870:0x1382  */
    /* JADX WARN: Removed duplicated region for block: B:930:0x1494  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x14a2  */
    /* JADX WARN: Removed duplicated region for block: B:934:0x14a8  */
    /* JADX WARN: Removed duplicated region for block: B:937:0x14b4  */
    /* JADX WARN: Removed duplicated region for block: B:942:0x14cd A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:946:0x14f0  */
    /* JADX WARN: Removed duplicated region for block: B:949:0x1506  */
    /* JADX WARN: Removed duplicated region for block: B:952:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$380(int i, ArrayList arrayList, ArrayList arrayList2, LongSparseArray longSparseArray, int i2, LongSparseIntArray longSparseIntArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, ArrayList arrayList3, LongSparseArray longSparseArray4, LongSparseArray longSparseArray5, boolean z, ArrayList arrayList4, ArrayList arrayList5, LongSparseArray longSparseArray6, LongSparseArray longSparseArray7, LongSparseArray longSparseArray8, ArrayList arrayList6) {
        MessagesController messagesController;
        int i3;
        int i4;
        boolean z2;
        LongSparseArray longSparseArray9;
        LongSparseArray longSparseArray10;
        LongSparseArray longSparseArray11;
        boolean z3;
        int i5;
        MessageObject messageObject;
        LongSparseArray longSparseArray12;
        int i6;
        LongSparseArray longSparseArray13;
        int i7;
        long j;
        boolean z4;
        int i8;
        int i9;
        ArrayList<TLRPC.User> arrayList7;
        int i10;
        long j2;
        String str;
        TLRPC.ChatFull chatFull;
        TLRPC.UserFull userFull;
        char c;
        long j3;
        boolean z5;
        int callStateForSubscription;
        boolean z6;
        String str2;
        TLRPC.TL_inputGroupCall tL_inputGroupCall;
        SharedPreferences.Editor edit;
        String str3;
        int i11;
        TLRPC.Dialog dialog;
        ChatObject.Call groupCall;
        long j4;
        long j5;
        NotificationsSettingsFacade notificationsSettingsFacade;
        TLRPC.NotificationSound notificationSound;
        int i12;
        boolean z7;
        Boolean bool;
        Boolean bool2;
        Boolean bool3;
        TLRPC.User user;
        TLRPC.UserProfilePhoto userProfilePhoto;
        boolean z8;
        String formatString;
        long j6;
        ArrayList<Long> arrayList8;
        long j7;
        TLRPC.TL_user tL_user;
        String str4;
        int i13;
        ContactsController contactsController;
        ArrayList<TLRPC.PrivacyRule> arrayList9;
        int i14;
        ArrayList arrayList10 = arrayList;
        int i15 = 0;
        if (arrayList10 != null) {
            ArrayList<TLRPC.User> arrayList11 = new ArrayList<>();
            ArrayList<TLRPC.User> arrayList12 = new ArrayList<>();
            int size = arrayList.size();
            i3 = i;
            int i16 = 0;
            SharedPreferences.Editor editor = null;
            int i17 = 0;
            boolean z9 = false;
            while (i16 < size) {
                TLRPC.Update update = (TLRPC.Update) arrayList10.get(i16);
                if (update instanceof TLRPC.TL_updatePrivacy) {
                    TLRPC.TL_updatePrivacy tL_updatePrivacy = (TLRPC.TL_updatePrivacy) update;
                    TLRPC.PrivacyKey privacyKey = tL_updatePrivacy.key;
                    if (privacyKey instanceof TLRPC.TL_privacyKeyStatusTimestamp) {
                        getContactsController().setPrivacyRules(tL_updatePrivacy.rules, i15);
                    } else {
                        if (privacyKey instanceof TLRPC.TL_privacyKeyChatInvite) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 1;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyPhoneCall) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 2;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyPhoneP2P) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 3;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyProfilePhoto) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 4;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyForwards) {
                            getContactsController().setPrivacyRules(tL_updatePrivacy.rules, 5);
                            i9 = i16;
                            arrayList7 = arrayList12;
                            i10 = size;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyPhoneNumber) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 6;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyAddedByPhone) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 7;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyVoiceMessages) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 8;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyAbout) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 9;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyBirthday) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 11;
                        } else if (privacyKey instanceof TLRPC.TL_privacyKeyStarGiftsAutoSave) {
                            contactsController = getContactsController();
                            arrayList9 = tL_updatePrivacy.rules;
                            i14 = 12;
                        }
                        contactsController.setPrivacyRules(arrayList9, i14);
                    }
                    i9 = i16;
                    arrayList7 = arrayList12;
                    i10 = size;
                } else if (update instanceof TLRPC.TL_updateStarsRevenueStatus) {
                    BotStarsController.getInstance(this.currentAccount).onUpdate((TLRPC.TL_updateStarsRevenueStatus) update);
                    i9 = i16;
                    arrayList7 = arrayList12;
                    i10 = size;
                } else {
                    if (update instanceof TLRPC.TL_updateUserStatus) {
                        TLRPC.TL_updateUserStatus tL_updateUserStatus = (TLRPC.TL_updateUserStatus) update;
                        i8 = size;
                        TLRPC.User user2 = getUser(Long.valueOf(tL_updateUserStatus.user_id));
                        TLRPC.UserStatus userStatus = tL_updateUserStatus.status;
                        if (userStatus instanceof TLRPC.TL_userStatusRecently) {
                            i13 = -100;
                        } else if (userStatus instanceof TLRPC.TL_userStatusLastWeek) {
                            i13 = -101;
                        } else {
                            if (userStatus instanceof TLRPC.TL_userStatusLastMonth) {
                                i13 = -102;
                            }
                            if (user2 != null) {
                                user2.id = tL_updateUserStatus.user_id;
                                user2.status = userStatus;
                            }
                            TLRPC.TL_user tL_user2 = new TLRPC.TL_user();
                            tL_user2.id = tL_updateUserStatus.user_id;
                            tL_user2.status = tL_updateUserStatus.status;
                            arrayList12.add(tL_user2);
                            if (tL_updateUserStatus.user_id == getUserConfig().getClientUserId()) {
                                getNotificationsController().setLastOnlineFromOtherDevice(tL_updateUserStatus.status.expires);
                            }
                        }
                        userStatus.expires = i13;
                        if (user2 != null) {
                        }
                        TLRPC.TL_user tL_user22 = new TLRPC.TL_user();
                        tL_user22.id = tL_updateUserStatus.user_id;
                        tL_user22.status = tL_updateUserStatus.status;
                        arrayList12.add(tL_user22);
                        if (tL_updateUserStatus.user_id == getUserConfig().getClientUserId()) {
                        }
                    } else {
                        i8 = size;
                        if (update instanceof TLRPC.TL_updatePeerWallpaper) {
                            ChatThemeController.getInstance(this.currentAccount).processUpdate((TLRPC.TL_updatePeerWallpaper) update);
                        } else {
                            if (update instanceof TLRPC.TL_updateUserEmojiStatus) {
                                TLRPC.TL_updateUserEmojiStatus tL_updateUserEmojiStatus = (TLRPC.TL_updateUserEmojiStatus) update;
                                TLRPC.User user3 = getUser(Long.valueOf(tL_updateUserEmojiStatus.user_id));
                                if (user3 != null) {
                                    user3.id = tL_updateUserEmojiStatus.user_id;
                                    user3.emoji_status = tL_updateUserEmojiStatus.emoji_status;
                                    if (UserObject.isUserSelf(user3)) {
                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userEmojiStatusUpdated, user3);
                                    }
                                }
                                tL_user = new TLRPC.TL_user();
                                tL_user.id = tL_updateUserEmojiStatus.user_id;
                                tL_user.emoji_status = tL_updateUserEmojiStatus.emoji_status;
                            } else if (update instanceof TLRPC.TL_updateUserName) {
                                TLRPC.TL_updateUserName tL_updateUserName = (TLRPC.TL_updateUserName) update;
                                TLRPC.User user4 = getUser(Long.valueOf(tL_updateUserName.user_id));
                                if (user4 != null) {
                                    if (!UserObject.isContact(user4)) {
                                        user4.first_name = tL_updateUserName.first_name;
                                        user4.last_name = tL_updateUserName.last_name;
                                    }
                                    if (user4.usernames != null) {
                                        for (int i18 = 0; i18 < user4.usernames.size(); i18++) {
                                            TLRPC.TL_username tL_username = user4.usernames.get(i18);
                                            if (tL_username != null && !TextUtils.isEmpty(tL_username.username)) {
                                                this.objectsByUsernames.remove(tL_username.username);
                                            }
                                        }
                                    }
                                    for (int i19 = 0; i19 < tL_updateUserName.usernames.size(); i19++) {
                                        String str5 = tL_updateUserName.usernames.get(i19).username;
                                        if (!TextUtils.isEmpty(str5) && tL_updateUserName.usernames.get(i19).active) {
                                            this.objectsByUsernames.put(str5, user4);
                                        }
                                    }
                                    ArrayList<TLRPC.TL_username> arrayList13 = tL_updateUserName.usernames;
                                    if (arrayList13 == null || arrayList13.size() <= 1) {
                                        ArrayList<TLRPC.TL_username> arrayList14 = tL_updateUserName.usernames;
                                        user4.username = (arrayList14 == null || arrayList14.size() != 1) ? null : tL_updateUserName.usernames.get(0).username;
                                        user4.usernames.clear();
                                    } else {
                                        user4.username = null;
                                        user4.usernames = tL_updateUserName.usernames;
                                    }
                                }
                                tL_user = new TLRPC.TL_user();
                                tL_user.id = tL_updateUserName.user_id;
                                tL_user.first_name = tL_updateUserName.first_name;
                                tL_user.last_name = tL_updateUserName.last_name;
                                ArrayList<TLRPC.TL_username> arrayList15 = tL_updateUserName.usernames;
                                if (arrayList15 != null && arrayList15.size() == 1) {
                                    str4 = tL_updateUserName.usernames.get(0).username;
                                    tL_user.username = str4;
                                }
                                str4 = null;
                                tL_user.username = str4;
                            } else if (update instanceof TLRPC.TL_updateDialogPinned) {
                                TLRPC.TL_updateDialogPinned tL_updateDialogPinned = (TLRPC.TL_updateDialogPinned) update;
                                TLRPC.DialogPeer dialogPeer = tL_updateDialogPinned.peer;
                                long peerDialogId = dialogPeer instanceof TLRPC.TL_dialogPeer ? DialogObject.getPeerDialogId(((TLRPC.TL_dialogPeer) dialogPeer).peer) : 0L;
                                i9 = i16;
                                arrayList7 = arrayList12;
                                i10 = i8;
                                if (!pinDialog(peerDialogId, tL_updateDialogPinned.pinned, null, -1L)) {
                                    getUserConfig().setPinnedDialogsLoaded(tL_updateDialogPinned.folder_id, false);
                                    getUserConfig().saveConfig(false);
                                    loadPinnedDialogs(tL_updateDialogPinned.folder_id, peerDialogId, null);
                                }
                            } else {
                                i9 = i16;
                                arrayList7 = arrayList12;
                                i10 = i8;
                                if (update instanceof TLRPC.TL_updatePinnedDialogs) {
                                    TLRPC.TL_updatePinnedDialogs tL_updatePinnedDialogs = (TLRPC.TL_updatePinnedDialogs) update;
                                    getUserConfig().setPinnedDialogsLoaded(tL_updatePinnedDialogs.folder_id, false);
                                    getUserConfig().saveConfig(false);
                                    if ((tL_updatePinnedDialogs.flags & 1) != 0) {
                                        arrayList8 = new ArrayList<>();
                                        ArrayList<TLRPC.DialogPeer> arrayList16 = tL_updatePinnedDialogs.order;
                                        int size2 = arrayList16.size();
                                        for (int i20 = 0; i20 < size2; i20++) {
                                            TLRPC.DialogPeer dialogPeer2 = arrayList16.get(i20);
                                            if (dialogPeer2 instanceof TLRPC.TL_dialogPeer) {
                                                TLRPC.Peer peer = ((TLRPC.TL_dialogPeer) dialogPeer2).peer;
                                                j7 = peer.user_id;
                                                if (j7 == 0) {
                                                    long j8 = peer.chat_id;
                                                    if (j8 == 0) {
                                                        j8 = peer.channel_id;
                                                    }
                                                    j7 = -j8;
                                                }
                                            } else {
                                                j7 = 0;
                                            }
                                            arrayList8.add(Long.valueOf(j7));
                                        }
                                        j6 = 0;
                                    } else {
                                        j6 = 0;
                                        arrayList8 = null;
                                    }
                                    loadPinnedDialogs(tL_updatePinnedDialogs.folder_id, j6, arrayList8);
                                } else if (update instanceof TLRPC.TL_updateUserPhoto) {
                                    TLRPC.TL_updateUserPhoto tL_updateUserPhoto = (TLRPC.TL_updateUserPhoto) update;
                                    TLRPC.User user5 = getUser(Long.valueOf(tL_updateUserPhoto.user_id));
                                    if (user5 != null) {
                                        user5.photo = tL_updateUserPhoto.photo;
                                    }
                                    TLRPC.TL_user tL_user3 = new TLRPC.TL_user();
                                    tL_user3.id = tL_updateUserPhoto.user_id;
                                    tL_user3.photo = tL_updateUserPhoto.photo;
                                    arrayList11.add(tL_user3);
                                    if (UserObject.isUserSelf(user5)) {
                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                    }
                                } else if (update instanceof TLRPC.TL_updateNewStoryReaction) {
                                    TLRPC.TL_updateNewStoryReaction tL_updateNewStoryReaction = (TLRPC.TL_updateNewStoryReaction) update;
                                    long peerDialogId2 = DialogObject.getPeerDialogId(tL_updateNewStoryReaction.peer);
                                    int i21 = tL_updateNewStoryReaction.story_id;
                                    TLRPC.Message message = new TLRPC.Message();
                                    message.id = -i21;
                                    message.dialog_id = peerDialogId2;
                                    message.peer_id = getPeer(peerDialogId2);
                                    message.date = getConnectionsManager().getCurrentTime();
                                    TLRPC.User user6 = getMessagesController().getUser(Long.valueOf(message.dialog_id));
                                    if (user6 == null || !getNotificationsSettings(this.currentAccount).getBoolean("EnableReactionsPreview", true)) {
                                        z8 = false;
                                        formatString = LocaleController.formatString(R.string.PushReactStoryHidden, new Object[0]);
                                    } else {
                                        ReactionsLayoutInBubble.VisibleReaction flatten = ReactionsLayoutInBubble.VisibleReaction.fromTL(tL_updateNewStoryReaction.reaction).flatten();
                                        if (flatten.emojicon != null) {
                                            z8 = false;
                                            formatString = LocaleController.formatString(R.string.PushReactStory, UserObject.getFirstName(user6), flatten.emojicon);
                                        } else {
                                            z8 = false;
                                            formatString = LocaleController.formatString(R.string.PushReactStoryHidden, new Object[0]);
                                        }
                                    }
                                    message.message = formatString;
                                    ArrayList<MessageObject> arrayList17 = new ArrayList<>();
                                    MessageObject messageObject2 = new MessageObject(this.currentAccount, message, z8, z8);
                                    messageObject2.isStoryReactionPush = true;
                                    messageObject2.localType = 1;
                                    messageObject2.localUserName = (user6 == null || UserObject.isDeleted(user6)) ? LocaleController.getString(R.string.PushReactStoryHiddenSender) : UserObject.getFirstName(user6);
                                    arrayList17.add(messageObject2);
                                    getNotificationsController().processNewMessages(arrayList17, true, false, null);
                                } else if (update instanceof TLRPC.TL_updateBroadcastRevenueTransactions) {
                                    TLRPC.TL_updateBroadcastRevenueTransactions tL_updateBroadcastRevenueTransactions = (TLRPC.TL_updateBroadcastRevenueTransactions) update;
                                    ChannelMonetizationLayout channelMonetizationLayout = ChannelMonetizationLayout.instance;
                                    if (channelMonetizationLayout != null && channelMonetizationLayout.dialogId == DialogObject.getPeerDialogId(tL_updateBroadcastRevenueTransactions.peer)) {
                                        ChannelMonetizationLayout.instance.setupBalances(tL_updateBroadcastRevenueTransactions.balances);
                                        ChannelMonetizationLayout.instance.reloadTransactions();
                                    }
                                } else if (update instanceof TLRPC.TL_updateStarsBalance) {
                                    StarsController.getInstance(this.currentAccount).updateBalance(((TLRPC.TL_updateStarsBalance) update).balance);
                                    StarsController.getInstance(this.currentAccount).invalidateTransactions(false);
                                } else if (update instanceof TLRPC.TL_updateUser) {
                                    TLRPC.TL_updateUser tL_updateUser = (TLRPC.TL_updateUser) update;
                                    TLRPC.User user7 = getUser(Long.valueOf(tL_updateUser.user_id));
                                    if (arrayList2 != null) {
                                        for (int i22 = 0; i22 < arrayList2.size(); i22++) {
                                            user = (TLRPC.User) arrayList2.get(i22);
                                            if (user != null && user.id == tL_updateUser.user_id) {
                                                break;
                                            }
                                        }
                                    }
                                    user = null;
                                    if (user != null && (userProfilePhoto = user.photo) != null) {
                                        if (user7 != null) {
                                            user7.photo = userProfilePhoto;
                                        }
                                        TLRPC.TL_user tL_user4 = new TLRPC.TL_user();
                                        tL_user4.id = user.id;
                                        tL_user4.photo = user.photo;
                                        arrayList11.add(tL_user4);
                                    }
                                    if (UserObject.isUserSelf(user7)) {
                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                    }
                                } else if (update instanceof TLRPC.TL_updateUserPhone) {
                                    TLRPC.TL_updateUserPhone tL_updateUserPhone = (TLRPC.TL_updateUserPhone) update;
                                    final TLRPC.User user8 = getUser(Long.valueOf(tL_updateUserPhone.user_id));
                                    if (user8 != null) {
                                        user8.phone = tL_updateUserPhone.phone;
                                        Utilities.phoneBookQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda250
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesController.this.lambda$processUpdateArray$373(user8);
                                            }
                                        });
                                        if (UserObject.isUserSelf(user8)) {
                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                        }
                                    }
                                    TLRPC.TL_user tL_user5 = new TLRPC.TL_user();
                                    tL_user5.id = tL_updateUserPhone.user_id;
                                    tL_user5.phone = tL_updateUserPhone.phone;
                                    arrayList11.add(tL_user5);
                                } else {
                                    if (update instanceof TLRPC.TL_updateNotifySettings) {
                                        TLRPC.TL_updateNotifySettings tL_updateNotifySettings = (TLRPC.TL_updateNotifySettings) update;
                                        if (tL_updateNotifySettings.notify_settings instanceof TLRPC.TL_peerNotifySettings) {
                                            int i23 = i17 | DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                                            if (editor == null) {
                                                editor = this.notificationsPreferences.edit();
                                            }
                                            SharedPreferences.Editor editor2 = editor;
                                            getConnectionsManager().getCurrentTime();
                                            TLRPC.NotifyPeer notifyPeer = tL_updateNotifySettings.peer;
                                            boolean z10 = notifyPeer instanceof TLRPC.TL_notifyPeer;
                                            if (z10 || (notifyPeer instanceof TLRPC.TL_notifyForumTopic)) {
                                                if (z10) {
                                                    TLRPC.Peer peer2 = ((TLRPC.TL_notifyPeer) notifyPeer).peer;
                                                    j4 = peer2.user_id;
                                                    j5 = 0;
                                                    if (j4 == 0) {
                                                        long j9 = peer2.chat_id;
                                                        j4 = j9 != 0 ? -j9 : -peer2.channel_id;
                                                    }
                                                } else {
                                                    TLRPC.TL_notifyForumTopic tL_notifyForumTopic = (TLRPC.TL_notifyForumTopic) notifyPeer;
                                                    TLRPC.Peer peer3 = tL_notifyForumTopic.peer;
                                                    long j10 = peer3.user_id;
                                                    if (j10 != 0) {
                                                        j4 = j10;
                                                    } else {
                                                        long j11 = peer3.chat_id;
                                                        j4 = j11 != 0 ? -j11 : -peer3.channel_id;
                                                    }
                                                    j5 = tL_notifyForumTopic.top_msg_id;
                                                }
                                                getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j4, j5, tL_updateNotifySettings.notify_settings);
                                            } else {
                                                if (notifyPeer instanceof TLRPC.TL_notifyChats) {
                                                    TLRPC.PeerNotifySettings peerNotifySettings = tL_updateNotifySettings.notify_settings;
                                                    if ((peerNotifySettings.flags & 1) != 0) {
                                                        editor2.putBoolean("EnablePreviewGroup", peerNotifySettings.show_previews);
                                                    }
                                                    if ((tL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                        int i24 = this.notificationsPreferences.getInt("EnableGroup2", 0);
                                                        int i25 = tL_updateNotifySettings.notify_settings.mute_until;
                                                        if (i24 != i25) {
                                                            editor2.putInt("EnableGroup2", i25);
                                                            editor2.putBoolean("overwrite_group", true);
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesController.this.lambda$processUpdateArray$374();
                                                                }
                                                            });
                                                        }
                                                    }
                                                    notificationsSettingsFacade = getNotificationsController().getNotificationsSettingsFacade();
                                                    notificationSound = tL_updateNotifySettings.notify_settings.android_sound;
                                                    i12 = 0;
                                                } else if (notifyPeer instanceof TLRPC.TL_notifyUsers) {
                                                    TLRPC.PeerNotifySettings peerNotifySettings2 = tL_updateNotifySettings.notify_settings;
                                                    if ((peerNotifySettings2.flags & 1) != 0) {
                                                        editor2.putBoolean("EnablePreviewAll", peerNotifySettings2.show_previews);
                                                    }
                                                    int i26 = tL_updateNotifySettings.notify_settings.flags;
                                                    if (this.notificationsPreferences.contains("EnableAllStories")) {
                                                        z7 = true;
                                                        bool = Boolean.valueOf(this.notificationsPreferences.getBoolean("EnableAllStories", true));
                                                    } else {
                                                        z7 = true;
                                                        bool = null;
                                                    }
                                                    Boolean valueOf = this.notificationsPreferences.contains("EnableHideStoriesSenders") ? Boolean.valueOf(this.notificationsPreferences.getBoolean("EnableHideStoriesSenders", z7)) : null;
                                                    TLRPC.PeerNotifySettings peerNotifySettings3 = tL_updateNotifySettings.notify_settings;
                                                    if ((peerNotifySettings3.flags & 64) != 0) {
                                                        boolean z11 = !peerNotifySettings3.stories_muted;
                                                        bool2 = Boolean.valueOf(z11);
                                                        editor2.putBoolean("EnableAllStories", z11);
                                                    } else {
                                                        bool2 = null;
                                                    }
                                                    TLRPC.PeerNotifySettings peerNotifySettings4 = tL_updateNotifySettings.notify_settings;
                                                    if ((peerNotifySettings4.flags & 128) != 0) {
                                                        boolean z12 = peerNotifySettings4.stories_hide_sender;
                                                        bool3 = Boolean.valueOf(z12);
                                                        editor2.putBoolean("EnableHideStoriesSenders", z12);
                                                    } else {
                                                        bool3 = null;
                                                    }
                                                    if ((bool == null) == (bool2 == null)) {
                                                        if ((valueOf == null) == (bool3 == null)) {
                                                            if (bool != null) {
                                                            }
                                                            if (valueOf != null) {
                                                            }
                                                            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_updateNotifySettings.notify_settings.android_sound, editor2, 0L, 0L, 1, false);
                                                            if ((tL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                                int i27 = this.notificationsPreferences.getInt("EnableAll2", 0);
                                                                int i28 = tL_updateNotifySettings.notify_settings.mute_until;
                                                                if (i27 != i28) {
                                                                    editor2.putInt("EnableAll2", i28);
                                                                    editor2.putBoolean("overwrite_private", true);
                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda252
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            MessagesController.this.lambda$processUpdateArray$375();
                                                                        }
                                                                    });
                                                                }
                                                            }
                                                        }
                                                    }
                                                    editor2.putBoolean("overwrite_stories", true);
                                                    getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_updateNotifySettings.notify_settings.android_sound, editor2, 0L, 0L, 1, false);
                                                    if ((tL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                    }
                                                } else if (notifyPeer instanceof TLRPC.TL_notifyBroadcasts) {
                                                    TLRPC.PeerNotifySettings peerNotifySettings5 = tL_updateNotifySettings.notify_settings;
                                                    if ((peerNotifySettings5.flags & 1) != 0) {
                                                        editor2.putBoolean("EnablePreviewChannel", peerNotifySettings5.show_previews);
                                                    }
                                                    if ((tL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                        int i29 = this.notificationsPreferences.getInt("EnableChannel2", 0);
                                                        int i30 = tL_updateNotifySettings.notify_settings.mute_until;
                                                        if (i29 != i30) {
                                                            editor2.putInt("EnableChannel2", i30);
                                                            editor2.putBoolean("overwrite_channel", true);
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda253
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesController.this.lambda$processUpdateArray$376();
                                                                }
                                                            });
                                                        }
                                                    }
                                                    notificationsSettingsFacade = getNotificationsController().getNotificationsSettingsFacade();
                                                    notificationSound = tL_updateNotifySettings.notify_settings.android_sound;
                                                    i12 = 2;
                                                }
                                                notificationsSettingsFacade.applySoundSettings(notificationSound, editor2, 0L, 0L, i12, false);
                                            }
                                            getMessagesStorage().updateMutedDialogsFiltersCounters();
                                            i17 = i23;
                                            editor = editor2;
                                        }
                                    } else if (update instanceof TLRPC.TL_updateNewAuthorization) {
                                        getUnconfirmedAuthController().processUpdate((TLRPC.TL_updateNewAuthorization) update);
                                    } else if (update instanceof TLRPC.TL_updateChannel) {
                                        final TLRPC.TL_updateChannel tL_updateChannel = (TLRPC.TL_updateChannel) update;
                                        TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(-tL_updateChannel.channel_id);
                                        TLRPC.Chat chat = getChat(Long.valueOf(tL_updateChannel.channel_id));
                                        if (chat != null) {
                                            if (dialog2 == null && (chat instanceof TLRPC.TL_channel) && !chat.left) {
                                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda254
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesController.this.lambda$processUpdateArray$377(tL_updateChannel);
                                                    }
                                                });
                                            } else if (ChatObject.isNotInChat(chat) && dialog2 != null && ((dialog = this.promoDialog) == null || dialog.id != dialog2.id)) {
                                                deleteDialog(dialog2.id, 0);
                                            }
                                            if (((chat instanceof TLRPC.TL_channelForbidden) || chat.kicked) && (groupCall = getGroupCall(chat.id, false)) != null) {
                                                TLRPC.TL_updateGroupCall tL_updateGroupCall = new TLRPC.TL_updateGroupCall();
                                                tL_updateGroupCall.chat_id = chat.id;
                                                TLRPC.TL_groupCallDiscarded tL_groupCallDiscarded = new TLRPC.TL_groupCallDiscarded();
                                                tL_updateGroupCall.call = tL_groupCallDiscarded;
                                                TLRPC.GroupCall groupCall2 = groupCall.call;
                                                tL_groupCallDiscarded.id = groupCall2.id;
                                                tL_groupCallDiscarded.access_hash = groupCall2.access_hash;
                                                groupCall.processGroupCallUpdate(tL_updateGroupCall);
                                                if (VoIPService.getSharedInstance() != null) {
                                                    VoIPService.getSharedInstance().onGroupCallUpdated(tL_updateGroupCall.call);
                                                }
                                            }
                                        }
                                        int i31 = i3 | UPDATE_MASK_CHAT;
                                        loadFullChat(tL_updateChannel.channel_id, 0, true);
                                        i3 = i31;
                                    } else if (update instanceof TLRPC.TL_updateChat) {
                                        TLRPC.TL_updateChat tL_updateChat = (TLRPC.TL_updateChat) update;
                                        TLRPC.Chat chat2 = getChat(Long.valueOf(tL_updateChat.chat_id));
                                        if (chat2 != null && ((chat2 instanceof TLRPC.TL_chatForbidden) || chat2.kicked)) {
                                            ChatObject.Call groupCall3 = getGroupCall(chat2.id, false);
                                            if (groupCall3 != null) {
                                                TLRPC.TL_updateGroupCall tL_updateGroupCall2 = new TLRPC.TL_updateGroupCall();
                                                tL_updateGroupCall2.chat_id = chat2.id;
                                                TLRPC.TL_groupCallDiscarded tL_groupCallDiscarded2 = new TLRPC.TL_groupCallDiscarded();
                                                tL_updateGroupCall2.call = tL_groupCallDiscarded2;
                                                TLRPC.GroupCall groupCall4 = groupCall3.call;
                                                tL_groupCallDiscarded2.id = groupCall4.id;
                                                tL_groupCallDiscarded2.access_hash = groupCall4.access_hash;
                                                groupCall3.processGroupCallUpdate(tL_updateGroupCall2);
                                                if (VoIPService.getSharedInstance() != null) {
                                                    VoIPService.getSharedInstance().onGroupCallUpdated(tL_updateGroupCall2.call);
                                                }
                                            }
                                            TLRPC.Dialog dialog3 = (TLRPC.Dialog) this.dialogs_dict.get(-chat2.id);
                                            if (dialog3 != null) {
                                                long j12 = dialog3.id;
                                                i11 = 0;
                                                deleteDialog(j12, 0);
                                                int i32 = i3 | UPDATE_MASK_CHAT;
                                                loadFullChat(tL_updateChat.chat_id, i11, true);
                                                i3 = i32;
                                            }
                                        }
                                        i11 = 0;
                                        int i322 = i3 | UPDATE_MASK_CHAT;
                                        loadFullChat(tL_updateChat.chat_id, i11, true);
                                        i3 = i322;
                                    } else if (update instanceof TLRPC.TL_updateChatDefaultBannedRights) {
                                        TLRPC.TL_updateChatDefaultBannedRights tL_updateChatDefaultBannedRights = (TLRPC.TL_updateChatDefaultBannedRights) update;
                                        TLRPC.Peer peer4 = tL_updateChatDefaultBannedRights.peer;
                                        long j13 = peer4.channel_id;
                                        if (j13 == 0) {
                                            j13 = peer4.chat_id;
                                        }
                                        final TLRPC.Chat chat3 = getChat(Long.valueOf(j13));
                                        if (chat3 != null) {
                                            chat3.default_banned_rights = tL_updateChatDefaultBannedRights.default_banned_rights;
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda255
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$378(chat3);
                                                }
                                            });
                                        }
                                    } else if (update instanceof TLRPC.TL_updateBotCommands) {
                                        TLRPC.TL_updateBotCommands tL_updateBotCommands = (TLRPC.TL_updateBotCommands) update;
                                        getMediaDataController().updateBotInfo(MessageObject.getPeerId(tL_updateBotCommands.peer), tL_updateBotCommands);
                                    } else if (update instanceof TLRPC.TL_updateStickerSets) {
                                        getMediaDataController().loadStickers(0, false, true);
                                    } else if (update instanceof TLRPC.TL_updateStickerSetsOrder) {
                                        TLRPC.TL_updateStickerSetsOrder tL_updateStickerSetsOrder = (TLRPC.TL_updateStickerSetsOrder) update;
                                        getMediaDataController().reorderStickers(tL_updateStickerSetsOrder.masks ? 1 : tL_updateStickerSetsOrder.emojis ? 5 : 0, tL_updateStickerSetsOrder.order, false);
                                    } else {
                                        boolean z13 = update instanceof TLRPC.TL_updateRecentReactions;
                                        if (z13) {
                                            getMediaDataController().loadRecentAndTopReactions(true);
                                        } else if (z13) {
                                            getMediaDataController().loadSavedReactions(true);
                                        } else if (update instanceof TLRPC.TL_updateSavedReactionTags) {
                                            getSavedReactionTags(0L, true);
                                        } else if (update instanceof TLRPC.TL_updateFavedStickers) {
                                            getMediaDataController().loadRecents(2, false, false, true);
                                        } else if (update instanceof TLRPC.TL_updateContactsReset) {
                                            getContactsController().forceImportContacts();
                                        } else if (update instanceof TLRPC.TL_updateNewStickerSet) {
                                            getMediaDataController().addNewStickerSet(((TLRPC.TL_updateNewStickerSet) update).stickerset);
                                        } else {
                                            if (update instanceof TLRPC.TL_updateSavedGifs) {
                                                edit = this.emojiPreferences.edit();
                                                str3 = "lastGifLoadTime";
                                                j2 = 0;
                                            } else {
                                                j2 = 0;
                                                if (update instanceof TLRPC.TL_updateRecentStickers) {
                                                    edit = this.emojiPreferences.edit();
                                                    str3 = "lastStickersLoadTime";
                                                } else if (update instanceof TLRPC.TL_updateDraftMessage) {
                                                    TLRPC.TL_updateDraftMessage tL_updateDraftMessage = (TLRPC.TL_updateDraftMessage) update;
                                                    TLRPC.Peer peer5 = tL_updateDraftMessage.peer;
                                                    long j14 = peer5.user_id;
                                                    if (j14 == 0) {
                                                        long j15 = peer5.channel_id;
                                                        j14 = j15 != 0 ? -j15 : -peer5.chat_id;
                                                    }
                                                    getMediaDataController().saveDraft(j14, tL_updateDraftMessage.top_msg_id, tL_updateDraftMessage.draft, null, true);
                                                    z9 = true;
                                                    arrayList10 = arrayList;
                                                    i16 = i9 + 1;
                                                    size = i10;
                                                    arrayList12 = arrayList7;
                                                    i15 = 0;
                                                } else if (update instanceof TL_stories.TL_updateStoriesStealthMode) {
                                                    getStoriesController().setStealthMode(((TL_stories.TL_updateStoriesStealthMode) update).stealth_mode);
                                                } else if (update instanceof TLRPC.TL_updateReadFeaturedStickers) {
                                                    getMediaDataController().markFeaturedStickersAsRead(false, false);
                                                } else if (update instanceof TLRPC.TL_updateReadFeaturedEmojiStickers) {
                                                    getMediaDataController().markFeaturedStickersAsRead(true, false);
                                                } else if (update instanceof TLRPC.TL_updateMoveStickerSetToTop) {
                                                    TLRPC.TL_updateMoveStickerSetToTop tL_updateMoveStickerSetToTop = (TLRPC.TL_updateMoveStickerSetToTop) update;
                                                    getMediaDataController().moveStickerSetToTop(tL_updateMoveStickerSetToTop.stickerset, tL_updateMoveStickerSetToTop.emojis, tL_updateMoveStickerSetToTop.masks);
                                                } else if (update instanceof TLRPC.TL_updateChannelPinnedTopic) {
                                                    TLRPC.TL_updateChannelPinnedTopic tL_updateChannelPinnedTopic = (TLRPC.TL_updateChannelPinnedTopic) update;
                                                    ArrayList<Integer> currentPinnedOrder = getTopicsController().getCurrentPinnedOrder(tL_updateChannelPinnedTopic.channel_id);
                                                    currentPinnedOrder.remove(Integer.valueOf(tL_updateChannelPinnedTopic.topic_id));
                                                    if (tL_updateChannelPinnedTopic.pinned) {
                                                        currentPinnedOrder.add(0, Integer.valueOf(tL_updateChannelPinnedTopic.topic_id));
                                                    }
                                                    getTopicsController().applyPinnedOrder(tL_updateChannelPinnedTopic.channel_id, currentPinnedOrder);
                                                } else if (update instanceof TLRPC.TL_updateChannelPinnedTopics) {
                                                    TLRPC.TL_updateChannelPinnedTopics tL_updateChannelPinnedTopics = (TLRPC.TL_updateChannelPinnedTopics) update;
                                                    if ((tL_updateChannelPinnedTopics.flags & 1) != 0) {
                                                        getTopicsController().applyPinnedOrder(tL_updateChannelPinnedTopics.channel_id, tL_updateChannelPinnedTopics.order);
                                                    } else {
                                                        getTopicsController().reloadTopics(tL_updateChannelPinnedTopics.channel_id, false);
                                                    }
                                                } else if (update instanceof TLRPC.TL_updatePhoneCallSignalingData) {
                                                    TLRPC.TL_updatePhoneCallSignalingData tL_updatePhoneCallSignalingData = (TLRPC.TL_updatePhoneCallSignalingData) update;
                                                    VoIPService sharedInstance = VoIPService.getSharedInstance();
                                                    if (sharedInstance != null) {
                                                        sharedInstance.onSignalingData(tL_updatePhoneCallSignalingData);
                                                    }
                                                } else if (update instanceof TLRPC.TL_updateGroupCallParticipants) {
                                                    TLRPC.TL_updateGroupCallParticipants tL_updateGroupCallParticipants = (TLRPC.TL_updateGroupCallParticipants) update;
                                                    ChatObject.Call call = (ChatObject.Call) this.groupCalls.get(tL_updateGroupCallParticipants.call.id);
                                                    if (call != null) {
                                                        call.processParticipantsUpdate(tL_updateGroupCallParticipants, false);
                                                    }
                                                    if (VoIPService.getSharedInstance() != null) {
                                                        VoIPService.getSharedInstance().onGroupCallParticipantsUpdate(tL_updateGroupCallParticipants);
                                                    }
                                                } else if (update instanceof TLRPC.TL_updateGroupCall) {
                                                    TLRPC.TL_updateGroupCall tL_updateGroupCall3 = (TLRPC.TL_updateGroupCall) update;
                                                    ChatObject.Call call2 = (ChatObject.Call) this.groupCalls.get(tL_updateGroupCall3.call.id);
                                                    if (call2 != null) {
                                                        call2.processGroupCallUpdate(tL_updateGroupCall3);
                                                        TLRPC.Chat chat4 = getChat(Long.valueOf(call2.chatId));
                                                        if (chat4 != null) {
                                                            chat4.call_active = tL_updateGroupCall3.call instanceof TLRPC.TL_groupCall;
                                                        }
                                                    } else {
                                                        TLRPC.ChatFull chatFull2 = getChatFull(tL_updateGroupCall3.chat_id);
                                                        if (chatFull2 != null && ((tL_inputGroupCall = chatFull2.call) == null || tL_inputGroupCall.id != tL_updateGroupCall3.call.id)) {
                                                            loadFullChat(tL_updateGroupCall3.chat_id, 0, true);
                                                        }
                                                    }
                                                    if (VoIPService.getSharedInstance() != null) {
                                                        VoIPService.getSharedInstance().onGroupCallUpdated(tL_updateGroupCall3.call);
                                                    }
                                                } else {
                                                    if (update instanceof TLRPC.TL_updatePhoneCall) {
                                                        TLRPC.PhoneCall phoneCall = ((TLRPC.TL_updatePhoneCall) update).phone_call;
                                                        VoIPService sharedInstance2 = VoIPService.getSharedInstance();
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("Received call in update: " + phoneCall);
                                                            FileLog.d("call id " + phoneCall.id);
                                                        }
                                                        if (phoneCall instanceof TLRPC.TL_phoneCallRequested) {
                                                            if (phoneCall.date + (this.callRingTimeout / 1000) < getConnectionsManager().getCurrentTime()) {
                                                                str2 = BuildVars.LOGS_ENABLED ? "ignoring too old call" : "Ignoring incoming call because notifications are disabled in system";
                                                            } else {
                                                                int i33 = Build.VERSION.SDK_INT;
                                                                if (i33 < 21 || NotificationManagerCompat.from(ApplicationLoader.applicationContext).areNotificationsEnabled()) {
                                                                    z5 = false;
                                                                } else if (!ApplicationLoader.mainInterfacePaused && ApplicationLoader.isScreenOn) {
                                                                    z5 = true;
                                                                } else if (BuildVars.LOGS_ENABLED) {
                                                                }
                                                                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService("phone");
                                                                if (i33 >= 31) {
                                                                    try {
                                                                        if (ContextCompat.checkSelfPermission(ApplicationLoader.applicationContext, "android.permission.READ_PHONE_STATE") == 0) {
                                                                            callStateForSubscription = telephonyManager.getCallStateForSubscription();
                                                                            if (callStateForSubscription == 0) {
                                                                            }
                                                                        }
                                                                    } catch (Throwable th) {
                                                                        FileLog.e(th);
                                                                    }
                                                                    z6 = true;
                                                                    FileLog.e("updatePhoneCall: svc=" + sharedInstance2 + " callIShouldHavePutIntoIntent=" + VoIPService.callIShouldHavePutIntoIntent + " callStateIsIdle=" + z6);
                                                                    if (sharedInstance2 != null && VoIPService.callIShouldHavePutIntoIntent == null && z6) {
                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                            FileLog.d("Starting service for call " + phoneCall.id);
                                                                        }
                                                                        VoIPService.callIShouldHavePutIntoIntent = phoneCall;
                                                                        FileLog.e("set VoIPService.callIShouldHavePutIntoIntent = " + phoneCall);
                                                                        Intent intent = new Intent(ApplicationLoader.applicationContext, (Class<?>) VoIPService.class);
                                                                        intent.putExtra("is_outgoing", false);
                                                                        intent.putExtra("user_id", phoneCall.participant_id == getUserConfig().getClientUserId() ? phoneCall.admin_id : phoneCall.participant_id);
                                                                        intent.putExtra("account", this.currentAccount);
                                                                        intent.putExtra("notifications_disabled", z5);
                                                                        try {
                                                                            int i34 = Build.VERSION.SDK_INT;
                                                                            if (i34 >= 33) {
                                                                                intent.putExtra("accept", true);
                                                                                VoIPPreNotificationService.show(ApplicationLoader.applicationContext, intent, phoneCall);
                                                                            } else if (z5 || i34 < 26) {
                                                                                ApplicationLoader.applicationContext.startService(intent);
                                                                            } else {
                                                                                ApplicationLoader.applicationContext.startForegroundService(intent);
                                                                            }
                                                                            if (ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
                                                                                this.ignoreSetOnline = true;
                                                                            }
                                                                        } catch (Throwable th2) {
                                                                            FileLog.e(th2);
                                                                        }
                                                                    } else {
                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                            FileLog.d("Auto-declining call " + phoneCall.id + " because there's already active one");
                                                                        }
                                                                        TLRPC.TL_phone_discardCall tL_phone_discardCall = new TLRPC.TL_phone_discardCall();
                                                                        TLRPC.TL_inputPhoneCall tL_inputPhoneCall = new TLRPC.TL_inputPhoneCall();
                                                                        tL_phone_discardCall.peer = tL_inputPhoneCall;
                                                                        tL_inputPhoneCall.access_hash = phoneCall.access_hash;
                                                                        tL_inputPhoneCall.id = phoneCall.id;
                                                                        tL_phone_discardCall.reason = new TLRPC.TL_phoneCallDiscardReasonBusy();
                                                                        FileLog.e("discardCall " + tL_phone_discardCall.reason);
                                                                        getConnectionsManager().sendRequest(tL_phone_discardCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256
                                                                            @Override // org.telegram.tgnet.RequestDelegate
                                                                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                                                                MessagesController.this.lambda$processUpdateArray$379(tLObject, tL_error);
                                                                            }
                                                                        });
                                                                    }
                                                                }
                                                                z6 = false;
                                                                FileLog.e("updatePhoneCall: svc=" + sharedInstance2 + " callIShouldHavePutIntoIntent=" + VoIPService.callIShouldHavePutIntoIntent + " callStateIsIdle=" + z6);
                                                                if (sharedInstance2 != null) {
                                                                }
                                                                if (BuildVars.LOGS_ENABLED) {
                                                                }
                                                                TLRPC.TL_phone_discardCall tL_phone_discardCall2 = new TLRPC.TL_phone_discardCall();
                                                                TLRPC.TL_inputPhoneCall tL_inputPhoneCall2 = new TLRPC.TL_inputPhoneCall();
                                                                tL_phone_discardCall2.peer = tL_inputPhoneCall2;
                                                                tL_inputPhoneCall2.access_hash = phoneCall.access_hash;
                                                                tL_inputPhoneCall2.id = phoneCall.id;
                                                                tL_phone_discardCall2.reason = new TLRPC.TL_phoneCallDiscardReasonBusy();
                                                                FileLog.e("discardCall " + tL_phone_discardCall2.reason);
                                                                getConnectionsManager().sendRequest(tL_phone_discardCall2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256
                                                                    @Override // org.telegram.tgnet.RequestDelegate
                                                                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                                                        MessagesController.this.lambda$processUpdateArray$379(tLObject, tL_error);
                                                                    }
                                                                });
                                                            }
                                                            FileLog.d(str2);
                                                        } else if (sharedInstance2 == null || phoneCall == null) {
                                                            if (phoneCall instanceof TLRPC.TL_phoneCallDiscarded) {
                                                                VoIPPreNotificationService.dismiss(ApplicationLoader.applicationContext, false);
                                                            }
                                                            if (VoIPService.callIShouldHavePutIntoIntent != null) {
                                                                if (BuildVars.LOGS_ENABLED) {
                                                                    FileLog.d("Updated the call while the service is starting");
                                                                }
                                                                if (phoneCall.id == VoIPService.callIShouldHavePutIntoIntent.id) {
                                                                    if (phoneCall instanceof TLRPC.TL_phoneCallDiscarded) {
                                                                        phoneCall = null;
                                                                    }
                                                                    VoIPService.callIShouldHavePutIntoIntent = phoneCall;
                                                                    str = "(2) set VoIPService.callIShouldHavePutIntoIntent = " + VoIPService.callIShouldHavePutIntoIntent;
                                                                }
                                                            }
                                                        } else {
                                                            sharedInstance2.onCallUpdated(phoneCall);
                                                        }
                                                    } else if (update instanceof TLRPC.TL_updateDialogUnreadMark) {
                                                        TLRPC.TL_updateDialogUnreadMark tL_updateDialogUnreadMark = (TLRPC.TL_updateDialogUnreadMark) update;
                                                        TLRPC.DialogPeer dialogPeer3 = tL_updateDialogUnreadMark.peer;
                                                        if (dialogPeer3 instanceof TLRPC.TL_dialogPeer) {
                                                            TLRPC.Peer peer6 = ((TLRPC.TL_dialogPeer) dialogPeer3).peer;
                                                            j3 = peer6.user_id;
                                                            if (j3 == 0) {
                                                                long j16 = peer6.chat_id;
                                                                if (j16 == 0) {
                                                                    j16 = peer6.channel_id;
                                                                }
                                                                j3 = -j16;
                                                            }
                                                        } else {
                                                            j3 = 0;
                                                        }
                                                        getMessagesStorage().setDialogUnread(j3, tL_updateDialogUnreadMark.unread);
                                                        TLRPC.Dialog dialog4 = (TLRPC.Dialog) this.dialogs_dict.get(j3);
                                                        if (dialog4 != null) {
                                                            boolean z14 = dialog4.unread_mark;
                                                            boolean z15 = tL_updateDialogUnreadMark.unread;
                                                            if (z14 != z15) {
                                                                dialog4.unread_mark = z15;
                                                                if (dialog4.unread_count == 0 && !isDialogMuted(j3, 0L)) {
                                                                    this.unreadUnmutedDialogs = dialog4.unread_mark ? this.unreadUnmutedDialogs + 1 : this.unreadUnmutedDialogs - 1;
                                                                }
                                                                i3 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                                                                i17 |= DIALOG_FILTER_FLAG_EXCLUDE_READ;
                                                            }
                                                        }
                                                    } else if (update instanceof TLRPC.TL_updateMessagePoll) {
                                                        TLRPC.TL_updateMessagePoll tL_updateMessagePoll = (TLRPC.TL_updateMessagePoll) update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdatePollResults, Long.valueOf(tL_updateMessagePoll.poll_id), tL_updateMessagePoll.poll, tL_updateMessagePoll.results);
                                                    } else if (update instanceof TLRPC.TL_updatePeerSettings) {
                                                        TLRPC.TL_updatePeerSettings tL_updatePeerSettings = (TLRPC.TL_updatePeerSettings) update;
                                                        TLRPC.Peer peer7 = tL_updatePeerSettings.peer;
                                                        savePeerSettings(peer7 instanceof TLRPC.TL_peerUser ? peer7.user_id : -(peer7 instanceof TLRPC.TL_peerChat ? peer7.chat_id : peer7.channel_id), tL_updatePeerSettings.settings, true);
                                                    } else if (update instanceof TLRPC.TL_updatePeerLocated) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newPeopleNearbyAvailable, update);
                                                    } else if (update instanceof TLRPC.TL_updateMessageReactions) {
                                                        TLRPC.TL_updateMessageReactions tL_updateMessageReactions = (TLRPC.TL_updateMessageReactions) update;
                                                        long peerId = MessageObject.getPeerId(tL_updateMessageReactions.peer);
                                                        long pendingPaidReactions = StarsController.getInstance(this.currentAccount).getPendingPaidReactions(peerId, tL_updateMessageReactions.msg_id);
                                                        if (pendingPaidReactions != 0) {
                                                            c = 1;
                                                            MessageObject.addPaidReactions(this.currentAccount, tL_updateMessageReactions.reactions, (int) pendingPaidReactions, StarsController.getInstance(this.currentAccount).arePaidReactionsAnonymous(StarsController.MessageId.from(peerId, tL_updateMessageReactions.msg_id), tL_updateMessageReactions.reactions), true);
                                                        } else {
                                                            c = 1;
                                                        }
                                                        NotificationCenter notificationCenter = getNotificationCenter();
                                                        int i35 = NotificationCenter.didUpdateReactions;
                                                        Long valueOf2 = Long.valueOf(peerId);
                                                        Integer valueOf3 = Integer.valueOf(tL_updateMessageReactions.msg_id);
                                                        TLRPC.TL_messageReactions tL_messageReactions = tL_updateMessageReactions.reactions;
                                                        Object[] objArr = new Object[3];
                                                        objArr[0] = valueOf2;
                                                        objArr[c] = valueOf3;
                                                        objArr[2] = tL_messageReactions;
                                                        notificationCenter.lambda$postNotificationNameOnUIThread$1(i35, objArr);
                                                    } else if (update instanceof TLRPC.TL_updateMessageExtendedMedia) {
                                                        TLRPC.TL_updateMessageExtendedMedia tL_updateMessageExtendedMedia = (TLRPC.TL_updateMessageExtendedMedia) update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateExtendedMedia, Long.valueOf(DialogObject.getPeerDialogId(tL_updateMessageExtendedMedia.peer)), Integer.valueOf(tL_updateMessageExtendedMedia.msg_id), tL_updateMessageExtendedMedia.extended_media);
                                                    } else if (update instanceof TLRPC.TL_updateTheme) {
                                                        Theme.setThemeUploadInfo(null, null, (TLRPC.TL_theme) ((TLRPC.TL_updateTheme) update).theme, this.currentAccount, true);
                                                    } else if ((update instanceof TLRPC.TL_updateDialogFilter) || (update instanceof TLRPC.TL_updateDialogFilterOrder) || (update instanceof TLRPC.TL_updateDialogFilters)) {
                                                        loadRemoteFilters(true);
                                                    } else if (update instanceof TLRPC.TL_updateRecentEmojiStatuses) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.recentEmojiStatusesUpdate, new Object[0]);
                                                    } else if (update instanceof TLRPC.TL_updateWebViewResultSent) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.webViewResultSent, Long.valueOf(((TLRPC.TL_updateWebViewResultSent) update).query_id));
                                                    } else if (update instanceof TLRPC.TL_updateAttachMenuBots) {
                                                        getMediaDataController().loadAttachMenuBots(false, true);
                                                    } else if (update instanceof TL_bots.TL_updateBotMenuButton) {
                                                        TL_bots.TL_updateBotMenuButton tL_updateBotMenuButton = (TL_bots.TL_updateBotMenuButton) update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateBotMenuButton, Long.valueOf(tL_updateBotMenuButton.bot_id), tL_updateBotMenuButton.button);
                                                    } else if (update instanceof TLRPC.TL_updateReadChannelDiscussionInbox) {
                                                        TLRPC.TL_updateReadChannelDiscussionInbox tL_updateReadChannelDiscussionInbox = (TLRPC.TL_updateReadChannelDiscussionInbox) update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.threadMessagesRead, Long.valueOf(-tL_updateReadChannelDiscussionInbox.channel_id), Integer.valueOf(tL_updateReadChannelDiscussionInbox.top_msg_id), Integer.valueOf(tL_updateReadChannelDiscussionInbox.read_max_id), 0);
                                                        if ((tL_updateReadChannelDiscussionInbox.flags & 1) != 0) {
                                                            getMessagesStorage().updateRepliesMaxReadId(tL_updateReadChannelDiscussionInbox.broadcast_id, tL_updateReadChannelDiscussionInbox.broadcast_post, tL_updateReadChannelDiscussionInbox.read_max_id, 0, true);
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.commentsRead, Long.valueOf(tL_updateReadChannelDiscussionInbox.broadcast_id), Integer.valueOf(tL_updateReadChannelDiscussionInbox.broadcast_post), Integer.valueOf(tL_updateReadChannelDiscussionInbox.read_max_id));
                                                        }
                                                    } else if (update instanceof TLRPC.TL_updateReadChannelDiscussionOutbox) {
                                                        TLRPC.TL_updateReadChannelDiscussionOutbox tL_updateReadChannelDiscussionOutbox = (TLRPC.TL_updateReadChannelDiscussionOutbox) update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.threadMessagesRead, Long.valueOf(-tL_updateReadChannelDiscussionOutbox.channel_id), Integer.valueOf(tL_updateReadChannelDiscussionOutbox.top_msg_id), 0, Integer.valueOf(tL_updateReadChannelDiscussionOutbox.read_max_id));
                                                    } else if (update instanceof TLRPC.TL_updatePeerHistoryTTL) {
                                                        TLRPC.TL_updatePeerHistoryTTL tL_updatePeerHistoryTTL = (TLRPC.TL_updatePeerHistoryTTL) update;
                                                        long peerId2 = MessageObject.getPeerId(tL_updatePeerHistoryTTL.peer);
                                                        if (peerId2 > 0) {
                                                            TLRPC.UserFull userFull2 = getUserFull(peerId2);
                                                            if (userFull2 != null) {
                                                                int i36 = tL_updatePeerHistoryTTL.ttl_period;
                                                                userFull2.ttl_period = i36;
                                                                userFull2.flags = i36 == 0 ? userFull2.flags & (-16385) : userFull2.flags | LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                                            }
                                                            userFull = userFull2;
                                                            chatFull = null;
                                                        } else {
                                                            chatFull = getChatFull(-peerId2);
                                                            if (chatFull != null) {
                                                                int i37 = tL_updatePeerHistoryTTL.ttl_period;
                                                                chatFull.ttl_period = i37;
                                                                chatFull.flags = chatFull instanceof TLRPC.TL_channelFull ? i37 == 0 ? chatFull.flags & (-16777217) : chatFull.flags | ConnectionsManager.FileTypePhoto : i37 == 0 ? chatFull.flags & (-16385) : chatFull.flags | LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                                            }
                                                            userFull = null;
                                                        }
                                                        if (chatFull != null) {
                                                            NotificationCenter notificationCenter2 = getNotificationCenter();
                                                            int i38 = NotificationCenter.chatInfoDidLoad;
                                                            Boolean bool4 = Boolean.FALSE;
                                                            notificationCenter2.lambda$postNotificationNameOnUIThread$1(i38, chatFull, 0, bool4, bool4);
                                                            getMessagesStorage().updateChatInfo(chatFull, false);
                                                        } else if (userFull != null) {
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(peerId2), userFull);
                                                            getMessagesStorage().updateUserInfo(userFull, false);
                                                        }
                                                        getMessagesStorage().setDialogTtl(peerId2, tL_updatePeerHistoryTTL.ttl_period);
                                                        TLRPC.Dialog dialog5 = (TLRPC.Dialog) this.dialogs_dict.get(peerId2);
                                                        if (dialog5 != null) {
                                                            dialog5.ttl_period = tL_updatePeerHistoryTTL.ttl_period;
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, 0);
                                                        }
                                                    } else if (update instanceof TLRPC.TL_updatePendingJoinRequests) {
                                                        getMemberRequestsController().onPendingRequestsUpdated((TLRPC.TL_updatePendingJoinRequests) update);
                                                    } else if (update instanceof TLRPC.TL_updateSavedRingtones) {
                                                        getMediaDataController().ringtoneDataStore.loadUserRingtones(true);
                                                    } else if (update instanceof TLRPC.TL_updateTranscribeAudio) {
                                                        str = "Received legacy TL_updateTranscribeAudio update";
                                                    } else if (update instanceof TLRPC.TL_updateTranscribedAudio) {
                                                        TLRPC.TL_updateTranscribedAudio tL_updateTranscribedAudio = (TLRPC.TL_updateTranscribedAudio) update;
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("Transcription update received, pending=" + tL_updateTranscribedAudio.pending + " id=" + tL_updateTranscribedAudio.transcription_id + " text=" + tL_updateTranscribedAudio.text);
                                                        }
                                                        if ((!tL_updateTranscribedAudio.pending || !TextUtils.isEmpty(tL_updateTranscribedAudio.text)) && (tL_updateTranscribedAudio.pending || !TranscribeButton.finishTranscription(null, tL_updateTranscribedAudio.transcription_id, tL_updateTranscribedAudio.text))) {
                                                            getMessagesStorage().updateMessageVoiceTranscription(DialogObject.getPeerDialogId(tL_updateTranscribedAudio.peer), tL_updateTranscribedAudio.msg_id, tL_updateTranscribedAudio.text, tL_updateTranscribedAudio.transcription_id, !tL_updateTranscribedAudio.pending);
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.voiceTranscriptionUpdate, null, Long.valueOf(tL_updateTranscribedAudio.transcription_id), tL_updateTranscribedAudio.text, null, Boolean.valueOf(!tL_updateTranscribedAudio.pending));
                                                        }
                                                    } else if (update instanceof TLRPC.TL_updateSentStoryReaction) {
                                                        TLRPC.TL_updateSentStoryReaction tL_updateSentStoryReaction = (TLRPC.TL_updateSentStoryReaction) update;
                                                        getStoriesController().updateStoryReaction(DialogObject.getPeerDialogId(tL_updateSentStoryReaction.peer), tL_updateSentStoryReaction.story_id, tL_updateSentStoryReaction.reaction);
                                                    } else if (update instanceof TLRPC.TL_updateChannelViewForumAsMessages) {
                                                        TLRPC.TL_updateChannelViewForumAsMessages tL_updateChannelViewForumAsMessages = (TLRPC.TL_updateChannelViewForumAsMessages) update;
                                                        TLRPC.ChatFull chatFull3 = getChatFull(tL_updateChannelViewForumAsMessages.channel_id);
                                                        if (chatFull3 != null) {
                                                            boolean z16 = chatFull3.view_forum_as_messages;
                                                            boolean z17 = tL_updateChannelViewForumAsMessages.enabled;
                                                            if (z16 != z17) {
                                                                chatFull3.view_forum_as_messages = z17;
                                                                int i39 = chatFull3.flags2;
                                                                chatFull3.flags2 = z17 ? i39 | 64 : i39 & (-65);
                                                                getMessagesStorage().updateChatInfo(chatFull3, false);
                                                            }
                                                        } else {
                                                            getMessagesController().loadFullChat(tL_updateChannelViewForumAsMessages.channel_id, 0, true);
                                                        }
                                                        TLRPC.Dialog dialog6 = getDialog(-tL_updateChannelViewForumAsMessages.channel_id);
                                                        if (dialog6 != null) {
                                                            boolean z18 = dialog6.view_forum_as_messages;
                                                            boolean z19 = tL_updateChannelViewForumAsMessages.enabled;
                                                            if (z18 != z19) {
                                                                dialog6.view_forum_as_messages = z19;
                                                            }
                                                        }
                                                        getMessagesStorage().setDialogViewThreadAsMessages(-tL_updateChannelViewForumAsMessages.channel_id, tL_updateChannelViewForumAsMessages.enabled);
                                                    } else if ((update instanceof TLRPC.TL_updatePinnedSavedDialogs) || (update instanceof TLRPC.TL_updateSavedDialogPinned)) {
                                                        getSavedMessagesController().processUpdate(update);
                                                    } else if (!QuickRepliesController.getInstance(this.currentAccount).processUpdate(update, null, 0)) {
                                                        if (update instanceof TLRPC.TL_updatePaidReactionPrivacy) {
                                                            this.paidReactionsAnonymousTime = System.currentTimeMillis();
                                                            this.paidReactionsAnonymous = Boolean.valueOf(((TLRPC.TL_updatePaidReactionPrivacy) update).isPrivate);
                                                            this.mainPreferences.edit().putLong("paidReactionsAnonymousTime", this.paidReactionsAnonymousTime).putBoolean("paidReactionsAnonymous", this.paidReactionsAnonymous.booleanValue()).apply();
                                                            this.loadingArePaidReactionsAnonymous = false;
                                                        } else {
                                                            ApplicationLoader applicationLoader = ApplicationLoader.applicationLoaderInstance;
                                                            if (applicationLoader != null) {
                                                                applicationLoader.processUpdate(this.currentAccount, update);
                                                            }
                                                        }
                                                    }
                                                    FileLog.e(str);
                                                }
                                            }
                                            edit.putLong(str3, j2).commit();
                                        }
                                    }
                                    arrayList10 = arrayList;
                                    i16 = i9 + 1;
                                    size = i10;
                                    arrayList12 = arrayList7;
                                    i15 = 0;
                                }
                            }
                            arrayList11.add(tL_user);
                        }
                    }
                    i9 = i16;
                    arrayList7 = arrayList12;
                    i10 = i8;
                }
                arrayList10 = arrayList;
                i16 = i9 + 1;
                size = i10;
                arrayList12 = arrayList7;
                i15 = 0;
            }
            ArrayList<TLRPC.User> arrayList18 = arrayList12;
            messagesController = this;
            if (editor != null) {
                editor.commit();
                z4 = false;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            } else {
                z4 = false;
            }
            getMessagesStorage().updateUsers(arrayList18, true, true, true);
            getMessagesStorage().updateUsers(arrayList11, z4, true, true);
            i4 = i17;
            z2 = z9;
        } else {
            messagesController = this;
            i3 = i;
            i4 = 0;
            z2 = false;
        }
        if (longSparseArray != null) {
            int size3 = longSparseArray.size();
            for (int i40 = 0; i40 < size3; i40++) {
                ChatObject.Call call3 = (ChatObject.Call) messagesController.groupCallsByChatId.get(longSparseArray.keyAt(i40));
                if (call3 != null) {
                    call3.processTypingsUpdate(getAccountInstance(), (ArrayList) longSparseArray.valueAt(i40), i2);
                }
            }
        }
        if (longSparseIntArray != null) {
            int size4 = longSparseIntArray.size();
            for (int i41 = 0; i41 < size4; i41++) {
                SendMessagesHelper.ImportingHistory importingHistory = getSendMessagesHelper().getImportingHistory(longSparseIntArray.keyAt(i41));
                if (importingHistory != null) {
                    importingHistory.setImportProgress(longSparseIntArray.valueAt(i41));
                }
            }
        }
        int i42 = 1;
        if (longSparseArray2 != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceivedWebpagesInUpdates, longSparseArray2);
            int i43 = 0;
            int i44 = 3;
            while (i43 < i44) {
                if (i43 == i42) {
                    longSparseArray12 = messagesController.reloadingScheduledWebpagesPending;
                    i6 = 1;
                } else if (i43 == 2) {
                    longSparseArray12 = messagesController.reloadingSavedWebpagesPending;
                    i6 = 3;
                } else {
                    longSparseArray12 = messagesController.reloadingWebpagesPending;
                    i6 = 0;
                }
                int size5 = longSparseArray2.size();
                int i45 = 0;
                while (i45 < size5) {
                    long keyAt = longSparseArray2.keyAt(i45);
                    ArrayList arrayList19 = (ArrayList) longSparseArray12.get(keyAt);
                    longSparseArray12.remove(keyAt);
                    if (arrayList19 != null) {
                        TLRPC.WebPage webPage = (TLRPC.WebPage) longSparseArray2.valueAt(i45);
                        ArrayList<TLRPC.Message> arrayList20 = new ArrayList<>();
                        if ((webPage instanceof TLRPC.TL_webPage) || (webPage instanceof TLRPC.TL_webPageEmpty)) {
                            int size6 = arrayList19.size();
                            int i46 = 0;
                            j = 0;
                            while (i46 < size6) {
                                LongSparseArray longSparseArray14 = longSparseArray12;
                                ((MessageObject) arrayList19.get(i46)).messageOwner.media.webpage = webPage;
                                if (i46 == 0) {
                                    j = ((MessageObject) arrayList19.get(i46)).getDialogId();
                                    ImageLoader.saveMessageThumbs(((MessageObject) arrayList19.get(i46)).messageOwner);
                                }
                                arrayList20.add(((MessageObject) arrayList19.get(i46)).messageOwner);
                                i46++;
                                longSparseArray12 = longSparseArray14;
                            }
                            longSparseArray13 = longSparseArray12;
                        } else {
                            longSparseArray12.put(webPage.id, arrayList19);
                            longSparseArray13 = longSparseArray12;
                            j = 0;
                        }
                        if (!arrayList20.isEmpty()) {
                            getMessagesStorage().putMessages(arrayList20, true, true, false, getDownloadController().getAutodownloadMask(), i6, 0L);
                            i7 = 1;
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList19);
                            i45 += i7;
                            longSparseArray12 = longSparseArray13;
                        }
                    } else {
                        longSparseArray13 = longSparseArray12;
                    }
                    i7 = 1;
                    i45 += i7;
                    longSparseArray12 = longSparseArray13;
                }
                i43++;
                i44 = 3;
                i42 = 1;
            }
        }
        if (i4 != 0) {
            int i47 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = messagesController.selectedDialogFilter;
                if (i47 >= dialogFilterArr.length) {
                    break;
                }
                DialogFilter dialogFilter = dialogFilterArr[i47];
                if (dialogFilter != null && (dialogFilter.flags & i4) != 0) {
                    longSparseArray9 = longSparseArray3;
                    z2 = true;
                    break;
                }
                i47++;
            }
        }
        longSparseArray9 = longSparseArray3;
        if (longSparseArray9 != null) {
            int size7 = longSparseArray3.size();
            boolean z20 = false;
            for (int i48 = 0; i48 < size7; i48++) {
                if (messagesController.updateInterfaceWithMessages(longSparseArray9.keyAt(i48), (ArrayList) longSparseArray9.valueAt(i48), 0)) {
                    z20 = true;
                }
            }
            if (!messagesController.applyFoldersUpdates(arrayList3) && (z20 || !z2)) {
                longSparseArray11 = longSparseArray4;
                z3 = true;
                if (longSparseArray11 != null) {
                    int size8 = longSparseArray4.size();
                    for (int i49 = 0; i49 < size8; i49++) {
                        messagesController.updateInterfaceWithMessages(longSparseArray11.keyAt(i49), (ArrayList) longSparseArray11.valueAt(i49), 1);
                    }
                }
                if (longSparseArray5 != null) {
                    int size9 = longSparseArray5.size();
                    for (int i50 = 0; i50 < size9; i50++) {
                        long keyAt2 = longSparseArray5.keyAt(i50);
                        ArrayList<MessageObject> arrayList21 = (ArrayList) longSparseArray5.valueAt(i50);
                        int size10 = arrayList21.size();
                        SparseBooleanArray sparseBooleanArray = null;
                        for (int i51 = 0; i51 < size10; i51++) {
                            MessageObject messageObject3 = arrayList21.get(i51);
                            if (keyAt2 > 0) {
                                if (sparseBooleanArray == null) {
                                    sparseBooleanArray = new SparseBooleanArray();
                                }
                                sparseBooleanArray.put(messageObject3.getId(), MessageObject.hasUnreadReactions(messageObject3.messageOwner));
                            }
                        }
                        if (keyAt2 > 0) {
                            checkUnreadReactions(keyAt2, 0L, sparseBooleanArray);
                        }
                        ArrayList arrayList22 = (ArrayList) messagesController.dialogMessage.get(keyAt2);
                        if (arrayList22 != null) {
                            boolean z21 = z3;
                            for (int i52 = 0; i52 < arrayList22.size(); i52++) {
                                MessageObject messageObject4 = (MessageObject) arrayList22.get(i52);
                                int size11 = arrayList21.size();
                                int i53 = 0;
                                while (true) {
                                    if (i53 >= size11) {
                                        break;
                                    }
                                    MessageObject messageObject5 = arrayList21.get(i53);
                                    if (messageObject4.getId() != messageObject5.getId()) {
                                        if (messageObject4.getDialogId() == messageObject5.getDialogId() && (messageObject4.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) && (messageObject = messageObject4.replyMessageObject) != null && messageObject.getId() == messageObject5.getId()) {
                                            messageObject4.replyMessageObject = messageObject5;
                                            messageObject4.generatePinMessageText(null, null);
                                            z21 = true;
                                            break;
                                        }
                                        i53++;
                                    } else {
                                        arrayList22.set(i52, messageObject5);
                                        TLRPC.Peer peer8 = messageObject5.messageOwner.peer_id;
                                        if (peer8 != null && peer8.channel_id == 0) {
                                            messagesController.dialogMessagesByIds.put(messageObject5.getId(), messageObject5);
                                        }
                                        z21 = true;
                                    }
                                }
                            }
                            z3 = z21;
                        }
                        getMediaDataController().loadReplyMessagesForMessages(arrayList21, keyAt2, 0, 0L, null, 0, null);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(keyAt2), arrayList21, Boolean.FALSE);
                    }
                }
                if (z3) {
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                if (z) {
                    i3 |= UPDATE_MASK_USER_PRINT;
                }
                if (arrayList4 != null) {
                    i3 = i3 | UPDATE_MASK_NAME | UPDATE_MASK_USER_PHONE;
                }
                if (arrayList5 != null) {
                    int size12 = arrayList5.size();
                    for (int i54 = 0; i54 < size12; i54++) {
                        getMessagesStorage().updateChatParticipants((TLRPC.ChatParticipants) arrayList5.get(i54));
                    }
                }
                if (longSparseArray6 != null && longSparseArray7 == null && longSparseArray8 == null) {
                    i5 = 1;
                } else {
                    i5 = 1;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
                }
                if (i3 != 0) {
                    NotificationCenter notificationCenter3 = getNotificationCenter();
                    int i55 = NotificationCenter.updateInterfaces;
                    Object[] objArr2 = new Object[i5];
                    objArr2[0] = Integer.valueOf(i3);
                    notificationCenter3.lambda$postNotificationNameOnUIThread$1(i55, objArr2);
                }
                if (arrayList6 != null) {
                    ImageLoader.getInstance().putThumbsToCache(arrayList6);
                    return;
                }
                return;
            }
            longSparseArray10 = null;
        } else {
            longSparseArray10 = null;
            boolean applyFoldersUpdates = messagesController.applyFoldersUpdates(arrayList3);
            if (!z2 && !applyFoldersUpdates) {
                longSparseArray11 = longSparseArray4;
                z3 = false;
                if (longSparseArray11 != null) {
                }
                if (longSparseArray5 != null) {
                }
                if (z3) {
                }
                if (z) {
                }
                if (arrayList4 != null) {
                }
                if (arrayList5 != null) {
                }
                if (longSparseArray6 != null) {
                }
                i5 = 1;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
                if (i3 != 0) {
                }
                if (arrayList6 != null) {
                }
            }
        }
        messagesController.sortDialogs(longSparseArray10);
        longSparseArray11 = longSparseArray4;
        z3 = true;
        if (longSparseArray11 != null) {
        }
        if (longSparseArray5 != null) {
        }
        if (z3) {
        }
        if (z) {
        }
        if (arrayList4 != null) {
        }
        if (arrayList5 != null) {
        }
        if (longSparseArray6 != null) {
        }
        i5 = 1;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
        if (i3 != 0) {
        }
        if (arrayList6 != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:104:0x030e, code lost:
    
        if (org.telegram.messenger.ChatObject.isChannel(getChat(java.lang.Long.valueOf(r5))) != false) goto L142;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v14 */
    /* JADX WARN: Type inference failed for: r8v15, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r8v16 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$381(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, LongSparseArray longSparseArray4, LongSparseArray longSparseArray5, LongSparseIntArray longSparseIntArray3) {
        int i;
        int i2;
        ArrayList arrayList;
        int i3;
        int i4;
        ArrayList arrayList2;
        ?? r8;
        int i5;
        int i6;
        long j;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        ArrayList arrayList3;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray;
        int i12 = 0;
        if (longSparseIntArray4 != null || longSparseIntArray2 != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesRead, longSparseIntArray4, longSparseIntArray2);
            if (longSparseIntArray4 != null) {
                getNotificationsController().processReadMessages(longSparseIntArray, 0L, 0, 0, false);
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                int size = longSparseIntArray.size();
                int i13 = 0;
                int i14 = 0;
                while (i14 < size) {
                    long keyAt = longSparseIntArray4.keyAt(i14);
                    int valueAt = longSparseIntArray4.valueAt(i14);
                    int i15 = size;
                    TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(keyAt);
                    int i16 = i13;
                    if (dialog == null || (i4 = dialog.top_message) <= 0 || i4 > valueAt || (arrayList2 = (ArrayList) this.dialogMessage.get(dialog.id)) == null) {
                        i3 = 1;
                        i13 = i16;
                    } else {
                        i13 = i16;
                        for (int i17 = 0; i17 < arrayList2.size(); i17++) {
                            MessageObject messageObject = (MessageObject) arrayList2.get(i17);
                            if (messageObject != null && !messageObject.isOut()) {
                                messageObject.setIsRead();
                                i13 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                            }
                        }
                        i3 = 1;
                    }
                    if (keyAt != getUserConfig().getClientUserId()) {
                        edit.remove("diditem" + keyAt);
                        edit.remove("diditemo" + keyAt);
                    }
                    i14 += i3;
                    longSparseIntArray4 = longSparseIntArray;
                    size = i15;
                }
                i = 1;
                edit.commit();
                i12 = i13;
            } else {
                i = 1;
                i12 = 0;
            }
            if (longSparseIntArray2 != null) {
                int size2 = longSparseIntArray2.size();
                int i18 = i12;
                for (int i19 = 0; i19 < size2; i19 += i) {
                    long keyAt2 = longSparseIntArray2.keyAt(i19);
                    int valueAt2 = longSparseIntArray2.valueAt(i19);
                    TLRPC.Dialog dialog2 = (TLRPC.Dialog) this.dialogs_dict.get(keyAt2);
                    if (dialog2 != null && valueAt2 > dialog2.read_outbox_max_id) {
                        dialog2.read_outbox_max_id = valueAt2;
                        i18 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                    }
                    if (dialog2 != null && (i2 = dialog2.top_message) > 0 && i2 <= valueAt2 && (arrayList = (ArrayList) this.dialogMessage.get(dialog2.id)) != null) {
                        for (int i20 = 0; i20 < arrayList.size(); i20 += i) {
                            MessageObject messageObject2 = (MessageObject) arrayList.get(i20);
                            if (messageObject2 != null && messageObject2.isOut()) {
                                messageObject2.setIsRead();
                                i18 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                            }
                        }
                    }
                }
                i12 = i18;
            }
        }
        if (sparseIntArray != null) {
            int size3 = sparseIntArray.size();
            int i21 = i12;
            int i22 = 0;
            while (i22 < size3) {
                int keyAt3 = sparseIntArray.keyAt(i22);
                int valueAt3 = sparseIntArray.valueAt(i22);
                int i23 = size3;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadEncrypted, Integer.valueOf(keyAt3), Integer.valueOf(valueAt3));
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(keyAt3);
                if (((TLRPC.Dialog) this.dialogs_dict.get(makeEncryptedDialogId)) != null && (arrayList3 = (ArrayList) this.dialogMessage.get(makeEncryptedDialogId)) != null) {
                    for (int i24 = 0; i24 < arrayList3.size(); i24++) {
                        MessageObject messageObject3 = (MessageObject) arrayList3.get(i24);
                        if (messageObject3 != null && messageObject3.messageOwner.date <= valueAt3) {
                            messageObject3.setIsRead();
                            i21 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                        }
                    }
                }
                i22++;
                size3 = i23;
            }
            r8 = 0;
            i12 = i21;
        } else {
            r8 = 0;
        }
        if (longSparseArray != null) {
            int size4 = longSparseArray.size();
            for (int i25 = 0; i25 < size4; i25++) {
                long keyAt4 = longSparseArray.keyAt(i25);
                ArrayList arrayList4 = (ArrayList) longSparseArray.valueAt(i25);
                NotificationCenter notificationCenter = getNotificationCenter();
                int i26 = NotificationCenter.messagesReadContent;
                Object[] objArr = new Object[2];
                objArr[r8] = Long.valueOf(keyAt4);
                objArr[1] = arrayList4;
                notificationCenter.lambda$postNotificationNameOnUIThread$1(i26, objArr);
            }
        }
        if (longSparseArray2 != null) {
            int i27 = 0;
            for (int size5 = longSparseArray2.size(); i27 < size5; size5 = i9) {
                long keyAt5 = longSparseArray2.keyAt(i27);
                ArrayList arrayList5 = (ArrayList) longSparseArray2.valueAt(i27);
                if (arrayList5 == null) {
                    i9 = size5;
                } else {
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i28 = NotificationCenter.messagesDeleted;
                    Long valueOf = Long.valueOf(-keyAt5);
                    i9 = size5;
                    Object[] objArr2 = new Object[3];
                    objArr2[r8] = arrayList5;
                    objArr2[1] = valueOf;
                    objArr2[2] = Boolean.FALSE;
                    notificationCenter2.lambda$postNotificationNameOnUIThread$1(i28, objArr2);
                    if (keyAt5 == 0) {
                        int size6 = arrayList5.size();
                        int i29 = 0;
                        while (i29 < size6) {
                            MessageObject messageObject4 = this.dialogMessagesByIds.get(((Integer) arrayList5.get(i29)).intValue());
                            if (messageObject4 != null) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("mark messages " + messageObject4.getId() + " deleted");
                                }
                                i11 = 1;
                                messageObject4.deleted = true;
                            } else {
                                i11 = 1;
                            }
                            i29 += i11;
                        }
                    } else {
                        ArrayList arrayList6 = (ArrayList) this.dialogMessage.get(keyAt5);
                        if (arrayList6 != null) {
                            int i30 = 0;
                            while (i30 < arrayList6.size()) {
                                MessageObject messageObject5 = (MessageObject) arrayList6.get(i30);
                                if (messageObject5 != null) {
                                    int size7 = arrayList5.size();
                                    for (int i31 = 0; i31 < size7; i31++) {
                                        if (messageObject5.getId() == ((Integer) arrayList5.get(i31)).intValue()) {
                                            i10 = 1;
                                            messageObject5.deleted = true;
                                            break;
                                        }
                                    }
                                }
                                i10 = 1;
                                i30 += i10;
                            }
                        }
                    }
                }
                i27++;
            }
            getNotificationsController().removeDeletedMessagesFromNotifications(longSparseArray2, r8);
        }
        if (longSparseArray3 != null) {
            int size8 = longSparseArray3.size();
            int i32 = 0;
            while (i32 < size8) {
                long keyAt6 = longSparseArray3.keyAt(i32);
                ArrayList arrayList7 = (ArrayList) longSparseArray3.valueAt(i32);
                if (arrayList7 == null) {
                    i8 = 1;
                } else {
                    NotificationCenter notificationCenter3 = getNotificationCenter();
                    int i33 = NotificationCenter.quickRepliesDeleted;
                    Long valueOf2 = Long.valueOf(keyAt6);
                    Object[] objArr3 = new Object[2];
                    objArr3[r8] = arrayList7;
                    i8 = 1;
                    objArr3[1] = valueOf2;
                    notificationCenter3.lambda$postNotificationNameOnUIThread$1(i33, objArr3);
                }
                i32 += i8;
            }
        }
        if (longSparseArray4 != null) {
            int size9 = longSparseArray4.size();
            int i34 = 0;
            while (i34 < size9) {
                long keyAt7 = longSparseArray4.keyAt(i34);
                ArrayList arrayList8 = (ArrayList) longSparseArray4.valueAt(i34);
                if (arrayList8 == null) {
                    i7 = 1;
                } else {
                    ArrayList arrayList9 = longSparseArray5 != null ? (ArrayList) longSparseArray5.get(keyAt7) : null;
                    NotificationCenter notificationCenter4 = getNotificationCenter();
                    int i35 = NotificationCenter.messagesDeleted;
                    if (DialogObject.isChatDialog(keyAt7)) {
                        j = -keyAt7;
                    }
                    j = 0;
                    Long valueOf3 = Long.valueOf(j);
                    Integer valueOf4 = Integer.valueOf((int) r8);
                    Object[] objArr4 = new Object[7];
                    objArr4[r8] = arrayList8;
                    objArr4[1] = valueOf3;
                    objArr4[2] = Boolean.TRUE;
                    Boolean bool = Boolean.FALSE;
                    objArr4[3] = bool;
                    objArr4[4] = bool;
                    objArr4[5] = valueOf4;
                    objArr4[6] = arrayList9;
                    notificationCenter4.lambda$postNotificationNameOnUIThread$1(i35, objArr4);
                    i7 = 1;
                }
                i34 += i7;
            }
        }
        if (longSparseIntArray3 != null) {
            int size10 = longSparseIntArray3.size();
            int i36 = 0;
            while (i36 < size10) {
                long keyAt8 = longSparseIntArray3.keyAt(i36);
                int valueAt4 = longSparseIntArray3.valueAt(i36);
                long j2 = -keyAt8;
                NotificationCenter notificationCenter5 = getNotificationCenter();
                int i37 = NotificationCenter.historyCleared;
                Long valueOf5 = Long.valueOf(j2);
                Integer valueOf6 = Integer.valueOf(valueAt4);
                Object[] objArr5 = new Object[2];
                objArr5[r8] = valueOf5;
                objArr5[1] = valueOf6;
                notificationCenter5.lambda$postNotificationNameOnUIThread$1(i37, objArr5);
                ArrayList arrayList10 = (ArrayList) this.dialogMessage.get(j2);
                if (arrayList10 != null) {
                    for (int i38 = 0; i38 < arrayList10.size(); i38++) {
                        MessageObject messageObject6 = (MessageObject) arrayList10.get(i38);
                        if (messageObject6 != null && messageObject6.getId() <= valueAt4) {
                            i6 = 1;
                            messageObject6.deleted = true;
                            break;
                        }
                    }
                }
                i6 = 1;
                i36 += i6;
            }
            i5 = 1;
            getNotificationsController().removeDeletedHisoryFromNotifications(longSparseIntArray3);
        } else {
            i5 = 1;
        }
        if (i12 != 0) {
            NotificationCenter notificationCenter6 = getNotificationCenter();
            int i39 = NotificationCenter.updateInterfaces;
            Integer valueOf7 = Integer.valueOf(i12);
            Object[] objArr6 = new Object[i5];
            objArr6[r8] = valueOf7;
            notificationCenter6.lambda$postNotificationNameOnUIThread$1(i39, objArr6);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$382(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final LongSparseArray longSparseArray3, final LongSparseArray longSparseArray4, final LongSparseArray longSparseArray5, final LongSparseIntArray longSparseIntArray3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda47
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$381(longSparseIntArray, longSparseIntArray2, sparseIntArray, longSparseArray, longSparseArray2, longSparseArray3, longSparseArray4, longSparseArray5, longSparseIntArray3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$383(long j, ArrayList arrayList) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, 0, 0), false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$384(long j, ArrayList arrayList, long j2) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, 5, (int) j2), false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$385(long j, int i) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, new ArrayList<>(), getMessagesStorage().markMessagesAsDeleted(j, i, false, true), false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$354(boolean z, long j, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$355(boolean z, TLRPC.Updates updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(-updates.chat_id, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$356(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$357(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda238
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdates$356(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processUpdates$358(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$359() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$processUpdatesQueue$305(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(getUpdateSeq(updates), getUpdateSeq(updates2));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processUpdatesQueue$306(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(updates.pts, updates2.pts);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processUpdatesQueue$307(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(updates.pts, updates2.pts);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUserInfo$142(boolean z, TLRPC.User user, int i, boolean z2, TLRPC.UserFull userFull, ArrayList arrayList, HashMap hashMap, int i2, boolean z3) {
        if (z && System.currentTimeMillis() - this.loadedFullUsers.get(user.id, 0L) > 60000) {
            loadFullUser(user, i, z2);
        }
        if (userFull != null) {
            if (this.fullUsers.get(user.id) == null) {
                this.fullUsers.put(user.id, userFull);
                getTranslateController().updateDialogFull(user.id);
                StarsController.getInstance(this.currentAccount).invalidateProfileGifts(userFull);
                int indexOfKey = this.blockePeers.indexOfKey(user.id);
                if (userFull.blocked) {
                    if (indexOfKey < 0) {
                        this.blockePeers.put(user.id, 1);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                    }
                } else if (indexOfKey >= 0) {
                    this.blockePeers.removeAt(indexOfKey);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(user.id), userFull);
        }
        if (arrayList != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(user.id), arrayList, hashMap, Integer.valueOf(i2), Boolean.valueOf(z3));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChat$53(TLRPC.Chat chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRightsUpdated, chat);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChat$54(TLRPC.Chat chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatSwithcedToForum, Long.valueOf(chat.id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putUsers$52() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$registerForPush$301() {
        this.registeringForPush = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$registerForPush$302(int i, String str, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push, push type: " + i);
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            SharedConfig.pushType = i;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda439
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$registerForPush$301();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$reloadDialogsReadValue$58(TLObject tLObject, TLRPC.TL_error tL_error) {
        TLRPC.TL_updateReadHistoryOutbox tL_updateReadHistoryOutbox;
        TLRPC.TL_updateReadHistoryInbox tL_updateReadHistoryInbox;
        if (tLObject != null) {
            TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            ArrayList<TLRPC.Update> arrayList = new ArrayList<>();
            for (int i = 0; i < tL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC.Dialog dialog = tL_messages_peerDialogs.dialogs.get(i);
                DialogObject.initDialog(dialog);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelInbox tL_updateReadChannelInbox = new TLRPC.TL_updateReadChannelInbox();
                        tL_updateReadChannelInbox.channel_id = dialog.peer.channel_id;
                        tL_updateReadChannelInbox.max_id = dialog.read_inbox_max_id;
                        tL_updateReadChannelInbox.still_unread_count = dialog.unread_count;
                        tL_updateReadHistoryInbox = tL_updateReadChannelInbox;
                    } else {
                        TLRPC.TL_updateReadHistoryInbox tL_updateReadHistoryInbox2 = new TLRPC.TL_updateReadHistoryInbox();
                        tL_updateReadHistoryInbox2.peer = dialog.peer;
                        tL_updateReadHistoryInbox2.max_id = dialog.read_inbox_max_id;
                        tL_updateReadHistoryInbox = tL_updateReadHistoryInbox2;
                    }
                    arrayList.add(tL_updateReadHistoryInbox);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_outbox_max_id, num2.intValue())));
                if (dialog.read_outbox_max_id > num2.intValue()) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelOutbox tL_updateReadChannelOutbox = new TLRPC.TL_updateReadChannelOutbox();
                        tL_updateReadChannelOutbox.channel_id = dialog.peer.channel_id;
                        tL_updateReadChannelOutbox.max_id = dialog.read_outbox_max_id;
                        tL_updateReadHistoryOutbox = tL_updateReadChannelOutbox;
                    } else {
                        TLRPC.TL_updateReadHistoryOutbox tL_updateReadHistoryOutbox2 = new TLRPC.TL_updateReadHistoryOutbox();
                        tL_updateReadHistoryOutbox2.peer = dialog.peer;
                        tL_updateReadHistoryOutbox2.max_id = dialog.read_outbox_max_id;
                        tL_updateReadHistoryOutbox = tL_updateReadHistoryOutbox2;
                    }
                    arrayList.add(tL_updateReadHistoryOutbox);
                }
            }
            if (arrayList.isEmpty()) {
                return;
            }
            processUpdateArray(arrayList, null, null, false, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMentionsCountForChannel$210(TLRPC.InputPeer inputPeer, long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
        if (messages_messages != null) {
            int i = messages_messages.count;
            if (i == 0) {
                i = messages_messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount(-inputPeer.channel_id, 0L, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMentionsCountForChannels$211(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            reloadMentionsCountForChannel(getInputPeer(-((Long) arrayList.get(i)).longValue()), 0L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMessages$67(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList arrayList3 = (ArrayList) this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        ArrayList arrayList4 = (ArrayList) this.dialogMessage.get(j);
        if (arrayList4 != null) {
            for (int i = 0; i < arrayList4.size(); i++) {
                MessageObject messageObject = (MessageObject) arrayList4.get(i);
                int i2 = 0;
                while (true) {
                    if (i2 < arrayList2.size()) {
                        MessageObject messageObject2 = (MessageObject) arrayList2.get(i2);
                        if (messageObject.getId() == messageObject2.getId()) {
                            arrayList4.set(i, messageObject2);
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                                if (messageObject3 != null) {
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                }
                            }
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                        } else {
                            i2++;
                        }
                    }
                }
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMessages$68(final long j, boolean z, int i, final ArrayList arrayList, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            TLRPC.messages_Messages messages_messages = (TLRPC.messages_Messages) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i2 = 0; i2 < messages_messages.users.size(); i2++) {
                TLRPC.User user = messages_messages.users.get(i2);
                longSparseArray.put(user.id, user);
            }
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i3 = 0; i3 < messages_messages.chats.size(); i3++) {
                TLRPC.Chat chat = messages_messages.chats.get(i3);
                longSparseArray2.put(chat.id, chat);
            }
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            ArrayList arrayList2 = new ArrayList();
            int i4 = 0;
            while (i4 < messages_messages.messages.size()) {
                TLRPC.Message message = messages_messages.messages.get(i4);
                message.dialog_id = j;
                if (!z) {
                    message.unread = (message.out ? num2 : num).intValue() < message.id;
                }
                Integer num3 = num;
                ArrayList arrayList3 = arrayList2;
                arrayList3.add(new MessageObject(this.currentAccount, message, longSparseArray, longSparseArray2, true, true));
                i4++;
                arrayList2 = arrayList3;
                num = num3;
            }
            final ArrayList arrayList4 = arrayList2;
            ImageLoader.saveMessagesThumbs(messages_messages.messages);
            getMessagesStorage().putMessages(messages_messages, j, -1, 0, false, i, 0L);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda83
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$reloadMessages$67(j, arrayList, arrayList4);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadReactionsNotifySettings$193(TLObject tLObject) {
        if (tLObject instanceof TLRPC.TL_reactionsNotifySettings) {
            TLRPC.TL_reactionsNotifySettings tL_reactionsNotifySettings = (TLRPC.TL_reactionsNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putBoolean("EnableReactionsMessages", tL_reactionsNotifySettings.messages_notify_from != null);
            TLRPC.ReactionNotificationsFrom reactionNotificationsFrom = tL_reactionsNotifySettings.messages_notify_from;
            if (reactionNotificationsFrom != null) {
                edit.putBoolean("EnableReactionsMessagesContacts", reactionNotificationsFrom instanceof TLRPC.TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsStories", tL_reactionsNotifySettings.stories_notify_from != null);
            TLRPC.ReactionNotificationsFrom reactionNotificationsFrom2 = tL_reactionsNotifySettings.stories_notify_from;
            if (reactionNotificationsFrom2 != null) {
                edit.putBoolean("EnableReactionsStoriesContacts", reactionNotificationsFrom2 instanceof TLRPC.TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsPreview", tL_reactionsNotifySettings.show_previews);
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tL_reactionsNotifySettings.sound, edit, 0L, 0L, 4, false);
            edit.apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadReactionsNotifySettings$194(final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda383
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadReactionsNotifySettings$193(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadUser$51(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject instanceof TLRPC.Vector) {
            ArrayList<Object> arrayList = ((TLRPC.Vector) tLObject).objects;
            ArrayList<TLRPC.User> arrayList2 = new ArrayList<>();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i) instanceof TLRPC.User) {
                    arrayList2.add((TLRPC.User) arrayList.get(i));
                }
            }
            getMessagesController().putUsers(arrayList2, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadWebPages$176(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, int i) {
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList == null) {
            return;
        }
        TLRPC.TL_messages_messages tL_messages_messages = new TLRPC.TL_messages_messages();
        if (tLObject instanceof TLRPC.TL_messageMediaWebPage) {
            TLRPC.TL_messageMediaWebPage tL_messageMediaWebPage = (TLRPC.TL_messageMediaWebPage) tLObject;
            TLRPC.WebPage webPage = tL_messageMediaWebPage.webpage;
            if ((webPage instanceof TLRPC.TL_webPage) || (webPage instanceof TLRPC.TL_webPageEmpty)) {
                for (int i2 = 0; i2 < arrayList.size(); i2++) {
                    ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = tL_messageMediaWebPage.webpage;
                    if (i2 == 0) {
                        ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i2)).messageOwner);
                    }
                    tL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
                }
            } else {
                longSparseArray.put(webPage.id, arrayList);
            }
        } else {
            for (int i3 = 0; i3 < arrayList.size(); i3++) {
                ((MessageObject) arrayList.get(i3)).messageOwner.media.webpage = new TLRPC.TL_webPageEmpty();
                tL_messages_messages.messages.add(((MessageObject) arrayList.get(i3)).messageOwner);
            }
        }
        if (tL_messages_messages.messages.isEmpty()) {
            return;
        }
        getMessagesStorage().putMessages((TLRPC.messages_Messages) tL_messages_messages, j, -2, 0, false, i, 0L);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadWebPages$177(final HashMap hashMap, final String str, final LongSparseArray longSparseArray, final long j, final int i, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda345
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadWebPages$176(hashMap, str, tLObject, longSparseArray, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeDialog$125(long j) {
        long j2 = -j;
        this.channelsPts.delete(j2);
        this.shortPollChannels.delete(j2);
        this.needShortPollChannels.delete(j2);
        this.shortPollOnlines.delete(j2);
        this.needShortPollOnlines.delete(j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFolderTemporarily$433(int i, boolean z) {
        int i2 = 0;
        while (i2 < this.dialogFilters.size()) {
            if (this.dialogFilters.get(i2).id == i) {
                this.dialogFilters.remove(i2);
                i2--;
            }
            i2++;
        }
        this.frozenDialogFilters = null;
        this.hiddenUndoChats.clear();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFolderTemporarily$434(boolean z) {
        this.frozenDialogFilters = null;
        this.hiddenUndoChats.clear();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$removeSuggestion$35(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$renameSavedReactionTag$438(TLRPC.TL_savedReactionTag tL_savedReactionTag, TLRPC.TL_savedReactionTag tL_savedReactionTag2) {
        int compare;
        int i = tL_savedReactionTag.count;
        int i2 = tL_savedReactionTag2.count;
        if (i != i2) {
            return i2 - i;
        }
        compare = Long.compare(getTagLongId(tL_savedReactionTag2.reaction) ^ Long.MIN_VALUE, getTagLongId(tL_savedReactionTag.reaction) ^ Long.MIN_VALUE);
        return compare;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reorderPinnedDialogs$341(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$70(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$71(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$72(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestContactToken$429(Utilities.Callback callback) {
        callback.run(this.cachedContactToken);
        this.requestingContactToken = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestContactToken$430(final Utilities.Callback callback, long j, long j2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (!(tLObject instanceof TLRPC.TL_exportedContactToken)) {
            this.requestingContactToken = false;
        } else {
            this.cachedContactToken = (TLRPC.TL_exportedContactToken) tLObject;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda292
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$requestContactToken$429(callback);
                }
            }, Math.max(0L, j - (System.currentTimeMillis() - j2)));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestIsUserPremiumBlocked$448(TLObject tLObject, ArrayList arrayList) {
        boolean z;
        if (tLObject instanceof TLRPC.Vector) {
            ArrayList<Object> arrayList2 = ((TLRPC.Vector) tLObject).objects;
            z = false;
            for (int i = 0; i < Math.min(arrayList.size(), arrayList2.size()); i++) {
                long longValue = ((Long) arrayList.get(i)).longValue();
                boolean z2 = arrayList2.get(i) instanceof TLRPC.TL_boolTrue;
                Boolean bool = (Boolean) this.cachedIsUserPremiumBlocked.get(longValue);
                if (bool == null || bool.booleanValue() != z2) {
                    this.cachedIsUserPremiumBlocked.put(longValue, Boolean.valueOf(z2));
                    z = true;
                }
                TLRPC.UserFull userFull = getUserFull(longValue);
                if (userFull != null && userFull.contact_require_premium != z2) {
                    userFull.contact_require_premium = z2;
                    getMessagesStorage().updateUserInfo(userFull, true);
                } else if (userFull == null) {
                    getMessagesStorage().updateUserInfoPremiumBlocked(longValue, z2);
                }
                z = true;
            }
        } else {
            z = false;
        }
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userIsPremiumBlockedUpadted, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$requestIsUserPremiumBlocked$449(final ArrayList arrayList, final TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda197
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$requestIsUserPremiumBlocked$448(tLObject, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDialogs$198(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC.TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDialogs$199(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            this.resetDialogsAll = (TLRPC.messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveGif$137(Object obj, TLRPC.TL_messages_saveGif tL_messages_saveGif, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null || !FileRefController.isFileRefError(tL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tL_messages_saveGif);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveRecentSticker$138(Object obj, TLRPC.TL_messages_saveRecentSticker tL_messages_saveRecentSticker, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null || !FileRefController.isFileRefError(tL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tL_messages_saveRecentSticker);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSavedReactionsTags$443(long j, TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags) {
        SQLiteDatabase database = getMessagesStorage().getDatabase();
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                database.executeFast("DELETE FROM saved_reaction_tags WHERE topic_id = " + j).stepThis().dispose();
                sQLitePreparedStatement = database.executeFast("REPLACE INTO saved_reaction_tags VALUES(?, ?)");
                sQLitePreparedStatement.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_messages_savedReactionsTags.getObjectSize());
                tL_messages_savedReactionsTags.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                FileLog.e(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$saveTheme$112(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$saveThemeToServer$115(String str, String str2, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        if (str == null) {
            this.uploadingThemes.remove(str2);
            return;
        }
        this.uploadingThemes.put(str, themeAccent != null ? themeAccent : themeInfo);
        if (themeAccent == null) {
            themeInfo.uploadingFile = str2;
            themeInfo.uploadingThumb = str;
        } else {
            themeAccent.uploadingFile = str2;
            themeAccent.uploadingThumb = str;
        }
        getFileLoader().uploadFile(str2, false, true, ConnectionsManager.FileTypeFile);
        getFileLoader().uploadFile(str, false, true, ConnectionsManager.FileTypePhoto);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveThemeToServer$116(final String str, File file, final Theme.ThemeAccent themeAccent, final Theme.ThemeInfo themeInfo) {
        final String createThemePreviewImage = Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null, themeAccent);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$115(createThemePreviewImage, str, themeAccent, themeInfo);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveWallpaperToServer$117(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleTranscriptionUpdate$33() {
        AndroidUtilities.cancelRunOnUIThread(this.notifyTranscriptionAudioCooldownUpdate);
        long currentTime = this.transcribeAudioTrialCooldownUntil - getConnectionsManager().getCurrentTime();
        if (currentTime > 0) {
            AndroidUtilities.runOnUIThread(this.notifyTranscriptionAudioCooldownUpdate, currentTime);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendBotStart$272(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:10:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:7:0x0062  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$sendLoadPeersRequest$16(ArrayList arrayList, ArrayList arrayList2, TLRPC.messages_Dialogs messages_dialogs, TLRPC.messages_Dialogs messages_dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashSet hashSet, Runnable runnable, TLObject tLObject2, TLRPC.TL_error tL_error) {
        ArrayList<TLRPC.Chat> arrayList6;
        if (!(tLObject2 instanceof TLRPC.TL_messages_chats)) {
            if (tLObject2 instanceof TLRPC.Vector) {
                TLRPC.Vector vector = (TLRPC.Vector) tLObject2;
                int size = vector.objects.size();
                for (int i = 0; i < size; i++) {
                    arrayList2.add((TLRPC.User) vector.objects.get(i));
                }
            } else if (tLObject2 instanceof TLRPC.TL_messages_peerDialogs) {
                TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject2;
                messages_dialogs.dialogs.addAll(tL_messages_peerDialogs.dialogs);
                messages_dialogs.messages.addAll(tL_messages_peerDialogs.messages);
                messages_dialogs2.dialogs.addAll(tL_messages_peerDialogs.dialogs);
                messages_dialogs2.messages.addAll(tL_messages_peerDialogs.messages);
                arrayList2.addAll(tL_messages_peerDialogs.users);
                arrayList6 = tL_messages_peerDialogs.chats;
            }
            arrayList3.remove(tLObject);
            if (arrayList3.isEmpty()) {
                return;
            }
            getMessagesStorage().processLoadedFilterPeers(messages_dialogs, messages_dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashSet, runnable);
            return;
        }
        arrayList6 = ((TLRPC.TL_messages_chats) tLObject2).chats;
        arrayList.addAll(arrayList6);
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendTyping$163(final int i, final long j, final long j2, TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda116
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$162(i, j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendTyping$165(final int i, final long j, final long j2, TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda339
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$164(i, j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setBoostsToUnblockRestrictions$89(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setBoostsToUnblockRestrictions$90(final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda210
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setBoostsToUnblockRestrictions$89(j);
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChannelSlowMode$87(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChannelSlowMode$88(final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda85
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChannelSlowMode$87(j);
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChatReactions$424(long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(j), 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChatReactions$425(final long j, TLRPC.TL_messages_setChatAvailableReactions tL_messages_setChatAvailableReactions, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            TLRPC.ChatFull chatFull = getChatFull(j);
            if (chatFull != null) {
                if (chatFull instanceof TLRPC.TL_chatFull) {
                    chatFull.flags |= 262144;
                }
                if (chatFull instanceof TLRPC.TL_channelFull) {
                    chatFull.flags |= 1073741824;
                }
                chatFull.available_reactions = tL_messages_setChatAvailableReactions.available_reactions;
                getMessagesStorage().updateChatInfo(chatFull, false);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda136
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChatReactions$424(j);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setContentSettings$457(TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            BulletinFactory.showError(tL_error);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setContentSettings$458(TLObject tLObject, final TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda379
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$setContentSettings$457(TLRPC.TL_error.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setCustomChatReactions$421(Runnable runnable, long j) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(j), 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setCustomChatReactions$422(Utilities.Callback callback, TLRPC.TL_error tL_error) {
        if (callback != null) {
            callback.run(tL_error);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setCustomChatReactions$423(final long j, TLRPC.TL_messages_setChatAvailableReactions tL_messages_setChatAvailableReactions, final Runnable runnable, final Utilities.Callback callback, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tLObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda349
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$setCustomChatReactions$422(Utilities.Callback.this, tL_error);
                }
            });
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
        TLRPC.ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            if (chatFull instanceof TLRPC.TL_chatFull) {
                chatFull.flags |= 262144;
            }
            if (chatFull instanceof TLRPC.TL_channelFull) {
                chatFull.flags |= 1073741824;
            }
            chatFull.available_reactions = tL_messages_setChatAvailableReactions.available_reactions;
            getMessagesStorage().updateChatInfo(chatFull, false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda348
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setCustomChatReactions$421(runnable, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$91(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$92(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_messages_editChatDefaultBannedRights tL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$93(final long j, final BaseFragment baseFragment, final TLRPC.TL_messages_editChatDefaultBannedRights tL_messages_editChatDefaultBannedRights, final boolean z, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda168
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setDefaultBannedRole$92(tL_error, baseFragment, tL_messages_editChatDefaultBannedRights, z);
                }
            });
        } else {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda167
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setDefaultBannedRole$91(j);
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultSendAs$255(long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        long j2;
        if (tLObject instanceof TLRPC.TL_boolTrue) {
            j2 = -j;
            if (getChatFull(j2) != null) {
                return;
            }
        } else if (tL_error == null || tL_error.code != 400) {
            return;
        } else {
            j2 = -j;
        }
        loadFullChat(j2, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogHistoryTTL$128(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setLastCreatedDialogId$50(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$84(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$85(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_channels_editBanned tL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_channels_editBanned, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$86(final long j, Runnable runnable, final BaseFragment baseFragment, final TLRPC.TL_channels_editBanned tL_channels_editBanned, final boolean z, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda139
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setParticipantBannedRole$85(tL_error, baseFragment, tL_channels_editBanned, z);
                }
            });
            return;
        }
        processUpdates((TLRPC.Updates) tLObject, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda138
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setParticipantBannedRole$84(j);
            }
        }, 1000L);
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$100(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$101(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_messages_editChatAdmin tL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_messages_editChatAdmin, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$103(final long j, final Runnable runnable, final BaseFragment baseFragment, final TLRPC.TL_messages_editChatAdmin tL_messages_editChatAdmin, final ErrorDelegate errorDelegate, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda247
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$100(j, runnable);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda248
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setUserAdminRole$101(tL_error, baseFragment, tL_messages_editChatAdmin);
            }
        });
        if (errorDelegate != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.ErrorDelegate.this.run(tL_error);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$104(TLRPC.TL_messages_editChatAdmin tL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tL_messages_editChatAdmin, requestDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$94(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$95(TLRPC.User user, TLRPC.Chat chat, ErrorDelegate errorDelegate, TLRPC.TL_error tL_error) {
        BaseFragment lastFragment = LaunchActivity.getLastFragment();
        if (lastFragment != null && lastFragment.getParentActivity() != null) {
            LimitReachedBottomSheet limitReachedBottomSheet = new LimitReachedBottomSheet(lastFragment, lastFragment.getParentActivity(), 11, this.currentAccount, null);
            ArrayList arrayList = new ArrayList();
            arrayList.add(user);
            limitReachedBottomSheet.setRestrictedUsers(chat, arrayList, null, null);
            limitReachedBottomSheet.show();
        }
        errorDelegate.run(tL_error);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$96(TLRPC.TL_error tL_error, BaseFragment baseFragment, TLRPC.TL_channels_editAdmin tL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tL_error, baseFragment, tL_channels_editAdmin, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$98(final long j, final Runnable runnable, final TLRPC.Chat chat, final TLRPC.User user, final ErrorDelegate errorDelegate, final BaseFragment baseFragment, final TLRPC.TL_channels_editAdmin tL_channels_editAdmin, final boolean z, TLObject tLObject, final TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda286
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$94(j, runnable);
                }
            }, 1000L);
        } else {
            if ("USER_PRIVACY_RESTRICTED".equals(tL_error.text) && ChatObject.canUserDoAdminAction(chat, 3)) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda287
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$95(user, chat, errorDelegate, tL_error);
                    }
                });
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda288
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$96(tL_error, baseFragment, tL_channels_editAdmin, z);
                }
            });
            if (errorDelegate != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda289
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.ErrorDelegate.this.run(tL_error);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$99(TLRPC.TL_channels_editAdmin tL_channels_editAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tL_channels_editAdmin, requestDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$startShortPoll$309(Consumer consumer) {
        consumer.accept(Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$startShortPoll$310(Consumer consumer) {
        consumer.accept(Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startShortPoll$311(TLRPC.Chat chat, boolean z, int i, final Consumer consumer) {
        ArrayList arrayList = (ArrayList) this.needShortPollChannels.get(chat.id);
        ArrayList arrayList2 = (ArrayList) this.needShortPollOnlines.get(chat.id);
        if (z) {
            if (arrayList != null) {
                arrayList.remove(Integer.valueOf(i));
            }
            if (arrayList == null || arrayList.isEmpty()) {
                this.needShortPollChannels.delete(chat.id);
            }
            if (chat.megagroup) {
                if (arrayList2 != null) {
                    arrayList2.remove(Integer.valueOf(i));
                }
                if (arrayList2 == null || arrayList2.isEmpty()) {
                    this.needShortPollOnlines.delete(chat.id);
                    return;
                }
                return;
            }
            return;
        }
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.needShortPollChannels.put(chat.id, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(i))) {
            arrayList.add(Integer.valueOf(i));
        }
        if (this.shortPollChannels.indexOfKey(chat.id) < 0) {
            if (consumer != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda314
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$startShortPoll$309(Consumer.this);
                    }
                });
            }
            getChannelDifference(chat.id, 3, 0L, null);
        } else if (consumer != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda315
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$startShortPoll$310(Consumer.this);
                }
            });
        }
        if (chat.megagroup) {
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                this.needShortPollOnlines.put(chat.id, arrayList2);
            }
            if (!arrayList2.contains(Integer.valueOf(i))) {
                arrayList2.add(Integer.valueOf(i));
            }
            if (this.shortPollOnlines.indexOfKey(chat.id) < 0) {
                this.shortPollOnlines.put(chat.id, 0);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelForum$264() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelForum$265(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda374
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelForum$264();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelInvitesHistory$266() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelInvitesHistory$267(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda172
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelInvitesHistory$266();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelSignatures$262() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChannelSignatures$263(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda236
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelSignatures$262();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatJoinRequest$260() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatJoinRequest$261(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda260
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinRequest$260();
                }
            });
            if (runnable == null) {
                return;
            }
        } else if (tL_error != null && !"CHAT_NOT_MODIFIED".equals(tL_error.text)) {
            if (runnable2 != null) {
                runnable2.run();
                return;
            }
            return;
        } else if (runnable == null) {
            return;
        }
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatJoinToSend$258() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatJoinToSend$259(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda158
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinToSend$258();
                }
            });
            if (runnable == null) {
                return;
            }
        } else if (tL_error != null && !"CHAT_NOT_MODIFIED".equals(tL_error.text)) {
            if (runnable2 != null) {
                runnable2.run();
                return;
            }
            return;
        } else if (runnable == null) {
            return;
        }
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatNoForwards$256() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$toggleChatNoForwards$257(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC.Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda54
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatNoForwards$256();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$unblockPeer$105(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$unblockPeer$106(final Runnable runnable, TLObject tLObject, TLRPC.TL_error tL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda227
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$unblockPeer$105(runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinAllMessages$122(TLRPC.Chat chat, TLRPC.User user, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            TLRPC.TL_messages_affectedHistory tL_messages_affectedHistory = (TLRPC.TL_messages_affectedHistory) tLObject;
            if (ChatObject.isChannel(chat)) {
                processNewChannelDifferenceParams(tL_messages_affectedHistory.pts, tL_messages_affectedHistory.pts_count, chat.id);
            } else {
                processNewDifferenceParams(-1, tL_messages_affectedHistory.pts, -1, tL_messages_affectedHistory.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages(chat != null ? -chat.id : user.id, null, false, 0, 0, false, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$unregistedPush$298(TLObject tLObject, TLRPC.TL_error tL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUserName$270(long j, String str, Runnable runnable) {
        TLRPC.Chat chat = getChat(Long.valueOf(j));
        if (chat.usernames != null) {
            for (int i = 0; i < chat.usernames.size(); i++) {
                TLRPC.TL_username tL_username = chat.usernames.get(i);
                if (tL_username != null && tL_username.editable) {
                    tL_username.username = str;
                    break;
                }
            }
        }
        ArrayList<TLRPC.TL_username> arrayList = chat.usernames;
        if (arrayList == null || arrayList.size() >= 1) {
            if (chat.usernames == null) {
                chat.usernames = new ArrayList<>();
            }
            TLRPC.TL_username tL_username2 = new TLRPC.TL_username();
            tL_username2.username = str;
            tL_username2.active = true;
            tL_username2.editable = true;
            chat.usernames.add(0, tL_username2);
        } else {
            chat.username = str;
        }
        ArrayList arrayList2 = new ArrayList();
        arrayList2.add(chat);
        getMessagesStorage().putUsersAndChats(null, arrayList2, true, true);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUserName$271(final long j, final String str, final Runnable runnable, BaseFragment baseFragment, TLRPC.TL_channels_updateUsername tL_channels_updateUsername, Runnable runnable2, TLObject tLObject, TLRPC.TL_error tL_error) {
        if ((tLObject instanceof TLRPC.TL_boolTrue) || (tL_error != null && "USERNAME_NOT_MODIFIED".equals(tL_error.text))) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda71
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateChannelUserName$270(j, str, runnable);
                }
            });
            return;
        }
        AlertsCreator.processError(UserConfig.selectedAccount, tL_error, baseFragment, tL_channels_updateUsername, new Object[0]);
        if (runnable2 != null) {
            runnable2.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatAbout$268(TLRPC.ChatFull chatFull, String str) {
        chatFull.about = str;
        getMessagesStorage().updateChatInfo(chatFull, false);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, chatFull, 0, bool, bool);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatAbout$269(final TLRPC.ChatFull chatFull, final String str, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (!(tLObject instanceof TLRPC.TL_boolTrue) || chatFull == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda463
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateChatAbout$268(chatFull, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:10:0x008f  */
    /* JADX WARN: Removed duplicated region for block: B:13:0x0095  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x009b  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x00af  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00da  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0106  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0164 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0206  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x020a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateConfig$36(TLRPC.TL_config tL_config) {
        String str;
        int i;
        String str2;
        String str3;
        String str4;
        String[] split;
        int i2;
        String str5;
        int i3;
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig(true);
        checkPeerColors(true);
        this.remoteConfigLoaded = true;
        this.maxMegagroupCount = tL_config.megagroup_size_max;
        this.maxGroupCount = tL_config.chat_size_max;
        this.maxEditTime = tL_config.edit_time_limit;
        this.ratingDecay = tL_config.rating_e_decay;
        this.maxRecentStickersCount = tL_config.stickers_recent_limit;
        this.revokeTimeLimit = tL_config.revoke_time_limit;
        this.revokeTimePmLimit = tL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tL_config.revoke_pm_inbox;
        String str6 = tL_config.me_url_prefix;
        this.linkPrefix = str6;
        boolean z = tL_config.force_try_ipv6;
        if (str6.endsWith("/")) {
            String str7 = this.linkPrefix;
            this.linkPrefix = str7.substring(0, str7.length() - 1);
        }
        if (!this.linkPrefix.startsWith("https://")) {
            if (this.linkPrefix.startsWith("http://")) {
                str = this.linkPrefix;
                i = 7;
            }
            this.callReceiveTimeout = tL_config.call_receive_timeout_ms;
            this.callRingTimeout = tL_config.call_ring_timeout_ms;
            this.callConnectTimeout = tL_config.call_connect_timeout_ms;
            this.callPacketTimeout = tL_config.call_packet_timeout_ms;
            this.maxMessageLength = tL_config.message_length_max;
            this.maxCaptionLength = tL_config.caption_length_max;
            this.preloadFeaturedStickers = tL_config.preload_featured_stickers;
            str2 = tL_config.venue_search_username;
            if (str2 != null) {
                this.venueSearchBot = str2;
            }
            str3 = tL_config.gif_search_username;
            if (str3 != null) {
                this.gifSearchBot = str3;
            }
            if (this.imageSearchBot != null) {
                this.imageSearchBot = tL_config.img_search_username;
            }
            this.blockedCountry = tL_config.blocked_mode;
            this.dcDomainName = tL_config.dc_txt_domain_name;
            this.webFileDatacenterId = tL_config.webfile_dc_id;
            str4 = tL_config.suggested_lang_code;
            if (str4 != null) {
                String str8 = this.suggestedLangCode;
                boolean z2 = str8 == null || !str8.equals(str4);
                this.suggestedLangCode = tL_config.suggested_lang_code;
                if (z2) {
                    LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
                }
            }
            Theme.loadRemoteThemes(this.currentAccount, false);
            Theme.checkCurrentRemoteTheme(false);
            if (tL_config.static_maps_provider == null) {
                tL_config.static_maps_provider = "telegram";
            }
            this.mapKey = null;
            this.mapProvider = 2;
            this.availableMapProviders = 0;
            FileLog.d("map providers = " + tL_config.static_maps_provider);
            split = tL_config.static_maps_provider.split(",");
            for (i2 = 0; i2 < split.length; i2++) {
                String[] split2 = split[i2].split("\\+");
                if (split2.length > 0) {
                    String[] split3 = split2[0].split(":");
                    if (split3.length > 0) {
                        if ("yandex".equals(split3[0])) {
                            if (i2 == 0) {
                                if (split2.length > 1) {
                                    this.mapProvider = 3;
                                } else {
                                    this.mapProvider = 1;
                                }
                            }
                            i3 = this.availableMapProviders | 4;
                        } else if ("google".equals(split3[0])) {
                            if (i2 == 0 && split2.length > 1) {
                                this.mapProvider = 4;
                            }
                            i3 = this.availableMapProviders | 1;
                        } else {
                            if ("telegram".equals(split3[0])) {
                                if (i2 == 0) {
                                    this.mapProvider = 2;
                                }
                                i3 = this.availableMapProviders | 2;
                            }
                            if (split3.length <= 1) {
                                this.mapKey = split3[1];
                            }
                        }
                        this.availableMapProviders = i3;
                        if (split3.length <= 1) {
                        }
                    }
                }
            }
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            edit.putBoolean("remoteConfigLoaded", this.remoteConfigLoaded);
            edit.putInt("maxGroupCount", this.maxGroupCount);
            edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
            edit.putInt("maxEditTime", this.maxEditTime);
            edit.putInt("ratingDecay", this.ratingDecay);
            edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
            edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
            edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
            edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
            edit.putInt("callRingTimeout", this.callRingTimeout);
            edit.putInt("callConnectTimeout", this.callConnectTimeout);
            edit.putInt("callPacketTimeout", this.callPacketTimeout);
            edit.putString("linkPrefix", this.linkPrefix);
            edit.putInt("maxFolderPinnedDialogsCountDefault", this.maxFolderPinnedDialogsCountDefault);
            edit.putInt("maxFolderPinnedDialogsCountPremium", this.maxFolderPinnedDialogsCountPremium);
            edit.putInt("maxMessageLength", this.maxMessageLength);
            edit.putInt("maxCaptionLength", this.maxCaptionLength);
            edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
            edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
            edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
            edit.putInt("mapProvider", this.mapProvider);
            str5 = this.mapKey;
            if (str5 == null) {
                edit.putString("pk", str5);
            } else {
                edit.remove("pk");
            }
            edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
            edit.putBoolean("blockedCountry", this.blockedCountry);
            edit.putString("venueSearchBot", this.venueSearchBot);
            edit.putString("gifSearchBot", this.gifSearchBot);
            edit.putString("imageSearchBot", this.imageSearchBot);
            edit.putString("dcDomainName2", this.dcDomainName);
            edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
            edit.putString("suggestedLangCode", this.suggestedLangCode);
            edit.putBoolean("forceTryIpV6", z);
            String str9 = tL_config.autologin_token;
            this.autologinToken = str9;
            edit.putString("autologinToken", str9);
            edit.commit();
            getConnectionsManager().setForceTryIpV6(z);
            LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tL_config.lang_pack_version, tL_config.base_lang_pack_version);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.configLoaded, new Object[0]);
        }
        str = this.linkPrefix;
        i = 8;
        this.linkPrefix = str.substring(i);
        this.callReceiveTimeout = tL_config.call_receive_timeout_ms;
        this.callRingTimeout = tL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tL_config.call_packet_timeout_ms;
        this.maxMessageLength = tL_config.message_length_max;
        this.maxCaptionLength = tL_config.caption_length_max;
        this.preloadFeaturedStickers = tL_config.preload_featured_stickers;
        str2 = tL_config.venue_search_username;
        if (str2 != null) {
        }
        str3 = tL_config.gif_search_username;
        if (str3 != null) {
        }
        if (this.imageSearchBot != null) {
        }
        this.blockedCountry = tL_config.blocked_mode;
        this.dcDomainName = tL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tL_config.webfile_dc_id;
        str4 = tL_config.suggested_lang_code;
        if (str4 != null) {
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tL_config.static_maps_provider == null) {
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tL_config.static_maps_provider);
        split = tL_config.static_maps_provider.split(",");
        while (i2 < split.length) {
        }
        SharedPreferences.Editor edit2 = this.mainPreferences.edit();
        edit2.putBoolean("remoteConfigLoaded", this.remoteConfigLoaded);
        edit2.putInt("maxGroupCount", this.maxGroupCount);
        edit2.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit2.putInt("maxEditTime", this.maxEditTime);
        edit2.putInt("ratingDecay", this.ratingDecay);
        edit2.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit2.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit2.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit2.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit2.putInt("callRingTimeout", this.callRingTimeout);
        edit2.putInt("callConnectTimeout", this.callConnectTimeout);
        edit2.putInt("callPacketTimeout", this.callPacketTimeout);
        edit2.putString("linkPrefix", this.linkPrefix);
        edit2.putInt("maxFolderPinnedDialogsCountDefault", this.maxFolderPinnedDialogsCountDefault);
        edit2.putInt("maxFolderPinnedDialogsCountPremium", this.maxFolderPinnedDialogsCountPremium);
        edit2.putInt("maxMessageLength", this.maxMessageLength);
        edit2.putInt("maxCaptionLength", this.maxCaptionLength);
        edit2.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit2.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit2.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit2.putInt("mapProvider", this.mapProvider);
        str5 = this.mapKey;
        if (str5 == null) {
        }
        edit2.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit2.putBoolean("blockedCountry", this.blockedCountry);
        edit2.putString("venueSearchBot", this.venueSearchBot);
        edit2.putString("gifSearchBot", this.gifSearchBot);
        edit2.putString("imageSearchBot", this.imageSearchBot);
        edit2.putString("dcDomainName2", this.dcDomainName);
        edit2.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit2.putString("suggestedLangCode", this.suggestedLangCode);
        edit2.putBoolean("forceTryIpV6", z);
        String str92 = tL_config.autologin_token;
        this.autologinToken = str92;
        edit2.putString("autologinToken", str92);
        edit2.commit();
        getConnectionsManager().setForceTryIpV6(z);
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tL_config.lang_pack_version, tL_config.base_lang_pack_version);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.configLoaded, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$updateEmojiStatus$29(TLObject tLObject, TLRPC.TL_error tL_error) {
        boolean z = tLObject instanceof TLRPC.TL_boolTrue;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEmojiStatusUntil$428() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_EMOJI_STATUS));
        updateEmojiStatusUntil();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInterfaceWithMessages$399(TLRPC.Dialog dialog, int i, long j, int i2) {
        if (i2 == -1) {
            if (i <= 0 || DialogObject.isEncryptedDialog(j)) {
                return;
            }
            loadUnknownDialog(getInputPeer(j), 0L);
            return;
        }
        if (i2 != 0) {
            dialog.folder_id = i2;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePrintingStrings$161(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ int lambda$updateSavedReactionTags$437(TLRPC.TL_savedReactionTag tL_savedReactionTag, TLRPC.TL_savedReactionTag tL_savedReactionTag2) {
        int compare;
        int i = tL_savedReactionTag.count;
        int i2 = tL_savedReactionTag2.count;
        if (i != i2) {
            return i2 - i;
        }
        compare = Long.compare(getTagLongId(tL_savedReactionTag2.reaction) ^ Long.MIN_VALUE, getTagLongId(tL_savedReactionTag.reaction) ^ Long.MIN_VALUE);
        return compare;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$143(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$144(TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$145(TLRPC.TL_messages_messageViews tL_messages_messageViews, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3) {
        putUsers(tL_messages_messageViews.users, false);
        putChats(tL_messages_messageViews.chats, false);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray, longSparseArray2, longSparseArray3, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$146(long j, TLRPC.TL_messages_getMessagesViews tL_messages_getMessagesViews, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            final TLRPC.TL_messages_messageViews tL_messages_messageViews = (TLRPC.TL_messages_messageViews) tLObject;
            final LongSparseArray longSparseArray = new LongSparseArray();
            final LongSparseArray longSparseArray2 = new LongSparseArray();
            final LongSparseArray longSparseArray3 = new LongSparseArray();
            SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.get(j);
            SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.get(j);
            SparseArray sparseArray = (SparseArray) longSparseArray3.get(j);
            for (int i = 0; i < tL_messages_getMessagesViews.id.size() && i < tL_messages_messageViews.views.size(); i++) {
                TLRPC.TL_messageViews tL_messageViews = tL_messages_messageViews.views.get(i);
                if ((1 & tL_messageViews.flags) != 0) {
                    if (sparseIntArray == null) {
                        sparseIntArray = new SparseIntArray();
                        longSparseArray.put(j, sparseIntArray);
                    }
                    sparseIntArray.put(tL_messages_getMessagesViews.id.get(i).intValue(), tL_messageViews.views);
                }
                if ((tL_messageViews.flags & 2) != 0) {
                    if (sparseIntArray2 == null) {
                        sparseIntArray2 = new SparseIntArray();
                        longSparseArray2.put(j, sparseIntArray2);
                    }
                    sparseIntArray2.put(tL_messages_getMessagesViews.id.get(i).intValue(), tL_messageViews.forwards);
                }
                if ((tL_messageViews.flags & 4) != 0) {
                    if (sparseArray == null) {
                        sparseArray = new SparseArray();
                        longSparseArray3.put(j, sparseArray);
                    }
                    sparseArray.put(tL_messages_getMessagesViews.id.get(i).intValue(), tL_messageViews.replies);
                }
            }
            getMessagesStorage().putUsersAndChats(tL_messages_messageViews.users, tL_messages_messageViews.chats, true, true);
            getMessagesStorage().putChannelViews(longSparseArray, longSparseArray2, longSparseArray3, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda450
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$145(tL_messages_messageViews, longSparseArray, longSparseArray2, longSparseArray3);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$147(boolean z, TLObject tLObject, TLRPC.TL_error tL_error) {
        TLRPC.Poll poll;
        if (tL_error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) tLObject;
            if (z) {
                for (int i = 0; i < updates.updates.size(); i++) {
                    TLRPC.Update update = updates.updates.get(i);
                    if ((update instanceof TLRPC.TL_updateMessagePoll) && (poll = ((TLRPC.TL_updateMessagePoll) update).poll) != null && !poll.closed) {
                        this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                    }
                }
            }
            processUpdates(updates, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0064  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0077  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTimerProc$148(int i) {
        int i2;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.pollsToCheck.size();
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i4 = 0;
        while (i4 < size) {
            SparseArray sparseArray = (SparseArray) this.pollsToCheck.valueAt(i4);
            if (sparseArray != null) {
                int size2 = sparseArray.size();
                int i5 = 0;
                while (true) {
                    int i6 = 1000;
                    if (i5 >= size2) {
                        break;
                    }
                    MessageObject messageObject = (MessageObject) sparseArray.valueAt(i5);
                    TLRPC.Poll poll = ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                    int i7 = poll.close_date;
                    final boolean z = (i7 == 0 || poll.closed) ? false : true;
                    if (z) {
                        if (i7 <= i) {
                            i2 = i4;
                            int i8 = size2;
                            if (Math.abs(elapsedRealtime - messageObject.pollLastCheckTime) < i6) {
                                messageObject.pollLastCheckTime = elapsedRealtime;
                                TLRPC.TL_messages_getPollResults tL_messages_getPollResults = new TLRPC.TL_messages_getPollResults();
                                tL_messages_getPollResults.peer = getInputPeer(messageObject.getDialogId());
                                tL_messages_getPollResults.msg_id = messageObject.getId();
                                getConnectionsManager().sendRequest(tL_messages_getPollResults, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda243
                                    @Override // org.telegram.tgnet.RequestDelegate
                                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                        MessagesController.this.lambda$updateTimerProc$147(z, tLObject, tL_error);
                                    }
                                });
                            } else if (!messageObject.pollVisibleOnScreen && !z) {
                                sparseArray.remove(messageObject.getId());
                                size2 = i8 - 1;
                                i5--;
                                i5++;
                                i4 = i2;
                            }
                            size2 = i8;
                            i5++;
                            i4 = i2;
                        } else {
                            i3 = Math.min(i3, i7 - i);
                        }
                    }
                    i2 = i4;
                    i6 = 30000;
                    int i82 = size2;
                    if (Math.abs(elapsedRealtime - messageObject.pollLastCheckTime) < i6) {
                    }
                    size2 = i82;
                    i5++;
                    i4 = i2;
                }
                int i9 = i4;
                if (i3 < 5) {
                    this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
                }
                if (sparseArray.size() == 0) {
                    LongSparseArray longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(i9));
                    size--;
                    i4 = i9 - 1;
                } else {
                    i4 = i9;
                }
            }
            i4++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$149() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$150(long j, TLRPC.TL_chatOnlines tL_chatOnlines) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatOnlineCountDidLoad, Long.valueOf(j), Integer.valueOf(tL_chatOnlines.onlines));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$151(final long j, TLObject tLObject, TLRPC.TL_error tL_error) {
        if (tLObject != null) {
            final TLRPC.TL_chatOnlines tL_chatOnlines = (TLRPC.TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(j, tL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda51
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$150(j, tL_chatOnlines);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$152() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void loadMessagesInternal(final long j, final long j2, final boolean z, final int i, final int i2, final int i3, boolean z2, final int i4, final int i5, final int i6, final int i7, final int i8, final long j3, final int i9, final int i10, final int i11, final int i12, final boolean z3, final int i13, boolean z4, final boolean z5, final boolean z6, Timer timer, long j4) {
        Timer timer2;
        int i14;
        final int i15;
        int sendRequest;
        ConnectionsManager connectionsManager;
        int i16;
        TLRPC.TL_forumTopic findTopic;
        int i17;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j + " topic_id " + j3 + " count " + i + " max_id " + i2 + " cache " + z2 + " mindate = " + i4 + " guid " + i5 + " load_type " + i6 + " last_message_id " + i7 + " mode " + i8 + " index " + i9 + " firstUnread " + i10 + " unread_count " + i11 + " last_date " + i12 + " queryFromServer " + z3 + " isTopic " + z6);
        }
        if (BuildVars.LOGS_ENABLED && timer == null && i8 == 0) {
            timer2 = new Timer("MessageLoaderLogger dialogId=" + j + " index=" + i9 + " count=" + i);
        } else {
            timer2 = timer;
        }
        if ((j3 == 0 || z6 || i8 == 3 || i8 == 5) && i8 != 2 && (z2 || DialogObject.isEncryptedDialog(j))) {
            getMessagesStorage().getMessages(j, j2, z, i, i2, i3, i4, i5, i6, i8, j3, i9, z5, z6, timer2);
            return;
        }
        if (i8 == 5) {
            TLRPC.TL_messages_getQuickReplyMessages tL_messages_getQuickReplyMessages = new TLRPC.TL_messages_getQuickReplyMessages();
            tL_messages_getQuickReplyMessages.shortcut_id = (int) j3;
            tL_messages_getQuickReplyMessages.hash = j4;
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getQuickReplyMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda417
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$166(j, j2, i, i2, i3, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLObject, tL_error);
                }
            }), i5);
            return;
        }
        if (j3 != 0) {
            if (i8 == 3) {
                final TLRPC.TL_messages_getSavedHistory tL_messages_getSavedHistory = new TLRPC.TL_messages_getSavedHistory();
                tL_messages_getSavedHistory.peer = getInputPeer(j3);
                if (i6 == 4) {
                    i17 = (-i) + 5;
                } else {
                    if (i6 != 3) {
                        if (i6 == 1) {
                            tL_messages_getSavedHistory.add_offset = (-i) - 1;
                        } else if (i6 == 2 && i2 != 0) {
                            i17 = (-i) + 6;
                        } else if (j < 0 && i2 != 0 && ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                            tL_messages_getSavedHistory.add_offset = -1;
                            tL_messages_getSavedHistory.limit++;
                        }
                        tL_messages_getSavedHistory.limit = i;
                        tL_messages_getSavedHistory.offset_id = i2;
                        tL_messages_getSavedHistory.offset_date = i3;
                        getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getSavedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda418
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$loadMessagesInternal$168(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tL_messages_getSavedHistory, tLObject, tL_error);
                            }
                        }), i5);
                        return;
                    }
                    i17 = (-i) / 2;
                }
                tL_messages_getSavedHistory.add_offset = i17;
                tL_messages_getSavedHistory.limit = i;
                tL_messages_getSavedHistory.offset_id = i2;
                tL_messages_getSavedHistory.offset_date = i3;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getSavedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda418
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$168(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tL_messages_getSavedHistory, tLObject, tL_error);
                    }
                }), i5);
                return;
            }
            if (z4 && z6 && i6 == 2 && i7 == 0 && (findTopic = this.topicsController.findTopic(-j, j3)) != null) {
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, findTopic.top_message, i8, j3, i9, i10, findTopic.unread_count, i12, z3, findTopic.unread_mentions_count, false, z5, z6, timer2, 0L);
                return;
            }
            if (i8 != 0) {
                return;
            }
            final TLRPC.TL_messages_getReplies tL_messages_getReplies = new TLRPC.TL_messages_getReplies();
            tL_messages_getReplies.peer = getInputPeer(j);
            tL_messages_getReplies.msg_id = (int) j3;
            tL_messages_getReplies.offset_date = i3;
            if (i6 == 4) {
                i16 = (-i) + 5;
            } else if (i6 == 3) {
                i16 = (-i) / 2;
            } else {
                if (i6 == 1) {
                    tL_messages_getReplies.add_offset = (-i) - 1;
                } else if (i6 == 2 && i2 != 0) {
                    i16 = (-i) + 10;
                } else if (j < 0 && i2 != 0) {
                    if (ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                        tL_messages_getReplies.add_offset = -1;
                        tL_messages_getReplies.limit++;
                    }
                    tL_messages_getReplies.limit = i;
                    tL_messages_getReplies.offset_id = i2;
                    tL_messages_getReplies.hash = j4;
                    System.currentTimeMillis();
                    sendRequest = getConnectionsManager().sendRequest(tL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda419
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$170(i, i2, i3, i10, i6, j, j2, i5, i7, i11, i12, i8, j3, i9, z3, i13, z5, z6, tL_messages_getReplies, tLObject, tL_error);
                        }
                    });
                    connectionsManager = getConnectionsManager();
                    i15 = i5;
                }
                tL_messages_getReplies.limit = i;
                tL_messages_getReplies.offset_id = i2;
                tL_messages_getReplies.hash = j4;
                System.currentTimeMillis();
                sendRequest = getConnectionsManager().sendRequest(tL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda419
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$170(i, i2, i3, i10, i6, j, j2, i5, i7, i11, i12, i8, j3, i9, z3, i13, z5, z6, tL_messages_getReplies, tLObject, tL_error);
                    }
                });
                connectionsManager = getConnectionsManager();
                i15 = i5;
            }
            tL_messages_getReplies.add_offset = i16;
            tL_messages_getReplies.limit = i;
            tL_messages_getReplies.offset_id = i2;
            tL_messages_getReplies.hash = j4;
            System.currentTimeMillis();
            sendRequest = getConnectionsManager().sendRequest(tL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda419
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$170(i, i2, i3, i10, i6, j, j2, i5, i7, i11, i12, i8, j3, i9, z3, i13, z5, z6, tL_messages_getReplies, tLObject, tL_error);
                }
            });
            connectionsManager = getConnectionsManager();
            i15 = i5;
        } else {
            if (i8 == 2) {
                return;
            }
            if (i8 != 1) {
                if (z4 && ((i6 == 3 || i6 == 2) && i7 == 0)) {
                    final TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
                    TLRPC.InputPeer inputPeer = getInputPeer(j);
                    TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                    tL_inputDialogPeer.peer = inputPeer;
                    tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
                    getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda421
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$173(j, j2, z, i, i2, i3, i4, i5, i6, j3, i9, i10, i12, z3, z5, z6, tL_messages_getPeerDialogs, tLObject, tL_error);
                        }
                    });
                    return;
                }
                final TLRPC.TL_messages_getHistory tL_messages_getHistory = new TLRPC.TL_messages_getHistory();
                tL_messages_getHistory.peer = getInputPeer(j);
                if (i6 == 4) {
                    i14 = (-i) + 5;
                } else {
                    if (i6 != 3) {
                        if (i6 == 1) {
                            tL_messages_getHistory.add_offset = (-i) - 1;
                        } else if (i6 == 2 && i2 != 0) {
                            i14 = (-i) + 6;
                        } else if (j < 0 && i2 != 0) {
                            if (ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                                tL_messages_getHistory.add_offset = -1;
                                tL_messages_getHistory.limit++;
                            }
                            tL_messages_getHistory.limit = i;
                            tL_messages_getHistory.offset_id = i2;
                            tL_messages_getHistory.offset_date = i3;
                            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda422
                                @Override // org.telegram.tgnet.RequestDelegate
                                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                    MessagesController.this.lambda$loadMessagesInternal$175(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tL_messages_getHistory, tLObject, tL_error);
                                }
                            }), i5);
                            return;
                        }
                        tL_messages_getHistory.limit = i;
                        tL_messages_getHistory.offset_id = i2;
                        tL_messages_getHistory.offset_date = i3;
                        getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda422
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$loadMessagesInternal$175(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tL_messages_getHistory, tLObject, tL_error);
                            }
                        }), i5);
                        return;
                    }
                    i14 = (-i) / 2;
                }
                tL_messages_getHistory.add_offset = i14;
                tL_messages_getHistory.limit = i;
                tL_messages_getHistory.offset_id = i2;
                tL_messages_getHistory.offset_date = i3;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda422
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$175(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tL_messages_getHistory, tLObject, tL_error);
                    }
                }), i5);
                return;
            }
            TLRPC.TL_messages_getScheduledHistory tL_messages_getScheduledHistory = new TLRPC.TL_messages_getScheduledHistory();
            tL_messages_getScheduledHistory.peer = getInputPeer(j);
            tL_messages_getScheduledHistory.hash = j4;
            i15 = i5;
            sendRequest = getConnectionsManager().sendRequest(tL_messages_getScheduledHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda420
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$171(i2, i3, j, j2, i, i15, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLObject, tL_error);
                }
            });
            connectionsManager = getConnectionsManager();
        }
        connectionsManager.bindRequestToGuid(sendRequest, i15);
    }

    private void loadPremiumFeaturesPreviewOrder(SparseIntArray sparseIntArray, String str) {
        sparseIntArray.clear();
        if (str != null) {
            String[] split = str.split("_");
            for (int i = 0; i < split.length; i++) {
                sparseIntArray.put(Integer.parseInt(split[i]), i);
            }
        }
    }

    private int messagesMaxDate(ArrayList<MessageObject> arrayList) {
        TLRPC.Message message;
        int i;
        int i2 = Integer.MIN_VALUE;
        for (int i3 = 0; arrayList != null && i3 < arrayList.size(); i3++) {
            MessageObject messageObject = arrayList.get(i3);
            if (messageObject != null && (message = messageObject.messageOwner) != null && (i = message.date) > i2) {
                i2 = i;
            }
        }
        return i2;
    }

    private void migrateDialogs(final int i, int i2, long j, long j2, long j3, long j4) {
        if (this.migratingDialogs || i == -1) {
            return;
        }
        this.migratingDialogs = true;
        TLRPC.TL_messages_getDialogs tL_messages_getDialogs = new TLRPC.TL_messages_getDialogs();
        tL_messages_getDialogs.exclude_pinned = true;
        tL_messages_getDialogs.limit = 100;
        tL_messages_getDialogs.offset_id = i;
        tL_messages_getDialogs.offset_date = i2;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().getFormatterStats().format(i2 * 1000));
        }
        if (i == 0) {
            tL_messages_getDialogs.offset_peer = new TLRPC.TL_inputPeerEmpty();
        } else {
            if (j3 != 0) {
                TLRPC.TL_inputPeerChannel tL_inputPeerChannel = new TLRPC.TL_inputPeerChannel();
                tL_messages_getDialogs.offset_peer = tL_inputPeerChannel;
                tL_inputPeerChannel.channel_id = j3;
            } else if (j != 0) {
                TLRPC.TL_inputPeerUser tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
                tL_messages_getDialogs.offset_peer = tL_inputPeerUser;
                tL_inputPeerUser.user_id = j;
            } else {
                TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
                tL_messages_getDialogs.offset_peer = tL_inputPeerChat;
                tL_inputPeerChat.chat_id = j2;
            }
            tL_messages_getDialogs.offset_peer.access_hash = j4;
        }
        getConnectionsManager().sendRequest(tL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda131
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$migrateDialogs$205(i, tLObject, tL_error);
            }
        });
    }

    private void processChannelsUpdatesQueue(long j, int i) {
        ArrayList arrayList = (ArrayList) this.updatesQueueChannels.get(j);
        if (arrayList == null) {
            return;
        }
        int i2 = this.channelsPts.get(j);
        if (arrayList.isEmpty() || i2 == 0) {
            this.updatesQueueChannels.remove(j);
            return;
        }
        Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda259
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$processChannelsUpdatesQueue$304;
                lambda$processChannelsUpdatesQueue$304 = MessagesController.lambda$processChannelsUpdatesQueue$304((TLRPC.Updates) obj, (TLRPC.Updates) obj2);
                return lambda$processChannelsUpdatesQueue$304;
            }
        });
        if (i == 2) {
            this.channelsPts.put(j, ((TLRPC.Updates) arrayList.get(0)).pts);
        }
        boolean z = false;
        while (arrayList.size() > 0) {
            TLRPC.Updates updates = (TLRPC.Updates) arrayList.get(0);
            int i3 = updates.pts;
            char c = i3 <= i2 ? (char) 2 : updates.pts_count + i2 == i3 ? (char) 0 : (char) 1;
            if (c == 0) {
                processUpdates(updates, true);
                if (arrayList.size() <= 0) {
                    break;
                }
                z = true;
                arrayList.remove(0);
            } else {
                if (c == 1) {
                    long j2 = this.updatesStartWaitTimeChannels.get(j);
                    if (j2 == 0 || (!z && Math.abs(System.currentTimeMillis() - j2) > 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - getChannelDifference ");
                        }
                        this.updatesStartWaitTimeChannels.delete(j);
                        this.updatesQueueChannels.remove(j);
                        getChannelDifference(j);
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
                if (arrayList.size() <= 0) {
                    break;
                } else {
                    arrayList.remove(0);
                }
            }
        }
        this.updatesQueueChannels.remove(j);
        this.updatesStartWaitTimeChannels.delete(j);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("UPDATES CHANNEL " + j + " QUEUE PROCEED - OK");
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:11:0x0031  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0057  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00bb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC.Updates> arrayList;
        Comparator comparator;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            comparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda163
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$305;
                    lambda$processUpdatesQueue$305 = MessagesController.this.lambda$processUpdatesQueue$305((TLRPC.Updates) obj, (TLRPC.Updates) obj2);
                    return lambda$processUpdatesQueue$305;
                }
            };
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            comparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda164
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$306;
                    lambda$processUpdatesQueue$306 = MessagesController.lambda$processUpdatesQueue$306((TLRPC.Updates) obj, (TLRPC.Updates) obj2);
                    return lambda$processUpdatesQueue$306;
                }
            };
        } else {
            if (i != 2) {
                arrayList = null;
                if (arrayList != null && !arrayList.isEmpty()) {
                    if (i2 == 2) {
                        TLRPC.Updates updates = arrayList.get(0);
                        MessagesStorage messagesStorage = getMessagesStorage();
                        if (i == 0) {
                            messagesStorage.setLastSeqValue(getUpdateSeq(updates));
                        } else {
                            int i3 = updates.pts;
                            if (i == 1) {
                                messagesStorage.setLastPtsValue(i3);
                            } else {
                                messagesStorage.setLastQtsValue(i3);
                            }
                        }
                    }
                    boolean z = false;
                    while (arrayList.size() > 0) {
                        TLRPC.Updates updates2 = arrayList.get(0);
                        int isValidUpdate = isValidUpdate(updates2, i);
                        if (isValidUpdate == 0) {
                            processUpdates(updates2, true);
                            arrayList.remove(0);
                            z = true;
                        } else {
                            if (isValidUpdate == 1) {
                                if (getUpdatesStartTime(i) == 0 || (!z && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) > 1500)) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                                    }
                                    setUpdatesStartTime(i, 0L);
                                    arrayList.clear();
                                    getDifference();
                                    return;
                                }
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                                }
                                if (z) {
                                    setUpdatesStartTime(i, System.currentTimeMillis());
                                    return;
                                }
                                return;
                            }
                            arrayList.remove(0);
                        }
                    }
                    arrayList.clear();
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("UPDATES QUEUE PROCEED - OK");
                    }
                }
                setUpdatesStartTime(i, 0L);
            }
            arrayList = this.updatesQueueQts;
            comparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda165
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$307;
                    lambda$processUpdatesQueue$307 = MessagesController.lambda$processUpdatesQueue$307((TLRPC.Updates) obj, (TLRPC.Updates) obj2);
                    return lambda$processUpdatesQueue$307;
                }
            };
        }
        Collections.sort(arrayList, comparator);
        if (arrayList != null) {
            if (i2 == 2) {
            }
            boolean z2 = false;
            while (arrayList.size() > 0) {
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
            }
        }
        setUpdatesStartTime(i, 0L);
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC.Dialog> arrayList, long j) {
        if (j == 0 && (arrayList == null || arrayList.isEmpty())) {
            return;
        }
        TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
        if (arrayList != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC.InputPeer inputPeer = getInputPeer(arrayList.get(i).id);
                if (!(inputPeer instanceof TLRPC.TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                    TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                    tL_inputDialogPeer.peer = inputPeer;
                    long peerDialogId = DialogObject.getPeerDialogId(inputPeer);
                    Long l = (Long) this.peerDialogsRequested.get(peerDialogId);
                    if (l == null || System.currentTimeMillis() - l.longValue() > 240000) {
                        tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
                        this.peerDialogsRequested.put(peerDialogId, Long.valueOf(System.currentTimeMillis()));
                    }
                }
            }
        } else {
            TLRPC.InputPeer inputPeer2 = getInputPeer(j);
            if ((inputPeer2 instanceof TLRPC.TL_inputPeerChannel) && inputPeer2.access_hash == 0) {
                return;
            }
            TLRPC.TL_inputDialogPeer tL_inputDialogPeer2 = new TLRPC.TL_inputDialogPeer();
            tL_inputDialogPeer2.peer = inputPeer2;
            long peerDialogId2 = DialogObject.getPeerDialogId(inputPeer2);
            Long l2 = (Long) this.peerDialogsRequested.get(peerDialogId2);
            if (l2 == null || System.currentTimeMillis() - l2.longValue() > 240000) {
                tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer2);
                this.peerDialogsRequested.put(peerDialogId2, Long.valueOf(System.currentTimeMillis()));
            }
        }
        if (tL_messages_getPeerDialogs.peers.isEmpty()) {
            return;
        }
        getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reloadDialogsReadValue$58(tLObject, tL_error);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void reloadMessages(ArrayList<Integer> arrayList, final long j, final int i) {
        TLRPC.TL_messages_getMessages tL_messages_getMessages;
        if (arrayList.isEmpty()) {
            return;
        }
        final boolean z = i == 1;
        final ArrayList<Integer> arrayList2 = new ArrayList<>();
        TLRPC.Chat chat = DialogObject.isChatDialog(j) ? getChat(Long.valueOf(-j)) : null;
        if (ChatObject.isChannel(chat)) {
            TLRPC.TL_channels_getMessages tL_channels_getMessages = new TLRPC.TL_channels_getMessages();
            tL_channels_getMessages.channel = getInputChannel(chat);
            tL_channels_getMessages.id = arrayList2;
            tL_messages_getMessages = tL_channels_getMessages;
        } else {
            TLRPC.TL_messages_getMessages tL_messages_getMessages2 = new TLRPC.TL_messages_getMessages();
            tL_messages_getMessages2.id = arrayList2;
            tL_messages_getMessages = tL_messages_getMessages2;
        }
        TLRPC.TL_messages_getMessages tL_messages_getMessages3 = tL_messages_getMessages;
        ArrayList arrayList3 = (ArrayList) this.reloadingMessages.get(j);
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            Integer num = arrayList.get(i2);
            if (arrayList3 == null || !arrayList3.contains(num)) {
                arrayList2.add(num);
            }
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        if (arrayList3 == null) {
            arrayList3 = new ArrayList();
            this.reloadingMessages.put(j, arrayList3);
        }
        arrayList3.addAll(arrayList2);
        getConnectionsManager().sendRequest(tL_messages_getMessages3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda403
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reloadMessages$68(j, z, i, arrayList2, tLObject, tL_error);
            }
        });
    }

    private void removeDialog(TLRPC.Dialog dialog) {
        if (dialog == null) {
            return;
        }
        final long j = dialog.id;
        if (this.dialogsServerOnly.remove(dialog) && DialogObject.isChannel(dialog)) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda378
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$removeDialog$125(j);
                }
            });
        }
        this.allDialogs.remove(dialog);
        this.dialogsMyChannels.remove(dialog);
        this.dialogsMyGroups.remove(dialog);
        this.dialogsCanAddUsers.remove(dialog);
        this.dialogsChannelsOnly.remove(dialog);
        this.dialogsGroupsOnly.remove(dialog);
        this.dialogsUsersOnly.remove(dialog);
        this.dialogsForBlock.remove(dialog);
        this.dialogsForward.remove(dialog);
        int i = 0;
        while (true) {
            DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
            if (i >= dialogFilterArr.length) {
                break;
            }
            DialogFilter dialogFilter = dialogFilterArr[i];
            if (dialogFilter != null) {
                dialogFilter.dialogs.remove(dialog);
                this.selectedDialogFilter[i].dialogsForward.remove(dialog);
            }
            i++;
        }
        this.dialogs_dict.remove(j);
        ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.get(dialog.folder_id);
        if (arrayList != null) {
            arrayList.remove(dialog);
        }
    }

    private void removeFolder(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(makeFolderDialogId);
        if (dialog == null) {
            return;
        }
        this.dialogs_dict.remove(makeFolderDialogId);
        this.allDialogs.remove(dialog);
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removePromoDialog() {
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog == null) {
            return;
        }
        long j = dialog.id;
        if (j < 0) {
            TLRPC.Chat chat = getChat(Long.valueOf(-j));
            if (ChatObject.isNotInChat(chat) || chat.restricted) {
                dialog = this.promoDialog;
            }
            this.promoDialog = null;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        removeDialog(dialog);
        this.promoDialog = null;
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void requestIsUserPremiumBlocked() {
        if (this.loadingIsUserPremiumBlocked.isEmpty()) {
            return;
        }
        TLRPC.TL_users_getIsPremiumRequiredToContact tL_users_getIsPremiumRequiredToContact = new TLRPC.TL_users_getIsPremiumRequiredToContact();
        final ArrayList arrayList = new ArrayList();
        Iterator<Long> it = this.loadingIsUserPremiumBlocked.iterator();
        while (it.hasNext()) {
            Long next = it.next();
            TLRPC.InputUser inputUser = getInputUser(next.longValue());
            if (inputUser != null) {
                tL_users_getIsPremiumRequiredToContact.id.add(inputUser);
                arrayList.add(next);
            }
        }
        this.loadingIsUserPremiumBlocked.clear();
        if (tL_users_getIsPremiumRequiredToContact.id.isEmpty()) {
            return;
        }
        getConnectionsManager().sendRequest(tL_users_getIsPremiumRequiredToContact, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda199
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$requestIsUserPremiumBlocked$449(arrayList, tLObject, tL_error);
            }
        });
    }

    private void resetAppConfig() {
        this.getfileExperimentalParams = false;
        this.channelRevenueWithdrawalEnabled = false;
        this.collectDeviceStats = false;
        this.smsjobsStickyNotificationEnabled = false;
        this.showAnnualPerMonth = false;
        this.canEditFactcheck = false;
        this.starsLocked = true;
        this.factcheckLengthLimit = 1024;
        this.videoIgnoreAltDocuments = false;
        this.mainPreferences.edit().remove("starsLocked").remove("getfileExperimentalParams").remove("smsjobsStickyNotificationEnabled").remove("channelRevenueWithdrawalEnabled").remove("showAnnualPerMonth").remove("canEditFactcheck").remove("factcheckLengthLimit").remove("videoIgnoreAltDocuments").apply();
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0204  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x022e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void resetDialogs(boolean z, final int i, final int i2, final int i3, final int i4) {
        TLRPC.messages_Dialogs messages_dialogs;
        long j;
        TLRPC.User user;
        TLRPC.Chat chat;
        Integer num;
        Integer num2;
        ArrayList arrayList;
        TLRPC.Message message;
        int i5;
        TLRPC.Chat chat2;
        ArrayList arrayList2;
        Integer num3 = 0;
        if (z) {
            if (this.resetingDialogs) {
                return;
            }
            getUserConfig().setPinnedDialogsLoaded(1, false);
            this.resetingDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getPinnedDialogs(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda240
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$resetDialogs$198(i, i2, i3, i4, tLObject, tL_error);
                }
            });
            TLRPC.TL_messages_getDialogs tL_messages_getDialogs = new TLRPC.TL_messages_getDialogs();
            tL_messages_getDialogs.limit = 100;
            tL_messages_getDialogs.exclude_pinned = true;
            tL_messages_getDialogs.offset_peer = new TLRPC.TL_inputPeerEmpty();
            getConnectionsManager().sendRequest(tL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda241
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$resetDialogs$199(i, i2, i3, i4, tLObject, tL_error);
                }
            });
            return;
        }
        if (this.resetDialogsPinned == null || (messages_dialogs = this.resetDialogsAll) == null) {
            return;
        }
        int size = messages_dialogs.messages.size();
        int size2 = this.resetDialogsAll.dialogs.size();
        fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
        this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
        this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
        this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
        this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray();
        LongSparseArray longSparseArray4 = new LongSparseArray();
        for (int i6 = 0; i6 < this.resetDialogsAll.users.size(); i6++) {
            TLRPC.User user2 = this.resetDialogsAll.users.get(i6);
            longSparseArray3.put(user2.id, user2);
        }
        for (int i7 = 0; i7 < this.resetDialogsAll.chats.size(); i7++) {
            TLRPC.Chat chat3 = this.resetDialogsAll.chats.get(i7);
            longSparseArray4.put(chat3.id, chat3);
        }
        int i8 = 0;
        TLRPC.Message message2 = null;
        while (true) {
            j = 0;
            if (i8 >= this.resetDialogsAll.messages.size()) {
                break;
            }
            TLRPC.Message message3 = this.resetDialogsAll.messages.get(i8);
            if (i8 < size && (message2 == null || message3.date < message2.date)) {
                message2 = message3;
            }
            TLRPC.Peer peer = message3.peer_id;
            Integer num4 = num3;
            long j2 = peer.channel_id;
            if (j2 != 0) {
                TLRPC.Chat chat4 = (TLRPC.Chat) longSparseArray4.get(j2);
                if (chat4 != null && chat4.left) {
                }
                MessageObject messageObject = new MessageObject(this.currentAccount, message3, longSparseArray3, longSparseArray4, false, true);
                long dialogId = messageObject.getDialogId();
                arrayList2 = (ArrayList) longSparseArray2.get(dialogId);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList(1);
                }
                arrayList2.add(messageObject);
                longSparseArray2.put(dialogId, arrayList2);
            } else {
                long j3 = peer.chat_id;
                if (j3 != 0 && (chat2 = (TLRPC.Chat) longSparseArray4.get(j3)) != null && chat2.migrated_to != null) {
                }
                MessageObject messageObject2 = new MessageObject(this.currentAccount, message3, longSparseArray3, longSparseArray4, false, true);
                long dialogId2 = messageObject2.getDialogId();
                arrayList2 = (ArrayList) longSparseArray2.get(dialogId2);
                if (arrayList2 == null) {
                }
                arrayList2.add(messageObject2);
                longSparseArray2.put(dialogId2, arrayList2);
            }
            i8++;
            num3 = num4;
        }
        Integer num5 = num3;
        int i9 = 0;
        while (i9 < this.resetDialogsAll.dialogs.size()) {
            TLRPC.Dialog dialog = this.resetDialogsAll.dialogs.get(i9);
            DialogObject.initDialog(dialog);
            long j4 = dialog.id;
            if (j4 != j) {
                if (dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray2.get(j4)) != null) {
                    int i10 = Integer.MIN_VALUE;
                    for (int i11 = 0; i11 < arrayList.size(); i11++) {
                        MessageObject messageObject3 = (MessageObject) arrayList.get(i11);
                        if (messageObject3 != null && (message = messageObject3.messageOwner) != null && (i5 = message.date) > i10) {
                            i10 = i5;
                        }
                    }
                    if (i10 > Integer.MIN_VALUE) {
                        dialog.last_message_date = i10;
                    }
                }
                boolean isChannel = DialogObject.isChannel(dialog);
                long j5 = dialog.id;
                if (isChannel) {
                    TLRPC.Chat chat5 = (TLRPC.Chat) longSparseArray4.get(-j5);
                    if (chat5 == null || !chat5.left) {
                        this.channelsPts.put(-dialog.id, dialog.pts);
                        longSparseArray.put(dialog.id, dialog);
                        num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                        if (num == null) {
                            num = num5;
                        }
                        this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                        num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                        if (num2 == null) {
                            num2 = num5;
                        }
                        this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                    }
                } else {
                    if (DialogObject.isChatDialog(j5) && (chat = (TLRPC.Chat) longSparseArray4.get(-dialog.id)) != null && chat.migrated_to != null) {
                    }
                    longSparseArray.put(dialog.id, dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                    if (num == null) {
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num.intValue(), dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                    if (num2 == null) {
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(num2.intValue(), dialog.read_outbox_max_id)));
                }
            }
            i9++;
            j = 0;
        }
        ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
        for (int i12 = 0; i12 < this.resetDialogsAll.messages.size(); i12++) {
            TLRPC.Message message4 = this.resetDialogsAll.messages.get(i12);
            TLRPC.MessageAction messageAction = message4.action;
            if ((messageAction instanceof TLRPC.TL_messageActionChatDeleteUser) && (user = (TLRPC.User) longSparseArray3.get(messageAction.user_id)) != null && user.bot) {
                message4.reply_markup = new TLRPC.TL_replyKeyboardHide();
                message4.flags |= 64;
            }
            TLRPC.MessageAction messageAction2 = message4.action;
            if ((messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo) || (messageAction2 instanceof TLRPC.TL_messageActionChannelCreate)) {
                message4.unread = false;
                message4.media_unread = false;
            } else {
                ConcurrentHashMap<Long, Integer> concurrentHashMap = message4.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                Integer num6 = concurrentHashMap.get(Long.valueOf(message4.dialog_id));
                if (num6 == null) {
                    num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message4.out, message4.dialog_id));
                    concurrentHashMap.put(Long.valueOf(message4.dialog_id), num6);
                }
                message4.unread = num6.intValue() < message4.id;
            }
        }
        getMessagesStorage().resetDialogs(this.resetDialogsAll, size, i, i2, i3, i4, longSparseArray, longSparseArray2, message2, size2);
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    private void savePeerSettings(long j, TLRPC.PeerSettings peerSettings, boolean z) {
        StringBuilder sb;
        if (peerSettings == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        if (peerSettings.business_bot_id != 0) {
            sb = new StringBuilder();
            sb.append("dialog_botid");
            sb.append(j);
            edit.putLong(sb.toString(), peerSettings.business_bot_id);
            edit.putString("dialog_boturl" + j, peerSettings.business_bot_manage_url);
            edit.putInt("dialog_botflags" + j, (peerSettings.business_bot_paused ? 1 : 0) + (peerSettings.business_bot_can_reply ? 2 : 0));
        } else {
            sb = new StringBuilder();
            sb.append("dialog_botid");
            sb.append(j);
            edit.remove(sb.toString()).remove("dialog_boturl" + j).remove("dialog_botflags" + j);
        }
        if (this.notificationsPreferences.getInt("dialog_bar_vis3" + j, 0) == 3) {
            edit.apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
            return;
        }
        boolean z2 = peerSettings.flags == 0;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("peer settings loaded for " + j + " add = " + peerSettings.add_contact + " block = " + peerSettings.block_contact + " spam = " + peerSettings.report_spam + " share = " + peerSettings.share_contact + " geo = " + peerSettings.report_geo + " hide = " + z2 + " distance = " + peerSettings.geo_distance + " invite = " + peerSettings.invite_members);
        }
        edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
        edit.putBoolean("dialog_bar_share" + j, peerSettings.share_contact);
        edit.putBoolean("dialog_bar_report" + j, peerSettings.report_spam);
        edit.putBoolean("dialog_bar_add" + j, peerSettings.add_contact);
        edit.putBoolean("dialog_bar_block" + j, peerSettings.block_contact);
        edit.putBoolean("dialog_bar_exception" + j, peerSettings.need_contacts_exception);
        edit.putBoolean("dialog_bar_location" + j, peerSettings.report_geo);
        edit.putBoolean("dialog_bar_archived" + j, peerSettings.autoarchived);
        edit.putBoolean("dialog_bar_invite" + j, peerSettings.invite_members);
        edit.putString("dialog_bar_chat_with_admin_title" + j, peerSettings.request_chat_title);
        edit.putBoolean("dialog_bar_chat_with_channel" + j, peerSettings.request_chat_broadcast);
        edit.putInt("dialog_bar_chat_with_date" + j, peerSettings.request_chat_date);
        if (this.notificationsPreferences.getInt("dialog_bar_distance" + j, -1) != -2) {
            if ((peerSettings.flags & 64) != 0) {
                edit.putInt("dialog_bar_distance" + j, peerSettings.geo_distance);
            } else {
                edit.remove("dialog_bar_distance" + j);
            }
        }
        if (j == getUserConfig().getClientUserId()) {
            peerSettings.business_bot_id = UserObject.REPLY_BOT;
            peerSettings.business_bot_manage_url = "https://telegram.org/";
        }
        edit.apply();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
    }

    private boolean savePremiumFeaturesPreviewOrder(String str, SparseIntArray sparseIntArray, SharedPreferences.Editor editor, ArrayList<TLRPC.JSONValue> arrayList) {
        int serverStringToFeatureType;
        StringBuilder sb = new StringBuilder();
        sparseIntArray.clear();
        int i = 0;
        while (true) {
            if (i >= arrayList.size()) {
                break;
            }
            String str2 = arrayList.get(i) instanceof TLRPC.TL_jsonString ? ((TLRPC.TL_jsonString) arrayList.get(i)).value : null;
            if (str2 != null && (serverStringToFeatureType = PremiumPreviewFragment.serverStringToFeatureType(str2)) >= 0) {
                sparseIntArray.put(serverStringToFeatureType, i);
                if (sb.length() > 0) {
                    sb.append('_');
                }
                sb.append(serverStringToFeatureType);
            }
            i++;
        }
        if (sb.length() <= 0) {
            editor.remove(str);
            return this.mainPreferences.getString(str, null) != null;
        }
        String sb2 = sb.toString();
        boolean z = !sb2.equals(this.mainPreferences.getString(str, null));
        editor.putString(str, sb2);
        return z;
    }

    private void saveSavedReactionsTags(final long j, final TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda357
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveSavedReactionsTags$443(j, tL_messages_savedReactionsTags);
            }
        });
    }

    private void scheduleTranscriptionUpdate() {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda330
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$scheduleTranscriptionUpdate$33();
            }
        });
    }

    private void sendLoadPeersRequest(final TLObject tLObject, final ArrayList<TLObject> arrayList, final TLRPC.messages_Dialogs messages_dialogs, final TLRPC.messages_Dialogs messages_dialogs2, final ArrayList<TLRPC.User> arrayList2, final ArrayList<TLRPC.Chat> arrayList3, final ArrayList<DialogFilter> arrayList4, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList5, final HashMap<Integer, HashSet<Long>> hashMap, final HashSet<Integer> hashSet, final Runnable runnable) {
        getConnectionsManager().sendRequest(tLObject, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda462
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject2, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$sendLoadPeersRequest$16(arrayList3, arrayList2, messages_dialogs, messages_dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashSet, runnable, tLObject2, tL_error);
            }
        });
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i == 2) {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment == null || baseFragment.getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(baseFragment.getParentActivity(), baseFragment.getResourceProvider());
        builder.setTitle(LocaleController.getString(R.string.DialogNotAvailable));
        HashMap hashMap = new HashMap();
        int i = Theme.key_dialogTopBackground;
        hashMap.put("info1.**", Integer.valueOf(baseFragment.getThemedColor(i)));
        hashMap.put("info2.**", Integer.valueOf(baseFragment.getThemedColor(i)));
        builder.setTopAnimation(R.raw.not_available, 52, false, baseFragment.getThemedColor(i), hashMap);
        builder.setTopAnimationIsNew(true);
        builder.setPositiveButton(LocaleController.getString(R.string.Close), null);
        builder.setMessage(str);
        baseFragment.showDialog(builder.create());
    }

    public static TLRPC.InputDocument toInputDocument(TLRPC.Document document) {
        TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
        tL_inputDocument.id = document.id;
        tL_inputDocument.access_hash = document.access_hash;
        tL_inputDocument.file_reference = document.file_reference;
        return tL_inputDocument;
    }

    public static TLRPC.InputMedia toInputMedia(TLRPC.MessageMedia messageMedia) {
        if (messageMedia instanceof TLRPC.TL_messageMediaDocument) {
            TLRPC.TL_inputMediaDocument tL_inputMediaDocument = new TLRPC.TL_inputMediaDocument();
            TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
            tL_inputMediaDocument.id = tL_inputDocument;
            TLRPC.Document document = messageMedia.document;
            tL_inputDocument.id = document.id;
            tL_inputDocument.access_hash = document.access_hash;
            tL_inputDocument.file_reference = document.file_reference;
            return tL_inputMediaDocument;
        }
        if (!(messageMedia instanceof TLRPC.TL_messageMediaPhoto)) {
            return null;
        }
        TLRPC.TL_inputMediaPhoto tL_inputMediaPhoto = new TLRPC.TL_inputMediaPhoto();
        TLRPC.TL_inputPhoto tL_inputPhoto = new TLRPC.TL_inputPhoto();
        tL_inputMediaPhoto.id = tL_inputPhoto;
        TLRPC.Photo photo = messageMedia.photo;
        tL_inputPhoto.id = photo.id;
        tL_inputPhoto.access_hash = photo.access_hash;
        tL_inputPhoto.file_reference = photo.file_reference;
        return tL_inputMediaPhoto;
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x0324  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x014c A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePrintingStrings() {
        LongSparseArray longSparseArray;
        String formatString;
        int i;
        int i2;
        int i3;
        int i4;
        int i5;
        int i6;
        int i7 = 1;
        LongSparseArray longSparseArray2 = new LongSparseArray();
        final LongSparseArray longSparseArray3 = new LongSparseArray();
        for (Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> entry : this.printingUsers.entrySet()) {
            Long key = entry.getKey();
            boolean isEncryptedDialog = DialogObject.isEncryptedDialog(key.longValue());
            for (Map.Entry<Integer, ArrayList<PrintingUser>> entry2 : entry.getValue().entrySet()) {
                Integer key2 = entry2.getKey();
                ArrayList<PrintingUser> value = entry2.getValue();
                LongSparseArray longSparseArray4 = new LongSparseArray();
                LongSparseArray longSparseArray5 = new LongSparseArray();
                longSparseArray2.put(key.longValue(), longSparseArray4);
                longSparseArray3.put(key.longValue(), longSparseArray5);
                if (key.longValue() > 0 || isEncryptedDialog || value.size() == i7) {
                    longSparseArray = longSparseArray2;
                    PrintingUser printingUser = value.get(0);
                    TLRPC.User user = getUser(Long.valueOf(printingUser.userId));
                    if (user != null) {
                        boolean z = key.longValue() < 0 && !isEncryptedDialog;
                        TLRPC.SendMessageAction sendMessageAction = printingUser.action;
                        if (sendMessageAction instanceof TLRPC.TL_sendMessageRecordAudioAction) {
                            formatString = z ? LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user)) : LocaleController.getString(R.string.RecordingAudio);
                            i = 1;
                        } else {
                            if (sendMessageAction instanceof TLRPC.TL_sendMessageRecordRoundAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsRecordingRound", R.string.IsRecordingRound, getUserNameForTyping(user));
                                    i = 4;
                                } else {
                                    i4 = R.string.RecordingRound;
                                    formatString = LocaleController.getString(i4);
                                    i = 4;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageUploadRoundAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user));
                                    i = 4;
                                } else {
                                    i4 = R.string.SendingVideoStatus;
                                    formatString = LocaleController.getString(i4);
                                    i = 4;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageUploadAudioAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsSendingAudio", R.string.IsSendingAudio, getUserNameForTyping(user));
                                    i = 2;
                                } else {
                                    i3 = R.string.SendingAudio;
                                    formatString = LocaleController.getString(i3);
                                    i = 2;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageUploadVideoAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user));
                                    i = 2;
                                } else {
                                    i3 = R.string.SendingVideoStatus;
                                    formatString = LocaleController.getString(i3);
                                    i = 2;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageRecordVideoAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsRecordingVideo", R.string.IsRecordingVideo, getUserNameForTyping(user));
                                    i = 2;
                                } else {
                                    i3 = R.string.RecordingVideoStatus;
                                    formatString = LocaleController.getString(i3);
                                    i = 2;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageUploadDocumentAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsSendingFile", R.string.IsSendingFile, getUserNameForTyping(user));
                                    i = 2;
                                } else {
                                    i3 = R.string.SendingFile;
                                    formatString = LocaleController.getString(i3);
                                    i = 2;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageUploadPhotoAction) {
                                if (z) {
                                    formatString = LocaleController.formatString("IsSendingPhoto", R.string.IsSendingPhoto, getUserNameForTyping(user));
                                    i = 2;
                                } else {
                                    i3 = R.string.SendingPhoto;
                                    formatString = LocaleController.getString(i3);
                                    i = 2;
                                }
                            } else if (sendMessageAction instanceof TLRPC.TL_sendMessageGamePlayAction) {
                                formatString = z ? LocaleController.formatString("IsSendingGame", R.string.IsSendingGame, getUserNameForTyping(user)) : LocaleController.getString(R.string.SendingGame);
                                i = 3;
                            } else {
                                if (sendMessageAction instanceof TLRPC.TL_sendMessageGeoLocationAction) {
                                    if (z) {
                                        formatString = LocaleController.formatString("IsSelectingLocation", R.string.IsSelectingLocation, getUserNameForTyping(user));
                                        i = 0;
                                    } else {
                                        i2 = R.string.SelectingLocation;
                                        formatString = LocaleController.getString(i2);
                                        i = 0;
                                    }
                                } else if (!(sendMessageAction instanceof TLRPC.TL_sendMessageChooseContactAction)) {
                                    if (sendMessageAction instanceof TLRPC.TL_sendMessageEmojiInteractionSeen) {
                                        String str = ((TLRPC.TL_sendMessageEmojiInteractionSeen) sendMessageAction).emoticon;
                                        formatString = z ? LocaleController.formatString("IsEnjoyngAnimations", R.string.IsEnjoyngAnimations, getUserNameForTyping(user), str) : LocaleController.formatString("EnjoyngAnimations", R.string.EnjoyngAnimations, str);
                                    } else if (sendMessageAction instanceof TLRPC.TL_sendMessageChooseStickerAction) {
                                        formatString = z ? LocaleController.formatString("IsChoosingSticker", R.string.IsChoosingSticker, getUserNameForTyping(user)) : LocaleController.getString(R.string.ChoosingSticker);
                                    } else {
                                        formatString = z ? LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, getUserNameForTyping(user)) : LocaleController.getString(R.string.Typing);
                                        i = 0;
                                    }
                                    i = 5;
                                } else if (z) {
                                    formatString = LocaleController.formatString("IsSelectingContact", R.string.IsSelectingContact, getUserNameForTyping(user));
                                    i = 0;
                                } else {
                                    i2 = R.string.SelectingContact;
                                    formatString = LocaleController.getString(i2);
                                    i = 0;
                                }
                                if (formatString != null) {
                                    Paint paint = Theme.dialogs_messageNamePaint;
                                    if (paint == null) {
                                        paint = new Paint();
                                        paint.setTypeface(AndroidUtilities.bold());
                                        paint.setTextSize(AndroidUtilities.dp(14.0f));
                                    }
                                    longSparseArray4.put(key2.intValue(), Emoji.replaceEmoji(formatString, paint.getFontMetricsInt(), false));
                                    longSparseArray5.put(key2.intValue(), Integer.valueOf(i));
                                }
                            }
                            longSparseArray2 = longSparseArray;
                            i7 = 1;
                        }
                    } else {
                        longSparseArray2 = longSparseArray;
                        i7 = 1;
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    Iterator<PrintingUser> it = value.iterator();
                    int i8 = 0;
                    while (true) {
                        if (!it.hasNext()) {
                            longSparseArray = longSparseArray2;
                            i5 = 1;
                            i6 = i8;
                            break;
                        }
                        longSparseArray = longSparseArray2;
                        TLRPC.User user2 = getUser(Long.valueOf(it.next().userId));
                        if (user2 != null) {
                            if (sb.length() != 0) {
                                sb.append(", ");
                            }
                            sb.append(getUserNameForTyping(user2));
                            i5 = 1;
                            i8++;
                        } else {
                            i5 = 1;
                        }
                        i6 = i8;
                        if (i6 == 2) {
                            break;
                        }
                        i8 = i6;
                        longSparseArray2 = longSparseArray;
                    }
                    if (sb.length() == 0) {
                        formatString = null;
                    } else if (i6 == i5) {
                        int i9 = R.string.IsTypingGroup;
                        Object[] objArr = new Object[i5];
                        objArr[0] = sb.toString();
                        formatString = LocaleController.formatString("IsTypingGroup", i9, objArr);
                    } else if (value.size() > 2) {
                        try {
                            formatString = String.format(LocaleController.getPluralString("AndMoreTypingGroup", value.size() - 2), sb.toString(), Integer.valueOf(value.size() - 2));
                        } catch (Exception unused) {
                            formatString = "LOC_ERR: AndMoreTypingGroup";
                        }
                    } else {
                        formatString = LocaleController.formatString("AreTypingGroup", R.string.AreTypingGroup, sb.toString());
                    }
                    i = 0;
                }
                if (formatString != null) {
                }
                longSparseArray2 = longSparseArray;
                i7 = 1;
            }
        }
        final LongSparseArray longSparseArray6 = longSparseArray2;
        this.lastPrintingStringCount = longSparseArray6.size();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda337
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$161(longSparseArray6, longSparseArray3);
            }
        });
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (this.printingUsers.get(Long.valueOf(j)) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (next.isFromUser() && !arrayList2.contains(Long.valueOf(next.messageOwner.from_id.user_id))) {
                    arrayList2.add(Long.valueOf(next.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(Long.valueOf(j));
            if (concurrentHashMap != null) {
                ArrayList arrayList3 = null;
                z = false;
                for (Map.Entry<Integer, ArrayList<PrintingUser>> entry : concurrentHashMap.entrySet()) {
                    Integer key = entry.getKey();
                    ArrayList<PrintingUser> value = entry.getValue();
                    int i = 0;
                    while (i < value.size()) {
                        if (arrayList2.contains(Long.valueOf(value.get(i).userId))) {
                            value.remove(i);
                            i--;
                            if (value.isEmpty()) {
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                }
                                arrayList3.add(key);
                            }
                            z = true;
                        }
                        i++;
                    }
                }
                if (arrayList3 != null) {
                    int size = arrayList3.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        concurrentHashMap.remove(arrayList3.get(i2));
                    }
                    if (concurrentHashMap.isEmpty()) {
                        this.printingUsers.remove(Long.valueOf(j));
                    }
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.put(j, dialog);
        } else {
            this.deletingDialogs.put(j, dialog);
            this.allDialogs.remove(dialog);
            sortDialogs(null);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList<Long> arrayList = new ArrayList<>(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, null, j2);
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x0126  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0142 A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0144  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int addDialogToFolder(ArrayList<Long> arrayList, int i, int i2, ArrayList<TLRPC.TL_inputFolderPeer> arrayList2, long j) {
        final long j2;
        NativeByteBuffer nativeByteBuffer;
        TLRPC.Dialog dialog;
        int i3;
        int i4;
        TLRPC.TL_folders_editPeerFolders tL_folders_editPeerFolders = new TLRPC.TL_folders_editPeerFolders();
        boolean[] zArr = null;
        if (j == 0) {
            long clientUserId = getUserConfig().getClientUserId();
            int size = arrayList.size();
            boolean[] zArr2 = null;
            boolean z = false;
            int i5 = 0;
            int i6 = 0;
            while (i5 < size) {
                long longValue = arrayList.get(i5).longValue();
                if ((DialogObject.isChatDialog(longValue) || DialogObject.isUserDialog(longValue) || DialogObject.isEncryptedDialog(longValue)) && !((i == 1 && (longValue == clientUserId || longValue == 777000 || isPromoDialog(longValue, false))) || (dialog = (TLRPC.Dialog) this.dialogs_dict.get(longValue)) == null)) {
                    dialog.folder_id = i;
                    if (i2 > 0) {
                        dialog.pinned = true;
                        dialog.pinnedNum = i2;
                    } else {
                        dialog.pinned = false;
                        dialog.pinnedNum = 0;
                    }
                    if (zArr2 == null) {
                        zArr2 = new boolean[1];
                        this.hasArchivedChats = true;
                        ensureFolderDialogExists(i, zArr2);
                    }
                    boolean[] zArr3 = zArr2;
                    if (DialogObject.isEncryptedDialog(longValue)) {
                        i3 = i5;
                        i4 = size;
                        getMessagesStorage().setDialogsFolderId(null, null, longValue, i);
                    } else {
                        i3 = i5;
                        i4 = size;
                        TLRPC.TL_inputFolderPeer tL_inputFolderPeer = new TLRPC.TL_inputFolderPeer();
                        tL_inputFolderPeer.folder_id = i;
                        tL_inputFolderPeer.peer = getInputPeer(longValue);
                        tL_folders_editPeerFolders.folder_peers.add(tL_inputFolderPeer);
                        i6 += tL_inputFolderPeer.getObjectSize();
                    }
                    zArr2 = zArr3;
                    z = true;
                } else {
                    i3 = i5;
                    i4 = size;
                }
                i5 = i3 + 1;
                size = i4;
            }
            if (!z) {
                return 0;
            }
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (i6 != 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(i6 + 12);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(17);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tL_folders_editPeerFolders.folder_peers.size());
                    int size2 = tL_folders_editPeerFolders.folder_peers.size();
                    for (int i7 = 0; i7 < size2; i7++) {
                        tL_folders_editPeerFolders.folder_peers.get(i7).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e2) {
                    e = e2;
                    zArr = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = zArr;
                    j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    zArr = zArr2;
                    if (!tL_folders_editPeerFolders.folder_peers.isEmpty()) {
                    }
                    if (zArr != null) {
                    }
                }
                j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                zArr = zArr2;
            } else {
                zArr = zArr2;
                j2 = 0;
            }
        } else {
            tL_folders_editPeerFolders.folder_peers = arrayList2;
            j2 = j;
        }
        if (!tL_folders_editPeerFolders.folder_peers.isEmpty()) {
            getConnectionsManager().sendRequest(tL_folders_editPeerFolders, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda281
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$addDialogToFolder$187(j2, tLObject, tL_error);
                }
            });
            getMessagesStorage().setDialogsFolderId(null, tL_folders_editPeerFolders.folder_peers, 0L, i);
        }
        if (zArr != null) {
            return 0;
        }
        return zArr[0] ? 2 : 1;
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int size = this.dialogFilters.size();
            int i = NotificationCenter.liveLocationsCacheChanged;
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            if (this.dialogFilters.get(0).isDefault()) {
                this.dialogFilters.add(1, dialogFilter);
            } else {
                this.dialogFilters.add(0, dialogFilter);
            }
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
        if (this.dialogFilters.size() == 1 && SharedConfig.getChatSwipeAction(this.currentAccount) != 5) {
            SharedConfig.updateChatListSwipeSetting(5);
        }
        lockFiltersInternal();
    }

    public void addSupportUser() {
        TLRPC.TL_userForeign_old2 tL_userForeign_old2 = new TLRPC.TL_userForeign_old2();
        tL_userForeign_old2.phone = "333";
        tL_userForeign_old2.id = 333000L;
        tL_userForeign_old2.first_name = "Telegram";
        tL_userForeign_old2.last_name = "";
        tL_userForeign_old2.status = null;
        tL_userForeign_old2.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(tL_userForeign_old2, true);
        TLRPC.TL_userForeign_old2 tL_userForeign_old22 = new TLRPC.TL_userForeign_old2();
        tL_userForeign_old22.phone = "42777";
        tL_userForeign_old22.id = 777000L;
        tL_userForeign_old22.verified = true;
        tL_userForeign_old22.first_name = "Telegram";
        tL_userForeign_old22.last_name = "Notifications";
        tL_userForeign_old22.status = null;
        tL_userForeign_old22.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(tL_userForeign_old22, true);
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        long min;
        int i;
        SparseArray sparseArray = (SparseArray) this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i2 = 0; i2 < size; i2++) {
            ((MessageObject) sparseArray.valueAt(i2)).pollVisibleOnScreen = false;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        int size2 = arrayList.size();
        boolean z = false;
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        for (int i4 = 0; i4 < size2; i4++) {
            MessageObject messageObject = arrayList.get(i4);
            if (messageObject.type == 17) {
                TLRPC.Poll poll = ((TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                if (!poll.closed && (i = poll.close_date) != 0) {
                    if (i <= currentTime) {
                        z = true;
                    } else {
                        i3 = Math.min(i3, i - currentTime);
                    }
                }
                int id = messageObject.getId();
                MessageObject messageObject2 = (MessageObject) sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
        if (z) {
            min = 0;
        } else if (i3 >= 5) {
            return;
        } else {
            min = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
        }
        this.lastViewsCheckTime = min;
    }

    public void addToViewsQueue(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda64
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$219(messageObject);
            }
        });
    }

    public void addUserToChat(long j, TLRPC.User user, int i, String str, BaseFragment baseFragment, Runnable runnable) {
        addUserToChat(j, user, i, str, baseFragment, false, runnable, null);
    }

    public void addUserToChat(long j, TLRPC.User user, int i, String str, BaseFragment baseFragment, boolean z, Runnable runnable, ErrorDelegate errorDelegate) {
        addUserToChat(j, user, i, str, baseFragment, z, runnable, errorDelegate, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void addUserToChat(final long j, final TLRPC.User user, int i, String str, final BaseFragment baseFragment, final boolean z, final Runnable runnable, final ErrorDelegate errorDelegate, final Utilities.Callback<TLRPC.TL_messages_invitedUsers> callback) {
        TLRPC.TL_messages_addChatUser tL_messages_addChatUser;
        if (user == null) {
            if (errorDelegate != null) {
                errorDelegate.run(null);
            }
            if (callback != null) {
                callback.run(null);
                return;
            }
            return;
        }
        final boolean isChannel = ChatObject.isChannel(j, this.currentAccount);
        final boolean z2 = isChannel && getChat(Long.valueOf(j)).megagroup;
        final TLRPC.InputUser inputUser = getInputUser(user);
        if (str != null && (!isChannel || z2)) {
            TLRPC.TL_messages_startBot tL_messages_startBot = new TLRPC.TL_messages_startBot();
            tL_messages_startBot.bot = inputUser;
            if (isChannel) {
                tL_messages_startBot.peer = getInputPeer(-j);
            } else {
                TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
                tL_messages_startBot.peer = tL_inputPeerChat;
                tL_inputPeerChat.chat_id = j;
            }
            tL_messages_startBot.start_param = str;
            tL_messages_startBot.random_id = Utilities.random.nextLong();
            tL_messages_addChatUser = tL_messages_startBot;
        } else if (!isChannel) {
            TLRPC.TL_messages_addChatUser tL_messages_addChatUser2 = new TLRPC.TL_messages_addChatUser();
            tL_messages_addChatUser2.chat_id = j;
            tL_messages_addChatUser2.fwd_limit = i;
            tL_messages_addChatUser2.user_id = inputUser;
            tL_messages_addChatUser = tL_messages_addChatUser2;
        } else if (!(inputUser instanceof TLRPC.TL_inputUserSelf)) {
            TLRPC.TL_channels_inviteToChannel tL_channels_inviteToChannel = new TLRPC.TL_channels_inviteToChannel();
            tL_channels_inviteToChannel.channel = getInputChannel(j);
            tL_channels_inviteToChannel.users.add(inputUser);
            tL_messages_addChatUser = tL_channels_inviteToChannel;
        } else if (this.joiningToChannels.contains(Long.valueOf(j))) {
            if (errorDelegate != null) {
                errorDelegate.run(null);
                return;
            }
            return;
        } else {
            TLRPC.TL_channels_joinChannel tL_channels_joinChannel = new TLRPC.TL_channels_joinChannel();
            tL_channels_joinChannel.channel = getInputChannel(j);
            this.joiningToChannels.add(Long.valueOf(j));
            tL_messages_addChatUser = tL_channels_joinChannel;
        }
        final TLRPC.TL_messages_addChatUser tL_messages_addChatUser3 = tL_messages_addChatUser;
        getConnectionsManager().sendRequest(tL_messages_addChatUser3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda376
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$addUserToChat$288(isChannel, inputUser, j, user, callback, z, runnable, errorDelegate, baseFragment, tL_messages_addChatUser3, z2, tLObject, tL_error);
            }
        });
    }

    public void addUsersToChannel(final long j, ArrayList<TLRPC.InputUser> arrayList, final BaseFragment baseFragment) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        final TLRPC.TL_channels_inviteToChannel tL_channels_inviteToChannel = new TLRPC.TL_channels_inviteToChannel();
        tL_channels_inviteToChannel.channel = getInputChannel(j);
        tL_channels_inviteToChannel.users = arrayList;
        getConnectionsManager().sendRequest(tL_channels_inviteToChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda414
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$addUsersToChannel$254(baseFragment, tL_channels_inviteToChannel, j, tLObject, tL_error);
            }
        });
    }

    public void addUsersToChat(final TLRPC.Chat chat, BaseFragment baseFragment, ArrayList<TLRPC.User> arrayList, int i, final Consumer consumer, final Consumer consumer2, final Runnable runnable) {
        final int size = arrayList.size();
        final int[] iArr = {0};
        final TLRPC.TL_messages_invitedUsers tL_messages_invitedUsers = new TLRPC.TL_messages_invitedUsers();
        tL_messages_invitedUsers.updates = new TLRPC.TL_updates();
        long j = chat.id;
        for (int i2 = 0; i2 < size; i2++) {
            final TLRPC.User user = arrayList.get(i2);
            addUserToChat(j, user, i, null, baseFragment, false, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda467
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$addUsersToChat$275(Consumer.this, user);
                }
            }, new ErrorDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda468
                @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                public final boolean run(TLRPC.TL_error tL_error) {
                    boolean lambda$addUsersToChat$276;
                    lambda$addUsersToChat$276 = MessagesController.lambda$addUsersToChat$276(Consumer.this, user, tL_error);
                    return lambda$addUsersToChat$276;
                }
            }, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda469
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$addUsersToChat$278(tL_messages_invitedUsers, iArr, size, chat, runnable, (TLRPC.TL_messages_invitedUsers) obj);
                }
            });
            putUser(user, false);
        }
    }

    public Boolean arePaidReactionsAnonymous() {
        if (this.paidReactionsAnonymous == null && !this.loadingArePaidReactionsAnonymous) {
            this.loadingArePaidReactionsAnonymous = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getPaidReactionPrivacy(), null);
        }
        return this.paidReactionsAnonymous;
    }

    public void blockPeer(long j) {
        TLRPC.Chat chat;
        TLRPC.User user = null;
        if (j > 0) {
            TLRPC.User user2 = getUser(Long.valueOf(j));
            if (user2 == null) {
                return;
            }
            user = user2;
            chat = null;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(j) >= 0) {
            return;
        }
        this.blockePeers.put(j, 1);
        if (user != null) {
            if (user.bot) {
                getMediaDataController().removeInline(j);
            } else {
                getMediaDataController().removePeer(j);
            }
        }
        int i = this.totalBlockedCount;
        if (i >= 0) {
            this.totalBlockedCount = i + 1;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        TLRPC.TL_contacts_block tL_contacts_block = new TLRPC.TL_contacts_block();
        tL_contacts_block.id = user != null ? getInputPeer(user) : getInputPeer(chat);
        getConnectionsManager().sendRequest(tL_contacts_block, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda430
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$blockPeer$83(tLObject, tL_error);
            }
        });
    }

    public boolean canAddToForward(TLRPC.Dialog dialog) {
        if (dialog == null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(dialog.id) && DialogObject.isChannel(dialog)) {
            TLRPC.Chat chat = getChat(Long.valueOf(-dialog.id));
            if (chat == null || !chat.megagroup) {
                if (!ChatObject.hasAdminRights(chat) || !ChatObject.canPost(chat)) {
                    return false;
                }
            } else if (chat.gigagroup && !ChatObject.hasAdminRights(chat)) {
                return false;
            }
        }
        return true;
    }

    public void cancelLoadFullChat(long j) {
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void cancelLoadFullUser(long j) {
        this.loadingFullUsers.remove(Long.valueOf(j));
    }

    /* renamed from: cancelTyping, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
    public void lambda$sendTyping$164(int i, long j, long j2) {
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        if (i >= 0) {
            LongSparseArray[] longSparseArrayArr = this.sendingTypings;
            if (i >= longSparseArrayArr.length || (longSparseArray = longSparseArrayArr[i]) == null || (longSparseArray2 = (LongSparseArray) longSparseArray.get(j)) == null) {
                return;
            }
            longSparseArray2.remove(j2);
            if (longSparseArray2.size() == 0) {
                longSparseArray.remove(j);
            }
        }
    }

    public void cancelUploadWallpaper() {
        Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
        if (overrideWallpaperInfo != null) {
            if (overrideWallpaperInfo.requestIds != null) {
                for (int i = 0; i < this.uploadingWallpaperInfo.requestIds.size(); i++) {
                    ConnectionsManager.getInstance(this.currentAccount).cancelRequest(((Integer) this.uploadingWallpaperInfo.requestIds.get(i)).intValue(), true);
                }
            }
            FileLoader.getInstance(this.currentAccount).cancelFileUpload(this.uploadingWallpaper, false);
            long j = this.uploadingWallpaperInfo.dialogId;
            if (j != 0) {
                if (j >= 0) {
                    TLRPC.UserFull userFull = getUserFull(j);
                    if (userFull != null) {
                        userFull.wallpaper = this.uploadingWallpaperInfo.prevUserWallpaper;
                        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(this.uploadingWallpaperInfo.dialogId), userFull);
                    }
                } else {
                    TLRPC.ChatFull chatFull = getChatFull(-j);
                    if (chatFull != null) {
                        chatFull.wallpaper = this.uploadingWallpaperInfo.prevUserWallpaper;
                        NotificationCenter notificationCenter = NotificationCenter.getInstance(this.currentAccount);
                        int i2 = NotificationCenter.chatInfoDidLoad;
                        Boolean bool = Boolean.FALSE;
                        notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, chatFull, 0, bool, bool);
                    }
                }
            }
            this.uploadingWallpaperInfo = null;
            this.uploadingWallpaper = null;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatAvatar(final long j, final TLRPC.TL_inputChatPhoto tL_inputChatPhoto, TLRPC.InputFile inputFile, TLRPC.InputFile inputFile2, TLRPC.VideoSize videoSize, double d, final String str, final TLRPC.FileLocation fileLocation, final TLRPC.FileLocation fileLocation2, final Runnable runnable) {
        MessagesController messagesController;
        TLRPC.InputChatPhoto inputChatPhoto;
        TLRPC.TL_messages_editChatPhoto tL_messages_editChatPhoto;
        if (tL_inputChatPhoto != null) {
            messagesController = this;
            inputChatPhoto = tL_inputChatPhoto;
        } else if (inputFile == null && inputFile2 == null && videoSize == null) {
            inputChatPhoto = new TLRPC.TL_inputChatPhotoEmpty();
            messagesController = this;
        } else {
            TLRPC.TL_inputChatUploadedPhoto tL_inputChatUploadedPhoto = new TLRPC.TL_inputChatUploadedPhoto();
            if (inputFile != null) {
                tL_inputChatUploadedPhoto.file = inputFile;
                tL_inputChatUploadedPhoto.flags |= 1;
            }
            if (inputFile2 != null) {
                tL_inputChatUploadedPhoto.video = inputFile2;
                int i = tL_inputChatUploadedPhoto.flags;
                tL_inputChatUploadedPhoto.video_start_ts = d;
                tL_inputChatUploadedPhoto.flags = i | 6;
            }
            if (videoSize != null) {
                tL_inputChatUploadedPhoto.video_emoji_markup = videoSize;
                tL_inputChatUploadedPhoto.flags |= 8;
            }
            messagesController = this;
            inputChatPhoto = tL_inputChatUploadedPhoto;
        }
        if (ChatObject.isChannel(j, messagesController.currentAccount)) {
            TLRPC.TL_channels_editPhoto tL_channels_editPhoto = new TLRPC.TL_channels_editPhoto();
            tL_channels_editPhoto.channel = getInputChannel(j);
            tL_channels_editPhoto.photo = inputChatPhoto;
            tL_messages_editChatPhoto = tL_channels_editPhoto;
        } else {
            TLRPC.TL_messages_editChatPhoto tL_messages_editChatPhoto2 = new TLRPC.TL_messages_editChatPhoto();
            tL_messages_editChatPhoto2.chat_id = j;
            tL_messages_editChatPhoto2.photo = inputChatPhoto;
            tL_messages_editChatPhoto = tL_messages_editChatPhoto2;
        }
        getConnectionsManager().sendRequest(tL_messages_editChatPhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda87
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$changeChatAvatar$297(tL_inputChatPhoto, fileLocation, fileLocation2, str, j, runnable, tLObject, tL_error);
            }
        }, 64);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatTitle(long j, String str) {
        TLRPC.TL_messages_editChatTitle tL_messages_editChatTitle;
        if (ChatObject.isChannel(j, this.currentAccount)) {
            TLRPC.TL_channels_editTitle tL_channels_editTitle = new TLRPC.TL_channels_editTitle();
            tL_channels_editTitle.channel = getInputChannel(j);
            tL_channels_editTitle.title = str;
            tL_messages_editChatTitle = tL_channels_editTitle;
        } else {
            TLRPC.TL_messages_editChatTitle tL_messages_editChatTitle2 = new TLRPC.TL_messages_editChatTitle();
            tL_messages_editChatTitle2.chat_id = j;
            tL_messages_editChatTitle2.title = str;
            tL_messages_editChatTitle = tL_messages_editChatTitle2;
        }
        getConnectionsManager().sendRequest(tL_messages_editChatTitle, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda452
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$changeChatTitle$295(tLObject, tL_error);
            }
        }, 64);
    }

    public void checkArchiveFolder() {
        if (this.hasArchivedChats || getStoriesController().hasHiddenStories()) {
            boolean[] zArr = {false};
            ensureFolderDialogExists(1, zArr);
            if (zArr[0]) {
                sortDialogs(null);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
        } else {
            removeFolder(1);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, 0);
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, null);
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment, MessageObject messageObject) {
        return checkCanOpenChat(bundle, baseFragment, messageObject, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public boolean checkCanOpenChat(final Bundle bundle, final BaseFragment baseFragment, MessageObject messageObject, final Browser.Progress progress) {
        TLRPC.User user;
        TLRPC.Chat chat;
        ArrayList<Integer> arrayList;
        TLRPC.TL_messages_getMessages tL_messages_getMessages;
        if (bundle != null && baseFragment != null) {
            long j = bundle.getLong("user_id", 0L);
            long j2 = bundle.getLong("chat_id", 0L);
            int i = bundle.getInt("message_id", 0);
            AlertDialog alertDialog = null;
            if (j != 0) {
                user = getUser(Long.valueOf(j));
                chat = null;
            } else if (j2 != 0) {
                chat = getChat(Long.valueOf(j2));
                user = null;
            } else {
                user = null;
                chat = null;
            }
            if (user == null && chat == null) {
                return true;
            }
            String restrictionReason = getRestrictionReason(chat != null ? chat.restriction_reason : user.restriction_reason);
            if (restrictionReason != null) {
                showCantOpenAlert(baseFragment, restrictionReason);
                return false;
            }
            if (i != 0 && messageObject != null && chat != null && chat.access_hash == 0) {
                long dialogId = messageObject.getDialogId();
                if (!DialogObject.isEncryptedDialog(dialogId)) {
                    if (progress != null) {
                        progress.init();
                    } else {
                        alertDialog = new AlertDialog(baseFragment.getParentActivity(), 3);
                    }
                    final AlertDialog alertDialog2 = alertDialog;
                    if (dialogId < 0) {
                        chat = getChat(Long.valueOf(-dialogId));
                    }
                    if (dialogId > 0 || !ChatObject.isChannel(chat)) {
                        TLRPC.TL_messages_getMessages tL_messages_getMessages2 = new TLRPC.TL_messages_getMessages();
                        arrayList = tL_messages_getMessages2.id;
                        tL_messages_getMessages = tL_messages_getMessages2;
                    } else {
                        TLRPC.Chat chat2 = getChat(Long.valueOf(-dialogId));
                        TLRPC.TL_channels_getMessages tL_channels_getMessages = new TLRPC.TL_channels_getMessages();
                        tL_channels_getMessages.channel = getInputChannel(chat2);
                        arrayList = tL_channels_getMessages.id;
                        tL_messages_getMessages = tL_channels_getMessages;
                    }
                    arrayList.add(Integer.valueOf(messageObject.getId()));
                    final int sendRequest = getConnectionsManager().sendRequest(tL_messages_getMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda108
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$checkCanOpenChat$406(alertDialog2, progress, baseFragment, bundle, tLObject, tL_error);
                        }
                    });
                    if (alertDialog2 != null) {
                        alertDialog2.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda109
                            @Override // android.content.DialogInterface.OnCancelListener
                            public final void onCancel(DialogInterface dialogInterface) {
                                MessagesController.this.lambda$checkCanOpenChat$407(sendRequest, baseFragment, dialogInterface);
                            }
                        });
                        baseFragment.setVisibleDialog(alertDialog2);
                        alertDialog2.show();
                    } else {
                        progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda110
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$checkCanOpenChat$408(sendRequest, baseFragment);
                            }
                        });
                        progress.init();
                    }
                    return false;
                }
            } else if (i != 0 && messageObject != null && progress != null) {
                progress.init();
                progress.onCancel(ensureMessagesLoaded(-j2, i, new MessagesLoadedCallback() { // from class: org.telegram.messenger.MessagesController.2
                    @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                    public void onError() {
                        progress.end();
                        baseFragment.presentFragment(new ChatActivity(bundle));
                    }

                    @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                    public void onMessagesLoaded(boolean z) {
                        progress.end();
                        baseFragment.presentFragment(new ChatActivity(bundle));
                    }
                }));
                return false;
            }
        }
        return true;
    }

    public void checkChatInviter(final long j, final boolean z) {
        final TLRPC.Chat chat = getChat(Long.valueOf(j));
        if (!ChatObject.isChannel(chat) || chat.creator || this.gettingChatInviters.indexOfKey(j) >= 0) {
            return;
        }
        this.gettingChatInviters.put(j, Boolean.TRUE);
        TLRPC.TL_channels_getParticipant tL_channels_getParticipant = new TLRPC.TL_channels_getParticipant();
        tL_channels_getParticipant.channel = getInputChannel(j);
        tL_channels_getParticipant.participant = getInputPeer(getUserConfig().getClientUserId());
        getConnectionsManager().sendRequest(tL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda437
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$checkChatInviter$353(chat, z, j, tLObject, tL_error);
            }
        });
    }

    public void checkChatlistFolderUpdate(final int i, boolean z) {
        if (i < 0) {
            return;
        }
        final ChatlistUpdatesStat chatlistUpdatesStat = this.chatlistFoldersUpdates.get(i);
        if (chatlistUpdatesStat != null) {
            if (chatlistUpdatesStat.loading) {
                return;
            }
            if (System.currentTimeMillis() - chatlistUpdatesStat.lastRequestTime <= this.chatlistUpdatePeriod * 1000 && !z) {
                return;
            }
        }
        if (chatlistUpdatesStat == null) {
            chatlistUpdatesStat = new ChatlistUpdatesStat();
            this.chatlistFoldersUpdates.put(i, chatlistUpdatesStat);
        }
        chatlistUpdatesStat.loading = false;
        TL_chatlists.TL_chatlists_getChatlistUpdates tL_chatlists_getChatlistUpdates = new TL_chatlists.TL_chatlists_getChatlistUpdates();
        TL_chatlists.TL_inputChatlistDialogFilter tL_inputChatlistDialogFilter = new TL_chatlists.TL_inputChatlistDialogFilter();
        tL_chatlists_getChatlistUpdates.chatlist = tL_inputChatlistDialogFilter;
        tL_inputChatlistDialogFilter.filter_id = i;
        getConnectionsManager().sendRequest(tL_chatlists_getChatlistUpdates, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda186
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$checkChatlistFolderUpdate$432(i, chatlistUpdatesStat, tLObject, tL_error);
            }
        });
    }

    public void checkIfFolderEmpty(int i) {
        if (i == 0) {
            return;
        }
        getMessagesStorage().checkIfFolderEmpty(i);
    }

    public void checkIsInChat(boolean z, TLRPC.Chat chat, TLRPC.User user, final IsInChatCheckedCallback isInChatCheckedCallback) {
        TLRPC.ChatFull chatFull;
        TLRPC.ChatParticipant chatParticipant;
        ArrayList<TLRPC.ChatParticipant> arrayList;
        TLRPC.ChatParticipant chatParticipant2;
        ArrayList<TLRPC.ChatParticipant> arrayList2;
        if (chat == null || user == null) {
            if (isInChatCheckedCallback != null) {
                isInChatCheckedCallback.run(false, null, null);
                return;
            }
            return;
        }
        if (chat.megagroup || ChatObject.isChannel(chat)) {
            if (z && (chatFull = getChatFull(chat.id)) != null) {
                TLRPC.ChatParticipants chatParticipants = chatFull.participants;
                if (chatParticipants != null && (arrayList = chatParticipants.participants) != null) {
                    int size = arrayList.size();
                    for (int i = 0; i < size; i++) {
                        chatParticipant = chatFull.participants.participants.get(i);
                        if (chatParticipant != null && chatParticipant.user_id == user.id) {
                            break;
                        }
                    }
                }
                chatParticipant = null;
                if (isInChatCheckedCallback != null && chatParticipant != null) {
                    TLRPC.ChatParticipants chatParticipants2 = chatFull.participants;
                    isInChatCheckedCallback.run(true, (chatParticipants2 == null || chatParticipants2.admin_id != user.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), null);
                    return;
                }
            }
            TLRPC.TL_channels_getParticipant tL_channels_getParticipant = new TLRPC.TL_channels_getParticipant();
            tL_channels_getParticipant.channel = getInputChannel(chat.id);
            tL_channels_getParticipant.participant = getInputPeer(user);
            getConnectionsManager().sendRequest(tL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda80
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$checkIsInChat$427(MessagesController.IsInChatCheckedCallback.this, tLObject, tL_error);
                }
            });
            return;
        }
        TLRPC.ChatFull chatFull2 = getChatFull(chat.id);
        if (chatFull2 == null) {
            if (isInChatCheckedCallback != null) {
                isInChatCheckedCallback.run(false, null, null);
                return;
            }
            return;
        }
        TLRPC.ChatParticipants chatParticipants3 = chatFull2.participants;
        if (chatParticipants3 != null && (arrayList2 = chatParticipants3.participants) != null) {
            int size2 = arrayList2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                chatParticipant2 = chatFull2.participants.participants.get(i2);
                if (chatParticipant2 != null && chatParticipant2.user_id == user.id) {
                    break;
                }
            }
        }
        chatParticipant2 = null;
        if (isInChatCheckedCallback != null) {
            boolean z2 = chatParticipant2 != null;
            TLRPC.ChatParticipants chatParticipants4 = chatFull2.participants;
            isInChatCheckedCallback.run(z2, (chatParticipants4 == null || chatParticipants4.admin_id != user.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), null);
        }
    }

    protected void checkLastDialogMessage(final TLRPC.Dialog dialog, TLRPC.InputPeer inputPeer, final long j) {
        Exception e;
        NativeByteBuffer nativeByteBuffer;
        if (DialogObject.isEncryptedDialog(dialog.id) || this.checkingLastMessagesDialogs.indexOfKey(dialog.id) >= 0) {
            return;
        }
        TLRPC.TL_messages_getHistory tL_messages_getHistory = new TLRPC.TL_messages_getHistory();
        if (inputPeer == null) {
            inputPeer = getInputPeer(dialog.id);
        }
        tL_messages_getHistory.peer = inputPeer;
        if (inputPeer == null) {
            return;
        }
        tL_messages_getHistory.limit = 1;
        this.checkingLastMessagesDialogs.put(dialog.id, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + dialog.id);
        }
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tL_messages_getHistory.peer.getObjectSize() + 60);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer = null;
            }
            try {
                nativeByteBuffer.writeInt32(14);
                nativeByteBuffer.writeInt64(dialog.id);
                nativeByteBuffer.writeInt32(dialog.top_message);
                nativeByteBuffer.writeInt32(dialog.read_inbox_max_id);
                nativeByteBuffer.writeInt32(dialog.read_outbox_max_id);
                nativeByteBuffer.writeInt32(dialog.unread_count);
                nativeByteBuffer.writeInt32(dialog.last_message_date);
                nativeByteBuffer.writeInt32(dialog.pts);
                nativeByteBuffer.writeInt32(dialog.flags);
                nativeByteBuffer.writeBool(dialog.pinned);
                nativeByteBuffer.writeInt32(dialog.pinnedNum);
                nativeByteBuffer.writeInt32(dialog.unread_mentions_count);
                nativeByteBuffer.writeBool(dialog.unread_mark);
                nativeByteBuffer.writeInt32(dialog.folder_id);
                tL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda276
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$216(dialog, j, tLObject, tL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda276
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$checkLastDialogMessage$216(dialog, j, tLObject, tL_error);
            }
        });
    }

    public void checkPeerColors(boolean z) {
        PeerColors peerColors;
        if (getUserConfig().getCurrentUser() == null) {
            return;
        }
        if (!this.loadingPeerColors && ((peerColors = this.peerColors) == null || peerColors.needUpdate() || z)) {
            this.loadingPeerColors = true;
            TLRPC.TL_help_getPeerColors tL_help_getPeerColors = new TLRPC.TL_help_getPeerColors();
            PeerColors peerColors2 = this.peerColors;
            tL_help_getPeerColors.hash = peerColors2 != null ? peerColors2.hash : 0;
            if (peerColors2 != null && peerColors2.needUpdate()) {
                tL_help_getPeerColors.hash = 0;
            }
            getConnectionsManager().sendRequest(tL_help_getPeerColors, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda67
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkPeerColors$445(tLObject, tL_error);
                }
            });
        }
        if (this.loadingProfilePeerColors) {
            return;
        }
        PeerColors peerColors3 = this.profilePeerColors;
        if (peerColors3 == null || peerColors3.needUpdate() || z) {
            this.loadingProfilePeerColors = true;
            TLRPC.TL_help_getPeerProfileColors tL_help_getPeerProfileColors = new TLRPC.TL_help_getPeerProfileColors();
            PeerColors peerColors4 = this.profilePeerColors;
            tL_help_getPeerProfileColors.hash = peerColors4 != null ? peerColors4.hash : 0;
            if (peerColors4 != null && peerColors4.needUpdate()) {
                tL_help_getPeerProfileColors.hash = 0;
            }
            getConnectionsManager().sendRequest(tL_help_getPeerProfileColors, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda68
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkPeerColors$447(tLObject, tL_error);
                }
            });
        }
    }

    public void checkPromoInfo(final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda321
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkPromoInfo$155(z);
            }
        });
    }

    public void checkSensitive(final BaseFragment baseFragment, final long j, final Runnable runnable, final Runnable runnable2) {
        TLRPC.User user;
        ArrayList<TLRPC.RestrictionReason> arrayList = null;
        if (j < 0) {
            TLRPC.Chat chat = getChat(Long.valueOf(-j));
            if (chat != null) {
                arrayList = chat.restriction_reason;
            }
        } else if (j >= 0 && (user = getUser(Long.valueOf(j))) != null) {
            arrayList = user.restriction_reason;
        }
        if (!isSensitive(arrayList) || this.sensitiveAgreed.contains(Long.valueOf(j))) {
            if (runnable != null) {
                runnable.run();
            }
        } else {
            final AlertDialog alertDialog = new AlertDialog(baseFragment.getContext(), 3);
            alertDialog.showDelayed(200L);
            getContentSettings(new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda151
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$checkSensitive$404(alertDialog, baseFragment, j, runnable, runnable2, (TL_account.contentSettings) obj);
                }
            });
        }
    }

    public void checkUnreadReactions(final long j, final long j2, final SparseBooleanArray sparseBooleanArray) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkUnreadReactions$391(sparseBooleanArray, j2, j);
            }
        });
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        getColorPalette().cleanup();
        getTranslateController().cleanup();
        getSavedMessagesController().cleanup();
        StoriesController storiesController = this.storiesController;
        if (storiesController != null) {
            storiesController.cleanup();
        }
        UnconfirmedAuthController unconfirmedAuthController = this.unconfirmedAuthController;
        if (unconfirmedAuthController != null) {
            unconfirmedAuthController.cleanup();
        }
        this.showFiltersTooltip = false;
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0L).putLong("lastStickersLoadTime", 0L).putLong("lastStickersLoadTimeMask", 0L).putLong("lastStickersLoadTimeFavs", 0L).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("reminderhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").remove("showFiltersTooltip").remove("transcribeButtonPressed").commit();
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("shortcut_widget", 0);
        SharedPreferences.Editor editor = null;
        ArrayList arrayList = null;
        ArrayList arrayList2 = null;
        AppWidgetManager appWidgetManager = null;
        for (Map.Entry<String, ?> entry : sharedPreferences.getAll().entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("account") && ((Integer) entry.getValue()).intValue() == this.currentAccount) {
                Integer parseInt = Utilities.parseInt((CharSequence) key);
                int intValue = parseInt.intValue();
                if (editor == null) {
                    editor = sharedPreferences.edit();
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                editor.putBoolean("deleted" + intValue, true);
                if (sharedPreferences.getInt("type" + intValue, 0) == 0) {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(parseInt);
                } else {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(parseInt);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                ChatsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList.get(i)).intValue());
            }
        }
        if (arrayList2 != null) {
            int size2 = arrayList2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                ContactsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList2.get(i2)).intValue());
            }
        }
        this.lastScheduledServerQueryTime.clear();
        this.lastQuickReplyServerQueryTime.clear();
        this.lastSavedServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.reloadingSavedWebpages.clear();
        this.reloadingSavedWebpagesPending.clear();
        this.sponsoredMessages.clear();
        this.sendAsPeers.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.activeVoiceChatsMap.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.dialogsCanAddUsers.clear();
        this.dialogsMyChannels.clear();
        this.dialogsMyGroups.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$47();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int i3 = 0;
        while (true) {
            LongSparseArray[] longSparseArrayArr = this.sendingTypings;
            if (i3 >= longSparseArrayArr.length) {
                break;
            }
            LongSparseArray longSparseArray = longSparseArrayArr[i3];
            if (longSparseArray != null) {
                longSparseArray.clear();
            }
            i3++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0L;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$48();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$49();
            }
        });
    }

    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
        this.lastQuickReplyServerQueryTime.clear();
        this.lastSavedServerQueryTime.clear();
    }

    public void clearSendAsPeers() {
        this.sendAsPeers.clear();
    }

    protected void completeDialogsReset(final TLRPC.messages_Dialogs messages_dialogs, int i, int i2, final int i3, final int i4, final int i5, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, TLRPC.Message message) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda473
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$201(i3, i4, i5, messages_dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    public void convertToGigaGroup(final Context context, TLRPC.Chat chat, final BaseFragment baseFragment, final MessagesStorage.BooleanCallback booleanCallback) {
        final TLRPC.TL_channels_convertToGigagroup tL_channels_convertToGigagroup = new TLRPC.TL_channels_convertToGigagroup();
        tL_channels_convertToGigagroup.channel = getInputChannel(chat);
        AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final AlertDialog alertDialog2 = alertDialog;
        final int sendRequest = getConnectionsManager().sendRequest(tL_channels_convertToGigagroup, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda179
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$convertToGigaGroup$250(context, alertDialog2, booleanCallback, baseFragment, tL_channels_convertToGigagroup, tLObject, tL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda180
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToGigaGroup$251(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.showDelayed(400L);
            } catch (Exception unused) {
            }
        }
    }

    public void convertToMegaGroup(Context context, long j, BaseFragment baseFragment, MessagesStorage.LongCallback longCallback) {
        convertToMegaGroup(context, j, baseFragment, longCallback, null);
    }

    public void convertToMegaGroup(final Context context, final long j, final BaseFragment baseFragment, final MessagesStorage.LongCallback longCallback, final Runnable runnable) {
        final TLRPC.TL_messages_migrateChat tL_messages_migrateChat = new TLRPC.TL_messages_migrateChat();
        tL_messages_migrateChat.chat_id = j;
        final AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final int sendRequest = getConnectionsManager().sendRequest(tL_messages_migrateChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda38
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$convertToMegaGroup$245(context, alertDialog, longCallback, j, runnable, baseFragment, tL_messages_migrateChat, tLObject, tL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToMegaGroup$246(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.show();
            } catch (Exception unused) {
            }
        }
    }

    public int createChat(String str, ArrayList<Long> arrayList, String str2, int i, boolean z, Location location, String str3, int i2, final BaseFragment baseFragment) {
        if (i == 0 && !z) {
            final TLRPC.TL_messages_createChat tL_messages_createChat = new TLRPC.TL_messages_createChat();
            tL_messages_createChat.title = str;
            if (i2 >= 0) {
                tL_messages_createChat.ttl_period = i2;
                tL_messages_createChat.flags |= 1;
            }
            for (int i3 = 0; i3 < arrayList.size(); i3++) {
                TLRPC.User user = getUser(arrayList.get(i3));
                if (user != null) {
                    tL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tL_messages_createChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda126
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$createChat$238(baseFragment, tL_messages_createChat, tLObject, tL_error);
                }
            }, 2);
        }
        if (!z && i != 2 && i != 4 && i != 5) {
            return 0;
        }
        final TLRPC.TL_channels_createChannel tL_channels_createChannel = new TLRPC.TL_channels_createChannel();
        tL_channels_createChannel.title = str;
        if (str2 == null) {
            str2 = "";
        }
        tL_channels_createChannel.about = str2;
        tL_channels_createChannel.for_import = z;
        if (z || i == 4 || i == 5) {
            tL_channels_createChannel.megagroup = true;
        } else {
            tL_channels_createChannel.broadcast = true;
        }
        tL_channels_createChannel.forum = i == 5;
        if (location != null) {
            TLRPC.TL_inputGeoPoint tL_inputGeoPoint = new TLRPC.TL_inputGeoPoint();
            tL_channels_createChannel.geo_point = tL_inputGeoPoint;
            tL_inputGeoPoint.lat = location.getLatitude();
            tL_channels_createChannel.geo_point._long = location.getLongitude();
            tL_channels_createChannel.address = str3;
            tL_channels_createChannel.flags |= 4;
        }
        return getConnectionsManager().sendRequest(tL_channels_createChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda127
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$createChat$241(baseFragment, tL_channels_createChannel, tLObject, tL_error);
            }
        }, 2);
    }

    public long createDeleteShowOnceTask(long j, int i) {
        NativeByteBuffer nativeByteBuffer;
        try {
            nativeByteBuffer = new NativeByteBuffer(16);
        } catch (Exception e) {
            e = e;
            nativeByteBuffer = null;
        }
        try {
            nativeByteBuffer.writeInt32(102);
            nativeByteBuffer.writeInt64(j);
            nativeByteBuffer.writeInt32(i);
        } catch (Exception e2) {
            e = e2;
            FileLog.e(e);
            return getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        return getMessagesStorage().createPendingTask(nativeByteBuffer);
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:147:0x03f8  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0431  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void deleteDialog(final long j, int i, final int i2, int i3, final boolean z, final TLRPC.InputPeer inputPeer, final long j2) {
        long j3;
        final int i4;
        boolean z2;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        final long createPendingTask;
        int i5;
        int i6;
        boolean z3;
        TLRPC.Chat chat;
        int i7;
        if (i2 == 2) {
            if (j == getUserConfig().getClientUserId()) {
                getSavedMessagesController().deleteAllDialogs();
            }
            getMessagesStorage().deleteDialog(j, i2);
            return;
        }
        for (int i8 = 0; i8 < this.sendAsPeers.size(); i8++) {
            SendAsPeersInfo sendAsPeersInfo = (SendAsPeersInfo) this.sendAsPeers.valueAt(i8);
            if (sendAsPeersInfo.sendAsPeers != null) {
                int i9 = 0;
                while (true) {
                    if (i9 >= sendAsPeersInfo.sendAsPeers.chats.size()) {
                        break;
                    }
                    if (sendAsPeersInfo.sendAsPeers.chats.get(i9).id == (-j)) {
                        sendAsPeersInfo.sendAsPeers.chats.remove(i9);
                        break;
                    }
                    i9++;
                }
                for (int i10 = 0; i10 < sendAsPeersInfo.sendAsPeers.peers.size(); i10++) {
                    long j4 = -j;
                    if (sendAsPeersInfo.sendAsPeers.peers.get(i10).peer.channel_id == j4 || sendAsPeersInfo.sendAsPeers.peers.get(i10).peer.chat_id == j4) {
                        sendAsPeersInfo.sendAsPeers.peers.remove(i10);
                        break;
                    }
                }
            }
        }
        this.sendAsPeers.remove(j);
        if (i == 1 && i3 == 0) {
            getMessagesStorage().getDialogMaxMessageId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda265
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i11) {
                    MessagesController.this.lambda$deleteDialog$129(j, i2, z, inputPeer, j2, i11);
                }
            });
            return;
        }
        if (i2 == 0 || i2 == 3) {
            getMediaDataController().uninstallShortcut(j, MediaDataController.SHORTCUT_TYPE_USER_OR_CHAT);
        }
        if (i != 0) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("delete dialog with id " + j);
            }
            if (j == getUserConfig().getClientUserId()) {
                getSavedMessagesController().deleteAllDialogs();
            }
            getMessagesStorage().deleteDialog(j, i2);
            TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
            if (i2 == 0 || i2 == 3) {
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogDeleted, Long.valueOf(j), 0);
                getNotificationsController().deleteNotificationChannel(j, 0L);
                JoinCallAlert.processDeletedChat(this.currentAccount, j);
            }
            if (i2 == 0) {
                j3 = 0;
                getMediaDataController().cleanDraft(j, 0L, false);
            } else {
                j3 = 0;
            }
            if (dialog != null) {
                i5 = i == 2 ? Math.max(Math.max(Math.max(0, dialog.top_message), dialog.read_inbox_max_id), dialog.read_outbox_max_id) : i3;
                if (i2 == 0 || i2 == 3) {
                    TLRPC.Dialog dialog2 = this.promoDialog;
                    z3 = dialog2 != null && dialog2.id == j;
                    if (z3) {
                        this.isLeftPromoChannel = true;
                        long j5 = dialog2.id;
                        if (j5 < j3 && (chat = getChat(Long.valueOf(-j5))) != null) {
                            chat.left = true;
                        }
                        sortDialogs(null);
                    } else {
                        removeDialog(dialog);
                        int i11 = this.nextDialogsCacheOffset.get(dialog.folder_id, 0);
                        if (i11 > 0) {
                            this.nextDialogsCacheOffset.put(dialog.folder_id, i11 - 1);
                        }
                    }
                } else {
                    dialog.unread_count = 0;
                    z3 = false;
                }
                if (!z3) {
                    ArrayList arrayList = (ArrayList) this.dialogMessage.get(dialog.id);
                    this.dialogMessage.remove(dialog.id);
                    if (arrayList == null || arrayList.size() <= 0 || arrayList.get(0) == null) {
                        i7 = dialog.top_message;
                        MessageObject messageObject = this.dialogMessagesByIds.get(i7);
                        if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == j3) {
                            this.dialogMessagesByIds.remove(dialog.top_message);
                        }
                        if (messageObject != null) {
                            long j6 = messageObject.messageOwner.random_id;
                            if (j6 != j3) {
                                this.dialogMessagesByRandomIds.remove(j6);
                            }
                        }
                    } else {
                        i7 = ((MessageObject) arrayList.get(0)).getId();
                        for (int i12 = 0; i12 < arrayList.size(); i12++) {
                            MessageObject messageObject2 = (MessageObject) arrayList.get(i12);
                            if (messageObject2 != null && messageObject2.getId() > i7) {
                                i7 = messageObject2.getId();
                            }
                            if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == j3) {
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                            }
                            if (messageObject2 != null) {
                                long j7 = messageObject2.messageOwner.random_id;
                                if (j7 != j3) {
                                    this.dialogMessagesByRandomIds.remove(j7);
                                }
                            }
                        }
                    }
                    if (i2 != 1 || DialogObject.isEncryptedDialog(j) || i7 <= 0) {
                        dialog.top_message = 0;
                    } else {
                        TLRPC.TL_messageService tL_messageService = new TLRPC.TL_messageService();
                        tL_messageService.id = dialog.top_message;
                        tL_messageService.out = getUserConfig().getClientUserId() == j;
                        TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
                        tL_messageService.from_id = tL_peerUser;
                        tL_peerUser.user_id = getUserConfig().getClientUserId();
                        tL_messageService.flags |= 256;
                        tL_messageService.action = new TLRPC.TL_messageActionHistoryClear();
                        tL_messageService.date = dialog.last_message_date;
                        tL_messageService.dialog_id = j;
                        tL_messageService.peer_id = getPeer(j);
                        boolean contains = this.createdDialogIds.contains(Long.valueOf(tL_messageService.dialog_id));
                        MessageObject messageObject3 = new MessageObject(this.currentAccount, tL_messageService, contains, contains);
                        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
                        arrayList2.add(messageObject3);
                        ArrayList<TLRPC.Message> arrayList3 = new ArrayList<>();
                        arrayList3.add(tL_messageService);
                        updateInterfaceWithMessages(j, arrayList2, 0);
                        getMessagesStorage().putMessages(arrayList3, false, true, false, 0, false, 0, 0L);
                    }
                }
                i6 = 2;
            } else {
                i5 = i3;
                i6 = 2;
                z3 = false;
            }
            if (i == i6) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num != null) {
                    i5 = Math.max(num.intValue(), i5);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 != null) {
                    i5 = Math.max(num2.intValue(), i5);
                }
            }
            if (!this.dialogsInTransaction) {
                NotificationCenter notificationCenter = getNotificationCenter();
                if (z3) {
                    notificationCenter.lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                } else {
                    notificationCenter.lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.FALSE, null);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda266
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteDialog$131(j);
                }
            });
            i4 = i5;
        } else {
            j3 = 0;
            i4 = i3;
        }
        if (i2 == 3) {
            return;
        }
        if (DialogObject.isEncryptedDialog(j)) {
            int encryptedChatId = DialogObject.getEncryptedChatId(j);
            if (i2 == 1) {
                getSecretChatHelper().sendClearHistoryMessage(getEncryptedChat(Integer.valueOf(encryptedChatId)), null);
                return;
            } else {
                getSecretChatHelper().declineSecretChat(encryptedChatId, z);
                return;
            }
        }
        TLRPC.InputPeer inputPeer2 = inputPeer == null ? getInputPeer(j) : inputPeer;
        if (inputPeer2 == null) {
            return;
        }
        boolean z4 = inputPeer2 instanceof TLRPC.TL_inputPeerChannel;
        int i13 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        if (!z4 || i2 != 0) {
            if (i4 > 0 && i4 != Integer.MAX_VALUE) {
                this.deletedHistory.put(j, Math.max(this.deletedHistory.get(j, 0), i4));
            }
            if (j2 == j3) {
                try {
                    nativeByteBuffer2 = new NativeByteBuffer(inputPeer2.getObjectSize() + 28);
                    try {
                        nativeByteBuffer2.writeInt32(13);
                        nativeByteBuffer2.writeInt64(j);
                        nativeByteBuffer2.writeBool(i != 0);
                        nativeByteBuffer2.writeInt32(i2);
                        nativeByteBuffer2.writeInt32(i4);
                        z2 = z;
                    } catch (Exception e) {
                        e = e;
                        z2 = z;
                    }
                } catch (Exception e2) {
                    e = e2;
                    z2 = z;
                    nativeByteBuffer = null;
                }
                try {
                    nativeByteBuffer2.writeBool(z2);
                    inputPeer2.serializeToStream(nativeByteBuffer2);
                } catch (Exception e3) {
                    e = e3;
                    nativeByteBuffer = nativeByteBuffer2;
                    FileLog.e(e);
                    nativeByteBuffer2 = nativeByteBuffer;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    if (!z4) {
                    }
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                if (!z4) {
                    TLRPC.TL_messages_deleteHistory tL_messages_deleteHistory = new TLRPC.TL_messages_deleteHistory();
                    tL_messages_deleteHistory.peer = inputPeer2;
                    if (i4 > 0) {
                        i13 = i4;
                    }
                    tL_messages_deleteHistory.max_id = i13;
                    tL_messages_deleteHistory.just_clear = i2 != 0;
                    tL_messages_deleteHistory.revoke = z2;
                    final TLRPC.InputPeer inputPeer3 = inputPeer2;
                    getConnectionsManager().sendRequest(tL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda268
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$deleteDialog$133(createPendingTask, j, i2, i4, z, inputPeer3, tLObject, tL_error);
                        }
                    }, 64);
                    return;
                }
                if (i2 == 0) {
                    if (createPendingTask != j3) {
                        getMessagesStorage().removePendingTask(createPendingTask);
                        return;
                    }
                    return;
                }
                TLRPC.TL_channels_deleteHistory tL_channels_deleteHistory = new TLRPC.TL_channels_deleteHistory();
                TLRPC.TL_inputChannel tL_inputChannel = new TLRPC.TL_inputChannel();
                tL_channels_deleteHistory.channel = tL_inputChannel;
                tL_channels_deleteHistory.for_everyone = z2;
                tL_inputChannel.channel_id = inputPeer2.channel_id;
                tL_inputChannel.access_hash = inputPeer2.access_hash;
                if (i4 <= 0) {
                    i4 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                }
                tL_channels_deleteHistory.max_id = i4;
                getConnectionsManager().sendRequest(tL_channels_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda267
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteDialog$132(createPendingTask, tLObject, tL_error);
                    }
                }, 64);
                return;
            }
        }
        z2 = z;
        createPendingTask = j2;
        if (!z4) {
        }
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, 1, i, 0, z, null, 0L);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC.EncryptedChat encryptedChat, long j, int i, boolean z, int i2) {
        deleteMessages(arrayList, arrayList2, encryptedChat, j, z, i2, false, 0L, null, i);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC.EncryptedChat encryptedChat, long j, int i, boolean z, int i2, boolean z2) {
        deleteMessages(arrayList, arrayList2, encryptedChat, j, z, i2, z2, 0L, null, i);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC.EncryptedChat encryptedChat, long j, boolean z, int i, boolean z2, long j2, TLObject tLObject, int i2) {
        deleteMessages(arrayList, arrayList2, encryptedChat, j, z, i, z2, j2, tLObject, i2, false, 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:116:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0078  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0058  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x007c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC.EncryptedChat encryptedChat, long j, boolean z, int i, boolean z2, long j2, TLObject tLObject, int i2, boolean z3, int i3) {
        long j3;
        ArrayList<Integer> arrayList3;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        final long createPendingTask;
        TLObject tLObject2;
        ConnectionsManager connectionsManager;
        RequestDelegate requestDelegate;
        NativeByteBuffer nativeByteBuffer3;
        long createPendingTask2;
        TLRPC.TL_channels_deleteMessages tL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer4;
        final long createPendingTask3;
        NativeByteBuffer nativeByteBuffer5;
        final long createPendingTask4;
        long j4;
        ArrayList<Integer> arrayList4;
        char c;
        char c2;
        MessagesStorage messagesStorage;
        boolean z4;
        int i4;
        boolean z5;
        long j5;
        ArrayList<Integer> arrayList5;
        int i5;
        boolean z6 = i == 1;
        boolean z7 = i == 5;
        if ((arrayList == null || arrayList.isEmpty()) && j2 == 0) {
            return;
        }
        if (j2 == 0) {
            if (j != 0 && DialogObject.isChatDialog(j)) {
                TLRPC.Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isChannel(chat)) {
                    j4 = chat.id;
                    if (z2) {
                        ArrayList<Integer> arrayList6 = new ArrayList<>();
                        int size = arrayList.size();
                        for (int i6 = 0; i6 < size; i6++) {
                            Integer num = arrayList.get(i6);
                            if (num.intValue() > 0) {
                                arrayList6.add(num);
                            }
                        }
                        arrayList4 = arrayList6;
                    } else {
                        arrayList4 = null;
                    }
                    if (z6) {
                        c = 5;
                        if (z7) {
                            if (i == 5) {
                                QuickRepliesController.getInstance(this.currentAccount).deleteLocalMessages(arrayList);
                            }
                            messagesStorage = getMessagesStorage();
                            z4 = false;
                            i4 = 5;
                            z5 = true;
                            j5 = j;
                            arrayList5 = arrayList;
                            i5 = i2;
                        } else {
                            if (j4 == 0) {
                                for (int i7 = 0; i7 < arrayList.size(); i7++) {
                                    MessageObject messageObject = this.dialogMessagesByIds.get(arrayList.get(i7).intValue());
                                    if (messageObject != null) {
                                        messageObject.deleted = true;
                                    }
                                }
                            } else {
                                markDialogMessageAsDeleted(j, arrayList);
                            }
                            c2 = 1;
                            getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, z, 0, i2);
                            getMessagesStorage().updateDialogsWithDeletedMessages(j, j4, arrayList, null, true);
                            NotificationCenter notificationCenter = getNotificationCenter();
                            int i8 = NotificationCenter.messagesDeleted;
                            Long valueOf = Long.valueOf(j4);
                            Boolean valueOf2 = Boolean.valueOf(z6);
                            Boolean valueOf3 = Boolean.valueOf(z3);
                            Integer valueOf4 = Integer.valueOf(i3);
                            Object[] objArr = new Object[6];
                            objArr[0] = arrayList;
                            objArr[c2] = valueOf;
                            objArr[2] = valueOf2;
                            objArr[3] = Boolean.FALSE;
                            objArr[4] = valueOf3;
                            objArr[c] = valueOf4;
                            notificationCenter.lambda$postNotificationNameOnUIThread$1(i8, objArr);
                            j3 = j4;
                            arrayList3 = arrayList4;
                        }
                    } else {
                        messagesStorage = getMessagesStorage();
                        z5 = true;
                        j5 = j;
                        arrayList5 = arrayList;
                        z4 = false;
                        i4 = 1;
                        c = 5;
                        i5 = 0;
                    }
                    messagesStorage.markMessagesAsDeleted(j5, arrayList5, z5, z4, i4, i5);
                    c2 = 1;
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i82 = NotificationCenter.messagesDeleted;
                    Long valueOf5 = Long.valueOf(j4);
                    Boolean valueOf22 = Boolean.valueOf(z6);
                    Boolean valueOf32 = Boolean.valueOf(z3);
                    Integer valueOf42 = Integer.valueOf(i3);
                    Object[] objArr2 = new Object[6];
                    objArr2[0] = arrayList;
                    objArr2[c2] = valueOf5;
                    objArr2[2] = valueOf22;
                    objArr2[3] = Boolean.FALSE;
                    objArr2[4] = valueOf32;
                    objArr2[c] = valueOf42;
                    notificationCenter2.lambda$postNotificationNameOnUIThread$1(i82, objArr2);
                    j3 = j4;
                    arrayList3 = arrayList4;
                }
            }
            j4 = 0;
            if (z2) {
            }
            if (z6) {
            }
            messagesStorage.markMessagesAsDeleted(j5, arrayList5, z5, z4, i4, i5);
            c2 = 1;
            NotificationCenter notificationCenter22 = getNotificationCenter();
            int i822 = NotificationCenter.messagesDeleted;
            Long valueOf52 = Long.valueOf(j4);
            Boolean valueOf222 = Boolean.valueOf(z6);
            Boolean valueOf322 = Boolean.valueOf(z3);
            Integer valueOf422 = Integer.valueOf(i3);
            Object[] objArr22 = new Object[6];
            objArr22[0] = arrayList;
            objArr22[c2] = valueOf52;
            objArr22[2] = valueOf222;
            objArr22[3] = Boolean.FALSE;
            objArr22[4] = valueOf322;
            objArr22[c] = valueOf422;
            notificationCenter22.lambda$postNotificationNameOnUIThread$1(i822, objArr22);
            j3 = j4;
            arrayList3 = arrayList4;
        } else {
            j3 = tLObject instanceof TLRPC.TL_channels_deleteMessages ? ((TLRPC.TL_channels_deleteMessages) tLObject).channel.channel_id : 0L;
            arrayList3 = null;
        }
        if (z2) {
            return;
        }
        if (z6) {
            if (tLObject instanceof TLRPC.TL_messages_deleteScheduledMessages) {
                tLObject2 = (TLRPC.TL_messages_deleteScheduledMessages) tLObject;
                createPendingTask4 = j2;
            } else {
                TLRPC.TL_messages_deleteScheduledMessages tL_messages_deleteScheduledMessages = new TLRPC.TL_messages_deleteScheduledMessages();
                tL_messages_deleteScheduledMessages.id = arrayList3;
                tL_messages_deleteScheduledMessages.peer = getInputPeer(j);
                try {
                    nativeByteBuffer5 = new NativeByteBuffer(tL_messages_deleteScheduledMessages.getObjectSize() + 12);
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer5 = null;
                }
                try {
                    nativeByteBuffer5.writeInt32(24);
                    nativeByteBuffer5.writeInt64(j);
                    tL_messages_deleteScheduledMessages.serializeToStream(nativeByteBuffer5);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    createPendingTask4 = getMessagesStorage().createPendingTask(nativeByteBuffer5);
                    tLObject2 = tL_messages_deleteScheduledMessages;
                    connectionsManager = getConnectionsManager();
                    requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$deleteMessages$118(createPendingTask4, tLObject3, tL_error);
                        }
                    };
                    connectionsManager.sendRequest(tLObject2, requestDelegate);
                }
                createPendingTask4 = getMessagesStorage().createPendingTask(nativeByteBuffer5);
                tLObject2 = tL_messages_deleteScheduledMessages;
            }
            connectionsManager = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$deleteMessages$118(createPendingTask4, tLObject3, tL_error);
                }
            };
        } else if (z7) {
            if (tLObject instanceof TLRPC.TL_messages_deleteQuickReplyMessages) {
                tLObject2 = (TLRPC.TL_messages_deleteQuickReplyMessages) tLObject;
                createPendingTask3 = j2;
            } else {
                TLRPC.TL_messages_deleteQuickReplyMessages tL_messages_deleteQuickReplyMessages = new TLRPC.TL_messages_deleteQuickReplyMessages();
                tL_messages_deleteQuickReplyMessages.id = arrayList3;
                tL_messages_deleteQuickReplyMessages.shortcut_id = i2;
                try {
                    nativeByteBuffer4 = new NativeByteBuffer(tL_messages_deleteQuickReplyMessages.getObjectSize() + 16);
                    try {
                        nativeByteBuffer4.writeInt32(103);
                        nativeByteBuffer4.writeInt64(j);
                        nativeByteBuffer4.writeInt32(i2);
                        tL_messages_deleteQuickReplyMessages.serializeToStream(nativeByteBuffer4);
                    } catch (Exception e3) {
                        e = e3;
                        FileLog.e(e);
                        createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                        tLObject2 = tL_messages_deleteQuickReplyMessages;
                        connectionsManager = getConnectionsManager();
                        requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda325
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$deleteMessages$119(createPendingTask3, tLObject3, tL_error);
                            }
                        };
                        connectionsManager.sendRequest(tLObject2, requestDelegate);
                    }
                } catch (Exception e4) {
                    e = e4;
                    nativeByteBuffer4 = null;
                }
                createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                tLObject2 = tL_messages_deleteQuickReplyMessages;
            }
            connectionsManager = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda325
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$deleteMessages$119(createPendingTask3, tLObject3, tL_error);
                }
            };
        } else {
            if (j3 != 0) {
                if (tLObject != null) {
                    tL_channels_deleteMessages = (TLRPC.TL_channels_deleteMessages) tLObject;
                    createPendingTask2 = j2;
                } else {
                    TLRPC.TL_channels_deleteMessages tL_channels_deleteMessages2 = new TLRPC.TL_channels_deleteMessages();
                    tL_channels_deleteMessages2.id = arrayList3;
                    tL_channels_deleteMessages2.channel = getInputChannel(j3);
                    try {
                        nativeByteBuffer3 = new NativeByteBuffer(tL_channels_deleteMessages2.getObjectSize() + 12);
                    } catch (Exception e5) {
                        e = e5;
                        nativeByteBuffer3 = null;
                    }
                    try {
                        nativeByteBuffer3.writeInt32(24);
                        nativeByteBuffer3.writeInt64(j);
                        tL_channels_deleteMessages2.serializeToStream(nativeByteBuffer3);
                    } catch (Exception e6) {
                        e = e6;
                        FileLog.e(e);
                        createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                        tL_channels_deleteMessages = tL_channels_deleteMessages2;
                        final long j6 = j3;
                        final long j7 = createPendingTask2;
                        getConnectionsManager().sendRequest(tL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda326
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$deleteMessages$120(j6, j7, tLObject3, tL_error);
                            }
                        });
                        return;
                    }
                    createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                    tL_channels_deleteMessages = tL_channels_deleteMessages2;
                }
                final long j62 = j3;
                final long j72 = createPendingTask2;
                getConnectionsManager().sendRequest(tL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda326
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteMessages$120(j62, j72, tLObject3, tL_error);
                    }
                });
                return;
            }
            if (arrayList2 == null || encryptedChat == null || arrayList2.isEmpty()) {
                nativeByteBuffer = null;
            } else {
                nativeByteBuffer = null;
                getSecretChatHelper().sendMessagesDeleteMessage(encryptedChat, arrayList2, null);
            }
            if (tLObject instanceof TLRPC.TL_messages_deleteMessages) {
                tLObject2 = (TLRPC.TL_messages_deleteMessages) tLObject;
                createPendingTask = j2;
            } else {
                TLRPC.TL_messages_deleteMessages tL_messages_deleteMessages = new TLRPC.TL_messages_deleteMessages();
                tL_messages_deleteMessages.id = arrayList3;
                tL_messages_deleteMessages.revoke = z;
                try {
                    nativeByteBuffer2 = new NativeByteBuffer(tL_messages_deleteMessages.getObjectSize() + 12);
                } catch (Exception e7) {
                    e = e7;
                    nativeByteBuffer2 = nativeByteBuffer;
                }
                try {
                    nativeByteBuffer2.writeInt32(24);
                    nativeByteBuffer2.writeInt64(j);
                    tL_messages_deleteMessages.serializeToStream(nativeByteBuffer2);
                } catch (Exception e8) {
                    e = e8;
                    FileLog.e(e);
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    tLObject2 = tL_messages_deleteMessages;
                    connectionsManager = getConnectionsManager();
                    requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda327
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$deleteMessages$121(createPendingTask, tLObject3, tL_error);
                        }
                    };
                    connectionsManager.sendRequest(tLObject2, requestDelegate);
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                tLObject2 = tL_messages_deleteMessages;
            }
            connectionsManager = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda327
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject3, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$deleteMessages$121(createPendingTask, tLObject3, tL_error);
                }
            };
        }
        connectionsManager.sendRequest(tLObject2, requestDelegate);
    }

    protected void deleteMessagesByPush(final long j, final ArrayList<Integer> arrayList, final long j2) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda440
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$348(arrayList, j2, j);
            }
        });
    }

    public void deleteMessagesRange(final long j, final long j2, final int i, final int i2, final boolean z, final Runnable runnable) {
        TLRPC.TL_messages_deleteHistory tL_messages_deleteHistory = new TLRPC.TL_messages_deleteHistory();
        tL_messages_deleteHistory.peer = getInputPeer(j);
        tL_messages_deleteHistory.flags = 12;
        tL_messages_deleteHistory.min_date = i;
        tL_messages_deleteHistory.max_date = i2;
        tL_messages_deleteHistory.revoke = z;
        getConnectionsManager().sendRequest(tL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda454
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteMessagesRange$420(j, i, i2, j2, z, runnable, tLObject, tL_error);
            }
        });
    }

    public void deleteParticipantFromChat(long j, TLRPC.InputPeer inputPeer) {
        deleteParticipantFromChat(j, inputPeer, false, false);
    }

    public void deleteParticipantFromChat(long j, TLRPC.InputPeer inputPeer, boolean z, boolean z2) {
        deleteParticipantFromChat(j, inputPeer, z, z2, (Runnable) null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void deleteParticipantFromChat(final long j, TLRPC.InputPeer inputPeer, boolean z, boolean z2, final Runnable runnable) {
        TLRPC.TL_messages_deleteChatUser tL_messages_deleteChatUser;
        TLRPC.TL_messages_deleteChatUser tL_messages_deleteChatUser2;
        if (inputPeer == null) {
            return;
        }
        TLRPC.Chat chat = getChat(Long.valueOf(j));
        boolean z3 = (inputPeer instanceof TLRPC.TL_inputPeerUser) && UserObject.isUserSelf(getMessagesController().getUser(Long.valueOf(inputPeer.user_id)));
        final boolean isChannel = ChatObject.isChannel(chat);
        if (isChannel) {
            if (z3) {
                if (chat.creator && z) {
                    TLRPC.TL_channels_deleteChannel tL_channels_deleteChannel = new TLRPC.TL_channels_deleteChannel();
                    tL_channels_deleteChannel.channel = getInputChannel(chat);
                    tL_messages_deleteChatUser2 = tL_channels_deleteChannel;
                } else {
                    TLRPC.TL_channels_leaveChannel tL_channels_leaveChannel = new TLRPC.TL_channels_leaveChannel();
                    tL_channels_leaveChannel.channel = getInputChannel(chat);
                    tL_messages_deleteChatUser2 = tL_channels_leaveChannel;
                }
                tL_messages_deleteChatUser = tL_messages_deleteChatUser2;
            } else {
                TLRPC.TL_channels_editBanned tL_channels_editBanned = new TLRPC.TL_channels_editBanned();
                tL_channels_editBanned.channel = getInputChannel(chat);
                tL_channels_editBanned.participant = inputPeer;
                TLRPC.TL_chatBannedRights tL_chatBannedRights = new TLRPC.TL_chatBannedRights();
                tL_channels_editBanned.banned_rights = tL_chatBannedRights;
                tL_chatBannedRights.view_messages = true;
                tL_chatBannedRights.send_media = true;
                tL_chatBannedRights.send_messages = true;
                tL_chatBannedRights.send_stickers = true;
                tL_chatBannedRights.send_gifs = true;
                tL_chatBannedRights.send_games = true;
                tL_chatBannedRights.send_inline = true;
                tL_chatBannedRights.embed_links = true;
                tL_chatBannedRights.pin_messages = true;
                tL_chatBannedRights.send_polls = true;
                tL_chatBannedRights.invite_users = true;
                tL_chatBannedRights.change_info = true;
                tL_messages_deleteChatUser = tL_channels_editBanned;
            }
        } else if (z) {
            TLRPC.TL_messages_deleteChat tL_messages_deleteChat = new TLRPC.TL_messages_deleteChat();
            tL_messages_deleteChat.chat_id = j;
            getConnectionsManager().sendRequest(tL_messages_deleteChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda133
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$deleteParticipantFromChat$289(tLObject, tL_error);
                }
            });
            return;
        } else {
            TLRPC.TL_messages_deleteChatUser tL_messages_deleteChatUser3 = new TLRPC.TL_messages_deleteChatUser();
            tL_messages_deleteChatUser3.chat_id = j;
            tL_messages_deleteChatUser3.user_id = getInputUser(inputPeer);
            tL_messages_deleteChatUser3.revoke_history = true;
            tL_messages_deleteChatUser = tL_messages_deleteChatUser3;
        }
        if (z3) {
            deleteDialog(-j, 0, z2);
        }
        final boolean z4 = z3;
        getConnectionsManager().sendRequest(tL_messages_deleteChatUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda134
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteParticipantFromChat$291(isChannel, z4, j, runnable, tLObject, tL_error);
            }
        }, 64);
    }

    public void deleteParticipantFromChat(long j, TLRPC.User user) {
        deleteParticipantFromChat(j, user, (TLRPC.Chat) null, false, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void deleteParticipantFromChat(final long j, final TLRPC.User user, TLRPC.Chat chat, boolean z, boolean z2) {
        TLRPC.TL_messages_deleteChatUser tL_messages_deleteChatUser;
        if (user == null && chat == null) {
            return;
        }
        TLRPC.InputPeer inputPeer = user != null ? getInputPeer(user) : getInputPeer(chat);
        TLRPC.Chat chat2 = getChat(Long.valueOf(j));
        final boolean isChannel = ChatObject.isChannel(chat2);
        if (isChannel) {
            if (!UserObject.isUserSelf(user)) {
                TLRPC.TL_channels_editBanned tL_channels_editBanned = new TLRPC.TL_channels_editBanned();
                tL_channels_editBanned.channel = getInputChannel(chat2);
                tL_channels_editBanned.participant = inputPeer;
                TLRPC.TL_chatBannedRights tL_chatBannedRights = new TLRPC.TL_chatBannedRights();
                tL_channels_editBanned.banned_rights = tL_chatBannedRights;
                tL_chatBannedRights.view_messages = true;
                tL_chatBannedRights.send_media = true;
                tL_chatBannedRights.send_messages = true;
                tL_chatBannedRights.send_stickers = true;
                tL_chatBannedRights.send_gifs = true;
                tL_chatBannedRights.send_games = true;
                tL_chatBannedRights.send_inline = true;
                tL_chatBannedRights.embed_links = true;
                tL_chatBannedRights.pin_messages = true;
                tL_chatBannedRights.send_polls = true;
                tL_chatBannedRights.invite_users = true;
                tL_chatBannedRights.change_info = true;
                tL_messages_deleteChatUser = tL_channels_editBanned;
            } else if (chat2.creator && z) {
                TLRPC.TL_channels_deleteChannel tL_channels_deleteChannel = new TLRPC.TL_channels_deleteChannel();
                tL_channels_deleteChannel.channel = getInputChannel(chat2);
                tL_messages_deleteChatUser = tL_channels_deleteChannel;
            } else {
                TLRPC.TL_channels_leaveChannel tL_channels_leaveChannel = new TLRPC.TL_channels_leaveChannel();
                tL_channels_leaveChannel.channel = getInputChannel(chat2);
                tL_messages_deleteChatUser = tL_channels_leaveChannel;
            }
        } else if (z) {
            TLRPC.TL_messages_deleteChat tL_messages_deleteChat = new TLRPC.TL_messages_deleteChat();
            tL_messages_deleteChat.chat_id = j;
            getConnectionsManager().sendRequest(tL_messages_deleteChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda21
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$deleteParticipantFromChat$292(tLObject, tL_error);
                }
            });
            return;
        } else {
            TLRPC.TL_messages_deleteChatUser tL_messages_deleteChatUser2 = new TLRPC.TL_messages_deleteChatUser();
            tL_messages_deleteChatUser2.chat_id = j;
            tL_messages_deleteChatUser2.user_id = getInputUser(user);
            tL_messages_deleteChatUser2.revoke_history = true;
            tL_messages_deleteChatUser = tL_messages_deleteChatUser2;
        }
        if (UserObject.isUserSelf(user)) {
            deleteDialog(-j, 0, z2);
        }
        getConnectionsManager().sendRequest(tL_messages_deleteChatUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda22
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteParticipantFromChat$294(isChannel, user, j, tLObject, tL_error);
            }
        }, 64);
    }

    public void deleteSavedDialog(long j) {
        deleteSavedDialog(j, 0);
    }

    protected void deleteSavedDialog(final long j, final int i) {
        final int[] iArr = {i};
        final Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda49
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteSavedDialog$135(j, i, iArr);
            }
        };
        if (iArr[0] <= 0) {
            getMessagesStorage().getSavedDialogMaxMessageId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda50
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i2) {
                    MessagesController.lambda$deleteSavedDialog$136(iArr, runnable, i2);
                }
            });
        } else {
            runnable.run();
        }
    }

    public void deleteUserChannelHistory(final TLRPC.Chat chat, final TLRPC.User user, final TLRPC.Chat chat2, int i) {
        long j = user != null ? user.id : chat2 != null ? chat2.id : 0L;
        if (i == 0) {
            getMessagesStorage().deleteUserChatHistory(-chat.id, j);
        }
        TLRPC.TL_channels_deleteParticipantHistory tL_channels_deleteParticipantHistory = new TLRPC.TL_channels_deleteParticipantHistory();
        tL_channels_deleteParticipantHistory.channel = getInputChannel(chat);
        tL_channels_deleteParticipantHistory.participant = user != null ? getInputPeer(user) : getInputPeer(chat2);
        getConnectionsManager().sendRequest(tL_channels_deleteParticipantHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda464
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$124(chat, user, chat2, tLObject, tL_error);
            }
        });
    }

    public void deleteUserPhoto(TLRPC.InputPhoto inputPhoto) {
        TLRPC.Photo photo;
        final long clientUserId = getUserConfig().getClientUserId();
        if (inputPhoto != null) {
            TLRPC.TL_photos_deletePhotos tL_photos_deletePhotos = new TLRPC.TL_photos_deletePhotos();
            tL_photos_deletePhotos.id.add(inputPhoto);
            getDialogPhotos(clientUserId).removePhoto(inputPhoto.id);
            getConnectionsManager().sendRequest(tL_photos_deletePhotos, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda153
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$deleteUserPhoto$111(tLObject, tL_error);
                }
            });
            return;
        }
        DialogPhotos dialogPhotos = getDialogPhotos(clientUserId);
        if (dialogPhotos != null && dialogPhotos.photos.size() > 0 && (photo = dialogPhotos.photos.get(0)) != null) {
            dialogPhotos.removePhoto(photo.id);
        }
        TLRPC.TL_photos_updateProfilePhoto tL_photos_updateProfilePhoto = new TLRPC.TL_photos_updateProfilePhoto();
        tL_photos_updateProfilePhoto.id = new TLRPC.TL_inputPhotoEmpty();
        TLRPC.User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
        if (user == null) {
            user = getUserConfig().getCurrentUser();
        }
        if (user == null) {
            return;
        }
        if (user.photo != null) {
            getMessagesStorage().clearUserPhoto(user.id, user.photo.photo_id);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
        getConnectionsManager().sendRequest(tL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda152
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteUserPhoto$110(clientUserId, tLObject, tL_error);
            }
        });
    }

    public void didAddedNewTask(final int i, final long j, final SparseArray<ArrayList<Integer>> sparseArray) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda456
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$75(i);
            }
        });
        if (sparseArray != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda457
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didAddedNewTask$76(j, sparseArray);
                }
            });
        }
    }

    public boolean didPressTranscribeButtonEnough() {
        return this.transcribeButtonPressed >= 2;
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        TLRPC.InputFile inputFile;
        final Theme.ThemeInfo themeInfo;
        TLRPC.InputFile inputFile2;
        final Theme.ThemeAccent themeAccent;
        TLRPC.TL_theme tL_theme;
        TLRPC.TL_inputThemeSettings tL_inputThemeSettings = null;
        if (i == NotificationCenter.fileUploaded) {
            String str = (String) objArr[0];
            TLRPC.InputFile inputFile3 = (TLRPC.InputFile) objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 == null || !str2.equals(str)) {
                String str3 = this.uploadingWallpaper;
                if (str3 == null || !str3.equals(str)) {
                    Object obj = this.uploadingThemes.get(str);
                    if (obj instanceof Theme.ThemeInfo) {
                        themeInfo = (Theme.ThemeInfo) obj;
                        if (str.equals(themeInfo.uploadingThumb)) {
                            themeInfo.uploadedThumb = inputFile3;
                            themeInfo.uploadingThumb = null;
                        } else if (str.equals(themeInfo.uploadingFile)) {
                            themeInfo.uploadedFile = inputFile3;
                            themeInfo.uploadingFile = null;
                        }
                        inputFile = themeInfo.uploadedThumb;
                        inputFile2 = themeInfo.uploadedFile;
                        themeAccent = null;
                    } else if (obj instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                        if (str.equals(themeAccent2.uploadingThumb)) {
                            themeAccent2.uploadedThumb = inputFile3;
                            themeAccent2.uploadingThumb = null;
                        } else if (str.equals(themeAccent2.uploadingFile)) {
                            themeAccent2.uploadedFile = inputFile3;
                            themeAccent2.uploadingFile = null;
                        }
                        Theme.ThemeInfo themeInfo2 = themeAccent2.parentTheme;
                        TLRPC.InputFile inputFile4 = themeAccent2.uploadedThumb;
                        TLRPC.InputFile inputFile5 = themeAccent2.uploadedFile;
                        themeInfo = themeInfo2;
                        inputFile = inputFile4;
                        inputFile2 = inputFile5;
                        themeAccent = themeAccent2;
                    } else {
                        inputFile = null;
                        themeInfo = null;
                        inputFile2 = null;
                        themeAccent = null;
                    }
                    this.uploadingThemes.remove(str);
                    if (inputFile2 != null && inputFile != null) {
                        new File(str);
                        TLRPC.TL_account_uploadTheme tL_account_uploadTheme = new TLRPC.TL_account_uploadTheme();
                        tL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
                        tL_account_uploadTheme.file_name = "theme.attheme";
                        tL_account_uploadTheme.file = inputFile2;
                        inputFile2.name = "theme.attheme";
                        tL_account_uploadTheme.thumb = inputFile;
                        inputFile.name = "theme-preview.jpg";
                        tL_account_uploadTheme.flags |= 1;
                        if (themeAccent != null) {
                            themeAccent.uploadedFile = null;
                            themeAccent.uploadedThumb = null;
                            tL_theme = themeAccent.info;
                            tL_inputThemeSettings = new TLRPC.TL_inputThemeSettings();
                            tL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                            tL_inputThemeSettings.accent_color = themeAccent.accentColor;
                            int i3 = themeAccent.accentColor2;
                            if (i3 != 0) {
                                tL_inputThemeSettings.flags |= 8;
                                tL_inputThemeSettings.outbox_accent_color = i3;
                            }
                            int i4 = themeAccent.myMessagesAccentColor;
                            if (i4 != 0) {
                                tL_inputThemeSettings.message_colors.add(Integer.valueOf(i4));
                                tL_inputThemeSettings.flags |= 1;
                                int i5 = themeAccent.myMessagesGradientAccentColor1;
                                if (i5 != 0) {
                                    tL_inputThemeSettings.message_colors.add(Integer.valueOf(i5));
                                    int i6 = themeAccent.myMessagesGradientAccentColor2;
                                    if (i6 != 0) {
                                        tL_inputThemeSettings.message_colors.add(Integer.valueOf(i6));
                                        int i7 = themeAccent.myMessagesGradientAccentColor3;
                                        if (i7 != 0) {
                                            tL_inputThemeSettings.message_colors.add(Integer.valueOf(i7));
                                        }
                                    }
                                }
                                tL_inputThemeSettings.message_colors_animated = themeAccent.myMessagesAnimated;
                            }
                            tL_inputThemeSettings.flags |= 2;
                            tL_inputThemeSettings.wallpaper_settings = new TLRPC.TL_wallPaperSettings();
                            if (TextUtils.isEmpty(themeAccent.patternSlug)) {
                                TLRPC.TL_inputWallPaperNoFile tL_inputWallPaperNoFile = new TLRPC.TL_inputWallPaperNoFile();
                                tL_inputWallPaperNoFile.id = 0L;
                                tL_inputThemeSettings.wallpaper = tL_inputWallPaperNoFile;
                            } else {
                                TLRPC.TL_inputWallPaperSlug tL_inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
                                tL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                                tL_inputThemeSettings.wallpaper = tL_inputWallPaperSlug;
                                TLRPC.WallPaperSettings wallPaperSettings = tL_inputThemeSettings.wallpaper_settings;
                                wallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                                wallPaperSettings.flags |= 8;
                            }
                            TLRPC.WallPaperSettings wallPaperSettings2 = tL_inputThemeSettings.wallpaper_settings;
                            wallPaperSettings2.motion = themeAccent.patternMotion;
                            long j = themeAccent.backgroundOverrideColor;
                            if (j != 0) {
                                wallPaperSettings2.background_color = (int) j;
                                wallPaperSettings2.flags |= 1;
                            }
                            long j2 = themeAccent.backgroundGradientOverrideColor1;
                            if (j2 != 0) {
                                wallPaperSettings2.second_background_color = (int) j2;
                                wallPaperSettings2.flags |= 16;
                                wallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                            }
                            long j3 = themeAccent.backgroundGradientOverrideColor2;
                            if (j3 != 0) {
                                TLRPC.WallPaperSettings wallPaperSettings3 = tL_inputThemeSettings.wallpaper_settings;
                                wallPaperSettings3.third_background_color = (int) j3;
                                wallPaperSettings3.flags |= 32;
                            }
                            long j4 = themeAccent.backgroundGradientOverrideColor3;
                            if (j4 != 0) {
                                TLRPC.WallPaperSettings wallPaperSettings4 = tL_inputThemeSettings.wallpaper_settings;
                                wallPaperSettings4.fourth_background_color = (int) j4;
                                wallPaperSettings4.flags |= 64;
                            }
                        } else {
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            tL_theme = themeInfo.info;
                        }
                        final TLRPC.TL_theme tL_theme2 = tL_theme;
                        final TLRPC.TL_inputThemeSettings tL_inputThemeSettings2 = tL_inputThemeSettings;
                        getConnectionsManager().sendRequest(tL_account_uploadTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda399
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$didReceivedNotification$46(tL_theme2, themeInfo, tL_inputThemeSettings2, themeAccent, tLObject, tL_error);
                            }
                        });
                    }
                } else {
                    TLRPC.TL_account_uploadWallPaper tL_account_uploadWallPaper = new TLRPC.TL_account_uploadWallPaper();
                    tL_account_uploadWallPaper.file = inputFile3;
                    tL_account_uploadWallPaper.mime_type = "image/jpeg";
                    final Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                    final String str4 = this.uploadingWallpaper;
                    final TLRPC.TL_wallPaperSettings tL_wallPaperSettings = new TLRPC.TL_wallPaperSettings();
                    tL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                    tL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                    tL_account_uploadWallPaper.settings = tL_wallPaperSettings;
                    Theme.OverrideWallpaperInfo overrideWallpaperInfo2 = this.uploadingWallpaperInfo;
                    overrideWallpaperInfo2.uploadingProgress = 1.0f;
                    overrideWallpaperInfo2.requestIds = new ArrayList();
                    this.uploadingWallpaperInfo.requestIds.add(Integer.valueOf(getConnectionsManager().sendRequest(tL_account_uploadWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda398
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$didReceivedNotification$40(overrideWallpaperInfo, tL_wallPaperSettings, str4, tLObject, tL_error);
                        }
                    })));
                }
            } else {
                TLRPC.TL_photos_uploadProfilePhoto tL_photos_uploadProfilePhoto = new TLRPC.TL_photos_uploadProfilePhoto();
                tL_photos_uploadProfilePhoto.file = inputFile3;
                tL_photos_uploadProfilePhoto.flags |= 1;
                getConnectionsManager().sendRequest(tL_photos_uploadProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda397
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$didReceivedNotification$38(tLObject, tL_error);
                    }
                });
            }
        } else if (i == NotificationCenter.fileUploadFailed) {
            String str5 = (String) objArr[0];
            String str6 = this.uploadingAvatar;
            if (str6 == null || !str6.equals(str5)) {
                String str7 = this.uploadingWallpaper;
                if (str7 == null || !str7.equals(str5)) {
                    Object remove = this.uploadingThemes.remove(str5);
                    if (remove instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                        themeInfo3.uploadedFile = null;
                        themeInfo3.uploadedThumb = null;
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo3, null);
                    } else if (remove instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                        themeAccent3.uploadingThumb = null;
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
                    }
                } else {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                }
            } else {
                this.uploadingAvatar = null;
            }
        }
        if (i == NotificationCenter.fileUploadProgressChanged) {
            String str8 = (String) objArr[0];
            String str9 = this.uploadingWallpaper;
            if (str9 == null || !str9.equals(str8)) {
                return;
            }
            this.uploadingWallpaperInfo.uploadingProgress = ((Long) objArr[1]).longValue() / ((Long) objArr[2]).longValue();
            return;
        }
        if (i != NotificationCenter.messageReceivedByServer) {
            if (i != NotificationCenter.updateMessageMedia) {
                if (i == NotificationCenter.currentUserPremiumStatusChanged) {
                    loadAppConfig(false);
                    getContactsController().reloadContactsStatusesMaybe(true);
                    if ((!this.storyQualityFull || getUserConfig().isPremium()) && !getUserConfig().isPremium()) {
                        return;
                    }
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storyQualityUpdate, new Object[0]);
                    return;
                }
                return;
            }
            TLRPC.Message message = (TLRPC.Message) objArr[0];
            if (message.peer_id.channel_id != 0 || (messageObject = this.dialogMessagesByIds.get(message.id)) == null) {
                return;
            }
            messageObject.messageOwner.media = MessageObject.getMedia(message);
            if (MessageObject.getMedia(message).ttl_seconds != 0) {
                if ((MessageObject.getMedia(message).photo instanceof TLRPC.TL_photoEmpty) || (MessageObject.getMedia(message).document instanceof TLRPC.TL_documentEmpty)) {
                    messageObject.setType();
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                    return;
                }
                return;
            }
            return;
        }
        if (((Boolean) objArr[6]).booleanValue()) {
            return;
        }
        Integer num = (Integer) objArr[0];
        Integer num2 = (Integer) objArr[1];
        Long l = (Long) objArr[3];
        ArrayList arrayList = (ArrayList) this.dialogMessage.get(l.longValue());
        for (int i8 = 0; arrayList != null && i8 < arrayList.size(); i8++) {
            MessageObject messageObject2 = (MessageObject) arrayList.get(i8);
            if (messageObject2 != null && (messageObject2.getId() == num.intValue() || messageObject2.messageOwner.local_id == num.intValue())) {
                messageObject2.messageOwner.id = num2.intValue();
                messageObject2.messageOwner.send_state = 0;
            }
            MessageObject messageObject3 = this.dialogMessagesByIds.get(num.intValue());
            if (messageObject3 != null) {
                this.dialogMessagesByIds.remove(num.intValue());
                this.dialogMessagesByIds.put(num2.intValue(), messageObject3);
            }
        }
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(l.longValue());
        if (dialog != null && dialog.top_message == num.intValue()) {
            dialog.top_message = num2.intValue();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        if (DialogObject.isChatDialog(l.longValue())) {
            TLRPC.ChatFull chatFull = (TLRPC.ChatFull) this.fullChats.get(-l.longValue());
            TLRPC.Chat chat = getChat(Long.valueOf(-l.longValue()));
            if (chat == null || ChatObject.hasAdminRights(chat) || chatFull == null || chatFull.slowmode_seconds == 0) {
                return;
            }
            chatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + chatFull.slowmode_seconds;
            chatFull.flags |= 262144;
            getMessagesStorage().updateChatInfo(chatFull, false);
        }
    }

    public void disableAds(boolean z) {
        TLRPC.UserFull userFull = getUserFull(getUserConfig().getClientUserId());
        if (userFull == null) {
            return;
        }
        userFull.sponsored_enabled = false;
        getMessagesStorage().updateUserInfo(userFull, false);
        if (z) {
            TLRPC.TL_account_toggleSponsoredMessages tL_account_toggleSponsoredMessages = new TLRPC.TL_account_toggleSponsoredMessages();
            tL_account_toggleSponsoredMessages.enabled = false;
            getConnectionsManager().sendRequest(tL_account_toggleSponsoredMessages, null);
        }
    }

    /* renamed from: doDeleteShowOnceTask, reason: merged with bridge method [inline-methods] */
    public void lambda$checkDeletingTask$78(long j, long j2, int i) {
        getMessagesStorage().removePendingTask(j);
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(Integer.valueOf(i));
        getMessagesStorage().emptyMessagesMedia(j2, arrayList);
    }

    public TLRPC.TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(makeFolderDialogId);
        if (dialog instanceof TLRPC.TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC.TL_dialogFolder) dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC.TL_dialogFolder tL_dialogFolder = new TLRPC.TL_dialogFolder();
        tL_dialogFolder.id = makeFolderDialogId;
        tL_dialogFolder.peer = new TLRPC.TL_peerUser();
        TLRPC.TL_folder tL_folder = new TLRPC.TL_folder();
        tL_dialogFolder.folder = tL_folder;
        tL_folder.id = i;
        tL_folder.title = LocaleController.getString(R.string.ArchivedChats);
        tL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC.Dialog dialog2 = this.allDialogs.get(i3);
            if (!dialog2.pinned) {
                if (dialog2.id != this.promoDialogId) {
                    break;
                }
            } else {
                i2 = Math.max(dialog2.pinnedNum, i2);
            }
        }
        tL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC.TL_messages_dialogs tL_messages_dialogs = new TLRPC.TL_messages_dialogs();
        tL_messages_dialogs.dialogs.add(tL_dialogFolder);
        getMessagesStorage().putDialogs(tL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tL_dialogFolder);
        this.allDialogs.add(0, tL_dialogFolder);
        return tL_dialogFolder;
    }

    public Runnable ensureMessagesLoaded(final long j, int i, final MessagesLoadedCallback messagesLoadedCallback) {
        int i2;
        int i3;
        Timer timer;
        long j2;
        long j3;
        boolean z;
        int i4;
        boolean z2;
        int i5;
        int i6;
        int i7;
        int i8;
        long j4;
        int i9;
        int i10;
        int i11;
        int i12;
        boolean z3;
        int i13;
        boolean z4;
        boolean z5;
        boolean z6;
        MessagesController messagesController;
        long j5;
        int i14;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j, 0);
        } else {
            i2 = i;
        }
        final int generateClassGuid = ConnectionsManager.generateClassGuid();
        final long j6 = DialogObject.isChatDialog(j) ? -j : 0L;
        if (j6 != 0 && getMessagesController().getChat(Long.valueOf(j6)) == null) {
            final boolean[] zArr = new boolean[1];
            final Runnable[] runnableArr = new Runnable[1];
            final MessagesStorage messagesStorage = getMessagesStorage();
            final int i15 = i2;
            messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda331
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$ensureMessagesLoaded$414(zArr, messagesStorage, j6, runnableArr, j, i15, messagesLoadedCallback);
                }
            });
            return new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda332
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$ensureMessagesLoaded$415(zArr, runnableArr);
                }
            };
        }
        int i16 = AndroidUtilities.isTablet() ? 30 : 20;
        final int i17 = i16;
        final int i18 = i2;
        NotificationCenter.NotificationCenterDelegate notificationCenterDelegate = new NotificationCenter.NotificationCenterDelegate() { // from class: org.telegram.messenger.MessagesController.3
            @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
            public void didReceivedNotification(int i19, int i20, Object... objArr) {
                int i21 = NotificationCenter.messagesDidLoadWithoutProcess;
                if (i19 != i21 || ((Integer) objArr[0]).intValue() != generateClassGuid) {
                    int i22 = NotificationCenter.loadingMessagesFailed;
                    if (i19 == i22 && ((Integer) objArr[0]).intValue() == generateClassGuid) {
                        MessagesController.this.getNotificationCenter().removeObserver(this, i21);
                        MessagesController.this.getNotificationCenter().removeObserver(this, i22);
                        MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
                        if (messagesLoadedCallback2 != null) {
                            messagesLoadedCallback2.onError();
                            return;
                        }
                        return;
                    }
                    return;
                }
                int intValue = ((Integer) objArr[1]).intValue();
                boolean booleanValue = ((Boolean) objArr[2]).booleanValue();
                boolean booleanValue2 = ((Boolean) objArr[3]).booleanValue();
                int intValue2 = ((Integer) objArr[4]).intValue();
                int i23 = i17;
                if (intValue < i23 / 2 && !booleanValue2 && booleanValue) {
                    int i24 = i18;
                    MessagesController.this.loadMessagesInternal(j, 0L, false, i23, i24, 0, false, 0, generateClassGuid, i24 != 0 ? 3 : 2, intValue2, 0, 0L, -1, 0, 0, 0, false, 0, true, false, false, null, 0L);
                    return;
                }
                MessagesController.this.getNotificationCenter().removeObserver(this, i21);
                MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                MessagesLoadedCallback messagesLoadedCallback3 = messagesLoadedCallback;
                if (messagesLoadedCallback3 != null) {
                    messagesLoadedCallback3.onMessagesLoaded(booleanValue);
                }
            }
        };
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.messagesDidLoadWithoutProcess);
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.loadingMessagesFailed);
        if (i2 != 0) {
            timer = null;
            j2 = 0;
            j3 = 0;
            z = true;
            i4 = 0;
            z2 = true;
            i5 = 0;
            i6 = 3;
            i7 = 0;
            i8 = 0;
            j4 = 0;
            i9 = -1;
            i10 = 0;
            i11 = 0;
            i12 = 0;
            z3 = false;
            i13 = 0;
            z4 = true;
            z5 = false;
            z6 = false;
            messagesController = this;
            j5 = j;
            i14 = i16;
            i3 = generateClassGuid;
        } else {
            i3 = generateClassGuid;
            timer = null;
            j2 = 0;
            j3 = 0;
            z = true;
            i4 = 0;
            z2 = true;
            i5 = 0;
            i6 = 2;
            i7 = 0;
            i8 = 0;
            j4 = 0;
            i9 = -1;
            i10 = 0;
            i11 = 0;
            i12 = 0;
            z3 = false;
            i13 = 0;
            z4 = true;
            z5 = false;
            z6 = false;
            messagesController = this;
            j5 = j;
            i14 = i16;
        }
        messagesController.loadMessagesInternal(j5, j3, z, i14, i2, i4, z2, i5, i3, i6, i7, i8, j4, i9, i10, i11, i12, z3, i13, z4, z5, z6, timer, j2);
        final int i19 = i3;
        return new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda333
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$ensureMessagesLoaded$416(i19);
            }
        };
    }

    public ArrayList<TLRPC.TL_messages_stickerSet> filterPremiumStickers(ArrayList<TLRPC.TL_messages_stickerSet> arrayList) {
        if (!premiumFeaturesBlocked()) {
            return arrayList;
        }
        int i = 0;
        while (i < arrayList.size()) {
            TLRPC.TL_messages_stickerSet filterPremiumStickers = getInstance(this.currentAccount).filterPremiumStickers(arrayList.get(i));
            if (filterPremiumStickers == null) {
                arrayList.remove(i);
                i--;
            } else {
                arrayList.set(i, filterPremiumStickers);
            }
            i++;
        }
        return arrayList;
    }

    public TLRPC.TL_messages_stickerSet filterPremiumStickers(TLRPC.TL_messages_stickerSet tL_messages_stickerSet) {
        TLRPC.TL_messages_stickerSet tL_messages_stickerSet2;
        Exception e;
        if (!premiumFeaturesBlocked() || tL_messages_stickerSet == null) {
            return tL_messages_stickerSet;
        }
        int i = 0;
        for (int i2 = 0; i2 < tL_messages_stickerSet.documents.size(); i2++) {
            try {
            } catch (Exception e2) {
                tL_messages_stickerSet2 = tL_messages_stickerSet;
                e = e2;
            }
            if (MessageObject.isPremiumSticker(tL_messages_stickerSet.documents.get(i2))) {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tL_messages_stickerSet.getObjectSize());
                tL_messages_stickerSet.serializeToStream(nativeByteBuffer);
                nativeByteBuffer.position(0);
                tL_messages_stickerSet2 = new TLRPC.TL_messages_stickerSet();
                nativeByteBuffer.readInt32(true);
                tL_messages_stickerSet2.readParams(nativeByteBuffer, true);
                nativeByteBuffer.reuse();
                while (i < tL_messages_stickerSet2.documents.size()) {
                    try {
                        if (MessageObject.isPremiumSticker(tL_messages_stickerSet2.documents.get(i))) {
                            tL_messages_stickerSet2.documents.remove(i);
                            tL_messages_stickerSet2.packs.remove(i);
                            i--;
                            if (tL_messages_stickerSet2.documents.isEmpty()) {
                                return null;
                            }
                        }
                        i++;
                    } catch (Exception e3) {
                        e = e3;
                        e.printStackTrace();
                        return tL_messages_stickerSet2;
                    }
                }
                return tL_messages_stickerSet2;
            }
        }
        return tL_messages_stickerSet;
    }

    public void forceNoReload(long j, int i) {
        LongSparseArray longSparseArray;
        if (i == 1) {
            longSparseArray = this.lastScheduledServerQueryTime;
        } else if (i != 0) {
            return;
        } else {
            longSparseArray = this.lastServerQueryTime;
        }
        longSparseArray.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    public void generateJoinMessage(final long j, boolean z) {
        TLRPC.Chat chat = getChat(Long.valueOf(j));
        if (chat == null || !ChatObject.isChannel(j, this.currentAccount)) {
            return;
        }
        if ((!ChatObject.isNotInChat(chat) || z) && !chat.creator) {
            TLRPC.TL_messageService tL_messageService = new TLRPC.TL_messageService();
            tL_messageService.flags = 256;
            int newMessageId = getUserConfig().getNewMessageId();
            tL_messageService.id = newMessageId;
            tL_messageService.local_id = newMessageId;
            tL_messageService.date = (!(chat instanceof TLRPC.TL_channel) || z) ? getConnectionsManager().getCurrentTime() : chat.date;
            TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
            tL_messageService.from_id = tL_peerUser;
            tL_peerUser.user_id = getUserConfig().getClientUserId();
            TLRPC.TL_peerChannel tL_peerChannel = new TLRPC.TL_peerChannel();
            tL_messageService.peer_id = tL_peerChannel;
            tL_peerChannel.channel_id = j;
            tL_messageService.dialog_id = -j;
            tL_messageService.post = true;
            TLRPC.TL_messageActionChatAddUser tL_messageActionChatAddUser = new TLRPC.TL_messageActionChatAddUser();
            tL_messageService.action = tL_messageActionChatAddUser;
            tL_messageActionChatAddUser.users.add(Long.valueOf(getUserConfig().getClientUserId()));
            getUserConfig().saveConfig(false);
            final ArrayList arrayList = new ArrayList();
            ArrayList<TLRPC.Message> arrayList2 = new ArrayList<>();
            arrayList2.add(tL_messageService);
            arrayList.add(new MessageObject(this.currentAccount, tL_messageService, true, false));
            getMessagesStorage().putMessages(arrayList2, true, true, false, 0, 0, 0L);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda205
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$generateJoinMessage$346(j, arrayList);
                }
            });
        }
    }

    public int getAboutLimit() {
        return getUserConfig().isPremium() ? this.aboutLengthLimitPremium : this.aboutLengthLimitDefault;
    }

    public ArrayList<Long> getActiveGroupCalls() {
        return new ArrayList<>(this.activeVoiceChatsMap.keySet());
    }

    public TLRPC.ChannelParticipant getAdminInChannel(long j, long j2) {
        LongSparseArray longSparseArray = (LongSparseArray) this.channelAdmins.get(j2);
        if (longSparseArray == null) {
            return null;
        }
        return (TLRPC.ChannelParticipant) longSparseArray.get(j);
    }

    public String getAdminRank(long j, long j2) {
        TLRPC.ChannelParticipant channelParticipant;
        if (j == j2) {
            return "";
        }
        LongSparseArray longSparseArray = (LongSparseArray) this.channelAdmins.get(j);
        if (longSparseArray == null || (channelParticipant = (TLRPC.ChannelParticipant) longSparseArray.get(j2)) == null) {
            return null;
        }
        String str = channelParticipant.rank;
        return str != null ? str : "";
    }

    public ArrayList<TLRPC.Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public int getAllFoldersDialogsCount() {
        int i = 0;
        for (int i2 = 0; i2 < this.dialogsByFolder.size(); i2++) {
            SparseArray<ArrayList<TLRPC.Dialog>> sparseArray = this.dialogsByFolder;
            ArrayList<TLRPC.Dialog> arrayList = sparseArray.get(sparseArray.keyAt(i2));
            if (arrayList != null) {
                i += arrayList.size();
            }
        }
        return i;
    }

    public TLRPC.messages_AvailableEffects getAvailableEffects() {
        if (!this.loadingAvailableEffects) {
            this.loadingAvailableEffects = true;
            this.effectsFetcher.fetch(this.currentAccount, 0, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda461
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$getAvailableEffects$450((TLRPC.messages_AvailableEffects) obj);
                }
            });
        }
        return this.availableEffects;
    }

    public void getBlockedPeers(final boolean z) {
        if (!getUserConfig().isClientActivated() || this.loadingBlockedPeers) {
            return;
        }
        this.loadingBlockedPeers = true;
        final TLRPC.TL_contacts_getBlocked tL_contacts_getBlocked = new TLRPC.TL_contacts_getBlocked();
        tL_contacts_getBlocked.offset = z ? 0 : this.blockePeers.size();
        tL_contacts_getBlocked.limit = z ? 20 : 100;
        getConnectionsManager().sendRequest(tL_contacts_getBlocked, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda272
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getBlockedPeers$108(z, tL_contacts_getBlocked, tLObject, tL_error);
            }
        });
    }

    public ChannelBoostsController getBoostsController() {
        ChannelBoostsController channelBoostsController = this.channelBoostsControler;
        if (channelBoostsController != null) {
            return channelBoostsController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            try {
                ChannelBoostsController channelBoostsController2 = this.channelBoostsControler;
                if (channelBoostsController2 != null) {
                    return channelBoostsController2;
                }
                ChannelBoostsController channelBoostsController3 = new ChannelBoostsController(this.currentAccount);
                this.channelBoostsControler = channelBoostsController3;
                return channelBoostsController3;
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public CacheByChatsController getCacheByChatsController() {
        return this.cacheByChatsController;
    }

    public ChannelRecommendations getCachedChannelRecommendations(long j) {
        HashMap<Long, ChannelRecommendations> hashMap = this.cachedChannelRecommendations;
        if (hashMap == null) {
            return null;
        }
        return hashMap.get(Long.valueOf(j));
    }

    public TLRPC.TL_exportedContactToken getCachedContactToken() {
        if (this.cachedContactToken == null || r0.expires <= System.currentTimeMillis() / 1000) {
            return null;
        }
        return this.cachedContactToken;
    }

    public int getCaptionMaxLengthLimit() {
        return getUserConfig().isPremium() ? this.captionLengthLimitPremium : this.captionLengthLimitDefault;
    }

    /* JADX WARN: Removed duplicated region for block: B:29:0x00e5  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00ec  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void getChannelDifference(final long j, final int i, long j2, TLRPC.InputChannel inputChannel) {
        int i2;
        TLRPC.InputChannel inputChannel2;
        NativeByteBuffer nativeByteBuffer;
        long j3 = j2;
        if (((Boolean) this.gettingDifferenceChannels.get(j, Boolean.FALSE)).booleanValue()) {
            return;
        }
        int i3 = this.channelsPts.get(j);
        if (i != 1) {
            if (i3 == 0) {
                i3 = getMessagesStorage().getChannelPtsSync(j);
                if (i3 != 0) {
                    this.channelsPts.put(j, i3);
                }
                if (i3 == 0 && (i == 2 || i == 3)) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda317
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$getChannelDifference$313(j);
                        }
                    });
                    return;
                }
            }
            if (i3 == 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda318
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$314(j);
                    }
                });
                return;
            }
            i2 = 100;
        } else if (i3 != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda316
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$312(j);
                }
            });
            return;
        } else {
            i3 = 1;
            i2 = 1;
        }
        if (inputChannel == null) {
            TLRPC.Chat chat = getChat(Long.valueOf(j));
            if (chat == null && (chat = getMessagesStorage().getChatSync(j)) != null) {
                putChat(chat, true);
            }
            inputChannel2 = getInputChannel(chat);
        } else {
            inputChannel2 = inputChannel;
        }
        if (inputChannel2.access_hash == 0) {
            if (j3 != 0) {
                getMessagesStorage().removePendingTask(j3);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda319
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$315(j);
                }
            });
            return;
        }
        if (j3 == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(inputChannel2.getObjectSize() + 16);
            } catch (Exception e) {
                e = e;
                nativeByteBuffer = null;
            }
            try {
                nativeByteBuffer.writeInt32(25);
                nativeByteBuffer.writeInt64(j);
                nativeByteBuffer.writeInt32(i);
                inputChannel2.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                FileLog.e(e);
                j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                final long j4 = j3;
                this.gettingDifferenceChannels.put(j, Boolean.TRUE);
                TLRPC.TL_updates_getChannelDifference tL_updates_getChannelDifference = new TLRPC.TL_updates_getChannelDifference();
                tL_updates_getChannelDifference.channel = inputChannel2;
                tL_updates_getChannelDifference.filter = new TLRPC.TL_channelMessagesFilterEmpty();
                tL_updates_getChannelDifference.pts = i3;
                tL_updates_getChannelDifference.limit = i2;
                tL_updates_getChannelDifference.force = i != 3;
                if (BuildVars.LOGS_ENABLED) {
                }
                getConnectionsManager().sendRequest(tL_updates_getChannelDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda320
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$getChannelDifference$327(j, i, j4, tLObject, tL_error);
                    }
                });
            }
            j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j42 = j3;
        this.gettingDifferenceChannels.put(j, Boolean.TRUE);
        TLRPC.TL_updates_getChannelDifference tL_updates_getChannelDifference2 = new TLRPC.TL_updates_getChannelDifference();
        tL_updates_getChannelDifference2.channel = inputChannel2;
        tL_updates_getChannelDifference2.filter = new TLRPC.TL_channelMessagesFilterEmpty();
        tL_updates_getChannelDifference2.pts = i3;
        tL_updates_getChannelDifference2.limit = i2;
        tL_updates_getChannelDifference2.force = i != 3;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start getChannelDifference with pts = " + i3 + " channelId = " + j);
        }
        getConnectionsManager().sendRequest(tL_updates_getChannelDifference2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda320
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getChannelDifference$327(j, i, j42, tLObject, tL_error);
            }
        });
    }

    public void getChannelParticipant(TLRPC.Chat chat, TLRPC.User user, final Utilities.Callback<TLRPC.ChannelParticipant> callback) {
        if (chat == null || user == null) {
            if (callback != null) {
                callback.run(null);
            }
        } else {
            TLRPC.TL_channels_getParticipant tL_channels_getParticipant = new TLRPC.TL_channels_getParticipant();
            tL_channels_getParticipant.channel = getInputChannel(chat.id);
            tL_channels_getParticipant.participant = getInputPeer(user);
            getConnectionsManager().sendRequest(tL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda366
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$getChannelParticipant$426(Utilities.Callback.this, tLObject, tL_error);
                }
            });
        }
    }

    public ChannelRecommendations getChannelRecommendations(final long j) {
        ChannelRecommendations channelRecommendations;
        TLRPC.InputChannel inputChannel = getInputChannel(j);
        if (inputChannel == null && j != 0) {
            return null;
        }
        if (this.cachedChannelRecommendations == null) {
            this.cachedChannelRecommendations = new HashMap<>();
        }
        final boolean isPremium = getUserConfig().isPremium();
        if (this.cachedChannelRecommendations.containsKey(Long.valueOf(j))) {
            channelRecommendations = this.cachedChannelRecommendations.get(Long.valueOf(j));
            if (channelRecommendations != null && channelRecommendations.wasPremium == isPremium) {
                return channelRecommendations;
            }
        } else {
            channelRecommendations = null;
        }
        this.cachedChannelRecommendations.put(Long.valueOf(j), null);
        TLRPC.TL_channels_getChannelRecommendations tL_channels_getChannelRecommendations = new TLRPC.TL_channels_getChannelRecommendations();
        if (j != 0) {
            tL_channels_getChannelRecommendations.flags |= 1;
            tL_channels_getChannelRecommendations.channel = inputChannel;
        }
        getConnectionsManager().sendRequest(tL_channels_getChannelRecommendations, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda428
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getChannelRecommendations$436(isPremium, j, tLObject, tL_error);
            }
        });
        return channelRecommendations;
    }

    public TLRPC.Chat getChat(Long l) {
        return this.chats.get(l);
    }

    public TLRPC.TL_chatAdminRights getChatAdminRightsCached(TLRPC.Chat chat, TLRPC.User user) {
        TLRPC.ChatParticipants chatParticipants;
        ArrayList<TLRPC.ChatParticipant> arrayList;
        TLRPC.ChannelParticipant channelParticipant;
        if (chat != null && user != null) {
            if (UserObject.isUserSelf(user)) {
                return chat.admin_rights;
            }
            TLRPC.ChatFull chatFull = getChatFull(chat.id);
            if (chatFull != null && (chatParticipants = chatFull.participants) != null && (arrayList = chatParticipants.participants) != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC.ChatParticipant chatParticipant = arrayList.get(i);
                    if (chatParticipant != null && chatParticipant.user_id == user.id) {
                        if (!(chatParticipant instanceof TLRPC.TL_chatChannelParticipant) || (channelParticipant = ((TLRPC.TL_chatChannelParticipant) chatParticipant).channelParticipant) == null) {
                            return null;
                        }
                        return channelParticipant.admin_rights;
                    }
                }
            }
        }
        return null;
    }

    public TLRPC.ChatFull getChatFull(long j) {
        return (TLRPC.ChatFull) this.fullChats.get(j);
    }

    public int getChatMaxUniqReactions(long j) {
        TLRPC.ChatFull chatFull = getInstance(this.currentAccount).getChatFull(-j);
        return (chatFull == null || (!(chatFull instanceof TLRPC.TL_chatFull) ? (chatFull.flags2 & LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM) != 0 : (chatFull.flags & FileLoaderPriorityQueue.PRIORITY_VALUE_MAX) != 0)) ? this.reactionsUniqMax : chatFull.reactions_limit;
    }

    public int getChatPendingRequestsOnClosed(long j) {
        return this.mainPreferences.getInt("chatPendingRequests" + j, 0);
    }

    public int getChatReactionsCount() {
        if (getUserConfig().isPremium()) {
            return this.reactionsInChatMax;
        }
        return 1;
    }

    public TL_chatlists.TL_chatlists_chatlistUpdates getChatlistFolderUpdates(int i) {
        ChatlistUpdatesStat chatlistUpdatesStat = this.chatlistFoldersUpdates.get(i);
        if (chatlistUpdatesStat == null) {
            return null;
        }
        return chatlistUpdatesStat.lastValue;
    }

    public ConcurrentHashMap<Long, TLRPC.Chat> getChats() {
        return this.chats;
    }

    public TL_account.contentSettings getContentSettings() {
        return this.contentSettings;
    }

    public void getContentSettings(Utilities.Callback<TL_account.contentSettings> callback) {
        if (this.contentSettings != null && System.currentTimeMillis() - this.contentSettingsLoadedTime < 3600000) {
            if (callback != null) {
                callback.run(this.contentSettings);
                return;
            }
            return;
        }
        if (this.contentSettingsCallbacks == null) {
            this.contentSettingsCallbacks = new ArrayList<>();
        }
        if (callback != null) {
            this.contentSettingsCallbacks.add(callback);
        }
        if (this.contentSettingsLoading) {
            return;
        }
        this.contentSettingsLoading = true;
        getConnectionsManager().sendRequest(new TL_account.getContentSettings(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda145
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getContentSettings$456(tLObject, tL_error);
            }
        });
    }

    public TLRPC.Dialog getDialog(long j) {
        return (TLRPC.Dialog) this.dialogs_dict.get(j);
    }

    public ArrayList<DialogFilter> getDialogFilters() {
        ArrayList<DialogFilter> arrayList = this.frozenDialogFilters;
        return arrayList != null ? arrayList : this.dialogFilters;
    }

    public DialogPhotos getDialogPhotos(long j) {
        DialogPhotos dialogPhotos = (DialogPhotos) this.dialogPhotos.get(j);
        if (dialogPhotos != null) {
            return dialogPhotos;
        }
        LongSparseArray longSparseArray = this.dialogPhotos;
        DialogPhotos dialogPhotos2 = new DialogPhotos(j);
        longSparseArray.put(j, dialogPhotos2);
        return dialogPhotos2;
    }

    public int getDialogUnreadCount(TLRPC.Dialog dialog) {
        if (dialog == null) {
            return 0;
        }
        int i = dialog.unread_count;
        TLRPC.Chat chat = getChat(Long.valueOf(-dialog.id));
        return (chat == null || !chat.forum) ? i : this.topicsController.getForumUnreadCount(-dialog.id)[0];
    }

    public ArrayList<TLRPC.Dialog> getDialogs(int i) {
        ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, final int i2, final int i3, boolean z) {
        registerForPush(SharedConfig.pushType, SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
            return;
        }
        if (z || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC.TL_updates_getDifference tL_updates_getDifference = new TLRPC.TL_updates_getDifference();
            tL_updates_getDifference.pts = i;
            tL_updates_getDifference.date = i2;
            tL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tL_updates_getDifference.flags |= 1;
                tL_updates_getDifference.pts_total_limit = ApplicationLoader.isConnectedOrConnectingToWiFi() ? 5000 : 1000;
                this.getDifferenceFirstSync = false;
            }
            if (tL_updates_getDifference.date == 0) {
                tL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
                FileLog.d("getDifference: isUpdating = true");
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tL_updates_getDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda415
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$getDifference$337(i2, i3, tLObject, tL_error);
                }
            });
        }
    }

    public TLRPC.TL_availableEffect getEffect(long j) {
        getAvailableEffects();
        if (this.availableEffects == null) {
            return null;
        }
        for (int i = 0; i < this.availableEffects.effects.size(); i++) {
            if (this.availableEffects.effects.get(i).id == j) {
                return this.availableEffects.effects.get(i);
            }
        }
        return null;
    }

    public TLRPC.Document getEffectDocument(long j) {
        if (this.availableEffects == null) {
            return null;
        }
        for (int i = 0; i < this.availableEffects.documents.size(); i++) {
            if (this.availableEffects.documents.get(i).id == j) {
                return this.availableEffects.documents.get(i);
            }
        }
        return null;
    }

    public TLRPC.EncryptedChat getEncryptedChat(Integer num) {
        return this.encryptedChats.get(num);
    }

    public TLRPC.EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC.EncryptedChat encryptedChat = this.encryptedChats.get(Integer.valueOf(i));
        if (encryptedChat != null) {
            if (!z) {
                return encryptedChat;
            }
            if (!(encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) && !(encryptedChat instanceof TLRPC.TL_encryptedChatRequested)) {
                return encryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList<TLObject> arrayList = new ArrayList<>();
        getMessagesStorage().getEncryptedChat(i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (arrayList.size() != 2) {
            return encryptedChat;
        }
        TLRPC.EncryptedChat encryptedChat2 = (TLRPC.EncryptedChat) arrayList.get(0);
        TLRPC.User user = (TLRPC.User) arrayList.get(1);
        putEncryptedChat(encryptedChat2, false);
        putUser(user, true);
        return encryptedChat2;
    }

    public TLRPC.TL_chatInviteExported getExportedInvite(long j) {
        return (TLRPC.TL_chatInviteExported) this.exportedChats.get(j);
    }

    public int getFilterIdByDialogsType(int i) {
        if (i != 7 && i != 8) {
            return 0;
        }
        DialogFilter dialogFilter = this.selectedDialogFilter[i - 7];
        if (dialogFilter == null) {
            return -1;
        }
        return dialogFilter.id;
    }

    public String getFullName(long j) {
        if (j > 0) {
            TLRPC.User user = getUser(Long.valueOf(j));
            if (user != null) {
                return ContactsController.formatName(user.first_name, user.last_name);
            }
            return null;
        }
        TLRPC.Chat chat = getChat(Long.valueOf(-j));
        if (chat != null) {
            return chat.title;
        }
        return null;
    }

    public ChatObject.Call getGroupCall(long j, boolean z) {
        return getGroupCall(j, z, null);
    }

    public ChatObject.Call getGroupCall(final long j, boolean z, final Runnable runnable) {
        TLRPC.TL_inputGroupCall tL_inputGroupCall;
        TLRPC.ChatFull chatFull = getChatFull(j);
        if (chatFull == null || (tL_inputGroupCall = chatFull.call) == null) {
            return null;
        }
        ChatObject.Call call = (ChatObject.Call) this.groupCalls.get(tL_inputGroupCall.id);
        if (call == null && z && !this.loadingGroupCalls.contains(Long.valueOf(j))) {
            this.loadingGroupCalls.add(Long.valueOf(j));
            if (chatFull.call != null) {
                TLRPC.TL_phone_getGroupCall tL_phone_getGroupCall = new TLRPC.TL_phone_getGroupCall();
                tL_phone_getGroupCall.call = chatFull.call;
                tL_phone_getGroupCall.limit = 20;
                getConnectionsManager().sendRequest(tL_phone_getGroupCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda160
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$getGroupCall$57(j, runnable, tLObject, tL_error);
                    }
                });
            }
        }
        if (call == null || !(call.call instanceof TLRPC.TL_groupCallDiscarded)) {
            return call;
        }
        return null;
    }

    public TLRPC.InputChannel getInputChannel(long j) {
        return getInputChannel(getChat(Long.valueOf(j)));
    }

    public TLRPC.InputDocument getInputDocument(TLRPC.Document document) {
        if (document == null) {
            return null;
        }
        TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
        tL_inputDocument.id = document.id;
        tL_inputDocument.access_hash = document.access_hash;
        byte[] bArr = document.file_reference;
        tL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tL_inputDocument.file_reference = new byte[0];
        }
        return tL_inputDocument;
    }

    public TLRPC.InputPeer getInputPeer(long j) {
        TLRPC.InputPeer tL_inputPeerUser;
        long j2;
        if (j == getUserConfig().getClientUserId()) {
            return new TLRPC.TL_inputPeerSelf();
        }
        if (j >= 0) {
            TLRPC.User user = getUser(Long.valueOf(j));
            tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
            tL_inputPeerUser.user_id = j;
            if (user != null) {
                j2 = user.access_hash;
            }
            return tL_inputPeerUser;
        }
        long j3 = -j;
        TLRPC.Chat chat = getChat(Long.valueOf(j3));
        if (!ChatObject.isChannel(chat)) {
            TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
            tL_inputPeerChat.chat_id = j3;
            return tL_inputPeerChat;
        }
        tL_inputPeerUser = new TLRPC.TL_inputPeerChannel();
        tL_inputPeerUser.channel_id = j3;
        j2 = chat.access_hash;
        tL_inputPeerUser.access_hash = j2;
        return tL_inputPeerUser;
    }

    public TLRPC.InputPeer getInputPeer(TLRPC.Peer peer) {
        TLRPC.InputPeer tL_inputPeerUser;
        long j;
        if (peer instanceof TLRPC.TL_peerChat) {
            TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
            tL_inputPeerChat.chat_id = peer.chat_id;
            return tL_inputPeerChat;
        }
        if (peer instanceof TLRPC.TL_peerChannel) {
            tL_inputPeerUser = new TLRPC.TL_inputPeerChannel();
            long j2 = peer.channel_id;
            tL_inputPeerUser.channel_id = j2;
            TLRPC.Chat chat = getChat(Long.valueOf(j2));
            if (chat == null) {
                return tL_inputPeerUser;
            }
            j = chat.access_hash;
        } else {
            tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
            long j3 = peer.user_id;
            tL_inputPeerUser.user_id = j3;
            TLRPC.User user = getUser(Long.valueOf(j3));
            if (user == null) {
                return tL_inputPeerUser;
            }
            j = user.access_hash;
        }
        tL_inputPeerUser.access_hash = j;
        return tL_inputPeerUser;
    }

    public TLRPC.InputUser getInputUser(long j) {
        return getInputUser(getUser(Long.valueOf(j)));
    }

    public TLRPC.InputUser getInputUser(TLRPC.InputPeer inputPeer) {
        if (inputPeer == null) {
            return new TLRPC.TL_inputUserEmpty();
        }
        if (inputPeer instanceof TLRPC.TL_inputPeerSelf) {
            return new TLRPC.TL_inputUserSelf();
        }
        TLRPC.TL_inputUser tL_inputUser = new TLRPC.TL_inputUser();
        tL_inputUser.user_id = inputPeer.user_id;
        tL_inputUser.access_hash = inputPeer.access_hash;
        return tL_inputUser;
    }

    public TLRPC.InputUser getInputUser(TLRPC.User user) {
        if (user == null) {
            return new TLRPC.TL_inputUserEmpty();
        }
        if (user.id == getUserConfig().getClientUserId()) {
            return new TLRPC.TL_inputUserSelf();
        }
        TLRPC.TL_inputUser tL_inputUser = new TLRPC.TL_inputUser();
        tL_inputUser.user_id = user.id;
        tL_inputUser.access_hash = user.access_hash;
        return tL_inputUser;
    }

    public SharedPreferences getMainSettings() {
        return this.mainPreferences;
    }

    public int getMaxUserReactionsCount() {
        return getUserConfig().isPremium() ? this.reactionsUserMaxPremium : this.reactionsUserMaxDefault;
    }

    public String getMutedString(long j, long j2) {
        if (!getMessagesController().isDialogMuted(j, j2)) {
            return LocaleController.getString(R.string.NotificationsUnmuted);
        }
        int i = this.notificationsPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, j2), 0);
        return i >= getConnectionsManager().getCurrentTime() ? LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatTTLString(i)) : LocaleController.getString(R.string.NotificationsMuted);
    }

    public void getNewDeleteTask(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$77(longSparseArray, longSparseArray2);
            }
        });
    }

    public void getNextReactionMention(final long j, final long j2, final int i, final Consumer consumer) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda103
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNextReactionMention$5(j2, j, consumer, i);
            }
        });
    }

    public TLRPC.Peer getPeer(long j) {
        if (j >= 0) {
            TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
            tL_peerUser.user_id = j;
            return tL_peerUser;
        }
        long j2 = -j;
        TLRPC.Chat chat = getChat(Long.valueOf(j2));
        if ((chat instanceof TLRPC.TL_channel) || (chat instanceof TLRPC.TL_channelForbidden)) {
            TLRPC.TL_peerChannel tL_peerChannel = new TLRPC.TL_peerChannel();
            tL_peerChannel.channel_id = j2;
            return tL_peerChannel;
        }
        TLRPC.TL_peerChat tL_peerChat = new TLRPC.TL_peerChat();
        tL_peerChat.chat_id = j2;
        return tL_peerChat;
    }

    public String getPeerName(long j) {
        return getPeerName(j, false);
    }

    public String getPeerName(long j, boolean z) {
        if (j >= 0) {
            TLRPC.User user = getUser(Long.valueOf(j));
            return AndroidUtilities.removeDiacritics(z ? UserObject.getFirstName(user, true) : UserObject.getUserName(user));
        }
        TLRPC.Chat chat = getChat(Long.valueOf(-j));
        return AndroidUtilities.removeDiacritics(chat == null ? "" : chat.title);
    }

    public CharSequence getPrintingString(long j, long j2, boolean z) {
        LongSparseArray longSparseArray;
        TLRPC.User user;
        TLRPC.UserStatus userStatus;
        if ((!z || !DialogObject.isUserDialog(j) || (user = getUser(Long.valueOf(j))) == null || (userStatus = user.status) == null || userStatus.expires >= 0) && (longSparseArray = (LongSparseArray) this.printingStrings.get(j)) != null) {
            return (CharSequence) longSparseArray.get(j2);
        }
        return null;
    }

    public Integer getPrintingStringType(long j, long j2) {
        LongSparseArray longSparseArray = (LongSparseArray) this.printingStringsTypes.get(j);
        if (longSparseArray == null) {
            return null;
        }
        return (Integer) longSparseArray.get(j2);
    }

    public String getRestrictionReason(ArrayList<TLRPC.RestrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC.RestrictionReason restrictionReason = arrayList.get(i);
            Set<String> set = this.ignoreRestrictionReasons;
            if ((set == null || !set.contains(restrictionReason.reason)) && !"sensitive".equals(restrictionReason.reason) && ("all".equals(restrictionReason.platform) || !(ApplicationLoader.isStandaloneBuild() || BuildVars.isBetaApp() || !"android".equals(restrictionReason.platform)))) {
                return restrictionReason.text;
            }
        }
        return null;
    }

    public SavedMessagesController getSavedMessagesController() {
        SavedMessagesController savedMessagesController = this.savedMessagesController;
        if (savedMessagesController != null) {
            return savedMessagesController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            try {
                SavedMessagesController savedMessagesController2 = this.savedMessagesController;
                if (savedMessagesController2 != null) {
                    return savedMessagesController2;
                }
                SavedMessagesController savedMessagesController3 = new SavedMessagesController(this.currentAccount);
                this.savedMessagesController = savedMessagesController3;
                return savedMessagesController3;
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public TLRPC.TL_messages_savedReactionsTags getSavedReactionTags(long j) {
        return getSavedReactionTags(j, false);
    }

    public TLRPC.TL_messages_savedReactionsTags getSavedReactionTags(final long j, boolean z) {
        HashSet<Long> hashSet = this.loadingReactionTags;
        if (hashSet != null && hashSet.contains(Long.valueOf(j)) && !z) {
            LongSparseArray longSparseArray = this.reactionTags;
            if (longSparseArray == null) {
                return null;
            }
            return (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(j);
        }
        if (this.loadingReactionTags == null) {
            this.loadingReactionTags = new HashSet<>();
        }
        this.loadingReactionTags.add(Long.valueOf(j));
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda313
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$442(j);
            }
        });
        return null;
    }

    public int getSavedTagCount(long j, ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags;
        LongSparseArray longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(j)) == null) {
            return 0;
        }
        for (int i = 0; i < tL_messages_savedReactionsTags.tags.size(); i++) {
            if (visibleReaction.isSame(tL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tL_messages_savedReactionsTags.tags.get(i).count;
            }
        }
        return 0;
    }

    public String getSavedTagName(TLRPC.Reaction reaction) {
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags;
        LongSparseArray longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(0L)) == null) {
            return null;
        }
        for (int i = 0; i < tL_messages_savedReactionsTags.tags.size(); i++) {
            if (ReactionsLayoutInBubble.reactionsEqual(reaction, tL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tL_messages_savedReactionsTags.tags.get(i).title;
            }
        }
        return null;
    }

    public String getSavedTagName(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags;
        LongSparseArray longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(0L)) == null) {
            return null;
        }
        for (int i = 0; i < tL_messages_savedReactionsTags.tags.size(); i++) {
            if (visibleReaction.isSame(tL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tL_messages_savedReactionsTags.tags.get(i).title;
            }
        }
        return null;
    }

    public TLRPC.TL_channels_sendAsPeers getSendAsPeers(final long j) {
        SendAsPeersInfo sendAsPeersInfo = (SendAsPeersInfo) this.sendAsPeers.get(j);
        if (sendAsPeersInfo != null && (sendAsPeersInfo.loading || Math.abs(SystemClock.elapsedRealtime() - sendAsPeersInfo.loadTime) <= 300000)) {
            return sendAsPeersInfo.sendAsPeers;
        }
        TLRPC.Chat chat = getChat(Long.valueOf(-j));
        1 r1 = null;
        if (chat != null && ChatObject.canSendAsPeers(chat)) {
            final SendAsPeersInfo sendAsPeersInfo2 = new SendAsPeersInfo(this, r1);
            sendAsPeersInfo2.loading = true;
            this.sendAsPeers.put(j, sendAsPeersInfo2);
            TLRPC.TL_channels_getSendAs tL_channels_getSendAs = new TLRPC.TL_channels_getSendAs();
            tL_channels_getSendAs.peer = getInputPeer(j);
            getConnectionsManager().sendRequest(tL_channels_getSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda280
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$getSendAsPeers$398(j, sendAsPeersInfo2, tLObject, tL_error);
                }
            });
        }
        return null;
    }

    public TLRPC.Peer getSendAsSelectedPeer(long j) {
        TLRPC.Peer peer;
        TLRPC.ChatFull chatFull = getChatFull(-j);
        if (chatFull != null && (peer = chatFull.default_send_as) != null) {
            return peer;
        }
        TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
        tL_peerUser.user_id = getAccountInstance().getUserConfig().clientUserId;
        return tL_peerUser;
    }

    public SponsoredMessagesInfo getSponsoredMessages(final long j) {
        SponsoredMessagesInfo sponsoredMessagesInfo = (SponsoredMessagesInfo) this.sponsoredMessages.get(j);
        if (sponsoredMessagesInfo != null && (sponsoredMessagesInfo.loading || Math.abs(SystemClock.elapsedRealtime() - sponsoredMessagesInfo.loadTime) <= 300000)) {
            return sponsoredMessagesInfo;
        }
        if (j >= 0 ? !UserObject.isBot(getUser(Long.valueOf(j))) : !ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
            return null;
        }
        final SponsoredMessagesInfo sponsoredMessagesInfo2 = new SponsoredMessagesInfo();
        sponsoredMessagesInfo2.loading = true;
        this.sponsoredMessages.put(j, sponsoredMessagesInfo2);
        TLRPC.TL_messages_getSponsoredMessages tL_messages_getSponsoredMessages = new TLRPC.TL_messages_getSponsoredMessages();
        tL_messages_getSponsoredMessages.peer = getInputPeer(j);
        getConnectionsManager().sendRequest(tL_messages_getSponsoredMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda174
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$getSponsoredMessages$395(j, sponsoredMessagesInfo2, tLObject, tL_error);
            }
        });
        return null;
    }

    public StoriesController getStoriesController() {
        StoriesController storiesController = this.storiesController;
        if (storiesController != null) {
            return storiesController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            try {
                StoriesController storiesController2 = this.storiesController;
                if (storiesController2 != null) {
                    return storiesController2;
                }
                StoriesController storiesController3 = new StoriesController(this.currentAccount);
                this.storiesController = storiesController3;
                return storiesController3;
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public TopicsController getTopicsController() {
        return this.topicsController;
    }

    public int getTotalDialogsCount() {
        ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.get(0);
        if (arrayList != null) {
            return arrayList.size();
        }
        return 0;
    }

    public TranslateController getTranslateController() {
        return this.translateController;
    }

    public UnconfirmedAuthController getUnconfirmedAuthController() {
        UnconfirmedAuthController unconfirmedAuthController = this.unconfirmedAuthController;
        if (unconfirmedAuthController != null) {
            return unconfirmedAuthController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            try {
                UnconfirmedAuthController unconfirmedAuthController2 = this.unconfirmedAuthController;
                if (unconfirmedAuthController2 != null) {
                    return unconfirmedAuthController2;
                }
                UnconfirmedAuthController unconfirmedAuthController3 = new UnconfirmedAuthController(this.currentAccount);
                this.unconfirmedAuthController = unconfirmedAuthController3;
                return unconfirmedAuthController3;
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0L;
    }

    public TLRPC.User getUser(Long l) {
        return l.longValue() == 0 ? UserConfig.getInstance(this.currentAccount).getCurrentUser() : this.users.get(l);
    }

    public TLRPC.User getUser(String str) {
        TLObject userOrChat = getUserOrChat(str);
        if (userOrChat instanceof TLRPC.User) {
            return (TLRPC.User) userOrChat;
        }
        return null;
    }

    public TLRPC.UserFull getUserFull(long j) {
        return (TLRPC.UserFull) this.fullUsers.get(j);
    }

    public UserNameResolver getUserNameResolver() {
        if (this.userNameResolver == null) {
            this.userNameResolver = new UserNameResolver(this.currentAccount);
        }
        return this.userNameResolver;
    }

    public TLObject getUserOrChat(long j) {
        Map map;
        if (this.users.containsKey(Long.valueOf(j))) {
            map = this.users;
        } else {
            j = -j;
            if (!this.chats.containsKey(Long.valueOf(j))) {
                return null;
            }
            map = this.chats;
        }
        return (TLObject) map.get(Long.valueOf(j));
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(str.toLowerCase());
    }

    public ConcurrentHashMap<Long, TLRPC.User> getUsers() {
        return this.users;
    }

    public boolean hasAvailableEffects() {
        TLRPC.messages_AvailableEffects messages_availableeffects = this.availableEffects;
        return (messages_availableeffects == null || messages_availableeffects.effects.isEmpty()) ? false : true;
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public void hidePeerSettingsBar(long j, TLRPC.User user, TLRPC.Chat chat) {
        if (user == null && chat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.remove("dialog_bar_invite" + j);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        TLRPC.TL_messages_hidePeerSettingsBar tL_messages_hidePeerSettingsBar = new TLRPC.TL_messages_hidePeerSettingsBar();
        tL_messages_hidePeerSettingsBar.peer = getInputPeer(user != null ? user.id : -chat.id);
        getConnectionsManager().sendRequest(tL_messages_hidePeerSettingsBar, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda237
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$hidePeerSettingsBar$69(tLObject, tL_error);
            }
        });
    }

    public void hidePromoDialog() {
        if (this.promoDialog == null) {
            return;
        }
        TLRPC.TL_help_hidePromoData tL_help_hidePromoData = new TLRPC.TL_help_hidePromoData();
        tL_help_hidePromoData.peer = getInputPeer(this.promoDialog.id);
        getConnectionsManager().sendRequest(tL_help_hidePromoData, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda423
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$hidePromoDialog$126(tLObject, tL_error);
            }
        });
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda424
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$hidePromoDialog$127();
            }
        });
        removePromoDialog();
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC.TL_theme tL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC.TL_account_installTheme tL_account_installTheme = new TLRPC.TL_account_installTheme();
        tL_account_installTheme.dark = z;
        if (tL_theme != null) {
            tL_account_installTheme.format = "android";
            TLRPC.TL_inputTheme tL_inputTheme = new TLRPC.TL_inputTheme();
            tL_inputTheme.id = tL_theme.id;
            tL_inputTheme.access_hash = tL_theme.access_hash;
            tL_account_installTheme.theme = tL_inputTheme;
            tL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tL_account_installTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda15
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$installTheme$113(tLObject, tL_error);
            }
        });
        if (TextUtils.isEmpty(str)) {
            return;
        }
        TLRPC.TL_account_installWallPaper tL_account_installWallPaper = new TLRPC.TL_account_installWallPaper();
        TLRPC.TL_inputWallPaperSlug tL_inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
        tL_inputWallPaperSlug.slug = str;
        tL_account_installWallPaper.wallpaper = tL_inputWallPaperSlug;
        TLRPC.TL_wallPaperSettings tL_wallPaperSettings = new TLRPC.TL_wallPaperSettings();
        tL_account_installWallPaper.settings = tL_wallPaperSettings;
        tL_wallPaperSettings.blur = z2;
        tL_wallPaperSettings.motion = z3;
        getConnectionsManager().sendRequest(tL_account_installWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda16
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$installTheme$114(tLObject, tL_error);
            }
        });
    }

    public void invalidateChatlistFolderUpdate(int i) {
        this.chatlistFoldersUpdates.remove(i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatlistFolderUpdate, Integer.valueOf(i));
    }

    public void invalidateContentSettings() {
        this.contentSettings = null;
        this.contentSettingsLoadedTime = 0L;
    }

    public void invalidateUserPremiumBlocked(long j, int i) {
        if (this.loadingFullUsers.contains(Long.valueOf(j))) {
            return;
        }
        int indexOfKey = this.loadedFullUsers.indexOfKey(j);
        if (indexOfKey >= 0) {
            this.loadedFullUsers.removeAt(indexOfKey);
        }
        loadFullUser(getUser(Long.valueOf(j)), i, true);
    }

    public boolean isChannelAdminsLoaded(long j) {
        return this.channelAdmins.get(j) != null;
    }

    public boolean isChatNoForwards(long j) {
        return isChatNoForwards(getChat(Long.valueOf(j)));
    }

    public boolean isChatNoForwards(TLRPC.Chat chat) {
        TLRPC.Chat chat2;
        if (chat == null) {
            return false;
        }
        TLRPC.InputChannel inputChannel = chat.migrated_to;
        return (inputChannel == null || (chat2 = getChat(Long.valueOf(inputChannel.channel_id))) == null) ? chat.noforwards : chat2.noforwards;
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    public boolean isDialogMuted(long j, long j2) {
        return isDialogMuted(j, j2, null);
    }

    public boolean isDialogMuted(long j, long j2, TLRPC.Chat chat) {
        Boolean bool;
        int i = this.notificationsPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY + NotificationsController.getSharedPrefKey(j, j2), -1);
        boolean z = false;
        if (i == -1) {
            if (chat != null) {
                if (ChatObject.isChannel(chat) && !chat.megagroup) {
                    z = true;
                }
                bool = Boolean.valueOf(z);
            } else {
                bool = null;
            }
            return j2 != 0 ? isDialogMuted(j, 0L, chat) : !getNotificationsController().isGlobalNotificationsEnabled(j, bool, false, false);
        }
        if (i == 2) {
            return true;
        }
        if (i == 3) {
            if (this.notificationsPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, j2), 0) >= getConnectionsManager().getCurrentTime()) {
                return true;
            }
        }
        return false;
    }

    public boolean isDialogNotificationsSoundEnabled(long j, long j2) {
        return this.notificationsPreferences.getBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(j, j2), true);
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isForum(long j) {
        TLRPC.Chat chat = getChat(Long.valueOf(-j));
        return chat != null && chat.forum;
    }

    public boolean isForum(MessageObject messageObject) {
        return messageObject != null && isForum(messageObject.getDialogId());
    }

    public boolean isForum(TLRPC.Message message) {
        return message != null && isForum(MessageObject.getDialogId(message));
    }

    public boolean isHiddenByUndo(long j) {
        return !this.hiddenUndoChats.isEmpty() && this.hiddenUndoChats.contains(Long.valueOf(j));
    }

    public boolean isInChatCached(TLRPC.Chat chat, TLRPC.User user) {
        TLRPC.ChatParticipants chatParticipants;
        ArrayList<TLRPC.ChatParticipant> arrayList;
        if (chat != null && user != null) {
            if (UserObject.isUserSelf(user)) {
                return !ChatObject.isNotInChat(chat);
            }
            TLRPC.ChatFull chatFull = getChatFull(chat.id);
            if (chatFull != null && (chatParticipants = chatFull.participants) != null && (arrayList = chatParticipants.participants) != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC.ChatParticipant chatParticipant = arrayList.get(i);
                    if (chatParticipant != null && chatParticipant.user_id == user.id) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean isJoiningChannel(long j) {
        return this.joiningToChannels.contains(Long.valueOf(j));
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isPremiumUser(TLRPC.User user) {
        return (premiumFeaturesBlocked() || !user.premium || isSupportUser(user)) ? false : true;
    }

    public boolean isPromoDialog(long j, boolean z) {
        TLRPC.Dialog dialog = this.promoDialog;
        return dialog != null && dialog.id == j && (!z || this.isLeftPromoChannel);
    }

    public boolean isSensitive(ArrayList<TLRPC.RestrictionReason> arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC.RestrictionReason restrictionReason = arrayList.get(i);
                Set<String> set = this.ignoreRestrictionReasons;
                if ((set == null || !set.contains(restrictionReason.reason)) && (("all".equals(restrictionReason.platform) || !(ApplicationLoader.isStandaloneBuild() || BuildVars.isBetaApp() || !"android".equals(restrictionReason.platform))) && "sensitive".equals(restrictionReason.reason))) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean isSponsoredDisabled() {
        if (getUserFull(getUserConfig().getClientUserId()) == null) {
            return false;
        }
        return !r0.sponsored_enabled;
    }

    public boolean isStoryQualityFullOnAccount() {
        return getUserConfig().isPremium() && this.storyQualityFull;
    }

    public boolean isUserPremiumBlocked(long j) {
        return isUserPremiumBlocked(j, false);
    }

    public boolean isUserPremiumBlocked(long j, boolean z) {
        if (!getUserConfig().isPremium() && getUserConfig().getClientUserId() != j) {
            Boolean bool = (Boolean) this.cachedIsUserPremiumBlocked.get(j);
            if (bool != null) {
                return bool.booleanValue();
            }
            TLRPC.User user = getUser(Long.valueOf(j));
            if (user != null && !user.contact_require_premium) {
                return false;
            }
            TLRPC.UserFull userFull = getUserFull(j);
            if (userFull != null) {
                return userFull.contact_require_premium;
            }
            if (getInputUser(j) == null || z) {
                return false;
            }
            this.loadingIsUserPremiumBlocked.add(Long.valueOf(j));
            AndroidUtilities.cancelRunOnUIThread(this.requestIsUserPremiumBlockedRunnable);
            AndroidUtilities.runOnUIThread(this.requestIsUserPremiumBlockedRunnable, 60L);
        }
        return false;
    }

    public void loadAppConfig() {
        loadAppConfig(true);
    }

    public void loadAppConfig(boolean z) {
        AndroidUtilities.cancelRunOnUIThread(this.loadAppConfigRunnable);
        if (z) {
            this.appConfigFetcher.forceRequest(this.currentAccount, 0);
        }
        this.appConfigFetcher.fetch(this.currentAccount, 0, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda336
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                MessagesController.this.lambda$loadAppConfig$31((TLRPC.TL_help_appConfig) obj);
            }
        });
    }

    public void loadChannelAdmins(final long j, boolean z) {
        if ((SystemClock.elapsedRealtime() / 1000) - this.loadingChannelAdmins.get(j) < 60) {
            return;
        }
        this.loadingChannelAdmins.put(j, (int) (SystemClock.elapsedRealtime() / 1000));
        if (z) {
            getMessagesStorage().loadChannelAdmins(j);
            return;
        }
        TLRPC.TL_channels_getParticipants tL_channels_getParticipants = new TLRPC.TL_channels_getParticipants();
        tL_channels_getParticipants.channel = getInputChannel(j);
        tL_channels_getParticipants.limit = 100;
        tL_channels_getParticipants.filter = new TLRPC.TL_channelParticipantsAdmins();
        getConnectionsManager().sendRequest(tL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda244
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadChannelAdmins$59(j, tLObject, tL_error);
            }
        });
    }

    public void loadChannelParticipants(Long l) {
        loadChannelParticipants(l, null, 32);
    }

    public void loadChannelParticipants(final Long l, final Utilities.Callback<TLRPC.TL_channels_channelParticipants> callback, int i) {
        if (callback == null && (this.loadingFullParticipants.contains(l) || this.loadedFullParticipants.contains(l))) {
            return;
        }
        this.loadingFullParticipants.add(l);
        TLRPC.TL_channels_getParticipants tL_channels_getParticipants = new TLRPC.TL_channels_getParticipants();
        tL_channels_getParticipants.channel = getInputChannel(l.longValue());
        tL_channels_getParticipants.filter = new TLRPC.TL_channelParticipantsRecent();
        tL_channels_getParticipants.offset = 0;
        tL_channels_getParticipants.limit = i;
        getConnectionsManager().sendRequest(tL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda344
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadChannelParticipants$140(l, callback, tLObject, tL_error);
            }
        });
    }

    public void loadCurrentState() {
        if (this.updatingState) {
            return;
        }
        this.updatingState = true;
        getConnectionsManager().sendRequest(new TLRPC.TL_updates_getState(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda140
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadCurrentState$303(tLObject, tL_error);
            }
        });
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, null);
    }

    public void loadDialogs(final int i, int i2, final int i3, boolean z, final Runnable runnable) {
        TLRPC.InputPeer tL_inputPeerEmpty;
        long j;
        if (this.loadingDialogs.get(i) || this.resetingDialogs) {
            return;
        }
        this.loadingDialogs.put(i, true);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i4 = NotificationCenter.dialogsNeedReload;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i4, new Object[0]);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
        }
        if (z) {
            getMessagesStorage().getDialogs(i, i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0), i3, i == 0 && i2 == 0);
            return;
        }
        TLRPC.TL_messages_getDialogs tL_messages_getDialogs = new TLRPC.TL_messages_getDialogs();
        tL_messages_getDialogs.limit = i3;
        tL_messages_getDialogs.exclude_pinned = true;
        if (i != 0) {
            tL_messages_getDialogs.flags |= 2;
            tL_messages_getDialogs.folder_id = i;
        }
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        long j2 = dialogLoadOffsets[0];
        if (j2 == -1) {
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(i);
            int size = dialogs.size() - 1;
            while (true) {
                if (size < 0) {
                    tL_inputPeerEmpty = new TLRPC.TL_inputPeerEmpty();
                    break;
                }
                TLRPC.Dialog dialog = dialogs.get(size);
                if (!dialog.pinned && !DialogObject.isEncryptedDialog(dialog.id) && dialog.top_message > 0) {
                    ArrayList arrayList = (ArrayList) this.dialogMessage.get(dialog.id);
                    MessageObject messageObject = null;
                    if (arrayList != null) {
                        for (int i5 = 0; i5 < arrayList.size(); i5++) {
                            MessageObject messageObject2 = (MessageObject) arrayList.get(i5);
                            if (messageObject2 != null && (messageObject == null || messageObject2.getId() > messageObject.getId())) {
                                messageObject = (MessageObject) arrayList.get(i5);
                            }
                        }
                    }
                    if (messageObject != null && messageObject.getId() > 0) {
                        TLRPC.Message message = messageObject.messageOwner;
                        tL_messages_getDialogs.offset_date = message.date;
                        tL_messages_getDialogs.offset_id = message.id;
                        TLRPC.Peer peer = message.peer_id;
                        long j3 = peer.channel_id;
                        if (j3 == 0) {
                            j3 = peer.chat_id;
                            if (j3 == 0) {
                                j = peer.user_id;
                                tL_inputPeerEmpty = getInputPeer(j);
                            }
                        }
                        j = -j3;
                        tL_inputPeerEmpty = getInputPeer(j);
                    }
                }
                size--;
            }
        } else {
            if (j2 == 2147483647L) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i4, new Object[0]);
                return;
            }
            int i6 = (int) j2;
            tL_messages_getDialogs.offset_id = i6;
            tL_messages_getDialogs.offset_date = (int) dialogLoadOffsets[1];
            if (i6 != 0) {
                if (dialogLoadOffsets[4] != 0) {
                    TLRPC.TL_inputPeerChannel tL_inputPeerChannel = new TLRPC.TL_inputPeerChannel();
                    tL_messages_getDialogs.offset_peer = tL_inputPeerChannel;
                    tL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                } else if (dialogLoadOffsets[2] != 0) {
                    TLRPC.TL_inputPeerUser tL_inputPeerUser = new TLRPC.TL_inputPeerUser();
                    tL_messages_getDialogs.offset_peer = tL_inputPeerUser;
                    tL_inputPeerUser.user_id = dialogLoadOffsets[2];
                } else {
                    TLRPC.TL_inputPeerChat tL_inputPeerChat = new TLRPC.TL_inputPeerChat();
                    tL_messages_getDialogs.offset_peer = tL_inputPeerChat;
                    tL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                }
                tL_messages_getDialogs.offset_peer.access_hash = dialogLoadOffsets[5];
                getConnectionsManager().sendRequest(tL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda431
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadDialogs$188(i, i3, runnable, tLObject, tL_error);
                    }
                });
            }
            tL_inputPeerEmpty = new TLRPC.TL_inputPeerEmpty();
        }
        tL_messages_getDialogs.offset_peer = tL_inputPeerEmpty;
        getConnectionsManager().sendRequest(tL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda431
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadDialogs$188(i, i3, runnable, tLObject, tL_error);
            }
        });
    }

    protected void loadFilterPeers(final HashMap<Long, TLRPC.InputPeer> hashMap, final HashMap<Long, TLRPC.InputPeer> hashMap2, final HashMap<Long, TLRPC.InputPeer> hashMap3, final TLRPC.messages_Dialogs messages_dialogs, final TLRPC.messages_Dialogs messages_dialogs2, final ArrayList<TLRPC.User> arrayList, final ArrayList<TLRPC.Chat> arrayList2, final ArrayList<DialogFilter> arrayList3, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap4, final HashSet<Integer> hashSet, final Runnable runnable) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda425
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFilterPeers$17(hashMap2, messages_dialogs, messages_dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashSet, runnable, hashMap3, hashMap);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:21:0x0066, code lost:
    
        if (r11.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r5)) == null) goto L18;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void loadFullChat(final long j, final int i, boolean z) {
        TLRPC.TL_messages_getFullChat tL_messages_getFullChat;
        boolean z2 = this.loadedFullChats.get(j, 0L) > 0;
        if (this.loadingFullChats.contains(Long.valueOf(j))) {
            return;
        }
        if (z || !z2) {
            this.loadingFullChats.add(Long.valueOf(j));
            final long j2 = -j;
            final TLRPC.Chat chat = getChat(Long.valueOf(j));
            if (ChatObject.isChannel(chat)) {
                TLRPC.TL_channels_getFullChannel tL_channels_getFullChannel = new TLRPC.TL_channels_getFullChannel();
                tL_channels_getFullChannel.channel = getInputChannel(chat);
                loadChannelAdmins(j, true ^ z2);
                tL_messages_getFullChat = tL_channels_getFullChannel;
            } else {
                TLRPC.TL_messages_getFullChat tL_messages_getFullChat2 = new TLRPC.TL_messages_getFullChat();
                tL_messages_getFullChat2.chat_id = j;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(j2)) != null) {
                    tL_messages_getFullChat = tL_messages_getFullChat2;
                }
                reloadDialogsReadValue(null, j2);
                tL_messages_getFullChat = tL_messages_getFullChat2;
            }
            int sendRequest = getConnectionsManager().sendRequest(tL_messages_getFullChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda263
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadFullChat$63(j2, j, chat, i, tLObject, tL_error);
                }
            });
            if (i != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i);
            }
        }
    }

    public void loadFullUser(TLRPC.User user, int i, boolean z) {
        loadFullUser(user, i, z, null);
    }

    public void loadFullUser(final TLRPC.User user, final int i, boolean z, final Utilities.Callback<TLRPC.UserFull> callback) {
        if (user != null) {
            if (callback == null) {
                if (this.loadingFullUsers.contains(Long.valueOf(user.id))) {
                    return;
                }
                if (!z && this.loadedFullUsers.get(user.id) > 0) {
                    return;
                }
            }
            this.loadingFullUsers.add(Long.valueOf(user.id));
            TLRPC.TL_users_getFullUser tL_users_getFullUser = new TLRPC.TL_users_getFullUser();
            tL_users_getFullUser.id = getInputUser(user);
            final long j = user.id;
            if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
                reloadDialogsReadValue(null, j);
            }
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tL_users_getFullUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda389
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadFullUser$66(j, callback, user, i, tLObject, tL_error);
                }
            }), i);
        }
    }

    public void loadGlobalNotificationsSettings() {
        SharedPreferences.Editor editor;
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                editor = notificationsSettings.edit();
                if (!z) {
                    editor.putInt("EnableGroup2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                    editor.putInt("EnableChannel2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                editor.remove("EnableGroup").commit();
            } else {
                editor = null;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 4;
            final int i = 0;
            while (i < 3) {
                TLRPC.TL_account_getNotifySettings tL_account_getNotifySettings = new TLRPC.TL_account_getNotifySettings();
                tL_account_getNotifySettings.peer = i == 0 ? new TLRPC.TL_inputNotifyChats() : i == 1 ? new TLRPC.TL_inputNotifyUsers() : new TLRPC.TL_inputNotifyBroadcasts();
                getConnectionsManager().sendRequest(tL_account_getNotifySettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda409
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$190(i, tLObject, tL_error);
                    }
                });
                i++;
            }
            getConnectionsManager().sendRequest(new TLRPC.TL_account_getReactionsNotifySettings(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda410
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadGlobalNotificationsSettings$192(tLObject, tL_error);
                }
            });
        }
        if (getUserConfig().notificationsSignUpSettingsLoaded) {
            return;
        }
        loadSignUpNotificationsSettings();
    }

    public void loadHintDialogs() {
        if (!this.hintDialogs.isEmpty() || TextUtils.isEmpty(this.installReferer)) {
            return;
        }
        TLRPC.TL_help_getRecentMeUrls tL_help_getRecentMeUrls = new TLRPC.TL_help_getRecentMeUrls();
        tL_help_getRecentMeUrls.referer = this.installReferer;
        getConnectionsManager().sendRequest(tL_help_getRecentMeUrls, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda343
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadHintDialogs$185(tLObject, tL_error);
            }
        });
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, int i11, int i12, boolean z3, int i13, boolean z4) {
        loadMessagesInternal(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, j3, i9, i10, i11, i12, z3, i13, true, true, z4, null, 0L);
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, boolean z3) {
        loadMessages(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, j3, i10, j3 != 0 ? i9 : 0, 0, 0, false, 0, z3);
    }

    public void loadPeerSettings(TLRPC.User user, TLRPC.Chat chat) {
        if (user == null && chat == null) {
            return;
        }
        final long j = user != null ? user.id : -chat.id;
        if (this.loadingPeerSettings.indexOfKey(j) >= 0) {
            return;
        }
        this.loadingPeerSettings.put(j, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("request spam button for " + j);
        }
        int i = this.notificationsPreferences.getInt("dialog_bar_vis3" + j, 0);
        if (i != 1 && i != 3) {
            TLRPC.TL_messages_getPeerSettings tL_messages_getPeerSettings = new TLRPC.TL_messages_getPeerSettings();
            tL_messages_getPeerSettings.peer = getInputPeer(user != null ? user.id : -chat.id);
            getConnectionsManager().sendRequest(tL_messages_getPeerSettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda53
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadPeerSettings$74(j, tLObject, tL_error);
                }
            });
        } else if (BuildVars.LOGS_ENABLED) {
            FileLog.d("dialog bar already hidden for " + j);
        }
    }

    public void loadPinnedDialogs(final int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) >= 0 || getUserConfig().isPinnedDialogsLoaded(i)) {
            return;
        }
        this.loadingPinnedDialogs.put(i, 1);
        TLRPC.TL_messages_getPinnedDialogs tL_messages_getPinnedDialogs = new TLRPC.TL_messages_getPinnedDialogs();
        tL_messages_getPinnedDialogs.folder_id = i;
        getConnectionsManager().sendRequest(tL_messages_getPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda402
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadPinnedDialogs$345(i, tLObject, tL_error);
            }
        });
    }

    public void loadRemoteFilters(boolean z) {
        loadRemoteFilters(z, null);
    }

    public void loadRemoteFilters(boolean z, Utilities.Callback<Boolean> callback) {
        if (callback != null) {
            this.onLoadedRemoteFilters = callback;
        }
        if (this.loadingRemoteFilters || !getUserConfig().isClientActivated()) {
            return;
        }
        if (z || !getUserConfig().filtersLoaded) {
            if (z) {
                getUserConfig().filtersLoaded = false;
                getUserConfig().saveConfig(false);
            }
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getDialogFilters(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda395
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadRemoteFilters$27(tLObject, tL_error);
                }
            });
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (this.loadingNotificationSignUpSettings) {
            return;
        }
        this.loadingNotificationSignUpSettings = true;
        getConnectionsManager().sendRequest(new TLRPC.TL_account_getContactSignUpNotification(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda181
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadSignUpNotificationsSettings$196(tLObject, tL_error);
            }
        });
    }

    public void loadSuggestedFilters() {
        if (this.loadingSuggestedFilters) {
            return;
        }
        this.loadingSuggestedFilters = true;
        getConnectionsManager().sendRequest(new TLRPC.TL_messages_getSuggestedDialogFilters(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda74
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadSuggestedFilters$22(tLObject, tL_error);
            }
        });
    }

    protected void loadUnknownChannel(final TLRPC.Chat chat, final long j) {
        Exception e;
        NativeByteBuffer nativeByteBuffer;
        if (!(chat instanceof TLRPC.TL_channel) || this.gettingUnknownChannels.indexOfKey(chat.id) >= 0) {
            return;
        }
        if (chat.access_hash == 0) {
            if (j != 0) {
                getMessagesStorage().removePendingTask(j);
                return;
            }
            return;
        }
        TLRPC.TL_inputPeerChannel tL_inputPeerChannel = new TLRPC.TL_inputPeerChannel();
        long j2 = chat.id;
        tL_inputPeerChannel.channel_id = j2;
        tL_inputPeerChannel.access_hash = chat.access_hash;
        this.gettingUnknownChannels.put(j2, Boolean.TRUE);
        TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
        TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
        tL_inputDialogPeer.peer = tL_inputPeerChannel;
        tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(chat.getObjectSize() + 4);
                try {
                    nativeByteBuffer.writeInt32(0);
                    chat.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$loadUnknownChannel$308(j, chat, tLObject, tL_error);
                        }
                    });
                }
            } catch (Exception e3) {
                e = e3;
                nativeByteBuffer = null;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadUnknownChannel$308(j, chat, tLObject, tL_error);
            }
        });
    }

    protected void loadUnknownDialog(TLRPC.InputPeer inputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (inputPeer == null) {
            return;
        }
        final long peerDialogId = DialogObject.getPeerDialogId(inputPeer);
        if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) >= 0) {
            return;
        }
        this.gettingUnknownDialogs.put(peerDialogId, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load unknown dialog " + peerDialogId);
        }
        TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = new TLRPC.TL_messages_getPeerDialogs();
        TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
        tL_inputDialogPeer.peer = inputPeer;
        tL_messages_getPeerDialogs.peers.add(tL_inputDialogPeer);
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 4);
            } catch (Exception e) {
                e = e;
                nativeByteBuffer = null;
            }
            try {
                nativeByteBuffer.writeInt32(15);
                inputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                final long j2 = j;
                getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda277
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$197(j2, peerDialogId, tLObject, tL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j22 = j;
        getConnectionsManager().sendRequest(tL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda277
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadUnknownDialog$197(j22, peerDialogId, tLObject, tL_error);
            }
        });
    }

    public void loadUnreadDialogs() {
        if (this.loadingUnreadDialogs || getUserConfig().unreadDialogsLoaded) {
            return;
        }
        this.loadingUnreadDialogs = true;
        getConnectionsManager().sendRequest(new TLRPC.TL_messages_getDialogUnreadMarks(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda258
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadUnreadDialogs$340(tLObject, tL_error);
            }
        });
    }

    public void loadUserInfo(TLRPC.User user, boolean z, int i) {
        loadUserInfo(user, z, i, 0);
    }

    public void loadUserInfo(TLRPC.User user, boolean z, int i, int i2) {
        getMessagesStorage().loadUserInfo(user, z, i, i2);
    }

    public void loadUsersPremiumLocked(final ArrayList<TLRPC.User> arrayList, final Utilities.Callback<ArrayList<Long>> callback) {
        if (callback == null) {
            return;
        }
        if (getUserConfig().isPremium()) {
            callback.run(null);
            return;
        }
        TLRPC.TL_users_getIsPremiumRequiredToContact tL_users_getIsPremiumRequiredToContact = new TLRPC.TL_users_getIsPremiumRequiredToContact();
        MessagesController messagesController = getInstance(this.currentAccount);
        Iterator<TLRPC.User> it = arrayList.iterator();
        while (it.hasNext()) {
            tL_users_getIsPremiumRequiredToContact.id.add(messagesController.getInputUser(it.next()));
        }
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tL_users_getIsPremiumRequiredToContact, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda381
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$loadUsersPremiumLocked$274(arrayList, callback, tLObject, tL_error);
            }
        });
    }

    public void lockFiltersInternal() {
        boolean z;
        if (getUserConfig().isPremium() || this.dialogFilters.size() - 1 <= this.dialogFiltersLimitDefault) {
            z = false;
        } else {
            int size = (this.dialogFilters.size() - 1) - this.dialogFiltersLimitDefault;
            ArrayList arrayList = new ArrayList(this.dialogFilters);
            Collections.reverse(arrayList);
            z = false;
            for (int i = 0; i < arrayList.size(); i++) {
                boolean z2 = ((DialogFilter) arrayList.get(i)).locked;
                if (i < size) {
                    if (!z2) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = true;
                } else {
                    if (z2) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = false;
                }
            }
        }
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        }
    }

    public void logDeviceStats() {
        if (!this.collectDeviceStats || this.loggedDeviceStats) {
            return;
        }
        ArrayList<File> rootDirs = AndroidUtilities.getRootDirs();
        if (!rootDirs.isEmpty()) {
            int i = 0;
            String absolutePath = rootDirs.get(0).getAbsolutePath();
            if (!TextUtils.isEmpty(SharedConfig.storageCacheDir)) {
                int size = rootDirs.size();
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    String absolutePath2 = rootDirs.get(i).getAbsolutePath();
                    if (absolutePath2.startsWith(SharedConfig.storageCacheDir)) {
                        absolutePath = absolutePath2;
                        break;
                    }
                    i++;
                }
            }
            boolean contains = absolutePath.contains("/storage/emulated/");
            TLRPC.TL_help_saveAppLog tL_help_saveAppLog = new TLRPC.TL_help_saveAppLog();
            TLRPC.TL_inputAppEvent tL_inputAppEvent = new TLRPC.TL_inputAppEvent();
            tL_inputAppEvent.time = getConnectionsManager().getCurrentTime();
            tL_inputAppEvent.type = "android_sdcard_exists";
            TLRPC.TL_jsonBool tL_jsonBool = new TLRPC.TL_jsonBool();
            tL_jsonBool.value = contains;
            tL_inputAppEvent.data = tL_jsonBool;
            tL_inputAppEvent.peer = contains ? 1L : 0L;
            tL_help_saveAppLog.events.add(tL_inputAppEvent);
            getConnectionsManager().sendRequest(tL_help_saveAppLog, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda78
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$logDeviceStats$28(tLObject, tL_error);
                }
            });
        }
        this.loggedDeviceStats = true;
    }

    public void markAllTopicsAsRead(final long j) {
        getMessagesStorage().loadTopics(j, new j$.util.function.Consumer() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda198
            @Override // j$.util.function.Consumer
            /* renamed from: accept */
            public final void r(Object obj) {
                MessagesController.this.lambda$markAllTopicsAsRead$9(j, (ArrayList) obj);
            }

            @Override // j$.util.function.Consumer
            public /* synthetic */ j$.util.function.Consumer andThen(j$.util.function.Consumer consumer) {
                return Consumer.-CC.$default$andThen(this, consumer);
            }
        });
    }

    public void markDialogAsRead(final long j, final int i, final int i2, final int i3, final boolean z, final long j2, final int i4, final boolean z2, int i5) {
        if (j2 == 0) {
            boolean z3 = getNotificationsController().showBadgeMessages;
            if (DialogObject.isEncryptedDialog(j)) {
                if (i3 == 0) {
                    return;
                }
                TLRPC.EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
                getMessagesStorage().processPendingRead(j, i, i2, i5);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda475
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$234(j, i3, z, i4, i2);
                    }
                });
                if (encryptedChat != null && encryptedChat.ttl > 0) {
                    getMessagesStorage().createTaskForSecretChat(encryptedChat.id, i3, Math.max(getConnectionsManager().getCurrentTime(), i3), 0, null);
                }
            } else {
                if (i == 0) {
                    return;
                }
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(num.intValue(), i)));
                getMessagesStorage().processPendingRead(j, i, i2, i5);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda474
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$232(j, i4, i, z);
                    }
                });
                if (i == Integer.MAX_VALUE) {
                    return;
                }
            }
        } else if (i == Integer.MAX_VALUE) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda476
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$235(j2, j, z2, i3, i);
            }
        });
    }

    public void markDialogAsReadNow(final long j, final long j2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda393
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$229(j2, j);
            }
        });
    }

    public void markDialogAsUnread(long j, TLRPC.InputPeer inputPeer, final long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (dialog != null) {
            dialog.unread_mark = true;
            if (dialog.unread_count == 0 && !isDialogMuted(j, 0L)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    DialogFilter dialogFilter = dialogFilterArr[i];
                    if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs(null);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        TLRPC.TL_messages_markDialogUnread tL_messages_markDialogUnread = new TLRPC.TL_messages_markDialogUnread();
        tL_messages_markDialogUnread.unread = true;
        if (inputPeer == null) {
            inputPeer = getInputPeer(j);
        }
        if (inputPeer instanceof TLRPC.TL_inputPeerEmpty) {
            return;
        }
        TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
        tL_inputDialogPeer.peer = inputPeer;
        tL_messages_markDialogUnread.peer = tL_inputDialogPeer;
        if (j2 == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 12);
            } catch (Exception e) {
                e = e;
            }
            try {
                nativeByteBuffer.writeInt32(9);
                nativeByteBuffer.writeInt64(j);
                inputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda363
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$markDialogAsUnread$338(j2, tLObject, tL_error);
                    }
                });
            }
            j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda363
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$markDialogAsUnread$338(j2, tLObject, tL_error);
            }
        });
    }

    public void markDialogMessageAsDeleted(long j, ArrayList<Integer> arrayList) {
        ArrayList arrayList2 = (ArrayList) this.dialogMessage.get(j);
        if (arrayList2 != null) {
            for (int i = 0; i < arrayList2.size(); i++) {
                MessageObject messageObject = (MessageObject) arrayList2.get(i);
                if (messageObject != null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 < arrayList.size()) {
                            if (messageObject.getId() == arrayList.get(i2).intValue()) {
                                messageObject.deleted = true;
                                break;
                            }
                            i2++;
                        }
                    }
                }
            }
        }
    }

    public void markMentionMessageAsRead(int i, long j, long j2) {
        getMessagesStorage().markMentionMessageAsRead(-j, i, j2);
        if (j == 0) {
            TLRPC.TL_messages_readMessageContents tL_messages_readMessageContents = new TLRPC.TL_messages_readMessageContents();
            tL_messages_readMessageContents.id.add(Integer.valueOf(i));
            getConnectionsManager().sendRequest(tL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda212
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$markMentionMessageAsRead$223(tLObject, tL_error);
                }
            });
            return;
        }
        TLRPC.TL_channels_readMessageContents tL_channels_readMessageContents = new TLRPC.TL_channels_readMessageContents();
        TLRPC.InputChannel inputChannel = getInputChannel(j);
        tL_channels_readMessageContents.channel = inputChannel;
        if (inputChannel == null) {
            return;
        }
        tL_channels_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tL_channels_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda211
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$markMentionMessageAsRead$222(tLObject, tL_error);
            }
        });
    }

    public void markMentionsAsRead(long j, long j2) {
        if (DialogObject.isEncryptedDialog(j) || j == getUserConfig().getClientUserId()) {
            return;
        }
        getMessagesStorage().resetMentionsCount(j, j2, 0);
        TLRPC.TL_messages_readMentions tL_messages_readMentions = new TLRPC.TL_messages_readMentions();
        tL_messages_readMentions.peer = getInputPeer(j);
        if (j2 != 0) {
            tL_messages_readMentions.top_msg_id = (int) j2;
            tL_messages_readMentions.flags |= 1;
        }
        getConnectionsManager().sendRequest(tL_messages_readMentions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda285
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$markMentionsAsRead$230(tLObject, tL_error);
            }
        });
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC.EncryptedChat encryptedChat;
        if (j2 == 0 || j == 0) {
            return;
        }
        if ((i > 0 || i == Integer.MIN_VALUE) && DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
            ArrayList<Long> arrayList = new ArrayList<>();
            arrayList.add(Long.valueOf(j2));
            getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, null);
            if (i > 0) {
                int currentTime = getConnectionsManager().getCurrentTime();
                getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
            }
        }
    }

    public void markMessageAsRead2(long j, int i, TLRPC.InputChannel inputChannel, int i2, long j2) {
        markMessageAsRead2(j, i, inputChannel, i2, j2, true);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0071  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0081  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x009e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void markMessageAsRead2(long j, int i, TLRPC.InputChannel inputChannel, int i2, long j2, boolean z) {
        TLRPC.InputChannel inputChannel2;
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        RequestDelegate requestDelegate;
        ConnectionsManager connectionsManager;
        TLRPC.TL_messages_readMessageContents tL_messages_readMessageContents;
        if (i == 0 || i2 < 0) {
            return;
        }
        if (DialogObject.isChatDialog(j) && inputChannel == null) {
            TLRPC.InputChannel inputChannel3 = getInputChannel(j);
            if (inputChannel3 == null) {
                return;
            } else {
                inputChannel2 = inputChannel3;
            }
        } else {
            inputChannel2 = inputChannel;
        }
        if (j2 == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(20 + (inputChannel2 != null ? inputChannel2.getObjectSize() : 0));
                try {
                    nativeByteBuffer.writeInt32(z ? 23 : 101);
                } catch (Exception e) {
                    e = e;
                }
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer = null;
            }
            try {
                nativeByteBuffer.writeInt64(j);
                nativeByteBuffer.writeInt32(i);
                nativeByteBuffer.writeInt32(i2);
                if (inputChannel2 != null) {
                    inputChannel2.serializeToStream(nativeByteBuffer);
                }
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                int currentTime = getConnectionsManager().getCurrentTime();
                if (z) {
                }
                if (inputChannel2 == null) {
                }
                connectionsManager.sendRequest(tL_messages_readMessageContents, requestDelegate);
            }
            createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            createPendingTask = j2;
        }
        int currentTime2 = getConnectionsManager().getCurrentTime();
        if (z) {
            getMessagesStorage().createTaskForMid(j, i, currentTime2, currentTime2, i2, false);
        }
        if (inputChannel2 == null) {
            TLRPC.TL_channels_readMessageContents tL_channels_readMessageContents = new TLRPC.TL_channels_readMessageContents();
            tL_channels_readMessageContents.channel = inputChannel2;
            tL_channels_readMessageContents.id.add(Integer.valueOf(i));
            ConnectionsManager connectionsManager2 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda111
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$markMessageAsRead2$224(createPendingTask, tLObject, tL_error);
                }
            };
            tL_messages_readMessageContents = tL_channels_readMessageContents;
            connectionsManager = connectionsManager2;
        } else {
            TLRPC.TL_messages_readMessageContents tL_messages_readMessageContents2 = new TLRPC.TL_messages_readMessageContents();
            tL_messages_readMessageContents2.id.add(Integer.valueOf(i));
            ConnectionsManager connectionsManager3 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda112
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$markMessageAsRead2$225(createPendingTask, tLObject, tL_error);
                }
            };
            tL_messages_readMessageContents = tL_messages_readMessageContents2;
            connectionsManager = connectionsManager3;
        }
        connectionsManager.sendRequest(tL_messages_readMessageContents, requestDelegate);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void markMessageContentAsRead(MessageObject messageObject) {
        RequestDelegate requestDelegate;
        ConnectionsManager connectionsManager;
        TLRPC.TL_messages_readMessageContents tL_messages_readMessageContents;
        if (messageObject.scheduled) {
            return;
        }
        ArrayList<Integer> arrayList = new ArrayList<>();
        if (messageObject.messageOwner.mentioned) {
            getMessagesStorage().markMentionMessageAsRead(-messageObject.messageOwner.peer_id.channel_id, messageObject.getId(), messageObject.getDialogId());
        }
        arrayList.add(Integer.valueOf(messageObject.getId()));
        long dialogId = messageObject.getDialogId();
        getMessagesStorage().markMessagesContentAsRead(dialogId, arrayList, 0, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(dialogId), arrayList);
        if (messageObject.getId() < 0) {
            markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            return;
        }
        if (messageObject.messageOwner.peer_id.channel_id != 0) {
            TLRPC.TL_channels_readMessageContents tL_channels_readMessageContents = new TLRPC.TL_channels_readMessageContents();
            TLRPC.InputChannel inputChannel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
            tL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel == null) {
                return;
            }
            tL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
            ConnectionsManager connectionsManager2 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda364
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$markMessageContentAsRead$220(tLObject, tL_error);
                }
            };
            tL_messages_readMessageContents = tL_channels_readMessageContents;
            connectionsManager = connectionsManager2;
        } else {
            TLRPC.TL_messages_readMessageContents tL_messages_readMessageContents2 = new TLRPC.TL_messages_readMessageContents();
            tL_messages_readMessageContents2.id.add(Integer.valueOf(messageObject.getId()));
            ConnectionsManager connectionsManager3 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda365
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$markMessageContentAsRead$221(tLObject, tL_error);
                }
            };
            tL_messages_readMessageContents = tL_messages_readMessageContents2;
            connectionsManager = connectionsManager3;
        }
        connectionsManager.sendRequest(tL_messages_readMessageContents, requestDelegate);
    }

    public void markReactionsAsRead(long j, long j2) {
        if (j2 == 0) {
            TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
            if (dialog != null) {
                dialog.unread_reactions_count = 0;
            }
        } else {
            this.topicsController.markAllReactionsAsRead(-j, j2);
        }
        getMessagesStorage().updateUnreadReactionsCount(j, j2, 0);
        TLRPC.TL_messages_readReactions tL_messages_readReactions = new TLRPC.TL_messages_readReactions();
        tL_messages_readReactions.peer = getInputPeer(j);
        if (j2 != 0) {
            tL_messages_readReactions.top_msg_id = (int) j2;
        }
        getConnectionsManager().sendRequest(tL_messages_readReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda396
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$markReactionsAsRead$392(tLObject, tL_error);
            }
        });
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_REACTIONS_READ));
    }

    public void markSponsoredAsRead(long j, MessageObject messageObject) {
    }

    public boolean matchesAdminRights(TLRPC.Chat chat, TLRPC.User user, TLRPC.TL_chatAdminRights tL_chatAdminRights) {
        if (tL_chatAdminRights == null) {
            return true;
        }
        TLRPC.TL_chatAdminRights chatAdminRightsCached = getChatAdminRightsCached(chat, user);
        if ((!tL_chatAdminRights.change_info || (chatAdminRightsCached != null && chatAdminRightsCached.change_info)) && ((!tL_chatAdminRights.post_messages || (chatAdminRightsCached != null && chatAdminRightsCached.post_messages)) && ((!tL_chatAdminRights.edit_messages || (chatAdminRightsCached != null && chatAdminRightsCached.edit_messages)) && ((!tL_chatAdminRights.delete_messages || (chatAdminRightsCached != null && chatAdminRightsCached.delete_messages)) && ((!tL_chatAdminRights.ban_users || (chatAdminRightsCached != null && chatAdminRightsCached.ban_users)) && ((!tL_chatAdminRights.invite_users || (chatAdminRightsCached != null && chatAdminRightsCached.invite_users)) && ((!tL_chatAdminRights.pin_messages || (chatAdminRightsCached != null && chatAdminRightsCached.pin_messages)) && ((!tL_chatAdminRights.add_admins || (chatAdminRightsCached != null && chatAdminRightsCached.add_admins)) && ((!tL_chatAdminRights.anonymous || (chatAdminRightsCached != null && chatAdminRightsCached.anonymous)) && ((!tL_chatAdminRights.manage_call || (chatAdminRightsCached != null && chatAdminRightsCached.manage_call)) && (!tL_chatAdminRights.other || (chatAdminRightsCached != null && chatAdminRightsCached.other)))))))))))) {
            if (!tL_chatAdminRights.manage_topics) {
                return true;
            }
            if (chatAdminRightsCached != null && chatAdminRightsCached.manage_topics) {
                return true;
            }
        }
        return false;
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs(null);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                return;
            }
        }
    }

    protected void onFolderEmpty(final int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] != 2147483647L) {
            loadDialogs(i, 0, 10, false, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda128
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$onFolderEmpty$186(i);
                }
            });
        } else if (i != 1) {
            removeFolder(i);
        } else {
            this.hasArchivedChats = false;
            checkArchiveFolder();
        }
    }

    public void openApp(TLRPC.User user, int i) {
        openApp(null, user, null, i, null);
    }

    public void openApp(BaseFragment baseFragment, TLRPC.User user, String str, int i, Browser.Progress progress) {
        openApp(baseFragment, user, str, i, progress, false, false);
    }

    public void openApp(final BaseFragment baseFragment, final TLRPC.User user, final String str, final int i, final Browser.Progress progress, final boolean z, final boolean z2) {
        if (user == null) {
            return;
        }
        final boolean[] zArr = {false};
        if (progress != null) {
            progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda350
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$openApp$451(zArr);
                }
            });
            progress.init();
        }
        final TL_bots.BotInfo[] botInfoArr = {r0};
        final Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda351
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$openApp$452(baseFragment, progress, zArr, user, str, z, z2, botInfoArr);
            }
        };
        MediaDataController mediaDataController = getMediaDataController();
        long j = user.id;
        TL_bots.BotInfo botInfoCached = mediaDataController.getBotInfoCached(j, j);
        if (user.bot_has_main_app || botInfoCached != null) {
            runnable.run();
            return;
        }
        MediaDataController mediaDataController2 = getMediaDataController();
        long j2 = user.id;
        mediaDataController2.loadBotInfo(j2, j2, false, i, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda352
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                MessagesController.this.lambda$openApp$454(zArr, botInfoArr, user, i, runnable, (TL_bots.BotInfo) obj);
            }
        });
    }

    public void openByUserName(String str, BaseFragment baseFragment, int i) {
        openByUserName(str, baseFragment, i, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:29:0x002b, code lost:
    
        if (r3.min != false) goto L10;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0030  */
    /* JADX WARN: Removed duplicated region for block: B:14:0x003d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openByUserName(String str, final BaseFragment baseFragment, final int i, final Browser.Progress progress) {
        TLRPC.Chat chat;
        int i2;
        boolean z;
        TLRPC.User user;
        MessagesController messagesController;
        TLRPC.Chat chat2;
        BaseFragment baseFragment2;
        if (str == null || baseFragment == null) {
            return;
        }
        TLObject userOrChat = getUserOrChat(str);
        TLRPC.User user2 = null;
        if (!(userOrChat instanceof TLRPC.User)) {
            if (userOrChat instanceof TLRPC.Chat) {
                chat = (TLRPC.Chat) userOrChat;
            }
            chat = null;
            if (user2 != null) {
            }
            messagesController.openChatOrProfileWith(user, chat2, baseFragment2, i2, z);
        }
        TLRPC.User user3 = (TLRPC.User) userOrChat;
        if (!user3.min) {
            user2 = user3;
            chat = null;
            if (user2 != null) {
                chat2 = null;
                messagesController = this;
                user = user2;
                baseFragment2 = baseFragment;
                i2 = i;
                z = false;
            } else {
                if (chat == null) {
                    if (baseFragment.getParentActivity() == null) {
                        return;
                    }
                    final AlertDialog[] alertDialogArr = {new AlertDialog(baseFragment.getParentActivity(), 3)};
                    final boolean[] zArr = {false};
                    getMessagesController().getUserNameResolver().resolve(str, new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda310
                        @Override // com.google.android.exoplayer2.util.Consumer
                        public final void accept(Object obj) {
                            MessagesController.this.lambda$openByUserName$409(progress, alertDialogArr, baseFragment, zArr, i, (Long) obj);
                        }
                    });
                    if (progress == null) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.lambda$openByUserName$412(alertDialogArr, zArr, baseFragment);
                            }
                        }, 500L);
                        return;
                    } else {
                        progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda311
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.lambda$openByUserName$410(zArr);
                            }
                        });
                        progress.init();
                        return;
                    }
                }
                i2 = 1;
                z = false;
                user = null;
                messagesController = this;
                chat2 = chat;
                baseFragment2 = baseFragment;
            }
            messagesController.openChatOrProfileWith(user, chat2, baseFragment2, i2, z);
        }
        chat = null;
        if (user2 != null) {
        }
        messagesController.openChatOrProfileWith(user, chat2, baseFragment2, i2, z);
    }

    /* JADX WARN: Code restructure failed: missing block: B:32:0x007d, code lost:
    
        if (r2 == false) goto L41;
     */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x008c, code lost:
    
        if (r2 == false) goto L41;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseFragment baseFragment, int i, boolean z) {
        String restrictionReason;
        long j;
        String str;
        BaseFragment chatActivity;
        if ((user == null && chat == null) || baseFragment == null) {
            return;
        }
        boolean z2 = true;
        if (chat != null) {
            restrictionReason = getRestrictionReason(chat.restriction_reason);
        } else {
            restrictionReason = getRestrictionReason(user.restriction_reason);
            if (i != 3 && user.bot) {
                if (LaunchActivity.getLastFragment().getLastStoryViewer() == null) {
                    i = 1;
                    z = true;
                } else {
                    i = 1;
                }
            }
        }
        boolean z3 = LaunchActivity.getLastFragment() instanceof DialogsActivity;
        if (restrictionReason != null) {
            showCantOpenAlert(baseFragment, restrictionReason);
            return;
        }
        Bundle bundle = new Bundle();
        if (chat != null) {
            j = chat.id;
            str = "chat_id";
        } else {
            j = user.id;
            str = "user_id";
        }
        bundle.putLong(str, j);
        if (i == 0) {
            baseFragment.presentFragment(new ProfileActivity(bundle));
            return;
        }
        if (i == 2) {
            baseFragment.presentFragment(ChatObject.isForum(chat) ? TopicsFragment.getTopicsOrChat(baseFragment, bundle) : new ChatActivity(bundle), !z3, true);
            return;
        }
        if (ChatObject.isForum(chat)) {
            chatActivity = TopicsFragment.getTopicsOrChat(baseFragment, bundle);
            if (z) {
            }
            z2 = false;
        } else {
            chatActivity = new ChatActivity(bundle);
            if (z) {
            }
            z2 = false;
        }
        baseFragment.presentFragment(chatActivity, z2);
    }

    public void performLogout(int i) {
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC.TL_auth_logOut(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda429
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$performLogout$300(tLObject, tL_error);
                }
            });
        } else {
            getConnectionsManager().cleanup(i == 2);
        }
        getUserConfig().clearConfig();
        SharedPrefsHelper.cleanupAccount(this.currentAccount);
        ArrayList<NotificationCenter.NotificationCenterDelegate> observers = getNotificationCenter().getObservers(NotificationCenter.appDidLogout);
        if (observers != null) {
            int size = observers.size();
            for (int i2 = 0; i2 < size; i2++) {
                if (observers.get(i2) instanceof LaunchActivity) {
                    break;
                }
            }
        }
        if (UserConfig.selectedAccount == this.currentAccount) {
            int i3 = 0;
            while (true) {
                if (i3 >= 4) {
                    i3 = -1;
                    break;
                } else if (UserConfig.getInstance(i3).isClientActivated()) {
                    break;
                } else {
                    i3++;
                }
            }
            if (i3 != -1) {
                UserConfig.selectedAccount = i3;
                UserConfig.getInstance(0).saveConfig(false);
                LaunchActivity.clearFragments();
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    public boolean pinDialog(long j, boolean z, TLRPC.InputPeer inputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog == null || dialog.pinned == z) {
            return dialog != null;
        }
        int i = dialog.folder_id;
        ArrayList<TLRPC.Dialog> dialogs = getDialogs(i);
        dialog.pinned = z;
        if (z) {
            int i2 = 0;
            for (int i3 = 0; i3 < dialogs.size(); i3++) {
                TLRPC.Dialog dialog2 = dialogs.get(i3);
                if (!(dialog2 instanceof TLRPC.TL_dialogFolder)) {
                    if (!dialog2.pinned) {
                        if (dialog2.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        i2 = Math.max(dialog2.pinnedNum, i2);
                    }
                }
            }
            dialog.pinnedNum = i2 + 1;
        } else {
            dialog.pinnedNum = 0;
        }
        NativeByteBuffer nativeByteBuffer2 = null;
        sortDialogs(null);
        if (!z && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == dialog && !this.dialogsEndReached.get(i)) {
            dialogs.remove(dialogs.size() - 1);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        if (!DialogObject.isEncryptedDialog(j) && j2 != -1) {
            TLRPC.TL_messages_toggleDialogPin tL_messages_toggleDialogPin = new TLRPC.TL_messages_toggleDialogPin();
            tL_messages_toggleDialogPin.pinned = z;
            TLRPC.InputPeer inputPeer2 = inputPeer == null ? getInputPeer(j) : inputPeer;
            if (inputPeer2 instanceof TLRPC.TL_inputPeerEmpty) {
                return false;
            }
            TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
            tL_inputDialogPeer.peer = inputPeer2;
            tL_messages_toggleDialogPin.peer = tL_inputDialogPeer;
            if (j2 == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(inputPeer2.getObjectSize() + 16);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(4);
                    nativeByteBuffer.writeInt64(j);
                    nativeByteBuffer.writeBool(z);
                    inputPeer2.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda113
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$pinDialog$342(createPendingTask, tLObject, tL_error);
                        }
                    });
                    getMessagesStorage().setDialogPinned(j, dialog.pinnedNum);
                    return true;
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                createPendingTask = j2;
            }
            getConnectionsManager().sendRequest(tL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda113
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$pinDialog$342(createPendingTask, tLObject, tL_error);
                }
            });
        }
        getMessagesStorage().setDialogPinned(j, dialog.pinnedNum);
        return true;
    }

    public void pinMessage(final TLRPC.Chat chat, final TLRPC.User user, final int i, final boolean z, boolean z2, boolean z3) {
        if (chat == null && user == null) {
            return;
        }
        TLRPC.TL_messages_updatePinnedMessage tL_messages_updatePinnedMessage = new TLRPC.TL_messages_updatePinnedMessage();
        tL_messages_updatePinnedMessage.peer = getInputPeer(chat != null ? -chat.id : user.id);
        tL_messages_updatePinnedMessage.id = i;
        tL_messages_updatePinnedMessage.unpin = z;
        tL_messages_updatePinnedMessage.silent = !z3;
        tL_messages_updatePinnedMessage.pm_oneside = z2;
        getConnectionsManager().sendRequest(tL_messages_updatePinnedMessage, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda262
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$pinMessage$123(i, chat, user, z, tLObject, tL_error);
            }
        });
    }

    public boolean premiumFeaturesBlocked() {
        return this.premiumLocked && !getUserConfig().isPremium();
    }

    public boolean premiumPurchaseBlocked() {
        return this.premiumLocked;
    }

    public void pressTranscribeButton() {
        int i = this.transcribeButtonPressed;
        if (i < 2) {
            this.transcribeButtonPressed = i + 1;
            SharedPreferences sharedPreferences = this.mainPreferences;
            if (sharedPreferences != null) {
                sharedPreferences.edit().putInt("transcribeButtonPressed", this.transcribeButtonPressed).apply();
            }
        }
    }

    public void processChatInfo(final long j, final TLRPC.ChatFull chatFull, final ArrayList<TLRPC.User> arrayList, final boolean z, final boolean z2, final boolean z3, final ArrayList<Integer> arrayList2, final HashMap<Integer, MessageObject> hashMap, final int i, final boolean z4) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda115
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processChatInfo$141(z, j, z3, z2, chatFull, arrayList, arrayList2, hashMap, i, z4);
            }
        });
    }

    public boolean processDeletedReactionTags(TLRPC.Message message) {
        TLRPC.TL_messageReactions tL_messageReactions;
        if (message == null || DialogObject.getPeerDialogId(message.peer_id) != getUserConfig().getClientUserId() || (tL_messageReactions = message.reactions) == null || !tL_messageReactions.reactions_as_tags || tL_messageReactions.results == null) {
            return false;
        }
        long savedDialogId = MessageObject.getSavedDialogId(getUserConfig().getClientUserId(), message);
        boolean z = false;
        for (int i = 0; i < message.reactions.results.size(); i++) {
            if (updateSavedReactionTags(savedDialogId, ReactionsLayoutInBubble.VisibleReaction.fromTL(message.reactions.results.get(i).reaction), false, false)) {
                z = true;
            }
        }
        return z;
    }

    public void processDialogsUpdate(final TLRPC.messages_Dialogs messages_dialogs, ArrayList<TLRPC.EncryptedChat> arrayList, final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda261
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$218(messages_dialogs, z);
            }
        });
    }

    public void processDialogsUpdateRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda451
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$212(longSparseIntArray, longSparseIntArray2);
            }
        });
    }

    public void processLoadedAdminsResponse(long j, TLRPC.TL_channels_channelParticipants tL_channels_channelParticipants) {
        LongSparseArray longSparseArray = new LongSparseArray(tL_channels_channelParticipants.participants.size());
        for (int i = 0; i < tL_channels_channelParticipants.participants.size(); i++) {
            TLRPC.ChannelParticipant channelParticipant = tL_channels_channelParticipants.participants.get(i);
            longSparseArray.put(MessageObject.getPeerId(channelParticipant.peer), channelParticipant);
        }
        processLoadedChannelAdmins(longSparseArray, j, false);
    }

    public void processLoadedChannelAdmins(final LongSparseArray longSparseArray, final long j, final boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(j, longSparseArray);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda91
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$60(j, longSparseArray, z);
            }
        });
    }

    public void processLoadedDeleteTask(final int i, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda135
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$82(longSparseArray, longSparseArray2, i);
            }
        });
    }

    protected void processLoadedDialogFilters(final ArrayList<DialogFilter> arrayList, final TLRPC.messages_Dialogs messages_dialogs, final TLRPC.messages_Dialogs messages_dialogs2, final ArrayList<TLRPC.User> arrayList2, final ArrayList<TLRPC.Chat> arrayList3, final ArrayList<TLRPC.EncryptedChat> arrayList4, final int i, final Runnable runnable) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda232
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$20(messages_dialogs, arrayList4, messages_dialogs2, i, arrayList, arrayList2, arrayList3, runnable);
            }
        });
    }

    public void processLoadedDialogs(final TLRPC.messages_Dialogs messages_dialogs, final ArrayList<TLRPC.EncryptedChat> arrayList, final ArrayList<TLRPC.UserFull> arrayList2, final int i, final int i2, final int i3, final int i4, final boolean z, final boolean z2, final boolean z3) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda388
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$209(i, i4, messages_dialogs, arrayList2, z, i3, arrayList, i2, z3, z2);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:277:0x0204, code lost:
    
        r1 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:280:0x01b2, code lost:
    
        if ((android.os.SystemClock.elapsedRealtime() - ((java.lang.Long) r35.lastQuickReplyServerQueryTime.get(r2, java.lang.Long.valueOf(r29))).longValue()) > 60000) goto L61;
     */
    /* JADX WARN: Code restructure failed: missing block: B:38:0x018e, code lost:
    
        if ((android.os.SystemClock.elapsedRealtime() - ((java.lang.Long) r35.lastScheduledServerQueryTime.get(r38, java.lang.Long.valueOf(r29))).longValue()) > 60000) goto L61;
     */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0467  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x04ae  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x05c3  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x05da  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x060f  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0619  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0125  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x060b  */
    /* JADX WARN: Removed duplicated region for block: B:224:0x0471  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x0474  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x027a  */
    /* JADX WARN: Removed duplicated region for block: B:278:0x0192  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0144 A[LOOP:0: B:26:0x013c->B:28:0x0144, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:33:0x015d A[LOOP:1: B:31:0x0155->B:33:0x015d, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0173  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x023f  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0363 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0371  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processLoadedMessages(final TLRPC.messages_Messages messages_messages, final int i, final long j, final long j2, final int i2, final int i3, final int i4, final boolean z, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10, final boolean z2, final int i11, final long j3, final int i12, final boolean z3, final int i13, final boolean z4, final boolean z5, final Timer timer) {
        long j4;
        int i14;
        boolean z6;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int i15;
        int i16;
        long j5;
        int i17;
        boolean z7;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        TLRPC.messages_Messages messages_messages2;
        int size;
        long j6;
        int i18;
        LongSparseArray longSparseArray5;
        int i19;
        int i20;
        int i21;
        boolean z8;
        boolean z9;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        LongSparseArray longSparseArray8;
        LongSparseArray longSparseArray9;
        final long j7;
        LongSparseArray longSparseArray10;
        long j8;
        long j9;
        long calcHash;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processLoadedMessages size " + messages_messages.messages.size() + " in chat " + j + " topic_id " + j3 + " count " + i2 + " max_id " + i3 + " cache " + z + " guid " + i5 + " load_type " + i10 + " last_message_id " + i7 + " index " + i12 + " firstUnread " + i6 + " unread_count " + i8 + " last_date " + i9 + " queryFromServer " + z3 + " isTopic " + z5 + " mode " + i11);
        }
        Timer.Task start = Timer.start(timer, "processLoadedMessages");
        long elapsedRealtime = SystemClock.elapsedRealtime();
        if (messages_messages instanceof TLRPC.TL_messages_channelMessages) {
            long j10 = -j;
            if (i11 == 0 && j3 == 0 && this.channelsPts.get(j10) == 0 && getMessagesStorage().getChannelPtsSync(j10) == 0) {
                this.channelsPts.put(j10, messages_messages.pts);
                if (this.needShortPollChannels.indexOfKey(j10) < 0 || this.shortPollChannels.indexOfKey(j10) >= 0) {
                    i14 = 1;
                    j4 = 0;
                    getChannelDifference(j10);
                } else {
                    j4 = 0;
                    i14 = 1;
                    getChannelDifference(j10, 2, 0L, null);
                }
                z6 = true;
                if (!z) {
                    ImageLoader.saveMessagesThumbs(messages_messages.messages);
                }
                boolean z10 = i4 != 0 && i3 == 0;
                longSparseArray = new LongSparseArray();
                longSparseArray2 = new LongSparseArray();
                for (i15 = 0; i15 < messages_messages.users.size(); i15++) {
                    TLRPC.User user = messages_messages.users.get(i15);
                    longSparseArray.put(user.id, user);
                }
                for (i16 = 0; i16 < messages_messages.chats.size(); i16++) {
                    TLRPC.Chat chat = messages_messages.chats.get(i16);
                    longSparseArray2.put(chat.id, chat);
                }
                if (i11 != i14) {
                    j5 = j3;
                    i17 = 1;
                } else if (i11 == 5) {
                    j5 = j3;
                    i17 = 1;
                } else {
                    j5 = j3;
                    i17 = 1;
                    z7 = i11 != 3 ? false : false;
                }
                if (DialogObject.isEncryptedDialog(j) && z && z7) {
                    if (i11 == i17) {
                        longSparseArray7 = this.lastScheduledServerQueryTime;
                    } else {
                        if (i11 == 5) {
                            longSparseArray8 = this.lastQuickReplyServerQueryTime;
                        } else if (i11 == 3) {
                            longSparseArray8 = this.lastSavedServerQueryTime;
                        } else {
                            if (i11 == 0) {
                                longSparseArray7 = this.lastServerQueryTime;
                            }
                            if (i11 == i17) {
                                int size2 = messages_messages.messages.size();
                                j8 = j4;
                                int i22 = 0;
                                while (i22 < size2) {
                                    int i23 = size2;
                                    int i24 = messages_messages.messages.get(i22).id;
                                    if (i24 >= 0) {
                                        j8 = MediaDataController.calcHash(MediaDataController.calcHash(MediaDataController.calcHash(j8, i24), r7.edit_date), r7.date);
                                    }
                                    i22++;
                                    size2 = i23;
                                }
                            } else {
                                if (i11 == 0 || i11 == 3) {
                                    int size3 = messages_messages.messages.size();
                                    long j11 = j4;
                                    int i25 = 0;
                                    while (i25 < size3) {
                                        TLRPC.Message message = messages_messages.messages.get(i25);
                                        if (message.id < 0) {
                                            longSparseArray10 = longSparseArray2;
                                        } else {
                                            longSparseArray10 = longSparseArray2;
                                            long calcHash2 = MediaDataController.calcHash(MediaDataController.calcHash(j11, Math.abs(DialogObject.getPeerDialogId(message.peer_id))), message.id);
                                            if (message.pinned) {
                                                calcHash2 = MediaDataController.calcHash(calcHash2, 1L);
                                            }
                                            int i26 = message.date;
                                            if ((message.flags & 32768) != 0) {
                                                i26 = message.edit_date;
                                            }
                                            j11 = MediaDataController.calcHash(calcHash2, i26);
                                        }
                                        i25++;
                                        longSparseArray2 = longSparseArray10;
                                    }
                                    longSparseArray9 = longSparseArray2;
                                    j7 = j11;
                                } else if (i11 == 5) {
                                    int size4 = messages_messages.messages.size();
                                    j8 = j4;
                                    int i27 = 0;
                                    while (i27 < size4) {
                                        TLRPC.Message message2 = messages_messages.messages.get(i27);
                                        int i28 = message2.id;
                                        int i29 = size4;
                                        if (i28 < 0) {
                                            calcHash = j8;
                                        } else {
                                            long calcHash3 = MediaDataController.calcHash(j8, i28);
                                            if ((message2.flags & 32768) != 0) {
                                                calcHash = MediaDataController.calcHash(calcHash3, message2.edit_date);
                                            } else {
                                                j9 = j4;
                                                calcHash = MediaDataController.calcHash(calcHash3, j9);
                                                i27++;
                                                j4 = j9;
                                                j8 = calcHash;
                                                size4 = i29;
                                            }
                                        }
                                        j9 = j4;
                                        i27++;
                                        j4 = j9;
                                        j8 = calcHash;
                                        size4 = i29;
                                    }
                                } else {
                                    longSparseArray9 = longSparseArray2;
                                    j7 = j4;
                                }
                                longSparseArray3 = longSparseArray9;
                                longSparseArray4 = longSparseArray;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                                    }
                                });
                                messages_messages2 = messages_messages;
                                if (messages_messages2.messages.isEmpty()) {
                                    return;
                                }
                            }
                            j7 = j8;
                            longSparseArray9 = longSparseArray2;
                            longSparseArray3 = longSparseArray9;
                            longSparseArray4 = longSparseArray;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                                }
                            });
                            messages_messages2 = messages_messages;
                            if (messages_messages2.messages.isEmpty()) {
                            }
                        }
                        longSparseArray8.put(j5, Long.valueOf(SystemClock.elapsedRealtime()));
                        if (i11 == i17) {
                        }
                        j7 = j8;
                        longSparseArray9 = longSparseArray2;
                        longSparseArray3 = longSparseArray9;
                        longSparseArray4 = longSparseArray;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                            }
                        });
                        messages_messages2 = messages_messages;
                        if (messages_messages2.messages.isEmpty()) {
                        }
                    }
                    longSparseArray7.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
                    if (i11 == i17) {
                    }
                    j7 = j8;
                    longSparseArray9 = longSparseArray2;
                    longSparseArray3 = longSparseArray9;
                    longSparseArray4 = longSparseArray;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                        }
                    });
                    messages_messages2 = messages_messages;
                    if (messages_messages2.messages.isEmpty()) {
                    }
                } else {
                    longSparseArray3 = longSparseArray2;
                    longSparseArray4 = longSparseArray;
                    messages_messages2 = messages_messages;
                }
                size = messages_messages2.messages.size();
                if (z) {
                    Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                    if (num == null) {
                        j6 = j;
                        z8 = false;
                        num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j6));
                        this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
                    } else {
                        j6 = j;
                        z8 = false;
                    }
                    Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                    if (num2 == null) {
                        z9 = true;
                        num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j6));
                        this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
                    } else {
                        z9 = true;
                    }
                    int i30 = 0;
                    while (i30 < size) {
                        TLRPC.Message message3 = messages_messages2.messages.get(i30);
                        if (i11 == 0) {
                            TLRPC.MessageAction messageAction = message3.action;
                            if (messageAction instanceof TLRPC.TL_messageActionChatDeleteUser) {
                                longSparseArray6 = longSparseArray4;
                                TLRPC.User user2 = (TLRPC.User) longSparseArray6.get(messageAction.user_id);
                                if (user2 != null && user2.bot) {
                                    message3.reply_markup = new TLRPC.TL_replyKeyboardHide();
                                    message3.flags |= 64;
                                }
                            } else {
                                longSparseArray6 = longSparseArray4;
                            }
                            TLRPC.MessageAction messageAction2 = message3.action;
                            if ((messageAction2 instanceof TLRPC.TL_messageActionChatMigrateTo) || (messageAction2 instanceof TLRPC.TL_messageActionChannelCreate)) {
                                message3.unread = z8;
                                message3.media_unread = z8;
                            } else {
                                if (j3 == j4) {
                                    message3.unread = (message3.out ? num2 : num).intValue() < message3.id;
                                } else {
                                    message3.unread = z9;
                                }
                                z8 = false;
                            }
                        } else {
                            longSparseArray6 = longSparseArray4;
                        }
                        i30++;
                        longSparseArray4 = longSparseArray6;
                    }
                    LongSparseArray longSparseArray11 = longSparseArray4;
                    if (j3 != j4 && !z5) {
                        if (i11 != 3 && i11 != 5) {
                            longSparseArray5 = longSparseArray11;
                            i18 = i11;
                            i19 = 3;
                            if (i18 != i19) {
                                getSavedMessagesController().update(j3, messages_messages2);
                            }
                        }
                    }
                    i19 = 3;
                    longSparseArray5 = longSparseArray11;
                    i18 = i11;
                    getMessagesStorage().putMessages(messages_messages, j, i10, i3, z6, i11, j3);
                    if (i18 != i19) {
                    }
                } else {
                    j6 = j;
                    i18 = i11;
                    longSparseArray5 = longSparseArray4;
                    i19 = 3;
                }
                if (z4 && DialogObject.isEncryptedDialog(j)) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda41
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$processLoadedMessages$179(i5, messages_messages, z, z2, i7);
                        }
                    });
                    return;
                }
                final ArrayList<MessageObject> arrayList = new ArrayList<>();
                final ArrayList arrayList2 = new ArrayList();
                final HashMap hashMap = new HashMap();
                i20 = 0;
                while (i20 < size) {
                    TLRPC.Message message4 = messages_messages2.messages.get(i20);
                    message4.dialog_id = j6;
                    SystemClock.elapsedRealtime();
                    int i31 = size;
                    MessageObject messageObject = new MessageObject(this.currentAccount, message4, longSparseArray5, longSparseArray3, true, false, i18 == i19);
                    messageObject.scheduled = i11 == 1;
                    arrayList.add(messageObject);
                    if (z) {
                        if ((message4.legacy && message4.layer < 193) || ((MessageObject.getMedia(message4) instanceof TLRPC.TL_messageMediaUnsupported) && MessageObject.getMedia(message4).bytes != null && (MessageObject.getMedia(message4).bytes.length == 0 || ((MessageObject.getMedia(message4).bytes.length == 1 && MessageObject.getMedia(message4).bytes[0] < 193) || (MessageObject.getMedia(message4).bytes.length == 4 && Utilities.bytesToInt(MessageObject.getMedia(message4).bytes) < 193))))) {
                            arrayList2.add(Integer.valueOf(message4.id));
                        }
                        if (MessageObject.getMedia(message4) instanceof TLRPC.TL_messageMediaWebPage) {
                            if ((MessageObject.getMedia(message4).webpage instanceof TLRPC.TL_webPagePending) && MessageObject.getMedia(message4).webpage.date <= getConnectionsManager().getCurrentTime()) {
                                arrayList2.add(Integer.valueOf(message4.id));
                            } else if (MessageObject.getMedia(message4).webpage instanceof TLRPC.TL_webPageUrlPending) {
                                ArrayList arrayList3 = (ArrayList) hashMap.get(MessageObject.getMedia(message4).webpage.url);
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                    hashMap.put(MessageObject.getMedia(message4).webpage.url, arrayList3);
                                }
                                arrayList3.add(messageObject);
                            }
                        }
                    }
                    i20++;
                    messages_messages2 = messages_messages;
                    j6 = j;
                    i18 = i11;
                    size = i31;
                    i19 = 3;
                }
                i21 = i18;
                getFileLoader().checkMediaExistance(arrayList);
                if (MessageObject.canCreateStripedThubms()) {
                    for (int i32 = 0; i32 < arrayList.size(); i32++) {
                        arrayList.get(i32).createStrippedThumb();
                    }
                }
                if (!BuildVars.LOGS_ENABLED) {
                    FileLog.d("process time=" + (SystemClock.elapsedRealtime() - elapsedRealtime) + " count=" + arrayList.size() + " for dialog  " + j);
                }
                if (i21 != 1) {
                    Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda42
                        @Override // java.util.Comparator
                        public final int compare(Object obj, Object obj2) {
                            int lambda$processLoadedMessages$180;
                            lambda$processLoadedMessages$180 = MessagesController.lambda$processLoadedMessages$180((MessageObject) obj, (MessageObject) obj2);
                            return lambda$processLoadedMessages$180;
                        }
                    });
                } else if (i21 == 5) {
                    Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda43
                        @Override // java.util.Comparator
                        public final int compare(Object obj, Object obj2) {
                            int lambda$processLoadedMessages$181;
                            lambda$processLoadedMessages$181 = MessagesController.lambda$processLoadedMessages$181((MessageObject) obj, (MessageObject) obj2);
                            return lambda$processLoadedMessages$181;
                        }
                    });
                    for (int i33 = 0; i33 < arrayList.size(); i33++) {
                        MessageObject messageObject2 = arrayList.get(i33);
                        if (messageObject2.isReply()) {
                            int i34 = messageObject2.messageOwner.reply_to.reply_to_msg_id;
                            int i35 = 0;
                            while (true) {
                                if (i35 >= arrayList.size()) {
                                    break;
                                }
                                if (i33 == i35 || arrayList.get(i35) == messageObject2 || arrayList.get(i35).getId() != i34) {
                                    i35++;
                                } else {
                                    messageObject2.replyMessageObject = arrayList.get(i35);
                                    messageObject2.applyTimestampsHighlightForReplyMsg();
                                    TLRPC.MessageAction messageAction3 = messageObject2.messageOwner.action;
                                    if (messageAction3 instanceof TLRPC.TL_messageActionPinMessage) {
                                        messageObject2.generatePinMessageText(null, null);
                                    } else if (messageAction3 instanceof TLRPC.TL_messageActionGameScore) {
                                        messageObject2.generateGameMessageText(null);
                                    } else if (messageAction3 instanceof TLRPC.TL_messageActionPaymentSent) {
                                        messageObject2.generatePaymentSentMessageText(null);
                                    }
                                }
                            }
                        }
                    }
                }
                Timer.done(start);
                final Timer.Task start2 = Timer.start(timer, "processLoadedMessages: runOnUIThread");
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda44
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$processLoadedMessages$183(start2, timer, messages_messages, z, z4, i11, z3, i10, i6, i2, j, arrayList, j3, i5, i, z2, i7, i8, i9, i12, i3, i13, arrayList2, hashMap);
                    }
                });
            }
        }
        j4 = 0;
        i14 = 1;
        z6 = false;
        if (!z) {
        }
        if (i4 != 0) {
        }
        longSparseArray = new LongSparseArray();
        longSparseArray2 = new LongSparseArray();
        while (i15 < messages_messages.users.size()) {
        }
        while (i16 < messages_messages.chats.size()) {
        }
        if (i11 != i14) {
        }
        if (DialogObject.isEncryptedDialog(j)) {
        }
        longSparseArray3 = longSparseArray2;
        longSparseArray4 = longSparseArray;
        messages_messages2 = messages_messages;
        size = messages_messages2.messages.size();
        if (z) {
        }
        if (z4) {
        }
        final ArrayList arrayList4 = new ArrayList<>();
        final ArrayList arrayList22 = new ArrayList();
        final HashMap hashMap2 = new HashMap();
        i20 = 0;
        while (i20 < size) {
        }
        i21 = i18;
        getFileLoader().checkMediaExistance(arrayList4);
        if (MessageObject.canCreateStripedThubms()) {
        }
        if (!BuildVars.LOGS_ENABLED) {
        }
        if (i21 != 1) {
        }
        Timer.done(start);
        final Timer.Task start22 = Timer.start(timer, "processLoadedMessages: runOnUIThread");
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda44
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedMessages$183(start22, timer, messages_messages, z, z4, i11, z3, i10, i6, i2, j, arrayList4, j3, i5, i, z2, i7, i8, i9, i12, i3, i13, arrayList22, hashMap2);
            }
        });
    }

    protected void processNewChannelDifferenceParams(int i, int i2, long j) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + j);
        }
        int i3 = this.channelsPts.get(j);
        if (i3 == 0) {
            i3 = getMessagesStorage().getChannelPtsSync(j);
            if (i3 == 0) {
                i3 = 1;
            }
            this.channelsPts.put(j, i3);
        }
        if (i3 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(j, i);
            getMessagesStorage().saveChannelPts(j, i);
            return;
        }
        if (i3 != i) {
            long j2 = this.updatesStartWaitTimeChannels.get(j);
            if (!((Boolean) this.gettingDifferenceChannels.get(j, Boolean.FALSE)).booleanValue() && j2 != 0 && Math.abs(System.currentTimeMillis() - j2) > 1500) {
                getChannelDifference(j);
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
            }
            if (j2 == 0) {
                this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
            }
            UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts(null);
            userActionUpdatesPts.pts = i;
            userActionUpdatesPts.pts_count = i2;
            userActionUpdatesPts.chat_id = j;
            ArrayList arrayList = (ArrayList) this.updatesQueueChannels.get(j);
            if (arrayList == null) {
                arrayList = new ArrayList();
                this.updatesQueueChannels.put(j, arrayList);
            }
            arrayList.add(userActionUpdatesPts);
        }
    }

    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        1 r0 = null;
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts(r0);
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i != -1) {
            if (getMessagesStorage().getLastSeqValue() + 1 == i) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY SEQ");
                }
                getMessagesStorage().setLastSeqValue(i);
                if (i3 != -1) {
                    getMessagesStorage().setLastDateValue(i3);
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                return;
            }
            if (getMessagesStorage().getLastSeqValue() != i) {
                if (!this.gettingDifference && this.updatesStartWaitTimeSeq != 0 && Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) > 1500) {
                    getDifference();
                    return;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq(r0);
                userActionUpdatesSeq.seq = i;
                this.updatesQueueSeq.add(userActionUpdatesSeq);
            }
        }
    }

    /*  JADX ERROR: Type inference failed
        jadx.core.utils.exceptions.JadxOverflowException: Type inference error: updates count limit reached
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:59)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:31)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:19)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:77)
        */
    public boolean processUpdateArray(java.util.ArrayList<org.telegram.tgnet.TLRPC.Update> r76, java.util.ArrayList<org.telegram.tgnet.TLRPC.User> r77, java.util.ArrayList<org.telegram.tgnet.TLRPC.Chat> r78, boolean r79, int r80) {
        /*
            Method dump skipped, instructions count: 6916
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    /* JADX WARN: Code restructure failed: missing block: B:250:0x03fc, code lost:
    
        r2 = r9.pts_count + r1;
        r3 = r9.pts;
     */
    /* JADX WARN: Code restructure failed: missing block: B:251:0x0401, code lost:
    
        if (r2 != r3) goto L184;
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x0403, code lost:
    
        r1 = r9.updates;
        r2 = r7.users;
        r3 = r7.chats;
        r12 = r7.date;
        r15 = r8;
        r7 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:253:0x0416, code lost:
    
        if (processUpdateArray(r1, r2, r3, false, r12) != false) goto L183;
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x041a, code lost:
    
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L175;
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x041c, code lost:
    
        org.telegram.messenger.FileLog.d("need get channel diff inner TL_updates, channel_id = " + r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x0430, code lost:
    
        r2 = r23;
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x0432, code lost:
    
        if (r2 != null) goto L180;
     */
    /* JADX WARN: Code restructure failed: missing block: B:259:0x0434, code lost:
    
        r0 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:260:0x0439, code lost:
    
        r7 = r30;
        r5 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:262:0x0447, code lost:
    
        if (r2.contains(java.lang.Long.valueOf(r7)) != false) goto L214;
     */
    /* JADX WARN: Code restructure failed: missing block: B:263:0x04d9, code lost:
    
        r2.add(java.lang.Long.valueOf(r7));
     */
    /* JADX WARN: Code restructure failed: missing block: B:264:0x044b, code lost:
    
        r2 = r23;
        r29.channelsPts.put(r7, r9.pts);
        getMessagesStorage().saveChannelPts(r7, r9.pts);
     */
    /* JADX WARN: Code restructure failed: missing block: B:265:0x045f, code lost:
    
        r15 = r8;
        r2 = r23;
        r7 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:266:0x0463, code lost:
    
        if (r1 == r3) goto L214;
     */
    /* JADX WARN: Code restructure failed: missing block: B:268:0x0467, code lost:
    
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L189;
     */
    /* JADX WARN: Code restructure failed: missing block: B:269:0x0469, code lost:
    
        org.telegram.messenger.FileLog.d(r0 + " need get channel diff, pts: " + r1 + " " + r9.pts + " count = " + r9.pts_count + " channelId = " + r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:270:0x0498, code lost:
    
        r0 = r29.updatesStartWaitTimeChannels.get(r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:271:0x04ac, code lost:
    
        if (((java.lang.Boolean) r29.gettingDifferenceChannels.get(r7, java.lang.Boolean.FALSE)).booleanValue() != false) goto L195;
     */
    /* JADX WARN: Code restructure failed: missing block: B:273:0x04b2, code lost:
    
        if (r0 == 0) goto L195;
     */
    /* JADX WARN: Code restructure failed: missing block: B:275:0x04c1, code lost:
    
        if (java.lang.Math.abs(java.lang.System.currentTimeMillis() - r0) > 1500) goto L196;
     */
    /* JADX WARN: Code restructure failed: missing block: B:276:0x04c6, code lost:
    
        if (r2 != null) goto L198;
     */
    /* JADX WARN: Code restructure failed: missing block: B:277:0x04c8, code lost:
    
        r0 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:279:0x04d7, code lost:
    
        if (r2.contains(java.lang.Long.valueOf(r7)) != false) goto L214;
     */
    /* JADX WARN: Code restructure failed: missing block: B:282:0x04e3, code lost:
    
        if (r0 != 0) goto L204;
     */
    /* JADX WARN: Code restructure failed: missing block: B:283:0x04e5, code lost:
    
        r29.updatesStartWaitTimeChannels.put(r7, java.lang.System.currentTimeMillis());
     */
    /* JADX WARN: Code restructure failed: missing block: B:285:0x04f0, code lost:
    
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L207;
     */
    /* JADX WARN: Code restructure failed: missing block: B:286:0x04f2, code lost:
    
        org.telegram.messenger.FileLog.d("add to queue");
     */
    /* JADX WARN: Code restructure failed: missing block: B:287:0x04f5, code lost:
    
        r0 = (java.util.ArrayList) r29.updatesQueueChannels.get(r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:288:0x04fd, code lost:
    
        if (r0 != null) goto L210;
     */
    /* JADX WARN: Code restructure failed: missing block: B:289:0x04ff, code lost:
    
        r0 = new java.util.ArrayList();
        r29.updatesQueueChannels.put(r7, r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:290:0x0509, code lost:
    
        r0.add(r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:455:0x074e, code lost:
    
        if (r2 != null) goto L329;
     */
    /* JADX WARN: Code restructure failed: missing block: B:457:0x0752, code lost:
    
        if (r17 != null) goto L332;
     */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0115  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0539 A[LOOP:4: B:102:0x012b->B:125:0x0539, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:126:0x0536 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:305:0x0635  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0a08  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x06f1  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0a25  */
    /* JADX WARN: Removed duplicated region for block: B:335:0x0711  */
    /* JADX WARN: Removed duplicated region for block: B:349:0x076b  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x07db  */
    /* JADX WARN: Removed duplicated region for block: B:379:0x07de  */
    /* JADX WARN: Removed duplicated region for block: B:448:0x0725  */
    /* JADX WARN: Removed duplicated region for block: B:459:0x070b  */
    /* JADX WARN: Removed duplicated region for block: B:8:0x09ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processUpdates(TLRPC.Updates updates, boolean z) {
        TLRPC.User user;
        TLRPC.Chat chat;
        boolean z2;
        long j;
        TLRPC.User user2;
        boolean z3;
        boolean z4;
        String str;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        TLRPC.TL_peerUser tL_peerUser;
        TLRPC.UserStatus userStatus;
        int i;
        TLRPC.Chat chat2;
        MessagesStorage messagesStorage;
        long j2;
        ArrayList arrayList;
        boolean z9;
        boolean z10;
        boolean z11;
        ArrayList arrayList2;
        boolean z12;
        ArrayList arrayList3;
        int i2;
        StringBuilder sb;
        int i3;
        ArrayList arrayList4;
        boolean z13;
        boolean z14;
        ArrayList arrayList5;
        final TLRPC.Updates updates2 = updates;
        int i4 = 0;
        if (!(updates2 instanceof TLRPC.TL_updateShort)) {
            boolean z15 = updates2 instanceof TLRPC.TL_updateShortChatMessage;
            int i5 = 1;
            if (!z15 && !(updates2 instanceof TLRPC.TL_updateShortMessage)) {
                if ((updates2 instanceof TLRPC.TL_updatesCombined) || (updates2 instanceof TLRPC.TL_updates)) {
                    LongSparseArray longSparseArray = null;
                    for (int i6 = 0; i6 < updates2.chats.size(); i6++) {
                        TLRPC.Chat chat3 = updates2.chats.get(i6);
                        if ((chat3 instanceof TLRPC.TL_channel) && chat3.min) {
                            TLRPC.Chat chat4 = getChat(Long.valueOf(chat3.id));
                            if (chat4 == null || chat4.min) {
                                chat4 = getMessagesStorage().getChatSync(updates2.chat_id);
                                putChat(chat4, true);
                            }
                            if (chat4 == null || chat4.min) {
                                if (longSparseArray == null) {
                                    longSparseArray = new LongSparseArray();
                                }
                                longSparseArray.put(chat3.id, chat3);
                            }
                        }
                    }
                    if (longSparseArray != null) {
                        for (int i7 = 0; i7 < updates2.updates.size(); i7++) {
                            TLRPC.Update update = updates2.updates.get(i7);
                            if (update instanceof TLRPC.TL_updateNewChannelMessage) {
                                long j3 = ((TLRPC.TL_updateNewChannelMessage) update).message.peer_id.channel_id;
                                if (longSparseArray.indexOfKey(j3) >= 0) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("need get diff because of min channel " + j3);
                                    }
                                    z10 = true;
                                    if (!z10) {
                                        z9 = z10;
                                        z8 = false;
                                        z7 = false;
                                        arrayList = null;
                                        getSecretChatHelper().processPendingEncMessages();
                                        if (!z) {
                                        }
                                        if (z8) {
                                        }
                                        if (z7) {
                                        }
                                        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                                    }
                                    getMessagesStorage().putUsersAndChats(updates2.users, updates2.chats, true, true);
                                    Collections.sort(updates2.updates, this.updatesComparator);
                                    boolean z16 = z10;
                                    ArrayList arrayList6 = null;
                                    z11 = false;
                                    while (true) {
                                        if (updates2.updates.size() <= 0) {
                                            arrayList2 = arrayList6;
                                            z12 = z16;
                                            break;
                                        }
                                        TLRPC.Update update2 = updates2.updates.get(i4);
                                        if (getUpdateType(update2) != 0) {
                                            arrayList4 = arrayList6;
                                            if (getUpdateType(update2) != 1) {
                                                if (getUpdateType(update2) != 2) {
                                                    z12 = z16;
                                                    arrayList2 = arrayList4;
                                                    break;
                                                }
                                                long updateChannelId = getUpdateChannelId(update2);
                                                int i8 = this.channelsPts.get(updateChannelId);
                                                if (i8 == 0) {
                                                    i8 = getMessagesStorage().getChannelPtsSync(updateChannelId);
                                                    if (i8 == 0) {
                                                        int i9 = 0;
                                                        while (i9 < updates2.chats.size()) {
                                                            TLRPC.Chat chat5 = updates2.chats.get(i9);
                                                            int i10 = i9;
                                                            if (chat5.id == updateChannelId) {
                                                                loadUnknownChannel(chat5, 0L);
                                                                z13 = true;
                                                                break;
                                                            }
                                                            i9 = i10 + 1;
                                                        }
                                                    } else {
                                                        this.channelsPts.put(updateChannelId, i8);
                                                    }
                                                }
                                                z13 = false;
                                                TLRPC.TL_updates tL_updates = new TLRPC.TL_updates();
                                                tL_updates.updates.add(update2);
                                                tL_updates.pts = getUpdatePts(update2);
                                                tL_updates.pts_count = getUpdatePtsCount(update2);
                                                while (1 < updates2.updates.size()) {
                                                    TLRPC.Update update3 = updates2.updates.get(1);
                                                    int updatePts = getUpdatePts(update3);
                                                    int updatePtsCount = getUpdatePtsCount(update3);
                                                    if (getUpdateType(update3) != 2 || updateChannelId != getUpdateChannelId(update3) || tL_updates.pts + updatePtsCount != updatePts) {
                                                        break;
                                                    }
                                                    tL_updates.updates.add(update3);
                                                    tL_updates.pts = updatePts;
                                                    tL_updates.pts_count += updatePtsCount;
                                                    updates2.updates.remove(1);
                                                }
                                                z14 = z16;
                                                arrayList5 = arrayList4;
                                                if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("need load unknown channel = " + updateChannelId);
                                                }
                                                updates2 = updates;
                                                arrayList6 = arrayList5;
                                                z16 = z14;
                                                if (updates2.updates.size() > 0) {
                                                }
                                            } else {
                                                TLRPC.TL_updates tL_updates2 = new TLRPC.TL_updates();
                                                tL_updates2.updates.add(update2);
                                                tL_updates2.pts = getUpdateQts(update2);
                                                while (1 < updates2.updates.size()) {
                                                    TLRPC.Update update4 = updates2.updates.get(1);
                                                    int updateQts = getUpdateQts(update4);
                                                    if (getUpdateType(update4) != 1 || tL_updates2.pts + 1 != updateQts) {
                                                        break;
                                                    }
                                                    tL_updates2.updates.add(update4);
                                                    tL_updates2.pts = updateQts;
                                                    updates2.updates.remove(1);
                                                }
                                                if (getMessagesStorage().getLastQtsValue() == 0 || getMessagesStorage().getLastQtsValue() + tL_updates2.updates.size() == tL_updates2.pts) {
                                                    processUpdateArray(tL_updates2.updates, updates2.users, updates2.chats, false, updates2.date);
                                                    getMessagesStorage().setLastQtsValue(tL_updates2.pts);
                                                    arrayList6 = arrayList4;
                                                    z11 = true;
                                                    if (updates2.updates.size() > 0) {
                                                    }
                                                } else {
                                                    if (getMessagesStorage().getLastPtsValue() != tL_updates2.pts) {
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d(update2 + " need get diff, qts: " + getMessagesStorage().getLastQtsValue() + " " + tL_updates2.pts);
                                                        }
                                                        if (this.gettingDifference || this.updatesStartWaitTimeQts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeQts) <= 1500) {
                                                            if (this.updatesStartWaitTimeQts == 0) {
                                                                this.updatesStartWaitTimeQts = System.currentTimeMillis();
                                                            }
                                                            if (BuildVars.LOGS_ENABLED) {
                                                                FileLog.d("add to queue");
                                                            }
                                                            this.updatesQueueQts.add(tL_updates2);
                                                        }
                                                        arrayList6 = arrayList4;
                                                        z16 = true;
                                                        if (updates2.updates.size() > 0) {
                                                        }
                                                    }
                                                    z14 = z16;
                                                    arrayList5 = arrayList4;
                                                    updates2 = updates;
                                                    arrayList6 = arrayList5;
                                                    z16 = z14;
                                                    if (updates2.updates.size() > 0) {
                                                    }
                                                }
                                            }
                                        } else {
                                            TLRPC.TL_updates tL_updates3 = new TLRPC.TL_updates();
                                            tL_updates3.updates.add(update2);
                                            tL_updates3.pts = getUpdatePts(update2);
                                            tL_updates3.pts_count = getUpdatePtsCount(update2);
                                            while (i5 < updates2.updates.size()) {
                                                TLRPC.Update update5 = updates2.updates.get(i5);
                                                int updatePts2 = getUpdatePts(update5);
                                                int updatePtsCount2 = getUpdatePtsCount(update5);
                                                if (getUpdateType(update5) != 0 || tL_updates3.pts + updatePtsCount2 != updatePts2) {
                                                    break;
                                                }
                                                tL_updates3.updates.add(update5);
                                                tL_updates3.pts = updatePts2;
                                                tL_updates3.pts_count += updatePtsCount2;
                                                updates2.updates.remove(i5);
                                            }
                                            if (getMessagesStorage().getLastPtsValue() + tL_updates3.pts_count == tL_updates3.pts) {
                                                arrayList4 = arrayList6;
                                                if (processUpdateArray(tL_updates3.updates, updates2.users, updates2.chats, false, updates2.date)) {
                                                    getMessagesStorage().setLastPtsValue(tL_updates3.pts);
                                                    z14 = z16;
                                                    arrayList5 = arrayList4;
                                                    updates2 = updates;
                                                    arrayList6 = arrayList5;
                                                    z16 = z14;
                                                    if (updates2.updates.size() > 0) {
                                                    }
                                                } else {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d("need get diff inner TL_updates, pts: " + getMessagesStorage().getLastPtsValue() + " " + updates2.seq);
                                                    }
                                                    arrayList6 = arrayList4;
                                                    z16 = true;
                                                    if (updates2.updates.size() > 0) {
                                                        z12 = z16;
                                                        arrayList3 = arrayList6;
                                                        break;
                                                    } else {
                                                        updates2.updates.remove(0);
                                                        i4 = 0;
                                                        i5 = 1;
                                                    }
                                                }
                                            } else {
                                                arrayList4 = arrayList6;
                                                if (getMessagesStorage().getLastPtsValue() != tL_updates3.pts) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d(update2 + " need get diff, pts: " + getMessagesStorage().getLastPtsValue() + " " + tL_updates3.pts + " count = " + tL_updates3.pts_count);
                                                    }
                                                    if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                                        if (this.updatesStartWaitTimePts == 0) {
                                                            this.updatesStartWaitTimePts = System.currentTimeMillis();
                                                        }
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("add to queue");
                                                        }
                                                        this.updatesQueuePts.add(tL_updates3);
                                                    }
                                                    arrayList6 = arrayList4;
                                                    z16 = true;
                                                    if (updates2.updates.size() > 0) {
                                                    }
                                                }
                                                z14 = z16;
                                                arrayList5 = arrayList4;
                                                updates2 = updates;
                                                arrayList6 = arrayList5;
                                                z16 = z14;
                                                if (updates2.updates.size() > 0) {
                                                }
                                            }
                                        }
                                        getSecretChatHelper().processPendingEncMessages();
                                        if (!z) {
                                        }
                                        if (z8) {
                                        }
                                        if (z7) {
                                        }
                                        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                                    }
                                    arrayList3 = arrayList2;
                                    boolean z17 = updates2 instanceof TLRPC.TL_updatesCombined;
                                    int lastSeqValue = getMessagesStorage().getLastSeqValue() + 1;
                                    if (!z17 ? lastSeqValue == (i2 = updates2.seq) || i2 == 0 || i2 == getMessagesStorage().getLastSeqValue() : lastSeqValue == updates2.seq_start || getMessagesStorage().getLastSeqValue() == updates2.seq_start) {
                                        processUpdateArray(updates2.updates, updates2.users, updates2.chats, false, updates2.date);
                                        if (updates2.seq != 0) {
                                            if (updates2.date != 0) {
                                                getMessagesStorage().setLastDateValue(updates2.date);
                                            }
                                        }
                                    } else {
                                        if (BuildVars.LOGS_ENABLED) {
                                            if (z17) {
                                                sb = new StringBuilder();
                                                sb.append("need get diff TL_updatesCombined, seq: ");
                                                sb.append(getMessagesStorage().getLastSeqValue());
                                                sb.append(" ");
                                                i3 = updates2.seq_start;
                                            } else {
                                                sb = new StringBuilder();
                                                sb.append("need get diff TL_updates, seq: ");
                                                sb.append(getMessagesStorage().getLastSeqValue());
                                                sb.append(" ");
                                                i3 = updates2.seq;
                                            }
                                            sb.append(i3);
                                            FileLog.d(sb.toString());
                                        }
                                        if (!this.gettingDifference && this.updatesStartWaitTimeSeq != 0 && Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) > 1500) {
                                            arrayList = arrayList3;
                                            z8 = z11;
                                            z7 = false;
                                            z9 = true;
                                            getSecretChatHelper().processPendingEncMessages();
                                            if (!z) {
                                            }
                                            if (z8) {
                                            }
                                            if (z7) {
                                            }
                                            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                                        }
                                        if (this.updatesStartWaitTimeSeq == 0) {
                                            this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                                        }
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("add TL_updates/Combined to queue");
                                        }
                                        this.updatesQueueSeq.add(updates2);
                                    }
                                    z9 = z12;
                                    z8 = z11;
                                    arrayList = arrayList3;
                                    z7 = false;
                                    getSecretChatHelper().processPendingEncMessages();
                                    if (!z) {
                                    }
                                    if (z8) {
                                    }
                                    if (z7) {
                                    }
                                    getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                                }
                            }
                        }
                    }
                    z10 = false;
                    if (!z10) {
                    }
                } else if (updates2 instanceof TLRPC.TL_updatesTooLong) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("need get diff TL_updatesTooLong");
                    }
                    z7 = false;
                } else if (updates2 instanceof UserActionUpdatesSeq) {
                    arrayList3 = null;
                    z12 = false;
                    z11 = false;
                } else if (updates2 instanceof UserActionUpdatesPts) {
                    long j4 = updates2.chat_id;
                    if (j4 != 0) {
                        this.channelsPts.put(j4, updates2.pts);
                        getMessagesStorage().saveChannelPts(updates2.chat_id, updates2.pts);
                    } else {
                        getMessagesStorage().setLastPtsValue(updates2.pts);
                    }
                }
                getMessagesStorage().setLastSeqValue(updates2.seq);
                z9 = z12;
                z8 = z11;
                arrayList = arrayList3;
                z7 = false;
                getSecretChatHelper().processPendingEncMessages();
                if (!z) {
                }
                if (z8) {
                }
                if (z7) {
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            }
            final long j5 = z15 ? updates2.from_id : updates2.user_id;
            TLRPC.User user3 = getUser(Long.valueOf(j5));
            FileLog.d("update message short userId = " + j5);
            if (user3 == null || user3.min) {
                user3 = getMessagesStorage().getUserSync(j5);
                if (user3 != null && user3.min) {
                    user3 = null;
                }
                putUser(user3, true);
            }
            TLRPC.MessageFwdHeader messageFwdHeader = updates2.fwd_from;
            if (messageFwdHeader != null) {
                TLRPC.Peer peer = messageFwdHeader.from_id;
                if (peer instanceof TLRPC.TL_peerUser) {
                    user = getUser(Long.valueOf(peer.user_id));
                    if (user == null) {
                        user = getMessagesStorage().getUserSync(updates2.fwd_from.from_id.user_id);
                        putUser(user, true);
                    }
                    chat = null;
                } else if (peer instanceof TLRPC.TL_peerChannel) {
                    chat2 = getChat(Long.valueOf(peer.channel_id));
                    if (chat2 == null) {
                        messagesStorage = getMessagesStorage();
                        j2 = updates2.fwd_from.from_id.channel_id;
                        chat2 = messagesStorage.getChatSync(j2);
                        putChat(chat2, true);
                    }
                    chat = chat2;
                    user = null;
                } else if (peer instanceof TLRPC.TL_peerChat) {
                    chat2 = getChat(Long.valueOf(peer.chat_id));
                    if (chat2 == null) {
                        messagesStorage = getMessagesStorage();
                        j2 = updates2.fwd_from.from_id.chat_id;
                        chat2 = messagesStorage.getChatSync(j2);
                        putChat(chat2, true);
                    }
                    chat = chat2;
                    user = null;
                }
                z2 = true;
                j = updates2.via_bot_id;
                if (j == 0) {
                    user2 = getUser(Long.valueOf(j));
                    if (user2 == null) {
                        user2 = getMessagesStorage().getUserSync(updates2.via_bot_id);
                        putUser(user2, true);
                    }
                    z3 = true;
                } else {
                    user2 = null;
                    z3 = false;
                }
                z4 = updates2 instanceof TLRPC.TL_updateShortMessage;
                if (z4) {
                    TLRPC.User user4 = user2;
                    TLRPC.Chat chat6 = getChat(Long.valueOf(updates2.chat_id));
                    if (chat6 == null) {
                        str = " count = ";
                        chat6 = getMessagesStorage().getChatSync(updates2.chat_id);
                        putChat(chat6, true);
                    } else {
                        str = " count = ";
                    }
                    if (chat6 != null) {
                        if (user3 != null) {
                            if (z2) {
                                if (user == null) {
                                }
                            }
                            if (z3) {
                            }
                            z5 = false;
                        }
                    }
                    z5 = true;
                } else if (user3 == null || ((z2 && user == null && chat == null) || (z3 && user2 == null))) {
                    str = " count = ";
                    z5 = true;
                } else {
                    str = " count = ";
                    z5 = false;
                }
                if (!z5 && !updates2.entities.isEmpty()) {
                    for (i = 0; i < updates2.entities.size(); i++) {
                        TLRPC.MessageEntity messageEntity = updates2.entities.get(i);
                        if (messageEntity instanceof TLRPC.TL_messageEntityMentionName) {
                            long j6 = ((TLRPC.TL_messageEntityMentionName) messageEntity).user_id;
                            TLRPC.User user5 = getUser(Long.valueOf(j6));
                            if (user5 == null || user5.min) {
                                TLRPC.User userSync = getMessagesStorage().getUserSync(j6);
                                if (userSync != null && userSync.min) {
                                    userSync = null;
                                }
                                if (userSync == null) {
                                    z6 = true;
                                    break;
                                }
                                putUser(user3, true);
                            }
                        }
                    }
                }
                z6 = z5;
                if (!updates2.out || user3 == null || (userStatus = user3.status) == null || userStatus.expires > 0 || Math.abs(getConnectionsManager().getCurrentTime() - updates2.date) >= 30) {
                    z7 = false;
                } else {
                    this.onlinePrivacy.put(Long.valueOf(user3.id), Integer.valueOf(updates2.date));
                    z7 = true;
                }
                if (!z6) {
                    if (getMessagesStorage().getLastPtsValue() + updates2.pts_count == updates2.pts) {
                        TLRPC.TL_message tL_message = new TLRPC.TL_message();
                        tL_message.id = updates2.id;
                        long clientUserId = getUserConfig().getClientUserId();
                        if (z4) {
                            tL_peerUser = new TLRPC.TL_peerUser();
                            tL_message.from_id = tL_peerUser;
                            if (updates2.out) {
                                tL_peerUser.user_id = clientUserId;
                            } else {
                                tL_peerUser.user_id = j5;
                            }
                            TLRPC.TL_peerUser tL_peerUser2 = new TLRPC.TL_peerUser();
                            tL_message.peer_id = tL_peerUser2;
                            tL_peerUser2.user_id = j5;
                            tL_message.dialog_id = j5;
                        } else {
                            tL_peerUser = new TLRPC.TL_peerUser();
                            tL_message.from_id = tL_peerUser;
                            tL_peerUser.user_id = j5;
                            TLRPC.TL_peerChat tL_peerChat = new TLRPC.TL_peerChat();
                            tL_message.peer_id = tL_peerChat;
                            long j7 = updates2.chat_id;
                            tL_peerChat.chat_id = j7;
                            tL_message.dialog_id = -j7;
                        }
                        tL_message.fwd_from = updates2.fwd_from;
                        tL_message.silent = updates2.silent;
                        tL_message.out = updates2.out;
                        tL_message.mentioned = updates2.mentioned;
                        tL_message.media_unread = updates2.media_unread;
                        tL_message.entities = updates2.entities;
                        tL_message.message = updates2.message;
                        tL_message.date = updates2.date;
                        tL_message.via_bot_id = updates2.via_bot_id;
                        tL_message.flags = updates2.flags | 256;
                        tL_message.reply_to = updates2.reply_to;
                        tL_message.ttl_period = updates2.ttl_period;
                        tL_message.media = new TLRPC.TL_messageMediaEmpty();
                        ConcurrentHashMap<Long, Integer> concurrentHashMap = tL_message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                        Integer num = concurrentHashMap.get(Long.valueOf(tL_message.dialog_id));
                        if (num == null) {
                            num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tL_message.out, tL_message.dialog_id));
                            concurrentHashMap.put(Long.valueOf(tL_message.dialog_id), num);
                        }
                        tL_message.unread = num.intValue() < tL_message.id;
                        if (tL_message.dialog_id == clientUserId) {
                            tL_message.unread = false;
                            tL_message.media_unread = false;
                            tL_message.out = true;
                        }
                        getMessagesStorage().setLastPtsValue(updates2.pts);
                        boolean contains = this.createdDialogIds.contains(Long.valueOf(tL_message.dialog_id));
                        MessageObject messageObject = new MessageObject(this.currentAccount, tL_message, contains, contains);
                        final ArrayList<MessageObject> arrayList7 = new ArrayList<>();
                        arrayList7.add(messageObject);
                        ArrayList<TLRPC.Message> arrayList8 = new ArrayList<>();
                        arrayList8.add(tL_message);
                        if (z4) {
                            final boolean z18 = !updates2.out && updatePrintingUsersWithNewMessages(updates2.user_id, arrayList7);
                            if (z18) {
                                updatePrintingStrings();
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda23
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdates$354(z18, j5, arrayList7);
                                }
                            });
                        } else {
                            final boolean updatePrintingUsersWithNewMessages = updatePrintingUsersWithNewMessages(-updates2.chat_id, arrayList7);
                            if (updatePrintingUsersWithNewMessages) {
                                updatePrintingStrings();
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda24
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdates$355(updatePrintingUsersWithNewMessages, updates2, arrayList7);
                                }
                            });
                        }
                        if (!messageObject.isOut()) {
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda25
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdates$357(arrayList7);
                                }
                            });
                        }
                        getMessagesStorage().putMessages(arrayList8, false, true, false, 0, 0, 0L);
                    } else if (getMessagesStorage().getLastPtsValue() != updates2.pts) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("need get diff short message, pts: " + getMessagesStorage().getLastPtsValue() + " " + updates2.pts + str + updates2.pts_count);
                        }
                        if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                            if (this.updatesStartWaitTimePts == 0) {
                                this.updatesStartWaitTimePts = System.currentTimeMillis();
                            }
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("add to queue");
                            }
                            this.updatesQueuePts.add(updates2);
                        }
                    }
                    z8 = false;
                    arrayList = null;
                    z9 = false;
                    getSecretChatHelper().processPendingEncMessages();
                    if (!z) {
                        for (int i11 = 0; i11 < this.updatesQueueChannels.size(); i11++) {
                            long keyAt = this.updatesQueueChannels.keyAt(i11);
                            if (arrayList == null || !arrayList.contains(Long.valueOf(keyAt))) {
                                processChannelsUpdatesQueue(keyAt, 0);
                            } else {
                                getChannelDifference(keyAt);
                            }
                        }
                        if (z9) {
                            getDifference();
                        } else {
                            for (int i12 = 0; i12 < 3; i12++) {
                                processUpdatesQueue(i12, 0);
                            }
                        }
                    }
                    if (z8) {
                        TLRPC.TL_messages_receivedQueue tL_messages_receivedQueue = new TLRPC.TL_messages_receivedQueue();
                        tL_messages_receivedQueue.max_qts = getMessagesStorage().getLastQtsValue();
                        getConnectionsManager().sendRequest(tL_messages_receivedQueue, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda26
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.lambda$processUpdates$358(tLObject, tL_error);
                            }
                        });
                    }
                    if (z7) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda27
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$processUpdates$359();
                            }
                        });
                    }
                    getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                }
            }
            user = null;
            chat = null;
            z2 = false;
            j = updates2.via_bot_id;
            if (j == 0) {
            }
            z4 = updates2 instanceof TLRPC.TL_updateShortMessage;
            if (z4) {
            }
            if (!z5) {
                while (i < updates2.entities.size()) {
                }
            }
            z6 = z5;
            if (updates2.out) {
            }
            z7 = false;
            if (!z6) {
            }
            z8 = false;
            arrayList = null;
            z9 = true;
            getSecretChatHelper().processPendingEncMessages();
            if (!z) {
            }
            if (z8) {
            }
            if (z7) {
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        }
        ArrayList<TLRPC.Update> arrayList9 = new ArrayList<>();
        arrayList9.add(updates2.update);
        processUpdateArray(arrayList9, null, null, false, updates2.date);
        z8 = false;
        z7 = false;
        arrayList = null;
        z9 = false;
        getSecretChatHelper().processPendingEncMessages();
        if (!z) {
        }
        if (z8) {
        }
        if (z7) {
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
    }

    public void processUserInfo(final TLRPC.User user, final TLRPC.UserFull userFull, final boolean z, final boolean z2, final int i, final ArrayList<Integer> arrayList, final HashMap<Integer, MessageObject> hashMap, final int i2, final boolean z3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda149
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUserInfo$142(z, user, i, z2, userFull, arrayList, hashMap, i2, z3);
            }
        });
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC.DraftMessage draftMessage = (TLRPC.DraftMessage) ((LongSparseArray) drafts.valueAt(i)).get(0L);
            if (draftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), draftMessage);
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:78:0x0241  */
    /* JADX WARN: Removed duplicated region for block: B:83:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void putChat(final TLRPC.Chat chat, boolean z) {
        TLRPC.Chat chat2;
        if (chat == null || (chat2 = this.chats.get(Long.valueOf(chat.id))) == chat) {
            return;
        }
        if (chat2 != null && !TextUtils.isEmpty(chat2.username)) {
            this.objectsByUsernames.remove(chat2.username.toLowerCase());
        }
        if (chat2 != null && chat2.usernames != null) {
            for (int i = 0; i < chat2.usernames.size(); i++) {
                TLRPC.TL_username tL_username = chat2.usernames.get(i);
                if (tL_username != null && !TextUtils.isEmpty(tL_username.username)) {
                    this.objectsByUsernames.remove(tL_username.username.toLowerCase());
                }
            }
        }
        if (!TextUtils.isEmpty(chat.username)) {
            this.objectsByUsernames.put(chat.username.toLowerCase(), chat);
        }
        if (chat.usernames != null) {
            for (int i2 = 0; i2 < chat.usernames.size(); i2++) {
                TLRPC.TL_username tL_username2 = chat.usernames.get(i2);
                if (tL_username2 != null && !TextUtils.isEmpty(tL_username2.username) && tL_username2.active) {
                    this.objectsByUsernames.put(tL_username2.username.toLowerCase(), chat);
                }
            }
        }
        updateEmojiStatusUntilUpdate(-chat.id, chat.emoji_status);
        if (chat.min) {
            if (chat2 != null) {
                if (!z) {
                    getUserNameResolver().update(chat2, chat);
                    chat2.title = chat.title;
                    chat2.photo = chat.photo;
                    chat2.broadcast = chat.broadcast;
                    chat2.verified = chat.verified;
                    chat2.megagroup = chat.megagroup;
                    chat2.call_not_empty = chat.call_not_empty;
                    chat2.call_active = chat.call_active;
                    TLRPC.TL_chatBannedRights tL_chatBannedRights = chat.default_banned_rights;
                    if (tL_chatBannedRights != null) {
                        chat2.default_banned_rights = tL_chatBannedRights;
                        chat2.flags |= 262144;
                    }
                    TLRPC.TL_chatAdminRights tL_chatAdminRights = chat.admin_rights;
                    if (tL_chatAdminRights != null) {
                        chat2.admin_rights = tL_chatAdminRights;
                        chat2.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                    }
                    TLRPC.TL_chatBannedRights tL_chatBannedRights2 = chat.banned_rights;
                    if (tL_chatBannedRights2 != null) {
                        chat2.banned_rights = tL_chatBannedRights2;
                        chat2.flags |= 32768;
                    }
                    String str = chat.username;
                    if (str != null) {
                        chat2.username = str;
                        chat2.flags |= 64;
                    } else {
                        chat2.flags &= -65;
                        chat2.username = null;
                    }
                    int i3 = chat.participants_count;
                    if (i3 != 0) {
                        chat2.participants_count = i3;
                    }
                    addOrRemoveActiveVoiceChat(chat2);
                    boolean z2 = chat2.forum;
                    boolean z3 = chat.forum;
                    if (z2 != z3) {
                        chat2.forum = z3;
                        int i4 = chat2.flags;
                        chat2.flags = z3 ? i4 | 1073741824 : i4 & (-1073741825);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatSwithcedToForum, Long.valueOf(chat.id));
                    }
                }
                if (chat2 == null || chat2.forum == chat.forum) {
                    return;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda449
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$putChat$54(chat);
                    }
                });
                return;
            }
        } else if (z) {
            if (chat2 != null) {
                if (chat2.min) {
                    chat.title = chat2.title;
                    chat.photo = chat2.photo;
                    chat.broadcast = chat2.broadcast;
                    chat.verified = chat2.verified;
                    chat.megagroup = chat2.megagroup;
                    TLRPC.TL_chatBannedRights tL_chatBannedRights3 = chat2.default_banned_rights;
                    if (tL_chatBannedRights3 != null) {
                        chat.default_banned_rights = tL_chatBannedRights3;
                        chat.flags |= 262144;
                    }
                    TLRPC.TL_chatAdminRights tL_chatAdminRights2 = chat2.admin_rights;
                    if (tL_chatAdminRights2 != null) {
                        chat.admin_rights = tL_chatAdminRights2;
                        chat.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                    }
                    TLRPC.TL_chatBannedRights tL_chatBannedRights4 = chat2.banned_rights;
                    if (tL_chatBannedRights4 != null) {
                        chat.banned_rights = tL_chatBannedRights4;
                        chat.flags |= 32768;
                    }
                    String str2 = chat2.username;
                    if (str2 != null) {
                        chat.username = str2;
                        chat.flags |= 64;
                    } else {
                        chat.flags &= -65;
                        chat.username = null;
                    }
                    int i5 = chat2.participants_count;
                    if (i5 != 0 && chat.participants_count == 0) {
                        chat.participants_count = i5;
                        chat.flags |= 131072;
                    }
                }
                addOrRemoveActiveVoiceChat(chat);
                if (chat2 == null) {
                    return;
                } else {
                    return;
                }
            }
        } else if (chat2 != null) {
            if (chat.version != chat2.version) {
                this.loadedFullChats.delete(chat.id);
            }
            int i6 = chat2.participants_count;
            if (i6 != 0 && chat.participants_count == 0) {
                chat.participants_count = i6;
                chat.flags |= 131072;
            }
            TLRPC.TL_chatBannedRights tL_chatBannedRights5 = chat2.banned_rights;
            int i7 = tL_chatBannedRights5 != null ? tL_chatBannedRights5.flags : 0;
            TLRPC.TL_chatBannedRights tL_chatBannedRights6 = chat.banned_rights;
            int i8 = tL_chatBannedRights6 != null ? tL_chatBannedRights6.flags : 0;
            TLRPC.TL_chatBannedRights tL_chatBannedRights7 = chat2.default_banned_rights;
            int i9 = tL_chatBannedRights7 != null ? tL_chatBannedRights7.flags : 0;
            TLRPC.TL_chatBannedRights tL_chatBannedRights8 = chat.default_banned_rights;
            int i10 = tL_chatBannedRights8 != null ? tL_chatBannedRights8.flags : 0;
            chat2.default_banned_rights = tL_chatBannedRights8;
            chat2.flags = tL_chatBannedRights8 == null ? chat2.flags & (-262145) : 262144 | chat2.flags;
            chat2.banned_rights = tL_chatBannedRights6;
            chat2.flags = tL_chatBannedRights6 == null ? chat2.flags & (-32769) : chat2.flags | 32768;
            TLRPC.TL_chatAdminRights tL_chatAdminRights3 = chat.admin_rights;
            chat2.admin_rights = tL_chatAdminRights3;
            chat2.flags = tL_chatAdminRights3 == null ? chat2.flags & (-16385) : chat2.flags | LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
            if (chat.stories_hidden_min) {
                chat.stories_hidden = chat2.stories_hidden;
            }
            if (i7 != i8 || i9 != i10) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda448
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$putChat$53(chat);
                    }
                });
            }
        }
        this.chats.put(Long.valueOf(chat.id), chat);
        addOrRemoveActiveVoiceChat(chat);
        if (chat2 == null) {
        }
    }

    public void putChatFull(TLRPC.ChatFull chatFull) {
        this.fullChats.put(chatFull.id, chatFull);
        getTranslateController().updateDialogFull(-chatFull.id);
    }

    public void putChats(ArrayList<TLRPC.Chat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putChat(arrayList.get(i), z);
        }
    }

    public void putDialogsEndReachedAfterRegistration() {
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, true);
    }

    public void putDraftDialogIfNeed(long j, TLRPC.DraftMessage draftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            if (size > 0) {
                TLRPC.Dialog dialog = this.allDialogs.get(size - 1);
                if (draftMessage.date < DialogObject.getLastMessageOrDraftDate(dialog, mediaDataController.getDraft(dialog.id, 0L))) {
                    return;
                }
            }
            TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
            tL_dialog.id = j;
            tL_dialog.draft = draftMessage;
            tL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            tL_dialog.flags = (j >= 0 || !ChatObject.isChannel(getChat(Long.valueOf(-j)))) ? 0 : 1;
            this.dialogs_dict.put(j, tL_dialog);
            this.allDialogs.add(tL_dialog);
            sortDialogs(null);
        }
    }

    public void putEncryptedChat(TLRPC.EncryptedChat encryptedChat, boolean z) {
        if (encryptedChat == null) {
            return;
        }
        if (z) {
            this.encryptedChats.putIfAbsent(Integer.valueOf(encryptedChat.id), encryptedChat);
        } else {
            this.encryptedChats.put(Integer.valueOf(encryptedChat.id), encryptedChat);
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putEncryptedChat(arrayList.get(i), z);
        }
    }

    public void putGroupCall(long j, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(j, call);
        TLRPC.ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(call.call.id), Boolean.FALSE);
        loadFullChat(j, 0, true);
    }

    public boolean putUser(TLRPC.User user, boolean z) {
        return putUser(user, z, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:26:0x0054  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0085  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x00f8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean putUser(TLRPC.User user, boolean z, boolean z2) {
        boolean z3;
        TLRPC.User user2;
        TLRPC.UserStatus userStatus;
        TLRPC.UserStatus userStatus2;
        String str;
        int i;
        String str2;
        if (user == null) {
            return false;
        }
        if (z) {
            long j = user.id;
            if (j / 1000 != 333 && j != 777000) {
                z3 = true;
                user2 = this.users.get(Long.valueOf(user.id));
                if (user2 != user && !z2) {
                    return false;
                }
                if (user2 != null && !TextUtils.isEmpty(user2.username)) {
                    this.objectsByUsernames.remove(user2.username.toLowerCase());
                }
                if (user2 != null && user2.usernames != null) {
                    for (i = 0; i < user2.usernames.size(); i++) {
                        TLRPC.TL_username tL_username = user2.usernames.get(i);
                        if (tL_username != null && (str2 = tL_username.username) != null) {
                            this.objectsByUsernames.remove(str2.toLowerCase());
                        }
                    }
                }
                if (!TextUtils.isEmpty(user.username)) {
                    this.objectsByUsernames.put(user.username.toLowerCase(), user);
                }
                if (user.usernames != null) {
                    for (int i2 = 0; i2 < user.usernames.size(); i2++) {
                        TLRPC.TL_username tL_username2 = user.usernames.get(i2);
                        if (tL_username2 != null && (str = tL_username2.username) != null && tL_username2.active) {
                            this.objectsByUsernames.put(str.toLowerCase(), user);
                        }
                    }
                }
                updateEmojiStatusUntilUpdate(user.id, user.emoji_status);
                if (!user.min) {
                    if (user2 != null) {
                        if (!z3) {
                            getUserNameResolver().update(user2, user);
                            if (user.bot) {
                                String str3 = user.username;
                                if (str3 != null) {
                                    user2.username = str3;
                                    user2.flags |= 8;
                                } else {
                                    user2.flags &= -9;
                                    user2.username = null;
                                }
                            }
                            if (user.apply_min_photo) {
                                TLRPC.UserProfilePhoto userProfilePhoto = user.photo;
                                if (userProfilePhoto != null) {
                                    user2.photo = userProfilePhoto;
                                    user2.flags |= 32;
                                } else {
                                    user2.flags &= -33;
                                    user2.photo = null;
                                }
                            }
                        }
                    }
                    this.users.put(Long.valueOf(user.id), user);
                } else if (z3) {
                    if (user2 != null) {
                        if (user2.min) {
                            if (user2.bot) {
                                String str4 = user2.username;
                                if (str4 != null) {
                                    user.username = str4;
                                    user.flags |= 8;
                                } else {
                                    user.flags &= -9;
                                    user.username = null;
                                }
                            }
                            if (user2.apply_min_photo) {
                                TLRPC.UserProfilePhoto userProfilePhoto2 = user2.photo;
                                if (userProfilePhoto2 != null) {
                                    user.photo = userProfilePhoto2;
                                    user.flags |= 32;
                                } else {
                                    user.flags &= -33;
                                    user.photo = null;
                                }
                            }
                        }
                    }
                    this.users.put(Long.valueOf(user.id), user);
                } else {
                    this.users.put(Long.valueOf(user.id), user);
                    if (user.id == getUserConfig().getClientUserId()) {
                        getUserConfig().setCurrentUser(user);
                        getUserConfig().saveConfig(true);
                    }
                    getUserNameResolver().update(user2, user);
                    if (user2 != null && (userStatus = user.status) != null && (userStatus2 = user2.status) != null && userStatus.expires != userStatus2.expires) {
                        return true;
                    }
                }
                return false;
            }
        }
        z3 = false;
        user2 = this.users.get(Long.valueOf(user.id));
        if (user2 != user) {
        }
        if (user2 != null) {
            this.objectsByUsernames.remove(user2.username.toLowerCase());
        }
        if (user2 != null) {
            while (i < user2.usernames.size()) {
            }
        }
        if (!TextUtils.isEmpty(user.username)) {
        }
        if (user.usernames != null) {
        }
        updateEmojiStatusUntilUpdate(user.id, user.emoji_status);
        if (!user.min) {
        }
        return false;
    }

    public void putUsers(ArrayList<TLRPC.User> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        boolean z2 = false;
        for (int i = 0; i < size; i++) {
            if (putUser(arrayList.get(i), z)) {
                z2 = true;
            }
        }
        if (z2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda441
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$putUsers$52();
                }
            });
        }
    }

    public void registerForPush(final int i, final String str) {
        if (TextUtils.isEmpty(str) || this.registeringForPush || getUserConfig().getClientUserId() == 0) {
            return;
        }
        if (getUserConfig().registeredForPush && str.equals(SharedConfig.pushString)) {
            return;
        }
        this.registeringForPush = true;
        this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
        if (SharedConfig.pushAuthKey == null) {
            SharedConfig.pushAuthKey = new byte[256];
            Utilities.random.nextBytes(SharedConfig.pushAuthKey);
            SharedConfig.saveConfig();
        }
        TLRPC.TL_account_registerDevice tL_account_registerDevice = new TLRPC.TL_account_registerDevice();
        tL_account_registerDevice.token_type = i;
        tL_account_registerDevice.token = str;
        tL_account_registerDevice.no_muted = false;
        tL_account_registerDevice.secret = SharedConfig.pushAuthKey;
        for (int i2 = 0; i2 < 4; i2++) {
            UserConfig userConfig = UserConfig.getInstance(i2);
            if (i2 != this.currentAccount && userConfig.isClientActivated()) {
                long clientUserId = userConfig.getClientUserId();
                tL_account_registerDevice.other_uids.add(Long.valueOf(clientUserId));
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                }
            }
        }
        getConnectionsManager().sendRequest(tL_account_registerDevice, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda360
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$registerForPush$302(i, str, tLObject, tL_error);
            }
        });
    }

    public void reloadMentionsCountForChannel(final TLRPC.InputPeer inputPeer, final long j) {
        Exception e;
        NativeByteBuffer nativeByteBuffer;
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 4);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer = null;
            }
            try {
                nativeByteBuffer.writeInt32(22);
                inputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                TLRPC.TL_messages_getUnreadMentions tL_messages_getUnreadMentions = new TLRPC.TL_messages_getUnreadMentions();
                tL_messages_getUnreadMentions.peer = inputPeer;
                tL_messages_getUnreadMentions.limit = 1;
                getConnectionsManager().sendRequest(tL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda132
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$reloadMentionsCountForChannel$210(inputPeer, j, tLObject, tL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        TLRPC.TL_messages_getUnreadMentions tL_messages_getUnreadMentions2 = new TLRPC.TL_messages_getUnreadMentions();
        tL_messages_getUnreadMentions2.peer = inputPeer;
        tL_messages_getUnreadMentions2.limit = 1;
        getConnectionsManager().sendRequest(tL_messages_getUnreadMentions2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda132
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reloadMentionsCountForChannel$210(inputPeer, j, tLObject, tL_error);
            }
        });
    }

    public void reloadMentionsCountForChannels(final ArrayList<Long> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda434
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$211(arrayList);
            }
        });
    }

    public void reloadReactionsNotifySettings() {
        getConnectionsManager().sendRequest(new TLRPC.TL_account_getReactionsNotifySettings(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda293
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reloadReactionsNotifySettings$194(tLObject, tL_error);
            }
        });
    }

    public void reloadUser(long j) {
        TLRPC.TL_users_getUsers tL_users_getUsers = new TLRPC.TL_users_getUsers();
        TLRPC.InputUser inputUser = getInputUser(j);
        if (inputUser == null) {
            return;
        }
        tL_users_getUsers.id.add(inputUser);
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tL_users_getUsers, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda48
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reloadUser$51(tLObject, tL_error);
            }
        });
    }

    public void reloadWebPages(final long j, HashMap<String, ArrayList<MessageObject>> hashMap, final int i) {
        HashMap<String, ArrayList<MessageObject>> hashMap2;
        LongSparseArray longSparseArray;
        boolean z = i == 1;
        boolean z2 = i == 3;
        if (z) {
            hashMap2 = this.reloadingScheduledWebpages;
            longSparseArray = this.reloadingScheduledWebpagesPending;
        } else if (z2) {
            hashMap2 = this.reloadingSavedWebpages;
            longSparseArray = this.reloadingSavedWebpagesPending;
        } else {
            hashMap2 = this.reloadingWebpages;
            longSparseArray = this.reloadingWebpagesPending;
        }
        final HashMap<String, ArrayList<MessageObject>> hashMap3 = hashMap2;
        final LongSparseArray longSparseArray2 = longSparseArray;
        for (Map.Entry<String, ArrayList<MessageObject>> entry : hashMap.entrySet()) {
            final String key = entry.getKey();
            ArrayList<MessageObject> value = entry.getValue();
            ArrayList<MessageObject> arrayList = hashMap3.get(key);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                hashMap3.put(key, arrayList);
            }
            arrayList.addAll(value);
            TLRPC.TL_messages_getWebPagePreview tL_messages_getWebPagePreview = new TLRPC.TL_messages_getWebPagePreview();
            tL_messages_getWebPagePreview.message = key;
            getConnectionsManager().sendRequest(tL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda433
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$reloadWebPages$177(hashMap3, key, longSparseArray2, j, i, tLObject, tL_error);
                }
            });
        }
    }

    protected void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC.Message> arrayList) {
        int i = 0;
        int i2 = this.deletedHistory.get(j, 0);
        if (i2 == 0) {
            return;
        }
        int size = arrayList.size();
        while (i < size) {
            if (arrayList.get(i).id <= i2) {
                arrayList.remove(i);
                i--;
                size--;
            }
            i++;
        }
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.remove(j);
        } else {
            this.deletingDialogs.remove(j);
            if (!z2) {
                this.allDialogs.add(dialog);
                sortDialogs(null);
            }
        }
        if (z2) {
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC.Dialog dialog = (TLRPC.Dialog) this.dialogs_dict.get(j);
        if (dialog == null || dialog.top_message != 0) {
            return;
        }
        this.dialogs_dict.remove(dialog.id);
        this.allDialogs.remove(dialog);
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    public Pair<Runnable, Runnable> removeFolderTemporarily(final int i, ArrayList<Long> arrayList) {
        this.frozenDialogFilters = new ArrayList<>(this.dialogFilters);
        int i2 = 0;
        while (i2 < this.frozenDialogFilters.size()) {
            if (this.frozenDialogFilters.get(i2).id == i) {
                this.frozenDialogFilters.remove(i2);
                i2--;
            }
            i2++;
        }
        this.hiddenUndoChats.clear();
        if (arrayList != null) {
            this.hiddenUndoChats.addAll(arrayList);
        }
        final boolean z = !this.hiddenUndoChats.isEmpty();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        return new Pair<>(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda458
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$removeFolderTemporarily$433(i, z);
            }
        }, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda459
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$removeFolderTemporarily$434(z);
            }
        });
    }

    public void removeSuggestion(long j, String str) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        if (j == 0) {
            if (!this.pendingSuggestions.remove(str) && this.dismissedSuggestions.contains(str)) {
                return;
            }
            this.dismissedSuggestions.add(str);
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            edit.putStringSet("pendingSuggestions", this.pendingSuggestions);
            edit.putStringSet("dismissedSuggestions", this.dismissedSuggestions);
            edit.commit();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
        }
        TLRPC.TL_help_dismissSuggestion tL_help_dismissSuggestion = new TLRPC.TL_help_dismissSuggestion();
        tL_help_dismissSuggestion.suggestion = str;
        tL_help_dismissSuggestion.peer = j == 0 ? new TLRPC.TL_inputPeerEmpty() : getInputPeer(j);
        getConnectionsManager().sendRequest(tL_help_dismissSuggestion, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda401
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$removeSuggestion$35(tLObject, tL_error);
            }
        });
    }

    public void renameSavedReactionTag(ReactionsLayoutInBubble.VisibleReaction visibleReaction, String str) {
        boolean z;
        boolean z2;
        long j;
        String str2;
        long m;
        LongSparseArray longSparseArray = this.reactionTags;
        if (longSparseArray == null) {
            return;
        }
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(0L);
        if (tL_messages_savedReactionsTags == null) {
            LongSparseArray longSparseArray2 = this.reactionTags;
            TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags2 = new TLRPC.TL_messages_savedReactionsTags();
            longSparseArray2.put(0L, tL_messages_savedReactionsTags2);
            tL_messages_savedReactionsTags = tL_messages_savedReactionsTags2;
        }
        int i = 0;
        while (true) {
            if (i >= tL_messages_savedReactionsTags.tags.size()) {
                z = false;
                z2 = false;
                break;
            }
            TLRPC.TL_savedReactionTag tL_savedReactionTag = tL_messages_savedReactionsTags.tags.get(i);
            if (visibleReaction.isSame(tL_savedReactionTag.reaction)) {
                if (TextUtils.isEmpty(str)) {
                    z = tL_savedReactionTag.title != null;
                    tL_savedReactionTag.flags &= -2;
                    tL_savedReactionTag.title = null;
                } else {
                    z = !TextUtils.equals(tL_savedReactionTag.title, str);
                    tL_savedReactionTag.flags |= 1;
                    tL_savedReactionTag.title = str;
                }
                z2 = true;
            } else {
                i++;
            }
        }
        if (!z2) {
            TLRPC.TL_savedReactionTag tL_savedReactionTag2 = new TLRPC.TL_savedReactionTag();
            tL_savedReactionTag2.reaction = visibleReaction.toTLReaction();
            if (!TextUtils.isEmpty(str)) {
                tL_savedReactionTag2.title = str;
            }
            tL_savedReactionTag2.count = 1;
            tL_messages_savedReactionsTags.tags.add(tL_savedReactionTag2);
            z = true;
        }
        if (z) {
            TLRPC.TL_messages_updateSavedReactionTag tL_messages_updateSavedReactionTag = new TLRPC.TL_messages_updateSavedReactionTag();
            tL_messages_updateSavedReactionTag.reaction = visibleReaction.toTLReaction();
            if (!TextUtils.isEmpty(str)) {
                tL_messages_updateSavedReactionTag.flags |= 1;
                tL_messages_updateSavedReactionTag.title = str;
            }
            getConnectionsManager().sendRequest(tL_messages_updateSavedReactionTag, null);
            Collections.sort(tL_messages_savedReactionsTags.tags, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda231
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$renameSavedReactionTag$438;
                    lambda$renameSavedReactionTag$438 = MessagesController.this.lambda$renameSavedReactionTag$438((TLRPC.TL_savedReactionTag) obj, (TLRPC.TL_savedReactionTag) obj2);
                    return lambda$renameSavedReactionTag$438;
                }
            });
            long j2 = 0;
            for (int i2 = 0; i2 < tL_messages_savedReactionsTags.tags.size(); i2++) {
                TLRPC.TL_savedReactionTag tL_savedReactionTag3 = tL_messages_savedReactionsTags.tags.get(i2);
                if (tL_savedReactionTag3.count > 0) {
                    TLRPC.Reaction reaction = tL_savedReactionTag3.reaction;
                    if (reaction instanceof TLRPC.TL_reactionEmoji) {
                        j = MessagesController$$ExternalSyntheticBackport9.m(r7, 0, Utilities.MD5(((TLRPC.TL_reactionEmoji) reaction).emoticon).substring(0, 16).length(), 16);
                    } else {
                        if (reaction instanceof TLRPC.TL_reactionCustomEmoji) {
                            j = ((TLRPC.TL_reactionCustomEmoji) reaction).document_id;
                        }
                        if ((tL_savedReactionTag3.flags & 1) != 0 && (str2 = tL_savedReactionTag3.title) != null) {
                            m = MessagesController$$ExternalSyntheticBackport11.m(r7, 0, Utilities.MD5(str2).substring(0, 16).length(), 16);
                            j2 = MediaDataController.calcHash(j2, m);
                        }
                        j2 = MediaDataController.calcHash(j2, tL_savedReactionTag3.count);
                    }
                    j2 = MediaDataController.calcHash(j2, j);
                    if ((tL_savedReactionTag3.flags & 1) != 0) {
                        m = MessagesController$$ExternalSyntheticBackport11.m(r7, 0, Utilities.MD5(str2).substring(0, 16).length(), 16);
                        j2 = MediaDataController.calcHash(j2, m);
                    }
                    j2 = MediaDataController.calcHash(j2, tL_savedReactionTag3.count);
                }
            }
            tL_messages_savedReactionsTags.hash = j2;
            saveSavedReactionsTags(0L, tL_messages_savedReactionsTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, 0L);
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC.InputDialogPeer> arrayList, final long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC.TL_messages_reorderPinnedDialogs tL_messages_reorderPinnedDialogs = new TLRPC.TL_messages_reorderPinnedDialogs();
        tL_messages_reorderPinnedDialogs.folder_id = i;
        tL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(i);
            if (dialogs.isEmpty()) {
                return;
            }
            ArrayList<Long> arrayList2 = new ArrayList<>();
            ArrayList<Integer> arrayList3 = new ArrayList<>();
            int size = dialogs.size();
            int i2 = 0;
            for (int i3 = 0; i3 < size; i3++) {
                TLRPC.Dialog dialog = dialogs.get(i3);
                if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                    if (!dialog.pinned) {
                        if (dialog.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        arrayList2.add(Long.valueOf(dialog.id));
                        arrayList3.add(Integer.valueOf(dialog.pinnedNum));
                        if (!DialogObject.isEncryptedDialog(dialog.id)) {
                            TLRPC.InputPeer inputPeer = getInputPeer(dialog.id);
                            TLRPC.TL_inputDialogPeer tL_inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                            tL_inputDialogPeer.peer = inputPeer;
                            tL_messages_reorderPinnedDialogs.order.add(tL_inputDialogPeer);
                            i2 += tL_inputDialogPeer.getObjectSize();
                        }
                    }
                }
            }
            getMessagesStorage().setDialogsPinned(arrayList2, arrayList3);
            try {
                nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                try {
                    nativeByteBuffer.writeInt32(16);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tL_messages_reorderPinnedDialogs.order.size());
                    int size2 = tL_messages_reorderPinnedDialogs.order.size();
                    for (int i4 = 0; i4 < size2; i4++) {
                        tL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e) {
                    e = e;
                    FileLog.e(e);
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda178
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$reorderPinnedDialogs$341(j, tLObject, tL_error);
                        }
                    });
                }
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer = null;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            tL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda178
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$341(j, tLObject, tL_error);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void reportSpam(long j, TLRPC.User user, TLRPC.Chat chat, TLRPC.EncryptedChat encryptedChat, boolean z) {
        long j2;
        RequestDelegate requestDelegate;
        long j3;
        ConnectionsManager connectionsManager;
        TLRPC.TL_messages_reportSpam tL_messages_reportSpam;
        if (user == null && chat == null && encryptedChat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            if (encryptedChat == null || encryptedChat.access_hash == 0) {
                return;
            }
            TLRPC.TL_messages_reportEncryptedSpam tL_messages_reportEncryptedSpam = new TLRPC.TL_messages_reportEncryptedSpam();
            TLRPC.TL_inputEncryptedChat tL_inputEncryptedChat = new TLRPC.TL_inputEncryptedChat();
            tL_messages_reportEncryptedSpam.peer = tL_inputEncryptedChat;
            tL_inputEncryptedChat.chat_id = encryptedChat.id;
            tL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
            ConnectionsManager connectionsManager2 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda59
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$reportSpam$70(tLObject, tL_error);
                }
            };
            tL_messages_reportSpam = tL_messages_reportEncryptedSpam;
            connectionsManager = connectionsManager2;
        } else if (z) {
            TLRPC.TL_account_reportPeer tL_account_reportPeer = new TLRPC.TL_account_reportPeer();
            if (chat != null) {
                j3 = -chat.id;
            } else {
                if (user != null) {
                    j3 = user.id;
                }
                tL_account_reportPeer.message = "";
                tL_account_reportPeer.reason = new TLRPC.TL_inputReportReasonGeoIrrelevant();
                ConnectionsManager connectionsManager3 = getConnectionsManager();
                requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda60
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.lambda$reportSpam$71(tLObject, tL_error);
                    }
                };
                tL_messages_reportSpam = tL_account_reportPeer;
                connectionsManager = connectionsManager3;
            }
            tL_account_reportPeer.peer = getInputPeer(j3);
            tL_account_reportPeer.message = "";
            tL_account_reportPeer.reason = new TLRPC.TL_inputReportReasonGeoIrrelevant();
            ConnectionsManager connectionsManager32 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda60
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$reportSpam$71(tLObject, tL_error);
                }
            };
            tL_messages_reportSpam = tL_account_reportPeer;
            connectionsManager = connectionsManager32;
        } else {
            TLRPC.TL_messages_reportSpam tL_messages_reportSpam2 = new TLRPC.TL_messages_reportSpam();
            if (chat != null) {
                j2 = -chat.id;
            } else {
                if (user != null) {
                    j2 = user.id;
                }
                ConnectionsManager connectionsManager4 = getConnectionsManager();
                requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.lambda$reportSpam$72(tLObject, tL_error);
                    }
                };
                tL_messages_reportSpam = tL_messages_reportSpam2;
                connectionsManager = connectionsManager4;
            }
            tL_messages_reportSpam2.peer = getInputPeer(j2);
            ConnectionsManager connectionsManager42 = getConnectionsManager();
            requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$reportSpam$72(tLObject, tL_error);
                }
            };
            tL_messages_reportSpam = tL_messages_reportSpam2;
            connectionsManager = connectionsManager42;
        }
        connectionsManager.sendRequest(tL_messages_reportSpam, requestDelegate, 2);
    }

    public void requestContactToken(final long j, final Utilities.Callback<TLRPC.TL_exportedContactToken> callback) {
        if (callback == null || this.requestingContactToken) {
            return;
        }
        if (this.cachedContactToken != null && r0.expires > System.currentTimeMillis() / 1000) {
            callback.run(this.cachedContactToken);
            return;
        }
        this.requestingContactToken = true;
        final long currentTimeMillis = System.currentTimeMillis();
        getConnectionsManager().sendRequest(new TLRPC.TL_contacts_exportContactToken(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda460
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$requestContactToken$430(callback, j, currentTimeMillis, tLObject, tL_error);
            }
        });
    }

    public void requestContactToken(Utilities.Callback<TLRPC.TL_exportedContactToken> callback) {
        requestContactToken(0L, callback);
    }

    public void saveGif(final Object obj, TLRPC.Document document) {
        if (obj == null || !MessageObject.isGifDocument(document)) {
            return;
        }
        final TLRPC.TL_messages_saveGif tL_messages_saveGif = new TLRPC.TL_messages_saveGif();
        TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
        tL_messages_saveGif.id = tL_inputDocument;
        tL_inputDocument.id = document.id;
        tL_inputDocument.access_hash = document.access_hash;
        byte[] bArr = document.file_reference;
        tL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tL_inputDocument.file_reference = new byte[0];
        }
        tL_messages_saveGif.unsave = false;
        getConnectionsManager().sendRequest(tL_messages_saveGif, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda173
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$saveGif$137(obj, tL_messages_saveGif, tLObject, tL_error);
            }
        });
    }

    public void saveRecentSticker(final Object obj, TLRPC.Document document, boolean z) {
        if (obj == null || document == null) {
            return;
        }
        final TLRPC.TL_messages_saveRecentSticker tL_messages_saveRecentSticker = new TLRPC.TL_messages_saveRecentSticker();
        TLRPC.TL_inputDocument tL_inputDocument = new TLRPC.TL_inputDocument();
        tL_messages_saveRecentSticker.id = tL_inputDocument;
        tL_inputDocument.id = document.id;
        tL_inputDocument.access_hash = document.access_hash;
        byte[] bArr = document.file_reference;
        tL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tL_inputDocument.file_reference = new byte[0];
        }
        tL_messages_saveRecentSticker.unsave = false;
        tL_messages_saveRecentSticker.attached = z;
        getConnectionsManager().sendRequest(tL_messages_saveRecentSticker, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda290
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$saveRecentSticker$138(obj, tL_messages_saveRecentSticker, tLObject, tL_error);
            }
        });
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC.TL_theme tL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tL_theme != null) {
            TLRPC.TL_account_saveTheme tL_account_saveTheme = new TLRPC.TL_account_saveTheme();
            TLRPC.TL_inputTheme tL_inputTheme = new TLRPC.TL_inputTheme();
            tL_inputTheme.id = tL_theme.id;
            tL_inputTheme.access_hash = tL_theme.access_hash;
            tL_account_saveTheme.theme = tL_inputTheme;
            tL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tL_account_saveTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda387
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$saveTheme$112(tLObject, tL_error);
                }
            });
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (z2) {
            return;
        }
        installTheme(themeInfo, themeAccent, z);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void saveThemeToServer(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent) {
        String str;
        File file;
        if (themeInfo == null) {
            return;
        }
        if (themeAccent != 0) {
            str = themeAccent.saveToFile().getAbsolutePath();
            file = themeAccent.getPathToWallpaper();
        } else {
            str = themeInfo.pathToFile;
            file = null;
        }
        final String str2 = str;
        final File file2 = file;
        if (str2 == null || this.uploadingThemes.containsKey(str2)) {
            return;
        }
        this.uploadingThemes.put(str2, themeAccent != 0 ? themeAccent : themeInfo);
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda90
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$116(str2, file2, themeAccent, themeInfo);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0118  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x014e  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0163  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0187  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0102  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void saveWallpaperToServer(File file, Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, final long j) {
        TLRPC.TL_account_saveWallPaper tL_account_saveWallPaper;
        Exception e;
        NativeByteBuffer nativeByteBuffer;
        TLRPC.WallPaper tL_wallPaper;
        long j2;
        int i;
        int i2;
        int i3;
        int i4;
        NativeByteBuffer nativeByteBuffer2 = null;
        if (this.uploadingWallpaper != null) {
            File file2 = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
            if (file != null && (file.getAbsolutePath().equals(this.uploadingWallpaper) || file.equals(file2))) {
                this.uploadingWallpaperInfo = overrideWallpaperInfo;
                return;
            } else {
                getFileLoader().cancelFileUpload(this.uploadingWallpaper, false);
                this.uploadingWallpaper = null;
                this.uploadingWallpaperInfo = null;
            }
        }
        if (file != null) {
            this.uploadingWallpaper = file.getAbsolutePath();
            this.uploadingWallpaperInfo = overrideWallpaperInfo;
            getFileLoader().uploadFile(this.uploadingWallpaper, false, true, ConnectionsManager.FileTypePhoto);
        } else if (!overrideWallpaperInfo.isDefault() && !overrideWallpaperInfo.isColor() && overrideWallpaperInfo.wallpaperId > 0 && !overrideWallpaperInfo.isTheme()) {
            TLRPC.InputWallPaper inputWallpaper = getInputWallpaper(overrideWallpaperInfo);
            TLRPC.TL_wallPaperSettings wallpaperSetting = getWallpaperSetting(overrideWallpaperInfo);
            if (z) {
                TLRPC.TL_account_installWallPaper tL_account_installWallPaper = new TLRPC.TL_account_installWallPaper();
                tL_account_installWallPaper.wallpaper = inputWallpaper;
                tL_account_installWallPaper.settings = wallpaperSetting;
                tL_account_saveWallPaper = tL_account_installWallPaper;
            } else {
                TLRPC.TL_account_saveWallPaper tL_account_saveWallPaper2 = new TLRPC.TL_account_saveWallPaper();
                tL_account_saveWallPaper2.wallpaper = inputWallpaper;
                tL_account_saveWallPaper2.settings = wallpaperSetting;
                tL_account_saveWallPaper = tL_account_saveWallPaper2;
            }
            if (j == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(1024);
                } catch (Exception e2) {
                    e = e2;
                }
                try {
                    nativeByteBuffer.writeInt32(21);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isBlurred);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isMotion);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.color);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.gradientColor1);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.rotation);
                    nativeByteBuffer.writeDouble(overrideWallpaperInfo.intensity);
                    nativeByteBuffer.writeBool(z);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.slug);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.originalFileName);
                    nativeByteBuffer.limit(nativeByteBuffer.position());
                } catch (Exception e3) {
                    e = e3;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$saveWallpaperToServer$117(j, tLObject, tL_error);
                        }
                    });
                    if (overrideWallpaperInfo.isColor()) {
                    }
                    if (overrideWallpaperInfo.isColor()) {
                    }
                    j2 = overrideWallpaperInfo.wallpaperId;
                    if (j2 == 0) {
                    }
                    tL_wallPaper.id = j2;
                    tL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
                    tL_wallPaper.flags |= 4;
                    TLRPC.TL_wallPaperSettings tL_wallPaperSettings = new TLRPC.TL_wallPaperSettings();
                    tL_wallPaper.settings = tL_wallPaperSettings;
                    tL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                    tL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                    i = overrideWallpaperInfo.color;
                    if (i != 0) {
                    }
                    i2 = overrideWallpaperInfo.gradientColor1;
                    if (i2 != 0) {
                    }
                    i3 = overrideWallpaperInfo.gradientColor2;
                    if (i3 != 0) {
                    }
                    i4 = overrideWallpaperInfo.gradientColor3;
                    if (i4 != 0) {
                    }
                    ArrayList<TLRPC.WallPaper> arrayList = new ArrayList<>();
                    arrayList.add(tL_wallPaper);
                    getMessagesStorage().putWallpapers(arrayList, -3);
                    getMessagesStorage().getWallpapers();
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            }
            getConnectionsManager().sendRequest(tL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$saveWallpaperToServer$117(j, tLObject, tL_error);
                }
            });
        }
        if (!(overrideWallpaperInfo.isColor() && overrideWallpaperInfo.gradientColor2 == 0) && overrideWallpaperInfo.wallpaperId <= 0) {
            if (overrideWallpaperInfo.isColor()) {
                tL_wallPaper = new TLRPC.TL_wallPaper();
                tL_wallPaper.slug = overrideWallpaperInfo.slug;
                tL_wallPaper.document = new TLRPC.TL_documentEmpty();
            } else {
                tL_wallPaper = new TLRPC.TL_wallPaperNoFile();
            }
            j2 = overrideWallpaperInfo.wallpaperId;
            if (j2 == 0) {
                long nextLong = Utilities.random.nextLong();
                tL_wallPaper.id = nextLong;
                if (nextLong > 0) {
                    j2 = -nextLong;
                }
                tL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
                tL_wallPaper.flags |= 4;
                TLRPC.TL_wallPaperSettings tL_wallPaperSettings2 = new TLRPC.TL_wallPaperSettings();
                tL_wallPaper.settings = tL_wallPaperSettings2;
                tL_wallPaperSettings2.blur = overrideWallpaperInfo.isBlurred;
                tL_wallPaperSettings2.motion = overrideWallpaperInfo.isMotion;
                i = overrideWallpaperInfo.color;
                if (i != 0) {
                    tL_wallPaperSettings2.background_color = i;
                    int i5 = tL_wallPaperSettings2.flags;
                    tL_wallPaperSettings2.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
                    tL_wallPaperSettings2.flags = i5 | 9;
                }
                i2 = overrideWallpaperInfo.gradientColor1;
                if (i2 != 0) {
                    tL_wallPaperSettings2.second_background_color = i2;
                    tL_wallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
                    tL_wallPaper.settings.flags |= 16;
                }
                i3 = overrideWallpaperInfo.gradientColor2;
                if (i3 != 0) {
                    TLRPC.WallPaperSettings wallPaperSettings = tL_wallPaper.settings;
                    wallPaperSettings.third_background_color = i3;
                    wallPaperSettings.flags |= 32;
                }
                i4 = overrideWallpaperInfo.gradientColor3;
                if (i4 != 0) {
                    TLRPC.WallPaperSettings wallPaperSettings2 = tL_wallPaper.settings;
                    wallPaperSettings2.fourth_background_color = i4;
                    wallPaperSettings2.flags |= 64;
                }
                ArrayList<TLRPC.WallPaper> arrayList2 = new ArrayList<>();
                arrayList2.add(tL_wallPaper);
                getMessagesStorage().putWallpapers(arrayList2, -3);
                getMessagesStorage().getWallpapers();
            }
            tL_wallPaper.id = j2;
            tL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
            tL_wallPaper.flags |= 4;
            TLRPC.TL_wallPaperSettings tL_wallPaperSettings22 = new TLRPC.TL_wallPaperSettings();
            tL_wallPaper.settings = tL_wallPaperSettings22;
            tL_wallPaperSettings22.blur = overrideWallpaperInfo.isBlurred;
            tL_wallPaperSettings22.motion = overrideWallpaperInfo.isMotion;
            i = overrideWallpaperInfo.color;
            if (i != 0) {
            }
            i2 = overrideWallpaperInfo.gradientColor1;
            if (i2 != 0) {
            }
            i3 = overrideWallpaperInfo.gradientColor2;
            if (i3 != 0) {
            }
            i4 = overrideWallpaperInfo.gradientColor3;
            if (i4 != 0) {
            }
            ArrayList<TLRPC.WallPaper> arrayList22 = new ArrayList<>();
            arrayList22.add(tL_wallPaper);
            getMessagesStorage().putWallpapers(arrayList22, -3);
            getMessagesStorage().getWallpapers();
        }
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        DialogFilter dialogFilter2 = dialogFilterArr[i];
        if (dialogFilter2 == dialogFilter) {
            return;
        }
        dialogFilterArr[i] = dialogFilter;
        if (dialogFilterArr[i == 0 ? (char) 1 : (char) 0] == dialogFilter) {
            dialogFilterArr[i == 0 ? (char) 1 : (char) 0] = null;
        }
        if (dialogFilterArr[i] != null) {
            sortDialogs(null);
        } else if (dialogFilter2 != null) {
            dialogFilter2.dialogs.clear();
            dialogFilter2.dialogsForward.clear();
        }
    }

    public void sendBotStart(TLRPC.User user, String str) {
        if (user == null) {
            return;
        }
        TLRPC.TL_messages_startBot tL_messages_startBot = new TLRPC.TL_messages_startBot();
        tL_messages_startBot.bot = getInputUser(user);
        tL_messages_startBot.peer = getInputPeer(user.id);
        tL_messages_startBot.start_param = str;
        tL_messages_startBot.random_id = Utilities.random.nextLong();
        getConnectionsManager().sendRequest(tL_messages_startBot, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda34
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$sendBotStart$272(tLObject, tL_error);
            }
        });
    }

    public boolean sendTyping(long j, long j2, int i, int i2) {
        return sendTyping(j, j2, i, null, i2);
    }

    /* JADX WARN: Code restructure failed: missing block: B:44:0x0171, code lost:
    
        if (r23 == 0) goto L103;
     */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x01c1, code lost:
    
        getConnectionsManager().bindRequestToGuid(r0, r23);
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x01bf, code lost:
    
        if (r23 != 0) goto L102;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean sendTyping(final long j, final long j2, final int i, String str, int i2) {
        int sendRequest;
        TLRPC.SendMessageAction sendMessageAction;
        TLRPC.Chat chat;
        if (i < 0 || i >= this.sendingTypings.length || j == 0) {
            return false;
        }
        long clientUserId = UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId();
        if (j == clientUserId) {
            return false;
        }
        if (j < 0) {
            long j3 = -j;
            if (ChatObject.getSendAsPeerId(getChat(Long.valueOf(j3)), getChatFull(j3)) != clientUserId) {
                return false;
            }
        } else {
            TLRPC.User user = getUser(Long.valueOf(j));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                TLRPC.UserStatus userStatus = user.status;
                if (userStatus != null && userStatus.expires != -100 && !this.onlinePrivacy.containsKey(Long.valueOf(user.id))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        }
        LongSparseArray[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray longSparseArray = longSparseArrayArr[i];
        if (longSparseArray == null) {
            longSparseArray = new LongSparseArray();
            longSparseArrayArr[i] = longSparseArray;
        }
        LongSparseArray longSparseArray2 = (LongSparseArray) longSparseArray.get(j);
        if (longSparseArray2 == null) {
            longSparseArray2 = new LongSparseArray();
            longSparseArray.put(j, longSparseArray2);
        }
        if (longSparseArray2.get(j2) != null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC.TL_messages_setTyping tL_messages_setTyping = new TLRPC.TL_messages_setTyping();
            if (j2 != 0) {
                tL_messages_setTyping.top_msg_id = (int) j2;
                tL_messages_setTyping.flags |= 1;
            }
            TLRPC.InputPeer inputPeer = getInputPeer(j);
            tL_messages_setTyping.peer = inputPeer;
            if (((inputPeer instanceof TLRPC.TL_inputPeerChannel) && ((chat = getChat(Long.valueOf(inputPeer.channel_id))) == null || !chat.megagroup)) || tL_messages_setTyping.peer == null) {
                return false;
            }
            if (i == 0) {
                sendMessageAction = new TLRPC.TL_sendMessageTypingAction();
            } else if (i == 1) {
                sendMessageAction = new TLRPC.TL_sendMessageRecordAudioAction();
            } else if (i == 2) {
                sendMessageAction = new TLRPC.TL_sendMessageCancelAction();
            } else if (i == 3) {
                sendMessageAction = new TLRPC.TL_sendMessageUploadDocumentAction();
            } else if (i == 4) {
                sendMessageAction = new TLRPC.TL_sendMessageUploadPhotoAction();
            } else if (i == 5) {
                sendMessageAction = new TLRPC.TL_sendMessageUploadVideoAction();
            } else if (i == 6) {
                sendMessageAction = new TLRPC.TL_sendMessageGamePlayAction();
            } else if (i == 7) {
                sendMessageAction = new TLRPC.TL_sendMessageRecordRoundAction();
            } else if (i == 8) {
                sendMessageAction = new TLRPC.TL_sendMessageUploadRoundAction();
            } else if (i == 9) {
                sendMessageAction = new TLRPC.TL_sendMessageUploadAudioAction();
            } else if (i == 10) {
                sendMessageAction = new TLRPC.TL_sendMessageChooseStickerAction();
            } else {
                if (i == 11) {
                    TLRPC.TL_sendMessageEmojiInteractionSeen tL_sendMessageEmojiInteractionSeen = new TLRPC.TL_sendMessageEmojiInteractionSeen();
                    tL_sendMessageEmojiInteractionSeen.emoticon = str;
                    sendMessageAction = tL_sendMessageEmojiInteractionSeen;
                }
                longSparseArray2.put(j2, Boolean.TRUE);
                sendRequest = getConnectionsManager().sendRequest(tL_messages_setTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda346
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$sendTyping$163(i, j, j2, tLObject, tL_error);
                    }
                }, 2);
            }
            tL_messages_setTyping.action = sendMessageAction;
            longSparseArray2.put(j2, Boolean.TRUE);
            sendRequest = getConnectionsManager().sendRequest(tL_messages_setTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda346
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$sendTyping$163(i, j, j2, tLObject, tL_error);
                }
            }, 2);
        } else {
            if (i != 0) {
                return false;
            }
            TLRPC.EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr != null && bArr.length > 1 && (encryptedChat instanceof TLRPC.TL_encryptedChat)) {
                TLRPC.TL_messages_setEncryptedTyping tL_messages_setEncryptedTyping = new TLRPC.TL_messages_setEncryptedTyping();
                TLRPC.TL_inputEncryptedChat tL_inputEncryptedChat = new TLRPC.TL_inputEncryptedChat();
                tL_messages_setEncryptedTyping.peer = tL_inputEncryptedChat;
                tL_inputEncryptedChat.chat_id = encryptedChat.id;
                tL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tL_messages_setEncryptedTyping.typing = true;
                longSparseArray2.put(j2, Boolean.TRUE);
                sendRequest = getConnectionsManager().sendRequest(tL_messages_setEncryptedTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda347
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$sendTyping$165(i, j, j2, tLObject, tL_error);
                    }
                }, 2);
            }
        }
        return true;
    }

    public void setBoostsToUnblockRestrictions(final long j, int i) {
        TLRPC.TL_channels_setBoostsToUnblockRestrictions tL_channels_setBoostsToUnblockRestrictions = new TLRPC.TL_channels_setBoostsToUnblockRestrictions();
        tL_channels_setBoostsToUnblockRestrictions.boosts = i;
        tL_channels_setBoostsToUnblockRestrictions.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tL_channels_setBoostsToUnblockRestrictions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda361
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setBoostsToUnblockRestrictions$90(j, tLObject, tL_error);
            }
        });
    }

    public void setChannelSlowMode(final long j, int i) {
        TLRPC.TL_channels_toggleSlowMode tL_channels_toggleSlowMode = new TLRPC.TL_channels_toggleSlowMode();
        tL_channels_toggleSlowMode.seconds = i;
        tL_channels_toggleSlowMode.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tL_channels_toggleSlowMode, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda239
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setChannelSlowMode$88(j, tLObject, tL_error);
            }
        });
    }

    public void setChatPendingRequestsOnClose(long j, int i) {
        this.mainPreferences.edit().putInt("chatPendingRequests" + j, i).apply();
    }

    public void setChatReactions(final long j, int i, List<String> list) {
        TLRPC.ChatReactions tL_chatReactionsAll;
        final TLRPC.TL_messages_setChatAvailableReactions tL_messages_setChatAvailableReactions = new TLRPC.TL_messages_setChatAvailableReactions();
        tL_messages_setChatAvailableReactions.peer = getInputPeer(-j);
        if (i == 2) {
            tL_chatReactionsAll = new TLRPC.TL_chatReactionsNone();
        } else {
            if (i != 0) {
                TLRPC.TL_chatReactionsSome tL_chatReactionsSome = new TLRPC.TL_chatReactionsSome();
                tL_messages_setChatAvailableReactions.available_reactions = tL_chatReactionsSome;
                for (int i2 = 0; i2 < list.size(); i2++) {
                    TLRPC.TL_reactionEmoji tL_reactionEmoji = new TLRPC.TL_reactionEmoji();
                    tL_reactionEmoji.emoticon = list.get(i2);
                    tL_chatReactionsSome.reactions.add(tL_reactionEmoji);
                }
                getConnectionsManager().sendRequest(tL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda187
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$setChatReactions$425(j, tL_messages_setChatAvailableReactions, tLObject, tL_error);
                    }
                });
            }
            tL_chatReactionsAll = new TLRPC.TL_chatReactionsAll();
        }
        tL_messages_setChatAvailableReactions.available_reactions = tL_chatReactionsAll;
        getConnectionsManager().sendRequest(tL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda187
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setChatReactions$425(j, tL_messages_setChatAvailableReactions, tLObject, tL_error);
            }
        });
    }

    public void setContentSettings(boolean z) {
        TL_account.contentSettings contentsettings = this.contentSettings;
        if (contentsettings != null) {
            if (!contentsettings.sensitive_can_change) {
                return;
            } else {
                contentsettings.sensitive_enabled = z;
            }
        }
        if (this.ignoreRestrictionReasons == null) {
            this.ignoreRestrictionReasons = new HashSet();
        }
        Set<String> set = this.ignoreRestrictionReasons;
        if (z) {
            set.add("sensitive");
        } else {
            set.remove("sensitive");
        }
        TL_account.setContentSettings setcontentsettings = new TL_account.setContentSettings();
        setcontentsettings.sensitive_enabled = z;
        getConnectionsManager().sendRequest(setcontentsettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda182
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$setContentSettings$458(tLObject, tL_error);
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x006a  */
    /* JADX WARN: Removed duplicated region for block: B:22:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:9:0x003d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setCustomChatReactions(final long j, int i, List<TLRPC.Reaction> list, int i2, Boolean bool, final Utilities.Callback<TLRPC.TL_error> callback, final Runnable runnable) {
        TLRPC.ChatReactions tL_chatReactionsNone;
        TLRPC.ChatFull chatFull;
        final TLRPC.TL_messages_setChatAvailableReactions tL_messages_setChatAvailableReactions = new TLRPC.TL_messages_setChatAvailableReactions();
        tL_messages_setChatAvailableReactions.peer = getInputPeer(-j);
        if (i == 2 || list.isEmpty()) {
            tL_chatReactionsNone = new TLRPC.TL_chatReactionsNone();
        } else {
            if (i != 0) {
                TLRPC.TL_chatReactionsSome tL_chatReactionsSome = new TLRPC.TL_chatReactionsSome();
                tL_messages_setChatAvailableReactions.available_reactions = tL_chatReactionsSome;
                tL_chatReactionsSome.reactions.addAll(list);
                if (bool != null) {
                    tL_messages_setChatAvailableReactions.flags |= 2;
                    tL_messages_setChatAvailableReactions.paid_enabled = bool.booleanValue();
                }
                tL_messages_setChatAvailableReactions.flags |= 1;
                tL_messages_setChatAvailableReactions.reactions_limit = i2;
                getConnectionsManager().sendRequest(tL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda362
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$setCustomChatReactions$423(j, tL_messages_setChatAvailableReactions, runnable, callback, tLObject, tL_error);
                    }
                });
                chatFull = getChatFull(j);
                if (chatFull == null) {
                    if (chatFull instanceof TLRPC.TL_channelFull) {
                        chatFull.flags2 |= LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM;
                    } else {
                        chatFull.flags |= FileLoaderPriorityQueue.PRIORITY_VALUE_MAX;
                    }
                    chatFull.reactions_limit = i2;
                    if (bool != null) {
                        chatFull.paid_reactions_available = bool.booleanValue();
                    }
                    getMessagesStorage().updateChatInfo(chatFull, false);
                    return;
                }
                return;
            }
            tL_chatReactionsNone = new TLRPC.TL_chatReactionsAll();
        }
        tL_messages_setChatAvailableReactions.available_reactions = tL_chatReactionsNone;
        if (bool != null) {
        }
        tL_messages_setChatAvailableReactions.flags |= 1;
        tL_messages_setChatAvailableReactions.reactions_limit = i2;
        getConnectionsManager().sendRequest(tL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda362
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setCustomChatReactions$423(j, tL_messages_setChatAvailableReactions, runnable, callback, tLObject, tL_error);
            }
        });
        chatFull = getChatFull(j);
        if (chatFull == null) {
        }
    }

    public void setDefaultBannedRole(final long j, TLRPC.TL_chatBannedRights tL_chatBannedRights, final boolean z, final BaseFragment baseFragment) {
        if (tL_chatBannedRights == null) {
            return;
        }
        final TLRPC.TL_messages_editChatDefaultBannedRights tL_messages_editChatDefaultBannedRights = new TLRPC.TL_messages_editChatDefaultBannedRights();
        tL_messages_editChatDefaultBannedRights.peer = getInputPeer(-j);
        tL_messages_editChatDefaultBannedRights.banned_rights = tL_chatBannedRights;
        getConnectionsManager().sendRequest(tL_messages_editChatDefaultBannedRights, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda368
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setDefaultBannedRole$93(j, baseFragment, tL_messages_editChatDefaultBannedRights, z, tLObject, tL_error);
            }
        });
    }

    public void setDefaultSendAs(final long j, long j2) {
        TLRPC.ChatFull chatFull = getChatFull(-j);
        if (chatFull != null) {
            chatFull.default_send_as = getPeer(j2);
            getMessagesStorage().updateChatInfo(chatFull, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateDefaultSendAsPeer, Long.valueOf(j), chatFull.default_send_as);
        }
        TLRPC.TL_messages_saveDefaultSendAs tL_messages_saveDefaultSendAs = new TLRPC.TL_messages_saveDefaultSendAs();
        tL_messages_saveDefaultSendAs.peer = getInputPeer(j);
        tL_messages_saveDefaultSendAs.send_as = getInputPeer(j2);
        getConnectionsManager().sendRequest(tL_messages_saveDefaultSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda323
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setDefaultSendAs$255(j, tLObject, tL_error);
            }
        }, 64);
    }

    public void setDialogHistoryTTL(long j, int i) {
        TLRPC.UserFull userFull;
        TLRPC.TL_messages_setHistoryTTL tL_messages_setHistoryTTL = new TLRPC.TL_messages_setHistoryTTL();
        tL_messages_setHistoryTTL.peer = getInputPeer(j);
        tL_messages_setHistoryTTL.period = i;
        getConnectionsManager().sendRequest(tL_messages_setHistoryTTL, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda257
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setDialogHistoryTTL$128(tLObject, tL_error);
            }
        });
        TLRPC.Dialog dialog = (TLRPC.Dialog) getMessagesController().dialogs_dict.get(j);
        if (dialog != null) {
            dialog.ttl_period = i;
        }
        getMessagesStorage().setDialogTtl(j, i);
        TLRPC.ChatFull chatFull = null;
        if (j > 0) {
            userFull = getUserFull(j);
            if (userFull != null) {
                userFull.ttl_period = i;
                userFull.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
            }
        } else {
            TLRPC.ChatFull chatFull2 = getChatFull(-j);
            if (chatFull2 != null) {
                chatFull2.ttl_period = i;
                chatFull2.flags = chatFull2 instanceof TLRPC.TL_channelFull ? chatFull2.flags | ConnectionsManager.FileTypePhoto : chatFull2.flags | LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
            }
            chatFull = chatFull2;
            userFull = null;
        }
        if (chatFull == null) {
            if (userFull != null) {
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(j), userFull);
            }
        } else {
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.chatInfoDidLoad;
            Boolean bool = Boolean.FALSE;
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, chatFull, 0, bool, bool);
        }
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (z) {
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public void setFolderTags(boolean z) {
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        this.folderTags = z;
        edit.putBoolean("folderTags", z).apply();
    }

    public void setLastCreatedDialogId(final long j, final boolean z, final boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            Long valueOf = Long.valueOf(j);
            if (!z2) {
                arrayList.remove(valueOf);
                SparseArray sparseArray = (SparseArray) this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        ((MessageObject) sparseArray.valueAt(i)).pollVisibleOnScreen = false;
                    }
                }
            } else if (arrayList.contains(valueOf)) {
                return;
            } else {
                arrayList.add(Long.valueOf(j));
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda373
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$50(z, z2, j);
            }
        });
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
        }
    }

    public void setParticipantBannedRole(long j, TLRPC.User user, TLRPC.Chat chat, TLRPC.TL_chatBannedRights tL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        setParticipantBannedRole(j, user, chat, tL_chatBannedRights, z, baseFragment, null);
    }

    public void setParticipantBannedRole(final long j, TLRPC.User user, TLRPC.Chat chat, TLRPC.TL_chatBannedRights tL_chatBannedRights, final boolean z, final BaseFragment baseFragment, final Runnable runnable) {
        if ((user == null && chat == null) || tL_chatBannedRights == null) {
            return;
        }
        final TLRPC.TL_channels_editBanned tL_channels_editBanned = new TLRPC.TL_channels_editBanned();
        tL_channels_editBanned.channel = getInputChannel(j);
        tL_channels_editBanned.participant = user != null ? getInputPeer(user) : getInputPeer(chat);
        tL_channels_editBanned.banned_rights = tL_chatBannedRights;
        getConnectionsManager().sendRequest(tL_channels_editBanned, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda154
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setParticipantBannedRole$86(j, runnable, baseFragment, tL_channels_editBanned, z, tLObject, tL_error);
            }
        });
    }

    public void setReferer(String str) {
        if (str == null) {
            return;
        }
        this.installReferer = str;
        this.mainPreferences.edit().putString("installReferer", str).commit();
    }

    public void setSavedViewAs(boolean z) {
        if (this.savedViewAsChats != z) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            this.savedViewAsChats = z;
            edit.putBoolean("savedViewAsChats", z).apply();
        }
    }

    public void setStoryQuality(boolean z) {
        if (this.storyQualityFull != z) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            this.storyQualityFull = z;
            edit.putBoolean("storyQualityFull", z).apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storyQualityUpdate, new Object[0]);
        }
    }

    public void setUserAdminRole(long j, TLRPC.User user, TLRPC.TL_chatAdminRights tL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2, boolean z3, String str2, Runnable runnable) {
        setUserAdminRole(j, user, tL_chatAdminRights, str, z, baseFragment, z2, z3, str2, runnable, null);
    }

    public void setUserAdminRole(final long j, final TLRPC.User user, TLRPC.TL_chatAdminRights tL_chatAdminRights, String str, final boolean z, final BaseFragment baseFragment, boolean z2, boolean z3, String str2, final Runnable runnable, final ErrorDelegate errorDelegate) {
        int i;
        boolean z4;
        MessagesController messagesController;
        long j2;
        TLRPC.User user2;
        String str3;
        BaseFragment baseFragment2;
        Runnable runnable2;
        if (user == null || tL_chatAdminRights == null) {
            return;
        }
        final TLRPC.Chat chat = getChat(Long.valueOf(j));
        if (ChatObject.isChannel(chat)) {
            final TLRPC.TL_channels_editAdmin tL_channels_editAdmin = new TLRPC.TL_channels_editAdmin();
            tL_channels_editAdmin.channel = getInputChannel(chat);
            tL_channels_editAdmin.user_id = getInputUser(user);
            tL_channels_editAdmin.admin_rights = tL_chatAdminRights;
            tL_channels_editAdmin.rank = str;
            final RequestDelegate requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda223
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$setUserAdminRole$98(j, runnable, chat, user, errorDelegate, baseFragment, tL_channels_editAdmin, z, tLObject, tL_error);
                }
            };
            if (user.bot || !z2) {
                getConnectionsManager().sendRequest(tL_channels_editAdmin, requestDelegate);
                return;
            }
            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda224
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$99(tL_channels_editAdmin, requestDelegate);
                }
            };
            i = 0;
            z4 = true;
            messagesController = this;
            j2 = j;
            user2 = user;
            str3 = str2;
            baseFragment2 = baseFragment;
        } else {
            final TLRPC.TL_messages_editChatAdmin tL_messages_editChatAdmin = new TLRPC.TL_messages_editChatAdmin();
            tL_messages_editChatAdmin.chat_id = j;
            tL_messages_editChatAdmin.user_id = getInputUser(user);
            tL_messages_editChatAdmin.is_admin = z3 || tL_chatAdminRights.change_info || tL_chatAdminRights.delete_messages || tL_chatAdminRights.ban_users || tL_chatAdminRights.invite_users || tL_chatAdminRights.pin_messages || tL_chatAdminRights.add_admins || tL_chatAdminRights.manage_call;
            final RequestDelegate requestDelegate2 = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda225
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$setUserAdminRole$103(j, runnable, baseFragment, tL_messages_editChatAdmin, errorDelegate, tLObject, tL_error);
                }
            };
            if (!tL_messages_editChatAdmin.is_admin && !z2 && TextUtils.isEmpty(str2)) {
                getConnectionsManager().sendRequest(tL_messages_editChatAdmin, requestDelegate2);
                return;
            }
            i = 0;
            z4 = true;
            messagesController = this;
            j2 = j;
            user2 = user;
            str3 = str2;
            baseFragment2 = baseFragment;
            runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda226
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$104(tL_messages_editChatAdmin, requestDelegate2);
                }
            };
        }
        messagesController.addUserToChat(j2, user2, i, str3, baseFragment2, z4, runnable2, errorDelegate);
    }

    public boolean showSensitiveContent() {
        if (this.contentSettings != null && System.currentTimeMillis() - this.contentSettingsLoadedTime < 3600000) {
            return this.contentSettings.sensitive_enabled;
        }
        Set<String> set = this.ignoreRestrictionReasons;
        return set == null || set.contains("sensitive");
    }

    /* JADX WARN: Can't wrap try/catch for region: R(22:7|(4:10|(2:12|13)(1:15)|14|8)|16|17|(18:183|(2:184|(3:186|(1:215)(6:188|189|190|191|(3:193|(4:195|(1:199)|200|(1:208)(4:202|(1:204)|205|206))(1:209)|207)|210)|211)(0))|22|23|(2:25|(1:31))|32|(9:34|(6:36|(4:38|(4:41|(2:47|48)|49|39)|53|(1:55))|59|(2:61|(5:63|(2:(2:94|(1:96)(1:97))(1:92)|93)|(2:103|102)|101|102)(2:104|(4:(4:112|(3:120|(1:122)(1:124)|123)|101|102)|111|57|58)(2:127|(2:129|(2:133|102)))))|134|(2:138|(1:140)(1:141)))|142|(1:155)|146|(3:152|57|58)|111|57|58)|156|157|(1:161)|(1:165)|166|(4:169|(2:171|172)(1:174)|173|167)|175|176|(1:178)|179|180)(0)|21|22|23|(0)|32|(0)|156|157|(2:159|161)|(2:163|165)|166|(1:167)|175|176|(0)|179|180) */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x0142, code lost:
    
        if (r15 < r16.dialogsLoadedTillDate) goto L78;
     */
    /* JADX WARN: Removed duplicated region for block: B:169:0x02ba  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x02e0  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00e6  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0107  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void sortDialogs(LongSparseArray longSparseArray) {
        TLRPC.EncryptedChat encryptedChat;
        TLRPC.Dialog dialog;
        int size;
        int i;
        boolean z;
        TLRPC.Dialog dialog2;
        int i2;
        TLRPC.User currentUser;
        ArrayList<TLRPC.Dialog> arrayList;
        TLRPC.TL_chatAdminRights tL_chatAdminRights;
        TLRPC.Chat chat;
        boolean z2;
        boolean z3;
        boolean z4;
        TLRPC.TL_chatAdminRights tL_chatAdminRights2;
        TLRPC.TL_chatAdminRights tL_chatAdminRights3;
        TLRPC.TL_chatBannedRights tL_chatBannedRights;
        TLRPC.Message message;
        int i3;
        TLRPC.Chat chat2;
        if (longSparseArray == null && ApplicationLoader.mainInterfacePaused) {
            return;
        }
        this.dialogsServerOnly.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsMyGroups.clear();
        this.dialogsMyChannels.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogsForward.clear();
        for (int i4 = 0; i4 < this.dialogsByFolder.size(); i4++) {
            ArrayList<TLRPC.Dialog> valueAt = this.dialogsByFolder.valueAt(i4);
            if (valueAt != null) {
                valueAt.clear();
            }
        }
        this.unreadUnmutedDialogs = 0;
        long clientUserId = getUserConfig().getClientUserId();
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[0] != null || dialogFilterArr[1] != null) {
            int i5 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                if (i5 < dialogFilterArr2.length) {
                    DialogFilter dialogFilter = dialogFilterArr2[i5];
                    this.sortingDialogFilter = dialogFilter;
                    if (dialogFilter != null) {
                        ArrayList<TLRPC.Dialog> arrayList2 = dialogFilter.dialogs;
                        ArrayList<TLRPC.Dialog> arrayList3 = dialogFilter.dialogsForward;
                        arrayList2.clear();
                        arrayList3.clear();
                        try {
                            Collections.sort(this.allDialogs, this.dialogDateComparator);
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                        int size2 = this.allDialogs.size();
                        for (int i6 = 0; i6 < size2; i6++) {
                            TLRPC.Dialog dialog3 = this.allDialogs.get(i6);
                            if (dialog3 instanceof TLRPC.TL_dialog) {
                                long j = dialog3.id;
                                if (DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                                    j = encryptedChat.user_id;
                                }
                                if (this.sortingDialogFilter.includesDialog(getAccountInstance(), j, dialog3)) {
                                    if (canAddToForward(dialog3)) {
                                        arrayList3.add(dialog3);
                                    }
                                    arrayList2.add(dialog3);
                                }
                            }
                        }
                    }
                    i5++;
                }
            }
            Collections.sort(this.allDialogs, this.dialogComparator);
            this.isLeftPromoChannel = true;
            dialog = this.promoDialog;
            if (dialog != null) {
                long j2 = dialog.id;
                if (j2 < 0 && (chat2 = getChat(Long.valueOf(-j2))) != null && !chat2.left) {
                    this.isLeftPromoChannel = false;
                }
            }
            size = this.allDialogs.size();
            i = 0;
            z = false;
            while (i < size) {
                TLRPC.Dialog dialog4 = this.allDialogs.get(i);
                if (dialog4 instanceof TLRPC.TL_dialog) {
                    ArrayList arrayList4 = (ArrayList) this.dialogMessage.get(dialog4.id);
                    if (arrayList4 != null) {
                        int i7 = Integer.MIN_VALUE;
                        for (int i8 = 0; i8 < arrayList4.size(); i8++) {
                            MessageObject messageObject = (MessageObject) arrayList4.get(i8);
                            if (messageObject != null && (message = messageObject.messageOwner) != null && (i3 = message.date) > i7) {
                                i7 = i3;
                            }
                        }
                        if (i7 > Integer.MIN_VALUE) {
                        }
                    }
                    if (!DialogObject.isEncryptedDialog(dialog4.id)) {
                        this.dialogsServerOnly.add(dialog4);
                        boolean isChannel = DialogObject.isChannel(dialog4);
                        long j3 = dialog4.id;
                        if (isChannel) {
                            TLRPC.Chat chat3 = getChat(Long.valueOf(-j3));
                            if (chat3 != null && ((z2 = chat3.creator) || (((z4 = chat3.megagroup) && (((tL_chatAdminRights3 = chat3.admin_rights) != null && (tL_chatAdminRights3.post_messages || tL_chatAdminRights3.add_admins)) || (tL_chatBannedRights = chat3.default_banned_rights) == null || !tL_chatBannedRights.invite_users)) || (!z4 && (tL_chatAdminRights2 = chat3.admin_rights) != null && tL_chatAdminRights2.add_admins)))) {
                                ((z2 || ((z3 = chat3.megagroup) && chat3.admin_rights != null) || !(z3 || chat3.admin_rights == null)) ? chat3.megagroup ? this.dialogsMyGroups : this.dialogsMyChannels : this.dialogsCanAddUsers).add(dialog4);
                            }
                            if (chat3 == null || !chat3.megagroup) {
                                arrayList = this.dialogsChannelsOnly;
                                arrayList.add(dialog4);
                            }
                            arrayList = this.dialogsGroupsOnly;
                            arrayList.add(dialog4);
                        } else if (j3 < 0) {
                            if (longSparseArray == null || (chat = (TLRPC.Chat) longSparseArray.get(-j3)) == null || chat.migrated_to == null) {
                                TLRPC.Chat chat4 = getChat(Long.valueOf(-dialog4.id));
                                if (chat4 != null && (((tL_chatAdminRights = chat4.admin_rights) != null && (tL_chatAdminRights.add_admins || tL_chatAdminRights.invite_users)) || chat4.creator)) {
                                    (chat4.creator ? this.dialogsMyGroups : this.dialogsCanAddUsers).add(dialog4);
                                }
                                arrayList = this.dialogsGroupsOnly;
                                arrayList.add(dialog4);
                            }
                            this.allDialogs.remove(i);
                            i--;
                            size--;
                            i++;
                        } else if (j3 != clientUserId) {
                            this.dialogsUsersOnly.add(dialog4);
                            if (!UserObject.isReplyUser(dialog4.id) && dialog4.id != UserObject.VERIFY) {
                                arrayList = this.dialogsForBlock;
                                arrayList.add(dialog4);
                            }
                        }
                    }
                    if (canAddToForward(dialog4) && dialog4.folder_id == 0) {
                        if (dialog4.id == clientUserId) {
                            this.dialogsForward.add(0, dialog4);
                            z = true;
                        } else {
                            this.dialogsForward.add(dialog4);
                        }
                    }
                }
                if ((getDialogUnreadCount(dialog4) != 0 || dialog4.unread_mark) && !isDialogMuted(dialog4.id, 0L)) {
                    this.unreadUnmutedDialogs++;
                }
                TLRPC.Dialog dialog5 = this.promoDialog;
                if (dialog5 == null || dialog4.id != dialog5.id || !this.isLeftPromoChannel) {
                    addDialogToItsFolder(-1, dialog4);
                    i++;
                }
                this.allDialogs.remove(i);
                i--;
                size--;
                i++;
            }
            dialog2 = this.promoDialog;
            if (dialog2 != null && this.isLeftPromoChannel) {
                this.allDialogs.add(0, dialog2);
                addDialogToItsFolder(-2, this.promoDialog);
            }
            if (!z && (currentUser = getUserConfig().getCurrentUser()) != null) {
                TLRPC.TL_dialog tL_dialog = new TLRPC.TL_dialog();
                tL_dialog.id = currentUser.id;
                tL_dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
                TLRPC.TL_peerUser tL_peerUser = new TLRPC.TL_peerUser();
                tL_dialog.peer = tL_peerUser;
                tL_peerUser.user_id = currentUser.id;
                this.dialogsForward.add(0, tL_dialog);
            }
            for (i2 = 0; i2 < this.dialogsByFolder.size(); i2++) {
                int keyAt = this.dialogsByFolder.keyAt(i2);
                if (this.dialogsByFolder.valueAt(i2).isEmpty()) {
                    this.dialogsByFolder.remove(keyAt);
                }
            }
            this.hasArchivedChats = this.dialogsByFolder.get(1, null) != null;
        }
        Collections.sort(this.allDialogs, this.dialogComparator);
        this.isLeftPromoChannel = true;
        dialog = this.promoDialog;
        if (dialog != null) {
        }
        size = this.allDialogs.size();
        i = 0;
        z = false;
        while (i < size) {
        }
        dialog2 = this.promoDialog;
        if (dialog2 != null) {
            this.allDialogs.add(0, dialog2);
            addDialogToItsFolder(-2, this.promoDialog);
        }
        if (!z) {
            TLRPC.TL_dialog tL_dialog2 = new TLRPC.TL_dialog();
            tL_dialog2.id = currentUser.id;
            tL_dialog2.notify_settings = new TLRPC.TL_peerNotifySettings();
            TLRPC.TL_peerUser tL_peerUser2 = new TLRPC.TL_peerUser();
            tL_dialog2.peer = tL_peerUser2;
            tL_peerUser2.user_id = currentUser.id;
            this.dialogsForward.add(0, tL_dialog2);
        }
        while (i2 < this.dialogsByFolder.size()) {
        }
        this.hasArchivedChats = this.dialogsByFolder.get(1, null) != null;
    }

    public void sortDialogsList(ArrayList<TLRPC.Dialog> arrayList) {
        if (arrayList == null) {
            return;
        }
        Collections.sort(arrayList, this.dialogComparator);
    }

    public boolean starsPurchaseAvailable() {
        return !this.starsLocked;
    }

    public void startShortPoll(TLRPC.Chat chat, int i, boolean z) {
        startShortPoll(chat, i, z, null);
    }

    public void startShortPoll(final TLRPC.Chat chat, final int i, final boolean z, final androidx.core.util.Consumer consumer) {
        if (chat == null) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda472
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$startShortPoll$311(chat, z, i, consumer);
            }
        });
    }

    public boolean storiesEnabled() {
        char c;
        String str = this.storiesPosting;
        int hashCode = str.hashCode();
        if (hashCode == -1609594047) {
            if (str.equals("enabled")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != -318452137) {
            if (hashCode == 270940796 && str.equals("disabled")) {
                c = 3;
            }
            c = 65535;
        } else {
            if (str.equals("premium")) {
                c = 0;
            }
            c = 65535;
        }
        return c != 0 ? c == 1 : getUserConfig().isPremium();
    }

    public boolean storyEntitiesAllowed() {
        char c;
        String str = this.storiesEntities;
        int hashCode = str.hashCode();
        if (hashCode == -1609594047) {
            if (str.equals("enabled")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != -318452137) {
            if (hashCode == 270940796 && str.equals("disabled")) {
                c = 3;
            }
            c = 65535;
        } else {
            if (str.equals("premium")) {
                c = 0;
            }
            c = 65535;
        }
        return c != 0 ? c == 1 : getUserConfig().isPremium();
    }

    public boolean storyEntitiesAllowed(TLRPC.User user) {
        char c;
        if (user != null && user.id == this.storiesChangelogUserId) {
            return true;
        }
        String str = this.storiesEntities;
        int hashCode = str.hashCode();
        if (hashCode == -1609594047) {
            if (str.equals("enabled")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != -318452137) {
            if (hashCode == 270940796 && str.equals("disabled")) {
                c = 3;
            }
            c = 65535;
        } else {
            if (str.equals("premium")) {
                c = 0;
            }
            c = 65535;
        }
        return c != 0 ? c == 1 : user != null && user.premium;
    }

    public void toggleChannelForum(long j, boolean z) {
        TLRPC.TL_channels_toggleForum tL_channels_toggleForum = new TLRPC.TL_channels_toggleForum();
        tL_channels_toggleForum.channel = getInputChannel(j);
        tL_channels_toggleForum.enabled = z;
        getConnectionsManager().sendRequest(tL_channels_toggleForum, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda353
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChannelForum$265(tLObject, tL_error);
            }
        }, 64);
    }

    public void toggleChannelInvitesHistory(long j, boolean z) {
        TLRPC.TL_channels_togglePreHistoryHidden tL_channels_togglePreHistoryHidden = new TLRPC.TL_channels_togglePreHistoryHidden();
        tL_channels_togglePreHistoryHidden.channel = getInputChannel(j);
        tL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tL_channels_togglePreHistoryHidden, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda81
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChannelInvitesHistory$267(tLObject, tL_error);
            }
        }, 64);
    }

    public void toggleChannelSignatures(long j, boolean z, boolean z2) {
        TLRPC.Chat chat = getChat(Long.valueOf(j));
        if (chat != null) {
            chat.signatures = z;
            chat.signature_profiles = z2;
            putChat(chat, true);
        }
        TLRPC.TL_channels_toggleSignatures tL_channels_toggleSignatures = new TLRPC.TL_channels_toggleSignatures();
        tL_channels_toggleSignatures.channel = getInputChannel(j);
        tL_channels_toggleSignatures.signatures_enabled = z;
        tL_channels_toggleSignatures.profiles_enabled = z2;
        getConnectionsManager().sendRequest(tL_channels_toggleSignatures, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda88
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChannelSignatures$263(tLObject, tL_error);
            }
        }, 64);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateAllMessages, Long.valueOf(-j));
    }

    public void toggleChatJoinRequest(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC.TL_channels_toggleJoinRequest tL_channels_toggleJoinRequest = new TLRPC.TL_channels_toggleJoinRequest();
        tL_channels_toggleJoinRequest.channel = getInputChannel(j);
        tL_channels_toggleJoinRequest.enabled = z;
        getConnectionsManager().sendRequest(tL_channels_toggleJoinRequest, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda329
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChatJoinRequest$261(runnable, runnable2, tLObject, tL_error);
            }
        }, 64);
    }

    public void toggleChatJoinToSend(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC.TL_channels_toggleJoinToSend tL_channels_toggleJoinToSend = new TLRPC.TL_channels_toggleJoinToSend();
        tL_channels_toggleJoinToSend.channel = getInputChannel(j);
        tL_channels_toggleJoinToSend.enabled = z;
        getConnectionsManager().sendRequest(tL_channels_toggleJoinToSend, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda45
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChatJoinToSend$259(runnable, runnable2, tLObject, tL_error);
            }
        }, 64);
    }

    public void toggleChatNoForwards(long j, boolean z) {
        TLRPC.TL_messages_toggleNoForwards tL_messages_toggleNoForwards = new TLRPC.TL_messages_toggleNoForwards();
        tL_messages_toggleNoForwards.peer = getInputPeer(-j);
        tL_messages_toggleNoForwards.enabled = z;
        getConnectionsManager().sendRequest(tL_messages_toggleNoForwards, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda189
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toggleChatNoForwards$257(tLObject, tL_error);
            }
        }, 64);
    }

    public void unblockPeer(long j) {
        unblockPeer(j, null);
    }

    public void unblockPeer(long j, final Runnable runnable) {
        TLRPC.Chat chat;
        TLRPC.TL_contacts_unblock tL_contacts_unblock = new TLRPC.TL_contacts_unblock();
        TLRPC.User user = null;
        if (j > 0) {
            TLRPC.User user2 = getUser(Long.valueOf(j));
            if (user2 == null) {
                return;
            }
            user = user2;
            chat = null;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(j);
        tL_contacts_unblock.id = user != null ? getInputPeer(user) : getInputPeer(chat);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(tL_contacts_unblock, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda291
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$unblockPeer$106(runnable, tLObject, tL_error);
            }
        });
    }

    public void unpinAllMessages(final TLRPC.Chat chat, final TLRPC.User user) {
        if (chat == null && user == null) {
            return;
        }
        TLRPC.TL_messages_unpinAllMessages tL_messages_unpinAllMessages = new TLRPC.TL_messages_unpinAllMessages();
        tL_messages_unpinAllMessages.peer = getInputPeer(chat != null ? -chat.id : user.id);
        getConnectionsManager().sendRequest(tL_messages_unpinAllMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda203
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$unpinAllMessages$122(chat, user, tLObject, tL_error);
            }
        });
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC.TL_account_unregisterDevice tL_account_unregisterDevice = new TLRPC.TL_account_unregisterDevice();
            tL_account_unregisterDevice.token = SharedConfig.pushString;
            tL_account_unregisterDevice.token_type = SharedConfig.pushType;
            for (int i = 0; i < 4; i++) {
                UserConfig userConfig = UserConfig.getInstance(i);
                if (i != this.currentAccount && userConfig.isClientActivated()) {
                    tL_account_unregisterDevice.other_uids.add(Long.valueOf(userConfig.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(tL_account_unregisterDevice, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda204
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.lambda$unregistedPush$298(tLObject, tL_error);
                }
            });
        }
    }

    public void updateChannelUserName(final BaseFragment baseFragment, final long j, final String str, final Runnable runnable, final Runnable runnable2) {
        final TLRPC.TL_channels_updateUsername tL_channels_updateUsername = new TLRPC.TL_channels_updateUsername();
        tL_channels_updateUsername.channel = getInputChannel(j);
        tL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tL_channels_updateUsername, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda129
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$updateChannelUserName$271(j, str, runnable, baseFragment, tL_channels_updateUsername, runnable2, tLObject, tL_error);
            }
        }, 64);
    }

    public void updateChatAbout(long j, final String str, final TLRPC.ChatFull chatFull) {
        TLRPC.TL_messages_editChatAbout tL_messages_editChatAbout = new TLRPC.TL_messages_editChatAbout();
        tL_messages_editChatAbout.peer = getInputPeer(-j);
        tL_messages_editChatAbout.about = str;
        getConnectionsManager().sendRequest(tL_messages_editChatAbout, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda453
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$updateChatAbout$269(chatFull, str, tLObject, tL_error);
            }
        }, 64);
    }

    public void updateConfig(final TLRPC.TL_config tL_config) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda19
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateConfig$36(tL_config);
            }
        });
    }

    public void updateEmojiStatus(TLRPC.EmojiStatus emojiStatus) {
        TLRPC.TL_account_updateEmojiStatus tL_account_updateEmojiStatus = new TLRPC.TL_account_updateEmojiStatus();
        tL_account_updateEmojiStatus.emoji_status = emojiStatus;
        TLRPC.User currentUser = getUserConfig().getCurrentUser();
        if (currentUser != null) {
            currentUser.emoji_status = tL_account_updateEmojiStatus.emoji_status;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userEmojiStatusUpdated, currentUser);
            getMessagesController().updateEmojiStatusUntilUpdate(currentUser.id, currentUser.emoji_status);
        }
        getConnectionsManager().sendRequest(tL_account_updateEmojiStatus, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda394
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.lambda$updateEmojiStatus$29(tLObject, tL_error);
            }
        });
    }

    public void updateEmojiStatusUntil() {
        int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
        Long l = null;
        int i = 0;
        while (i < this.emojiStatusUntilValues.size()) {
            if (((Integer) this.emojiStatusUntilValues.valueAt(i)).intValue() > currentTimeMillis) {
                l = Long.valueOf(Math.min(l == null ? Long.MAX_VALUE : l.longValue(), r5 - currentTimeMillis));
            } else {
                this.emojiStatusUntilValues.removeAt(i);
                i--;
            }
            i++;
        }
        if (l == null) {
            Runnable runnable = this.recentEmojiStatusUpdateRunnable;
            if (runnable != null) {
                this.recentEmojiStatusUpdateRunnableTime = -1L;
                this.recentEmojiStatusUpdateRunnableTimeout = -1L;
                AndroidUtilities.cancelRunOnUIThread(runnable);
                return;
            }
            return;
        }
        long longValue = l.longValue() + 2;
        long j = currentTimeMillis;
        if (j + longValue != this.recentEmojiStatusUpdateRunnableTime + this.recentEmojiStatusUpdateRunnableTimeout) {
            AndroidUtilities.cancelRunOnUIThread(this.recentEmojiStatusUpdateRunnable);
            this.recentEmojiStatusUpdateRunnableTime = j;
            this.recentEmojiStatusUpdateRunnableTimeout = longValue;
            Runnable runnable2 = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda367
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateEmojiStatusUntil$428();
                }
            };
            this.recentEmojiStatusUpdateRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2, longValue * 1000);
        }
    }

    public void updateEmojiStatusUntilUpdate(long j, TLRPC.EmojiStatus emojiStatus) {
        if (emojiStatus instanceof TLRPC.TL_emojiStatusUntil) {
            this.emojiStatusUntilValues.put(j, Integer.valueOf(((TLRPC.TL_emojiStatusUntil) emojiStatus).until));
        } else if (!this.emojiStatusUntilValues.containsKey(j)) {
            return;
        } else {
            this.emojiStatusUntilValues.remove(j);
        }
        updateEmojiStatusUntil();
    }

    public void updateFilterDialogs(DialogFilter dialogFilter) {
        TLRPC.EncryptedChat encryptedChat;
        if (dialogFilter == null) {
            return;
        }
        ArrayList<TLRPC.Dialog> arrayList = dialogFilter.dialogs;
        ArrayList<TLRPC.Dialog> arrayList2 = dialogFilter.dialogsForward;
        arrayList.clear();
        arrayList2.clear();
        this.sortingDialogFilter = dialogFilter;
        try {
            Collections.sort(this.allDialogs, this.dialogDateComparator);
        } catch (Exception e) {
            FileLog.e(e);
        }
        int size = this.allDialogs.size();
        for (int i = 0; i < size; i++) {
            TLRPC.Dialog dialog = this.allDialogs.get(i);
            if (dialog instanceof TLRPC.TL_dialog) {
                long j = dialog.id;
                if (DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                    j = encryptedChat.user_id;
                }
                if (dialogFilter.includesDialog(getAccountInstance(), j, dialog)) {
                    if (canAddToForward(dialog)) {
                        arrayList2.add(dialog);
                    }
                    arrayList.add(dialog);
                }
            }
        }
        try {
            Collections.sort(this.allDialogs, this.dialogComparator);
        } catch (Exception unused) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:159:0x035d  */
    /* JADX WARN: Removed duplicated region for block: B:179:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x04c7  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x04cc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean updateInterfaceWithMessages(final long j, ArrayList<MessageObject> arrayList, int i) {
        MessageObject messageObject;
        long j2;
        boolean z;
        LongSparseArray longSparseArray;
        boolean z2;
        boolean z3;
        int i2;
        boolean z4;
        TLRPC.Chat chat;
        long j3;
        int i3;
        TLRPC.ChatFull chatFull;
        TLRPC.TL_inputGroupCall tL_inputGroupCall;
        if (arrayList == null || arrayList.isEmpty()) {
            return false;
        }
        boolean z5 = i == 1;
        boolean z6 = i == 5;
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        long j4 = 0;
        if (z5 || z6) {
            messageObject = null;
            j2 = 0;
            z = false;
        } else {
            long j5 = 0;
            int i4 = 0;
            MessageObject messageObject2 = null;
            boolean z7 = false;
            z = false;
            while (i4 < arrayList.size()) {
                MessageObject messageObject3 = arrayList.get(i4);
                if (messageObject2 == null || ((!isEncryptedDialog && messageObject3.getId() > messageObject2.getId()) || (((isEncryptedDialog || (messageObject3.getId() < 0 && messageObject2.getId() < 0)) && messageObject3.getId() < messageObject2.getId()) || messageObject3.messageOwner.date > messageObject2.messageOwner.date))) {
                    long j6 = messageObject3.messageOwner.peer_id.channel_id;
                    if (j6 != j4) {
                        j5 = j6;
                    }
                    messageObject2 = messageObject3;
                }
                TLRPC.Message message = messageObject3.messageOwner;
                if ((message.action instanceof TLRPC.TL_messageActionGroupCall) && (chatFull = getChatFull(message.peer_id.channel_id)) != null && ((tL_inputGroupCall = chatFull.call) == null || tL_inputGroupCall.id != messageObject3.messageOwner.action.call.id)) {
                    loadFullChat(messageObject3.messageOwner.peer_id.channel_id, 0, true);
                }
                if (!z7 && !messageObject3.isOut()) {
                    z7 = true;
                }
                if (messageObject3.isOut() && !messageObject3.isSending() && !messageObject3.isForwarded()) {
                    if (messageObject3.isNewGif()) {
                        if (MessageObject.isDocumentHasAttachedStickers(messageObject3.messageOwner.media.document) ? getMessagesController().saveGifsWithStickers : true) {
                            MediaDataController mediaDataController = getMediaDataController();
                            TLRPC.Message message2 = messageObject3.messageOwner;
                            mediaDataController.addRecentGif(message2.media.document, message2.date, messageObject3.wasJustSent);
                        }
                    } else if (!messageObject3.isAnimatedEmoji() && (messageObject3.isSticker() || messageObject3.isAnimatedSticker())) {
                        MediaDataController mediaDataController2 = getMediaDataController();
                        TLRPC.Message message3 = messageObject3.messageOwner;
                        mediaDataController2.addRecentSticker(0, messageObject3, message3.media.document, message3.date, false);
                    }
                }
                if (messageObject3.isOut() && messageObject3.isSent()) {
                    i3 = 1;
                    z = true;
                } else {
                    i3 = 1;
                }
                i4 += i3;
                j4 = 0;
            }
            messageObject = messageObject2;
            j2 = j5;
        }
        getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i, 0L, null, 0, null);
        if (i == 5) {
            QuickRepliesController.getInstance(this.currentAccount).checkLocalMessages(arrayList);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceiveNewMessages, Long.valueOf(j), arrayList, Boolean.valueOf(z5), Integer.valueOf(i));
        if (messageObject == null || z5) {
            return false;
        }
        TLRPC.TL_dialog tL_dialog = (TLRPC.TL_dialog) this.dialogs_dict.get(j);
        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
            if (tL_dialog != null) {
                this.allDialogs.remove(tL_dialog);
                this.dialogsServerOnly.remove(tL_dialog);
                this.dialogsCanAddUsers.remove(tL_dialog);
                this.dialogsMyGroups.remove(tL_dialog);
                this.dialogsMyChannels.remove(tL_dialog);
                this.dialogsChannelsOnly.remove(tL_dialog);
                this.dialogsGroupsOnly.remove(tL_dialog);
                int i5 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i5 >= dialogFilterArr.length) {
                        break;
                    }
                    DialogFilter dialogFilter = dialogFilterArr[i5];
                    if (dialogFilter != null) {
                        dialogFilter.dialogs.remove(tL_dialog);
                        this.selectedDialogFilter[i5].dialogsForward.remove(tL_dialog);
                    }
                    i5++;
                }
                this.dialogsUsersOnly.remove(tL_dialog);
                this.dialogsForBlock.remove(tL_dialog);
                this.dialogsForward.remove(tL_dialog);
                this.dialogs_dict.remove(tL_dialog.id);
                this.dialogs_read_inbox_max.remove(Long.valueOf(tL_dialog.id));
                this.dialogs_read_outbox_max.remove(Long.valueOf(tL_dialog.id));
                int i6 = this.nextDialogsCacheOffset.get(tL_dialog.folder_id, 0);
                if (i6 > 0) {
                    this.nextDialogsCacheOffset.put(tL_dialog.folder_id, i6 - 1);
                }
                this.dialogMessage.remove(tL_dialog.id);
                ArrayList<TLRPC.Dialog> arrayList2 = this.dialogsByFolder.get(tL_dialog.folder_id);
                if (arrayList2 != null) {
                    arrayList2.remove(tL_dialog);
                }
                MessageObject messageObject4 = this.dialogMessagesByIds.get(tL_dialog.top_message);
                if (messageObject4 != null) {
                    j3 = 0;
                    if (messageObject4.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(tL_dialog.top_message);
                    }
                } else {
                    j3 = 0;
                }
                if (messageObject4 != null) {
                    long j7 = messageObject4.messageOwner.random_id;
                    if (j7 != j3) {
                        this.dialogMessagesByRandomIds.remove(j7);
                    }
                }
                z4 = false;
                tL_dialog.top_message = 0;
                getNotificationsController().removeNotificationsForDialog(tL_dialog.id);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
            } else {
                z4 = false;
            }
            if (!DialogObject.isChatDialog(j)) {
                return z4;
            }
            ChatObject.Call groupCall = getGroupCall(-j, z4);
            if (groupCall != null && (chat = getChat(Long.valueOf(messageObject.messageOwner.action.channel_id))) != null) {
                groupCall.migrateToChat(chat);
            }
            return false;
        }
        if (tL_dialog == null) {
            TLRPC.Chat chat2 = getChat(Long.valueOf(j2));
            if (j2 != 0 && chat2 == null) {
                return false;
            }
            if (chat2 != null && (ChatObject.isNotInChat(chat2) || chat2.min)) {
                return false;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("not found dialog with id " + j + " dictCount = " + this.dialogs_dict.size() + " allCount = " + this.allDialogs.size());
            }
            final TLRPC.TL_dialog tL_dialog2 = new TLRPC.TL_dialog();
            tL_dialog2.id = j;
            final int id = messageObject.getId();
            tL_dialog2.top_message = id;
            tL_dialog2.last_message_date = messageObject.messageOwner.date;
            tL_dialog2.flags = ChatObject.isChannel(chat2) ? 1 : 0;
            if (this.pendingUnreadCounter.get(j, 0) > 0) {
                tL_dialog2.unread_count = this.pendingUnreadCounter.get(j);
                this.pendingUnreadCounter.delete(j);
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs++;
                }
                int i7 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                    if (i7 >= dialogFilterArr2.length) {
                        break;
                    }
                    DialogFilter dialogFilter2 = dialogFilterArr2[i7];
                    if (dialogFilter2 != null && (dialogFilter2.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        z3 = true;
                        break;
                    }
                    i7++;
                }
                this.dialogs_dict.put(j, tL_dialog2);
                this.allDialogs.add(tL_dialog2);
                ArrayList arrayList3 = new ArrayList();
                for (i2 = 0; i2 < arrayList.size(); i2++) {
                    MessageObject messageObject5 = arrayList.get(i2);
                    if (messageObject5 != null && (messageObject5.getId() == messageObject.getId() || (messageObject5.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject5.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                        arrayList3.add(messageObject5);
                        if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject5.getId(), messageObject5);
                            long j8 = messageObject5.messageOwner.random_id;
                            if (j8 != 0) {
                                this.dialogMessagesByRandomIds.put(j8, messageObject5);
                            }
                        }
                    }
                }
                this.dialogMessage.put(j, arrayList3);
                getTranslateController().checkDialogMessage(j);
                longSparseArray = null;
                if (z3) {
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda89
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i8) {
                        MessagesController.this.lambda$updateInterfaceWithMessages$399(tL_dialog2, id, j, i8);
                    }
                });
            }
            z3 = false;
            this.dialogs_dict.put(j, tL_dialog2);
            this.allDialogs.add(tL_dialog2);
            ArrayList arrayList32 = new ArrayList();
            while (i2 < arrayList.size()) {
            }
            this.dialogMessage.put(j, arrayList32);
            getTranslateController().checkDialogMessage(j);
            longSparseArray = null;
            if (z3) {
            }
            getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda89
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i8) {
                    MessagesController.this.lambda$updateInterfaceWithMessages$399(tL_dialog2, id, j, i8);
                }
            });
        } else {
            longSparseArray = null;
            if ((tL_dialog.top_message <= 0 || messageObject.getId() <= 0 || messageObject.getId() <= tL_dialog.top_message) && ((tL_dialog.top_message >= 0 || messageObject.getId() >= 0 || messageObject.getId() >= tL_dialog.top_message) && this.dialogMessage.indexOfKey(j) >= 0 && tL_dialog.top_message >= 0 && tL_dialog.last_message_date > messageObject.messageOwner.date)) {
                z2 = false;
                if (z2) {
                    sortDialogs(longSparseArray);
                }
                if (z) {
                    getMediaDataController().increasePeerRaiting(j);
                }
                return z2;
            }
            MessageObject messageObject6 = this.dialogMessagesByIds.get(tL_dialog.top_message);
            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.remove(tL_dialog.top_message);
            }
            if (messageObject6 != null) {
                long j9 = messageObject6.messageOwner.random_id;
                if (j9 != 0) {
                    this.dialogMessagesByRandomIds.remove(j9);
                }
            }
            tL_dialog.top_message = messageObject.getId();
            tL_dialog.last_message_date = messageObject.messageOwner.date;
            ArrayList arrayList4 = new ArrayList(1);
            for (int i8 = 0; i8 < arrayList.size(); i8++) {
                MessageObject messageObject7 = arrayList.get(i8);
                if (messageObject7 != null && (messageObject7.getId() == messageObject.getId() || (messageObject7.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject7.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                    arrayList4.add(messageObject7);
                }
            }
            this.dialogMessage.put(j, arrayList4);
            getTranslateController().checkDialogMessage(j);
            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                long j10 = messageObject.messageOwner.random_id;
                if (j10 != 0) {
                    this.dialogMessagesByRandomIds.put(j10, messageObject);
                }
            }
        }
        z2 = true;
        if (z2) {
        }
        if (z) {
        }
        return z2;
    }

    public void updatePremium(boolean z) {
        if (this.dialogFilters.isEmpty()) {
            return;
        }
        if (z) {
            for (int i = 0; i < this.dialogFilters.size(); i++) {
                this.dialogFilters.get(i).locked = false;
            }
        } else {
            if (!this.dialogFilters.get(0).isDefault()) {
                int i2 = 1;
                while (true) {
                    if (i2 >= this.dialogFilters.size()) {
                        break;
                    }
                    if (this.dialogFilters.get(i2).isDefault()) {
                        this.dialogFilters.add(0, this.dialogFilters.remove(i2));
                        break;
                    }
                    i2++;
                }
            }
            lockFiltersInternal();
        }
        getMessagesStorage().saveDialogFiltersOrder();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getStoriesController().onPremiumChanged();
    }

    public void updateSavedReactionTags(long j) {
        long j2;
        String str;
        long m;
        LongSparseArray longSparseArray = this.reactionTags;
        if (longSparseArray == null) {
            return;
        }
        TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) longSparseArray.get(j);
        if (tL_messages_savedReactionsTags == null) {
            if (j == 0) {
                return;
            }
            LongSparseArray longSparseArray2 = this.reactionTags;
            TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags2 = new TLRPC.TL_messages_savedReactionsTags();
            longSparseArray2.put(j, tL_messages_savedReactionsTags2);
            tL_messages_savedReactionsTags = tL_messages_savedReactionsTags2;
        }
        Collections.sort(tL_messages_savedReactionsTags.tags, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda341
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$updateSavedReactionTags$437;
                lambda$updateSavedReactionTags$437 = MessagesController.this.lambda$updateSavedReactionTags$437((TLRPC.TL_savedReactionTag) obj, (TLRPC.TL_savedReactionTag) obj2);
                return lambda$updateSavedReactionTags$437;
            }
        });
        long j3 = 0;
        for (int i = 0; i < tL_messages_savedReactionsTags.tags.size(); i++) {
            TLRPC.TL_savedReactionTag tL_savedReactionTag = tL_messages_savedReactionsTags.tags.get(i);
            if (tL_savedReactionTag.count > 0) {
                TLRPC.Reaction reaction = tL_savedReactionTag.reaction;
                if (reaction instanceof TLRPC.TL_reactionEmoji) {
                    j2 = MessagesController$$ExternalSyntheticBackport12.m(r9, 0, Utilities.MD5(((TLRPC.TL_reactionEmoji) reaction).emoticon).substring(0, 16).length(), 16);
                } else {
                    if (reaction instanceof TLRPC.TL_reactionCustomEmoji) {
                        j2 = ((TLRPC.TL_reactionCustomEmoji) reaction).document_id;
                    }
                    if (j == 0 && (tL_savedReactionTag.flags & 1) != 0 && (str = tL_savedReactionTag.title) != null) {
                        m = MessagesController$$ExternalSyntheticBackport10.m(r9, 0, Utilities.MD5(str).substring(0, 16).length(), 16);
                        j3 = MediaDataController.calcHash(j3, m);
                    }
                    j3 = MediaDataController.calcHash(j3, tL_savedReactionTag.count);
                }
                j3 = MediaDataController.calcHash(j3, j2);
                if (j == 0) {
                    m = MessagesController$$ExternalSyntheticBackport10.m(r9, 0, Utilities.MD5(str).substring(0, 16).length(), 16);
                    j3 = MediaDataController.calcHash(j3, m);
                }
                j3 = MediaDataController.calcHash(j3, tL_savedReactionTag.count);
            }
        }
        tL_messages_savedReactionsTags.hash = j3;
        saveSavedReactionsTags(j, tL_messages_savedReactionsTags);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
    }

    public void updateSavedReactionTags(HashSet<Long> hashSet) {
        updateSavedReactionTags(0L);
        Iterator<Long> it = hashSet.iterator();
        while (it.hasNext()) {
            updateSavedReactionTags(it.next().longValue());
        }
    }

    public boolean updateSavedReactionTags(long j, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2) {
        if (this.reactionTags == null) {
            return false;
        }
        int i = 0;
        boolean z3 = false;
        while (i < 2) {
            long j2 = i == 0 ? 0L : j;
            boolean z4 = true;
            if (i != 1 || j2 != 0) {
                TLRPC.TL_messages_savedReactionsTags tL_messages_savedReactionsTags = (TLRPC.TL_messages_savedReactionsTags) this.reactionTags.get(j2);
                if (tL_messages_savedReactionsTags == null) {
                    if (j2 != 0) {
                        LongSparseArray longSparseArray = this.reactionTags;
                        tL_messages_savedReactionsTags = new TLRPC.TL_messages_savedReactionsTags();
                        longSparseArray.put(j2, tL_messages_savedReactionsTags);
                    }
                }
                int i2 = 0;
                boolean z5 = false;
                boolean z6 = false;
                while (i2 < tL_messages_savedReactionsTags.tags.size()) {
                    TLRPC.TL_savedReactionTag tL_savedReactionTag = tL_messages_savedReactionsTags.tags.get(i2);
                    if (visibleReaction.isSame(tL_savedReactionTag.reaction)) {
                        int i3 = tL_savedReactionTag.count;
                        int max = Math.max(0, (z ? 1 : -1) + i3);
                        tL_savedReactionTag.count = max;
                        if (max <= 0) {
                            tL_messages_savedReactionsTags.tags.remove(i2);
                            i2--;
                        } else if (max == i3) {
                            z5 = true;
                        }
                        z3 = true;
                        z5 = true;
                        z6 = true;
                    }
                    i2++;
                }
                if (z5 || !z) {
                    z4 = z6;
                } else {
                    TLRPC.TL_savedReactionTag tL_savedReactionTag2 = new TLRPC.TL_savedReactionTag();
                    tL_savedReactionTag2.reaction = visibleReaction.toTLReaction();
                    tL_savedReactionTag2.count = 1;
                    tL_messages_savedReactionsTags.tags.add(tL_savedReactionTag2);
                    z3 = true;
                }
                if (z2 && z4) {
                    updateSavedReactionTags(j2);
                }
                i++;
            }
            i++;
        }
        return z3;
    }

    /* JADX WARN: Removed duplicated region for block: B:30:0x00d9  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x011f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateTimerProc() {
        int i;
        ArrayList arrayList;
        int i2;
        int i3;
        TLRPC.TL_account_updateStatus tL_account_updateStatus;
        ConnectionsManager connectionsManager;
        RequestDelegate requestDelegate;
        int i4;
        long currentTimeMillis = System.currentTimeMillis();
        int i5 = 0;
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (this.ignoreSetOnline || getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    tL_account_updateStatus = new TLRPC.TL_account_updateStatus();
                    tL_account_updateStatus.offline = true;
                    connectionsManager = getConnectionsManager();
                    requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda120
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$144(tLObject, tL_error);
                        }
                    };
                    this.statusRequest = connectionsManager.sendRequest(tL_account_updateStatus, requestDelegate);
                }
                if (this.updatesQueueChannels.size() != 0) {
                    for (int i6 = 0; i6 < this.updatesQueueChannels.size(); i6++) {
                        long keyAt = this.updatesQueueChannels.keyAt(i6);
                        if (Math.abs(currentTimeMillis - this.updatesStartWaitTimeChannels.valueAt(i6)) >= 1500) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                            }
                            processChannelsUpdatesQueue(keyAt, 0);
                        }
                    }
                }
                for (i4 = 0; i4 < 3; i4++) {
                    if (getUpdatesStartTime(i4) != 0 && Math.abs(currentTimeMillis - getUpdatesStartTime(i4)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d(i4 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processUpdatesQueue(i4, 0);
                    }
                }
            } else {
                if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                    this.statusSettingState = 1;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    tL_account_updateStatus = new TLRPC.TL_account_updateStatus();
                    tL_account_updateStatus.offline = false;
                    connectionsManager = getConnectionsManager();
                    requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda119
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$143(tLObject, tL_error);
                        }
                    };
                    this.statusRequest = connectionsManager.sendRequest(tL_account_updateStatus, requestDelegate);
                }
                if (this.updatesQueueChannels.size() != 0) {
                }
                while (i4 < 3) {
                }
            }
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i7 = 0;
                while (i7 < this.channelViewsToSend.size()) {
                    final long keyAt2 = this.channelViewsToSend.keyAt(i7);
                    final TLRPC.TL_messages_getMessagesViews tL_messages_getMessagesViews = new TLRPC.TL_messages_getMessagesViews();
                    tL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tL_messages_getMessagesViews.id = (ArrayList) this.channelViewsToSend.valueAt(i7);
                    tL_messages_getMessagesViews.increment = i7 == 0;
                    getConnectionsManager().sendRequest(tL_messages_getMessagesViews, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda121
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$146(keyAt2, tL_messages_getMessagesViews, tLObject, tL_error);
                        }
                    });
                    i7++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda122
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$148(currentTime);
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            for (Map.Entry<Long, Integer> entry : this.onlinePrivacy.entrySet()) {
                if (entry.getValue().intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(entry.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Long) it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda123
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$149();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i8 = 0;
            while (i8 < this.shortPollChannels.size()) {
                long keyAt3 = this.shortPollChannels.keyAt(i8);
                if (this.shortPollChannels.valueAt(i8) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i8--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i8++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i9 = 0;
            while (i9 < this.shortPollOnlines.size()) {
                final long keyAt4 = this.shortPollOnlines.keyAt(i9);
                if (this.shortPollOnlines.valueAt(i9) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i9--;
                    }
                    TLRPC.TL_messages_getOnlines tL_messages_getOnlines = new TLRPC.TL_messages_getOnlines();
                    tL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tL_messages_getOnlines, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda124
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$151(keyAt4, tLObject, tL_error);
                        }
                    });
                }
                i9++;
            }
        }
        if (this.printingUsers.isEmpty() && this.lastPrintingStringCount == this.printingUsers.size()) {
            i = 1;
        } else {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i10 = 0;
            boolean z = false;
            while (i10 < arrayList3.size()) {
                Long l = (Long) arrayList3.get(i10);
                ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(l);
                if (concurrentHashMap != null) {
                    ArrayList arrayList4 = new ArrayList(concurrentHashMap.keySet());
                    int i11 = 0;
                    while (i11 < arrayList4.size()) {
                        Integer num = (Integer) arrayList4.get(i11);
                        ArrayList<PrintingUser> arrayList5 = concurrentHashMap.get(num);
                        if (arrayList5 != null) {
                            while (i5 < arrayList5.size()) {
                                PrintingUser printingUser = arrayList5.get(i5);
                                Long l2 = l;
                                ArrayList arrayList6 = arrayList3;
                                int i12 = i10;
                                if (printingUser.lastTime + (printingUser.action instanceof TLRPC.TL_sendMessageGamePlayAction ? 30000 : 5900) < currentTimeMillis) {
                                    arrayList5.remove(printingUser);
                                    i5--;
                                    i3 = 1;
                                    z = true;
                                } else {
                                    i3 = 1;
                                }
                                i5 += i3;
                                l = l2;
                                arrayList3 = arrayList6;
                                i10 = i12;
                            }
                        }
                        ArrayList arrayList7 = arrayList3;
                        int i13 = i10;
                        Long l3 = l;
                        if (arrayList5 == null || arrayList5.isEmpty()) {
                            concurrentHashMap.remove(num);
                            arrayList4.remove(i11);
                            i11--;
                        }
                        i11++;
                        l = l3;
                        arrayList3 = arrayList7;
                        i10 = i13;
                        i5 = 0;
                    }
                }
                ArrayList arrayList8 = arrayList3;
                int i14 = i10;
                Long l4 = l;
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(l4);
                    arrayList = arrayList8;
                    arrayList.remove(i14);
                    i2 = i14 - 1;
                } else {
                    arrayList = arrayList8;
                    i2 = i14;
                }
                i10 = i2 + 1;
                arrayList3 = arrayList;
                i5 = 0;
            }
            i = 1;
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda125
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$152();
                    }
                });
            }
        }
        if (Theme.selectedAutoNightType == i && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            PushListenerController.sendRegistrationToServer(SharedConfig.pushType, SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkPromoInfo$155(false);
        checkTosUpdate();
    }

    public void updateTranscribeAudioTrialCooldownUntil(int i) {
        if (i != this.transcribeAudioTrialCooldownUntil) {
            this.transcribeAudioTrialCooldownUntil = i;
            this.mainPreferences.edit().putInt("transcribeAudioTrialCooldownUntil", this.transcribeAudioTrialCooldownUntil).apply();
            scheduleTranscriptionUpdate();
        }
    }

    public void updateTranscribeAudioTrialCurrentNumber(int i) {
        if (i != this.transcribeAudioTrialCurrentNumber) {
            this.transcribeAudioTrialCurrentNumber = i;
            this.mainPreferences.edit().putInt("transcribeAudioTrialCurrentNumber", this.transcribeAudioTrialCurrentNumber).apply();
        }
    }

    public void updateUsernameActiveness(TLObject tLObject, String str, boolean z) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.objectsByUsernames.remove(str);
        if (z) {
            this.objectsByUsernames.put(str.toLowerCase(), tLObject);
        }
    }

    public void uploadAndApplyUserAvatar(TLRPC.FileLocation fileLocation) {
        if (fileLocation == null) {
            return;
        }
        this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + fileLocation.volume_id + "_" + fileLocation.local_id + ".jpg";
        getFileLoader().uploadFile(this.uploadingAvatar, false, true, ConnectionsManager.FileTypePhoto);
    }
}

package org.telegram.messenger;

import android.app.Activity;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.util.Consumer;
import j$.util.concurrent.ConcurrentHashMap;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationBadge;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.messenger.support.LongSparseLongArray;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$ChannelMessagesFilter;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogPeer;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EmojiStatus;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GroupCall;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputChatPhoto;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputPhoto;
import org.telegram.tgnet.TLRPC$InputUser;
import org.telegram.tgnet.TLRPC$JSONValue;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$NotifyPeer;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PeerNotifySettings;
import org.telegram.tgnet.TLRPC$PhoneCall;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PrivacyKey;
import org.telegram.tgnet.TLRPC$RecentMeUrl;
import org.telegram.tgnet.TLRPC$ReportReason;
import org.telegram.tgnet.TLRPC$SendMessageAction;
import org.telegram.tgnet.TLRPC$TL_account_createTheme;
import org.telegram.tgnet.TLRPC$TL_account_getNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_installTheme;
import org.telegram.tgnet.TLRPC$TL_account_installWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_registerDevice;
import org.telegram.tgnet.TLRPC$TL_account_reportPeer;
import org.telegram.tgnet.TLRPC$TL_account_saveTheme;
import org.telegram.tgnet.TLRPC$TL_account_saveWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_unregisterDevice;
import org.telegram.tgnet.TLRPC$TL_account_updateStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadWallPaper;
import org.telegram.tgnet.TLRPC$TL_auth_loggedOut;
import org.telegram.tgnet.TLRPC$TL_boolFalse;
import org.telegram.tgnet.TLRPC$TL_boolTrue;
import org.telegram.tgnet.TLRPC$TL_botInfo;
import org.telegram.tgnet.TLRPC$TL_channel;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channelParticipantSelf;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsAdmins;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsRecent;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_convertToGigagroup;
import org.telegram.tgnet.TLRPC$TL_channels_createChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteHistory;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_channels_deleteParticipantHistory;
import org.telegram.tgnet.TLRPC$TL_channels_editAdmin;
import org.telegram.tgnet.TLRPC$TL_channels_editBanned;
import org.telegram.tgnet.TLRPC$TL_channels_editPhoto;
import org.telegram.tgnet.TLRPC$TL_channels_editTitle;
import org.telegram.tgnet.TLRPC$TL_channels_getChannels;
import org.telegram.tgnet.TLRPC$TL_channels_getForumTopicsByID;
import org.telegram.tgnet.TLRPC$TL_channels_getFullChannel;
import org.telegram.tgnet.TLRPC$TL_channels_getMessages;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_getSendAs;
import org.telegram.tgnet.TLRPC$TL_channels_getSponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel;
import org.telegram.tgnet.TLRPC$TL_channels_joinChannel;
import org.telegram.tgnet.TLRPC$TL_channels_leaveChannel;
import org.telegram.tgnet.TLRPC$TL_channels_readHistory;
import org.telegram.tgnet.TLRPC$TL_channels_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers;
import org.telegram.tgnet.TLRPC$TL_channels_toggleForum;
import org.telegram.tgnet.TLRPC$TL_channels_toggleJoinRequest;
import org.telegram.tgnet.TLRPC$TL_channels_toggleJoinToSend;
import org.telegram.tgnet.TLRPC$TL_channels_togglePreHistoryHidden;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSignatures;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSlowMode;
import org.telegram.tgnet.TLRPC$TL_channels_updateUsername;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatForbidden;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_chatOnlines;
import org.telegram.tgnet.TLRPC$TL_chatReactionsAll;
import org.telegram.tgnet.TLRPC$TL_chatReactionsNone;
import org.telegram.tgnet.TLRPC$TL_chatReactionsSome;
import org.telegram.tgnet.TLRPC$TL_config;
import org.telegram.tgnet.TLRPC$TL_contacts_block;
import org.telegram.tgnet.TLRPC$TL_contacts_getBlocked;
import org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_contacts_unblock;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterSuggested;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_dialogPeer;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_draftMessage;
import org.telegram.tgnet.TLRPC$TL_emojiStatusUntil;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_groupCall;
import org.telegram.tgnet.TLRPC$TL_groupCallDiscarded;
import org.telegram.tgnet.TLRPC$TL_help_dismissSuggestion;
import org.telegram.tgnet.TLRPC$TL_help_getAppChangelog;
import org.telegram.tgnet.TLRPC$TL_help_getRecentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_hidePromoData;
import org.telegram.tgnet.TLRPC$TL_help_promoData;
import org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty;
import org.telegram.tgnet.TLRPC$TL_help_recentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdateEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputChannelEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChatPhoto;
import org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto;
import org.telegram.tgnet.TLRPC$TL_inputDialogPeer;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedChat;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputGroupCall;
import org.telegram.tgnet.TLRPC$TL_inputMessagesFilterChatPhotos;
import org.telegram.tgnet.TLRPC$TL_inputNotifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_inputNotifyChats;
import org.telegram.tgnet.TLRPC$TL_inputNotifyUsers;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhoneCall;
import org.telegram.tgnet.TLRPC$TL_inputPhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_inputTheme;
import org.telegram.tgnet.TLRPC$TL_inputThemeSettings;
import org.telegram.tgnet.TLRPC$TL_inputUser;
import org.telegram.tgnet.TLRPC$TL_inputUserEmpty;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_inputWallPaper;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug;
import org.telegram.tgnet.TLRPC$TL_jsonArray;
import org.telegram.tgnet.TLRPC$TL_jsonBool;
import org.telegram.tgnet.TLRPC$TL_jsonNumber;
import org.telegram.tgnet.TLRPC$TL_jsonObject;
import org.telegram.tgnet.TLRPC$TL_jsonObjectValue;
import org.telegram.tgnet.TLRPC$TL_jsonString;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatJoinedByRequest;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageExtendedMedia;
import org.telegram.tgnet.TLRPC$TL_messageMediaEmpty;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_addChatUser;
import org.telegram.tgnet.TLRPC$TL_messages_affectedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_affectedMessages;
import org.telegram.tgnet.TLRPC$TL_messages_channelMessages;
import org.telegram.tgnet.TLRPC$TL_messages_chatFull;
import org.telegram.tgnet.TLRPC$TL_messages_chats;
import org.telegram.tgnet.TLRPC$TL_messages_createChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser;
import org.telegram.tgnet.TLRPC$TL_messages_deleteHistory;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAbout;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAdmin;
import org.telegram.tgnet.TLRPC$TL_messages_editChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto;
import org.telegram.tgnet.TLRPC$TL_messages_editChatTitle;
import org.telegram.tgnet.TLRPC$TL_messages_forumTopics;
import org.telegram.tgnet.TLRPC$TL_messages_getChats;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getExtendedMedia;
import org.telegram.tgnet.TLRPC$TL_messages_getFullChat;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessages;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesReactions;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesViews;
import org.telegram.tgnet.TLRPC$TL_messages_getOnlines;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPollResults;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadReactions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_hidePeerSettingsBar;
import org.telegram.tgnet.TLRPC$TL_messages_markDialogUnread;
import org.telegram.tgnet.TLRPC$TL_messages_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_messagesNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_migrateChat;
import org.telegram.tgnet.TLRPC$TL_messages_peerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_peerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_readDiscussion;
import org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_readHistory;
import org.telegram.tgnet.TLRPC$TL_messages_readMentions;
import org.telegram.tgnet.TLRPC$TL_messages_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_messages_readReactions;
import org.telegram.tgnet.TLRPC$TL_messages_receivedQueue;
import org.telegram.tgnet.TLRPC$TL_messages_reorderPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_reportEncryptedSpam;
import org.telegram.tgnet.TLRPC$TL_messages_reportSpam;
import org.telegram.tgnet.TLRPC$TL_messages_saveDefaultSendAs;
import org.telegram.tgnet.TLRPC$TL_messages_saveGif;
import org.telegram.tgnet.TLRPC$TL_messages_saveRecentSticker;
import org.telegram.tgnet.TLRPC$TL_messages_search;
import org.telegram.tgnet.TLRPC$TL_messages_setChatAvailableReactions;
import org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping;
import org.telegram.tgnet.TLRPC$TL_messages_setHistoryTTL;
import org.telegram.tgnet.TLRPC$TL_messages_setTyping;
import org.telegram.tgnet.TLRPC$TL_messages_sponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_messages_startBot;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_messages_toggleDialogPin;
import org.telegram.tgnet.TLRPC$TL_messages_toggleNoForwards;
import org.telegram.tgnet.TLRPC$TL_messages_unpinAllMessages;
import org.telegram.tgnet.TLRPC$TL_messages_updatePinnedMessage;
import org.telegram.tgnet.TLRPC$TL_notifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_notifyChats;
import org.telegram.tgnet.TLRPC$TL_notifyForumTopic;
import org.telegram.tgnet.TLRPC$TL_notifyPeer;
import org.telegram.tgnet.TLRPC$TL_notifyUsers;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerSettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallRequested;
import org.telegram.tgnet.TLRPC$TL_phone_discardCall;
import org.telegram.tgnet.TLRPC$TL_phone_getGroupCall;
import org.telegram.tgnet.TLRPC$TL_phone_groupCall;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_deletePhotos;
import org.telegram.tgnet.TLRPC$TL_photos_getUserPhotos;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_photos_uploadProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_privacyKeyAddedByPhone;
import org.telegram.tgnet.TLRPC$TL_privacyKeyChatInvite;
import org.telegram.tgnet.TLRPC$TL_privacyKeyForwards;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneCall;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneNumber;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneP2P;
import org.telegram.tgnet.TLRPC$TL_privacyKeyProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_privacyKeyStatusTimestamp;
import org.telegram.tgnet.TLRPC$TL_privacyKeyVoiceMessages;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardHide;
import org.telegram.tgnet.TLRPC$TL_restrictionReason;
import org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseContactAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseStickerAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteraction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteractionSeen;
import org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageGeoLocationAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordVideoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction;
import org.telegram.tgnet.TLRPC$TL_speakingInGroupCallAction;
import org.telegram.tgnet.TLRPC$TL_sponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_theme;
import org.telegram.tgnet.TLRPC$TL_updateAttachMenuBots;
import org.telegram.tgnet.TLRPC$TL_updateBotCommands;
import org.telegram.tgnet.TLRPC$TL_updateBotMenuButton;
import org.telegram.tgnet.TLRPC$TL_updateChannel;
import org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews;
import org.telegram.tgnet.TLRPC$TL_updateChannelPinnedTopic;
import org.telegram.tgnet.TLRPC$TL_updateChannelPinnedTopics;
import org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateChannelTooLong;
import org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateChannelWebPage;
import org.telegram.tgnet.TLRPC$TL_updateChat;
import org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipants;
import org.telegram.tgnet.TLRPC$TL_updateChatUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateConfig;
import org.telegram.tgnet.TLRPC$TL_updateContactsReset;
import org.telegram.tgnet.TLRPC$TL_updateDcOptions;
import org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilter;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilters;
import org.telegram.tgnet.TLRPC$TL_updateDialogPinned;
import org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark;
import org.telegram.tgnet.TLRPC$TL_updateDraftMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping;
import org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead;
import org.telegram.tgnet.TLRPC$TL_updateEncryption;
import org.telegram.tgnet.TLRPC$TL_updateFavedStickers;
import org.telegram.tgnet.TLRPC$TL_updateFolderPeers;
import org.telegram.tgnet.TLRPC$TL_updateGeoLiveViewed;
import org.telegram.tgnet.TLRPC$TL_updateGroupCall;
import org.telegram.tgnet.TLRPC$TL_updateGroupCallConnection;
import org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants;
import org.telegram.tgnet.TLRPC$TL_updateLangPack;
import org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong;
import org.telegram.tgnet.TLRPC$TL_updateMessageExtendedMedia;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateMessagePoll;
import org.telegram.tgnet.TLRPC$TL_updateMessageReactions;
import org.telegram.tgnet.TLRPC$TL_updateMoveStickerSetToTop;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewStickerSet;
import org.telegram.tgnet.TLRPC$TL_updateNotifySettings;
import org.telegram.tgnet.TLRPC$TL_updatePeerBlocked;
import org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL;
import org.telegram.tgnet.TLRPC$TL_updatePeerLocated;
import org.telegram.tgnet.TLRPC$TL_updatePeerSettings;
import org.telegram.tgnet.TLRPC$TL_updatePendingJoinRequests;
import org.telegram.tgnet.TLRPC$TL_updatePhoneCall;
import org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData;
import org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_updatePinnedMessages;
import org.telegram.tgnet.TLRPC$TL_updatePrivacy;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadFeaturedEmojiStickers;
import org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateRecentEmojiStatuses;
import org.telegram.tgnet.TLRPC$TL_updateRecentReactions;
import org.telegram.tgnet.TLRPC$TL_updateRecentStickers;
import org.telegram.tgnet.TLRPC$TL_updateSavedGifs;
import org.telegram.tgnet.TLRPC$TL_updateSavedRingtones;
import org.telegram.tgnet.TLRPC$TL_updateServiceNotification;
import org.telegram.tgnet.TLRPC$TL_updateShort;
import org.telegram.tgnet.TLRPC$TL_updateShortChatMessage;
import org.telegram.tgnet.TLRPC$TL_updateShortMessage;
import org.telegram.tgnet.TLRPC$TL_updateStickerSets;
import org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder;
import org.telegram.tgnet.TLRPC$TL_updateTheme;
import org.telegram.tgnet.TLRPC$TL_updateTranscribeAudio;
import org.telegram.tgnet.TLRPC$TL_updateTranscribedAudio;
import org.telegram.tgnet.TLRPC$TL_updateUserEmojiStatus;
import org.telegram.tgnet.TLRPC$TL_updateUserName;
import org.telegram.tgnet.TLRPC$TL_updateUserPhone;
import org.telegram.tgnet.TLRPC$TL_updateUserPhoto;
import org.telegram.tgnet.TLRPC$TL_updateUserStatus;
import org.telegram.tgnet.TLRPC$TL_updateUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateWebPage;
import org.telegram.tgnet.TLRPC$TL_updateWebViewResultSent;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updatesCombined;
import org.telegram.tgnet.TLRPC$TL_updatesTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifference;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_difference;
import org.telegram.tgnet.TLRPC$TL_updates_differenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_differenceSlice;
import org.telegram.tgnet.TLRPC$TL_updates_differenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference;
import org.telegram.tgnet.TLRPC$TL_updates_getDifference;
import org.telegram.tgnet.TLRPC$TL_updates_state;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_userForeign_old2;
import org.telegram.tgnet.TLRPC$TL_userProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_username;
import org.telegram.tgnet.TLRPC$TL_users_getFullUser;
import org.telegram.tgnet.TLRPC$TL_users_getUsers;
import org.telegram.tgnet.TLRPC$TL_users_userFull;
import org.telegram.tgnet.TLRPC$TL_wallPaper;
import org.telegram.tgnet.TLRPC$TL_wallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_wallPaperSettings;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WallPaperSettings;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$contacts_Blocked;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$messages_SponsoredMessages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.tgnet.TLRPC$updates_ChannelDifference;
import org.telegram.tgnet.TLRPC$updates_Difference;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChatRightsEditActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.JoinCallAlert;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.LaunchActivity;
import org.telegram.ui.PremiumPreviewFragment;
import org.telegram.ui.ProfileActivity;
import org.telegram.ui.TopicsFragment;
/* loaded from: classes.dex */
public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    public static int PROMO_TYPE_OTHER = 2;
    public static int PROMO_TYPE_PROXY = 0;
    public static int PROMO_TYPE_PSA = 1;
    public static int UPDATE_MASK_AVATAR = 2;
    public static int UPDATE_MASK_CHAT = 8192;
    public static int UPDATE_MASK_CHAT_AVATAR = 8;
    public static int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static int UPDATE_MASK_CHAT_NAME = 16;
    public static int UPDATE_MASK_CHECK = 65536;
    public static int UPDATE_MASK_EMOJI_INTERACTIONS = 262144;
    public static int UPDATE_MASK_EMOJI_STATUS = 524288;
    public static int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static int UPDATE_MASK_NAME = 1;
    public static int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static int UPDATE_MASK_PHONE = 1024;
    public static int UPDATE_MASK_REACTIONS_READ = 1048576;
    public static int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static int UPDATE_MASK_REORDER = 131072;
    public static int UPDATE_MASK_SELECT_DIALOG = 512;
    public static int UPDATE_MASK_SEND_STATE = 4096;
    public static int UPDATE_MASK_STATUS = 4;
    public static int UPDATE_MASK_USER_PHONE = 128;
    public static int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime = 0;
    private static volatile long lastThemeCheckTime = 0;
    public static int stableIdPointer = 100;
    public int aboutLengthLimitDefault;
    public int aboutLengthLimitPremium;
    public float animatedEmojisZoom;
    public Set<String> authDomains;
    public boolean autoarchiveAvailable;
    public Set<String> autologinDomains;
    public String autologinToken;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    public int captionLengthLimitDefault;
    public int captionLengthLimitPremium;
    public int channelsLimitDefault;
    public int channelsLimitPremium;
    public int chatReadMarkExpirePeriod;
    public int chatReadMarkSizeThreshold;
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private Runnable currentDeleteTaskRunnable;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMediaMids;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public int dialogFiltersChatsLimitDefault;
    public int dialogFiltersChatsLimitPremium;
    public int dialogFiltersLimitDefault;
    public int dialogFiltersLimitPremium;
    public boolean dialogFiltersLoaded;
    public int dialogFiltersPinnedLimitDefault;
    public int dialogFiltersPinnedLimitPremium;
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    public HashSet<String> diceEmojies;
    private SharedPreferences emojiPreferences;
    public boolean enableJoined;
    public Set<String> exportGroupUri;
    public Set<String> exportPrivateUri;
    public Set<String> exportUri;
    public TLRPC$WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    public int forumUpgradeParticipantsMin;
    public boolean getfileExperimentalParams;
    private boolean gettingAppChangelog;
    public boolean gettingDifference;
    private boolean gettingNewDeleteTask;
    public String gifSearchBot;
    public int groupCallVideoMaxParticipants;
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftPromoChannel;
    public boolean keepAliveService;
    private int lastCheckPromoId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private boolean loadingAppConfig;
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private boolean migratingDialogs;
    public NewMessageCallback newMessageCallback;
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private boolean offlineSent;
    public Set<String> pendingSuggestions;
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public String premiumBotUsername;
    public String premiumInvoiceSlug;
    public boolean premiumLocked;
    private TLRPC$Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public int publicLinksLimitDefault;
    public int publicLinksLimitPremium;
    public boolean qrLoginCamera;
    public int ratingDecay;
    public int reactionsInChatMax;
    public int reactionsUserMaxDefault;
    public int reactionsUserMaxPremium;
    private Runnable recentEmojiStatusUpdateRunnable;
    private long recentEmojiStatusUpdateRunnableTime;
    private long recentEmojiStatusUpdateRunnableTimeout;
    public boolean registeringForPush;
    public boolean remoteConfigLoaded;
    private TLRPC$messages_Dialogs resetDialogsAll;
    private TLRPC$TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int ringtoneDurationMax;
    public int ringtoneSizeMax;
    public int roundAudioBitrate;
    public int roundVideoBitrate;
    public int roundVideoSize;
    public boolean saveGifsWithStickers;
    public int savedGifsLimitDefault;
    public int savedGifsLimitPremium;
    public int secretWebpagePreview;
    public boolean showFiltersTooltip;
    private DialogFilter sortingDialogFilter;
    private int statusRequest;
    private int statusSettingState;
    public int stickersFavedLimitDefault;
    public int stickersFavedLimitPremium;
    public boolean suggestStickersApiOnly;
    public String suggestedLangCode;
    private TopicsController topicsController;
    public int topicsPinnedLimit;
    public int transcribeButtonPressed;
    public int unreadUnmutedDialogs;
    public int updateCheckDelay;
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    public int uploadMaxFileParts;
    public int uploadMaxFilePartsPremium;
    private String uploadingAvatar;
    private String uploadingWallpaper;
    private Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    public String venueSearchBot;
    public int webFileDatacenterId;
    public String youtubePipType;
    public static int UPDATE_MASK_ALL = (((((((((2 | 4) | 1) | 8) | 16) | 32) | 64) | ConnectionsManager.RequestFlagNeedQuickAck) | 256) | ConnectionsManager.RequestFlagDoNotWaitFloodWait) | 1048576;
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = (((1 | 2) | 4) | 8) | 16;
    private static volatile MessagesController[] Instance = new MessagesController[4];
    private static final Object[] lockObjects = new Object[4];
    private ConcurrentHashMap<Long, TLRPC$Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private ConcurrentHashMap<Integer, TLRPC$EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    private ConcurrentHashMap<Long, TLRPC$User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private HashMap<Long, TLRPC$Chat> activeVoiceChatsMap = new HashMap<>();
    private ArrayList<Long> joiningToChannels = new ArrayList<>();
    private LongSparseArray<TLRPC$TL_chatInviteExported> exportedChats = new LongSparseArray<>();
    public ArrayList<TLRPC$RecentMeUrl> hintDialogs = new ArrayList<>();
    public SparseArray<ArrayList<TLRPC$Dialog>> dialogsByFolder = new SparseArray<>();
    protected ArrayList<TLRPC$Dialog> allDialogs = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsMyChannels = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsMyGroups = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsChannelsOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsUsersOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsForBlock = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsGroupsOnly = new ArrayList<>();
    public DialogFilter[] selectedDialogFilter = new DialogFilter[2];
    private int dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public LongSparseArray<TLRPC$Dialog> dialogs_dict = new LongSparseArray<>();
    public LongSparseArray<ArrayList<MessageObject>> dialogMessage = new LongSparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    public LongSparseIntArray deletedHistory = new LongSparseIntArray();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    public LongSparseArray<SparseArray<CharSequence>> printingStrings = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Integer>> printingStringsTypes = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Boolean>>[] sendingTypings = new LongSparseArray[12];
    public ConcurrentHashMap<Long, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private LongSparseIntArray pendingUnreadCounter = new LongSparseIntArray();
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    private LongSparseIntArray shortPollChannels = new LongSparseIntArray();
    private LongSparseArray<ArrayList<Integer>> needShortPollChannels = new LongSparseArray<>();
    private LongSparseIntArray shortPollOnlines = new LongSparseIntArray();
    private LongSparseArray<ArrayList<Integer>> needShortPollOnlines = new LongSparseArray<>();
    private LongSparseArray<TLRPC$Dialog> deletingDialogs = new LongSparseArray<>();
    private LongSparseArray<TLRPC$Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    public boolean loadingBlockedPeers = false;
    public LongSparseIntArray blockePeers = new LongSparseIntArray();
    public int totalBlockedCount = -1;
    private LongSparseArray<ArrayList<Integer>> channelViewsToSend = new LongSparseArray<>();
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck = new LongSparseArray<>();
    public SparseIntArray premiumFeaturesTypesToPosition = new SparseIntArray();
    public ArrayList<DialogFilter> dialogFilters = new ArrayList<>();
    public SparseArray<DialogFilter> dialogFiltersById = new SparseArray<>();
    public ArrayList<TLRPC$TL_dialogFilterSuggested> suggestedFilters = new ArrayList<>();
    private LongSparseArray<ArrayList<TLRPC$Updates>> updatesQueueChannels = new LongSparseArray<>();
    private LongSparseLongArray updatesStartWaitTimeChannels = new LongSparseLongArray();
    private LongSparseIntArray channelsPts = new LongSparseIntArray();
    private LongSparseArray<Boolean> gettingDifferenceChannels = new LongSparseArray<>();
    private LongSparseArray<Boolean> gettingChatInviters = new LongSparseArray<>();
    private LongSparseArray<Boolean> gettingUnknownChannels = new LongSparseArray<>();
    private LongSparseArray<Boolean> gettingUnknownDialogs = new LongSparseArray<>();
    private LongSparseArray<Boolean> checkingLastMessagesDialogs = new LongSparseArray<>();
    private ArrayList<TLRPC$Updates> updatesQueueSeq = new ArrayList<>();
    private ArrayList<TLRPC$Updates> updatesQueuePts = new ArrayList<>();
    private ArrayList<TLRPC$Updates> updatesQueueQts = new ArrayList<>();
    private LongSparseArray<TLRPC$UserFull> fullUsers = new LongSparseArray<>();
    private LongSparseArray<TLRPC$ChatFull> fullChats = new LongSparseArray<>();
    private LongSparseArray<ChatObject.Call> groupCalls = new LongSparseArray<>();
    private LongSparseArray<ChatObject.Call> groupCallsByChatId = new LongSparseArray<>();
    private ArrayList<Long> loadingFullUsers = new ArrayList<>();
    private ArrayList<Long> loadedFullUsers = new ArrayList<>();
    private ArrayList<Long> loadingFullChats = new ArrayList<>();
    private ArrayList<Long> loadingGroupCalls = new ArrayList<>();
    private ArrayList<Long> loadingFullParticipants = new ArrayList<>();
    private ArrayList<Long> loadedFullParticipants = new ArrayList<>();
    private ArrayList<Long> loadedFullChats = new ArrayList<>();
    private LongSparseArray<LongSparseArray<TLRPC$ChannelParticipant>> channelAdmins = new LongSparseArray<>();
    private LongSparseIntArray loadingChannelAdmins = new LongSparseIntArray();
    private SparseIntArray migratedChats = new SparseIntArray();
    private LongSparseArray<SponsoredMessagesInfo> sponsoredMessages = new LongSparseArray<>();
    private LongSparseArray<SendAsPeersInfo> sendAsPeers = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending = new LongSparseArray<>();
    private LongSparseArray<Long> lastScheduledServerQueryTime = new LongSparseArray<>();
    private LongSparseArray<Long> lastServerQueryTime = new LongSparseArray<>();
    private LongSparseArray<ArrayList<Integer>> reloadingMessages = new LongSparseArray<>();
    private ArrayList<ReadTask> readTasks = new ArrayList<>();
    private LongSparseArray<ReadTask> readTasksMap = new LongSparseArray<>();
    private ArrayList<ReadTask> repliesReadTasks = new ArrayList<>();
    private HashMap<String, ReadTask> threadsReadTasksMap = new HashMap<>();
    private SparseIntArray nextDialogsCacheOffset = new SparseIntArray();
    private SparseBooleanArray loadingDialogs = new SparseBooleanArray();
    private SparseBooleanArray dialogsEndReached = new SparseBooleanArray();
    private SparseBooleanArray serverDialogsEndReached = new SparseBooleanArray();
    private boolean getDifferenceFirstSync = true;
    private SparseIntArray loadingPinnedDialogs = new SparseIntArray();
    public ArrayList<FaqSearchResult> faqSearchArray = new ArrayList<>();
    public boolean suggestContacts = true;
    private Runnable themeCheckRunnable = MessagesController$$ExternalSyntheticLambda226.INSTANCE;
    private Runnable passwordCheckRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda15
        @Override // java.lang.Runnable
        public final void run() {
            MessagesController.this.lambda$new$0();
        }
    };
    private HashMap<String, Object> uploadingThemes = new HashMap<>();
    public int maxBroadcastCount = 100;
    public int minGroupConvertSize = 200;
    public ArrayList<String> gifSearchEmojies = new ArrayList<>();
    public HashMap<String, DiceFrameSuccess> diceSuccess = new HashMap<>();
    public HashMap<String, EmojiSound> emojiSounds = new HashMap<>();
    public HashMap<Long, ArrayList<TLRPC$TL_sendMessageEmojiInteraction>> emojiInteractions = new HashMap<>();
    public List<String> directPaymentsCurrency = new ArrayList();
    private LongSparseArray<Integer> emojiStatusUntilValues = new LongSparseArray<>();
    private Comparator<TLRPC$Dialog> dialogDateComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda227
        @Override // java.util.Comparator
        public final int compare(Object obj, Object obj2) {
            int lambda$new$10;
            lambda$new$10 = MessagesController.this.lambda$new$10((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
            return lambda$new$10;
        }
    };
    private Comparator<TLRPC$Dialog> dialogComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda228
        @Override // java.util.Comparator
        public final int compare(Object obj, Object obj2) {
            int lambda$new$11;
            lambda$new$11 = MessagesController.this.lambda$new$11((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
            return lambda$new$11;
        }
    };
    private Comparator<TLRPC$Update> updatesComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda229
        @Override // java.util.Comparator
        public final int compare(Object obj, Object obj2) {
            int lambda$new$12;
            lambda$new$12 = MessagesController.this.lambda$new$12((TLRPC$Update) obj, (TLRPC$Update) obj2);
            return lambda$new$12;
        }
    };
    private int DIALOGS_LOAD_TYPE_CACHE = 1;
    private int DIALOGS_LOAD_TYPE_CHANNEL = 2;
    private int DIALOGS_LOAD_TYPE_UNKNOWN = 3;

    /* loaded from: classes.dex */
    public interface ErrorDelegate {
        boolean run(TLRPC$TL_error tLRPC$TL_error);
    }

    /* loaded from: classes.dex */
    public interface IsInChatCheckedCallback {
        void run(boolean z, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str);
    }

    /* loaded from: classes.dex */
    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    /* loaded from: classes.dex */
    public interface NewMessageCallback {
        boolean onMessageReceived(TLRPC$Message tLRPC$Message);
    }

    /* loaded from: classes.dex */
    public static class PrintingUser {
        public TLRPC$SendMessageAction action;
        public long lastTime;
        public long userId;
    }

    public static /* synthetic */ void lambda$blockPeer$73(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$completeReadTask$202(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$completeReadTask$204(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$deleteParticipantFromChat$253(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$deleteUserPhoto$97(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$hidePeerSettingsBar$58(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$hidePromoDialog$112(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$installTheme$100(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$installTheme$101(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMentionMessageAsRead$198(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMentionsAsRead$206(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMessageContentAsRead$196(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markReactionsAsRead$346(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$processUpdates$313(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$removeSuggestion$26(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$59(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$60(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$61(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$saveTheme$99(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$unblockPeer$92(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$unregistedPush$259(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public void markSponsoredAsRead(long j, MessageObject messageObject) {
    }

    public /* synthetic */ void lambda$new$0() {
        getUserConfig().checkSavedPassword();
    }

    public void getNextReactionMention(final long j, final int i, final int i2, final Consumer<Integer> consumer) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNextReactionMention$5(i, j, consumer, i2);
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x0079  */
    /* JADX WARN: Removed duplicated region for block: B:18:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNextReactionMention$5(int i, long j, final Consumer consumer, int i2) {
        boolean z;
        SQLiteCursor queryFinalized;
        final int i3;
        try {
            if (i != 0) {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions_topics WHERE state = 1 AND dialog_id = %d AND topic_id = %d LIMIT 1", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
            } else {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions WHERE state = 1 AND dialog_id = %d LIMIT 1", Long.valueOf(j)), new Object[0]);
            }
            if (queryFinalized.next()) {
                i3 = queryFinalized.intValue(0);
                z = false;
            } else {
                i3 = 0;
                z = true;
            }
            try {
                queryFinalized.dispose();
                if (i3 != 0) {
                    getMessagesStorage().markMessageReactionsAsRead(j, i, i3, false);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda6
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.lambda$getNextReactionMention$1(Consumer.this, i3);
                        }
                    });
                }
            } catch (SQLiteException e) {
                e = e;
                e.printStackTrace();
                if (!z) {
                }
            }
        } catch (SQLiteException e2) {
            e = e2;
            z = true;
        }
        if (!z) {
            TLRPC$TL_messages_getUnreadReactions tLRPC$TL_messages_getUnreadReactions = new TLRPC$TL_messages_getUnreadReactions();
            tLRPC$TL_messages_getUnreadReactions.peer = getMessagesController().getInputPeer(j);
            tLRPC$TL_messages_getUnreadReactions.limit = 1;
            tLRPC$TL_messages_getUnreadReactions.add_offset = i2 - 1;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda238
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$getNextReactionMention$4(Consumer.this, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public static /* synthetic */ void lambda$getNextReactionMention$1(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    public static /* synthetic */ void lambda$getNextReactionMention$4(final Consumer consumer, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda225
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$3(TLObject.this, tLRPC$TL_error, consumer);
            }
        });
    }

    public static /* synthetic */ void lambda$getNextReactionMention$3(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, final Consumer consumer) {
        ArrayList<TLRPC$Message> arrayList;
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        final int i = 0;
        if (tLRPC$TL_error != null && tLRPC$messages_Messages != null && (arrayList = tLRPC$messages_Messages.messages) != null && !arrayList.isEmpty()) {
            i = tLRPC$messages_Messages.messages.get(0).id;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda7
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$2(Consumer.this, i);
            }
        });
    }

    public static /* synthetic */ void lambda$getNextReactionMention$2(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    public void updatePremium(boolean z) {
        if (this.dialogFilters.isEmpty()) {
            return;
        }
        if (!z) {
            if (!this.dialogFilters.get(0).isDefault()) {
                int i = 1;
                while (true) {
                    if (i >= this.dialogFilters.size()) {
                        break;
                    } else if (this.dialogFilters.get(i).isDefault()) {
                        this.dialogFilters.add(0, this.dialogFilters.remove(i));
                        break;
                    } else {
                        i++;
                    }
                }
            }
            lockFiltersInternal();
        } else {
            for (int i2 = 0; i2 < this.dialogFilters.size(); i2++) {
                this.dialogFilters.get(i2).locked = false;
            }
        }
        getMessagesStorage().saveDialogFiltersOrder();
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    public void lockFiltersInternal() {
        boolean z;
        if (getUserConfig().isPremium() || this.dialogFilters.size() - 1 <= this.dialogFiltersLimitDefault) {
            z = false;
        } else {
            int size = (this.dialogFilters.size() - 1) - this.dialogFiltersLimitDefault;
            ArrayList arrayList = new ArrayList(this.dialogFilters);
            Collections.reverse(arrayList);
            z = false;
            for (int i = 0; i < arrayList.size(); i++) {
                if (i < size) {
                    if (!((DialogFilter) arrayList.get(i)).locked) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = true;
                } else {
                    if (((DialogFilter) arrayList.get(i)).locked) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = false;
                }
            }
        }
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        }
    }

    public int getCaptionMaxLengthLimit() {
        return getUserConfig().isPremium() ? this.captionLengthLimitPremium : this.captionLengthLimitDefault;
    }

    public int getAboutLimit() {
        return getUserConfig().isPremium() ? this.aboutLengthLimitPremium : this.aboutLengthLimitDefault;
    }

    public int getMaxUserReactionsCount() {
        return getUserConfig().isPremium() ? this.reactionsUserMaxPremium : this.reactionsUserMaxDefault;
    }

    public int getChatReactionsCount() {
        if (getUserConfig().isPremium()) {
            return this.reactionsInChatMax;
        }
        return 1;
    }

    public boolean isPremiumUser(TLRPC$User tLRPC$User) {
        return !this.premiumLocked && tLRPC$User.premium;
    }

    public boolean didPressTranscribeButtonEnough() {
        return this.transcribeButtonPressed >= 2;
    }

    public void pressTranscribeButton() {
        int i = this.transcribeButtonPressed;
        if (i < 2) {
            this.transcribeButtonPressed = i + 1;
            SharedPreferences sharedPreferences = this.mainPreferences;
            if (sharedPreferences == null) {
                return;
            }
            sharedPreferences.edit().putInt("transcribeButtonPressed", this.transcribeButtonPressed).apply();
        }
    }

    public ArrayList<TLRPC$TL_messages_stickerSet> filterPremiumStickers(ArrayList<TLRPC$TL_messages_stickerSet> arrayList) {
        if (!this.premiumLocked) {
            return arrayList;
        }
        int i = 0;
        while (i < arrayList.size()) {
            TLRPC$TL_messages_stickerSet filterPremiumStickers = getInstance(this.currentAccount).filterPremiumStickers(arrayList.get(i));
            if (filterPremiumStickers == null) {
                arrayList.remove(i);
                i--;
            } else {
                arrayList.set(i, filterPremiumStickers);
            }
            i++;
        }
        return arrayList;
    }

    public TLRPC$TL_messages_stickerSet filterPremiumStickers(TLRPC$TL_messages_stickerSet tLRPC$TL_messages_stickerSet) {
        boolean z;
        if (!this.premiumLocked || tLRPC$TL_messages_stickerSet == null) {
            return tLRPC$TL_messages_stickerSet;
        }
        int i = 0;
        int i2 = 0;
        while (true) {
            try {
                if (i2 >= tLRPC$TL_messages_stickerSet.documents.size()) {
                    z = false;
                    break;
                } else if (MessageObject.isPremiumSticker(tLRPC$TL_messages_stickerSet.documents.get(i2))) {
                    z = true;
                    break;
                } else {
                    i2++;
                }
            } catch (Exception e) {
                e = e;
            }
        }
        if (!z) {
            return tLRPC$TL_messages_stickerSet;
        }
        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_stickerSet.getObjectSize());
        tLRPC$TL_messages_stickerSet.serializeToStream(nativeByteBuffer);
        nativeByteBuffer.position(0);
        TLRPC$TL_messages_stickerSet tLRPC$TL_messages_stickerSet2 = new TLRPC$TL_messages_stickerSet();
        nativeByteBuffer.readInt32(true);
        tLRPC$TL_messages_stickerSet2.readParams(nativeByteBuffer, true);
        nativeByteBuffer.reuse();
        while (i < tLRPC$TL_messages_stickerSet2.documents.size()) {
            try {
                if (MessageObject.isPremiumSticker(tLRPC$TL_messages_stickerSet2.documents.get(i))) {
                    tLRPC$TL_messages_stickerSet2.documents.remove(i);
                    tLRPC$TL_messages_stickerSet2.packs.remove(i);
                    i--;
                    if (tLRPC$TL_messages_stickerSet2.documents.isEmpty()) {
                        return null;
                    }
                }
                i++;
            } catch (Exception e2) {
                e = e2;
                tLRPC$TL_messages_stickerSet = tLRPC$TL_messages_stickerSet2;
                e.printStackTrace();
                return tLRPC$TL_messages_stickerSet;
            }
        }
        return tLRPC$TL_messages_stickerSet2;
    }

    public TopicsController getTopicsController() {
        return this.topicsController;
    }

    public boolean isForum(long j) {
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        return chat != null && chat.forum;
    }

    public void markAllTopicsAsRead(final long j) {
        getMessagesStorage().loadTopics(j, new j$.util.function.Consumer() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda235
            @Override // j$.util.function.Consumer
            public final void accept(Object obj) {
                MessagesController.this.lambda$markAllTopicsAsRead$9(j, (ArrayList) obj);
            }

            @Override // j$.util.function.Consumer
            public /* synthetic */ j$.util.function.Consumer andThen(j$.util.function.Consumer consumer) {
                return Objects.requireNonNull(consumer);
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$9(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda120
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$8(arrayList, j);
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$8(ArrayList arrayList, long j) {
        if (arrayList != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_forumTopic tLRPC$TL_forumTopic = (TLRPC$TL_forumTopic) arrayList.get(i);
                MessagesController messagesController = getMessagesController();
                int i2 = tLRPC$TL_forumTopic.top_message;
                TLRPC$Message tLRPC$Message = tLRPC$TL_forumTopic.topMessage;
                messagesController.markDialogAsRead(j, i2, 0, tLRPC$Message != null ? tLRPC$Message.date : 0, false, tLRPC$TL_forumTopic.id, 0, true, 0);
                getMessagesStorage().updateRepliesMaxReadId(-j, tLRPC$TL_forumTopic.id, tLRPC$TL_forumTopic.top_message, 0, true);
            }
        }
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$7();
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$7() {
        getMessagesStorage().resetAllUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$6();
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$6() {
        getMessagesController().sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* loaded from: classes.dex */
    public class SponsoredMessagesInfo {
        public long loadTime;
        public boolean loading;
        public ArrayList<MessageObject> messages;
        public Integer posts_between;

        public SponsoredMessagesInfo() {
            MessagesController.this = r1;
        }
    }

    /* loaded from: classes.dex */
    public class SendAsPeersInfo {
        private long loadTime;
        private boolean loading;
        private TLRPC$TL_channels_sendAsPeers sendAsPeers;

        private SendAsPeersInfo() {
            MessagesController.this = r1;
        }
    }

    /* loaded from: classes.dex */
    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String str, String[] strArr, String str2) {
            this.title = str;
            this.path = strArr;
            this.url = str2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof FaqSearchResult)) {
                return false;
            }
            return this.title.equals(((FaqSearchResult) obj).title);
        }

        public String toString() {
            SerializedData serializedData = new SerializedData();
            serializedData.writeInt32(this.num);
            int i = 0;
            serializedData.writeInt32(0);
            serializedData.writeString(this.title);
            String[] strArr = this.path;
            serializedData.writeInt32(strArr != null ? strArr.length : 0);
            if (this.path != null) {
                while (true) {
                    String[] strArr2 = this.path;
                    if (i >= strArr2.length) {
                        break;
                    }
                    serializedData.writeString(strArr2[i]);
                    i++;
                }
            }
            serializedData.writeString(this.url);
            return Utilities.bytesToHex(serializedData.toByteArray());
        }
    }

    /* loaded from: classes.dex */
    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long j, long j2, String str) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = Base64.decode(str, 8);
        }

        public EmojiSound(long j, long j2, byte[] bArr) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = bArr;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof EmojiSound)) {
                return false;
            }
            EmojiSound emojiSound = (EmojiSound) obj;
            return this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference);
        }
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
    }

    /* loaded from: classes.dex */
    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int i, int i2) {
            this.frame = i;
            this.num = i2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof DiceFrameSuccess)) {
                return false;
            }
            DiceFrameSuccess diceFrameSuccess = (DiceFrameSuccess) obj;
            return this.frame == diceFrameSuccess.frame && this.num == diceFrameSuccess.num;
        }
    }

    /* loaded from: classes.dex */
    public static class UserActionUpdatesSeq extends TLRPC$Updates {
        private UserActionUpdatesSeq() {
        }
    }

    /* loaded from: classes.dex */
    public static class UserActionUpdatesPts extends TLRPC$Updates {
        private UserActionUpdatesPts() {
        }
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
    }

    /* loaded from: classes.dex */
    public static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    /* loaded from: classes.dex */
    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public int flags;
        public int id;
        public int localId;
        public boolean locked;
        public String name;
        public int order;
        public volatile int pendingUnreadCount;
        public int unreadCount;
        public ArrayList<Long> alwaysShow = new ArrayList<>();
        public ArrayList<Long> neverShow = new ArrayList<>();
        public LongSparseIntArray pinnedDialogs = new LongSparseIntArray();
        public ArrayList<TLRPC$Dialog> dialogs = new ArrayList<>();

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean includesDialog(AccountInstance accountInstance, long j) {
            TLRPC$Dialog tLRPC$Dialog = accountInstance.getMessagesController().dialogs_dict.get(j);
            if (tLRPC$Dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, j, tLRPC$Dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, long j, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$Chat chat;
            if (this.neverShow.contains(Long.valueOf(j))) {
                return false;
            }
            if (this.alwaysShow.contains(Long.valueOf(j))) {
                return true;
            }
            if (tLRPC$Dialog.folder_id != 0 && (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) != 0) {
                return false;
            }
            MessagesController messagesController = accountInstance.getMessagesController();
            ContactsController contactsController = accountInstance.getContactsController();
            if (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(tLRPC$Dialog.id, 0) && tLRPC$Dialog.unread_mentions_count == 0) || ((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0 && messagesController.getDialogUnreadCount(tLRPC$Dialog) == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_mentions_count == 0)) {
                return false;
            }
            if (j > 0) {
                TLRPC$User user = messagesController.getUser(Long.valueOf(j));
                if (user != null) {
                    if (!user.bot) {
                        if (user.self || user.contact || contactsController.isContact(j)) {
                            if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                                return true;
                            }
                        } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                            return true;
                        }
                    } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                        return true;
                    }
                }
            } else if (j < 0 && (chat = messagesController.getChat(Long.valueOf(-j))) != null) {
                if (ChatObject.isChannel(chat) && !chat.megagroup) {
                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                        return true;
                    }
                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                    return true;
                }
            }
            return false;
        }

        public boolean alwaysShow(int i, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$EncryptedChat encryptedChat;
            if (tLRPC$Dialog == null) {
                return false;
            }
            long j = tLRPC$Dialog.id;
            if (DialogObject.isEncryptedDialog(j) && (encryptedChat = MessagesController.getInstance(i).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                j = encryptedChat.user_id;
            }
            return this.alwaysShow.contains(Long.valueOf(j));
        }

        public boolean isDefault() {
            return this.id == 0;
        }
    }

    public /* synthetic */ int lambda$new$10(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        int i = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog.id, Integer.MIN_VALUE);
        int i2 = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog2.id, Integer.MIN_VALUE);
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (!z || (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                return 1;
            }
            if (i == Integer.MIN_VALUE && i2 != Integer.MIN_VALUE) {
                return 1;
            }
            if (i != Integer.MIN_VALUE && i2 == Integer.MIN_VALUE) {
                return -1;
            }
            if (i != Integer.MIN_VALUE) {
                if (i > i2) {
                    return 1;
                }
                return i < i2 ? -1 : 0;
            }
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
        }
        return -1;
    }

    public /* synthetic */ int lambda$new$11(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (!z || (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                return 1;
            }
            boolean z2 = tLRPC$Dialog.pinned;
            if (!z2 && tLRPC$Dialog2.pinned) {
                return 1;
            }
            if (z2 && !tLRPC$Dialog2.pinned) {
                return -1;
            }
            if (z2) {
                int i = tLRPC$Dialog.pinnedNum;
                int i2 = tLRPC$Dialog2.pinnedNum;
                if (i < i2) {
                    return 1;
                }
                return i > i2 ? -1 : 0;
            }
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
        }
        return -1;
    }

    public /* synthetic */ int lambda$new$12(TLRPC$Update tLRPC$Update, TLRPC$Update tLRPC$Update2) {
        int updateType = getUpdateType(tLRPC$Update);
        int updateType2 = getUpdateType(tLRPC$Update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType == 0) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        if (updateType == 1) {
            return AndroidUtilities.compare(getUpdateQts(tLRPC$Update), getUpdateQts(tLRPC$Update2));
        }
        if (updateType != 2) {
            return 0;
        }
        long updateChannelId = getUpdateChannelId(tLRPC$Update);
        long updateChannelId2 = getUpdateChannelId(tLRPC$Update2);
        if (updateChannelId == updateChannelId2) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        return AndroidUtilities.compare(updateChannelId, updateChannelId2);
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (lockObjects[i]) {
                messagesController = Instance[i];
                if (messagesController == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController2 = new MessagesController(i);
                    messagesControllerArr[i] = messagesController2;
                    messagesController = messagesController2;
                }
            }
        }
        return messagesController;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int i) {
        super(i);
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda28
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$13();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.remoteConfigLoaded = this.mainPreferences.getBoolean("remoteConfigLoaded", false);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.updateCheckDelay = this.mainPreferences.getInt("updateCheckDelay", 86400);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", ConnectionsManager.RequestFlagDoNotWaitFloodWait);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", null);
        this.installReferer = this.mainPreferences.getString("installReferer", null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0L);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? 2 : 4);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", false);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.getfileExperimentalParams = this.mainPreferences.getBoolean("getfileExperimentalParams", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        this.groupCallVideoMaxParticipants = this.mainPreferences.getInt("groipCallVideoMaxParticipants", 30);
        this.chatReadMarkSizeThreshold = this.mainPreferences.getInt("chatReadMarkSizeThreshold", 100);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.ringtoneDurationMax = this.mainPreferences.getInt("ringtoneDurationMax", 5);
        this.ringtoneSizeMax = this.mainPreferences.getInt("ringtoneSizeMax", 102400);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.suggestStickersApiOnly = this.mainPreferences.getBoolean("suggestStickersApiOnly", false);
        this.roundVideoSize = this.mainPreferences.getInt("roundVideoSize", 384);
        this.roundVideoBitrate = this.mainPreferences.getInt("roundVideoBitrate", 1000);
        this.roundAudioBitrate = this.mainPreferences.getInt("roundAudioBitrate", 64);
        this.pendingSuggestions = this.mainPreferences.getStringSet("pendingSuggestions", null);
        int i2 = this.mainPreferences.getInt("channelsLimitDefault", 500);
        this.channelsLimitDefault = i2;
        this.channelsLimitPremium = this.mainPreferences.getInt("channelsLimitPremium", i2 * 2);
        this.savedGifsLimitDefault = this.mainPreferences.getInt("savedGifsLimitDefault", 200);
        this.savedGifsLimitPremium = this.mainPreferences.getInt("savedGifsLimitPremium", 400);
        this.stickersFavedLimitDefault = this.mainPreferences.getInt("stickersFavedLimitDefault", 5);
        this.stickersFavedLimitPremium = this.mainPreferences.getInt("stickersFavedLimitPremium", 200);
        this.dialogFiltersLimitDefault = this.mainPreferences.getInt("dialogFiltersLimitDefault", 10);
        this.dialogFiltersLimitPremium = this.mainPreferences.getInt("dialogFiltersLimitPremium", 20);
        this.dialogFiltersChatsLimitDefault = this.mainPreferences.getInt("dialogFiltersChatsLimitDefault", 100);
        this.dialogFiltersChatsLimitPremium = this.mainPreferences.getInt("dialogFiltersChatsLimitPremium", 200);
        this.dialogFiltersPinnedLimitDefault = this.mainPreferences.getInt("dialogFiltersPinnedLimitDefault", 5);
        this.dialogFiltersPinnedLimitPremium = this.mainPreferences.getInt("dialogFiltersPinnedLimitPremium", 10);
        this.publicLinksLimitDefault = this.mainPreferences.getInt("publicLinksLimitDefault", 10);
        this.publicLinksLimitPremium = this.mainPreferences.getInt("publicLinksLimitPremium", 20);
        this.captionLengthLimitDefault = this.mainPreferences.getInt("captionLengthLimitDefault", ConnectionsManager.RequestFlagDoNotWaitFloodWait);
        this.captionLengthLimitPremium = this.mainPreferences.getInt("captionLengthLimitPremium", 4096);
        this.aboutLengthLimitDefault = this.mainPreferences.getInt("aboutLengthLimitDefault", 70);
        this.aboutLengthLimitPremium = this.mainPreferences.getInt("aboutLengthLimitPremium", 140);
        this.reactionsUserMaxDefault = this.mainPreferences.getInt("reactionsUserMaxDefault", 1);
        this.reactionsUserMaxPremium = this.mainPreferences.getInt("reactionsUserMaxPremium", 3);
        this.reactionsInChatMax = this.mainPreferences.getInt("reactionsInChatMax", 3);
        int i3 = this.mainPreferences.getInt("uploadMaxFileParts", 4000);
        this.uploadMaxFileParts = i3;
        this.uploadMaxFilePartsPremium = this.mainPreferences.getInt("uploadMaxFilePartsPremium", i3 * 2);
        this.premiumInvoiceSlug = this.mainPreferences.getString("premiumInvoiceSlug", null);
        this.premiumBotUsername = this.mainPreferences.getString("premiumBotUsername", null);
        this.premiumLocked = this.mainPreferences.getBoolean("premiumLocked", false);
        this.transcribeButtonPressed = this.mainPreferences.getInt("transcribeButtonPressed", 0);
        this.forumUpgradeParticipantsMin = this.mainPreferences.getInt("forumUpgradeParticipantsMin", 200);
        this.topicsPinnedLimit = this.mainPreferences.getInt("topicsPinnedLimit", 3);
        BuildVars.GOOGLE_AUTH_CLIENT_ID = this.mainPreferences.getString("googleAuthClientId", BuildVars.GOOGLE_AUTH_CLIENT_ID);
        Set<String> stringSet = this.mainPreferences.getStringSet("directPaymentsCurrency", null);
        if (stringSet != null) {
            this.directPaymentsCurrency.clear();
            this.directPaymentsCurrency.addAll(stringSet);
        }
        loadPremiumFeaturesPreviewOrder(this.mainPreferences.getString("premiumFeaturesTypesToPosition", null));
        if (this.pendingSuggestions != null) {
            this.pendingSuggestions = new HashSet(this.pendingSuggestions);
        } else {
            this.pendingSuggestions = new HashSet();
        }
        Set<String> stringSet2 = this.mainPreferences.getStringSet("exportUri2", null);
        this.exportUri = stringSet2;
        if (stringSet2 != null) {
            this.exportUri = new HashSet(this.exportUri);
        } else {
            HashSet hashSet = new HashSet();
            this.exportUri = hashSet;
            hashSet.add("content://(\\d+@)?com\\.whatsapp\\.provider\\.media/export_chat/");
            this.exportUri.add("content://(\\d+@)?com\\.whatsapp\\.w4b\\.provider\\.media/export_chat/");
            this.exportUri.add("content://jp\\.naver\\.line\\.android\\.line\\.common\\.FileProvider/export-chat/");
            this.exportUri.add(".*WhatsApp.*\\.txt$");
        }
        Set<String> stringSet3 = this.mainPreferences.getStringSet("exportGroupUri", null);
        this.exportGroupUri = stringSet3;
        if (stringSet3 != null) {
            this.exportGroupUri = new HashSet(this.exportGroupUri);
        } else {
            HashSet hashSet2 = new HashSet();
            this.exportGroupUri = hashSet2;
            hashSet2.add("@g.us/");
        }
        Set<String> stringSet4 = this.mainPreferences.getStringSet("exportPrivateUri", null);
        this.exportPrivateUri = stringSet4;
        if (stringSet4 != null) {
            this.exportPrivateUri = new HashSet(this.exportPrivateUri);
        } else {
            HashSet hashSet3 = new HashSet();
            this.exportPrivateUri = hashSet3;
            hashSet3.add("@s.whatsapp.net/");
        }
        Set<String> stringSet5 = this.mainPreferences.getStringSet("autologinDomains", null);
        this.autologinDomains = stringSet5;
        if (stringSet5 != null) {
            this.autologinDomains = new HashSet(this.autologinDomains);
        } else {
            this.autologinDomains = new HashSet();
        }
        Set<String> stringSet6 = this.mainPreferences.getStringSet("authDomains", null);
        this.authDomains = stringSet6;
        if (stringSet6 != null) {
            this.authDomains = new HashSet(this.authDomains);
        } else {
            this.authDomains = new HashSet();
        }
        this.autologinToken = this.mainPreferences.getString("autologinToken", null);
        Set<String> stringSet7 = this.mainPreferences.getStringSet("diceEmojies", null);
        if (stringSet7 == null) {
            HashSet<String> hashSet4 = new HashSet<>();
            this.diceEmojies = hashSet4;
            hashSet4.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(stringSet7);
        }
        String string = this.mainPreferences.getString("diceSuccess", null);
        if (string == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] decode = Base64.decode(string, 0);
                if (decode != null) {
                    SerializedData serializedData = new SerializedData(decode);
                    int readInt32 = serializedData.readInt32(true);
                    for (int i4 = 0; i4 < readInt32; i4++) {
                        this.diceSuccess.put(serializedData.readString(true), new DiceFrameSuccess(serializedData.readInt32(true), serializedData.readInt32(true)));
                    }
                    serializedData.cleanup();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        String string2 = this.mainPreferences.getString("emojiSounds", null);
        if (string2 != null) {
            try {
                byte[] decode2 = Base64.decode(string2, 0);
                if (decode2 != null) {
                    SerializedData serializedData2 = new SerializedData(decode2);
                    int readInt322 = serializedData2.readInt32(true);
                    for (int i5 = 0; i5 < readInt322; i5++) {
                        this.emojiSounds.put(serializedData2.readString(true), new EmojiSound(serializedData2.readInt64(true), serializedData2.readInt64(true), serializedData2.readByteArray(true)));
                    }
                    serializedData2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
        String string3 = this.mainPreferences.getString("gifSearchEmojies", null);
        if (string3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("\u1f973");
            this.gifSearchEmojies.add("😎");
        } else {
            try {
                byte[] decode3 = Base64.decode(string3, 0);
                if (decode3 != null) {
                    SerializedData serializedData3 = new SerializedData(decode3);
                    int readInt323 = serializedData3.readInt32(true);
                    for (int i6 = 0; i6 < readInt323; i6++) {
                        this.gifSearchEmojies.add(serializedData3.readString(true));
                    }
                    serializedData3.cleanup();
                }
            } catch (Exception e3) {
                FileLog.e(e3);
            }
        }
        if (BuildVars.DEBUG_VERSION) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda29
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$new$14();
                }
            }, 2000L);
        }
        this.topicsController = new TopicsController(i);
    }

    public /* synthetic */ void lambda$new$13() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void sendLoadPeersRequest(final TLObject tLObject, final ArrayList<TLObject> arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final ArrayList<DialogFilter> arrayList4, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList5, final HashMap<Integer, HashSet<Long>> hashMap, final HashMap<Integer, HashSet<Long>> hashMap2, final HashSet<Integer> hashSet) {
        getConnectionsManager().sendRequest(tLObject, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda328
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendLoadPeersRequest$15(arrayList3, arrayList2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet, tLObject2, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$sendLoadPeersRequest$15(ArrayList arrayList, ArrayList arrayList2, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashMap hashMap2, HashSet hashSet, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject2 instanceof TLRPC$TL_messages_chats) {
            arrayList.addAll(((TLRPC$TL_messages_chats) tLObject2).chats);
        } else if (tLObject2 instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject2;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                arrayList2.add((TLRPC$User) tLRPC$Vector.objects.get(i));
            }
        } else if (tLObject2 instanceof TLRPC$TL_messages_peerDialogs) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject2;
            tLRPC$messages_Dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            tLRPC$messages_Dialogs2.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs2.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            arrayList2.addAll(tLRPC$TL_messages_peerDialogs.users);
            arrayList.addAll(tLRPC$TL_messages_peerDialogs.chats);
        }
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet);
        }
    }

    public void loadFilterPeers(final HashMap<Long, TLRPC$InputPeer> hashMap, final HashMap<Long, TLRPC$InputPeer> hashMap2, final HashMap<Long, TLRPC$InputPeer> hashMap3, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final ArrayList<DialogFilter> arrayList3, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap4, final HashMap<Integer, HashSet<Long>> hashMap5, final HashSet<Integer> hashSet) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda132
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFilterPeers$16(hashMap2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashMap5, hashSet, hashMap3, hashMap);
            }
        });
    }

    public /* synthetic */ void lambda$loadFilterPeers$16(HashMap hashMap, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashMap hashMap3, HashSet hashSet, HashMap hashMap4, HashMap hashMap5) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers;
        int i;
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs;
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels;
        ArrayList<TLObject> arrayList5 = new ArrayList<>();
        loop0: while (true) {
            tLRPC$TL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tLRPC$TL_users_getUsers == null) {
                    tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
                    arrayList5.add(tLRPC$TL_users_getUsers);
                }
                tLRPC$TL_users_getUsers.id.add(getInputUser((TLRPC$InputPeer) entry.getValue()));
                if (tLRPC$TL_users_getUsers.id.size() == 100) {
                    break;
                }
            }
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLRPC$TL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        } else {
            i = 100;
        }
        TLObject tLObject = null;
        TLObject tLObject2 = null;
        for (Map.Entry entry2 : hashMap4.entrySet()) {
            TLRPC$InputPeer tLRPC$InputPeer = (TLRPC$InputPeer) entry2.getValue();
            if (tLRPC$InputPeer.chat_id != 0) {
                if (tLObject == null) {
                    tLRPC$TL_messages_getChats = new TLRPC$TL_messages_getChats();
                    arrayList5.add(tLRPC$TL_messages_getChats);
                } else {
                    tLRPC$TL_messages_getChats = tLObject;
                }
                tLRPC$TL_messages_getChats.id.add((Long) entry2.getKey());
                if (tLRPC$TL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getChats, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLObject = null;
                } else {
                    tLObject = tLRPC$TL_messages_getChats;
                }
            } else if (tLRPC$InputPeer.channel_id != 0) {
                if (tLObject2 == null) {
                    TLObject tLRPC$TL_channels_getChannels2 = new TLRPC$TL_channels_getChannels();
                    arrayList5.add(tLRPC$TL_channels_getChannels2);
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels2;
                } else {
                    tLRPC$TL_channels_getChannels = tLObject2;
                }
                tLRPC$TL_channels_getChannels.id.add(getInputChannel(tLRPC$InputPeer));
                if (tLRPC$TL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_channels_getChannels, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLObject2 = null;
                } else {
                    tLObject2 = tLRPC$TL_channels_getChannels;
                }
            }
        }
        if (tLObject != null) {
            sendLoadPeersRequest(tLObject, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLObject2 != null) {
            sendLoadPeersRequest(tLObject2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        loop3: while (true) {
            tLRPC$TL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap5.entrySet()) {
                if (tLRPC$TL_messages_getPeerDialogs == null) {
                    tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                    arrayList5.add(tLRPC$TL_messages_getPeerDialogs);
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = (TLRPC$InputPeer) entry3.getValue();
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (tLRPC$TL_messages_getPeerDialogs.peers.size() == i) {
                    break;
                }
            }
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLRPC$TL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
    }

    public void processLoadedDialogFilters(final ArrayList<DialogFilter> arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final ArrayList<TLRPC$EncryptedChat> arrayList4, final int i) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda200
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$19(tLRPC$messages_Dialogs, arrayList4, tLRPC$messages_Dialogs2, i, arrayList, arrayList2, arrayList3);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:28:0x00ab, code lost:
        if (r14 == (-r3.id)) goto L32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x00c4, code lost:
        if (r3.migrated_to != null) goto L29;
     */
    /* JADX WARN: Removed duplicated region for block: B:102:0x020f  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00f7  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01e4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogFilters$19(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final ArrayList arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final int i, final ArrayList arrayList2, final ArrayList arrayList3, final ArrayList arrayList4) {
        SparseArray sparseArray;
        long j;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        Integer num;
        Integer num2;
        ArrayList arrayList5;
        TLRPC$Message tLRPC$Message;
        int i2;
        int i3;
        Integer num3;
        ArrayList<MessageObject> arrayList6;
        long dialogId;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray();
        LongSparseArray longSparseArray4 = new LongSparseArray();
        Integer num4 = 0;
        for (int i4 = 0; i4 < tLRPC$messages_Dialogs.users.size(); i4++) {
            TLRPC$User tLRPC$User2 = tLRPC$messages_Dialogs.users.get(i4);
            longSparseArray3.put(tLRPC$User2.id, tLRPC$User2);
        }
        for (int i5 = 0; i5 < tLRPC$messages_Dialogs.chats.size(); i5++) {
            TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i5);
            longSparseArray4.put(tLRPC$Chat2.id, tLRPC$Chat2);
        }
        if (arrayList != null) {
            sparseArray = new SparseArray();
            int size = arrayList.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList.get(i6);
                sparseArray.put(tLRPC$EncryptedChat.id, tLRPC$EncryptedChat);
            }
        } else {
            sparseArray = null;
        }
        ArrayList<MessageObject> arrayList7 = new ArrayList<>();
        int i7 = 0;
        while (true) {
            j = 0;
            if (i7 >= tLRPC$messages_Dialogs.messages.size()) {
                break;
            }
            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Dialogs.messages.get(i7);
            TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
            int i8 = i7;
            ArrayList<MessageObject> arrayList8 = arrayList7;
            long j2 = tLRPC$Peer.channel_id;
            if (j2 != 0) {
                TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray4.get(j2);
                if (tLRPC$Chat3 != null && tLRPC$Chat3.left) {
                    long j3 = this.promoDialogId;
                    if (j3 != 0) {
                    }
                    num3 = num4;
                    arrayList6 = arrayList8;
                    i3 = i8;
                }
                i3 = i8;
                num3 = num4;
                arrayList6 = arrayList8;
                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, false);
                arrayList6.add(messageObject);
                dialogId = messageObject.getDialogId();
                if (!longSparseArray2.containsKey(dialogId)) {
                    ((ArrayList) longSparseArray2.get(dialogId)).add(messageObject);
                } else {
                    ArrayList arrayList9 = new ArrayList(1);
                    arrayList9.add(messageObject);
                    longSparseArray2.put(dialogId, arrayList9);
                }
            } else {
                long j4 = tLRPC$Peer.chat_id;
                if (j4 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j4);
                    if (tLRPC$Chat4 != null) {
                    }
                }
                i3 = i8;
                num3 = num4;
                arrayList6 = arrayList8;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, false);
                arrayList6.add(messageObject2);
                dialogId = messageObject2.getDialogId();
                if (!longSparseArray2.containsKey(dialogId)) {
                }
            }
            i7 = i3 + 1;
            arrayList7 = arrayList6;
            num4 = num3;
        }
        Integer num5 = num4;
        getFileLoader().checkMediaExistance(arrayList7);
        int i9 = 0;
        while (i9 < tLRPC$messages_Dialogs.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i9);
            DialogObject.initDialog(tLRPC$Dialog);
            long j5 = tLRPC$Dialog.id;
            if (j5 != j && (!DialogObject.isEncryptedDialog(j5) || sparseArray == null || sparseArray.get(DialogObject.getEncryptedChatId(tLRPC$Dialog.id)) != null)) {
                long j6 = this.promoDialogId;
                if (j6 != j && j6 == tLRPC$Dialog.id) {
                    this.promoDialog = tLRPC$Dialog;
                }
                if (tLRPC$Dialog.last_message_date == 0 && (arrayList5 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id)) != null) {
                    int i10 = Integer.MIN_VALUE;
                    for (int i11 = 0; i11 < arrayList5.size(); i11++) {
                        MessageObject messageObject3 = (MessageObject) arrayList5.get(i11);
                        if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && i10 < (i2 = tLRPC$Message.date)) {
                            i10 = i2;
                        }
                    }
                    if (i10 > Integer.MIN_VALUE) {
                        tLRPC$Dialog.last_message_date = i10;
                    }
                }
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id);
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                        long j7 = this.promoDialogId;
                        if (j7 != 0) {
                            if (j7 != tLRPC$Dialog.id) {
                            }
                        }
                    }
                    this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                    longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = num5;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = num5;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                } else {
                    long j8 = tLRPC$Dialog.id;
                    if (j8 < 0 && (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-j8)) != null && tLRPC$Chat.migrated_to != null) {
                    }
                    longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                }
            }
            i9++;
            j = 0;
        }
        if (tLRPC$messages_Dialogs2 != null && !tLRPC$messages_Dialogs2.dialogs.isEmpty()) {
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Dialogs2.messages);
            for (int i12 = 0; i12 < tLRPC$messages_Dialogs2.messages.size(); i12++) {
                TLRPC$Message tLRPC$Message3 = tLRPC$messages_Dialogs2.messages.get(i12);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message3.action;
                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray3.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                    tLRPC$Message3.reply_markup = new TLRPC$TL_replyKeyboardHide();
                    tLRPC$Message3.flags |= 64;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message3.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message3.unread = false;
                    tLRPC$Message3.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num6 = concurrentHashMap.get(Long.valueOf(tLRPC$Message3.dialog_id));
                    if (num6 == null) {
                        num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message3.out, tLRPC$Message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message3.dialog_id), num6);
                    }
                    tLRPC$Message3.unread = num6.intValue() < tLRPC$Message3.id;
                }
            }
            getMessagesStorage().putDialogs(tLRPC$messages_Dialogs2, 0);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$18(i, arrayList2, arrayList3, arrayList4, tLRPC$messages_Dialogs2, arrayList, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v3 */
    public /* synthetic */ void lambda$processLoadedDialogFilters$18(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        int i2;
        boolean z;
        if (i != 2) {
            this.dialogFilters = arrayList;
            this.dialogFiltersById.clear();
            int size = this.dialogFilters.size();
            for (int i3 = 0; i3 < size; i3++) {
                DialogFilter dialogFilter = this.dialogFilters.get(i3);
                this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
            }
            Collections.sort(this.dialogFilters, MessagesController$$ExternalSyntheticLambda231.INSTANCE);
            putUsers(arrayList2, true);
            putChats(arrayList3, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i == 0) {
                loadRemoteFilters(false);
            }
            if (tLRPC$messages_Dialogs != null && !tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
            }
            if (arrayList4 != null) {
                for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                    TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList4.get(i4);
                    if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                        getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, null);
                    }
                    putEncryptedChat(tLRPC$EncryptedChat, true);
                }
            }
            for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                long keyAt = longSparseArray.keyAt(i5);
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray.valueAt(i5);
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
                if (tLRPC$messages_Dialogs != null && tLRPC$messages_Dialogs.dialogs.contains(tLRPC$Dialog)) {
                    if (tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage) {
                        getMediaDataController().saveDraft(tLRPC$Dialog.id, 0, tLRPC$Dialog.draft, null, false);
                    }
                    if (tLRPC$Dialog2 != null) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                }
                ArrayList<MessageObject> arrayList5 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList5);
                    if (arrayList5 != null) {
                        for (int i6 = 0; i6 < arrayList5.size(); i6++) {
                            MessageObject messageObject = arrayList5.get(i6);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j = messageObject.messageOwner.random_id;
                                if (j != 0) {
                                    this.dialogMessagesByRandomIds.put(j, messageObject);
                                }
                            }
                        }
                    }
                } else {
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    ArrayList<MessageObject> arrayList6 = this.dialogMessage.get(keyAt);
                    for (int i7 = 0; arrayList6 != null && i7 < arrayList6.size(); i7++) {
                        if (arrayList6.get(i7) != null && arrayList6.get(i7).deleted) {
                            z = true;
                            break;
                        }
                    }
                    z = false;
                    if (z || arrayList6 == null || tLRPC$Dialog2.top_message > 0) {
                        if (tLRPC$Dialog.top_message < tLRPC$Dialog2.top_message) {
                            if ((arrayList6 == null) == (arrayList5 == null)) {
                                if (arrayList6 != null) {
                                    if (arrayList5 != null) {
                                        if (arrayList6.size() == arrayList5.size()) {
                                        }
                                    }
                                }
                            }
                        }
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList5);
                        if (arrayList6 != null) {
                            for (int i8 = 0; i8 < arrayList6.size(); i8++) {
                                MessageObject messageObject2 = arrayList6.get(i8);
                                if (messageObject2 != null) {
                                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                        this.dialogMessagesByIds.remove(messageObject2.getId());
                                    }
                                    long j2 = messageObject2.messageOwner.random_id;
                                    if (j2 != 0) {
                                        this.dialogMessagesByRandomIds.remove(j2);
                                    }
                                }
                            }
                        }
                        if (arrayList5 != null) {
                            for (int i9 = 0; i9 < arrayList5.size(); i9++) {
                                MessageObject messageObject3 = arrayList5.get(i9);
                                if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                    int i10 = 0;
                                    while (true) {
                                        if (arrayList6 == null || i10 >= arrayList6.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = arrayList6.get(i10);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        }
                                        i10++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j3 = messageObject3.messageOwner.random_id;
                                    if (j3 != 0) {
                                        this.dialogMessagesByRandomIds.put(j3, messageObject3);
                                    }
                                }
                            }
                        }
                    } else {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList5);
                        for (int i11 = 0; i11 < arrayList6.size(); i11++) {
                            MessageObject messageObject5 = arrayList6.get(i11);
                            if (messageObject5 != null) {
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j4 = messageObject5.messageOwner.random_id;
                                if (j4 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j4);
                                }
                            }
                        }
                        if (arrayList5 != null) {
                            for (int i12 = 0; i12 < arrayList5.size(); i12++) {
                                MessageObject messageObject6 = arrayList5.get(i12);
                                if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                    int i13 = 0;
                                    while (true) {
                                        if (i13 >= arrayList6.size()) {
                                            break;
                                        }
                                        MessageObject messageObject7 = arrayList6.get(i13);
                                        if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                            messageObject6.deleted = messageObject7.deleted;
                                            break;
                                        }
                                        i13++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                    long j5 = messageObject6.messageOwner.random_id;
                                    if (j5 != 0) {
                                        this.dialogMessagesByRandomIds.put(j5, messageObject6);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.allDialogs.clear();
            int size2 = this.dialogs_dict.size();
            for (int i14 = 0; i14 < size2; i14++) {
                TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i14);
                if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                    this.allDialogs.add(valueAt);
                }
            }
            sortDialogs(null);
            i2 = 0;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            i2 = 0;
        }
        if (i != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(i2);
            this.loadingRemoteFilters = i2;
            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[i2]);
        }
        lockFiltersInternal();
    }

    public static /* synthetic */ int lambda$processLoadedDialogFilters$17(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    public void loadSuggestedFilters() {
        if (this.loadingSuggestedFilters) {
            return;
        }
        this.loadingSuggestedFilters = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getSuggestedDialogFilters
            public static int constructor = -1566780372;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                int readInt32 = abstractSerializedData.readInt32(z);
                for (int i2 = 0; i2 < readInt32; i2++) {
                    TLRPC$TL_dialogFilterSuggested TLdeserialize = TLRPC$TL_dialogFilterSuggested.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize == null) {
                        return tLRPC$Vector;
                    }
                    tLRPC$Vector.objects.add(TLdeserialize);
                }
                return tLRPC$Vector;
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda262
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadSuggestedFilters$21(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadSuggestedFilters$21(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda142
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSuggestedFilters$20(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadSuggestedFilters$20(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC$TL_dialogFilterSuggested) tLRPC$Vector.objects.get(i));
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean z) {
        if (this.loadingRemoteFilters || !getUserConfig().isClientActivated()) {
            return;
        }
        if (!z && getUserConfig().filtersLoaded) {
            return;
        }
        if (z) {
            getUserConfig().filtersLoaded = false;
            getUserConfig().saveConfig(false);
        }
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getDialogFilters
            public static int constructor = -241247891;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z2) {
                TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                int readInt32 = abstractSerializedData.readInt32(z2);
                for (int i2 = 0; i2 < readInt32; i2++) {
                    TLRPC$DialogFilter TLdeserialize = TLRPC$DialogFilter.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z2), z2);
                    if (TLdeserialize == null) {
                        return tLRPC$Vector;
                    }
                    tLRPC$Vector.objects.add(TLdeserialize);
                }
                return tLRPC$Vector;
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda258
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadRemoteFilters$23(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadRemoteFilters$23(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            getMessagesStorage().checkLoadedRemoteFilters((TLRPC$Vector) tLObject);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda33
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$22();
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$22() {
        this.loadingRemoteFilters = false;
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[i] == dialogFilter) {
            return;
        }
        DialogFilter dialogFilter2 = dialogFilterArr[i];
        dialogFilterArr[i] = dialogFilter;
        char c = 1;
        if (dialogFilterArr[i == 0 ? (char) 1 : (char) 0] == dialogFilter) {
            if (i != 0) {
                c = 0;
            }
            dialogFilterArr[c] = null;
        }
        if (dialogFilterArr[i] != null) {
            sortDialogs(null);
        } else if (dialogFilter2 == null) {
        } else {
            dialogFilter2.dialogs.clear();
        }
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs(null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                return;
            }
        }
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int i = 254;
            int size = this.dialogFilters.size();
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            if (this.dialogFilters.get(0).isDefault() && !getUserConfig().isPremium()) {
                this.dialogFilters.add(1, dialogFilter);
            } else {
                this.dialogFilters.add(0, dialogFilter);
            }
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
        if (this.dialogFilters.size() == 1 && SharedConfig.getChatSwipeAction(this.currentAccount) != 5) {
            SharedConfig.updateChatListSwipeSetting(5);
        }
        lockFiltersInternal();
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    /* renamed from: loadAppConfig */
    public void lambda$new$14() {
        if (this.loadingAppConfig) {
            return;
        }
        this.loadingAppConfig = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_help_getAppConfig
            public static int constructor = -1735311088;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$JSONValue.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadAppConfig$25(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadAppConfig$25(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda143
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadAppConfig$24(tLObject);
            }
        });
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    public /* synthetic */ void lambda$loadAppConfig$24(TLObject tLObject) {
        char c;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject;
        int i;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject2;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject3;
        int i2;
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject4;
        int i3;
        int i4;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        int intValue;
        char c2;
        boolean z9;
        if (tLObject instanceof TLRPC$TL_jsonObject) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            resetAppConfig();
            TLRPC$TL_jsonObject tLRPC$TL_jsonObject5 = (TLRPC$TL_jsonObject) tLObject;
            int size = tLRPC$TL_jsonObject5.value.size();
            int i5 = 0;
            boolean z10 = false;
            boolean z11 = false;
            while (i5 < size) {
                TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue = tLRPC$TL_jsonObject5.value.get(i5);
                String str = tLRPC$TL_jsonObjectValue.key;
                str.hashCode();
                switch (str.hashCode()) {
                    case -2086426873:
                        if (str.equals("dialog_filters_pinned_limit_premium")) {
                            c = 0;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1906216435:
                        if (str.equals("upload_max_fileparts_default")) {
                            c = 1;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1688620344:
                        if (str.equals("dialog_filters_tooltip")) {
                            c = 2;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1683918311:
                        if (str.equals("qr_login_camera")) {
                            c = 3;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1391086521:
                        if (str.equals("pending_suggestions")) {
                            c = 4;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1385240692:
                        if (str.equals("channels_public_limit_premium")) {
                            c = 5;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1287877531:
                        if (str.equals("stickers_faved_limit_premium")) {
                            c = 6;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1056002991:
                        if (str.equals("chat_read_mark_expire_period")) {
                            c = 7;
                            break;
                        }
                        c = 65535;
                        break;
                    case -1032177933:
                        if (str.equals("emojies_send_dice")) {
                            c = '\b';
                            break;
                        }
                        c = 65535;
                        break;
                    case -980397720:
                        if (str.equals("url_auth_domains")) {
                            c = '\t';
                            break;
                        }
                        c = 65535;
                        break;
                    case -896467099:
                        if (str.equals("saved_gifs_limit_default")) {
                            c = '\n';
                            break;
                        }
                        c = 65535;
                        break;
                    case -581904190:
                        if (str.equals("dialog_filters_limit_default")) {
                            c = 11;
                            break;
                        }
                        c = 65535;
                        break;
                    case -561040027:
                        if (str.equals("premium_invoice_slug")) {
                            c = '\f';
                            break;
                        }
                        c = 65535;
                        break;
                    case -515715076:
                        if (str.equals("export_regex")) {
                            c = '\r';
                            break;
                        }
                        c = 65535;
                        break;
                    case -488472170:
                        if (str.equals("about_length_limit_default")) {
                            c = 14;
                            break;
                        }
                        c = 65535;
                        break;
                    case -473866179:
                        if (str.equals("reactions_user_max_premium")) {
                            c = 15;
                            break;
                        }
                        c = 65535;
                        break;
                    case -416504589:
                        if (str.equals("caption_length_limit_premium")) {
                            c = 16;
                            break;
                        }
                        c = 65535;
                        break;
                    case -404170231:
                        if (str.equals("keep_alive_service")) {
                            c = 17;
                            break;
                        }
                        c = 65535;
                        break;
                    case -381432266:
                        if (str.equals("premium_promo_order")) {
                            c = 18;
                            break;
                        }
                        c = 65535;
                        break;
                    case -377047005:
                        if (str.equals("ringtone_size_max")) {
                            c = 19;
                            break;
                        }
                        c = 65535;
                        break;
                    case -350971916:
                        if (str.equals("dialog_filters_chats_limit_premium")) {
                            c = 20;
                            break;
                        }
                        c = 65535;
                        break;
                    case -256319580:
                        if (str.equals("channels_limit_premium")) {
                            c = 21;
                            break;
                        }
                        c = 65535;
                        break;
                    case -253815153:
                        if (str.equals("background_connection")) {
                            c = 22;
                            break;
                        }
                        c = 65535;
                        break;
                    case -232883529:
                        if (str.equals("emojies_send_dice_success")) {
                            c = 23;
                            break;
                        }
                        c = 65535;
                        break;
                    case -223170831:
                        if (str.equals("dialog_filters_pinned_limit_default")) {
                            c = 24;
                            break;
                        }
                        c = 65535;
                        break;
                    case -111779186:
                        if (str.equals("autoarchive_setting_available")) {
                            c = 25;
                            break;
                        }
                        c = 65535;
                        break;
                    case -76561797:
                        if (str.equals("youtube_pip")) {
                            c = 26;
                            break;
                        }
                        c = 65535;
                        break;
                    case -24016028:
                        if (str.equals("emojies_animated_zoom")) {
                            c = 27;
                            break;
                        }
                        c = 65535;
                        break;
                    case 169095108:
                        if (str.equals("stickers_emoji_suggest_only_api")) {
                            c = 28;
                            break;
                        }
                        c = 65535;
                        break;
                    case 222975416:
                        if (str.equals("gif_search_emojies")) {
                            c = 29;
                            break;
                        }
                        c = 65535;
                        break;
                    case 227342346:
                        if (str.equals("autologin_domains")) {
                            c = 30;
                            break;
                        }
                        c = 65535;
                        break;
                    case 246778895:
                        if (str.equals("export_group_urls")) {
                            c = 31;
                            break;
                        }
                        c = 65535;
                        break;
                    case 314452116:
                        if (str.equals("autologin_token")) {
                            c = ' ';
                            break;
                        }
                        c = 65535;
                        break;
                    case 396402384:
                        if (str.equals("getfile_experimental_params")) {
                            c = '!';
                            break;
                        }
                        c = 65535;
                        break;
                    case 428604605:
                        if (str.equals("premium_playmarket_direct_currency_list")) {
                            c = '\"';
                            break;
                        }
                        c = 65535;
                        break;
                    case 478015350:
                        if (str.equals("channels_public_limit_default")) {
                            c = '#';
                            break;
                        }
                        c = 65535;
                        break;
                    case 525494819:
                        if (str.equals("upload_max_fileparts_premium")) {
                            c = '$';
                            break;
                        }
                        c = 65535;
                        break;
                    case 575378511:
                        if (str.equals("stickers_faved_limit_default")) {
                            c = '%';
                            break;
                        }
                        c = 65535;
                        break;
                    case 676199595:
                        if (str.equals("groupcall_video_participants_max")) {
                            c = '&';
                            break;
                        }
                        c = 65535;
                        break;
                    case 684764449:
                        if (str.equals("save_gifs_with_stickers")) {
                            c = '\'';
                            break;
                        }
                        c = 65535;
                        break;
                    case 812427767:
                        if (str.equals("login_google_oauth_client_id")) {
                            c = '(';
                            break;
                        }
                        c = 65535;
                        break;
                    case 917364150:
                        if (str.equals("ringtone_duration_max")) {
                            c = ')';
                            break;
                        }
                        c = 65535;
                        break;
                    case 992898905:
                        if (str.equals("inapp_update_check_delay")) {
                            c = '*';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1052355894:
                        if (str.equals("premium_bot_username")) {
                            c = '+';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1085221270:
                        if (str.equals("premium_purchase_blocked")) {
                            c = ',';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1322701672:
                        if (str.equals("round_video_encoding")) {
                            c = '-';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1389389863:
                        if (str.equals("reactions_user_max_default")) {
                            c = '.';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1446751453:
                        if (str.equals("caption_length_limit_default")) {
                            c = '/';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1508636733:
                        if (str.equals("chat_read_mark_size_threshold")) {
                            c = '0';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1512284126:
                        if (str.equals("dialog_filters_chats_limit_default")) {
                            c = '1';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1535244155:
                        if (str.equals("saved_gifs_limit_premium")) {
                            c = '2';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1597443023:
                        if (str.equals("topics_pinned_limit")) {
                            c = '3';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1606936462:
                        if (str.equals("channels_limit_default")) {
                            c = '4';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1785205890:
                        if (str.equals("reactions_in_chat_max")) {
                            c = '5';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1849807064:
                        if (str.equals("dialog_filters_limit_premium")) {
                            c = '6';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1850325103:
                        if (str.equals("emojies_sounds")) {
                            c = '7';
                            break;
                        }
                        c = 65535;
                        break;
                    case 1943239084:
                        if (str.equals("about_length_limit_premium")) {
                            c = '8';
                            break;
                        }
                        c = 65535;
                        break;
                    case 2074702027:
                        if (str.equals("export_private_urls")) {
                            c = '9';
                            break;
                        }
                        c = 65535;
                        break;
                    case 2130452052:
                        if (str.equals("forum_upgrade_participants_min")) {
                            c = ':';
                            break;
                        }
                        c = 65535;
                        break;
                    case 2136829446:
                        if (str.equals("dialog_filters_enabled")) {
                            c = ';';
                            break;
                        }
                        c = 65535;
                        break;
                    default:
                        c = 65535;
                        break;
                }
                switch (c) {
                    case 0:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue instanceof TLRPC$TL_jsonNumber) {
                            double d = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue).value;
                            if (d != this.dialogFiltersPinnedLimitPremium) {
                                int i6 = (int) d;
                                this.dialogFiltersPinnedLimitPremium = i6;
                                edit.putInt("dialogFiltersPinnedLimitPremium", i6);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 1:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue2 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue2 instanceof TLRPC$TL_jsonNumber) {
                            double d2 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue2).value;
                            if (d2 != this.uploadMaxFileParts) {
                                int i7 = (int) d2;
                                this.uploadMaxFileParts = i7;
                                edit.putInt("uploadMaxFileParts", i7);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 2:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue3 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue3 instanceof TLRPC$TL_jsonBool) && (z = ((TLRPC$TL_jsonBool) tLRPC$JSONValue3).value) != this.showFiltersTooltip) {
                            this.showFiltersTooltip = z;
                            edit.putBoolean("showFiltersTooltip", z);
                            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
                            z10 = true;
                            break;
                        }
                        break;
                    case 3:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue4 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue4 instanceof TLRPC$TL_jsonBool) && (z2 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue4).value) != this.qrLoginCamera) {
                            this.qrLoginCamera = z2;
                            edit.putBoolean("qrLoginCamera", z2);
                            z10 = true;
                            break;
                        }
                        break;
                    case 4:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet hashSet = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue5 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue5 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray = (TLRPC$TL_jsonArray) tLRPC$JSONValue5;
                            int size2 = tLRPC$TL_jsonArray.value.size();
                            for (int i8 = 0; i8 < size2; i8++) {
                                TLRPC$JSONValue tLRPC$JSONValue6 = tLRPC$TL_jsonArray.value.get(i8);
                                if (tLRPC$JSONValue6 instanceof TLRPC$TL_jsonString) {
                                    hashSet.add(((TLRPC$TL_jsonString) tLRPC$JSONValue6).value);
                                }
                            }
                        }
                        if (!this.pendingSuggestions.equals(hashSet)) {
                            this.pendingSuggestions = hashSet;
                            edit.putStringSet("pendingSuggestions", hashSet);
                            getNotificationCenter().postNotificationName(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case 5:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue7 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue7 instanceof TLRPC$TL_jsonNumber) {
                            double d3 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue7).value;
                            if (d3 != this.publicLinksLimitPremium) {
                                int i9 = (int) d3;
                                this.publicLinksLimitPremium = i9;
                                edit.putInt("publicLinksLimitPremium", i9);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 6:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue8 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue8 instanceof TLRPC$TL_jsonNumber) {
                            double d4 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue8).value;
                            if (d4 != this.stickersFavedLimitPremium) {
                                int i10 = (int) d4;
                                this.stickersFavedLimitPremium = i10;
                                edit.putInt("stickersFavedLimitPremium", i10);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 7:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue9 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue9 instanceof TLRPC$TL_jsonNumber) {
                            double d5 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue9).value;
                            if (d5 != this.chatReadMarkExpirePeriod) {
                                int i11 = (int) d5;
                                this.chatReadMarkExpirePeriod = i11;
                                edit.putInt("chatReadMarkExpirePeriod", i11);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '\b':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet<String> hashSet2 = new HashSet<>();
                        TLRPC$JSONValue tLRPC$JSONValue10 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue10 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray2 = (TLRPC$TL_jsonArray) tLRPC$JSONValue10;
                            int size3 = tLRPC$TL_jsonArray2.value.size();
                            for (int i12 = 0; i12 < size3; i12++) {
                                TLRPC$JSONValue tLRPC$JSONValue11 = tLRPC$TL_jsonArray2.value.get(i12);
                                if (tLRPC$JSONValue11 instanceof TLRPC$TL_jsonString) {
                                    hashSet2.add(((TLRPC$TL_jsonString) tLRPC$JSONValue11).value.replace("️", ""));
                                }
                            }
                        }
                        if (!this.diceEmojies.equals(hashSet2)) {
                            this.diceEmojies = hashSet2;
                            edit.putStringSet("diceEmojies", hashSet2);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case '\t':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet hashSet3 = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue12 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue12 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray3 = (TLRPC$TL_jsonArray) tLRPC$JSONValue12;
                            int size4 = tLRPC$TL_jsonArray3.value.size();
                            for (int i13 = 0; i13 < size4; i13++) {
                                TLRPC$JSONValue tLRPC$JSONValue13 = tLRPC$TL_jsonArray3.value.get(i13);
                                if (tLRPC$JSONValue13 instanceof TLRPC$TL_jsonString) {
                                    hashSet3.add(((TLRPC$TL_jsonString) tLRPC$JSONValue13).value);
                                }
                            }
                        }
                        if (!this.authDomains.equals(hashSet3)) {
                            this.authDomains = hashSet3;
                            edit.putStringSet("authDomains", hashSet3);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case '\n':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue14 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue14 instanceof TLRPC$TL_jsonNumber) {
                            double d6 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue14).value;
                            if (d6 != this.savedGifsLimitDefault) {
                                int i14 = (int) d6;
                                this.savedGifsLimitDefault = i14;
                                edit.putInt("savedGifsLimitDefault", i14);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 11:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue15 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue15 instanceof TLRPC$TL_jsonNumber) {
                            double d7 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue15).value;
                            if (d7 != this.dialogFiltersLimitDefault) {
                                int i15 = (int) d7;
                                this.dialogFiltersLimitDefault = i15;
                                edit.putInt("dialogFiltersLimitDefault", i15);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '\f':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue16 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue16 instanceof TLRPC$TL_jsonString) {
                            String str2 = ((TLRPC$TL_jsonString) tLRPC$JSONValue16).value;
                            if (!str2.equals(this.premiumInvoiceSlug)) {
                                this.premiumInvoiceSlug = str2;
                                edit.putString("premiumInvoiceSlug", str2);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '\r':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet hashSet4 = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue17 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue17 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray4 = (TLRPC$TL_jsonArray) tLRPC$JSONValue17;
                            int size5 = tLRPC$TL_jsonArray4.value.size();
                            for (int i16 = 0; i16 < size5; i16++) {
                                TLRPC$JSONValue tLRPC$JSONValue18 = tLRPC$TL_jsonArray4.value.get(i16);
                                if (tLRPC$JSONValue18 instanceof TLRPC$TL_jsonString) {
                                    hashSet4.add(((TLRPC$TL_jsonString) tLRPC$JSONValue18).value);
                                }
                            }
                        }
                        if (!this.exportUri.equals(hashSet4)) {
                            this.exportUri = hashSet4;
                            edit.putStringSet("exportUri2", hashSet4);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case 14:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue19 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue19 instanceof TLRPC$TL_jsonNumber) {
                            double d8 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue19).value;
                            if (d8 != this.aboutLengthLimitDefault) {
                                int i17 = (int) d8;
                                this.aboutLengthLimitDefault = i17;
                                edit.putInt("aboutLengthLimitDefault", i17);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 15:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue20 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue20 instanceof TLRPC$TL_jsonNumber) {
                            double d9 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue20).value;
                            if (d9 != this.reactionsUserMaxPremium) {
                                int i18 = (int) d9;
                                this.reactionsUserMaxPremium = i18;
                                edit.putInt("reactionsUserMaxPremium", i18);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 16:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue21 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue21 instanceof TLRPC$TL_jsonNumber) {
                            double d10 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue21).value;
                            if (d10 != this.captionLengthLimitPremium) {
                                int i19 = (int) d10;
                                this.captionLengthLimitPremium = i19;
                                edit.putInt("captionLengthLimitPremium", i19);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 17:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue22 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue22 instanceof TLRPC$TL_jsonBool) && (z3 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue22).value) != this.keepAliveService) {
                            this.keepAliveService = z3;
                            edit.putBoolean("keepAliveService", z3);
                            z10 = true;
                            z11 = true;
                            break;
                        }
                        break;
                    case 18:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue23 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue23 instanceof TLRPC$TL_jsonArray) {
                            z10 = savePremiumFeaturesPreviewOrder(edit, ((TLRPC$TL_jsonArray) tLRPC$JSONValue23).value);
                            break;
                        } else {
                            break;
                        }
                    case 19:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue24 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue24 instanceof TLRPC$TL_jsonNumber) {
                            double d11 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue24).value;
                            if (d11 != this.ringtoneSizeMax) {
                                int i20 = (int) d11;
                                this.ringtoneSizeMax = i20;
                                edit.putInt("ringtoneSizeMax", i20);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 20:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue25 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue25 instanceof TLRPC$TL_jsonNumber) {
                            double d12 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue25).value;
                            if (d12 != this.dialogFiltersChatsLimitPremium) {
                                int i21 = (int) d12;
                                this.dialogFiltersChatsLimitPremium = i21;
                                edit.putInt("dialogFiltersChatsLimitPremium", i21);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 21:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue26 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue26 instanceof TLRPC$TL_jsonNumber) {
                            double d13 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue26).value;
                            if (d13 != this.channelsLimitPremium) {
                                int i22 = (int) d13;
                                this.channelsLimitPremium = i22;
                                edit.putInt("channelsLimitPremium", i22);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 22:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue27 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue27 instanceof TLRPC$TL_jsonBool) && (z4 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue27).value) != this.backgroundConnection) {
                            this.backgroundConnection = z4;
                            edit.putBoolean("backgroundConnection", z4);
                            z10 = true;
                            z11 = true;
                            break;
                        }
                        break;
                    case 23:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        try {
                            HashMap<String, DiceFrameSuccess> hashMap = new HashMap<>();
                            TLRPC$JSONValue tLRPC$JSONValue28 = tLRPC$TL_jsonObjectValue.value;
                            if (tLRPC$JSONValue28 instanceof TLRPC$TL_jsonObject) {
                                TLRPC$TL_jsonObject tLRPC$TL_jsonObject6 = (TLRPC$TL_jsonObject) tLRPC$JSONValue28;
                                int size6 = tLRPC$TL_jsonObject6.value.size();
                                int i23 = 0;
                                while (i23 < size6) {
                                    TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue2 = tLRPC$TL_jsonObject6.value.get(i23);
                                    TLRPC$JSONValue tLRPC$JSONValue29 = tLRPC$TL_jsonObjectValue2.value;
                                    if (tLRPC$JSONValue29 instanceof TLRPC$TL_jsonObject) {
                                        TLRPC$TL_jsonObject tLRPC$TL_jsonObject7 = (TLRPC$TL_jsonObject) tLRPC$JSONValue29;
                                        int size7 = tLRPC$TL_jsonObject7.value.size();
                                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject6;
                                        int i24 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        int i25 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        int i26 = 0;
                                        while (i26 < size7) {
                                            int i27 = size6;
                                            TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue3 = tLRPC$TL_jsonObject7.value.get(i26);
                                            TLRPC$TL_jsonObject tLRPC$TL_jsonObject8 = tLRPC$TL_jsonObject7;
                                            if (tLRPC$TL_jsonObjectValue3.value instanceof TLRPC$TL_jsonNumber) {
                                                i4 = size7;
                                                if ("value".equals(tLRPC$TL_jsonObjectValue3.key)) {
                                                    i24 = (int) ((TLRPC$TL_jsonNumber) tLRPC$TL_jsonObjectValue3.value).value;
                                                } else if ("frame_start".equals(tLRPC$TL_jsonObjectValue3.key)) {
                                                    i25 = (int) ((TLRPC$TL_jsonNumber) tLRPC$TL_jsonObjectValue3.value).value;
                                                }
                                            } else {
                                                i4 = size7;
                                            }
                                            i26++;
                                            size6 = i27;
                                            tLRPC$TL_jsonObject7 = tLRPC$TL_jsonObject8;
                                            size7 = i4;
                                        }
                                        i3 = size6;
                                        if (i25 != Integer.MAX_VALUE && i24 != Integer.MAX_VALUE) {
                                            hashMap.put(tLRPC$TL_jsonObjectValue2.key.replace("️", ""), new DiceFrameSuccess(i25, i24));
                                        }
                                    } else {
                                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject6;
                                        i3 = size6;
                                    }
                                    i23++;
                                    tLRPC$TL_jsonObject6 = tLRPC$TL_jsonObject4;
                                    size6 = i3;
                                }
                            }
                            if (!this.diceSuccess.equals(hashMap)) {
                                this.diceSuccess = hashMap;
                                SerializedData serializedData = new SerializedData();
                                serializedData.writeInt32(this.diceSuccess.size());
                                for (Map.Entry<String, DiceFrameSuccess> entry : this.diceSuccess.entrySet()) {
                                    serializedData.writeString(entry.getKey());
                                    DiceFrameSuccess value = entry.getValue();
                                    serializedData.writeInt32(value.frame);
                                    serializedData.writeInt32(value.num);
                                }
                                edit.putString("diceSuccess", Base64.encodeToString(serializedData.toByteArray(), 0));
                                serializedData.cleanup();
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } catch (Exception e) {
                            FileLog.e(e);
                            break;
                        }
                    case 24:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue30 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue30 instanceof TLRPC$TL_jsonNumber) {
                            double d14 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue30).value;
                            if (d14 != this.dialogFiltersPinnedLimitDefault) {
                                int i28 = (int) d14;
                                this.dialogFiltersPinnedLimitDefault = i28;
                                edit.putInt("dialogFiltersPinnedLimitDefault", i28);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 25:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue31 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue31 instanceof TLRPC$TL_jsonBool) && (z5 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue31).value) != this.autoarchiveAvailable) {
                            this.autoarchiveAvailable = z5;
                            edit.putBoolean("autoarchiveAvailable", z5);
                            z10 = true;
                            break;
                        }
                        break;
                    case 26:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue32 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue32 instanceof TLRPC$TL_jsonString) {
                            TLRPC$TL_jsonString tLRPC$TL_jsonString = (TLRPC$TL_jsonString) tLRPC$JSONValue32;
                            if (!tLRPC$TL_jsonString.value.equals(this.youtubePipType)) {
                                String str3 = tLRPC$TL_jsonString.value;
                                this.youtubePipType = str3;
                                edit.putString("youtubePipType", str3);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 27:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue33 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue33 instanceof TLRPC$TL_jsonNumber) {
                            double d15 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue33).value;
                            if (this.animatedEmojisZoom != d15) {
                                float f = (float) d15;
                                this.animatedEmojisZoom = f;
                                edit.putFloat("animatedEmojisZoom", f);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case 28:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue34 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue34 instanceof TLRPC$TL_jsonBool) && (z6 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue34).value) != this.suggestStickersApiOnly) {
                            this.suggestStickersApiOnly = z6;
                            edit.putBoolean("suggestStickersApiOnly", z6);
                            z10 = true;
                            break;
                        }
                        break;
                    case 29:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        ArrayList<String> arrayList = new ArrayList<>();
                        TLRPC$JSONValue tLRPC$JSONValue35 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue35 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray5 = (TLRPC$TL_jsonArray) tLRPC$JSONValue35;
                            int size8 = tLRPC$TL_jsonArray5.value.size();
                            for (int i29 = 0; i29 < size8; i29++) {
                                TLRPC$JSONValue tLRPC$JSONValue36 = tLRPC$TL_jsonArray5.value.get(i29);
                                if (tLRPC$JSONValue36 instanceof TLRPC$TL_jsonString) {
                                    arrayList.add(((TLRPC$TL_jsonString) tLRPC$JSONValue36).value.replace("️", ""));
                                }
                            }
                        }
                        if (!this.gifSearchEmojies.equals(arrayList)) {
                            this.gifSearchEmojies = arrayList;
                            SerializedData serializedData2 = new SerializedData();
                            serializedData2.writeInt32(this.gifSearchEmojies.size());
                            int size9 = this.gifSearchEmojies.size();
                            for (int i30 = 0; i30 < size9; i30++) {
                                serializedData2.writeString(this.gifSearchEmojies.get(i30));
                            }
                            edit.putString("gifSearchEmojies", Base64.encodeToString(serializedData2.toByteArray(), 0));
                            serializedData2.cleanup();
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case 30:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet hashSet5 = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue37 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue37 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray6 = (TLRPC$TL_jsonArray) tLRPC$JSONValue37;
                            int size10 = tLRPC$TL_jsonArray6.value.size();
                            for (int i31 = 0; i31 < size10; i31++) {
                                TLRPC$JSONValue tLRPC$JSONValue38 = tLRPC$TL_jsonArray6.value.get(i31);
                                if (tLRPC$JSONValue38 instanceof TLRPC$TL_jsonString) {
                                    hashSet5.add(((TLRPC$TL_jsonString) tLRPC$JSONValue38).value);
                                }
                            }
                        }
                        if (!this.autologinDomains.equals(hashSet5)) {
                            this.autologinDomains = hashSet5;
                            edit.putStringSet("autologinDomains", hashSet5);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case 31:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        HashSet hashSet6 = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue39 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue39 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray7 = (TLRPC$TL_jsonArray) tLRPC$JSONValue39;
                            int size11 = tLRPC$TL_jsonArray7.value.size();
                            for (int i32 = 0; i32 < size11; i32++) {
                                TLRPC$JSONValue tLRPC$JSONValue40 = tLRPC$TL_jsonArray7.value.get(i32);
                                if (tLRPC$JSONValue40 instanceof TLRPC$TL_jsonString) {
                                    hashSet6.add(((TLRPC$TL_jsonString) tLRPC$JSONValue40).value);
                                }
                            }
                        }
                        if (!this.exportGroupUri.equals(hashSet6)) {
                            this.exportGroupUri = hashSet6;
                            edit.putStringSet("exportGroupUri", hashSet6);
                            z10 = true;
                            break;
                        } else {
                            break;
                        }
                    case ConnectionsManager.RequestFlagForceDownload /* 32 */:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue41 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue41 instanceof TLRPC$TL_jsonString) {
                            TLRPC$TL_jsonString tLRPC$TL_jsonString2 = (TLRPC$TL_jsonString) tLRPC$JSONValue41;
                            if (!tLRPC$TL_jsonString2.value.equals(this.autologinToken)) {
                                String str4 = tLRPC$TL_jsonString2.value;
                                this.autologinToken = str4;
                                edit.putString("autologinToken", str4);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '!':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue42 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue42 instanceof TLRPC$TL_jsonBool) && (z7 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue42).value) != this.getfileExperimentalParams) {
                            this.getfileExperimentalParams = z7;
                            edit.putBoolean("getfileExperimentalParams", z7);
                            z10 = true;
                            break;
                        }
                        break;
                    case '\"':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue43 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue43 instanceof TLRPC$TL_jsonArray) {
                            HashSet hashSet7 = new HashSet();
                            Iterator<TLRPC$JSONValue> it = ((TLRPC$TL_jsonArray) tLRPC$JSONValue43).value.iterator();
                            while (it.hasNext()) {
                                TLRPC$JSONValue next = it.next();
                                if (next instanceof TLRPC$TL_jsonString) {
                                    hashSet7.add(((TLRPC$TL_jsonString) next).value);
                                }
                            }
                            if (!this.directPaymentsCurrency.containsAll(hashSet7) || !hashSet7.containsAll(this.directPaymentsCurrency)) {
                                this.directPaymentsCurrency.clear();
                                this.directPaymentsCurrency.addAll(hashSet7);
                                edit.putStringSet("directPaymentsCurrency", hashSet7);
                                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.billingProductDetailsUpdated, new Object[0]);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '#':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue44 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue44 instanceof TLRPC$TL_jsonNumber) {
                            double d16 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue44).value;
                            if (d16 != this.publicLinksLimitDefault) {
                                int i33 = (int) d16;
                                this.publicLinksLimitDefault = i33;
                                edit.putInt("publicLinksLimit", i33);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '$':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue45 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue45 instanceof TLRPC$TL_jsonNumber) {
                            double d17 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue45).value;
                            if (d17 != this.uploadMaxFilePartsPremium) {
                                int i34 = (int) d17;
                                this.uploadMaxFilePartsPremium = i34;
                                edit.putInt("uploadMaxFilePartsPremium", i34);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '%':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue46 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue46 instanceof TLRPC$TL_jsonNumber) {
                            double d18 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue46).value;
                            if (d18 != this.stickersFavedLimitDefault) {
                                int i35 = (int) d18;
                                this.stickersFavedLimitDefault = i35;
                                edit.putInt("stickersFavedLimitDefault", i35);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '&':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue47 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue47 instanceof TLRPC$TL_jsonNumber) {
                            double d19 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue47).value;
                            if (d19 != this.groupCallVideoMaxParticipants) {
                                int i36 = (int) d19;
                                this.groupCallVideoMaxParticipants = i36;
                                edit.putInt("groipCallVideoMaxParticipants", i36);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '\'':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue48 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue48 instanceof TLRPC$TL_jsonBool) && (z8 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue48).value) != this.saveGifsWithStickers) {
                            this.saveGifsWithStickers = z8;
                            edit.putBoolean("saveGifsWithStickers", z8);
                            z10 = true;
                            break;
                        }
                        break;
                    case '(':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue49 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue49 instanceof TLRPC$TL_jsonString) {
                            String str5 = ((TLRPC$TL_jsonString) tLRPC$JSONValue49).value;
                            if (!Objects.equals(BuildVars.GOOGLE_AUTH_CLIENT_ID, str5)) {
                                BuildVars.GOOGLE_AUTH_CLIENT_ID = str5;
                                edit.putString("googleAuthClientId", str5);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case ')':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue50 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue50 instanceof TLRPC$TL_jsonNumber) {
                            double d20 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue50).value;
                            if (d20 != this.ringtoneDurationMax) {
                                int i37 = (int) d20;
                                this.ringtoneDurationMax = i37;
                                edit.putInt("ringtoneDurationMax", i37);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '*':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue51 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue51 instanceof TLRPC$TL_jsonNumber) {
                            double d21 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue51).value;
                            if (d21 == this.updateCheckDelay) {
                                break;
                            } else {
                                int i38 = (int) d21;
                                this.updateCheckDelay = i38;
                                edit.putInt("updateCheckDelay", i38);
                            }
                        } else if ((tLRPC$JSONValue51 instanceof TLRPC$TL_jsonString) && (intValue = Utilities.parseInt((CharSequence) ((TLRPC$TL_jsonString) tLRPC$JSONValue51).value).intValue()) != this.updateCheckDelay) {
                            this.updateCheckDelay = intValue;
                            edit.putInt("updateCheckDelay", intValue);
                        }
                        z10 = true;
                        break;
                    case '+':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue52 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue52 instanceof TLRPC$TL_jsonString) {
                            String str6 = ((TLRPC$TL_jsonString) tLRPC$JSONValue52).value;
                            if (!str6.equals(this.premiumBotUsername)) {
                                this.premiumBotUsername = str6;
                                edit.putString("premiumBotUsername", str6);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case ',':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue53 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue53 instanceof TLRPC$TL_jsonBool) && this.premiumLocked != ((TLRPC$TL_jsonBool) tLRPC$JSONValue53).value) {
                            boolean z12 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue53).value;
                            this.premiumLocked = z12;
                            edit.putBoolean("premiumLocked", z12);
                            z10 = true;
                            break;
                        }
                        break;
                    case '-':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue54 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue54 instanceof TLRPC$TL_jsonObject) {
                            TLRPC$TL_jsonObject tLRPC$TL_jsonObject9 = (TLRPC$TL_jsonObject) tLRPC$JSONValue54;
                            int size12 = tLRPC$TL_jsonObject9.value.size();
                            for (int i39 = 0; i39 < size12; i39++) {
                                TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue4 = tLRPC$TL_jsonObject9.value.get(i39);
                                String str7 = tLRPC$TL_jsonObjectValue4.key;
                                str7.hashCode();
                                switch (str7.hashCode()) {
                                    case -233204595:
                                        if (str7.equals("diameter")) {
                                            c2 = 0;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case 258902020:
                                        if (str7.equals("audio_bitrate")) {
                                            c2 = 1;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case 1924434857:
                                        if (str7.equals("video_bitrate")) {
                                            c2 = 2;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    default:
                                        c2 = 65535;
                                        break;
                                }
                                switch (c2) {
                                    case 0:
                                        TLRPC$JSONValue tLRPC$JSONValue55 = tLRPC$TL_jsonObjectValue4.value;
                                        if (tLRPC$JSONValue55 instanceof TLRPC$TL_jsonNumber) {
                                            double d22 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue55).value;
                                            if (d22 != this.roundVideoSize) {
                                                int i40 = (int) d22;
                                                this.roundVideoSize = i40;
                                                edit.putInt("roundVideoSize", i40);
                                                z10 = true;
                                                break;
                                            } else {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    case 1:
                                        TLRPC$JSONValue tLRPC$JSONValue56 = tLRPC$TL_jsonObjectValue4.value;
                                        if (tLRPC$JSONValue56 instanceof TLRPC$TL_jsonNumber) {
                                            double d23 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue56).value;
                                            if (d23 != this.roundAudioBitrate) {
                                                int i41 = (int) d23;
                                                this.roundAudioBitrate = i41;
                                                edit.putInt("roundAudioBitrate", i41);
                                                z10 = true;
                                                break;
                                            } else {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    case 2:
                                        TLRPC$JSONValue tLRPC$JSONValue57 = tLRPC$TL_jsonObjectValue4.value;
                                        if (tLRPC$JSONValue57 instanceof TLRPC$TL_jsonNumber) {
                                            double d24 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue57).value;
                                            if (d24 != this.roundVideoBitrate) {
                                                int i42 = (int) d24;
                                                this.roundVideoBitrate = i42;
                                                edit.putInt("roundVideoBitrate", i42);
                                                z10 = true;
                                                break;
                                            } else {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                }
                            }
                            break;
                        } else {
                            break;
                        }
                        break;
                    case '.':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue58 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue58 instanceof TLRPC$TL_jsonNumber) {
                            double d25 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue58).value;
                            if (d25 != this.reactionsUserMaxDefault) {
                                int i43 = (int) d25;
                                this.reactionsUserMaxDefault = i43;
                                edit.putInt("reactionsUserMaxDefault", i43);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '/':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue59 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue59 instanceof TLRPC$TL_jsonNumber) {
                            double d26 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue59).value;
                            if (d26 != this.captionLengthLimitDefault) {
                                int i44 = (int) d26;
                                this.captionLengthLimitDefault = i44;
                                edit.putInt("captionLengthLimitDefault", i44);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '0':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue60 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue60 instanceof TLRPC$TL_jsonNumber) {
                            double d27 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue60).value;
                            if (d27 != this.chatReadMarkSizeThreshold) {
                                int i45 = (int) d27;
                                this.chatReadMarkSizeThreshold = i45;
                                edit.putInt("chatReadMarkSizeThreshold", i45);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '1':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue61 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue61 instanceof TLRPC$TL_jsonNumber) {
                            double d28 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue61).value;
                            if (d28 != this.dialogFiltersChatsLimitDefault) {
                                int i46 = (int) d28;
                                this.dialogFiltersChatsLimitDefault = i46;
                                edit.putInt("dialogFiltersChatsLimitDefault", i46);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '2':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue62 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue62 instanceof TLRPC$TL_jsonNumber) {
                            double d29 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue62).value;
                            if (d29 != this.savedGifsLimitPremium) {
                                int i47 = (int) d29;
                                this.savedGifsLimitPremium = i47;
                                edit.putInt("savedGifsLimitPremium", i47);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '3':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue63 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue63 instanceof TLRPC$TL_jsonNumber) {
                            double d30 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue63).value;
                            if (d30 != this.topicsPinnedLimit) {
                                int i48 = (int) d30;
                                this.topicsPinnedLimit = i48;
                                edit.putInt("topicsPinnedLimit", i48);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '4':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue64 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue64 instanceof TLRPC$TL_jsonNumber) {
                            double d31 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue64).value;
                            if (d31 != this.channelsLimitDefault) {
                                int i49 = (int) d31;
                                this.channelsLimitDefault = i49;
                                edit.putInt("channelsLimitDefault", i49);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '5':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue65 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue65 instanceof TLRPC$TL_jsonNumber) {
                            double d32 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue65).value;
                            if (d32 != this.reactionsInChatMax) {
                                int i50 = (int) d32;
                                this.reactionsInChatMax = i50;
                                edit.putInt("reactionsInChatMax", i50);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '6':
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        TLRPC$JSONValue tLRPC$JSONValue66 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue66 instanceof TLRPC$TL_jsonNumber) {
                            double d33 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue66).value;
                            if (d33 != this.dialogFiltersLimitPremium) {
                                int i51 = (int) d33;
                                this.dialogFiltersLimitPremium = i51;
                                edit.putInt("dialogFiltersLimitPremium", i51);
                                z10 = true;
                                break;
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    case '7':
                        try {
                            HashMap<String, EmojiSound> hashMap2 = new HashMap<>();
                            TLRPC$JSONValue tLRPC$JSONValue67 = tLRPC$TL_jsonObjectValue.value;
                            if (tLRPC$JSONValue67 instanceof TLRPC$TL_jsonObject) {
                                TLRPC$TL_jsonObject tLRPC$TL_jsonObject10 = (TLRPC$TL_jsonObject) tLRPC$JSONValue67;
                                int size13 = tLRPC$TL_jsonObject10.value.size();
                                int i52 = 0;
                                while (i52 < size13) {
                                    TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue5 = tLRPC$TL_jsonObject10.value.get(i52);
                                    TLRPC$JSONValue tLRPC$JSONValue68 = tLRPC$TL_jsonObjectValue5.value;
                                    if (tLRPC$JSONValue68 instanceof TLRPC$TL_jsonObject) {
                                        TLRPC$TL_jsonObject tLRPC$TL_jsonObject11 = (TLRPC$TL_jsonObject) tLRPC$JSONValue68;
                                        int size14 = tLRPC$TL_jsonObject11.value.size();
                                        tLRPC$TL_jsonObject2 = tLRPC$TL_jsonObject10;
                                        long j = 0;
                                        long j2 = 0;
                                        int i53 = 0;
                                        String str8 = null;
                                        while (i53 < size14) {
                                            int i54 = size14;
                                            TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue6 = tLRPC$TL_jsonObject11.value.get(i53);
                                            tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                                            try {
                                                if (tLRPC$TL_jsonObjectValue6.value instanceof TLRPC$TL_jsonString) {
                                                    i = size;
                                                    try {
                                                        if ("id".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                            j = Utilities.parseLong(((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value).longValue();
                                                        } else if ("access_hash".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                            j2 = Utilities.parseLong(((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value).longValue();
                                                        } else if ("file_reference_base64".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                            str8 = ((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value;
                                                        }
                                                    } catch (Exception e2) {
                                                        e = e2;
                                                        FileLog.e(e);
                                                        i5++;
                                                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject;
                                                        size = i;
                                                    }
                                                } else {
                                                    i = size;
                                                }
                                                i53++;
                                                size14 = i54;
                                                tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject;
                                                size = i;
                                            } catch (Exception e3) {
                                                e = e3;
                                                i = size;
                                                FileLog.e(e);
                                                i5++;
                                                tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject;
                                                size = i;
                                            }
                                        }
                                        tLRPC$TL_jsonObject3 = tLRPC$TL_jsonObject5;
                                        i2 = size;
                                        if (j != 0 && j2 != 0 && str8 != null) {
                                            hashMap2.put(tLRPC$TL_jsonObjectValue5.key.replace("️", ""), new EmojiSound(j, j2, str8));
                                        }
                                    } else {
                                        tLRPC$TL_jsonObject2 = tLRPC$TL_jsonObject10;
                                        tLRPC$TL_jsonObject3 = tLRPC$TL_jsonObject5;
                                        i2 = size;
                                    }
                                    i52++;
                                    tLRPC$TL_jsonObject10 = tLRPC$TL_jsonObject2;
                                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject3;
                                    size = i2;
                                }
                            }
                            tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                            i = size;
                            if (!this.emojiSounds.equals(hashMap2)) {
                                this.emojiSounds = hashMap2;
                                SerializedData serializedData3 = new SerializedData();
                                serializedData3.writeInt32(this.emojiSounds.size());
                                for (Map.Entry<String, EmojiSound> entry2 : this.emojiSounds.entrySet()) {
                                    serializedData3.writeString(entry2.getKey());
                                    EmojiSound value2 = entry2.getValue();
                                    serializedData3.writeInt64(value2.id);
                                    serializedData3.writeInt64(value2.accessHash);
                                    serializedData3.writeByteArray(value2.fileReference);
                                }
                                edit.putString("emojiSounds", Base64.encodeToString(serializedData3.toByteArray(), 0));
                                serializedData3.cleanup();
                                z10 = true;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        }
                        break;
                    case '8':
                        TLRPC$JSONValue tLRPC$JSONValue69 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue69 instanceof TLRPC$TL_jsonNumber) {
                            double d34 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue69).value;
                            if (d34 != this.aboutLengthLimitPremium) {
                                int i55 = (int) d34;
                                this.aboutLengthLimitPremium = i55;
                                edit.putInt("aboutLengthLimitPremium", i55);
                                z10 = true;
                            }
                        }
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        break;
                    case '9':
                        HashSet hashSet8 = new HashSet();
                        TLRPC$JSONValue tLRPC$JSONValue70 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue70 instanceof TLRPC$TL_jsonArray) {
                            TLRPC$TL_jsonArray tLRPC$TL_jsonArray8 = (TLRPC$TL_jsonArray) tLRPC$JSONValue70;
                            int size15 = tLRPC$TL_jsonArray8.value.size();
                            for (int i56 = 0; i56 < size15; i56++) {
                                TLRPC$JSONValue tLRPC$JSONValue71 = tLRPC$TL_jsonArray8.value.get(i56);
                                if (tLRPC$JSONValue71 instanceof TLRPC$TL_jsonString) {
                                    hashSet8.add(((TLRPC$TL_jsonString) tLRPC$JSONValue71).value);
                                }
                            }
                        }
                        if (!this.exportPrivateUri.equals(hashSet8)) {
                            this.exportPrivateUri = hashSet8;
                            edit.putStringSet("exportPrivateUri", hashSet8);
                            tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                            i = size;
                            z10 = true;
                            break;
                        }
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        break;
                    case ':':
                        TLRPC$JSONValue tLRPC$JSONValue72 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue72 instanceof TLRPC$TL_jsonNumber) {
                            double d35 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue72).value;
                            if (d35 != this.forumUpgradeParticipantsMin) {
                                int i57 = (int) d35;
                                this.forumUpgradeParticipantsMin = i57;
                                edit.putInt("forumUpgradeParticipantsMin", i57);
                                z10 = true;
                            }
                        }
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        break;
                    case ';':
                        TLRPC$JSONValue tLRPC$JSONValue73 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue73 instanceof TLRPC$TL_jsonBool) && (z9 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue73).value) != this.filtersEnabled) {
                            this.filtersEnabled = z9;
                            edit.putBoolean("filtersEnabled", z9);
                            z10 = true;
                        }
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        break;
                    default:
                        tLRPC$TL_jsonObject = tLRPC$TL_jsonObject5;
                        i = size;
                        break;
                }
                i5++;
                tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject;
                size = i;
            }
            if (z10) {
                edit.apply();
            }
            if (z11) {
                ApplicationLoader.startPushService();
                ConnectionsManager connectionsManager = getConnectionsManager();
                connectionsManager.setPushConnectionEnabled(connectionsManager.isPushConnectionEnabled());
            }
        }
        this.loadingAppConfig = false;
    }

    private void resetAppConfig() {
        this.getfileExperimentalParams = false;
        this.mainPreferences.edit().remove("getfileExperimentalParams");
    }

    private boolean savePremiumFeaturesPreviewOrder(SharedPreferences.Editor editor, ArrayList<TLRPC$JSONValue> arrayList) {
        int serverStringToFeatureType;
        StringBuilder sb = new StringBuilder();
        this.premiumFeaturesTypesToPosition.clear();
        boolean z = false;
        int i = 0;
        while (true) {
            String str = null;
            if (i >= arrayList.size()) {
                break;
            }
            if (arrayList.get(i) instanceof TLRPC$TL_jsonString) {
                str = ((TLRPC$TL_jsonString) arrayList.get(i)).value;
            }
            if (str != null && (serverStringToFeatureType = PremiumPreviewFragment.serverStringToFeatureType(str)) >= 0) {
                this.premiumFeaturesTypesToPosition.put(serverStringToFeatureType, i);
                if (sb.length() > 0) {
                    sb.append('_');
                }
                sb.append(serverStringToFeatureType);
            }
            i++;
        }
        if (sb.length() > 0) {
            String sb2 = sb.toString();
            boolean z2 = !sb2.equals(this.mainPreferences.getString("premiumFeaturesTypesToPosition", null));
            editor.putString("premiumFeaturesTypesToPosition", sb2);
            return z2;
        }
        editor.remove("premiumFeaturesTypesToPosition");
        if (this.mainPreferences.getString("premiumFeaturesTypesToPosition", null) != null) {
            z = true;
        }
        return z;
    }

    private void loadPremiumFeaturesPreviewOrder(String str) {
        this.premiumFeaturesTypesToPosition.clear();
        if (str != null) {
            String[] split = str.split("_");
            for (int i = 0; i < split.length; i++) {
                this.premiumFeaturesTypesToPosition.put(Integer.parseInt(split[i]), i);
            }
        }
    }

    public void removeSuggestion(long j, String str) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        if (j == 0) {
            if (!this.pendingSuggestions.remove(str)) {
                return;
            }
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            edit.putStringSet("pendingSuggestions", this.pendingSuggestions);
            edit.commit();
            getNotificationCenter().postNotificationName(NotificationCenter.newSuggestionsAvailable, new Object[0]);
        }
        TLRPC$TL_help_dismissSuggestion tLRPC$TL_help_dismissSuggestion = new TLRPC$TL_help_dismissSuggestion();
        tLRPC$TL_help_dismissSuggestion.suggestion = str;
        if (j == 0) {
            tLRPC$TL_help_dismissSuggestion.peer = new TLRPC$TL_inputPeerEmpty();
        } else {
            tLRPC$TL_help_dismissSuggestion.peer = getInputPeer(j);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_help_dismissSuggestion, MessagesController$$ExternalSyntheticLambda359.INSTANCE);
    }

    public void updateConfig(final TLRPC$TL_config tLRPC$TL_config) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda168
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateConfig$27(tLRPC$TL_config);
            }
        });
    }

    public /* synthetic */ void lambda$updateConfig$27(TLRPC$TL_config tLRPC$TL_config) {
        getDownloadController().loadAutoDownloadConfig(false);
        lambda$new$14();
        this.remoteConfigLoaded = true;
        this.maxMegagroupCount = tLRPC$TL_config.megagroup_size_max;
        this.maxGroupCount = tLRPC$TL_config.chat_size_max;
        this.maxEditTime = tLRPC$TL_config.edit_time_limit;
        this.ratingDecay = tLRPC$TL_config.rating_e_decay;
        this.maxRecentGifsCount = tLRPC$TL_config.saved_gifs_limit;
        this.maxRecentStickersCount = tLRPC$TL_config.stickers_recent_limit;
        this.maxFaveStickersCount = tLRPC$TL_config.stickers_faved_limit;
        this.revokeTimeLimit = tLRPC$TL_config.revoke_time_limit;
        this.revokeTimePmLimit = tLRPC$TL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tLRPC$TL_config.revoke_pm_inbox;
        String str = tLRPC$TL_config.me_url_prefix;
        this.linkPrefix = str;
        boolean z = tLRPC$TL_config.force_try_ipv6;
        if (str.endsWith("/")) {
            String str2 = this.linkPrefix;
            this.linkPrefix = str2.substring(0, str2.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = tLRPC$TL_config.call_receive_timeout_ms;
        this.callRingTimeout = tLRPC$TL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tLRPC$TL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tLRPC$TL_config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = tLRPC$TL_config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = tLRPC$TL_config.pinned_infolder_count_max;
        this.maxMessageLength = tLRPC$TL_config.message_length_max;
        this.maxCaptionLength = tLRPC$TL_config.caption_length_max;
        this.preloadFeaturedStickers = tLRPC$TL_config.preload_featured_stickers;
        String str3 = tLRPC$TL_config.venue_search_username;
        if (str3 != null) {
            this.venueSearchBot = str3;
        }
        String str4 = tLRPC$TL_config.gif_search_username;
        if (str4 != null) {
            this.gifSearchBot = str4;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = tLRPC$TL_config.img_search_username;
        }
        this.blockedCountry = tLRPC$TL_config.blocked_mode;
        this.dcDomainName = tLRPC$TL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tLRPC$TL_config.webfile_dc_id;
        String str5 = tLRPC$TL_config.suggested_lang_code;
        if (str5 != null) {
            String str6 = this.suggestedLangCode;
            boolean z2 = str6 == null || !str6.equals(str5);
            this.suggestedLangCode = tLRPC$TL_config.suggested_lang_code;
            if (z2) {
                LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
            }
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tLRPC$TL_config.static_maps_provider == null) {
            tLRPC$TL_config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tLRPC$TL_config.static_maps_provider);
        String[] split = tLRPC$TL_config.static_maps_provider.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split2 = split[i].split("\\+");
            if (split2.length > 0) {
                String[] split3 = split2[0].split(":");
                if (split3.length > 0) {
                    if ("yandex".equals(split3[0])) {
                        if (i == 0) {
                            if (split2.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(split3[0])) {
                        if (i == 0 && split2.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(split3[0])) {
                        if (i == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (split3.length > 1) {
                        this.mapKey = split3[1];
                    }
                }
            }
        }
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putBoolean("remoteConfigLoaded", this.remoteConfigLoaded);
        edit.putInt("maxGroupCount", this.maxGroupCount);
        edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit.putInt("maxEditTime", this.maxEditTime);
        edit.putInt("ratingDecay", this.ratingDecay);
        edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit.putInt("callRingTimeout", this.callRingTimeout);
        edit.putInt("callConnectTimeout", this.callConnectTimeout);
        edit.putInt("callPacketTimeout", this.callPacketTimeout);
        edit.putString("linkPrefix", this.linkPrefix);
        edit.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        edit.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        edit.putInt("maxMessageLength", this.maxMessageLength);
        edit.putInt("maxCaptionLength", this.maxCaptionLength);
        edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit.putInt("mapProvider", this.mapProvider);
        String str7 = this.mapKey;
        if (str7 != null) {
            edit.putString("pk", str7);
        } else {
            edit.remove("pk");
        }
        edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit.putBoolean("blockedCountry", this.blockedCountry);
        edit.putString("venueSearchBot", this.venueSearchBot);
        edit.putString("gifSearchBot", this.gifSearchBot);
        edit.putString("imageSearchBot", this.imageSearchBot);
        edit.putString("dcDomainName2", this.dcDomainName);
        edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit.putString("suggestedLangCode", this.suggestedLangCode);
        edit.putBoolean("forceTryIpV6", z);
        edit.commit();
        getConnectionsManager().setForceTryIpV6(z);
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tLRPC$TL_config.lang_pack_version, tLRPC$TL_config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old2 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old2.phone = "333";
        tLRPC$TL_userForeign_old2.id = 333000L;
        tLRPC$TL_userForeign_old2.first_name = "Telegram";
        tLRPC$TL_userForeign_old2.last_name = "";
        tLRPC$TL_userForeign_old2.status = null;
        tLRPC$TL_userForeign_old2.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old2, true);
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old22 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old22.phone = "42777";
        tLRPC$TL_userForeign_old22.id = 777000L;
        tLRPC$TL_userForeign_old22.verified = true;
        tLRPC$TL_userForeign_old22.first_name = "Telegram";
        tLRPC$TL_userForeign_old22.last_name = "Notifications";
        tLRPC$TL_userForeign_old22.status = null;
        tLRPC$TL_userForeign_old22.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old22, true);
    }

    public TLRPC$InputUser getInputUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$User.id == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerSelf) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$InputPeer.user_id;
        tLRPC$TL_inputUser.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(long j) {
        return getInputUser(getUser(Long.valueOf(j)));
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$Chat tLRPC$Chat) {
        if ((tLRPC$Chat instanceof TLRPC$TL_channel) || (tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
            TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
            tLRPC$TL_inputChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputChannel;
        }
        return new TLRPC$TL_inputChannelEmpty();
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$InputPeer tLRPC$InputPeer) {
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$InputPeer.channel_id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public TLRPC$InputChannel getInputChannel(long j) {
        return getInputChannel(getChat(Long.valueOf(j)));
    }

    public TLRPC$InputPeer getInputPeer(TLRPC$Peer tLRPC$Peer) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = tLRPC$Peer.chat_id;
            return tLRPC$TL_inputPeerChat;
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            long j = tLRPC$Peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j;
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (chat == null) {
                return tLRPC$TL_inputPeerChannel;
            }
            tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        } else {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            long j2 = tLRPC$Peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User user = getUser(Long.valueOf(j2));
            if (user == null) {
                return tLRPC$TL_inputPeerUser;
            }
            tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
            return tLRPC$TL_inputPeerUser;
        }
    }

    public TLRPC$InputPeer getInputPeer(long j) {
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_inputPeerChannel.channel_id = j2;
                tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
                return tLRPC$TL_inputPeerChannel;
            }
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = j2;
            return tLRPC$TL_inputPeerChat;
        }
        TLRPC$User user = getUser(Long.valueOf(j));
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = j;
        if (user == null) {
            return tLRPC$TL_inputPeerUser;
        }
        tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$Chat tLRPC$Chat) {
        if (ChatObject.isChannel(tLRPC$Chat)) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputPeerChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        }
        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
        tLRPC$TL_inputPeerChat.chat_id = tLRPC$Chat.id;
        return tLRPC$TL_inputPeerChat;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$User tLRPC$User) {
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public TLRPC$Peer getPeer(long j) {
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if ((chat instanceof TLRPC$TL_channel) || (chat instanceof TLRPC$TL_channelForbidden)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_peerChannel.channel_id = j2;
                return tLRPC$TL_peerChannel;
            }
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = j2;
            return tLRPC$TL_peerChat;
        }
        getUser(Long.valueOf(j));
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_peerUser.user_id = j;
        return tLRPC$TL_peerUser;
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        TLRPC$InputFile tLRPC$InputFile;
        TLRPC$InputFile tLRPC$InputFile2;
        final Theme.ThemeInfo themeInfo;
        final Theme.ThemeAccent themeAccent;
        TLRPC$TL_theme tLRPC$TL_theme;
        TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings = null;
        if (i == NotificationCenter.fileUploaded) {
            String str = (String) objArr[0];
            TLRPC$InputFile tLRPC$InputFile3 = (TLRPC$InputFile) objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 != null && str2.equals(str)) {
                TLRPC$TL_photos_uploadProfilePhoto tLRPC$TL_photos_uploadProfilePhoto = new TLRPC$TL_photos_uploadProfilePhoto();
                tLRPC$TL_photos_uploadProfilePhoto.file = tLRPC$InputFile3;
                tLRPC$TL_photos_uploadProfilePhoto.flags |= 1;
                getConnectionsManager().sendRequest(tLRPC$TL_photos_uploadProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda255
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$didReceivedNotification$29(tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            String str3 = this.uploadingWallpaper;
            if (str3 != null && str3.equals(str)) {
                TLRPC$TL_account_uploadWallPaper tLRPC$TL_account_uploadWallPaper = new TLRPC$TL_account_uploadWallPaper();
                tLRPC$TL_account_uploadWallPaper.file = tLRPC$InputFile3;
                tLRPC$TL_account_uploadWallPaper.mime_type = "image/jpeg";
                final Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                final TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                tLRPC$TL_account_uploadWallPaper.settings = tLRPC$TL_wallPaperSettings;
                getConnectionsManager().sendRequest(tLRPC$TL_account_uploadWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda344
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$didReceivedNotification$31(overrideWallpaperInfo, tLRPC$TL_wallPaperSettings, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            Object obj = this.uploadingThemes.get(str);
            if (obj instanceof Theme.ThemeInfo) {
                Theme.ThemeInfo themeInfo2 = (Theme.ThemeInfo) obj;
                if (str.equals(themeInfo2.uploadingThumb)) {
                    themeInfo2.uploadedThumb = tLRPC$InputFile3;
                    themeInfo2.uploadingThumb = null;
                } else if (str.equals(themeInfo2.uploadingFile)) {
                    themeInfo2.uploadedFile = tLRPC$InputFile3;
                    themeInfo2.uploadingFile = null;
                }
                tLRPC$InputFile = themeInfo2.uploadedThumb;
                tLRPC$InputFile2 = themeInfo2.uploadedFile;
                themeInfo = themeInfo2;
                themeAccent = null;
            } else if (obj instanceof Theme.ThemeAccent) {
                Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                if (str.equals(themeAccent2.uploadingThumb)) {
                    themeAccent2.uploadedThumb = tLRPC$InputFile3;
                    themeAccent2.uploadingThumb = null;
                } else if (str.equals(themeAccent2.uploadingFile)) {
                    themeAccent2.uploadedFile = tLRPC$InputFile3;
                    themeAccent2.uploadingFile = null;
                }
                themeInfo = themeAccent2.parentTheme;
                themeAccent = themeAccent2;
                tLRPC$InputFile = themeAccent2.uploadedThumb;
                tLRPC$InputFile2 = themeAccent2.uploadedFile;
            } else {
                tLRPC$InputFile = null;
                tLRPC$InputFile2 = null;
                themeInfo = null;
                themeAccent = null;
            }
            this.uploadingThemes.remove(str);
            if (tLRPC$InputFile2 == null || tLRPC$InputFile == null) {
                return;
            }
            new File(str);
            TLRPC$TL_account_uploadTheme tLRPC$TL_account_uploadTheme = new TLRPC$TL_account_uploadTheme();
            tLRPC$TL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
            tLRPC$TL_account_uploadTheme.file_name = "theme.attheme";
            tLRPC$TL_account_uploadTheme.file = tLRPC$InputFile2;
            tLRPC$InputFile2.name = "theme.attheme";
            tLRPC$TL_account_uploadTheme.thumb = tLRPC$InputFile;
            tLRPC$InputFile.name = "theme-preview.jpg";
            tLRPC$TL_account_uploadTheme.flags |= 1;
            if (themeAccent != null) {
                themeAccent.uploadedFile = null;
                themeAccent.uploadedThumb = null;
                tLRPC$TL_theme = themeAccent.info;
                tLRPC$TL_inputThemeSettings = new TLRPC$TL_inputThemeSettings();
                tLRPC$TL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                tLRPC$TL_inputThemeSettings.accent_color = themeAccent.accentColor;
                int i3 = themeAccent.accentColor2;
                if (i3 != 0) {
                    tLRPC$TL_inputThemeSettings.flags |= 8;
                    tLRPC$TL_inputThemeSettings.outbox_accent_color = i3;
                }
                int i4 = themeAccent.myMessagesAccentColor;
                if (i4 != 0) {
                    tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i4));
                    tLRPC$TL_inputThemeSettings.flags |= 1;
                    int i5 = themeAccent.myMessagesGradientAccentColor1;
                    if (i5 != 0) {
                        tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i5));
                        int i6 = themeAccent.myMessagesGradientAccentColor2;
                        if (i6 != 0) {
                            tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i6));
                            int i7 = themeAccent.myMessagesGradientAccentColor3;
                            if (i7 != 0) {
                                tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i7));
                            }
                        }
                    }
                    tLRPC$TL_inputThemeSettings.message_colors_animated = themeAccent.myMessagesAnimated;
                }
                tLRPC$TL_inputThemeSettings.flags |= 2;
                tLRPC$TL_inputThemeSettings.wallpaper_settings = new TLRPC$TL_wallPaperSettings();
                if (!TextUtils.isEmpty(themeAccent.patternSlug)) {
                    TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
                    tLRPC$TL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                    tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperSlug;
                    TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                    tLRPC$WallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                    tLRPC$WallPaperSettings.flags |= 8;
                } else {
                    TLRPC$TL_inputWallPaperNoFile tLRPC$TL_inputWallPaperNoFile = new TLRPC$TL_inputWallPaperNoFile();
                    tLRPC$TL_inputWallPaperNoFile.id = 0L;
                    tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperNoFile;
                }
                TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                tLRPC$WallPaperSettings2.motion = themeAccent.patternMotion;
                long j = themeAccent.backgroundOverrideColor;
                if (j != 0) {
                    tLRPC$WallPaperSettings2.background_color = (int) j;
                    tLRPC$WallPaperSettings2.flags |= 1;
                }
                long j2 = themeAccent.backgroundGradientOverrideColor1;
                if (j2 != 0) {
                    tLRPC$WallPaperSettings2.second_background_color = (int) j2;
                    tLRPC$WallPaperSettings2.flags |= 16;
                    tLRPC$WallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                }
                long j3 = themeAccent.backgroundGradientOverrideColor2;
                if (j3 != 0) {
                    TLRPC$WallPaperSettings tLRPC$WallPaperSettings3 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                    tLRPC$WallPaperSettings3.third_background_color = (int) j3;
                    tLRPC$WallPaperSettings3.flags |= 32;
                }
                long j4 = themeAccent.backgroundGradientOverrideColor3;
                if (j4 != 0) {
                    TLRPC$WallPaperSettings tLRPC$WallPaperSettings4 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                    tLRPC$WallPaperSettings4.fourth_background_color = (int) j4;
                    tLRPC$WallPaperSettings4.flags |= 64;
                }
            } else {
                themeInfo.uploadedFile = null;
                themeInfo.uploadedThumb = null;
                tLRPC$TL_theme = themeInfo.info;
            }
            final TLRPC$TL_theme tLRPC$TL_theme2 = tLRPC$TL_theme;
            final TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings2 = tLRPC$TL_inputThemeSettings;
            getConnectionsManager().sendRequest(tLRPC$TL_account_uploadTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda338
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$didReceivedNotification$37(tLRPC$TL_theme2, themeInfo, tLRPC$TL_inputThemeSettings2, themeAccent, tLObject, tLRPC$TL_error);
                }
            });
        } else if (i == NotificationCenter.fileUploadFailed) {
            String str4 = (String) objArr[0];
            String str5 = this.uploadingAvatar;
            if (str5 != null && str5.equals(str4)) {
                this.uploadingAvatar = null;
                return;
            }
            String str6 = this.uploadingWallpaper;
            if (str6 != null && str6.equals(str4)) {
                this.uploadingWallpaper = null;
                this.uploadingWallpaperInfo = null;
                return;
            }
            Object remove = this.uploadingThemes.remove(str4);
            if (remove instanceof Theme.ThemeInfo) {
                Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                themeInfo3.uploadedFile = null;
                themeInfo3.uploadedThumb = null;
                getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo3, 0);
            } else if (remove instanceof Theme.ThemeAccent) {
                Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                themeAccent3.uploadingThumb = null;
                getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
            }
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (((Boolean) objArr[6]).booleanValue()) {
                return;
            }
            Integer num = (Integer) objArr[0];
            Integer num2 = (Integer) objArr[1];
            Long l = (Long) objArr[3];
            ArrayList<MessageObject> arrayList = this.dialogMessage.get(l.longValue());
            for (int i8 = 0; arrayList != null && i8 < arrayList.size(); i8++) {
                MessageObject messageObject2 = arrayList.get(i8);
                if (messageObject2 != null && (messageObject2.getId() == num.intValue() || messageObject2.messageOwner.local_id == num.intValue())) {
                    messageObject2.messageOwner.id = num2.intValue();
                    messageObject2.messageOwner.send_state = 0;
                }
                MessageObject messageObject3 = this.dialogMessagesByIds.get(num.intValue());
                if (messageObject3 != null) {
                    this.dialogMessagesByIds.remove(num.intValue());
                    this.dialogMessagesByIds.put(num2.intValue(), messageObject3);
                }
            }
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(l.longValue());
            if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == num.intValue()) {
                tLRPC$Dialog.top_message = num2.intValue();
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            if (!DialogObject.isChatDialog(l.longValue())) {
                return;
            }
            TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(-l.longValue());
            TLRPC$Chat chat = getChat(Long.valueOf(-l.longValue()));
            if (chat == null || ChatObject.hasAdminRights(chat) || tLRPC$ChatFull == null || tLRPC$ChatFull.slowmode_seconds == 0) {
                return;
            }
            tLRPC$ChatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + tLRPC$ChatFull.slowmode_seconds;
            tLRPC$ChatFull.flags |= 262144;
            getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC$Message tLRPC$Message = (TLRPC$Message) objArr[0];
            if (tLRPC$Message.peer_id.channel_id != 0 || (messageObject = this.dialogMessagesByIds.get(tLRPC$Message.id)) == null) {
                return;
            }
            messageObject.messageOwner.media = MessageObject.getMedia(tLRPC$Message);
            if (MessageObject.getMedia(tLRPC$Message).ttl_seconds == 0) {
                return;
            }
            if (!(MessageObject.getMedia(tLRPC$Message).photo instanceof TLRPC$TL_photoEmpty) && !(MessageObject.getMedia(tLRPC$Message).document instanceof TLRPC$TL_documentEmpty)) {
                return;
            }
            messageObject.setType();
            getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$29(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user == null) {
                return;
            }
            TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
            ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photos_photo.photo.sizes;
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
            TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
            TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
            user.photo = tLRPC$TL_userProfilePhoto;
            tLRPC$TL_userProfilePhoto.photo_id = tLRPC$TL_photos_photo.photo.id;
            if (closestPhotoSizeWithSize != null) {
                tLRPC$TL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
            }
            if (closestPhotoSizeWithSize2 != null) {
                tLRPC$TL_userProfilePhoto.photo_big = closestPhotoSizeWithSize2.location;
            }
            getMessagesStorage().clearUserPhotos(user.id);
            ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
            arrayList2.add(user);
            getMessagesStorage().putUsersAndChats(arrayList2, null, false, true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda18
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didReceivedNotification$28();
                }
            });
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$28() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    public /* synthetic */ void lambda$didReceivedNotification$31(final Theme.OverrideWallpaperInfo overrideWallpaperInfo, final TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) tLObject;
        final File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (tLRPC$WallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, getFileLoader().getPathToAttach(tLRPC$WallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$30(tLRPC$WallPaper, tLRPC$TL_wallPaperSettings, overrideWallpaperInfo, file);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$30(TLRPC$WallPaper tLRPC$WallPaper, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file) {
        if (this.uploadingWallpaper == null || tLRPC$WallPaper == null) {
            return;
        }
        tLRPC$WallPaper.settings = tLRPC$TL_wallPaperSettings;
        tLRPC$WallPaper.flags |= 4;
        overrideWallpaperInfo.slug = tLRPC$WallPaper.slug;
        overrideWallpaperInfo.saveOverrideWallpaper();
        ArrayList<TLRPC$WallPaper> arrayList = new ArrayList<>();
        arrayList.add(tLRPC$WallPaper);
        getMessagesStorage().putWallpapers(arrayList, 2);
        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$WallPaper.document.thumbs, 320);
        if (closestPhotoSizeWithSize != null) {
            ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$WallPaper.document), false);
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, tLRPC$WallPaper.slug);
    }

    public /* synthetic */ void lambda$didReceivedNotification$37(TLRPC$TL_theme tLRPC$TL_theme, final Theme.ThemeInfo themeInfo, TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings, final Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        String name = tLRPC$TL_theme != null ? tLRPC$TL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject != null) {
            TLRPC$Document tLRPC$Document = (TLRPC$Document) tLObject;
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            if (tLRPC$TL_theme == null || !tLRPC$TL_theme.creator) {
                TLRPC$TL_account_createTheme tLRPC$TL_account_createTheme = new TLRPC$TL_account_createTheme();
                tLRPC$TL_account_createTheme.document = tLRPC$TL_inputDocument;
                tLRPC$TL_account_createTheme.flags |= 4;
                tLRPC$TL_account_createTheme.slug = (tLRPC$TL_theme == null || TextUtils.isEmpty(tLRPC$TL_theme.slug)) ? "" : tLRPC$TL_theme.slug;
                tLRPC$TL_account_createTheme.title = name;
                if (tLRPC$TL_inputThemeSettings != null) {
                    tLRPC$TL_account_createTheme.settings = tLRPC$TL_inputThemeSettings;
                    tLRPC$TL_account_createTheme.flags |= 8;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_createTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda346
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                        MessagesController.this.lambda$didReceivedNotification$33(themeInfo, themeAccent, tLObject2, tLRPC$TL_error2);
                    }
                });
                return;
            }
            TLRPC$TL_account_updateTheme tLRPC$TL_account_updateTheme = new TLRPC$TL_account_updateTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_updateTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_updateTheme.slug = tLRPC$TL_theme.slug;
            int i = tLRPC$TL_account_updateTheme.flags | 1;
            tLRPC$TL_account_updateTheme.flags = i;
            tLRPC$TL_account_updateTheme.title = name;
            int i2 = i | 2;
            tLRPC$TL_account_updateTheme.flags = i2;
            tLRPC$TL_account_updateTheme.document = tLRPC$TL_inputDocument;
            int i3 = i2 | 4;
            tLRPC$TL_account_updateTheme.flags = i3;
            if (tLRPC$TL_inputThemeSettings != null) {
                tLRPC$TL_account_updateTheme.settings = tLRPC$TL_inputThemeSettings;
                tLRPC$TL_account_updateTheme.flags = i3 | 8;
            }
            tLRPC$TL_account_updateTheme.format = "android";
            getConnectionsManager().sendRequest(tLRPC$TL_account_updateTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda345
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                    MessagesController.this.lambda$didReceivedNotification$35(themeInfo, themeAccent, tLObject2, tLRPC$TL_error2);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda212
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$36(themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$33(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$32(tLObject, themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$32(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$didReceivedNotification$35(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda149
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$34(tLObject, themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$34(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$didReceivedNotification$36(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        this.showFiltersTooltip = false;
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0L).putLong("lastStickersLoadTime", 0L).putLong("lastStickersLoadTimeMask", 0L).putLong("lastStickersLoadTimeFavs", 0L).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("reminderhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").remove("showFiltersTooltip").remove("transcribeButtonPressed").commit();
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("shortcut_widget", 0);
        SharedPreferences.Editor editor = null;
        ArrayList arrayList = null;
        ArrayList arrayList2 = null;
        AppWidgetManager appWidgetManager = null;
        for (Map.Entry<String, ?> entry : sharedPreferences.getAll().entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("account") && ((Integer) entry.getValue()).intValue() == this.currentAccount) {
                int intValue = Utilities.parseInt((CharSequence) key).intValue();
                if (editor == null) {
                    editor = sharedPreferences.edit();
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                editor.putBoolean("deleted" + intValue, true);
                if (sharedPreferences.getInt("type" + intValue, 0) == 0) {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(Integer.valueOf(intValue));
                } else {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(intValue));
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                ChatsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList.get(i)).intValue());
            }
        }
        if (arrayList2 != null) {
            int size2 = arrayList2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                ContactsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList2.get(i2)).intValue());
            }
        }
        this.lastScheduledServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.sponsoredMessages.clear();
        this.sendAsPeers.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.activeVoiceChatsMap.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.dialogsCanAddUsers.clear();
        this.dialogsMyChannels.clear();
        this.dialogsMyGroups.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.gettingAppChangelog = false;
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$38();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int i3 = 0;
        while (true) {
            LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i3 >= longSparseArrayArr.length) {
                break;
            }
            if (longSparseArrayArr[i3] != null) {
                longSparseArrayArr[i3].clear();
            }
            i3++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0L;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda23
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$39();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda12
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$40();
            }
        });
    }

    public /* synthetic */ void lambda$cleanup$38() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0L;
        this.updatesStartWaitTimePts = 0L;
        this.updatesStartWaitTimeQts = 0L;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    public /* synthetic */ void lambda$cleanup$39() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public /* synthetic */ void lambda$cleanup$40() {
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public boolean isChatNoForwards(TLRPC$Chat tLRPC$Chat) {
        TLRPC$Chat chat;
        if (tLRPC$Chat == null) {
            return false;
        }
        TLRPC$InputChannel tLRPC$InputChannel = tLRPC$Chat.migrated_to;
        if (tLRPC$InputChannel != null && (chat = getChat(Long.valueOf(tLRPC$InputChannel.channel_id))) != null) {
            return chat.noforwards;
        }
        return tLRPC$Chat.noforwards;
    }

    public boolean isChatNoForwards(long j) {
        return isChatNoForwards(getChat(Long.valueOf(j)));
    }

    public TLRPC$User getUser(Long l) {
        if (l.longValue() == 0) {
            return UserConfig.getInstance(this.currentAccount).getCurrentUser();
        }
        return this.users.get(l);
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(str.toLowerCase());
    }

    public ConcurrentHashMap<Long, TLRPC$User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Long, TLRPC$Chat> getChats() {
        return this.chats;
    }

    public TLRPC$Chat getChat(Long l) {
        return this.chats.get(l);
    }

    public TLRPC$EncryptedChat getEncryptedChat(Integer num) {
        return this.encryptedChats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.encryptedChats.get(Integer.valueOf(i));
        if (tLRPC$EncryptedChat != null) {
            if (!z) {
                return tLRPC$EncryptedChat;
            }
            if (!(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested)) {
                return tLRPC$EncryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList<TLObject> arrayList = new ArrayList<>();
        getMessagesStorage().getEncryptedChat(i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (arrayList.size() == 2) {
            TLRPC$EncryptedChat tLRPC$EncryptedChat2 = (TLRPC$EncryptedChat) arrayList.get(0);
            putEncryptedChat(tLRPC$EncryptedChat2, false);
            putUser((TLRPC$User) arrayList.get(1), true);
            return tLRPC$EncryptedChat2;
        }
        return tLRPC$EncryptedChat;
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (z2) {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
            return;
        }
        arrayList.remove(Long.valueOf(j));
    }

    public void setLastCreatedDialogId(final long j, final boolean z, final boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (z2) {
                if (arrayList.contains(Long.valueOf(j))) {
                    return;
                }
                arrayList.add(Long.valueOf(j));
            } else {
                arrayList.remove(Long.valueOf(j));
                SparseArray<MessageObject> sparseArray = this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        sparseArray.valueAt(i).pollVisibleOnScreen = false;
                    }
                }
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda219
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$41(z, z2, j);
            }
        });
    }

    public /* synthetic */ void lambda$setLastCreatedDialogId$41(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (z2) {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
            return;
        }
        arrayList.remove(Long.valueOf(j));
    }

    public TLRPC$TL_chatInviteExported getExportedInvite(long j) {
        return this.exportedChats.get(j);
    }

    public boolean putUser(TLRPC$User tLRPC$User, boolean z) {
        return putUser(tLRPC$User, z, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:26:0x0054  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0085  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x00fe  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean putUser(TLRPC$User tLRPC$User, boolean z, boolean z2) {
        boolean z3;
        TLRPC$User tLRPC$User2;
        TLRPC$UserStatus tLRPC$UserStatus;
        TLRPC$UserStatus tLRPC$UserStatus2;
        String str;
        int i;
        String str2;
        if (tLRPC$User == null) {
            return false;
        }
        if (z) {
            long j = tLRPC$User.id;
            if (j / 1000 != 333 && j != 777000) {
                z3 = true;
                tLRPC$User2 = this.users.get(Long.valueOf(tLRPC$User.id));
                if (tLRPC$User2 != tLRPC$User && !z2) {
                    return false;
                }
                if (tLRPC$User2 != null && !TextUtils.isEmpty(tLRPC$User2.username)) {
                    this.objectsByUsernames.remove(tLRPC$User2.username.toLowerCase());
                }
                if (tLRPC$User2 != null && tLRPC$User2.usernames != null) {
                    for (i = 0; i < tLRPC$User2.usernames.size(); i++) {
                        TLRPC$TL_username tLRPC$TL_username = tLRPC$User2.usernames.get(i);
                        if (tLRPC$TL_username != null && (str2 = tLRPC$TL_username.username) != null) {
                            this.objectsByUsernames.remove(str2.toLowerCase());
                        }
                    }
                }
                if (!TextUtils.isEmpty(tLRPC$User.username)) {
                    this.objectsByUsernames.put(tLRPC$User.username.toLowerCase(), tLRPC$User);
                }
                if (tLRPC$User.usernames != null) {
                    for (int i2 = 0; i2 < tLRPC$User.usernames.size(); i2++) {
                        TLRPC$TL_username tLRPC$TL_username2 = tLRPC$User.usernames.get(i2);
                        if (tLRPC$TL_username2 != null && (str = tLRPC$TL_username2.username) != null && tLRPC$TL_username2.active) {
                            this.objectsByUsernames.put(str.toLowerCase(), tLRPC$User);
                        }
                    }
                }
                updateEmojiStatusUntilUpdate(tLRPC$User.id, tLRPC$User.emoji_status);
                if (!tLRPC$User.min) {
                    if (tLRPC$User2 == null) {
                        this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                    } else if (!z3) {
                        if (tLRPC$User.bot) {
                            String str3 = tLRPC$User.username;
                            if (str3 != null) {
                                tLRPC$User2.username = str3;
                                tLRPC$User2.flags |= 8;
                            } else {
                                tLRPC$User2.flags &= -9;
                                tLRPC$User2.username = null;
                            }
                        }
                        if (tLRPC$User.apply_min_photo) {
                            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                            if (tLRPC$UserProfilePhoto != null) {
                                tLRPC$User2.photo = tLRPC$UserProfilePhoto;
                                tLRPC$User2.flags |= 32;
                            } else {
                                tLRPC$User2.flags &= -33;
                                tLRPC$User2.photo = null;
                            }
                        }
                    }
                } else if (!z3) {
                    this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                    if (tLRPC$User.id == getUserConfig().getClientUserId()) {
                        getUserConfig().setCurrentUser(tLRPC$User);
                        getUserConfig().saveConfig(true);
                    }
                    if (tLRPC$User2 != null && (tLRPC$UserStatus = tLRPC$User.status) != null && (tLRPC$UserStatus2 = tLRPC$User2.status) != null && tLRPC$UserStatus.expires != tLRPC$UserStatus2.expires) {
                        return true;
                    }
                } else if (tLRPC$User2 == null) {
                    this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                } else if (tLRPC$User2.min) {
                    if (tLRPC$User2.bot) {
                        String str4 = tLRPC$User2.username;
                        if (str4 != null) {
                            tLRPC$User.username = str4;
                            tLRPC$User.flags |= 8;
                        } else {
                            tLRPC$User.flags &= -9;
                            tLRPC$User.username = null;
                        }
                    }
                    if (tLRPC$User2.apply_min_photo) {
                        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto2 = tLRPC$User2.photo;
                        if (tLRPC$UserProfilePhoto2 != null) {
                            tLRPC$User.photo = tLRPC$UserProfilePhoto2;
                            tLRPC$User.flags |= 32;
                        } else {
                            tLRPC$User.flags &= -33;
                            tLRPC$User.photo = null;
                        }
                    }
                    this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                }
                return false;
            }
        }
        z3 = false;
        tLRPC$User2 = this.users.get(Long.valueOf(tLRPC$User.id));
        if (tLRPC$User2 != tLRPC$User) {
        }
        if (tLRPC$User2 != null) {
            this.objectsByUsernames.remove(tLRPC$User2.username.toLowerCase());
        }
        if (tLRPC$User2 != null) {
            while (i < tLRPC$User2.usernames.size()) {
            }
        }
        if (!TextUtils.isEmpty(tLRPC$User.username)) {
        }
        if (tLRPC$User.usernames != null) {
        }
        updateEmojiStatusUntilUpdate(tLRPC$User.id, tLRPC$User.emoji_status);
        if (!tLRPC$User.min) {
        }
        return false;
    }

    public void putUsers(ArrayList<TLRPC$User> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        boolean z2 = false;
        for (int i = 0; i < size; i++) {
            if (putUser(arrayList.get(i), z)) {
                z2 = true;
            }
        }
        if (!z2) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$putUsers$42();
            }
        });
    }

    public /* synthetic */ void lambda$putUsers$42() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public void putChat(final TLRPC$Chat tLRPC$Chat, boolean z) {
        TLRPC$Chat tLRPC$Chat2;
        if (tLRPC$Chat == null || (tLRPC$Chat2 = this.chats.get(Long.valueOf(tLRPC$Chat.id))) == tLRPC$Chat) {
            return;
        }
        if (tLRPC$Chat2 != null && !TextUtils.isEmpty(tLRPC$Chat2.username)) {
            this.objectsByUsernames.remove(tLRPC$Chat2.username.toLowerCase());
        }
        if (tLRPC$Chat2 != null && tLRPC$Chat2.usernames != null) {
            for (int i = 0; i < tLRPC$Chat2.usernames.size(); i++) {
                TLRPC$TL_username tLRPC$TL_username = tLRPC$Chat2.usernames.get(i);
                if (tLRPC$TL_username != null && !TextUtils.isEmpty(tLRPC$TL_username.username)) {
                    this.objectsByUsernames.remove(tLRPC$TL_username.username.toLowerCase());
                }
            }
        }
        if (!TextUtils.isEmpty(tLRPC$Chat.username)) {
            this.objectsByUsernames.put(tLRPC$Chat.username.toLowerCase(), tLRPC$Chat);
        }
        if (tLRPC$Chat.usernames != null) {
            for (int i2 = 0; i2 < tLRPC$Chat.usernames.size(); i2++) {
                TLRPC$TL_username tLRPC$TL_username2 = tLRPC$Chat.usernames.get(i2);
                if (tLRPC$TL_username2 != null && !TextUtils.isEmpty(tLRPC$TL_username2.username) && tLRPC$TL_username2.active) {
                    this.objectsByUsernames.put(tLRPC$TL_username2.username.toLowerCase(), tLRPC$Chat);
                }
            }
        }
        if (!tLRPC$Chat.min) {
            if (!z) {
                if (tLRPC$Chat2 != null) {
                    if (tLRPC$Chat.version != tLRPC$Chat2.version) {
                        this.loadedFullChats.remove(Long.valueOf(tLRPC$Chat.id));
                    }
                    int i3 = tLRPC$Chat2.participants_count;
                    if (i3 != 0 && tLRPC$Chat.participants_count == 0) {
                        tLRPC$Chat.participants_count = i3;
                        tLRPC$Chat.flags |= 131072;
                    }
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat2.banned_rights;
                    int i4 = tLRPC$TL_chatBannedRights != null ? tLRPC$TL_chatBannedRights.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                    int i5 = tLRPC$TL_chatBannedRights2 != null ? tLRPC$TL_chatBannedRights2.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights3 = tLRPC$Chat2.default_banned_rights;
                    int i6 = tLRPC$TL_chatBannedRights3 != null ? tLRPC$TL_chatBannedRights3.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights4 = tLRPC$Chat.default_banned_rights;
                    int i7 = tLRPC$TL_chatBannedRights4 != null ? tLRPC$TL_chatBannedRights4.flags : 0;
                    tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights4;
                    if (tLRPC$TL_chatBannedRights4 == null) {
                        tLRPC$Chat2.flags &= -262145;
                    } else {
                        tLRPC$Chat2.flags = 262144 | tLRPC$Chat2.flags;
                    }
                    tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights2;
                    if (tLRPC$TL_chatBannedRights2 == null) {
                        tLRPC$Chat2.flags &= -32769;
                    } else {
                        tLRPC$Chat2.flags |= 32768;
                    }
                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                    tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights;
                    if (tLRPC$TL_chatAdminRights == null) {
                        tLRPC$Chat2.flags &= -16385;
                    } else {
                        tLRPC$Chat2.flags |= 16384;
                    }
                    if (i4 != i5 || i6 != i7) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda153
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$putChat$43(tLRPC$Chat);
                            }
                        });
                    }
                }
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (tLRPC$Chat2 == null) {
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (tLRPC$Chat2.min) {
                tLRPC$Chat.title = tLRPC$Chat2.title;
                tLRPC$Chat.photo = tLRPC$Chat2.photo;
                tLRPC$Chat.broadcast = tLRPC$Chat2.broadcast;
                tLRPC$Chat.verified = tLRPC$Chat2.verified;
                tLRPC$Chat.megagroup = tLRPC$Chat2.megagroup;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights5 = tLRPC$Chat2.default_banned_rights;
                if (tLRPC$TL_chatBannedRights5 != null) {
                    tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights5;
                    tLRPC$Chat.flags |= 262144;
                }
                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$Chat2.admin_rights;
                if (tLRPC$TL_chatAdminRights2 != null) {
                    tLRPC$Chat.admin_rights = tLRPC$TL_chatAdminRights2;
                    tLRPC$Chat.flags |= 16384;
                }
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights6 = tLRPC$Chat2.banned_rights;
                if (tLRPC$TL_chatBannedRights6 != null) {
                    tLRPC$Chat.banned_rights = tLRPC$TL_chatBannedRights6;
                    tLRPC$Chat.flags |= 32768;
                }
                String str = tLRPC$Chat2.username;
                if (str != null) {
                    tLRPC$Chat.username = str;
                    tLRPC$Chat.flags |= 64;
                } else {
                    tLRPC$Chat.flags &= -65;
                    tLRPC$Chat.username = null;
                }
                int i8 = tLRPC$Chat2.participants_count;
                if (i8 != 0 && tLRPC$Chat.participants_count == 0) {
                    tLRPC$Chat.participants_count = i8;
                    tLRPC$Chat.flags |= 131072;
                }
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            }
            addOrRemoveActiveVoiceChat(tLRPC$Chat);
        } else if (tLRPC$Chat2 == null) {
            this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            addOrRemoveActiveVoiceChat(tLRPC$Chat);
        } else if (!z) {
            tLRPC$Chat2.title = tLRPC$Chat.title;
            tLRPC$Chat2.photo = tLRPC$Chat.photo;
            tLRPC$Chat2.broadcast = tLRPC$Chat.broadcast;
            tLRPC$Chat2.verified = tLRPC$Chat.verified;
            tLRPC$Chat2.megagroup = tLRPC$Chat.megagroup;
            tLRPC$Chat2.call_not_empty = tLRPC$Chat.call_not_empty;
            tLRPC$Chat2.call_active = tLRPC$Chat.call_active;
            TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights7 = tLRPC$Chat.default_banned_rights;
            if (tLRPC$TL_chatBannedRights7 != null) {
                tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights7;
                tLRPC$Chat2.flags |= 262144;
            }
            TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3 = tLRPC$Chat.admin_rights;
            if (tLRPC$TL_chatAdminRights3 != null) {
                tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights3;
                tLRPC$Chat2.flags |= 16384;
            }
            TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights8 = tLRPC$Chat.banned_rights;
            if (tLRPC$TL_chatBannedRights8 != null) {
                tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights8;
                tLRPC$Chat2.flags |= 32768;
            }
            String str2 = tLRPC$Chat.username;
            if (str2 != null) {
                tLRPC$Chat2.username = str2;
                tLRPC$Chat2.flags |= 64;
            } else {
                tLRPC$Chat2.flags &= -65;
                tLRPC$Chat2.username = null;
            }
            int i9 = tLRPC$Chat.participants_count;
            if (i9 != 0) {
                tLRPC$Chat2.participants_count = i9;
            }
            addOrRemoveActiveVoiceChat(tLRPC$Chat2);
            boolean z2 = tLRPC$Chat2.forum;
            boolean z3 = tLRPC$Chat.forum;
            if (z2 != z3) {
                tLRPC$Chat2.forum = z3;
                if (z3) {
                    tLRPC$Chat2.flags |= 1073741824;
                } else {
                    tLRPC$Chat2.flags &= -1073741825;
                }
                getNotificationCenter().postNotificationName(NotificationCenter.chatSwithcedToForum, Long.valueOf(tLRPC$Chat.id));
            }
        }
        if (tLRPC$Chat2 == null || tLRPC$Chat2.forum == tLRPC$Chat.forum) {
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatSwithcedToForum, Long.valueOf(tLRPC$Chat.id));
    }

    public /* synthetic */ void lambda$putChat$43(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public void putChats(ArrayList<TLRPC$Chat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putChat(arrayList.get(i), z);
        }
    }

    private void addOrRemoveActiveVoiceChat(final TLRPC$Chat tLRPC$Chat) {
        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda155
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addOrRemoveActiveVoiceChat$44(tLRPC$Chat);
                }
            });
        } else {
            lambda$addOrRemoveActiveVoiceChat$44(tLRPC$Chat);
        }
    }

    /* renamed from: addOrRemoveActiveVoiceChatInternal */
    public void lambda$addOrRemoveActiveVoiceChat$44(TLRPC$Chat tLRPC$Chat) {
        TLRPC$Chat tLRPC$Chat2 = this.activeVoiceChatsMap.get(Long.valueOf(tLRPC$Chat.id));
        if (!tLRPC$Chat.call_active || !tLRPC$Chat.call_not_empty || tLRPC$Chat.migrated_to != null || ChatObject.isNotInChat(tLRPC$Chat)) {
            if (tLRPC$Chat2 == null) {
                return;
            }
            this.activeVoiceChatsMap.remove(Long.valueOf(tLRPC$Chat.id));
            getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        } else if (tLRPC$Chat2 != null) {
        } else {
            this.activeVoiceChatsMap.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        }
    }

    public ArrayList<Long> getActiveGroupCalls() {
        return new ArrayList<>(this.activeVoiceChatsMap.keySet());
    }

    public void setReferer(String str) {
        if (str == null) {
            return;
        }
        this.installReferer = str;
        this.mainPreferences.edit().putString("installReferer", str).commit();
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        if (z) {
            this.encryptedChats.putIfAbsent(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
        } else {
            this.encryptedChats.put(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putEncryptedChat(arrayList.get(i), z);
        }
    }

    public TLRPC$UserFull getUserFull(long j) {
        return this.fullUsers.get(j);
    }

    public TLRPC$ChatFull getChatFull(long j) {
        return this.fullChats.get(j);
    }

    public void putGroupCall(long j, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(j, call);
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(call.call.id), Boolean.FALSE);
        loadFullChat(j, 0, true);
    }

    public ChatObject.Call getGroupCall(long j, boolean z) {
        return getGroupCall(j, z, null);
    }

    public ChatObject.Call getGroupCall(final long j, boolean z, final Runnable runnable) {
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull == null || (tLRPC$TL_inputGroupCall = chatFull.call) == null) {
            return null;
        }
        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_inputGroupCall.id);
        if (call == null && z && !this.loadingGroupCalls.contains(Long.valueOf(j))) {
            this.loadingGroupCalls.add(Long.valueOf(j));
            if (chatFull.call != null) {
                TLRPC$TL_phone_getGroupCall tLRPC$TL_phone_getGroupCall = new TLRPC$TL_phone_getGroupCall();
                tLRPC$TL_phone_getGroupCall.call = chatFull.call;
                tLRPC$TL_phone_getGroupCall.limit = 20;
                getConnectionsManager().sendRequest(tLRPC$TL_phone_getGroupCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda309
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$getGroupCall$46(j, runnable, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        if (call != null && (call.call instanceof TLRPC$TL_groupCallDiscarded)) {
            return null;
        }
        return call;
    }

    public /* synthetic */ void lambda$getGroupCall$46(final long j, final Runnable runnable, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda148
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getGroupCall$45(tLObject, j, runnable);
            }
        });
    }

    public /* synthetic */ void lambda$getGroupCall$45(TLObject tLObject, long j, Runnable runnable) {
        if (tLObject != null) {
            TLRPC$TL_phone_groupCall tLRPC$TL_phone_groupCall = (TLRPC$TL_phone_groupCall) tLObject;
            putUsers(tLRPC$TL_phone_groupCall.users, false);
            putChats(tLRPC$TL_phone_groupCall.chats, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), j, tLRPC$TL_phone_groupCall);
            this.groupCalls.put(tLRPC$TL_phone_groupCall.call.id, call);
            this.groupCallsByChatId.put(j, call);
            getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(tLRPC$TL_phone_groupCall.call.id), Boolean.FALSE);
            if (runnable != null) {
                runnable.run();
            }
        }
        this.loadingGroupCalls.remove(Long.valueOf(j));
    }

    public void cancelLoadFullUser(long j) {
        this.loadingFullUsers.remove(Long.valueOf(j));
    }

    public void cancelLoadFullChat(long j) {
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC$Dialog> arrayList, long j) {
        if (j != 0 || (arrayList != null && !arrayList.isEmpty())) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            if (arrayList != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$InputPeer inputPeer = getInputPeer(arrayList.get(i).id);
                    if (!(inputPeer instanceof TLRPC$TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                        tLRPC$TL_inputDialogPeer.peer = inputPeer;
                        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                    }
                }
            } else {
                TLRPC$InputPeer inputPeer2 = getInputPeer(j);
                if ((inputPeer2 instanceof TLRPC$TL_inputPeerChannel) && inputPeer2.access_hash == 0) {
                    return;
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer2 = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer2.peer = inputPeer2;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer2);
            }
            if (tLRPC$TL_messages_getPeerDialogs.peers.isEmpty()) {
                return;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda242
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$reloadDialogsReadValue$47(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadDialogsReadValue$47(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList<TLRPC$Update> arrayList = new ArrayList<>();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i);
                DialogObject.initDialog(tLRPC$Dialog);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                        tLRPC$TL_updateReadChannelInbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        tLRPC$TL_updateReadChannelInbox.still_unread_count = tLRPC$Dialog.unread_count;
                        arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    } else {
                        TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = new TLRPC$TL_updateReadHistoryInbox();
                        tLRPC$TL_updateReadHistoryInbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryInbox);
                    }
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_outbox_max_id, num2.intValue())));
                if (tLRPC$Dialog.read_outbox_max_id > num2.intValue()) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                        tLRPC$TL_updateReadChannelOutbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelOutbox);
                    } else {
                        TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = new TLRPC$TL_updateReadHistoryOutbox();
                        tLRPC$TL_updateReadHistoryOutbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryOutbox);
                    }
                }
            }
            if (arrayList.isEmpty()) {
                return;
            }
            processUpdateArray(arrayList, null, null, false, 0);
        }
    }

    public TLRPC$ChannelParticipant getAdminInChannel(long j, long j2) {
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = this.channelAdmins.get(j2);
        if (longSparseArray == null) {
            return null;
        }
        return longSparseArray.get(j);
    }

    public String getAdminRank(long j, long j2) {
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        if (j == j2) {
            return "";
        }
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = this.channelAdmins.get(j);
        if (longSparseArray == null || (tLRPC$ChannelParticipant = longSparseArray.get(j2)) == null) {
            return null;
        }
        String str = tLRPC$ChannelParticipant.rank;
        return str != null ? str : "";
    }

    public boolean isChannelAdminsLoaded(long j) {
        return this.channelAdmins.get(j) != null;
    }

    public void loadChannelAdmins(final long j, boolean z) {
        if (SystemClock.elapsedRealtime() - this.loadingChannelAdmins.get(j) < 60) {
            return;
        }
        this.loadingChannelAdmins.put(j, (int) (SystemClock.elapsedRealtime() / 1000));
        if (z) {
            getMessagesStorage().loadChannelAdmins(j);
            return;
        }
        TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
        tLRPC$TL_channels_getParticipants.channel = getInputChannel(j);
        tLRPC$TL_channels_getParticipants.limit = 100;
        tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsAdmins();
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda297
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadChannelAdmins$48(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelAdmins$48(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_channels_channelParticipants) {
            processLoadedAdminsResponse(j, (TLRPC$TL_channels_channelParticipants) tLObject);
        }
    }

    public void processLoadedAdminsResponse(long j, TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants) {
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = new LongSparseArray<>(tLRPC$TL_channels_channelParticipants.participants.size());
        for (int i = 0; i < tLRPC$TL_channels_channelParticipants.participants.size(); i++) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipants.participants.get(i);
            longSparseArray.put(MessageObject.getPeerId(tLRPC$ChannelParticipant.peer), tLRPC$ChannelParticipant);
        }
        processLoadedChannelAdmins(longSparseArray, j, false);
    }

    public void processLoadedChannelAdmins(final LongSparseArray<TLRPC$ChannelParticipant> longSparseArray, final long j, final boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(j, longSparseArray);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda82
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$49(j, longSparseArray, z);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedChannelAdmins$49(long j, LongSparseArray longSparseArray, boolean z) {
        this.channelAdmins.put(j, longSparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(j);
            loadChannelAdmins(j, false);
            getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatAdmins, Long.valueOf(j));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x0050, code lost:
        if (r10.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r5)) == null) goto L14;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void loadFullChat(final long j, final int i, boolean z) {
        TLRPC$TL_messages_getFullChat tLRPC$TL_messages_getFullChat;
        boolean contains = this.loadedFullChats.contains(Long.valueOf(j));
        this.loadingFullChats.add(Long.valueOf(j));
        final long j2 = -j;
        final TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (ChatObject.isChannel(chat)) {
            TLRPC$TL_channels_getFullChannel tLRPC$TL_channels_getFullChannel = new TLRPC$TL_channels_getFullChannel();
            tLRPC$TL_channels_getFullChannel.channel = getInputChannel(chat);
            loadChannelAdmins(j, !contains);
            tLRPC$TL_messages_getFullChat = tLRPC$TL_channels_getFullChannel;
        } else {
            TLRPC$TL_messages_getFullChat tLRPC$TL_messages_getFullChat2 = new TLRPC$TL_messages_getFullChat();
            tLRPC$TL_messages_getFullChat2.chat_id = j;
            if (this.dialogs_read_inbox_max.get(Long.valueOf(j2)) != null) {
                tLRPC$TL_messages_getFullChat = tLRPC$TL_messages_getFullChat2;
            }
            reloadDialogsReadValue(null, j2);
            tLRPC$TL_messages_getFullChat = tLRPC$TL_messages_getFullChat2;
        }
        int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_getFullChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda330
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadFullChat$52(chat, j2, j, i, tLObject, tLRPC$TL_error);
            }
        });
        if (i != 0) {
            getConnectionsManager().bindRequestToGuid(sendRequest, i);
        }
    }

    public /* synthetic */ void lambda$loadFullChat$52(TLRPC$Chat tLRPC$Chat, long j, final long j2, final int i, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            final TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull = (TLRPC$TL_messages_chatFull) tLObject;
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_chatFull.users, tLRPC$TL_messages_chatFull.chats, true, true);
            getMessagesStorage().updateChatInfo(tLRPC$TL_messages_chatFull.full_chat, false);
            if (ChatObject.isChannel(tLRPC$Chat)) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id > num.intValue()) {
                    ArrayList<TLRPC$Update> arrayList = new ArrayList<>();
                    TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                    tLRPC$TL_updateReadChannelInbox.channel_id = j2;
                    TLRPC$ChatFull tLRPC$ChatFull = tLRPC$TL_messages_chatFull.full_chat;
                    tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$ChatFull.read_inbox_max_id;
                    tLRPC$TL_updateReadChannelInbox.still_unread_count = tLRPC$ChatFull.unread_count;
                    arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    processUpdateArray(arrayList, null, null, false, 0);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id > num2.intValue()) {
                    ArrayList<TLRPC$Update> arrayList2 = new ArrayList<>();
                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                    tLRPC$TL_updateReadChannelOutbox.channel_id = j2;
                    tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id;
                    arrayList2.add(tLRPC$TL_updateReadChannelOutbox);
                    processUpdateArray(arrayList2, null, null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda95
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullChat$50(j2, tLRPC$TL_messages_chatFull, i);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda170
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFullChat$51(tLRPC$TL_error, j2);
            }
        });
    }

    public /* synthetic */ void lambda$loadFullChat$50(long j, TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(j);
        if (tLRPC$ChatFull != null) {
            tLRPC$TL_messages_chatFull.full_chat.inviterId = tLRPC$ChatFull.inviterId;
        }
        this.fullChats.put(j, tLRPC$TL_messages_chatFull.full_chat);
        long j2 = -j;
        applyDialogNotificationsSettings(j2, 0, tLRPC$TL_messages_chatFull.full_chat.notify_settings);
        for (int i2 = 0; i2 < tLRPC$TL_messages_chatFull.full_chat.bot_info.size(); i2++) {
            getMediaDataController().putBotInfo(j2, tLRPC$TL_messages_chatFull.full_chat.bot_info.get(i2));
        }
        int indexOfKey = this.blockePeers.indexOfKey(j2);
        if (tLRPC$TL_messages_chatFull.full_chat.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(j2, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(j, tLRPC$TL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Long.valueOf(j));
        this.loadedFullChats.add(Long.valueOf(j));
        putUsers(tLRPC$TL_messages_chatFull.users, false);
        putChats(tLRPC$TL_messages_chatFull.chats, false);
        if (tLRPC$TL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$TL_messages_chatFull.full_chat, Integer.valueOf(i), Boolean.FALSE, Boolean.TRUE);
        if ((tLRPC$TL_messages_chatFull.full_chat.flags & 2048) == 0 || (tLRPC$Dialog = this.dialogs_dict.get(j2)) == null) {
            return;
        }
        int i3 = tLRPC$Dialog.folder_id;
        int i4 = tLRPC$TL_messages_chatFull.full_chat.folder_id;
        if (i3 == i4) {
            return;
        }
        tLRPC$Dialog.folder_id = i4;
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$loadFullChat$51(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void loadFullUser(final TLRPC$User tLRPC$User, final int i, boolean z) {
        if (tLRPC$User == null || this.loadingFullUsers.contains(Long.valueOf(tLRPC$User.id))) {
            return;
        }
        if (!z && this.loadedFullUsers.contains(Long.valueOf(tLRPC$User.id))) {
            return;
        }
        this.loadingFullUsers.add(Long.valueOf(tLRPC$User.id));
        TLRPC$TL_users_getFullUser tLRPC$TL_users_getFullUser = new TLRPC$TL_users_getFullUser();
        tLRPC$TL_users_getFullUser.id = getInputUser(tLRPC$User);
        long j = tLRPC$User.id;
        if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
            reloadDialogsReadValue(null, j);
        }
        getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_users_getFullUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda339
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadFullUser$55(tLRPC$User, i, tLObject, tLRPC$TL_error);
            }
        }), i);
    }

    public /* synthetic */ void lambda$loadFullUser$55(final TLRPC$User tLRPC$User, final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_users_userFull tLRPC$TL_users_userFull = (TLRPC$TL_users_userFull) tLObject;
            final TLRPC$UserFull tLRPC$UserFull = tLRPC$TL_users_userFull.full_user;
            putUsers(tLRPC$TL_users_userFull.users, false);
            putChats(tLRPC$TL_users_userFull.chats, false);
            TLRPC$UserFull tLRPC$UserFull2 = tLRPC$TL_users_userFull.full_user;
            tLRPC$UserFull2.user = getUser(Long.valueOf(tLRPC$UserFull2.id));
            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda194
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullUser$53(tLRPC$UserFull, tLRPC$User, i);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFullUser$54(tLRPC$User);
            }
        });
    }

    public /* synthetic */ void lambda$loadFullUser$53(TLRPC$UserFull tLRPC$UserFull, TLRPC$User tLRPC$User, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        savePeerSettings(tLRPC$UserFull.user.id, tLRPC$UserFull.settings, false);
        applyDialogNotificationsSettings(tLRPC$User.id, 0, tLRPC$UserFull.notify_settings);
        TLRPC$BotInfo tLRPC$BotInfo = tLRPC$UserFull.bot_info;
        if (tLRPC$BotInfo instanceof TLRPC$TL_botInfo) {
            tLRPC$BotInfo.user_id = tLRPC$User.id;
            getMediaDataController().putBotInfo(tLRPC$User.id, tLRPC$UserFull.bot_info);
        }
        int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
        if (tLRPC$UserFull.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(tLRPC$User.id, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
        this.loadedFullUsers.add(Long.valueOf(tLRPC$User.id));
        String str = tLRPC$User.first_name + tLRPC$User.last_name + UserObject.getPublicUsername(tLRPC$User);
        ArrayList<TLRPC$User> arrayList = new ArrayList<>();
        arrayList.add(tLRPC$UserFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
        if (!str.equals(tLRPC$UserFull.user.first_name + tLRPC$UserFull.user.last_name + UserObject.getPublicUsername(tLRPC$UserFull.user))) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_NAME));
        }
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$UserFull.user.photo;
        if (tLRPC$UserProfilePhoto != null && tLRPC$UserProfilePhoto.has_video) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        }
        TLRPC$BotInfo tLRPC$BotInfo2 = tLRPC$UserFull.bot_info;
        if (tLRPC$BotInfo2 instanceof TLRPC$TL_botInfo) {
            tLRPC$BotInfo2.user_id = tLRPC$UserFull.id;
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, tLRPC$UserFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        if ((tLRPC$UserFull.flags & 2048) == 0 || (tLRPC$Dialog = this.dialogs_dict.get(tLRPC$User.id)) == null) {
            return;
        }
        int i2 = tLRPC$Dialog.folder_id;
        int i3 = tLRPC$UserFull.folder_id;
        if (i2 == i3) {
            return;
        }
        tLRPC$Dialog.folder_id = i3;
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$loadFullUser$54(TLRPC$User tLRPC$User) {
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void reloadMessages(ArrayList<Integer> arrayList, final long j, final boolean z) {
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages;
        if (arrayList.isEmpty()) {
            return;
        }
        final ArrayList<Integer> arrayList2 = new ArrayList<>();
        TLRPC$Chat chat = DialogObject.isChatDialog(j) ? getChat(Long.valueOf(-j)) : null;
        if (ChatObject.isChannel(chat)) {
            TLRPC$TL_channels_getMessages tLRPC$TL_channels_getMessages = new TLRPC$TL_channels_getMessages();
            tLRPC$TL_channels_getMessages.channel = getInputChannel(chat);
            tLRPC$TL_channels_getMessages.id = arrayList2;
            tLRPC$TL_messages_getMessages = tLRPC$TL_channels_getMessages;
        } else {
            TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages2 = new TLRPC$TL_messages_getMessages();
            tLRPC$TL_messages_getMessages2.id = arrayList2;
            tLRPC$TL_messages_getMessages = tLRPC$TL_messages_getMessages2;
        }
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages3 = tLRPC$TL_messages_getMessages;
        ArrayList<Integer> arrayList3 = this.reloadingMessages.get(j);
        for (int i = 0; i < arrayList.size(); i++) {
            Integer num = arrayList.get(i);
            if (arrayList3 == null || !arrayList3.contains(num)) {
                arrayList2.add(num);
            }
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        if (arrayList3 == null) {
            arrayList3 = new ArrayList<>();
            this.reloadingMessages.put(j, arrayList3);
        }
        arrayList3.addAll(arrayList2);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessages3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda320
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadMessages$57(j, z, arrayList2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMessages$57(final long j, boolean z, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < tLRPC$messages_Messages.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$messages_Messages.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages.chats.get(i2);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            ArrayList arrayList2 = new ArrayList();
            int i3 = 0;
            while (i3 < tLRPC$messages_Messages.messages.size()) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i3);
                tLRPC$Message.dialog_id = j;
                if (!z) {
                    tLRPC$Message.unread = (tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id;
                }
                Integer num3 = num;
                ArrayList arrayList3 = arrayList2;
                arrayList3.add(new MessageObject(this.currentAccount, tLRPC$Message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true));
                i3++;
                arrayList2 = arrayList3;
                num = num3;
            }
            final ArrayList arrayList4 = arrayList2;
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
            getMessagesStorage().putMessages(tLRPC$messages_Messages, j, -1, 0, false, z, 0);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda90
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$reloadMessages$56(j, arrayList, arrayList4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadMessages$56(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList<Integer> arrayList3 = this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        ArrayList<MessageObject> arrayList4 = this.dialogMessage.get(j);
        if (arrayList4 != null) {
            for (int i = 0; i < arrayList4.size(); i++) {
                MessageObject messageObject = arrayList4.get(i);
                int i2 = 0;
                while (true) {
                    if (i2 < arrayList2.size()) {
                        MessageObject messageObject2 = (MessageObject) arrayList2.get(i2);
                        if (messageObject.getId() == messageObject2.getId()) {
                            arrayList4.set(i, messageObject2);
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                                if (messageObject3 != null) {
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                }
                            }
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        } else {
                            i2++;
                        }
                    }
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    public void hidePeerSettingsBar(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.remove("dialog_bar_invite" + j);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        TLRPC$TL_messages_hidePeerSettingsBar tLRPC$TL_messages_hidePeerSettingsBar = new TLRPC$TL_messages_hidePeerSettingsBar();
        if (tLRPC$User != null) {
            tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(tLRPC$User.id);
        } else {
            tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(-tLRPC$Chat.id);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_hidePeerSettingsBar, MessagesController$$ExternalSyntheticLambda363.INSTANCE);
    }

    public void reportSpam(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$User == null && tLRPC$Chat == null && tLRPC$EncryptedChat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            if (tLRPC$EncryptedChat == null || tLRPC$EncryptedChat.access_hash == 0) {
                return;
            }
            TLRPC$TL_messages_reportEncryptedSpam tLRPC$TL_messages_reportEncryptedSpam = new TLRPC$TL_messages_reportEncryptedSpam();
            TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
            tLRPC$TL_messages_reportEncryptedSpam.peer = tLRPC$TL_inputEncryptedChat;
            tLRPC$TL_inputEncryptedChat.chat_id = tLRPC$EncryptedChat.id;
            tLRPC$TL_inputEncryptedChat.access_hash = tLRPC$EncryptedChat.access_hash;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_reportEncryptedSpam, MessagesController$$ExternalSyntheticLambda364.INSTANCE, 2);
        } else if (z) {
            TLRPC$TL_account_reportPeer tLRPC$TL_account_reportPeer = new TLRPC$TL_account_reportPeer();
            if (tLRPC$Chat != null) {
                tLRPC$TL_account_reportPeer.peer = getInputPeer(-tLRPC$Chat.id);
            } else if (tLRPC$User != null) {
                tLRPC$TL_account_reportPeer.peer = getInputPeer(tLRPC$User.id);
            }
            tLRPC$TL_account_reportPeer.message = "";
            tLRPC$TL_account_reportPeer.reason = new TLRPC$ReportReason() { // from class: org.telegram.tgnet.TLRPC$TL_inputReportReasonGeoIrrelevant
                public static int constructor = -606798099;

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(constructor);
                }
            };
            getConnectionsManager().sendRequest(tLRPC$TL_account_reportPeer, MessagesController$$ExternalSyntheticLambda361.INSTANCE, 2);
        } else {
            TLRPC$TL_messages_reportSpam tLRPC$TL_messages_reportSpam = new TLRPC$TL_messages_reportSpam();
            if (tLRPC$Chat != null) {
                tLRPC$TL_messages_reportSpam.peer = getInputPeer(-tLRPC$Chat.id);
            } else if (tLRPC$User != null) {
                tLRPC$TL_messages_reportSpam.peer = getInputPeer(tLRPC$User.id);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_reportSpam, MessagesController$$ExternalSyntheticLambda360.INSTANCE, 2);
        }
    }

    private void savePeerSettings(long j, TLRPC$TL_peerSettings tLRPC$TL_peerSettings, boolean z) {
        if (tLRPC$TL_peerSettings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + j, 0) == 3) {
                return;
            }
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            boolean z2 = !tLRPC$TL_peerSettings.report_spam && !tLRPC$TL_peerSettings.add_contact && !tLRPC$TL_peerSettings.block_contact && !tLRPC$TL_peerSettings.share_contact && !tLRPC$TL_peerSettings.report_geo && !tLRPC$TL_peerSettings.invite_members;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("peer settings loaded for " + j + " add = " + tLRPC$TL_peerSettings.add_contact + " block = " + tLRPC$TL_peerSettings.block_contact + " spam = " + tLRPC$TL_peerSettings.report_spam + " share = " + tLRPC$TL_peerSettings.share_contact + " geo = " + tLRPC$TL_peerSettings.report_geo + " hide = " + z2 + " distance = " + tLRPC$TL_peerSettings.geo_distance + " invite = " + tLRPC$TL_peerSettings.invite_members);
            }
            edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
            edit.putBoolean("dialog_bar_share" + j, tLRPC$TL_peerSettings.share_contact);
            edit.putBoolean("dialog_bar_report" + j, tLRPC$TL_peerSettings.report_spam);
            edit.putBoolean("dialog_bar_add" + j, tLRPC$TL_peerSettings.add_contact);
            edit.putBoolean("dialog_bar_block" + j, tLRPC$TL_peerSettings.block_contact);
            edit.putBoolean("dialog_bar_exception" + j, tLRPC$TL_peerSettings.need_contacts_exception);
            edit.putBoolean("dialog_bar_location" + j, tLRPC$TL_peerSettings.report_geo);
            edit.putBoolean("dialog_bar_archived" + j, tLRPC$TL_peerSettings.autoarchived);
            edit.putBoolean("dialog_bar_invite" + j, tLRPC$TL_peerSettings.invite_members);
            edit.putString("dialog_bar_chat_with_admin_title" + j, tLRPC$TL_peerSettings.request_chat_title);
            edit.putBoolean("dialog_bar_chat_with_channel" + j, tLRPC$TL_peerSettings.request_chat_broadcast);
            edit.putInt("dialog_bar_chat_with_date" + j, tLRPC$TL_peerSettings.request_chat_date);
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            if (sharedPreferences2.getInt("dialog_bar_distance" + j, -1) != -2) {
                if ((tLRPC$TL_peerSettings.flags & 64) != 0) {
                    edit.putInt("dialog_bar_distance" + j, tLRPC$TL_peerSettings.geo_distance);
                } else {
                    edit.remove("dialog_bar_distance" + j);
                }
            }
            edit.apply();
            getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
        }
    }

    public void loadPeerSettings(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        final long j;
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            j = tLRPC$User.id;
        } else {
            j = -tLRPC$Chat.id;
        }
        if (this.loadingPeerSettings.indexOfKey(j) >= 0) {
            return;
        }
        this.loadingPeerSettings.put(j, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("request spam button for " + j);
        }
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt("dialog_bar_vis3" + j, 0);
        if (i == 1 || i == 3) {
            if (!BuildVars.LOGS_ENABLED) {
                return;
            }
            FileLog.d("dialog bar already hidden for " + j);
            return;
        }
        TLRPC$TL_messages_getPeerSettings tLRPC$TL_messages_getPeerSettings = new TLRPC$TL_messages_getPeerSettings();
        if (tLRPC$User != null) {
            tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(tLRPC$User.id);
        } else {
            tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(-tLRPC$Chat.id);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerSettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda289
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadPeerSettings$63(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadPeerSettings$63(final long j, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPeerSettings$62(j, tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadPeerSettings$62(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            TLRPC$TL_messages_peerSettings tLRPC$TL_messages_peerSettings = (TLRPC$TL_messages_peerSettings) tLObject;
            TLRPC$TL_peerSettings tLRPC$TL_peerSettings = tLRPC$TL_messages_peerSettings.settings;
            putUsers(tLRPC$TL_messages_peerSettings.users, false);
            putChats(tLRPC$TL_messages_peerSettings.chats, false);
            savePeerSettings(j, tLRPC$TL_peerSettings, false);
        }
    }

    public void processNewChannelDifferenceParams(int i, int i2, long j) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + j);
        }
        int i3 = this.channelsPts.get(j);
        if (i3 == 0) {
            i3 = getMessagesStorage().getChannelPtsSync(j);
            if (i3 == 0) {
                i3 = 1;
            }
            this.channelsPts.put(j, i3);
        }
        if (i3 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(j, i);
            getMessagesStorage().saveChannelPts(j, i);
        } else if (i3 == i) {
        } else {
            long j2 = this.updatesStartWaitTimeChannels.get(j);
            if (this.gettingDifferenceChannels.get(j, Boolean.FALSE).booleanValue() || j2 == 0 || Math.abs(System.currentTimeMillis() - j2) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (j2 == 0) {
                    this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                }
                UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                userActionUpdatesPts.pts = i;
                userActionUpdatesPts.pts_count = i2;
                userActionUpdatesPts.chat_id = j;
                ArrayList<TLRPC$Updates> arrayList = this.updatesQueueChannels.get(j);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    this.updatesQueueChannels.put(j, arrayList);
                }
                arrayList.add(userActionUpdatesPts);
                return;
            }
            getChannelDifference(j);
        }
    }

    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i != -1) {
            if (getMessagesStorage().getLastSeqValue() + 1 == i) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY SEQ");
                }
                getMessagesStorage().setLastSeqValue(i);
                if (i3 != -1) {
                    getMessagesStorage().setLastDateValue(i3);
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastSeqValue() == i) {
            } else {
                if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                    }
                    if (this.updatesStartWaitTimeSeq == 0) {
                        this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                    }
                    UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq();
                    userActionUpdatesSeq.seq = i;
                    this.updatesQueueSeq.add(userActionUpdatesSeq);
                    return;
                }
                getDifference();
            }
        }
    }

    public void didAddedNewTask(final int i, final long j, final SparseArray<ArrayList<Integer>> sparseArray) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$64(i);
            }
        });
        if (sparseArray != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda81
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didAddedNewTask$65(j, sparseArray);
                }
            });
        }
    }

    public /* synthetic */ void lambda$didAddedNewTask$64(int i) {
        int i2;
        if (!(this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null && !this.gettingNewDeleteTask) && ((i2 = this.currentDeletingTaskTime) == 0 || i >= i2)) {
            return;
        }
        getNewDeleteTask(null, null);
    }

    public /* synthetic */ void lambda$didAddedNewTask$65(long j, SparseArray sparseArray) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, Long.valueOf(j), sparseArray);
    }

    public void getNewDeleteTask(final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$66(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$getNewDeleteTask$66(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(longSparseArray, longSparseArray2);
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if (!(this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null) && (z || ((i = this.currentDeletingTaskTime) != 0 && i <= currentTime))) {
            this.currentDeletingTaskTime = 0;
            if (this.currentDeleteTaskRunnable != null && !z) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            }
            final LongSparseArray<ArrayList<Integer>> longSparseArray = null;
            this.currentDeleteTaskRunnable = null;
            LongSparseArray<ArrayList<Integer>> longSparseArray2 = this.currentDeletingTaskMids;
            final LongSparseArray<ArrayList<Integer>> clone = longSparseArray2 != null ? longSparseArray2.clone() : null;
            LongSparseArray<ArrayList<Integer>> longSparseArray3 = this.currentDeletingTaskMediaMids;
            if (longSparseArray3 != null) {
                longSparseArray = longSparseArray3.clone();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda103
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkDeletingTask$68(clone, longSparseArray);
                }
            });
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$checkDeletingTask$68(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                ArrayList<Integer> arrayList = (ArrayList) longSparseArray.valueAt(i);
                deleteMessages(arrayList, null, null, longSparseArray.keyAt(i), true, false, !arrayList.isEmpty() && arrayList.get(0).intValue() > 0);
            }
        }
        if (longSparseArray2 != null) {
            int size2 = longSparseArray2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                getMessagesStorage().emptyMessagesMedia(longSparseArray2.keyAt(i2), (ArrayList) longSparseArray2.valueAt(i2));
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda105
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$67(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$checkDeletingTask$67(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        getNewDeleteTask(longSparseArray, longSparseArray2);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public void processLoadedDeleteTask(final int i, final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$70(longSparseArray, longSparseArray2, i);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$70(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, int i) {
        this.gettingNewDeleteTask = false;
        if (longSparseArray != null || longSparseArray2 != null) {
            this.currentDeletingTaskTime = i;
            this.currentDeletingTaskMids = longSparseArray;
            this.currentDeletingTaskMediaMids = longSparseArray2;
            if (this.currentDeleteTaskRunnable != null) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
                this.currentDeleteTaskRunnable = null;
            }
            if (checkDeletingTask(false)) {
                return;
            }
            this.currentDeleteTaskRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda21
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDeleteTask$69();
                }
            };
            Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime) * 1000);
            return;
        }
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$69() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(final long j, final int i, final int i2, boolean z, final int i3) {
        if (z) {
            getMessagesStorage().getDialogPhotos(j, i, i2, i3);
        } else if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user == null) {
                return;
            }
            TLRPC$TL_photos_getUserPhotos tLRPC$TL_photos_getUserPhotos = new TLRPC$TL_photos_getUserPhotos();
            tLRPC$TL_photos_getUserPhotos.limit = i;
            tLRPC$TL_photos_getUserPhotos.offset = 0;
            tLRPC$TL_photos_getUserPhotos.max_id = i2;
            tLRPC$TL_photos_getUserPhotos.user_id = getInputUser(user);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_photos_getUserPhotos, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda298
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogPhotos$71(j, i, i2, i3, tLObject, tLRPC$TL_error);
                }
            }), i3);
        } else if (j >= 0) {
        } else {
            TLRPC$TL_messages_search tLRPC$TL_messages_search = new TLRPC$TL_messages_search();
            tLRPC$TL_messages_search.filter = new TLRPC$TL_inputMessagesFilterChatPhotos();
            tLRPC$TL_messages_search.limit = i;
            tLRPC$TL_messages_search.offset_id = i2;
            tLRPC$TL_messages_search.q = "";
            tLRPC$TL_messages_search.peer = getInputPeer(j);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_search, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda299
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogPhotos$72(j, i, i2, i3, tLObject, tLRPC$TL_error);
                }
            }), i3);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$71(long j, int i, int i2, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processLoadedUserPhotos((TLRPC$photos_Photos) tLObject, null, j, i, i2, false, i3);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$72(long j, int i, int i2, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            ArrayList<TLRPC$Message> arrayList = new ArrayList<>();
            tLRPC$TL_photos_photos.count = tLRPC$messages_Messages.count;
            tLRPC$TL_photos_photos.users.addAll(tLRPC$messages_Messages.users);
            for (int i4 = 0; i4 < tLRPC$messages_Messages.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i4);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                if (tLRPC$MessageAction != null && (tLRPC$Photo = tLRPC$MessageAction.photo) != null) {
                    tLRPC$TL_photos_photos.photos.add(tLRPC$Photo);
                    arrayList.add(tLRPC$Message);
                }
            }
            processLoadedUserPhotos(tLRPC$TL_photos_photos, arrayList, j, i, i2, false, i3);
        }
    }

    public void blockPeer(long j) {
        TLRPC$Chat chat;
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user == null) {
                return;
            }
            chat = null;
            tLRPC$User = user;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(j) >= 0) {
            return;
        }
        this.blockePeers.put(j, 1);
        if (tLRPC$User != null) {
            if (tLRPC$User.bot) {
                getMediaDataController().removeInline(j);
            } else {
                getMediaDataController().removePeer(j);
            }
        }
        int i = this.totalBlockedCount;
        if (i >= 0) {
            this.totalBlockedCount = i + 1;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        TLRPC$TL_contacts_block tLRPC$TL_contacts_block = new TLRPC$TL_contacts_block();
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_block.id = getInputPeer(chat);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_block, MessagesController$$ExternalSyntheticLambda369.INSTANCE);
    }

    public void setParticipantBannedRole(final long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final boolean z, final BaseFragment baseFragment) {
        if ((tLRPC$User == null && tLRPC$Chat == null) || tLRPC$TL_chatBannedRights == null) {
            return;
        }
        final TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
        tLRPC$TL_channels_editBanned.channel = getInputChannel(j);
        if (tLRPC$User != null) {
            tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$Chat);
        }
        tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_editBanned, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda318
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setParticipantBannedRole$76(j, baseFragment, tLRPC$TL_channels_editBanned, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$76(final long j, final BaseFragment baseFragment, final TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, final boolean z, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda69
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setParticipantBannedRole$74(j);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda174
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setParticipantBannedRole$75(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, z);
            }
        });
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$74(long j) {
        loadFullChat(j, 0, true);
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$75(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, Boolean.valueOf(z));
    }

    public void setChannelSlowMode(final long j, int i) {
        TLRPC$TL_channels_toggleSlowMode tLRPC$TL_channels_toggleSlowMode = new TLRPC$TL_channels_toggleSlowMode();
        tLRPC$TL_channels_toggleSlowMode.seconds = i;
        tLRPC$TL_channels_toggleSlowMode.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSlowMode, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda290
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChannelSlowMode$78(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChannelSlowMode$78(final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda64
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChannelSlowMode$77(j);
                }
            }, 1000L);
        }
    }

    public /* synthetic */ void lambda$setChannelSlowMode$77(long j) {
        loadFullChat(j, 0, true);
    }

    public void setDefaultBannedRole(final long j, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final boolean z, final BaseFragment baseFragment) {
        if (tLRPC$TL_chatBannedRights == null) {
            return;
        }
        final TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights = new TLRPC$TL_messages_editChatDefaultBannedRights();
        tLRPC$TL_messages_editChatDefaultBannedRights.peer = getInputPeer(-j);
        tLRPC$TL_messages_editChatDefaultBannedRights.banned_rights = tLRPC$TL_chatBannedRights;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatDefaultBannedRights, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda319
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDefaultBannedRole$81(j, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$81(final long j, final BaseFragment baseFragment, final TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, final boolean z, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda62
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setDefaultBannedRole$79(j);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda178
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setDefaultBannedRole$80(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z);
            }
        });
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$79(long j) {
        loadFullChat(j, 0, true);
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$80(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    public void setUserAdminRole(long j, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2, boolean z3, String str2, Runnable runnable) {
        setUserAdminRole(j, tLRPC$User, tLRPC$TL_chatAdminRights, str, z, baseFragment, z2, z3, str2, runnable, null);
    }

    public void setUserAdminRole(final long j, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, final boolean z, final BaseFragment baseFragment, boolean z2, boolean z3, String str2, final Runnable runnable, final ErrorDelegate errorDelegate) {
        if (tLRPC$User == null || tLRPC$TL_chatAdminRights == null) {
            return;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (ChatObject.isChannel(chat)) {
            final TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin = new TLRPC$TL_channels_editAdmin();
            tLRPC$TL_channels_editAdmin.channel = getInputChannel(chat);
            tLRPC$TL_channels_editAdmin.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_channels_editAdmin.admin_rights = tLRPC$TL_chatAdminRights;
            tLRPC$TL_channels_editAdmin.rank = str;
            final RequestDelegate requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda310
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserAdminRole$85(j, runnable, baseFragment, tLRPC$TL_channels_editAdmin, z, errorDelegate, tLObject, tLRPC$TL_error);
                }
            };
            if ((chat.megagroup && z2) || !TextUtils.isEmpty(str2)) {
                addUserToChat(j, tLRPC$User, 0, str2, baseFragment, true, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda165
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$86(tLRPC$TL_channels_editAdmin, requestDelegate);
                    }
                }, errorDelegate);
                return;
            } else {
                getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, requestDelegate);
                return;
            }
        }
        final TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin = new TLRPC$TL_messages_editChatAdmin();
        tLRPC$TL_messages_editChatAdmin.chat_id = j;
        tLRPC$TL_messages_editChatAdmin.user_id = getInputUser(tLRPC$User);
        tLRPC$TL_messages_editChatAdmin.is_admin = z3 || tLRPC$TL_chatAdminRights.change_info || tLRPC$TL_chatAdminRights.delete_messages || tLRPC$TL_chatAdminRights.ban_users || tLRPC$TL_chatAdminRights.invite_users || tLRPC$TL_chatAdminRights.pin_messages || tLRPC$TL_chatAdminRights.add_admins || tLRPC$TL_chatAdminRights.manage_call;
        final RequestDelegate requestDelegate2 = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda311
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setUserAdminRole$90(j, runnable, baseFragment, tLRPC$TL_messages_editChatAdmin, errorDelegate, tLObject, tLRPC$TL_error);
            }
        };
        if (tLRPC$TL_messages_editChatAdmin.is_admin || z2 || !TextUtils.isEmpty(str2)) {
            addUserToChat(j, tLRPC$User, 0, str2, baseFragment, true, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda181
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$91(tLRPC$TL_messages_editChatAdmin, requestDelegate2);
                }
            }, errorDelegate);
        } else {
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate2);
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$85(final long j, final Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, final boolean z, final ErrorDelegate errorDelegate, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda83
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$82(j, runnable);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda173
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setUserAdminRole$83(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, z);
            }
        });
        if (errorDelegate == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.ErrorDelegate.this.run(tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setUserAdminRole$82(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$83(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, Boolean.valueOf(z));
    }

    public /* synthetic */ void lambda$setUserAdminRole$86(TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, requestDelegate);
    }

    public /* synthetic */ void lambda$setUserAdminRole$90(final long j, final Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, final ErrorDelegate errorDelegate, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda84
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$87(j, runnable);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda177
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setUserAdminRole$88(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin);
            }
        });
        if (errorDelegate == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda10
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.ErrorDelegate.this.run(tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setUserAdminRole$87(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$88(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$setUserAdminRole$91(TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate);
    }

    public void unblockPeer(long j) {
        TLRPC$Chat chat;
        TLRPC$TL_contacts_unblock tLRPC$TL_contacts_unblock = new TLRPC$TL_contacts_unblock();
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user == null) {
                return;
            }
            chat = null;
            tLRPC$User = user;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(j);
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_unblock.id = getInputPeer(chat);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_unblock, MessagesController$$ExternalSyntheticLambda371.INSTANCE);
    }

    public void getBlockedPeers(final boolean z) {
        if (!getUserConfig().isClientActivated() || this.loadingBlockedPeers) {
            return;
        }
        this.loadingBlockedPeers = true;
        final TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked = new TLRPC$TL_contacts_getBlocked();
        tLRPC$TL_contacts_getBlocked.offset = z ? 0 : this.blockePeers.size();
        tLRPC$TL_contacts_getBlocked.limit = z ? 20 : 100;
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_getBlocked, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda349
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getBlockedPeers$94(z, tLRPC$TL_contacts_getBlocked, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getBlockedPeers$94(final boolean z, final TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getBlockedPeers$93(tLObject, z, tLRPC$TL_contacts_getBlocked);
            }
        });
    }

    public /* synthetic */ void lambda$getBlockedPeers$93(TLObject tLObject, boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC$contacts_Blocked tLRPC$contacts_Blocked = (TLRPC$contacts_Blocked) tLObject;
            putUsers(tLRPC$contacts_Blocked.users, false);
            putChats(tLRPC$contacts_Blocked.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$contacts_Blocked.users, tLRPC$contacts_Blocked.chats, true, true);
            if (z) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(tLRPC$contacts_Blocked.count, tLRPC$contacts_Blocked.blocked.size());
            this.blockedEndReached = tLRPC$contacts_Blocked.blocked.size() < tLRPC$TL_contacts_getBlocked.limit;
            int size = tLRPC$contacts_Blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockePeers.put(MessageObject.getPeerId(tLRPC$contacts_Blocked.blocked.get(i).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC$InputPhoto tLRPC$InputPhoto) {
        if (tLRPC$InputPhoto == null) {
            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
            tLRPC$TL_photos_updateProfilePhoto.id = new TLRPC$TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC$TL_userProfilePhotoEmpty();
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user == null) {
                return;
            }
            user.photo = getUserConfig().getCurrentUser().photo;
            getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
            getConnectionsManager().sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda265
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteUserPhoto$96(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        TLRPC$TL_photos_deletePhotos tLRPC$TL_photos_deletePhotos = new TLRPC$TL_photos_deletePhotos();
        tLRPC$TL_photos_deletePhotos.id.add(tLRPC$InputPhoto);
        getConnectionsManager().sendRequest(tLRPC$TL_photos_deletePhotos, MessagesController$$ExternalSyntheticLambda358.INSTANCE);
    }

    public /* synthetic */ void lambda$deleteUserPhoto$96(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, false);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user == null) {
                return;
            }
            getMessagesStorage().clearUserPhotos(user.id);
            ArrayList<TLRPC$User> arrayList = new ArrayList<>();
            arrayList.add(user);
            getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
            if (tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) {
                TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                user.photo = tLRPC$TL_userProfilePhoto;
                tLRPC$TL_userProfilePhoto.has_video = !tLRPC$TL_photos_photo.photo.video_sizes.isEmpty();
                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = user.photo;
                TLRPC$Photo tLRPC$Photo = tLRPC$TL_photos_photo.photo;
                tLRPC$UserProfilePhoto.photo_id = tLRPC$Photo.id;
                tLRPC$UserProfilePhoto.photo_small = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, ImageReceiver.DEFAULT_CROSSFADE_DURATION).location;
                user.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photos_photo.photo.sizes, 800).location;
                user.photo.dc_id = tLRPC$TL_photos_photo.photo.dc_id;
            } else {
                user.photo = new TLRPC$TL_userProfilePhotoEmpty();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda26
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteUserPhoto$95();
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteUserPhoto$95() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
        getUserConfig().saveConfig(true);
    }

    public void processLoadedUserPhotos(final TLRPC$photos_Photos tLRPC$photos_Photos, final ArrayList<TLRPC$Message> arrayList, final long j, final int i, int i2, final boolean z, final int i3) {
        if (!z) {
            getMessagesStorage().putUsersAndChats(tLRPC$photos_Photos.users, null, true, true);
            getMessagesStorage().putDialogPhotos(j, tLRPC$photos_Photos, arrayList);
        } else if (tLRPC$photos_Photos == null || tLRPC$photos_Photos.photos.isEmpty()) {
            loadDialogPhotos(j, i, i2, false, i3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda204
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedUserPhotos$98(tLRPC$photos_Photos, z, j, i, i3, arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedUserPhotos$98(TLRPC$photos_Photos tLRPC$photos_Photos, boolean z, long j, int i, int i2, ArrayList arrayList) {
        putUsers(tLRPC$photos_Photos.users, z);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Long.valueOf(j), Integer.valueOf(i), Boolean.valueOf(z), Integer.valueOf(i2), tLRPC$photos_Photos.photos, arrayList);
    }

    public void uploadAndApplyUserAvatar(TLRPC$FileLocation tLRPC$FileLocation) {
        if (tLRPC$FileLocation == null) {
            return;
        }
        this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + ".jpg";
        getFileLoader().uploadFile(this.uploadingAvatar, false, true, ConnectionsManager.FileTypePhoto);
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tLRPC$TL_theme != null) {
            TLRPC$TL_account_saveTheme tLRPC$TL_account_saveTheme = new TLRPC$TL_account_saveTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_saveTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveTheme, MessagesController$$ExternalSyntheticLambda372.INSTANCE);
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (!z2) {
            installTheme(themeInfo, themeAccent, z);
        }
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC$TL_account_installTheme tLRPC$TL_account_installTheme = new TLRPC$TL_account_installTheme();
        tLRPC$TL_account_installTheme.dark = z;
        if (tLRPC$TL_theme != null) {
            tLRPC$TL_account_installTheme.format = "android";
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_installTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_installTheme, MessagesController$$ExternalSyntheticLambda365.INSTANCE);
        if (!TextUtils.isEmpty(str)) {
            TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
            TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
            tLRPC$TL_inputWallPaperSlug.slug = str;
            tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaperSettings.blur = z2;
            tLRPC$TL_wallPaperSettings.motion = z3;
            getConnectionsManager().sendRequest(tLRPC$TL_account_installWallPaper, MessagesController$$ExternalSyntheticLambda357.INSTANCE);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void saveThemeToServer(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent) {
        String str;
        File file;
        if (themeInfo == null) {
            return;
        }
        if (themeAccent != 0) {
            str = themeAccent.saveToFile().getAbsolutePath();
            file = themeAccent.getPathToWallpaper();
        } else {
            str = themeInfo.pathToFile;
            file = null;
        }
        final String str2 = str;
        final File file2 = file;
        if (str2 == null || this.uploadingThemes.containsKey(str2)) {
            return;
        }
        this.uploadingThemes.put(str2, themeAccent != 0 ? themeAccent : themeInfo);
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda108
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$103(str2, file2, themeAccent, themeInfo);
            }
        });
    }

    public /* synthetic */ void lambda$saveThemeToServer$103(final String str, File file, final Theme.ThemeAccent themeAccent, final Theme.ThemeInfo themeInfo) {
        final String createThemePreviewImage = Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null, themeAccent);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda109
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$102(createThemePreviewImage, str, themeAccent, themeInfo);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$saveThemeToServer$102(String str, String str2, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        if (str == null) {
            this.uploadingThemes.remove(str2);
            return;
        }
        this.uploadingThemes.put(str, themeAccent != null ? themeAccent : themeInfo);
        if (themeAccent == null) {
            themeInfo.uploadingFile = str2;
            themeInfo.uploadingThumb = str;
        } else {
            themeAccent.uploadingFile = str2;
            themeAccent.uploadingThumb = str;
        }
        getFileLoader().uploadFile(str2, false, true, ConnectionsManager.FileTypeFile);
        getFileLoader().uploadFile(str, false, true, ConnectionsManager.FileTypePhoto);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0168  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0184  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x01bd  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x01d3  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x01e9  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x01f7  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0194  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x016e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void saveWallpaperToServer(File file, Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, final long j) {
        TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug;
        TLRPC$TL_account_saveWallPaper tLRPC$TL_account_saveWallPaper;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$WallPaper tLRPC$TL_wallPaper;
        long j2;
        int i;
        int i2;
        int i3;
        int i4;
        NativeByteBuffer nativeByteBuffer2 = null;
        if (this.uploadingWallpaper != null) {
            File file2 = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
            if (file != null && (file.getAbsolutePath().equals(this.uploadingWallpaper) || file.equals(file2))) {
                this.uploadingWallpaperInfo = overrideWallpaperInfo;
                return;
            }
            getFileLoader().cancelFileUpload(this.uploadingWallpaper, false);
            this.uploadingWallpaper = null;
            this.uploadingWallpaperInfo = null;
        }
        if (file != null) {
            this.uploadingWallpaper = file.getAbsolutePath();
            this.uploadingWallpaperInfo = overrideWallpaperInfo;
            getFileLoader().uploadFile(this.uploadingWallpaper, false, true, ConnectionsManager.FileTypePhoto);
        } else if (!overrideWallpaperInfo.isDefault() && !overrideWallpaperInfo.isColor() && overrideWallpaperInfo.wallpaperId > 0 && !overrideWallpaperInfo.isTheme()) {
            if (overrideWallpaperInfo.wallpaperId > 0) {
                TLRPC$TL_inputWallPaper tLRPC$TL_inputWallPaper = new TLRPC$TL_inputWallPaper();
                tLRPC$TL_inputWallPaper.id = overrideWallpaperInfo.wallpaperId;
                tLRPC$TL_inputWallPaper.access_hash = overrideWallpaperInfo.accessHash;
                tLRPC$TL_inputWallPaperSlug = tLRPC$TL_inputWallPaper;
            } else {
                TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug2 = new TLRPC$TL_inputWallPaperSlug();
                tLRPC$TL_inputWallPaperSlug2.slug = overrideWallpaperInfo.slug;
                tLRPC$TL_inputWallPaperSlug = tLRPC$TL_inputWallPaperSlug2;
            }
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
            tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
            int i5 = overrideWallpaperInfo.color;
            if (i5 != 0) {
                tLRPC$TL_wallPaperSettings.background_color = i5 & 16777215;
                int i6 = tLRPC$TL_wallPaperSettings.flags | 1;
                tLRPC$TL_wallPaperSettings.flags = i6;
                tLRPC$TL_wallPaperSettings.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
                tLRPC$TL_wallPaperSettings.flags = i6 | 8;
            }
            int i7 = overrideWallpaperInfo.gradientColor1;
            if (i7 != 0) {
                tLRPC$TL_wallPaperSettings.second_background_color = i7 & 16777215;
                tLRPC$TL_wallPaperSettings.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
                tLRPC$TL_wallPaperSettings.flags |= 16;
            }
            int i8 = overrideWallpaperInfo.gradientColor2;
            if (i8 != 0) {
                tLRPC$TL_wallPaperSettings.third_background_color = i8 & 16777215;
                tLRPC$TL_wallPaperSettings.flags |= 32;
            }
            int i9 = overrideWallpaperInfo.gradientColor3;
            if (i9 != 0) {
                tLRPC$TL_wallPaperSettings.fourth_background_color = i9 & 16777215;
                tLRPC$TL_wallPaperSettings.flags |= 64;
            }
            if (z) {
                TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
                tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
                tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
                tLRPC$TL_account_saveWallPaper = tLRPC$TL_account_installWallPaper;
            } else {
                TLRPC$TL_account_saveWallPaper tLRPC$TL_account_saveWallPaper2 = new TLRPC$TL_account_saveWallPaper();
                tLRPC$TL_account_saveWallPaper2.wallpaper = tLRPC$TL_inputWallPaperSlug;
                tLRPC$TL_account_saveWallPaper2.settings = tLRPC$TL_wallPaperSettings;
                tLRPC$TL_account_saveWallPaper = tLRPC$TL_account_saveWallPaper2;
            }
            if (j == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer((int) ConnectionsManager.RequestFlagDoNotWaitFloodWait);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(21);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isBlurred);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isMotion);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.color);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.gradientColor1);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.rotation);
                    nativeByteBuffer.writeDouble(overrideWallpaperInfo.intensity);
                    nativeByteBuffer.writeBool(z);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.slug);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.originalFileName);
                    nativeByteBuffer.limit(nativeByteBuffer.position());
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$saveWallpaperToServer$104(j, tLObject, tLRPC$TL_error);
                        }
                    });
                    if (!overrideWallpaperInfo.isColor()) {
                    }
                    if (!overrideWallpaperInfo.isColor()) {
                    }
                    j2 = overrideWallpaperInfo.wallpaperId;
                    if (j2 != 0) {
                    }
                    tLRPC$TL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
                    tLRPC$TL_wallPaper.flags |= 4;
                    TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings2 = new TLRPC$TL_wallPaperSettings();
                    tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings2;
                    tLRPC$TL_wallPaperSettings2.blur = overrideWallpaperInfo.isBlurred;
                    tLRPC$TL_wallPaperSettings2.motion = overrideWallpaperInfo.isMotion;
                    i = overrideWallpaperInfo.color;
                    if (i != 0) {
                    }
                    i2 = overrideWallpaperInfo.gradientColor1;
                    if (i2 != 0) {
                    }
                    i3 = overrideWallpaperInfo.gradientColor2;
                    if (i3 != 0) {
                    }
                    i4 = overrideWallpaperInfo.gradientColor3;
                    if (i4 != 0) {
                    }
                    ArrayList<TLRPC$WallPaper> arrayList = new ArrayList<>();
                    arrayList.add(tLRPC$TL_wallPaper);
                    getMessagesStorage().putWallpapers(arrayList, -3);
                    getMessagesStorage().getWallpapers();
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveWallpaperToServer$104(j, tLObject, tLRPC$TL_error);
                }
            });
        }
        if ((!overrideWallpaperInfo.isColor() || overrideWallpaperInfo.gradientColor2 != 0) && overrideWallpaperInfo.wallpaperId <= 0) {
            if (!overrideWallpaperInfo.isColor()) {
                tLRPC$TL_wallPaper = new TLRPC$TL_wallPaperNoFile();
            } else {
                tLRPC$TL_wallPaper = new TLRPC$TL_wallPaper();
                tLRPC$TL_wallPaper.slug = overrideWallpaperInfo.slug;
                tLRPC$TL_wallPaper.document = new TLRPC$TL_documentEmpty();
            }
            j2 = overrideWallpaperInfo.wallpaperId;
            if (j2 != 0) {
                long nextLong = Utilities.random.nextLong();
                tLRPC$TL_wallPaper.id = nextLong;
                if (nextLong > 0) {
                    tLRPC$TL_wallPaper.id = -nextLong;
                }
            } else {
                tLRPC$TL_wallPaper.id = j2;
            }
            tLRPC$TL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
            tLRPC$TL_wallPaper.flags |= 4;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings22 = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings22;
            tLRPC$TL_wallPaperSettings22.blur = overrideWallpaperInfo.isBlurred;
            tLRPC$TL_wallPaperSettings22.motion = overrideWallpaperInfo.isMotion;
            i = overrideWallpaperInfo.color;
            if (i != 0) {
                tLRPC$TL_wallPaperSettings22.background_color = i;
                int i10 = tLRPC$TL_wallPaperSettings22.flags | 1;
                tLRPC$TL_wallPaperSettings22.flags = i10;
                tLRPC$TL_wallPaperSettings22.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
                tLRPC$TL_wallPaperSettings22.flags = i10 | 8;
            }
            i2 = overrideWallpaperInfo.gradientColor1;
            if (i2 != 0) {
                tLRPC$TL_wallPaperSettings22.second_background_color = i2;
                tLRPC$TL_wallPaperSettings22.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
                tLRPC$TL_wallPaper.settings.flags |= 16;
            }
            i3 = overrideWallpaperInfo.gradientColor2;
            if (i3 != 0) {
                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_wallPaper.settings;
                tLRPC$WallPaperSettings.third_background_color = i3;
                tLRPC$WallPaperSettings.flags |= 32;
            }
            i4 = overrideWallpaperInfo.gradientColor3;
            if (i4 != 0) {
                TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_wallPaper.settings;
                tLRPC$WallPaperSettings2.fourth_background_color = i4;
                tLRPC$WallPaperSettings2.flags |= 64;
            }
            ArrayList<TLRPC$WallPaper> arrayList2 = new ArrayList<>();
            arrayList2.add(tLRPC$TL_wallPaper);
            getMessagesStorage().putWallpapers(arrayList2, -3);
            getMessagesStorage().getWallpapers();
        }
    }

    public /* synthetic */ void lambda$saveWallpaperToServer$104(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    public void markDialogMessageAsDeleted(long j, ArrayList<Integer> arrayList) {
        ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(j);
        if (arrayList2 != null) {
            for (int i = 0; i < arrayList2.size(); i++) {
                MessageObject messageObject = arrayList2.get(i);
                if (messageObject != null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= arrayList.size()) {
                            break;
                        } else if (messageObject.getId() == arrayList.get(i2).intValue()) {
                            messageObject.deleted = true;
                            break;
                        } else {
                            i2++;
                        }
                    }
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, z2, false, 0L, null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2, boolean z3) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, z2, z3, 0L, null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2, boolean z3, long j2, TLObject tLObject) {
        long j3;
        ArrayList<Integer> arrayList3;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        final long createPendingTask;
        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages;
        NativeByteBuffer nativeByteBuffer3;
        long createPendingTask2;
        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer4;
        final long createPendingTask3;
        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages;
        long j4;
        ArrayList<Integer> arrayList4;
        char c;
        if ((arrayList == null || arrayList.isEmpty()) && j2 == 0) {
            return;
        }
        if (j2 == 0) {
            if (j == 0 || !DialogObject.isChatDialog(j)) {
                j4 = 0;
            } else {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                j4 = ChatObject.isChannel(chat) ? chat.id : 0L;
            }
            if (!z3) {
                ArrayList<Integer> arrayList5 = new ArrayList<>();
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    Integer num = arrayList.get(i);
                    if (num.intValue() > 0) {
                        arrayList5.add(num);
                    }
                }
                arrayList4 = arrayList5;
            } else {
                arrayList4 = null;
            }
            if (z2) {
                getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, false, true);
                c = 1;
            } else {
                if (j4 == 0) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        MessageObject messageObject = this.dialogMessagesByIds.get(arrayList.get(i2).intValue());
                        if (messageObject != null) {
                            messageObject.deleted = true;
                        }
                    }
                } else {
                    markDialogMessageAsDeleted(j, arrayList);
                }
                getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, z, false);
                c = 1;
                getMessagesStorage().updateDialogsWithDeletedMessages(j, j4, arrayList, null, true);
            }
            NotificationCenter notificationCenter = getNotificationCenter();
            int i3 = NotificationCenter.messagesDeleted;
            Object[] objArr = new Object[3];
            objArr[0] = arrayList;
            objArr[c] = Long.valueOf(j4);
            objArr[2] = Boolean.valueOf(z2);
            notificationCenter.postNotificationName(i3, objArr);
            j3 = j4;
            arrayList3 = arrayList4;
        } else {
            j3 = tLObject instanceof TLRPC$TL_channels_deleteMessages ? ((TLRPC$TL_channels_deleteMessages) tLObject).channel.channel_id : 0L;
            arrayList3 = null;
        }
        if (z3) {
            return;
        }
        if (z2) {
            if (tLObject instanceof TLRPC$TL_messages_deleteScheduledMessages) {
                tLRPC$TL_messages_deleteScheduledMessages = (TLRPC$TL_messages_deleteScheduledMessages) tLObject;
                createPendingTask3 = j2;
            } else {
                TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages2 = new TLRPC$TL_messages_deleteScheduledMessages();
                tLRPC$TL_messages_deleteScheduledMessages2.id = arrayList3;
                tLRPC$TL_messages_deleteScheduledMessages2.peer = getInputPeer(j);
                try {
                    nativeByteBuffer4 = new NativeByteBuffer(tLRPC$TL_messages_deleteScheduledMessages2.getObjectSize() + 12);
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer4 = null;
                }
                try {
                    nativeByteBuffer4.writeInt32(24);
                    nativeByteBuffer4.writeInt64(j);
                    tLRPC$TL_messages_deleteScheduledMessages2.serializeToStream(nativeByteBuffer4);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                    tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$105(createPendingTask3, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$105(createPendingTask3, tLObject2, tLRPC$TL_error);
                }
            });
        } else if (j3 != 0) {
            if (tLObject != null) {
                tLRPC$TL_channels_deleteMessages = (TLRPC$TL_channels_deleteMessages) tLObject;
                createPendingTask2 = j2;
            } else {
                TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages2 = new TLRPC$TL_channels_deleteMessages();
                tLRPC$TL_channels_deleteMessages2.id = arrayList3;
                tLRPC$TL_channels_deleteMessages2.channel = getInputChannel(j3);
                try {
                    nativeByteBuffer3 = new NativeByteBuffer(tLRPC$TL_channels_deleteMessages2.getObjectSize() + 12);
                } catch (Exception e3) {
                    e = e3;
                    nativeByteBuffer3 = null;
                }
                try {
                    nativeByteBuffer3.writeInt32(24);
                    nativeByteBuffer3.writeInt64(j);
                    tLRPC$TL_channels_deleteMessages2.serializeToStream(nativeByteBuffer3);
                } catch (Exception e4) {
                    e = e4;
                    FileLog.e(e);
                    createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                    tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                    final long j5 = j3;
                    final long j6 = createPendingTask2;
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda305
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$106(j5, j6, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
            }
            final long j52 = j3;
            final long j62 = createPendingTask2;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda305
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$106(j52, j62, tLObject2, tLRPC$TL_error);
                }
            });
        } else {
            if (arrayList2 == null || tLRPC$EncryptedChat == null || arrayList2.isEmpty()) {
                nativeByteBuffer = null;
            } else {
                nativeByteBuffer = null;
                getSecretChatHelper().sendMessagesDeleteMessage(tLRPC$EncryptedChat, arrayList2, null);
            }
            if (tLObject instanceof TLRPC$TL_messages_deleteMessages) {
                tLRPC$TL_messages_deleteMessages = (TLRPC$TL_messages_deleteMessages) tLObject;
                createPendingTask = j2;
            } else {
                TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages2 = new TLRPC$TL_messages_deleteMessages();
                tLRPC$TL_messages_deleteMessages2.id = arrayList3;
                tLRPC$TL_messages_deleteMessages2.revoke = z;
                try {
                    nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_messages_deleteMessages2.getObjectSize() + 12);
                } catch (Exception e5) {
                    e = e5;
                    nativeByteBuffer2 = nativeByteBuffer;
                }
                try {
                    nativeByteBuffer2.writeInt32(24);
                    nativeByteBuffer2.writeInt64(j);
                    tLRPC$TL_messages_deleteMessages2.serializeToStream(nativeByteBuffer2);
                } catch (Exception e6) {
                    e = e6;
                    FileLog.e(e);
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda295
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$107(createPendingTask, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda295
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$107(createPendingTask, tLObject2, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteMessages$105(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$106(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedMessages.pts, tLRPC$TL_messages_affectedMessages.pts_count, j);
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$107(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void unpinAllMessages(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User) {
        if (tLRPC$Chat == null && tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_unpinAllMessages tLRPC$TL_messages_unpinAllMessages = new TLRPC$TL_messages_unpinAllMessages();
        tLRPC$TL_messages_unpinAllMessages.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_unpinAllMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda331
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$unpinAllMessages$108(tLRPC$Chat, tLRPC$User, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$unpinAllMessages$108(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (ChatObject.isChannel(tLRPC$Chat)) {
                processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
            } else {
                processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, null, false, 0, 0, false, null);
        }
    }

    public void pinMessage(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User, final int i, final boolean z, boolean z2, boolean z3) {
        if (tLRPC$Chat == null && tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_updatePinnedMessage tLRPC$TL_messages_updatePinnedMessage = new TLRPC$TL_messages_updatePinnedMessage();
        tLRPC$TL_messages_updatePinnedMessage.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
        tLRPC$TL_messages_updatePinnedMessage.id = i;
        tLRPC$TL_messages_updatePinnedMessage.unpin = z;
        tLRPC$TL_messages_updatePinnedMessage.silent = !z3;
        tLRPC$TL_messages_updatePinnedMessage.pm_oneside = z2;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_updatePinnedMessage, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda281
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$pinMessage$109(i, tLRPC$Chat, tLRPC$User, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$pinMessage$109(int i, TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            ArrayList<Integer> arrayList = new ArrayList<>();
            arrayList.add(Integer.valueOf(i));
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, arrayList, !z, -1, 0, false, null);
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void deleteUserChannelHistory(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User, final TLRPC$Chat tLRPC$Chat2, int i) {
        long j;
        if (tLRPC$User != null) {
            j = tLRPC$User.id;
        } else {
            j = tLRPC$Chat2 != null ? tLRPC$Chat2.id : 0L;
        }
        if (i == 0) {
            getMessagesStorage().deleteUserChatHistory(-tLRPC$Chat.id, j);
        }
        TLRPC$TL_channels_deleteParticipantHistory tLRPC$TL_channels_deleteParticipantHistory = new TLRPC$TL_channels_deleteParticipantHistory();
        tLRPC$TL_channels_deleteParticipantHistory.channel = getInputChannel(tLRPC$Chat);
        tLRPC$TL_channels_deleteParticipantHistory.participant = tLRPC$User != null ? getInputPeer(tLRPC$User) : getInputPeer(tLRPC$Chat2);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteParticipantHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda332
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$110(tLRPC$Chat, tLRPC$User, tLRPC$Chat2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserChannelHistory$110(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            int i = tLRPC$TL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(tLRPC$Chat, tLRPC$User, tLRPC$Chat2, i);
            }
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
        }
    }

    public ArrayList<TLRPC$Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public void putDialogsEndReachedAfterRegistration() {
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, true);
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC$Dialog> getDialogs(int i) {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public int getAllFoldersDialogsCount() {
        int i = 0;
        for (int i2 = 0; i2 < this.dialogsByFolder.size(); i2++) {
            SparseArray<ArrayList<TLRPC$Dialog>> sparseArray = this.dialogsByFolder;
            ArrayList<TLRPC$Dialog> arrayList = sparseArray.get(sparseArray.keyAt(i2));
            if (arrayList != null) {
                i += arrayList.size();
            }
        }
        return i;
    }

    public int getTotalDialogsCount() {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(0);
        if (arrayList != null) {
            return 0 + arrayList.size();
        }
        return 0;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<SparseArray<TLRPC$DraftMessage>> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC$DraftMessage tLRPC$DraftMessage = drafts.valueAt(i).get(0);
            if (tLRPC$DraftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), tLRPC$DraftMessage);
            }
        }
    }

    public void putDraftDialogIfNeed(long j, TLRPC$DraftMessage tLRPC$DraftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            int i = 0;
            if (size > 0) {
                TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(size - 1);
                if (tLRPC$DraftMessage.date < DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0))) {
                    return;
                }
            }
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = j;
            tLRPC$TL_dialog.draft = tLRPC$DraftMessage;
            tLRPC$TL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            if (j < 0 && ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                i = 1;
            }
            tLRPC$TL_dialog.flags = i;
            this.dialogs_dict.put(j, tLRPC$TL_dialog);
            this.allDialogs.add(tLRPC$TL_dialog);
            sortDialogs(null);
        }
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null || tLRPC$Dialog.top_message != 0) {
            return;
        }
        this.dialogs_dict.remove(tLRPC$Dialog.id);
        this.allDialogs.remove(tLRPC$Dialog);
    }

    private void removeDialog(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return;
        }
        final long j = tLRPC$Dialog.id;
        if (this.dialogsServerOnly.remove(tLRPC$Dialog) && DialogObject.isChannel(tLRPC$Dialog)) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda68
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$removeDialog$111(j);
                }
            });
        }
        this.allDialogs.remove(tLRPC$Dialog);
        this.dialogsMyChannels.remove(tLRPC$Dialog);
        this.dialogsMyGroups.remove(tLRPC$Dialog);
        this.dialogsCanAddUsers.remove(tLRPC$Dialog);
        this.dialogsChannelsOnly.remove(tLRPC$Dialog);
        this.dialogsGroupsOnly.remove(tLRPC$Dialog);
        this.dialogsUsersOnly.remove(tLRPC$Dialog);
        this.dialogsForBlock.remove(tLRPC$Dialog);
        this.dialogsForward.remove(tLRPC$Dialog);
        int i = 0;
        while (true) {
            DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
            if (i >= dialogFilterArr.length) {
                break;
            }
            if (dialogFilterArr[i] != null) {
                dialogFilterArr[i].dialogs.remove(tLRPC$Dialog);
            }
            i++;
        }
        this.dialogs_dict.remove(j);
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(tLRPC$Dialog.folder_id);
        if (arrayList == null) {
            return;
        }
        arrayList.remove(tLRPC$Dialog);
    }

    public /* synthetic */ void lambda$removeDialog$111(long j) {
        long j2 = -j;
        this.channelsPts.delete(j2);
        this.shortPollChannels.delete(j2);
        this.needShortPollChannels.delete(j2);
        this.shortPollOnlines.delete(j2);
        this.needShortPollOnlines.delete(j2);
    }

    public void hidePromoDialog() {
        if (this.promoDialog == null) {
            return;
        }
        TLRPC$TL_help_hidePromoData tLRPC$TL_help_hidePromoData = new TLRPC$TL_help_hidePromoData();
        tLRPC$TL_help_hidePromoData.peer = getInputPeer(this.promoDialog.id);
        getConnectionsManager().sendRequest(tLRPC$TL_help_hidePromoData, MessagesController$$ExternalSyntheticLambda370.INSTANCE);
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$hidePromoDialog$113();
            }
        });
        removePromoDialog();
    }

    public /* synthetic */ void lambda$hidePromoDialog$113() {
        this.promoDialogId = 0L;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, 1, i, 0, z, null, 0L);
    }

    public void setDialogHistoryTTL(long j, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$TL_messages_setHistoryTTL tLRPC$TL_messages_setHistoryTTL = new TLRPC$TL_messages_setHistoryTTL();
        tLRPC$TL_messages_setHistoryTTL.peer = getInputPeer(j);
        tLRPC$TL_messages_setHistoryTTL.period = i;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setHistoryTTL, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda259
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDialogHistoryTTL$114(tLObject, tLRPC$TL_error);
            }
        });
        TLRPC$ChatFull tLRPC$ChatFull = null;
        if (j > 0) {
            tLRPC$UserFull = getUserFull(j);
            if (tLRPC$UserFull == null) {
                return;
            }
            tLRPC$UserFull.ttl_period = i;
            tLRPC$UserFull.flags |= 16384;
        } else {
            TLRPC$ChatFull chatFull = getChatFull(-j);
            if (chatFull == null) {
                return;
            }
            chatFull.ttl_period = i;
            if (chatFull instanceof TLRPC$TL_channelFull) {
                chatFull.flags |= ConnectionsManager.FileTypePhoto;
            } else {
                chatFull.flags |= 16384;
            }
            tLRPC$UserFull = null;
            tLRPC$ChatFull = chatFull;
        }
        if (tLRPC$ChatFull != null) {
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.chatInfoDidLoad;
            Boolean bool = Boolean.FALSE;
            notificationCenter.postNotificationName(i2, tLRPC$ChatFull, 0, bool, bool);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(j), tLRPC$UserFull);
    }

    public /* synthetic */ void lambda$setDialogHistoryTTL$114(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:131:0x03e0  */
    /* JADX WARN: Removed duplicated region for block: B:142:0x0419  */
    /* JADX WARN: Type inference failed for: r2v11 */
    /* JADX WARN: Type inference failed for: r2v12, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r2v59 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void deleteDialog(final long j, int i, final int i2, int i3, final boolean z, final TLRPC$InputPeer tLRPC$InputPeer, final long j2) {
        int i4;
        int i5;
        boolean z2;
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        ?? r2;
        boolean z3;
        boolean z4;
        TLRPC$Chat chat;
        int i6;
        ArrayList<MessageObject> arrayList;
        if (i2 == 2) {
            getMessagesStorage().deleteDialog(j, i2);
            return;
        }
        for (int i7 = 0; i7 < this.sendAsPeers.size(); i7++) {
            SendAsPeersInfo valueAt = this.sendAsPeers.valueAt(i7);
            if (valueAt.sendAsPeers != null) {
                int i8 = 0;
                while (true) {
                    if (i8 >= valueAt.sendAsPeers.chats.size()) {
                        break;
                    } else if (valueAt.sendAsPeers.chats.get(i8).id == (-j)) {
                        valueAt.sendAsPeers.chats.remove(i8);
                        break;
                    } else {
                        i8++;
                    }
                }
                for (int i9 = 0; i9 < valueAt.sendAsPeers.peers.size(); i9++) {
                    long j3 = -j;
                    if (valueAt.sendAsPeers.peers.get(i9).peer.channel_id == j3 || valueAt.sendAsPeers.peers.get(i9).peer.chat_id == j3) {
                        valueAt.sendAsPeers.peers.remove(i9);
                        break;
                    }
                }
            }
        }
        this.sendAsPeers.remove(j);
        int i10 = 1;
        if (i == 1 && i3 == 0) {
            getMessagesStorage().getDialogMaxMessageId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda236
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i11) {
                    MessagesController.this.lambda$deleteDialog$115(j, i2, z, tLRPC$InputPeer, j2, i11);
                }
            });
            return;
        }
        if (i2 == 0 || i2 == 3) {
            getMediaDataController().uninstallShortcut(j);
        }
        if (i != 0) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("delete dialog with id " + j);
            }
            getMessagesStorage().deleteDialog(j, i2);
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
            if (i2 == 0 || i2 == 3) {
                r2 = 0;
                getNotificationCenter().postNotificationName(NotificationCenter.dialogDeleted, Long.valueOf(j), 0);
                getNotificationsController().deleteNotificationChannel(j, 0);
                JoinCallAlert.processDeletedChat(this.currentAccount, j);
            } else {
                r2 = 0;
            }
            if (i2 == 0) {
                getMediaDataController().cleanDraft(j, r2, r2);
            }
            if (tLRPC$Dialog != null) {
                i5 = i == 2 ? Math.max(Math.max(Math.max((int) r2, tLRPC$Dialog.top_message), tLRPC$Dialog.read_inbox_max_id), tLRPC$Dialog.read_outbox_max_id) : i3;
                if (i2 == 0 || i2 == 3) {
                    TLRPC$Dialog tLRPC$Dialog2 = this.promoDialog;
                    z4 = tLRPC$Dialog2 != null && tLRPC$Dialog2.id == j;
                    if (z4) {
                        this.isLeftPromoChannel = true;
                        long j4 = tLRPC$Dialog2.id;
                        if (j4 < 0 && (chat = getChat(Long.valueOf(-j4))) != null) {
                            chat.left = true;
                        }
                        sortDialogs(null);
                    } else {
                        removeDialog(tLRPC$Dialog);
                        int i11 = this.nextDialogsCacheOffset.get(tLRPC$Dialog.folder_id, 0);
                        if (i11 > 0) {
                            this.nextDialogsCacheOffset.put(tLRPC$Dialog.folder_id, i11 - 1);
                        }
                    }
                } else {
                    int i12 = r2 == true ? 1 : 0;
                    int i13 = r2 == true ? 1 : 0;
                    tLRPC$Dialog.unread_count = i12;
                    z4 = false;
                }
                if (!z4) {
                    ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(tLRPC$Dialog.id);
                    this.dialogMessage.remove(tLRPC$Dialog.id);
                    if (arrayList2 != null && arrayList2.size() > 0 && arrayList2.get(0) != null) {
                        i6 = arrayList2.get(0).getId();
                        int i14 = 0;
                        while (i14 < arrayList2.size()) {
                            MessageObject messageObject = arrayList2.get(i14);
                            if (messageObject != null && messageObject.getId() > i6) {
                                i6 = messageObject.getId();
                            }
                            if (messageObject != null) {
                                arrayList = arrayList2;
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject.getId());
                                }
                            } else {
                                arrayList = arrayList2;
                            }
                            if (messageObject != null) {
                                long j5 = messageObject.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j5);
                                }
                            }
                            i14++;
                            arrayList2 = arrayList;
                            i10 = 1;
                        }
                        i4 = i2;
                    } else {
                        i6 = tLRPC$Dialog.top_message;
                        MessageObject messageObject2 = this.dialogMessagesByIds.get(i6);
                        if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(tLRPC$Dialog.top_message);
                        }
                        if (messageObject2 != null) {
                            long j6 = messageObject2.messageOwner.random_id;
                            if (j6 != 0) {
                                this.dialogMessagesByRandomIds.remove(j6);
                            }
                        }
                        i4 = i2;
                        i10 = 1;
                    }
                    if (i4 == i10 && !DialogObject.isEncryptedDialog(j) && i6 > 0) {
                        TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                        tLRPC$TL_messageService.id = tLRPC$Dialog.top_message;
                        tLRPC$TL_messageService.out = getUserConfig().getClientUserId() == j;
                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                        tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                        tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
                        tLRPC$TL_messageService.flags |= 256;
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionHistoryClear();
                        tLRPC$TL_messageService.date = tLRPC$Dialog.last_message_date;
                        tLRPC$TL_messageService.dialog_id = j;
                        tLRPC$TL_messageService.peer_id = getPeer(j);
                        boolean contains = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_messageService.dialog_id));
                        MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$TL_messageService, contains, contains);
                        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
                        arrayList3.add(messageObject3);
                        ArrayList<TLRPC$Message> arrayList4 = new ArrayList<>();
                        arrayList4.add(tLRPC$TL_messageService);
                        updateInterfaceWithMessages(j, arrayList3, false);
                        getMessagesStorage().putMessages(arrayList4, false, true, false, 0, false, 0);
                    } else {
                        tLRPC$Dialog.top_message = 0;
                    }
                } else {
                    i4 = i2;
                }
                z3 = z4;
            } else {
                i4 = i2;
                i5 = i3;
                z3 = false;
            }
            if (i == 2) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num != null) {
                    i5 = Math.max(num.intValue(), i5);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 != null) {
                    i5 = Math.max(num2.intValue(), i5);
                }
            }
            if (!this.dialogsInTransaction) {
                if (z3) {
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                } else {
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                    getNotificationCenter().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.FALSE, null);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda66
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteDialog$117(j);
                }
            });
        } else {
            i4 = i2;
            i5 = i3;
        }
        if (i4 == 3) {
            return;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(j) : tLRPC$InputPeer;
            if (inputPeer == null) {
                return;
            }
            boolean z5 = inputPeer instanceof TLRPC$TL_inputPeerChannel;
            int i15 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            if (!z5 || i4 != 0) {
                if (i5 > 0 && i5 != Integer.MAX_VALUE) {
                    this.deletedHistory.put(j, Math.max(this.deletedHistory.get(j, 0), i5));
                }
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 28);
                        try {
                            nativeByteBuffer.writeInt32(13);
                            nativeByteBuffer.writeInt64(j);
                            nativeByteBuffer.writeBool(i != 0);
                            nativeByteBuffer.writeInt32(i4);
                            nativeByteBuffer.writeInt32(i5);
                            z2 = z;
                        } catch (Exception e) {
                            e = e;
                            z2 = z;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        z2 = z;
                        nativeByteBuffer = null;
                    }
                    try {
                        nativeByteBuffer.writeBool(z2);
                        inputPeer.serializeToStream(nativeByteBuffer);
                    } catch (Exception e3) {
                        e = e3;
                        FileLog.e(e);
                        createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        if (!z5) {
                        }
                    }
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    if (!z5) {
                        TLRPC$TL_messages_deleteHistory tLRPC$TL_messages_deleteHistory = new TLRPC$TL_messages_deleteHistory();
                        tLRPC$TL_messages_deleteHistory.peer = inputPeer;
                        if (i5 > 0) {
                            i15 = i5;
                        }
                        tLRPC$TL_messages_deleteHistory.max_id = i15;
                        tLRPC$TL_messages_deleteHistory.just_clear = i4 != 0;
                        tLRPC$TL_messages_deleteHistory.revoke = z2;
                        final long j7 = createPendingTask;
                        final int i16 = i5;
                        final TLRPC$InputPeer tLRPC$InputPeer2 = inputPeer;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda307
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteDialog$119(j7, j, i2, i16, z, tLRPC$InputPeer2, tLObject, tLRPC$TL_error);
                            }
                        }, 64);
                        return;
                    } else if (i4 == 0) {
                        if (createPendingTask == 0) {
                            return;
                        }
                        getMessagesStorage().removePendingTask(createPendingTask);
                        return;
                    } else {
                        TLRPC$TL_channels_deleteHistory tLRPC$TL_channels_deleteHistory = new TLRPC$TL_channels_deleteHistory();
                        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
                        tLRPC$TL_channels_deleteHistory.channel = tLRPC$TL_inputChannel;
                        tLRPC$TL_channels_deleteHistory.for_everyone = z2;
                        tLRPC$TL_inputChannel.channel_id = inputPeer.channel_id;
                        tLRPC$TL_inputChannel.access_hash = inputPeer.access_hash;
                        if (i5 <= 0) {
                            i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        }
                        tLRPC$TL_channels_deleteHistory.max_id = i5;
                        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda285
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteDialog$118(createPendingTask, tLObject, tLRPC$TL_error);
                            }
                        }, 64);
                        return;
                    }
                }
                z2 = z;
            } else {
                z2 = z;
            }
            createPendingTask = j2;
            if (!z5) {
            }
        } else {
            int i17 = i4;
            int encryptedChatId = DialogObject.getEncryptedChatId(j);
            if (i17 == 1) {
                getSecretChatHelper().sendClearHistoryMessage(getEncryptedChat(Integer.valueOf(encryptedChatId)), null);
            } else {
                getSecretChatHelper().declineSecretChat(encryptedChatId, z);
            }
        }
    }

    public /* synthetic */ void lambda$deleteDialog$115(long j, int i, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2, int i2) {
        deleteDialog(j, 2, i, Math.max(0, i2), z, tLRPC$InputPeer, j2);
        checkIfFolderEmpty(1);
    }

    public /* synthetic */ void lambda$deleteDialog$116(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    public /* synthetic */ void lambda$deleteDialog$117(final long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda67
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteDialog$116(j);
            }
        });
    }

    public /* synthetic */ void lambda$deleteDialog$118(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public /* synthetic */ void lambda$deleteDialog$119(long j, long j2, int i, int i2, boolean z, TLRPC$InputPeer tLRPC$InputPeer, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, 0, i, i2, z, tLRPC$InputPeer, 0L);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
        }
    }

    public void saveGif(final Object obj, TLRPC$Document tLRPC$Document) {
        if (obj == null || !MessageObject.isGifDocument(tLRPC$Document)) {
            return;
        }
        final TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif = new TLRPC$TL_messages_saveGif();
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_messages_saveGif.id = tLRPC$TL_inputDocument;
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        byte[] bArr = tLRPC$Document.file_reference;
        tLRPC$TL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tLRPC$TL_inputDocument.file_reference = new byte[0];
        }
        tLRPC$TL_messages_saveGif.unsave = false;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveGif, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$saveGif$120(obj, tLRPC$TL_messages_saveGif, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$saveGif$120(Object obj, TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null || !FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tLRPC$TL_messages_saveGif);
    }

    public void saveRecentSticker(final Object obj, TLRPC$Document tLRPC$Document, boolean z) {
        if (obj == null || tLRPC$Document == null) {
            return;
        }
        final TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker = new TLRPC$TL_messages_saveRecentSticker();
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_messages_saveRecentSticker.id = tLRPC$TL_inputDocument;
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        byte[] bArr = tLRPC$Document.file_reference;
        tLRPC$TL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tLRPC$TL_inputDocument.file_reference = new byte[0];
        }
        tLRPC$TL_messages_saveRecentSticker.unsave = false;
        tLRPC$TL_messages_saveRecentSticker.attached = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveRecentSticker, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda325
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$saveRecentSticker$121(obj, tLRPC$TL_messages_saveRecentSticker, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$saveRecentSticker$121(Object obj, TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null || !FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tLRPC$TL_messages_saveRecentSticker);
    }

    public void loadChannelParticipants(final Long l) {
        if (this.loadingFullParticipants.contains(l) || this.loadedFullParticipants.contains(l)) {
            return;
        }
        this.loadingFullParticipants.add(l);
        TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
        tLRPC$TL_channels_getParticipants.channel = getInputChannel(l.longValue());
        tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsRecent();
        tLRPC$TL_channels_getParticipants.offset = 0;
        tLRPC$TL_channels_getParticipants.limit = 32;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda323
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadChannelParticipants$123(l, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelParticipants$123(final Long l, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda171
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadChannelParticipants$122(tLRPC$TL_error, tLObject, l);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelParticipants$122(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, Long l) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants = (TLRPC$TL_channels_channelParticipants) tLObject;
            putUsers(tLRPC$TL_channels_channelParticipants.users, false);
            putChats(tLRPC$TL_channels_channelParticipants.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipants.users, tLRPC$TL_channels_channelParticipants.chats, true, true);
            getMessagesStorage().updateChannelUsers(l.longValue(), tLRPC$TL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(l);
        }
        this.loadingFullParticipants.remove(l);
    }

    public void putChatFull(TLRPC$ChatFull tLRPC$ChatFull) {
        this.fullChats.put(tLRPC$ChatFull.id, tLRPC$ChatFull);
    }

    public void processChatInfo(final long j, final TLRPC$ChatFull tLRPC$ChatFull, final ArrayList<TLRPC$User> arrayList, final boolean z, final boolean z2, final boolean z3, final ArrayList<Integer> arrayList2, final HashMap<Integer, MessageObject> hashMap, final int i, final boolean z4) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda216
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processChatInfo$124(z, j, z3, z2, tLRPC$ChatFull, arrayList, arrayList2, hashMap, i, z4);
            }
        });
    }

    public /* synthetic */ void lambda$processChatInfo$124(boolean z, long j, boolean z2, boolean z3, TLRPC$ChatFull tLRPC$ChatFull, ArrayList arrayList, ArrayList arrayList2, HashMap hashMap, int i, boolean z4) {
        if (z && j > 0 && !z2) {
            loadFullChat(j, 0, z3);
        }
        if (tLRPC$ChatFull != null) {
            if (this.fullChats.get(j) == null) {
                this.fullChats.put(j, tLRPC$ChatFull);
            }
            putUsers(arrayList, z);
            if (tLRPC$ChatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.valueOf(z2), Boolean.FALSE);
        }
        if (arrayList2 != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(-j), arrayList2, hashMap, Integer.valueOf(i), Boolean.valueOf(z4));
        }
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        loadUserInfo(tLRPC$User, z, i, 0);
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i, int i2) {
        getMessagesStorage().loadUserInfo(tLRPC$User, z, i, i2);
    }

    public void updateUsernameActiveness(TLObject tLObject, String str, boolean z) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.objectsByUsernames.remove(str);
        if (!z) {
            return;
        }
        this.objectsByUsernames.put(str.toLowerCase(), tLObject);
    }

    public void processUserInfo(final TLRPC$User tLRPC$User, final TLRPC$UserFull tLRPC$UserFull, final boolean z, final boolean z2, final int i, final ArrayList<Integer> arrayList, final HashMap<Integer, MessageObject> hashMap, final int i2, final boolean z3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda218
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUserInfo$125(z, tLRPC$User, i, z2, tLRPC$UserFull, arrayList, hashMap, i2, z3);
            }
        });
    }

    public /* synthetic */ void lambda$processUserInfo$125(boolean z, TLRPC$User tLRPC$User, int i, boolean z2, TLRPC$UserFull tLRPC$UserFull, ArrayList arrayList, HashMap hashMap, int i2, boolean z3) {
        if (z) {
            loadFullUser(tLRPC$User, i, z2);
        }
        if (tLRPC$UserFull != null) {
            if (this.fullUsers.get(tLRPC$User.id) == null) {
                this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
                int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
                if (tLRPC$UserFull.blocked) {
                    if (indexOfKey < 0) {
                        this.blockePeers.put(tLRPC$User.id, 1);
                        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                    }
                } else if (indexOfKey >= 0) {
                    this.blockePeers.removeAt(indexOfKey);
                    getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        }
        if (arrayList != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(tLRPC$User.id), arrayList, hashMap, Integer.valueOf(i2), Boolean.valueOf(z3));
        }
    }

    public void updateTimerProc() {
        int i;
        ArrayList arrayList;
        int i2;
        int i3;
        long currentTimeMillis = System.currentTimeMillis();
        int i4 = 0;
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (!this.ignoreSetOnline && getConnectionsManager().getPauseTime() == 0 && ApplicationLoader.isScreenOn && !ApplicationLoader.mainInterfacePausedStageQueue) {
                if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                    this.statusSettingState = 1;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus = new TLRPC$TL_account_updateStatus();
                    tLRPC$TL_account_updateStatus.offline = false;
                    this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda250
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$126(tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } else if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                this.statusSettingState = 2;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus2 = new TLRPC$TL_account_updateStatus();
                tLRPC$TL_account_updateStatus2.offline = true;
                this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda253
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$updateTimerProc$127(tLObject, tLRPC$TL_error);
                    }
                });
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int i5 = 0; i5 < this.updatesQueueChannels.size(); i5++) {
                    long keyAt = this.updatesQueueChannels.keyAt(i5);
                    if (Math.abs(currentTimeMillis - this.updatesStartWaitTimeChannels.valueAt(i5)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(keyAt, 0);
                    }
                }
            }
            for (int i6 = 0; i6 < 3; i6++) {
                if (getUpdatesStartTime(i6) != 0 && Math.abs(currentTimeMillis - getUpdatesStartTime(i6)) >= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(i6 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(i6, 0);
                }
            }
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i7 = 0;
                while (i7 < this.channelViewsToSend.size()) {
                    final long keyAt2 = this.channelViewsToSend.keyAt(i7);
                    final TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews = new TLRPC$TL_messages_getMessagesViews();
                    tLRPC$TL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tLRPC$TL_messages_getMessagesViews.id = this.channelViewsToSend.valueAt(i7);
                    tLRPC$TL_messages_getMessagesViews.increment = i7 == 0;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesViews, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda316
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$129(keyAt2, tLRPC$TL_messages_getMessagesViews, tLObject, tLRPC$TL_error);
                        }
                    });
                    i7++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda43
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$131(currentTime);
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            for (Map.Entry<Long, Integer> entry : this.onlinePrivacy.entrySet()) {
                if (entry.getValue().intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(entry.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Long) it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda16
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$132();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i8 = 0;
            while (i8 < this.shortPollChannels.size()) {
                long keyAt3 = this.shortPollChannels.keyAt(i8);
                if (this.shortPollChannels.valueAt(i8) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i8--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i8++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i9 = 0;
            while (i9 < this.shortPollOnlines.size()) {
                final long keyAt4 = this.shortPollOnlines.keyAt(i9);
                if (this.shortPollOnlines.valueAt(i9) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i9--;
                    }
                    TLRPC$TL_messages_getOnlines tLRPC$TL_messages_getOnlines = new TLRPC$TL_messages_getOnlines();
                    tLRPC$TL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getOnlines, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda291
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$134(keyAt4, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                i9++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i10 = 0;
            boolean z = false;
            while (i10 < arrayList3.size()) {
                Long l = (Long) arrayList3.get(i10);
                ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(l);
                if (concurrentHashMap != null) {
                    ArrayList arrayList4 = new ArrayList(concurrentHashMap.keySet());
                    int i11 = 0;
                    while (i11 < arrayList4.size()) {
                        Integer num = (Integer) arrayList4.get(i11);
                        ArrayList<PrintingUser> arrayList5 = concurrentHashMap.get(num);
                        if (arrayList5 != null) {
                            while (i4 < arrayList5.size()) {
                                PrintingUser printingUser = arrayList5.get(i4);
                                Long l2 = l;
                                ArrayList arrayList6 = arrayList3;
                                int i12 = i10;
                                if (printingUser.lastTime + (printingUser.action instanceof TLRPC$TL_sendMessageGamePlayAction ? 30000 : 5900) < currentTimeMillis) {
                                    arrayList5.remove(printingUser);
                                    i4--;
                                    i3 = 1;
                                    z = true;
                                } else {
                                    i3 = 1;
                                }
                                i4 += i3;
                                l = l2;
                                arrayList3 = arrayList6;
                                i10 = i12;
                            }
                        }
                        ArrayList arrayList7 = arrayList3;
                        int i13 = i10;
                        Long l3 = l;
                        if (arrayList5 == null || arrayList5.isEmpty()) {
                            concurrentHashMap.remove(num);
                            arrayList4.remove(i11);
                            i11--;
                        }
                        i11++;
                        l = l3;
                        arrayList3 = arrayList7;
                        i10 = i13;
                        i4 = 0;
                    }
                }
                ArrayList arrayList8 = arrayList3;
                int i14 = i10;
                Long l4 = l;
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(l4);
                    arrayList = arrayList8;
                    arrayList.remove(i14);
                    i2 = i14 - 1;
                } else {
                    arrayList = arrayList8;
                    i2 = i14;
                }
                i10 = i2 + 1;
                arrayList3 = arrayList;
                i4 = 0;
            }
            i = 1;
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda37
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$135();
                    }
                });
            }
        } else {
            i = 1;
        }
        if (Theme.selectedAutoNightType == i && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            PushListenerController.sendRegistrationToServer(SharedConfig.pushType, SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkPromoInfo$138(false);
        checkTosUpdate();
    }

    public /* synthetic */ void lambda$updateTimerProc$126(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$127(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$129(long j, TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            final TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews = (TLRPC$TL_messages_messageViews) tLObject;
            final LongSparseArray<SparseIntArray> longSparseArray = new LongSparseArray<>();
            final LongSparseArray<SparseIntArray> longSparseArray2 = new LongSparseArray<>();
            final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3 = new LongSparseArray<>();
            SparseIntArray sparseIntArray = longSparseArray.get(j);
            SparseIntArray sparseIntArray2 = longSparseArray2.get(j);
            SparseArray<TLRPC$MessageReplies> sparseArray = longSparseArray3.get(j);
            for (int i = 0; i < tLRPC$TL_messages_getMessagesViews.id.size() && i < tLRPC$TL_messages_messageViews.views.size(); i++) {
                TLRPC$TL_messageViews tLRPC$TL_messageViews = tLRPC$TL_messages_messageViews.views.get(i);
                if ((1 & tLRPC$TL_messageViews.flags) != 0) {
                    if (sparseIntArray == null) {
                        sparseIntArray = new SparseIntArray();
                        longSparseArray.put(j, sparseIntArray);
                    }
                    sparseIntArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.views);
                }
                if ((tLRPC$TL_messageViews.flags & 2) != 0) {
                    if (sparseIntArray2 == null) {
                        sparseIntArray2 = new SparseIntArray();
                        longSparseArray2.put(j, sparseIntArray2);
                    }
                    sparseIntArray2.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.forwards);
                }
                if ((tLRPC$TL_messageViews.flags & 4) != 0) {
                    if (sparseArray == null) {
                        sparseArray = new SparseArray<>();
                        longSparseArray3.put(j, sparseArray);
                    }
                    sparseArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.replies);
                }
            }
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_messageViews.users, tLRPC$TL_messages_messageViews.chats, true, true);
            getMessagesStorage().putChannelViews(longSparseArray, longSparseArray2, longSparseArray3, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda182
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$128(tLRPC$TL_messages_messageViews, longSparseArray, longSparseArray2, longSparseArray3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$128(TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3) {
        putUsers(tLRPC$TL_messages_messageViews.users, false);
        putChats(tLRPC$TL_messages_messageViews.chats, false);
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, longSparseArray, longSparseArray2, longSparseArray3, Boolean.FALSE);
    }

    /* JADX WARN: Removed duplicated region for block: B:20:0x0063  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0075  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTimerProc$131(int i) {
        int i2;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.pollsToCheck.size();
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i4 = 0;
        while (i4 < size) {
            SparseArray<MessageObject> valueAt = this.pollsToCheck.valueAt(i4);
            if (valueAt != null) {
                int size2 = valueAt.size();
                int i5 = 0;
                while (true) {
                    int i6 = 1000;
                    if (i5 >= size2) {
                        break;
                    }
                    MessageObject valueAt2 = valueAt.valueAt(i5);
                    TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) valueAt2.messageOwner.media).poll;
                    int i7 = tLRPC$Poll.close_date;
                    final boolean z = i7 != 0 && !tLRPC$Poll.closed;
                    if (z) {
                        if (i7 > i) {
                            i3 = Math.min(i3, i7 - i);
                        } else {
                            i2 = size2;
                            int i8 = i3;
                            if (Math.abs(elapsedRealtime - valueAt2.pollLastCheckTime) >= i6) {
                                if (!valueAt2.pollVisibleOnScreen && !z) {
                                    valueAt.remove(valueAt2.getId());
                                    size2 = i2 - 1;
                                    i5--;
                                    i5++;
                                    i3 = i8;
                                }
                            } else {
                                valueAt2.pollLastCheckTime = elapsedRealtime;
                                TLRPC$TL_messages_getPollResults tLRPC$TL_messages_getPollResults = new TLRPC$TL_messages_getPollResults();
                                tLRPC$TL_messages_getPollResults.peer = getInputPeer(valueAt2.getDialogId());
                                tLRPC$TL_messages_getPollResults.msg_id = valueAt2.getId();
                                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPollResults, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda347
                                    @Override // org.telegram.tgnet.RequestDelegate
                                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                        MessagesController.this.lambda$updateTimerProc$130(z, tLObject, tLRPC$TL_error);
                                    }
                                });
                            }
                            size2 = i2;
                            i5++;
                            i3 = i8;
                        }
                    }
                    i2 = size2;
                    i6 = 30000;
                    int i82 = i3;
                    if (Math.abs(elapsedRealtime - valueAt2.pollLastCheckTime) >= i6) {
                    }
                    size2 = i2;
                    i5++;
                    i3 = i82;
                }
                if (i3 < 5) {
                    this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
                }
                if (valueAt.size() == 0) {
                    LongSparseArray<SparseArray<MessageObject>> longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(i4));
                    size--;
                    i4--;
                }
            }
            i4++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    public /* synthetic */ void lambda$updateTimerProc$130(boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Poll tLRPC$Poll;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (z) {
                for (int i = 0; i < tLRPC$Updates.updates.size(); i++) {
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if ((tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) && (tLRPC$Poll = ((TLRPC$TL_updateMessagePoll) tLRPC$Update).poll) != null && !tLRPC$Poll.closed) {
                        this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$132() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public /* synthetic */ void lambda$updateTimerProc$134(final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            final TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines = (TLRPC$TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(j, tLRPC$TL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda93
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$133(j, tLRPC$TL_chatOnlines);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$133(long j, TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Long.valueOf(j), Integer.valueOf(tLRPC$TL_chatOnlines.onlines));
    }

    public /* synthetic */ void lambda$updateTimerProc$135() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime > getConnectionsManager().getCurrentTime() || this.checkingTosUpdate || !getUserConfig().isClientActivated()) {
            return;
        }
        this.checkingTosUpdate = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_help_getTermsOfServiceUpdate
            public static int constructor = 749019089;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$help_TermsOfServiceUpdate.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkTosUpdate$137(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkTosUpdate$137(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC$TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdate) {
            final TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate = (TLRPC$TL_help_termsOfServiceUpdate) tLObject;
            this.nextTosCheckTime = tLRPC$TL_help_termsOfServiceUpdate.expires;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda180
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkTosUpdate$136(tLRPC$TL_help_termsOfServiceUpdate);
                }
            });
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    public /* synthetic */ void lambda$checkTosUpdate$136(TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, tLRPC$TL_help_termsOfServiceUpdate.terms_of_service);
    }

    public void checkPromoInfo(final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda213
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkPromoInfo$138(z);
            }
        });
    }

    /* renamed from: checkPromoInfoInternal */
    public void lambda$checkPromoInfo$138(boolean z) {
        String str;
        boolean z2 = false;
        if (z && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((z || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences globalMainSettings = getGlobalMainSettings();
            globalMainSettings.getBoolean("proxy_enabled", false);
            final String string = globalMainSettings.getString("proxy_ip", "");
            final String string2 = globalMainSettings.getString("proxy_secret", "");
            if (this.promoDialogId != 0 && this.promoDialogType == PROMO_TYPE_PROXY && (str = this.proxyDialogAddress) != null) {
                if (!str.equals(string + string2)) {
                    z2 = true;
                }
            }
            final int i = this.lastCheckPromoId + 1;
            this.lastCheckPromoId = i;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_help_getPromoData
                public static int constructor = -1063816159;

                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i2, boolean z3) {
                    return TLRPC$help_PromoData.TLdeserialize(abstractSerializedData, i2, z3);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(constructor);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda280
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkPromoInfoInternal$143(i, string, string2, tLObject, tLRPC$TL_error);
                }
            });
            if (!z2) {
                return;
            }
            this.promoDialogId = 0L;
            this.proxyDialogAddress = null;
            this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
            getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda13(this));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:51:0x0065, code lost:
        r2 = false;
     */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:12:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:21:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0100  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0111  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00f7  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00a2  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkPromoInfoInternal$143(final int i, String str, String str2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final long j;
        boolean z;
        boolean z2;
        String str3;
        String str4;
        boolean z3;
        if (i != this.lastCheckPromoId) {
            return;
        }
        if (tLObject instanceof TLRPC$TL_help_promoDataEmpty) {
            this.nextPromoInfoCheckTime = ((TLRPC$TL_help_promoDataEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_promoData) {
            final TLRPC$TL_help_promoData tLRPC$TL_help_promoData = (TLRPC$TL_help_promoData) tLObject;
            TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
            long j2 = tLRPC$Peer.user_id;
            if (j2 == 0) {
                long j3 = tLRPC$Peer.chat_id;
                if (j3 != 0) {
                    long j4 = -j3;
                    int i2 = 0;
                    while (true) {
                        if (i2 >= tLRPC$TL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i2);
                        if (tLRPC$Chat.id != tLRPC$TL_help_promoData.peer.chat_id) {
                            i2++;
                        } else if (tLRPC$Chat.kicked || tLRPC$Chat.restricted) {
                            z2 = true;
                        }
                    }
                    z = z2;
                    j = j4;
                } else {
                    long j5 = -tLRPC$Peer.channel_id;
                    int i3 = 0;
                    while (true) {
                        if (i3 >= tLRPC$TL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat2 = tLRPC$TL_help_promoData.chats.get(i3);
                        if (tLRPC$Chat2.id != tLRPC$TL_help_promoData.peer.channel_id) {
                            i3++;
                        } else if (tLRPC$Chat2.kicked || tLRPC$Chat2.restricted) {
                            j = j5;
                            z = true;
                        }
                    }
                    j = j5;
                }
                this.promoDialogId = j;
                if (!tLRPC$TL_help_promoData.proxy) {
                    this.promoDialogType = PROMO_TYPE_PROXY;
                } else if (!TextUtils.isEmpty(tLRPC$TL_help_promoData.psa_type)) {
                    this.promoDialogType = PROMO_TYPE_PSA;
                    this.promoPsaType = tLRPC$TL_help_promoData.psa_type;
                } else {
                    this.promoDialogType = PROMO_TYPE_OTHER;
                }
                this.proxyDialogAddress = str + str2;
                this.promoPsaMessage = tLRPC$TL_help_promoData.psa_message;
                this.nextPromoInfoCheckTime = tLRPC$TL_help_promoData.expires;
                SharedPreferences.Editor edit = getGlobalMainSettings().edit();
                edit.putLong("proxy_dialog", this.promoDialogId);
                edit.putString("proxyDialogAddress", this.proxyDialogAddress);
                edit.putInt("promo_dialog_type", this.promoDialogType);
                str3 = this.promoPsaMessage;
                if (str3 == null) {
                    edit.putString("promo_psa_message", str3);
                } else {
                    edit.remove("promo_psa_message");
                }
                str4 = this.promoPsaType;
                if (str4 == null) {
                    edit.putString("promo_psa_type", str4);
                } else {
                    edit.remove("promo_psa_type");
                }
                edit.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
                edit.commit();
                if (!z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda94
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$checkPromoInfoInternal$142(j, tLRPC$TL_help_promoData, i);
                        }
                    });
                }
                z3 = z;
                if (!z3) {
                    return;
                }
                this.promoDialogId = 0L;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                this.checkingPromoInfoRequestId = 0;
                this.checkingPromoInfo = false;
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda13(this));
                return;
            }
            j = j2;
            z = false;
            this.promoDialogId = j;
            if (!tLRPC$TL_help_promoData.proxy) {
            }
            this.proxyDialogAddress = str + str2;
            this.promoPsaMessage = tLRPC$TL_help_promoData.psa_message;
            this.nextPromoInfoCheckTime = tLRPC$TL_help_promoData.expires;
            SharedPreferences.Editor edit2 = getGlobalMainSettings().edit();
            edit2.putLong("proxy_dialog", this.promoDialogId);
            edit2.putString("proxyDialogAddress", this.proxyDialogAddress);
            edit2.putInt("promo_dialog_type", this.promoDialogType);
            str3 = this.promoPsaMessage;
            if (str3 == null) {
            }
            str4 = this.promoPsaType;
            if (str4 == null) {
            }
            edit2.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
            edit2.commit();
            if (!z) {
            }
            z3 = z;
            if (!z3) {
            }
        } else {
            this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        z3 = true;
        if (!z3) {
        }
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$142(final long j, final TLRPC$TL_help_promoData tLRPC$TL_help_promoData, final int i) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null && j != tLRPC$Dialog.id) {
            removePromoDialog();
        }
        TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
        this.promoDialog = tLRPC$Dialog2;
        if (tLRPC$Dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs(null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            return;
        }
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int i2 = 0; i2 < tLRPC$TL_help_promoData.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$TL_help_promoData.users.get(i2);
            longSparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$TL_help_promoData.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i3);
            longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
        if (tLRPC$Peer.user_id != 0) {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerUser;
            long j2 = tLRPC$TL_help_promoData.peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User tLRPC$User2 = (TLRPC$User) longSparseArray.get(j2);
            if (tLRPC$User2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$User2.access_hash;
            }
        } else if (tLRPC$Peer.chat_id != 0) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChat;
            long j3 = tLRPC$TL_help_promoData.peer.chat_id;
            tLRPC$TL_inputPeerChat.chat_id = j3;
            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray2.get(j3);
            if (tLRPC$Chat2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat2.access_hash;
            }
        } else {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
            long j4 = tLRPC$TL_help_promoData.peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j4;
            TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray2.get(j4);
            if (tLRPC$Chat3 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat3.access_hash;
            }
        }
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda282
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkPromoInfoInternal$141(i, tLRPC$TL_help_promoData, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$141(int i, final TLRPC$TL_help_promoData tLRPC$TL_help_promoData, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (i != this.lastCheckPromoId) {
            return;
        }
        this.checkingPromoInfoRequestId = 0;
        final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
        if (tLRPC$TL_messages_peerDialogs != null && !tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
            getMessagesStorage().putUsersAndChats(tLRPC$TL_help_promoData.users, tLRPC$TL_help_promoData.chats, true, true);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
            tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
            tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
            tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
            getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda179
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$139(tLRPC$TL_help_promoData, tLRPC$TL_messages_peerDialogs, j);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda11
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$140();
                }
            });
        }
        this.checkingPromoInfo = false;
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$139(TLRPC$TL_help_promoData tLRPC$TL_help_promoData, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, long j) {
        Integer num = 0;
        putUsers(tLRPC$TL_help_promoData.users, false);
        putChats(tLRPC$TL_help_promoData.chats, false);
        putUsers(tLRPC$TL_messages_peerDialogs.users, false);
        putChats(tLRPC$TL_messages_peerDialogs.chats, false);
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j2 = tLRPC$Dialog.id;
            if (j2 < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j2));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
        }
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = tLRPC$Dialog2;
        tLRPC$Dialog2.id = j;
        tLRPC$Dialog2.folder_id = 0;
        if (DialogObject.isChannel(tLRPC$Dialog2)) {
            LongSparseIntArray longSparseIntArray = this.channelsPts;
            TLRPC$Dialog tLRPC$Dialog3 = this.promoDialog;
            longSparseIntArray.put(-tLRPC$Dialog3.id, tLRPC$Dialog3.pts);
        }
        Integer num2 = this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num2 == null) {
            num2 = num;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num2.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer num3 = this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num3 != null) {
            num = num3;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num.intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tLRPC$TL_messages_peerDialogs.messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i2);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_messages_peerDialogs.messages.get(0), (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, false, true);
            ArrayList<MessageObject> arrayList = this.dialogMessage.get(j);
            if (arrayList == null) {
                arrayList = new ArrayList<>(1);
            }
            if (arrayList.size() > 0 && arrayList.get(0) != null && arrayList.get(0).hasValidGroupId() && arrayList.get(0).getGroupIdForUse() != messageObject.getGroupIdForUse()) {
                arrayList.clear();
            }
            arrayList.add(messageObject);
            this.dialogMessage.put(j, arrayList);
            TLRPC$Dialog tLRPC$Dialog4 = this.promoDialog;
            if (tLRPC$Dialog4.last_message_date == 0) {
                tLRPC$Dialog4.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$140() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (j < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs(null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public void removePromoDialog() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog == null) {
            return;
        }
        long j = tLRPC$Dialog.id;
        if (j < 0) {
            TLRPC$Chat chat = getChat(Long.valueOf(-j));
            if (ChatObject.isNotInChat(chat) || chat.restricted) {
                removeDialog(this.promoDialog);
            }
        } else {
            removeDialog(tLRPC$Dialog);
        }
        this.promoDialog = null;
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public boolean isPromoDialog(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        return tLRPC$Dialog != null && tLRPC$Dialog.id == j && (!z || this.isLeftPromoChannel);
    }

    private String getUserNameForTyping(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return "";
        }
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            return tLRPC$User.first_name;
        }
        String str2 = tLRPC$User.last_name;
        return (str2 == null || str2.length() <= 0) ? "" : tLRPC$User.last_name;
    }

    private void updatePrintingStrings() {
        Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it;
        Iterator<Map.Entry<Integer, ArrayList<PrintingUser>>> it2;
        String formatString;
        int i;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it3 = this.printingUsers.entrySet().iterator();
        while (it3.hasNext()) {
            Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> next = it3.next();
            Long key = next.getKey();
            boolean isEncryptedDialog = DialogObject.isEncryptedDialog(key.longValue());
            Iterator<Map.Entry<Integer, ArrayList<PrintingUser>>> it4 = next.getValue().entrySet().iterator();
            while (it4.hasNext()) {
                Map.Entry<Integer, ArrayList<PrintingUser>> next2 = it4.next();
                Integer key2 = next2.getKey();
                ArrayList<PrintingUser> value = next2.getValue();
                SparseArray sparseArray = new SparseArray();
                SparseArray sparseArray2 = new SparseArray();
                longSparseArray.put(key.longValue(), sparseArray);
                longSparseArray2.put(key.longValue(), sparseArray2);
                if (key.longValue() > 0 || isEncryptedDialog || value.size() == 1) {
                    it = it3;
                    it2 = it4;
                    PrintingUser printingUser = value.get(0);
                    TLRPC$User user = getUser(Long.valueOf(printingUser.userId));
                    if (user != null) {
                        TLRPC$SendMessageAction tLRPC$SendMessageAction = printingUser.action;
                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordAudioAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("RecordingAudio", R.string.RecordingAudio));
                            }
                            sparseArray2.put(key2.intValue(), 1);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordRoundAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsRecordingRound", R.string.IsRecordingRound, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("RecordingRound", R.string.RecordingRound));
                            }
                            sparseArray2.put(key2.intValue(), 4);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadRoundAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus));
                            }
                            sparseArray2.put(key2.intValue(), 4);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadAudioAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingAudio", R.string.IsSendingAudio, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingAudio", R.string.SendingAudio));
                            }
                            sparseArray2.put(key2.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadVideoAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus));
                            }
                            sparseArray2.put(key2.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordVideoAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsRecordingVideo", R.string.IsRecordingVideo, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("RecordingVideoStatus", R.string.RecordingVideoStatus));
                            }
                            sparseArray2.put(key2.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadDocumentAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingFile", R.string.IsSendingFile, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingFile", R.string.SendingFile));
                            }
                            sparseArray2.put(key2.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadPhotoAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingPhoto", R.string.IsSendingPhoto, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingPhoto", R.string.SendingPhoto));
                            }
                            sparseArray2.put(key2.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGamePlayAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSendingGame", R.string.IsSendingGame, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SendingGame", R.string.SendingGame));
                            }
                            sparseArray2.put(key2.intValue(), 3);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGeoLocationAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSelectingLocation", R.string.IsSelectingLocation, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SelectingLocation", R.string.SelectingLocation));
                            }
                            sparseArray2.put(key2.intValue(), 0);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseContactAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsSelectingContact", R.string.IsSelectingContact, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("SelectingContact", R.string.SelectingContact));
                            }
                            sparseArray2.put(key2.intValue(), 0);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteractionSeen) {
                            String str = ((TLRPC$TL_sendMessageEmojiInteractionSeen) tLRPC$SendMessageAction).emoticon;
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                formatString = LocaleController.formatString("IsEnjoyngAnimations", R.string.IsEnjoyngAnimations, getUserNameForTyping(user), str);
                            } else {
                                formatString = LocaleController.formatString("EnjoyngAnimations", R.string.EnjoyngAnimations, str);
                            }
                            sparseArray.put(key2.intValue(), formatString);
                            sparseArray2.put(key2.intValue(), 5);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseStickerAction) {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsChoosingSticker", R.string.IsChoosingSticker, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("ChoosingSticker", R.string.ChoosingSticker));
                            }
                            sparseArray2.put(key2.intValue(), 5);
                        } else {
                            if (key.longValue() < 0 && !isEncryptedDialog) {
                                sparseArray.put(key2.intValue(), LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(key2.intValue(), LocaleController.getString("Typing", R.string.Typing));
                            }
                            sparseArray2.put(key2.intValue(), 0);
                        }
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    Iterator<PrintingUser> it5 = value.iterator();
                    int i2 = 0;
                    while (true) {
                        if (!it5.hasNext()) {
                            it = it3;
                            it2 = it4;
                            break;
                        }
                        it = it3;
                        it2 = it4;
                        TLRPC$User user2 = getUser(Long.valueOf(it5.next().userId));
                        if (user2 != null) {
                            if (sb.length() != 0) {
                                sb.append(", ");
                            }
                            sb.append(getUserNameForTyping(user2));
                            i2++;
                        }
                        if (i2 == 2) {
                            break;
                        }
                        it3 = it;
                        it4 = it2;
                    }
                    if (sb.length() != 0) {
                        if (i2 == 1) {
                            sparseArray.put(key2.intValue(), LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, sb.toString()));
                        } else if (value.size() > 2) {
                            try {
                                sparseArray.put(key2.intValue(), String.format(LocaleController.getPluralString("AndMoreTypingGroup", value.size() - 2), sb.toString(), Integer.valueOf(value.size() - 2)));
                            } catch (Exception unused) {
                                sparseArray.put(key2.intValue(), "LOC_ERR: AndMoreTypingGroup");
                            }
                        } else {
                            i = 0;
                            sparseArray.put(key2.intValue(), LocaleController.formatString("AreTypingGroup", R.string.AreTypingGroup, sb.toString()));
                            sparseArray2.put(key2.intValue(), Integer.valueOf(i));
                        }
                        i = 0;
                        sparseArray2.put(key2.intValue(), Integer.valueOf(i));
                    }
                }
                it3 = it;
                it4 = it2;
            }
        }
        this.lastPrintingStringCount = longSparseArray.size();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$144(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$updatePrintingStrings$144(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    /* renamed from: cancelTyping */
    public void lambda$sendTyping$147(int i, long j, int i2) {
        LongSparseArray<SparseArray<Boolean>> longSparseArray;
        SparseArray<Boolean> sparseArray;
        if (i >= 0) {
            LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i >= longSparseArrayArr.length || longSparseArrayArr[i] == null || (sparseArray = (longSparseArray = longSparseArrayArr[i]).get(j)) == null) {
                return;
            }
            sparseArray.remove(i2);
            if (sparseArray.size() != 0) {
                return;
            }
            longSparseArray.remove(j);
        }
    }

    public boolean sendTyping(long j, int i, int i2, int i3) {
        return sendTyping(j, i, i2, null, i3);
    }

    public boolean sendTyping(final long j, final int i, final int i2, String str, int i3) {
        TLRPC$Chat chat;
        if (i2 < 0 || i2 >= this.sendingTypings.length || j == 0) {
            return false;
        }
        if (j < 0) {
            long j2 = -j;
            if (ChatObject.getSendAsPeerId(getChat(Long.valueOf(j2)), getChatFull(j2)) != UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId()) {
                return false;
            }
        } else {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                TLRPC$UserStatus tLRPC$UserStatus = user.status;
                if (tLRPC$UserStatus != null && tLRPC$UserStatus.expires != -100 && !this.onlinePrivacy.containsKey(Long.valueOf(user.id))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        }
        LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray<SparseArray<Boolean>> longSparseArray = longSparseArrayArr[i2];
        if (longSparseArray == null) {
            longSparseArray = new LongSparseArray<>();
            longSparseArrayArr[i2] = longSparseArray;
        }
        SparseArray<Boolean> sparseArray = longSparseArray.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            longSparseArray.put(j, sparseArray);
        }
        if (sparseArray.get(i) != null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$TL_messages_setTyping tLRPC$TL_messages_setTyping = new TLRPC$TL_messages_setTyping();
            if (i != 0) {
                tLRPC$TL_messages_setTyping.top_msg_id = i;
                tLRPC$TL_messages_setTyping.flags |= 1;
            }
            TLRPC$InputPeer inputPeer = getInputPeer(j);
            tLRPC$TL_messages_setTyping.peer = inputPeer;
            if (((inputPeer instanceof TLRPC$TL_inputPeerChannel) && ((chat = getChat(Long.valueOf(inputPeer.channel_id))) == null || !chat.megagroup)) || tLRPC$TL_messages_setTyping.peer == null) {
                return false;
            }
            if (i2 == 0) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageTypingAction();
            } else if (i2 == 1) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordAudioAction();
            } else if (i2 == 2) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageCancelAction();
            } else if (i2 == 3) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadDocumentAction();
            } else if (i2 == 4) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadPhotoAction();
            } else if (i2 == 5) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadVideoAction();
            } else if (i2 == 6) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageGamePlayAction();
            } else if (i2 == 7) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordRoundAction();
            } else if (i2 == 8) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadRoundAction();
            } else if (i2 == 9) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadAudioAction();
            } else if (i2 == 10) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageChooseStickerAction();
            } else if (i2 == 11) {
                TLRPC$TL_sendMessageEmojiInteractionSeen tLRPC$TL_sendMessageEmojiInteractionSeen = new TLRPC$TL_sendMessageEmojiInteractionSeen();
                tLRPC$TL_sendMessageEmojiInteractionSeen.emoticon = str;
                tLRPC$TL_messages_setTyping.action = tLRPC$TL_sendMessageEmojiInteractionSeen;
            }
            sparseArray.put(i, Boolean.TRUE);
            int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_setTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda277
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$sendTyping$146(i2, j, i, tLObject, tLRPC$TL_error);
                }
            }, 2);
            if (i3 != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i3);
            }
        } else if (i2 != 0) {
            return false;
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr != null && bArr.length > 1 && (encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                TLRPC$TL_messages_setEncryptedTyping tLRPC$TL_messages_setEncryptedTyping = new TLRPC$TL_messages_setEncryptedTyping();
                TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                tLRPC$TL_messages_setEncryptedTyping.peer = tLRPC$TL_inputEncryptedChat;
                tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
                tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tLRPC$TL_messages_setEncryptedTyping.typing = true;
                sparseArray.put(i, Boolean.TRUE);
                int sendRequest2 = getConnectionsManager().sendRequest(tLRPC$TL_messages_setEncryptedTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda278
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$sendTyping$148(i2, j, i, tLObject, tLRPC$TL_error);
                    }
                }, 2);
                if (i3 != 0) {
                    getConnectionsManager().bindRequestToGuid(sendRequest2, i3);
                }
            }
        }
        return true;
    }

    public /* synthetic */ void lambda$sendTyping$146(final int i, final long j, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$145(i, j, i2);
            }
        });
    }

    public /* synthetic */ void lambda$sendTyping$148(final int i, final long j, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda49
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$147(i, j, i2);
            }
        });
    }

    public void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC$Message> arrayList) {
        int i = 0;
        int i2 = this.deletedHistory.get(j, 0);
        if (i2 == 0) {
            return;
        }
        int size = arrayList.size();
        while (i < size) {
            if (arrayList.get(i).id <= i2) {
                arrayList.remove(i);
                i--;
                size--;
            }
            i++;
        }
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, boolean z3) {
        loadMessages(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, i9, i11, i9 != 0 ? i10 : 0, 0, 0, false, 0, z3);
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, boolean z3, int i14, boolean z4) {
        loadMessagesInternal(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, z3, i14, true, true, z4);
    }

    public void loadMessagesInternal(final long j, final long j2, final boolean z, final int i, final int i2, final int i3, boolean z2, final int i4, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10, final int i11, final int i12, final int i13, final boolean z3, final int i14, boolean z4, final boolean z5, final boolean z6) {
        MessagesController messagesController;
        TLRPC$TL_forumTopic findTopic;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j + " topic_id " + i9 + " count " + i + " max_id " + i2 + " cache " + z2 + " mindate = " + i4 + " guid " + i5 + " load_type " + i6 + " last_message_id " + i7 + " mode " + i8 + " index " + i10 + " firstUnread " + i11 + " unread_count " + i12 + " last_date " + i13 + " queryFromServer " + z3 + " isTopic " + z6);
        }
        if ((i9 == 0 || z6) && i8 != 2 && (z2 || DialogObject.isEncryptedDialog(j))) {
            getMessagesStorage().getMessages(j, j2, z, i, i2, i3, i4, i5, i6, i8 == 1, i9, i10, z5, z6);
        } else if (i9 != 0) {
            if (z4 && z6 && i6 == 2 && i7 == 0 && (findTopic = this.topicsController.findTopic(-j, i9)) != null) {
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, findTopic.top_message, 0, i9, i10, i11, findTopic.unread_count, i13, z3, findTopic.unread_mentions_count, false, z5, z6);
            } else if (i8 != 0) {
            } else {
                final TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
                tLRPC$TL_messages_getReplies.peer = getInputPeer(j);
                tLRPC$TL_messages_getReplies.msg_id = i9;
                tLRPC$TL_messages_getReplies.offset_date = i3;
                if (i6 == 4) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i) + 5;
                } else if (i6 == 3) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i) / 2;
                } else if (i6 == 1) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i) - 1;
                } else if (i6 == 2 && i2 != 0) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i) + 10;
                } else if (j < 0 && i2 != 0) {
                    messagesController = this;
                    if (ChatObject.isChannel(messagesController.getChat(Long.valueOf(-j)))) {
                        tLRPC$TL_messages_getReplies.add_offset = -1;
                        tLRPC$TL_messages_getReplies.limit++;
                    }
                    tLRPC$TL_messages_getReplies.limit = i;
                    tLRPC$TL_messages_getReplies.offset_id = i2;
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda274
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$150(i, i2, i3, i11, i6, j, j2, i5, i7, i12, i13, i9, i10, z3, i14, z5, z6, tLRPC$TL_messages_getReplies, tLObject, tLRPC$TL_error);
                        }
                    }), i5);
                }
                messagesController = this;
                tLRPC$TL_messages_getReplies.limit = i;
                tLRPC$TL_messages_getReplies.offset_id = i2;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda274
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$150(i, i2, i3, i11, i6, j, j2, i5, i7, i12, i13, i9, i10, z3, i14, z5, z6, tLRPC$TL_messages_getReplies, tLObject, tLRPC$TL_error);
                    }
                }), i5);
            }
        } else if (i8 == 2) {
        } else {
            if (i8 == 1) {
                TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory = new TLRPC$TL_messages_getScheduledHistory();
                tLRPC$TL_messages_getScheduledHistory.peer = getInputPeer(j);
                tLRPC$TL_messages_getScheduledHistory.hash = i4;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getScheduledHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda275
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$151(i2, i3, j, j2, i, i5, i11, i7, i12, i13, i6, i8, i9, i10, z3, i14, z5, z6, tLObject, tLRPC$TL_error);
                    }
                }), i5);
            } else if (z4 && ((i6 == 3 || i6 == 2) && i7 == 0)) {
                final TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$InputPeer inputPeer = getInputPeer(j);
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda308
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$153(j, j2, z, i, i2, i3, i4, i5, i6, i9, i10, i11, i13, z3, z5, z6, tLRPC$TL_messages_getPeerDialogs, tLObject, tLRPC$TL_error);
                    }
                });
            } else {
                final TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getInputPeer(j);
                if (i6 == 4) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) + 5;
                } else if (i6 == 3) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) / 2;
                } else if (i6 == 1) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) - 1;
                } else if (i6 == 2 && i2 != 0) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) + 6;
                } else if (j < 0 && i2 != 0) {
                    if (ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                        tLRPC$TL_messages_getHistory.add_offset = -1;
                        tLRPC$TL_messages_getHistory.limit++;
                    }
                    tLRPC$TL_messages_getHistory.limit = i;
                    tLRPC$TL_messages_getHistory.offset_id = i2;
                    tLRPC$TL_messages_getHistory.offset_date = i3;
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda300
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$155(j, i, i2, i3, j2, i5, i11, i7, i12, i13, i6, i9, i10, z3, i14, z5, z6, tLRPC$TL_messages_getHistory, tLObject, tLRPC$TL_error);
                        }
                    }), i5);
                }
                tLRPC$TL_messages_getHistory.limit = i;
                tLRPC$TL_messages_getHistory.offset_id = i2;
                tLRPC$TL_messages_getHistory.offset_date = i3;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda300
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$155(j, i, i2, i3, j2, i5, i11, i7, i12, i13, i6, i9, i10, z3, i14, z5, z6, tLRPC$TL_messages_getHistory, tLObject, tLRPC$TL_error);
                    }
                }), i5);
            }
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$150(int i, int i2, int i3, int i4, int i5, long j, long j2, final int i6, int i7, int i8, int i9, int i10, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (i3 != 0) {
                    int i15 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i3) {
                            i15 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    i13 = i15;
                    i14 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2, z3);
                    return;
                } else if (i4 != 0) {
                    if (i5 == 2 && i2 > 0) {
                        for (int size2 = tLRPC$messages_Messages.messages.size() - 1; size2 >= 0; size2--) {
                            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages.messages.get(size2);
                            int i16 = tLRPC$Message2.id;
                            if (i16 > i4 && !tLRPC$Message2.out) {
                                i13 = i2;
                                i14 = i16;
                                break;
                            }
                        }
                    }
                    i13 = i2;
                    i14 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2, z3);
                    return;
                }
            }
            i13 = i2;
            i14 = 0;
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2, z3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda60
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$149(i6, tLRPC$TL_messages_getReplies, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$149(int i, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getReplies, tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$loadMessagesInternal$151(int i, int i2, long j, long j2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, boolean z, int i13, boolean z2, boolean z3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i14;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified) {
                return;
            }
            if (i2 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i14 = i;
            } else {
                int i15 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i2) {
                        i15 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i14 = i15;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i3, i14, i2, false, i4, i5, i6, i7, i8, i9, false, i10, i11, i12, z, i13, z2, z3);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$153(long j, long j2, boolean z, int i, int i2, int i3, int i4, final int i5, int i6, int i7, int i8, int i9, int i10, boolean z2, boolean z3, boolean z4, final TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
                if (tLRPC$Dialog.top_message != 0) {
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                    tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                    tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                    tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                    getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                }
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, tLRPC$Dialog.top_message, 0, i7, i8, i9, tLRPC$Dialog.unread_count, i10, z2, tLRPC$Dialog.unread_mentions_count, false, z3, z4);
            }
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$152(i5, tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$152(int i, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$loadMessagesInternal$155(long j, int i, int i2, int i3, long j2, final int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i3 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i2;
            } else {
                int i14 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i3) {
                        i14 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i14;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, 0, i10, i11, z, i12, z2, z3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda58
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$154(i4, tLRPC$TL_messages_getHistory, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$154(int i, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getHistory, tLRPC$TL_error);
    }

    public void reloadWebPages(final long j, HashMap<String, ArrayList<MessageObject>> hashMap, final boolean z) {
        final HashMap<String, ArrayList<MessageObject>> hashMap2 = z ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        final LongSparseArray<ArrayList<MessageObject>> longSparseArray = z ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry<String, ArrayList<MessageObject>> entry : hashMap.entrySet()) {
            final String key = entry.getKey();
            ArrayList<MessageObject> value = entry.getValue();
            ArrayList<MessageObject> arrayList = hashMap2.get(key);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                hashMap2.put(key, arrayList);
            }
            arrayList.addAll(value);
            TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
            tLRPC$TL_messages_getWebPagePreview.message = key;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda329
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$reloadWebPages$157(hashMap2, key, longSparseArray, j, z, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadWebPages$157(final HashMap hashMap, final String str, final LongSparseArray longSparseArray, final long j, final boolean z, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadWebPages$156(hashMap, str, tLObject, longSparseArray, j, z);
            }
        });
    }

    public /* synthetic */ void lambda$reloadWebPages$156(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, boolean z) {
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList == null) {
            return;
        }
        TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
        if (!(tLObject instanceof TLRPC$TL_messageMediaWebPage)) {
            for (int i = 0; i < arrayList.size(); i++) {
                ((MessageObject) arrayList.get(i)).messageOwner.media.webpage = new TLRPC$TL_webPageEmpty();
                tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i)).messageOwner);
            }
        } else {
            TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject;
            TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
            if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                for (int i2 = 0; i2 < arrayList.size(); i2++) {
                    ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = tLRPC$TL_messageMediaWebPage.webpage;
                    if (i2 == 0) {
                        ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i2)).messageOwner);
                    }
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
                }
            } else {
                longSparseArray.put(tLRPC$WebPage.id, arrayList);
            }
        }
        if (tLRPC$TL_messages_messages.messages.isEmpty()) {
            return;
        }
        getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, j, -2, 0, false, z, 0);
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Removed duplicated region for block: B:103:0x0382  */
    /* JADX WARN: Removed duplicated region for block: B:151:0x04a5  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x034b  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x013e  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x010e  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x019c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0232 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0247 A[LOOP:0: B:42:0x023f->B:44:0x0247, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0260 A[LOOP:1: B:47:0x0258->B:49:0x0260, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x027a  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0351  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processLoadedMessages(final TLRPC$messages_Messages tLRPC$messages_Messages, final int i, final long j, final long j2, final int i2, final int i3, final int i4, final boolean z, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10, final boolean z2, final int i11, final int i12, final int i13, final boolean z3, final int i14, final boolean z4, final boolean z5) {
        int i15;
        boolean z6;
        boolean z7;
        boolean z8;
        TLRPC$messages_Messages tLRPC$messages_Messages2;
        int i16;
        int i17;
        int size;
        long j3;
        char c;
        int i18;
        boolean z9;
        boolean z10;
        TLRPC$User tLRPC$User;
        int i19;
        TLRPC$Message tLRPC$Message;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processLoadedMessages size " + tLRPC$messages_Messages.messages.size() + " in chat " + j + " topic_id " + i12 + " count " + i2 + " max_id " + i3 + " cache " + z + " guid " + i5 + " load_type " + i10 + " last_message_id " + i7 + " index " + i13 + " firstUnread " + i6 + " unread_count " + i8 + " last_date " + i9 + " queryFromServer " + z3 + " isTopic" + z5);
        }
        long elapsedRealtime = SystemClock.elapsedRealtime();
        if (tLRPC$messages_Messages instanceof TLRPC$TL_messages_channelMessages) {
            long j4 = -j;
            if (i11 == 0 && i12 == 0 && this.channelsPts.get(j4) == 0 && getMessagesStorage().getChannelPtsSync(j4) == 0) {
                this.channelsPts.put(j4, tLRPC$messages_Messages.pts);
                if (this.needShortPollChannels.indexOfKey(j4) >= 0 && this.shortPollChannels.indexOfKey(j4) < 0) {
                    i15 = 1;
                    getChannelDifference(j4, 2, 0L, null);
                } else {
                    i15 = 1;
                    getChannelDifference(j4);
                }
                z6 = true;
                if (!z) {
                    ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
                }
                boolean z11 = i4 != 0 && i3 == 0;
                if (i11 != i15) {
                    z7 = SystemClock.elapsedRealtime() - this.lastScheduledServerQueryTime.get(j, 0L).longValue() > 60000;
                } else {
                    z7 = i == 0 && (!z11 || SystemClock.elapsedRealtime() - this.lastServerQueryTime.get(j, 0L).longValue() > 60000 || (z && z5));
                    if (i11 == 0 && z && j < 0 && !this.dialogs_dict.containsKey(j) && SystemClock.elapsedRealtime() - this.lastServerQueryTime.get(j, 0L).longValue() > 86400000) {
                        tLRPC$messages_Messages.messages.clear();
                        z8 = true;
                        if (!DialogObject.isEncryptedDialog(j) || !z || !z8) {
                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                        } else {
                            if (i11 != 2) {
                                if (i11 == i15) {
                                    this.lastScheduledServerQueryTime.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
                                    int size2 = tLRPC$messages_Messages.messages.size();
                                    long j5 = 0;
                                    for (int i20 = 0; i20 < size2; i20++) {
                                        int i21 = tLRPC$messages_Messages.messages.get(i20).id;
                                        if (i21 >= 0) {
                                            j5 = MediaDataController.calcHash(MediaDataController.calcHash(MediaDataController.calcHash(j5, i21), tLRPC$Message.edit_date), tLRPC$Message.date);
                                        }
                                    }
                                    i19 = ((int) j5) - i15;
                                    final int i22 = i19;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda80
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesController.this.lambda$processLoadedMessages$158(j, j2, i2, i10, z3, i6, i3, i4, i22, i5, i7, i11, i12, i13, i8, i9, i14, z4, z5);
                                        }
                                    });
                                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                    if (tLRPC$messages_Messages2.messages.isEmpty()) {
                                        return;
                                    }
                                } else {
                                    this.lastServerQueryTime.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
                                }
                            }
                            i19 = 0;
                            final int i222 = i19;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda80
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processLoadedMessages$158(j, j2, i2, i10, z3, i6, i3, i4, i222, i5, i7, i11, i12, i13, i8, i9, i14, z4, z5);
                                }
                            });
                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                            if (tLRPC$messages_Messages2.messages.isEmpty()) {
                            }
                        }
                        LongSparseArray longSparseArray = new LongSparseArray();
                        LongSparseArray longSparseArray2 = new LongSparseArray();
                        for (i16 = 0; i16 < tLRPC$messages_Messages2.users.size(); i16++) {
                            TLRPC$User tLRPC$User2 = tLRPC$messages_Messages2.users.get(i16);
                            longSparseArray.put(tLRPC$User2.id, tLRPC$User2);
                        }
                        for (i17 = 0; i17 < tLRPC$messages_Messages2.chats.size(); i17++) {
                            TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages2.chats.get(i17);
                            longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                        }
                        size = tLRPC$messages_Messages2.messages.size();
                        MessagesController messagesController = this;
                        if (!z) {
                            Integer num = messagesController.dialogs_read_inbox_max.get(Long.valueOf(j));
                            if (num == null) {
                                j3 = j;
                                z9 = false;
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j3));
                                messagesController.dialogs_read_inbox_max.put(Long.valueOf(j), num);
                            } else {
                                j3 = j;
                                z9 = false;
                            }
                            Integer num2 = messagesController.dialogs_read_outbox_max.get(Long.valueOf(j));
                            if (num2 == null) {
                                z10 = true;
                                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j3));
                                messagesController.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
                            } else {
                                z10 = true;
                            }
                            for (int i23 = 0; i23 < size; i23++) {
                                TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages2.messages.get(i23);
                                if (i11 == 0) {
                                    TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message2.action;
                                    if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                                        tLRPC$Message2.reply_markup = new TLRPC$TL_replyKeyboardHide();
                                        tLRPC$Message2.flags |= 64;
                                    }
                                    TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message2.action;
                                    if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                                        tLRPC$Message2.unread = z9;
                                        tLRPC$Message2.media_unread = z9;
                                    } else if (i12 == 0) {
                                        tLRPC$Message2.unread = (tLRPC$Message2.out ? num2 : num).intValue() < tLRPC$Message2.id;
                                    } else {
                                        tLRPC$Message2.unread = z10;
                                    }
                                }
                            }
                            if (i12 == 0 || z5) {
                                c = 0;
                                getMessagesStorage().putMessages(tLRPC$messages_Messages, j, i10, i3, z6, i11 == z10, i12);
                                if (z4 && DialogObject.isEncryptedDialog(j)) {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesController.this.lambda$processLoadedMessages$159(i5, tLRPC$messages_Messages, z, z2, i7);
                                        }
                                    });
                                    return;
                                }
                                final ArrayList<MessageObject> arrayList = new ArrayList<>();
                                final ArrayList arrayList2 = new ArrayList();
                                HashMap hashMap = new HashMap();
                                long j6 = 0;
                                i18 = 0;
                                while (i18 < size) {
                                    TLRPC$Message tLRPC$Message3 = tLRPC$messages_Messages2.messages.get(i18);
                                    tLRPC$Message3.dialog_id = j3;
                                    long elapsedRealtime2 = SystemClock.elapsedRealtime();
                                    int i24 = messagesController.currentAccount;
                                    int i25 = i18;
                                    HashMap hashMap2 = hashMap;
                                    MessageObject messageObject = new MessageObject(i24, tLRPC$Message3, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, false);
                                    messageObject.createStrippedThumb();
                                    long elapsedRealtime3 = (SystemClock.elapsedRealtime() - elapsedRealtime2) + j6;
                                    messageObject.scheduled = i11 == 1;
                                    arrayList.add(messageObject);
                                    if (z) {
                                        if (tLRPC$Message3.legacy && tLRPC$Message3.layer < 149) {
                                            arrayList2.add(Integer.valueOf(tLRPC$Message3.id));
                                        } else if ((MessageObject.getMedia(tLRPC$Message3) instanceof TLRPC$TL_messageMediaUnsupported) && MessageObject.getMedia(tLRPC$Message3).bytes != null && (MessageObject.getMedia(tLRPC$Message3).bytes.length == 0 || ((MessageObject.getMedia(tLRPC$Message3).bytes.length == 1 && MessageObject.getMedia(tLRPC$Message3).bytes[c] < 149) || (MessageObject.getMedia(tLRPC$Message3).bytes.length == 4 && Utilities.bytesToInt(MessageObject.getMedia(tLRPC$Message3).bytes) < 149)))) {
                                            arrayList2.add(Integer.valueOf(tLRPC$Message3.id));
                                        }
                                        if (MessageObject.getMedia(tLRPC$Message3) instanceof TLRPC$TL_messageMediaWebPage) {
                                            if ((MessageObject.getMedia(tLRPC$Message3).webpage instanceof TLRPC$TL_webPagePending) && MessageObject.getMedia(tLRPC$Message3).webpage.date <= getConnectionsManager().getCurrentTime()) {
                                                arrayList2.add(Integer.valueOf(tLRPC$Message3.id));
                                            } else if (MessageObject.getMedia(tLRPC$Message3).webpage instanceof TLRPC$TL_webPageUrlPending) {
                                                ArrayList arrayList3 = (ArrayList) hashMap2.get(MessageObject.getMedia(tLRPC$Message3).webpage.url);
                                                if (arrayList3 == null) {
                                                    arrayList3 = new ArrayList();
                                                    hashMap2.put(MessageObject.getMedia(tLRPC$Message3).webpage.url, arrayList3);
                                                }
                                                arrayList3.add(messageObject);
                                            }
                                        }
                                    }
                                    i18 = i25 + 1;
                                    j6 = elapsedRealtime3;
                                    hashMap = hashMap2;
                                    messagesController = this;
                                }
                                long j7 = j6;
                                final HashMap hashMap3 = hashMap;
                                getFileLoader().checkMediaExistance(arrayList);
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("process time = " + (SystemClock.elapsedRealtime() - elapsedRealtime) + " file time = " + j7 + " for dialog = " + j3);
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processLoadedMessages$161(tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList, i12, i5, i, z2, i7, i8, i9, i13, i3, i14, arrayList2, hashMap3);
                                    }
                                });
                            }
                        } else {
                            j3 = j;
                        }
                        c = 0;
                        if (z4) {
                        }
                        final ArrayList arrayList4 = new ArrayList<>();
                        final ArrayList arrayList22 = new ArrayList();
                        HashMap hashMap4 = new HashMap();
                        long j62 = 0;
                        i18 = 0;
                        while (i18 < size) {
                        }
                        long j72 = j62;
                        final HashMap hashMap32 = hashMap4;
                        getFileLoader().checkMediaExistance(arrayList4);
                        if (BuildVars.LOGS_ENABLED) {
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$processLoadedMessages$161(tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList4, i12, i5, i, z2, i7, i8, i9, i13, i3, i14, arrayList22, hashMap32);
                            }
                        });
                    }
                }
                z8 = z7;
                if (!DialogObject.isEncryptedDialog(j)) {
                }
                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                LongSparseArray longSparseArray3 = new LongSparseArray();
                LongSparseArray longSparseArray22 = new LongSparseArray();
                while (i16 < tLRPC$messages_Messages2.users.size()) {
                }
                while (i17 < tLRPC$messages_Messages2.chats.size()) {
                }
                size = tLRPC$messages_Messages2.messages.size();
                MessagesController messagesController2 = this;
                if (!z) {
                }
                c = 0;
                if (z4) {
                }
                final ArrayList arrayList42 = new ArrayList<>();
                final ArrayList arrayList222 = new ArrayList();
                HashMap hashMap42 = new HashMap();
                long j622 = 0;
                i18 = 0;
                while (i18 < size) {
                }
                long j722 = j622;
                final HashMap hashMap322 = hashMap42;
                getFileLoader().checkMediaExistance(arrayList42);
                if (BuildVars.LOGS_ENABLED) {
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$processLoadedMessages$161(tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList42, i12, i5, i, z2, i7, i8, i9, i13, i3, i14, arrayList222, hashMap322);
                    }
                });
            }
        }
        i15 = 1;
        z6 = false;
        if (!z) {
        }
        if (i4 != 0) {
        }
        if (i11 != i15) {
        }
        z8 = z7;
        if (!DialogObject.isEncryptedDialog(j)) {
        }
        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        LongSparseArray longSparseArray32 = new LongSparseArray();
        LongSparseArray longSparseArray222 = new LongSparseArray();
        while (i16 < tLRPC$messages_Messages2.users.size()) {
        }
        while (i17 < tLRPC$messages_Messages2.chats.size()) {
        }
        size = tLRPC$messages_Messages2.messages.size();
        MessagesController messagesController22 = this;
        if (!z) {
        }
        c = 0;
        if (z4) {
        }
        final ArrayList arrayList422 = new ArrayList<>();
        final ArrayList arrayList2222 = new ArrayList();
        HashMap hashMap422 = new HashMap();
        long j6222 = 0;
        i18 = 0;
        while (i18 < size) {
        }
        long j7222 = j6222;
        final HashMap hashMap3222 = hashMap422;
        getFileLoader().checkMediaExistance(arrayList422);
        if (BuildVars.LOGS_ENABLED) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedMessages$161(tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList422, i12, i5, i, z2, i7, i8, i9, i13, i3, i14, arrayList2222, hashMap3222);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedMessages$158(long j, long j2, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, int i14, boolean z2, boolean z3) {
        loadMessagesInternal(j, j2, false, i, (i2 != 2 || !z) ? i4 : i3, i5, false, i6, i7, i2, i8, i9, i10, i11, i3, i12, i13, z, i14, true, z2, z3);
    }

    public /* synthetic */ void lambda$processLoadedMessages$159(int i, TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, boolean z2, int i2) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(tLRPC$messages_Messages.messages.size()), Boolean.valueOf(z), Boolean.valueOf(z2), Integer.valueOf(i2));
    }

    public /* synthetic */ void lambda$processLoadedMessages$161(TLRPC$messages_Messages tLRPC$messages_Messages, final boolean z, final boolean z2, final int i, boolean z3, final int i2, int i3, final int i4, final long j, final ArrayList arrayList, int i5, final int i6, final int i7, final boolean z4, final int i8, final int i9, final int i10, final int i11, final int i12, final int i13, ArrayList arrayList2, HashMap hashMap) {
        int i14;
        int i15;
        int i16;
        int i17;
        boolean z5;
        MessagesController messagesController;
        int i18;
        long j2;
        HashMap hashMap2;
        putUsers(tLRPC$messages_Messages.users, z);
        putChats(tLRPC$messages_Messages.chats, z);
        if (tLRPC$messages_Messages.animatedEmoji != null && z2) {
            AnimatedEmojiDrawable.getDocumentFetcher(this.currentAccount).processDocuments(tLRPC$messages_Messages.animatedEmoji);
        }
        if (i == 1) {
            i16 = 0;
        } else {
            if (!z3 || i2 != 2) {
                i14 = i3;
                i15 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            } else {
                i15 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                for (int i19 = 0; i19 < tLRPC$messages_Messages.messages.size(); i19++) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i19);
                    if ((!tLRPC$Message.out || tLRPC$Message.from_scheduled) && (i17 = tLRPC$Message.id) > i3 && i17 < i15) {
                        i15 = i17;
                    }
                }
                i14 = i3;
            }
            i16 = i15 == Integer.MAX_VALUE ? i14 : i15;
        }
        if (i == 1 && i4 == 1) {
            getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()));
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            final int i20 = i16;
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i == 1, i5, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda214
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedMessages$160(z2, i6, i7, z, z4, i8, j, i4, arrayList, i20, i9, i10, i2, i11, i12, i13, i);
                }
            });
            z5 = true;
        } else {
            z5 = true;
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z), Integer.valueOf(i16), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i2), Boolean.valueOf(z4), Integer.valueOf(i6), Integer.valueOf(i11), Integer.valueOf(i12), Integer.valueOf(i13), Integer.valueOf(i));
        }
        if (!arrayList2.isEmpty()) {
            i18 = i;
            messagesController = this;
            j2 = j;
            messagesController.reloadMessages(arrayList2, j2, i18 == z5);
        } else {
            messagesController = this;
            i18 = i;
            j2 = j;
        }
        if (!hashMap.isEmpty()) {
            if (i18 == z5) {
                hashMap2 = hashMap;
            } else {
                hashMap2 = hashMap;
                z5 = false;
            }
            messagesController.reloadWebPages(j2, hashMap2, z5);
        }
    }

    public /* synthetic */ void lambda$processLoadedMessages$160(boolean z, int i, int i2, boolean z2, boolean z3, int i3, long j, int i4, ArrayList arrayList, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12) {
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z2), Boolean.valueOf(z3), Integer.valueOf(i3));
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z2), Integer.valueOf(i5), Integer.valueOf(i3), Integer.valueOf(i6), Integer.valueOf(i7), Integer.valueOf(i8), Boolean.valueOf(z3), Integer.valueOf(i), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12));
        }
    }

    public void loadHintDialogs() {
        if (!this.hintDialogs.isEmpty() || TextUtils.isEmpty(this.installReferer)) {
            return;
        }
        TLRPC$TL_help_getRecentMeUrls tLRPC$TL_help_getRecentMeUrls = new TLRPC$TL_help_getRecentMeUrls();
        tLRPC$TL_help_getRecentMeUrls.referer = this.installReferer;
        getConnectionsManager().sendRequest(tLRPC$TL_help_getRecentMeUrls, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda240
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadHintDialogs$163(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadHintDialogs$163(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda146
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadHintDialogs$162(tLObject);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadHintDialogs$162(TLObject tLObject) {
        TLRPC$TL_help_recentMeUrls tLRPC$TL_help_recentMeUrls = (TLRPC$TL_help_recentMeUrls) tLObject;
        putUsers(tLRPC$TL_help_recentMeUrls.users, false);
        putChats(tLRPC$TL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tLRPC$TL_help_recentMeUrls.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC$TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC$TL_dialogFolder) tLRPC$Dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
        tLRPC$TL_dialogFolder.id = makeFolderDialogId;
        tLRPC$TL_dialogFolder.peer = new TLRPC$TL_peerUser();
        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
        tLRPC$TL_folder.id = i;
        tLRPC$TL_folder.title = LocaleController.getString("ArchivedChats", R.string.ArchivedChats);
        tLRPC$TL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i3);
            if (!tLRPC$Dialog2.pinned) {
                if (tLRPC$Dialog2.id != this.promoDialogId) {
                    break;
                }
            } else {
                i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
            }
        }
        tLRPC$TL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialogFolder);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tLRPC$TL_dialogFolder);
        this.allDialogs.add(0, tLRPC$TL_dialogFolder);
        return tLRPC$TL_dialogFolder;
    }

    /* renamed from: removeFolder */
    public void lambda$onFolderEmpty$164(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog == null) {
            return;
        }
        this.dialogs_dict.remove(makeFolderDialogId);
        this.allDialogs.remove(tLRPC$Dialog);
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
    }

    public void onFolderEmpty(final int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] == 2147483647L) {
            lambda$onFolderEmpty$164(i);
        } else {
            loadDialogs(i, 0, 10, false, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda44
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$onFolderEmpty$164(i);
                }
            });
        }
    }

    public void checkIfFolderEmpty(int i) {
        if (i == 0) {
            return;
        }
        getMessagesStorage().checkIfFolderEmpty(i);
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList<Long> arrayList = new ArrayList<>(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, null, j2);
    }

    /* JADX WARN: Removed duplicated region for block: B:46:0x0129  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0145 A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0147  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int addDialogToFolder(ArrayList<Long> arrayList, int i, int i2, ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, long j) {
        final long j2;
        NativeByteBuffer nativeByteBuffer;
        long createPendingTask;
        TLRPC$Dialog tLRPC$Dialog;
        boolean[] zArr;
        int i3;
        int i4;
        TLRPC$TL_folders_editPeerFolders tLRPC$TL_folders_editPeerFolders = new TLRPC$TL_folders_editPeerFolders();
        boolean[] zArr2 = null;
        if (j == 0) {
            long clientUserId = getUserConfig().getClientUserId();
            int size = arrayList.size();
            boolean[] zArr3 = null;
            boolean z = false;
            int i5 = 0;
            int i6 = 0;
            while (i5 < size) {
                long longValue = arrayList.get(i5).longValue();
                if ((DialogObject.isChatDialog(longValue) || DialogObject.isUserDialog(longValue) || DialogObject.isEncryptedDialog(longValue)) && !((i == 1 && (longValue == clientUserId || longValue == 777000 || isPromoDialog(longValue, false))) || (tLRPC$Dialog = this.dialogs_dict.get(longValue)) == null)) {
                    tLRPC$Dialog.folder_id = i;
                    if (i2 > 0) {
                        tLRPC$Dialog.pinned = true;
                        tLRPC$Dialog.pinnedNum = i2;
                    } else {
                        tLRPC$Dialog.pinned = false;
                        tLRPC$Dialog.pinnedNum = 0;
                    }
                    if (zArr3 == null) {
                        boolean[] zArr4 = new boolean[1];
                        ensureFolderDialogExists(i, zArr4);
                        zArr = zArr4;
                    } else {
                        zArr = zArr3;
                    }
                    if (DialogObject.isEncryptedDialog(longValue)) {
                        i3 = i5;
                        i4 = size;
                        getMessagesStorage().setDialogsFolderId(null, null, longValue, i);
                    } else {
                        i3 = i5;
                        i4 = size;
                        TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = new TLRPC$TL_inputFolderPeer();
                        tLRPC$TL_inputFolderPeer.folder_id = i;
                        tLRPC$TL_inputFolderPeer.peer = getInputPeer(longValue);
                        tLRPC$TL_folders_editPeerFolders.folder_peers.add(tLRPC$TL_inputFolderPeer);
                        i6 += tLRPC$TL_inputFolderPeer.getObjectSize();
                    }
                    zArr3 = zArr;
                    z = true;
                } else {
                    i3 = i5;
                    i4 = size;
                }
                i5 = i3 + 1;
                size = i4;
            }
            if (!z) {
                return 0;
            }
            sortDialogs(null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (i6 != 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(i6 + 12);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(17);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tLRPC$TL_folders_editPeerFolders.folder_peers.size());
                    int size2 = tLRPC$TL_folders_editPeerFolders.folder_peers.size();
                    for (int i7 = 0; i7 < size2; i7++) {
                        tLRPC$TL_folders_editPeerFolders.folder_peers.get(i7).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e2) {
                    e = e2;
                    zArr2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = zArr2;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    zArr2 = zArr3;
                    j2 = createPendingTask;
                    if (!tLRPC$TL_folders_editPeerFolders.folder_peers.isEmpty()) {
                    }
                    if (zArr2 != null) {
                    }
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                createPendingTask = 0;
            }
            zArr2 = zArr3;
            j2 = createPendingTask;
        } else {
            tLRPC$TL_folders_editPeerFolders.folder_peers = arrayList2;
            j2 = j;
        }
        if (!tLRPC$TL_folders_editPeerFolders.folder_peers.isEmpty()) {
            getConnectionsManager().sendRequest(tLRPC$TL_folders_editPeerFolders, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda287
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$addDialogToFolder$165(j2, tLObject, tLRPC$TL_error);
                }
            });
            getMessagesStorage().setDialogsFolderId(null, tLRPC$TL_folders_editPeerFolders.folder_peers, 0L, i);
        }
        if (zArr2 != null) {
            return 0;
        }
        return zArr2[0] ? 2 : 1;
    }

    public /* synthetic */ void lambda$addDialogToFolder$165(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, null);
    }

    public void loadDialogs(final int i, int i2, final int i3, boolean z, final Runnable runnable) {
        long j;
        if (this.loadingDialogs.get(i) || this.resetingDialogs) {
            return;
        }
        boolean z2 = true;
        this.loadingDialogs.put(i, true);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i4 = NotificationCenter.dialogsNeedReload;
        notificationCenter.postNotificationName(i4, new Object[0]);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
        }
        if (z) {
            MessagesStorage messagesStorage = getMessagesStorage();
            int i5 = i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0);
            if (i != 0 || i2 != 0) {
                z2 = false;
            }
            messagesStorage.getDialogs(i, i5, i3, z2);
            return;
        }
        TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
        tLRPC$TL_messages_getDialogs.limit = i3;
        tLRPC$TL_messages_getDialogs.exclude_pinned = true;
        if (i != 0) {
            tLRPC$TL_messages_getDialogs.flags |= 2;
            tLRPC$TL_messages_getDialogs.folder_id = i;
        }
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        if (dialogLoadOffsets[0] != -1) {
            if (dialogLoadOffsets[0] == 2147483647L) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().postNotificationName(i4, new Object[0]);
                return;
            }
            int i6 = (int) dialogLoadOffsets[0];
            tLRPC$TL_messages_getDialogs.offset_id = i6;
            tLRPC$TL_messages_getDialogs.offset_date = (int) dialogLoadOffsets[1];
            if (i6 == 0) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                if (dialogLoadOffsets[4] != 0) {
                    TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                    tLRPC$TL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                } else if (dialogLoadOffsets[2] != 0) {
                    TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                    tLRPC$TL_inputPeerUser.user_id = dialogLoadOffsets[2];
                } else {
                    TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                    tLRPC$TL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                }
                tLRPC$TL_messages_getDialogs.offset_peer.access_hash = dialogLoadOffsets[5];
            }
        } else {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            int size = dialogs.size() - 1;
            while (true) {
                if (size < 0) {
                    z2 = false;
                    break;
                }
                TLRPC$Dialog tLRPC$Dialog = dialogs.get(size);
                if (!tLRPC$Dialog.pinned && !DialogObject.isEncryptedDialog(tLRPC$Dialog.id) && tLRPC$Dialog.top_message > 0) {
                    ArrayList<MessageObject> arrayList = this.dialogMessage.get(tLRPC$Dialog.id);
                    MessageObject messageObject = null;
                    if (arrayList != null) {
                        for (int i7 = 0; i7 < arrayList.size(); i7++) {
                            MessageObject messageObject2 = arrayList.get(i7);
                            if (messageObject2 != null && (messageObject == null || messageObject2.getId() > messageObject.getId())) {
                                messageObject = arrayList.get(i7);
                            }
                        }
                    }
                    if (messageObject != null && messageObject.getId() > 0) {
                        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                        tLRPC$TL_messages_getDialogs.offset_date = tLRPC$Message.date;
                        tLRPC$TL_messages_getDialogs.offset_id = tLRPC$Message.id;
                        TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                        long j2 = tLRPC$Peer.channel_id;
                        if (j2 == 0) {
                            j2 = tLRPC$Peer.chat_id;
                            if (j2 == 0) {
                                j = tLRPC$Peer.user_id;
                                tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                            }
                        }
                        j = -j2;
                        tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                    }
                }
                size--;
            }
            if (!z2) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda276
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadDialogs$166(i, i3, runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadDialogs$166(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            processLoadedDialogs(tLRPC$messages_Dialogs, null, i, 0, i2, 0, false, false, false);
            if (runnable == null || !tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor = null;
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                SharedPreferences.Editor edit = notificationsSettings.edit();
                if (!z) {
                    edit.putInt("EnableGroup2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                    edit.putInt("EnableChannel2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                edit.remove("EnableGroup").commit();
                editor = edit;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 3;
            for (final int i = 0; i < 3; i++) {
                TLRPC$TL_account_getNotifySettings tLRPC$TL_account_getNotifySettings = new TLRPC$TL_account_getNotifySettings();
                if (i == 0) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyChats();
                } else if (i == 1) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyUsers();
                } else {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_getNotifySettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda268
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$168(i, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$168(final int i, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda147
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadGlobalNotificationsSettings$167(tLObject, i);
            }
        });
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$167(TLObject tLObject, int i) {
        if (tLObject != null) {
            this.loadingNotificationSettings--;
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = (TLRPC$TL_peerNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            if (i == 0) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewGroup", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableGroup2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 1) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewAll", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableAll2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewChannel", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableChannel2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            }
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_peerNotifySettings.android_sound, edit, 0L, 0, i, false);
            edit.commit();
            if (this.loadingNotificationSettings != 0) {
                return;
            }
            getUserConfig().notificationsSettingsLoaded = true;
            getUserConfig().saveConfig(false);
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_account_getContactSignUpNotification
                public static int constructor = -1626880216;

                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                    return TLRPC$Bool.TLdeserialize(abstractSerializedData, i, z);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(constructor);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda241
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadSignUpNotificationsSettings$170(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$170(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSignUpNotificationsSettings$169(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$169(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC$TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    public void loadUnknownDialog(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer == null) {
            return;
        }
        final long peerDialogId = DialogObject.getPeerDialogId(tLRPC$InputPeer);
        if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) >= 0) {
            return;
        }
        this.gettingUnknownDialogs.put(peerDialogId, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load unknown dialog " + peerDialogId);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        if (j == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
            } catch (Exception e) {
                e = e;
            }
            try {
                nativeByteBuffer.writeInt32(15);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                final long j2 = j;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda306
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$171(j2, peerDialogId, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j22 = j;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda306
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnknownDialog$171(j22, peerDialogId, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnknownDialog$171(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs) {
        TLRPC$InputPeer tLRPC$TL_inputPeerUser;
        int size = tLRPC$TL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i2);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Dialog.peer);
                if (tLRPC$TL_dialogFolder.top_message == 0 || peerDialogId == 0) {
                    tLRPC$TL_messages_peerDialogs.dialogs.remove(tLRPC$TL_dialogFolder);
                } else {
                    int size2 = tLRPC$TL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(tLRPC$Message) && tLRPC$Dialog.top_message == tLRPC$Message.id) {
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.peer = tLRPC$Dialog.peer;
                            tLRPC$TL_dialog.top_message = tLRPC$Dialog.top_message;
                            tLRPC$TL_dialog.folder_id = tLRPC$TL_dialogFolder.folder.id;
                            tLRPC$TL_dialog.flags |= 16;
                            tLRPC$TL_messages_peerDialogs.dialogs.add(tLRPC$TL_dialog);
                            TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                            if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerChannel();
                                tLRPC$TL_inputPeerUser.channel_id = tLRPC$Dialog.peer.channel_id;
                                int size3 = tLRPC$TL_messages_peerDialogs.chats.size();
                                while (true) {
                                    if (i >= size3) {
                                        break;
                                    }
                                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i);
                                    if (tLRPC$Chat.id == tLRPC$TL_inputPeerUser.channel_id) {
                                        tLRPC$TL_inputPeerUser.access_hash = tLRPC$Chat.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerChat();
                                tLRPC$TL_inputPeerUser.chat_id = tLRPC$Dialog.peer.chat_id;
                            } else {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                                tLRPC$TL_inputPeerUser.user_id = tLRPC$Dialog.peer.user_id;
                                int size4 = tLRPC$TL_messages_peerDialogs.users.size();
                                while (true) {
                                    if (i >= size4) {
                                        break;
                                    }
                                    TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                                    if (tLRPC$User.id == tLRPC$TL_inputPeerUser.user_id) {
                                        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tLRPC$TL_inputPeerUser, 0L);
                            return;
                        }
                    }
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$resetDialogs$172(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC$TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    public /* synthetic */ void lambda$resetDialogs$173(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.resetDialogsAll = (TLRPC$messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0206  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0230  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void resetDialogs(boolean z, final int i, final int i2, final int i3, final int i4) {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs;
        long j;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        Integer num;
        Integer num2;
        ArrayList<MessageObject> arrayList;
        TLRPC$Message tLRPC$Message;
        int i5;
        TLRPC$Chat tLRPC$Chat2;
        ArrayList<MessageObject> arrayList2;
        Integer num3 = 0;
        if (z) {
            if (this.resetingDialogs) {
                return;
            }
            getUserConfig().setPinnedDialogsLoaded(1, false);
            this.resetingDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getPinnedDialogs(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda273
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$resetDialogs$172(i, i2, i3, i4, tLObject, tLRPC$TL_error);
                }
            });
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.limit = 100;
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda272
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$resetDialogs$173(i, i2, i3, i4, tLObject, tLRPC$TL_error);
                }
            });
        } else if (this.resetDialogsPinned != null && (tLRPC$messages_Dialogs = this.resetDialogsAll) != null) {
            int size = tLRPC$messages_Dialogs.messages.size();
            int size2 = this.resetDialogsAll.dialogs.size();
            fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
            this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
            this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
            this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
            this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
            LongSparseArray<TLRPC$Dialog> longSparseArray = new LongSparseArray<>();
            LongSparseArray<ArrayList<MessageObject>> longSparseArray2 = new LongSparseArray<>();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            LongSparseArray longSparseArray4 = new LongSparseArray();
            for (int i6 = 0; i6 < this.resetDialogsAll.users.size(); i6++) {
                TLRPC$User tLRPC$User2 = this.resetDialogsAll.users.get(i6);
                longSparseArray3.put(tLRPC$User2.id, tLRPC$User2);
            }
            for (int i7 = 0; i7 < this.resetDialogsAll.chats.size(); i7++) {
                TLRPC$Chat tLRPC$Chat3 = this.resetDialogsAll.chats.get(i7);
                longSparseArray4.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            int i8 = 0;
            TLRPC$Message tLRPC$Message2 = null;
            while (true) {
                j = 0;
                if (i8 >= this.resetDialogsAll.messages.size()) {
                    break;
                }
                TLRPC$Message tLRPC$Message3 = this.resetDialogsAll.messages.get(i8);
                if (i8 < size && (tLRPC$Message2 == null || tLRPC$Message3.date < tLRPC$Message2.date)) {
                    tLRPC$Message2 = tLRPC$Message3;
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Message3.peer_id;
                Integer num4 = num3;
                long j2 = tLRPC$Peer.channel_id;
                if (j2 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j2);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                    }
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message3, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, true);
                    long dialogId = messageObject.getDialogId();
                    arrayList2 = longSparseArray2.get(dialogId);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList<>(1);
                    }
                    arrayList2.add(messageObject);
                    longSparseArray2.put(dialogId, arrayList2);
                } else {
                    long j3 = tLRPC$Peer.chat_id;
                    if (j3 != 0 && (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray4.get(j3)) != null && tLRPC$Chat2.migrated_to != null) {
                    }
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message3, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, true);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList2 = longSparseArray2.get(dialogId2);
                    if (arrayList2 == null) {
                    }
                    arrayList2.add(messageObject2);
                    longSparseArray2.put(dialogId2, arrayList2);
                }
                i8++;
                num3 = num4;
            }
            Integer num5 = num3;
            int i9 = 0;
            while (i9 < this.resetDialogsAll.dialogs.size()) {
                TLRPC$Dialog tLRPC$Dialog = this.resetDialogsAll.dialogs.get(i9);
                DialogObject.initDialog(tLRPC$Dialog);
                long j4 = tLRPC$Dialog.id;
                if (j4 != j) {
                    if (tLRPC$Dialog.last_message_date == 0 && (arrayList = longSparseArray2.get(j4)) != null) {
                        int i10 = Integer.MIN_VALUE;
                        for (int i11 = 0; i11 < arrayList.size(); i11++) {
                            MessageObject messageObject3 = arrayList.get(i11);
                            if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && (i5 = tLRPC$Message.date) > i10) {
                                i10 = i5;
                            }
                        }
                        if (i10 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i10;
                        }
                    }
                    if (DialogObject.isChannel(tLRPC$Dialog)) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id);
                        if (tLRPC$Chat5 == null || !tLRPC$Chat5.left) {
                            this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                            longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                            num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                            if (num == null) {
                                num = num5;
                            }
                            this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                            num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                            if (num2 == null) {
                                num2 = num5;
                            }
                            this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                        }
                    } else {
                        if (DialogObject.isChatDialog(tLRPC$Dialog.id) && (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) != null && tLRPC$Chat.migrated_to != null) {
                        }
                        longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                        num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num == null) {
                        }
                        this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                        num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num2 == null) {
                        }
                        this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                    }
                }
                i9++;
                j = 0;
            }
            ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
            for (int i12 = 0; i12 < this.resetDialogsAll.messages.size(); i12++) {
                TLRPC$Message tLRPC$Message4 = this.resetDialogsAll.messages.get(i12);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message4.action;
                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray3.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                    tLRPC$Message4.reply_markup = new TLRPC$TL_replyKeyboardHide();
                    tLRPC$Message4.flags |= 64;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message4.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message4.unread = false;
                    tLRPC$Message4.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message4.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num6 = concurrentHashMap.get(Long.valueOf(tLRPC$Message4.dialog_id));
                    if (num6 == null) {
                        num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message4.out, tLRPC$Message4.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message4.dialog_id), num6);
                    }
                    tLRPC$Message4.unread = num6.intValue() < tLRPC$Message4.id;
                }
            }
            getMessagesStorage().resetDialogs(this.resetDialogsAll, size, i, i2, i3, i4, longSparseArray, longSparseArray2, tLRPC$Message2, size2);
            this.resetDialogsPinned = null;
            this.resetDialogsAll = null;
        }
    }

    public void completeDialogsReset(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, final int i3, final int i4, final int i5, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<ArrayList<MessageObject>> longSparseArray2, TLRPC$Message tLRPC$Message) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$175(i3, i4, i5, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$175(int i, int i2, int i3, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$174(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$174(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        TLRPC$Dialog tLRPC$Dialog;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearAllDrafts(false);
        mediaDataController.loadDraftsIfNeed();
        putUsers(tLRPC$messages_Dialogs.users, false);
        putChats(tLRPC$messages_Dialogs.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i);
            if (!DialogObject.isEncryptedDialog(tLRPC$Dialog2.id)) {
                this.dialogs_dict.remove(tLRPC$Dialog2.id);
                ArrayList<MessageObject> arrayList = this.dialogMessage.get(tLRPC$Dialog2.id);
                this.dialogMessage.remove(tLRPC$Dialog2.id);
                if (arrayList != null) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        MessageObject messageObject = arrayList.get(i2);
                        if (messageObject != null) {
                            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject.getId());
                            }
                            long j = messageObject.messageOwner.random_id;
                            if (j != 0) {
                                this.dialogMessagesByRandomIds.remove(j);
                            }
                        }
                    }
                }
            }
        }
        for (int i3 = 0; i3 < longSparseArray.size(); i3++) {
            long keyAt = longSparseArray.keyAt(i3);
            TLRPC$Dialog tLRPC$Dialog3 = (TLRPC$Dialog) longSparseArray.valueAt(i3);
            TLRPC$DraftMessage tLRPC$DraftMessage = tLRPC$Dialog3.draft;
            if (tLRPC$DraftMessage instanceof TLRPC$TL_draftMessage) {
                tLRPC$Dialog = tLRPC$Dialog3;
                mediaDataController.saveDraft(tLRPC$Dialog3.id, 0, tLRPC$DraftMessage, null, false);
            } else {
                tLRPC$Dialog = tLRPC$Dialog3;
            }
            this.dialogs_dict.put(keyAt, tLRPC$Dialog);
            ArrayList<MessageObject> arrayList2 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
            this.dialogMessage.put(keyAt, arrayList2);
            if (arrayList2 != null) {
                for (int i4 = 0; i4 < arrayList2.size(); i4++) {
                    MessageObject messageObject2 = arrayList2.get(i4);
                    if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                        long j2 = messageObject2.messageOwner.random_id;
                        if (j2 != 0) {
                            this.dialogMessagesByRandomIds.put(j2, messageObject2);
                        }
                    }
                }
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i5 = 0; i5 < size; i5++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i5);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (totalDialogsCount < 400 && dialogLoadOffsets[0] != -1 && dialogLoadOffsets[0] != 2147483647L) {
            loadDialogs(0, 0, 100, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(final int i, int i2, long j, long j2, long j3, long j4) {
        if (this.migratingDialogs || i == -1) {
            return;
        }
        this.migratingDialogs = true;
        TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
        tLRPC$TL_messages_getDialogs.exclude_pinned = true;
        tLRPC$TL_messages_getDialogs.limit = 100;
        tLRPC$TL_messages_getDialogs.offset_id = i;
        tLRPC$TL_messages_getDialogs.offset_date = i2;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().formatterStats.format(i2 * 1000));
        }
        if (i == 0) {
            tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
        } else {
            if (j3 != 0) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                tLRPC$TL_inputPeerChannel.channel_id = j3;
            } else if (j != 0) {
                TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                tLRPC$TL_inputPeerUser.user_id = j;
            } else {
                TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                tLRPC$TL_inputPeerChat.chat_id = j2;
            }
            tLRPC$TL_messages_getDialogs.offset_peer.access_hash = j4;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda269
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$migrateDialogs$179(i, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$migrateDialogs$179(final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            final TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda196
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$177(tLRPC$messages_Dialogs, i);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda25
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$migrateDialogs$178();
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:111:0x0344 A[Catch: Exception -> 0x041f, TryCatch #0 {Exception -> 0x041f, blocks: (B:3:0x0004, B:4:0x001d, B:7:0x0029, B:9:0x0035, B:11:0x0062, B:14:0x0069, B:18:0x006c, B:20:0x0070, B:21:0x009b, B:23:0x00a7, B:24:0x00f1, B:25:0x0104, B:27:0x010c, B:29:0x011d, B:31:0x0122, B:34:0x012f, B:35:0x014e, B:37:0x0154, B:39:0x0164, B:42:0x0169, B:43:0x016f, B:45:0x0177, B:49:0x0198, B:50:0x0188, B:53:0x0195, B:54:0x019a, B:64:0x019e, B:66:0x01a5, B:67:0x01bf, B:69:0x01d5, B:70:0x01e1, B:73:0x01eb, B:79:0x01fd, B:81:0x024c, B:83:0x0256, B:85:0x027f, B:87:0x0295, B:89:0x029d, B:97:0x02ad, B:103:0x02bc, B:105:0x02f9, B:107:0x0301, B:109:0x032f, B:111:0x0344, B:112:0x035b, B:114:0x0363, B:118:0x0377, B:116:0x0381, B:119:0x040e, B:125:0x0384, B:127:0x038a, B:128:0x03a1, B:130:0x03a9, B:134:0x03bd, B:132:0x03c6, B:136:0x03c9, B:138:0x03cf, B:139:0x03e6, B:141:0x03ee, B:145:0x0402, B:143:0x040b, B:151:0x00aa, B:153:0x00ae, B:156:0x00b6), top: B:2:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0384 A[Catch: Exception -> 0x041f, TryCatch #0 {Exception -> 0x041f, blocks: (B:3:0x0004, B:4:0x001d, B:7:0x0029, B:9:0x0035, B:11:0x0062, B:14:0x0069, B:18:0x006c, B:20:0x0070, B:21:0x009b, B:23:0x00a7, B:24:0x00f1, B:25:0x0104, B:27:0x010c, B:29:0x011d, B:31:0x0122, B:34:0x012f, B:35:0x014e, B:37:0x0154, B:39:0x0164, B:42:0x0169, B:43:0x016f, B:45:0x0177, B:49:0x0198, B:50:0x0188, B:53:0x0195, B:54:0x019a, B:64:0x019e, B:66:0x01a5, B:67:0x01bf, B:69:0x01d5, B:70:0x01e1, B:73:0x01eb, B:79:0x01fd, B:81:0x024c, B:83:0x0256, B:85:0x027f, B:87:0x0295, B:89:0x029d, B:97:0x02ad, B:103:0x02bc, B:105:0x02f9, B:107:0x0301, B:109:0x032f, B:111:0x0344, B:112:0x035b, B:114:0x0363, B:118:0x0377, B:116:0x0381, B:119:0x040e, B:125:0x0384, B:127:0x038a, B:128:0x03a1, B:130:0x03a9, B:134:0x03bd, B:132:0x03c6, B:136:0x03c9, B:138:0x03cf, B:139:0x03e6, B:141:0x03ee, B:145:0x0402, B:143:0x040b, B:151:0x00aa, B:153:0x00ae, B:156:0x00b6), top: B:2:0x0004 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$migrateDialogs$177(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        int i2;
        TLRPC$Message tLRPC$Message;
        SQLiteCursor sQLiteCursor;
        int i3;
        TLRPC$Peer tLRPC$Peer;
        String str;
        TLRPC$Message tLRPC$Message2;
        TLRPC$Message tLRPC$Message3;
        int i4 = i;
        try {
            getUserConfig().setTotalDialogsCount(0, getUserConfig().getTotalDialogsCount(0) + tLRPC$messages_Dialogs.dialogs.size());
            TLRPC$Message tLRPC$Message4 = null;
            for (int i5 = 0; i5 < tLRPC$messages_Dialogs.messages.size(); i5++) {
                TLRPC$Message tLRPC$Message5 = tLRPC$messages_Dialogs.messages.get(i5);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("search migrate id " + tLRPC$Message5.id + " date " + LocaleController.getInstance().formatterStats.format(tLRPC$Message5.date * 1000));
                }
                if (tLRPC$Message4 == null || tLRPC$Message5.date < tLRPC$Message4.date) {
                    tLRPC$Message4 = tLRPC$Message5;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate step with id " + tLRPC$Message4.id + " date " + LocaleController.getInstance().formatterStats.format(tLRPC$Message4.date * 1000));
            }
            int i6 = -1;
            if (tLRPC$messages_Dialogs.dialogs.size() >= 100) {
                i2 = tLRPC$Message4.id;
            } else {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("migrate stop due to not 100 dialogs");
                }
                int i7 = 0;
                for (int i8 = 2; i7 < i8; i8 = 2) {
                    getUserConfig().setDialogsLoadOffset(i7, ConnectionsManager.DEFAULT_DATACENTER_ID, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                    i7++;
                }
                i2 = -1;
            }
            StringBuilder sb = new StringBuilder(tLRPC$messages_Dialogs.dialogs.size() * 12);
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i9 = 0; i9 < tLRPC$messages_Dialogs.dialogs.size(); i9++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i9);
                DialogObject.initDialog(tLRPC$Dialog);
                if (sb.length() > 0) {
                    sb.append(",");
                }
                sb.append(tLRPC$Dialog.id);
                longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
            }
            SQLiteCursor queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN (%s)", sb.toString()), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                int intValue = queryFinalized.intValue(1);
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) longSparseArray.get(longValue);
                if (tLRPC$Dialog2 != null) {
                    if (tLRPC$Dialog2.folder_id == intValue) {
                        tLRPC$messages_Dialogs.dialogs.remove(tLRPC$Dialog2);
                        int i10 = 0;
                        while (true) {
                            if (i10 >= tLRPC$messages_Dialogs.messages.size()) {
                                break;
                            }
                            TLRPC$Message tLRPC$Message6 = tLRPC$messages_Dialogs.messages.get(i10);
                            if (MessageObject.getDialogId(tLRPC$Message6) == longValue) {
                                tLRPC$messages_Dialogs.messages.remove(i10);
                                i10--;
                                if (tLRPC$Message6.id == tLRPC$Dialog2.top_message) {
                                    tLRPC$Dialog2.top_message = 0;
                                    break;
                                }
                            }
                            i10++;
                        }
                    }
                }
                longSparseArray.remove(longValue);
            }
            queryFinalized.dispose();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate found missing dialogs " + tLRPC$messages_Dialogs.dialogs.size());
            }
            SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized("SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 NOT IN (536870912, 1073741824)", new Object[0]);
            if (queryFinalized2.next()) {
                int max = Math.max(1441062000, queryFinalized2.intValue(0));
                int i11 = 0;
                while (true) {
                    str = "migrate stop due to reached loaded dialogs ";
                    if (i11 >= tLRPC$messages_Dialogs.messages.size()) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message7 = tLRPC$messages_Dialogs.messages.get(i11);
                    if (tLRPC$Message7.date < max) {
                        if (i4 != i6) {
                            int i12 = 0;
                            while (i12 < 2) {
                                int i13 = i12;
                                getUserConfig().setDialogsLoadOffset(i13, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                i12 = i13 + 1;
                                tLRPC$Message7 = tLRPC$Message7;
                                str = str;
                                tLRPC$Message4 = tLRPC$Message4;
                            }
                            tLRPC$Message2 = tLRPC$Message4;
                            tLRPC$Message3 = tLRPC$Message7;
                            String str2 = str;
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d(str2 + LocaleController.getInstance().formatterStats.format(max * 1000));
                            }
                            i2 = -1;
                        } else {
                            tLRPC$Message2 = tLRPC$Message4;
                            tLRPC$Message3 = tLRPC$Message7;
                        }
                        tLRPC$messages_Dialogs.messages.remove(i11);
                        i11--;
                        long dialogId = MessageObject.getDialogId(tLRPC$Message3);
                        TLRPC$Dialog tLRPC$Dialog3 = (TLRPC$Dialog) longSparseArray.get(dialogId);
                        longSparseArray.remove(dialogId);
                        if (tLRPC$Dialog3 != null) {
                            tLRPC$messages_Dialogs.dialogs.remove(tLRPC$Dialog3);
                        }
                    } else {
                        tLRPC$Message2 = tLRPC$Message4;
                    }
                    i11++;
                    i4 = i;
                    tLRPC$Message4 = tLRPC$Message2;
                    i6 = -1;
                }
                TLRPC$Message tLRPC$Message8 = tLRPC$Message4;
                if (tLRPC$Message8 != null) {
                    tLRPC$Message = tLRPC$Message8;
                    if (tLRPC$Message.date < max && i != -1) {
                        int i14 = 0;
                        for (int i15 = 2; i14 < i15; i15 = 2) {
                            getUserConfig().setDialogsLoadOffset(i14, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                            i14++;
                            queryFinalized2 = queryFinalized2;
                            max = max;
                        }
                        sQLiteCursor = queryFinalized2;
                        int i16 = max;
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d(str + LocaleController.getInstance().formatterStats.format(i16 * 1000));
                        }
                        i3 = -1;
                        sQLiteCursor.dispose();
                        getUserConfig().migrateOffsetDate = tLRPC$Message.date;
                        tLRPC$Peer = tLRPC$Message.peer_id;
                        if (tLRPC$Peer.channel_id != 0) {
                            getUserConfig().migrateOffsetChannelId = tLRPC$Message.peer_id.channel_id;
                            getUserConfig().migrateOffsetChatId = 0L;
                            getUserConfig().migrateOffsetUserId = 0L;
                            int i17 = 0;
                            while (true) {
                                if (i17 >= tLRPC$messages_Dialogs.chats.size()) {
                                    break;
                                }
                                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs.chats.get(i17);
                                if (tLRPC$Chat.id == getUserConfig().migrateOffsetChannelId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$Chat.access_hash;
                                    break;
                                }
                                i17++;
                            }
                        } else if (tLRPC$Peer.chat_id != 0) {
                            getUserConfig().migrateOffsetChatId = tLRPC$Message.peer_id.chat_id;
                            getUserConfig().migrateOffsetChannelId = 0L;
                            getUserConfig().migrateOffsetUserId = 0L;
                            int i18 = 0;
                            while (true) {
                                if (i18 >= tLRPC$messages_Dialogs.chats.size()) {
                                    break;
                                }
                                TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i18);
                                if (tLRPC$Chat2.id == getUserConfig().migrateOffsetChatId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$Chat2.access_hash;
                                    break;
                                }
                                i18++;
                            }
                        } else if (tLRPC$Peer.user_id != 0) {
                            getUserConfig().migrateOffsetUserId = tLRPC$Message.peer_id.user_id;
                            getUserConfig().migrateOffsetChatId = 0L;
                            getUserConfig().migrateOffsetChannelId = 0L;
                            int i19 = 0;
                            while (true) {
                                if (i19 >= tLRPC$messages_Dialogs.users.size()) {
                                    break;
                                }
                                TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i19);
                                if (tLRPC$User.id == getUserConfig().migrateOffsetUserId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$User.access_hash;
                                    break;
                                }
                                i19++;
                            }
                        }
                        processLoadedDialogs(tLRPC$messages_Dialogs, null, 0, i3, 0, 0, false, true, false);
                    }
                } else {
                    sQLiteCursor = queryFinalized2;
                    tLRPC$Message = tLRPC$Message8;
                    i3 = i2;
                    sQLiteCursor.dispose();
                    getUserConfig().migrateOffsetDate = tLRPC$Message.date;
                    tLRPC$Peer = tLRPC$Message.peer_id;
                    if (tLRPC$Peer.channel_id != 0) {
                    }
                    processLoadedDialogs(tLRPC$messages_Dialogs, null, 0, i3, 0, 0, false, true, false);
                }
            } else {
                tLRPC$Message = tLRPC$Message4;
            }
            sQLiteCursor = queryFinalized2;
            i3 = i2;
            sQLiteCursor.dispose();
            getUserConfig().migrateOffsetDate = tLRPC$Message.date;
            tLRPC$Peer = tLRPC$Message.peer_id;
            if (tLRPC$Peer.channel_id != 0) {
            }
            processLoadedDialogs(tLRPC$messages_Dialogs, null, 0, i3, 0, 0, false, true, false);
        } catch (Exception e) {
            FileLog.e(e);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda31
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$176();
                }
            });
        }
    }

    public /* synthetic */ void lambda$migrateDialogs$176() {
        this.migratingDialogs = false;
    }

    public /* synthetic */ void lambda$migrateDialogs$178() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final ArrayList<TLRPC$EncryptedChat> arrayList, final int i, final int i2, final int i3, final int i4, final boolean z, final boolean z2, final boolean z3) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda47
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$183(i, i4, tLRPC$messages_Dialogs, z, i3, arrayList, i2, z3, z2);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:145:0x0358, code lost:
        if (r5 == r0.id) goto L147;
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x0100, code lost:
        if (r2.date < r5.date) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x0127, code lost:
        if (r10 == (-r4.id)) goto L50;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x0140, code lost:
        if (r4.migrated_to != null) goto L57;
     */
    /* JADX WARN: Removed duplicated region for block: B:151:0x0398  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x03c2  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x03ef  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x03af  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0167  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x016e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$183(final int i, final int i2, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final boolean z, final int i3, final ArrayList arrayList, final int i4, final boolean z2, final boolean z3) {
        SparseArray sparseArray;
        TLRPC$Message tLRPC$Message;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        SparseArray sparseArray2;
        LongSparseArray longSparseArray5;
        SparseArray sparseArray3;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        boolean z4;
        TLRPC$Chat tLRPC$Chat;
        LongSparseArray longSparseArray8;
        int i5;
        Integer num;
        Integer num2;
        TLRPC$Message tLRPC$Message2;
        int i6;
        TLRPC$Message tLRPC$Message3;
        int i7;
        long j;
        long j2;
        long j3;
        long j4;
        int i8;
        int i9;
        long j5;
        long j6;
        long j7;
        SparseArray sparseArray4;
        TLRPC$Message tLRPC$Message4;
        ArrayList arrayList2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        if (!this.firstGettingTask) {
            getNewDeleteTask(null, null);
            this.firstGettingTask = true;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("loaded folderId " + i + " loadType " + i2 + " count " + tLRPC$messages_Dialogs2.dialogs.size());
        }
        final long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE && tLRPC$messages_Dialogs2.dialogs.size() == 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda197
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$180(tLRPC$messages_Dialogs, i, z, dialogLoadOffsets, i3);
                }
            });
            return;
        }
        LongSparseArray longSparseArray9 = new LongSparseArray();
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseArray longSparseArray11 = new LongSparseArray();
        LongSparseArray longSparseArray12 = new LongSparseArray();
        int i10 = 0;
        while (i10 < tLRPC$messages_Dialogs2.users.size()) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs2.users.get(i10);
            longSparseArray11.put(tLRPC$User.id, tLRPC$User);
            i10++;
            dialogLoadOffsets = dialogLoadOffsets;
        }
        long[] jArr = dialogLoadOffsets;
        for (int i11 = 0; i11 < tLRPC$messages_Dialogs2.chats.size(); i11++) {
            TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs2.chats.get(i11);
            longSparseArray12.put(tLRPC$Chat2.id, tLRPC$Chat2);
        }
        if (arrayList != null) {
            SparseArray sparseArray5 = new SparseArray();
            int size = arrayList.size();
            for (int i12 = 0; i12 < size; i12++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList.get(i12);
                sparseArray5.put(tLRPC$EncryptedChat.id, tLRPC$EncryptedChat);
            }
            sparseArray = sparseArray5;
        } else {
            sparseArray = null;
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE) {
            this.nextDialogsCacheOffset.put(i, i4 + i3);
        }
        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        int i13 = 0;
        TLRPC$Message tLRPC$Message5 = null;
        while (i13 < tLRPC$messages_Dialogs2.messages.size()) {
            TLRPC$Message tLRPC$Message6 = tLRPC$messages_Dialogs2.messages.get(i13);
            if (tLRPC$Message5 != null) {
                sparseArray4 = sparseArray;
            } else {
                sparseArray4 = sparseArray;
            }
            tLRPC$Message5 = tLRPC$Message6;
            TLRPC$Peer tLRPC$Peer = tLRPC$Message6.peer_id;
            long j8 = tLRPC$Peer.channel_id;
            if (j8 != 0) {
                TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray12.get(j8);
                if (tLRPC$Chat3 == null || !tLRPC$Chat3.left) {
                    tLRPC$Message4 = tLRPC$Message5;
                } else {
                    long j9 = this.promoDialogId;
                    tLRPC$Message4 = tLRPC$Message5;
                    if (j9 != 0) {
                    }
                }
                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message6, (LongSparseArray<TLRPC$User>) longSparseArray11, (LongSparseArray<TLRPC$Chat>) longSparseArray12, false, false);
                arrayList3.add(messageObject);
                long dialogId = messageObject.getDialogId();
                arrayList2 = (ArrayList) longSparseArray10.get(dialogId);
                if (arrayList2 != null) {
                    arrayList2 = new ArrayList(1);
                }
                arrayList2.add(messageObject);
                longSparseArray10.put(dialogId, arrayList2);
            } else {
                tLRPC$Message4 = tLRPC$Message5;
                long j10 = tLRPC$Peer.chat_id;
                if (j10 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray12.get(j10);
                    if (tLRPC$Chat4 != null) {
                    }
                }
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message6, (LongSparseArray<TLRPC$User>) longSparseArray11, (LongSparseArray<TLRPC$Chat>) longSparseArray12, false, false);
                arrayList3.add(messageObject2);
                long dialogId2 = messageObject2.getDialogId();
                arrayList2 = (ArrayList) longSparseArray10.get(dialogId2);
                if (arrayList2 != null) {
                }
                arrayList2.add(messageObject2);
                longSparseArray10.put(dialogId2, arrayList2);
            }
            i13++;
            sparseArray = sparseArray4;
            tLRPC$Message5 = tLRPC$Message4;
        }
        SparseArray sparseArray6 = sparseArray;
        getFileLoader().checkMediaExistance(arrayList3);
        if (z2 || z3 || jArr[0] == -1 || i2 != 0) {
            tLRPC$Message = tLRPC$Message5;
            longSparseArray = longSparseArray11;
            longSparseArray2 = longSparseArray12;
            longSparseArray3 = longSparseArray9;
            longSparseArray4 = longSparseArray10;
            sparseArray2 = sparseArray6;
        } else {
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(i);
            if (tLRPC$Message5 == null || tLRPC$Message5.id == jArr[0]) {
                tLRPC$Message3 = tLRPC$Message5;
                i7 = totalDialogsCount;
                j = 0;
                j2 = 0;
                j3 = 0;
                j4 = 0;
                i8 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                i9 = 0;
            } else {
                int size2 = totalDialogsCount + tLRPC$messages_Dialogs2.dialogs.size();
                int i14 = tLRPC$Message5.id;
                int i15 = tLRPC$Message5.date;
                TLRPC$Peer tLRPC$Peer2 = tLRPC$Message5.peer_id;
                tLRPC$Message3 = tLRPC$Message5;
                long j11 = tLRPC$Peer2.channel_id;
                if (j11 != 0) {
                    int i16 = 0;
                    while (true) {
                        if (i16 >= tLRPC$messages_Dialogs2.chats.size()) {
                            j7 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat5 = tLRPC$messages_Dialogs2.chats.get(i16);
                        if (tLRPC$Chat5.id == j11) {
                            j7 = tLRPC$Chat5.access_hash;
                            break;
                        }
                        i16++;
                    }
                    i7 = size2;
                    i9 = i15;
                    j3 = j11;
                    j4 = j7;
                    j = 0;
                    j2 = 0;
                } else {
                    long j12 = tLRPC$Peer2.chat_id;
                    if (j12 != 0) {
                        int i17 = 0;
                        while (true) {
                            if (i17 >= tLRPC$messages_Dialogs2.chats.size()) {
                                j6 = 0;
                                break;
                            }
                            TLRPC$Chat tLRPC$Chat6 = tLRPC$messages_Dialogs2.chats.get(i17);
                            if (tLRPC$Chat6.id == j12) {
                                j6 = tLRPC$Chat6.access_hash;
                                break;
                            }
                            i17++;
                        }
                        i7 = size2;
                        i9 = i15;
                        j4 = j6;
                        j3 = 0;
                        i8 = i14;
                        j2 = j12;
                        j = 0;
                    } else {
                        long j13 = tLRPC$Peer2.user_id;
                        if (j13 != 0) {
                            int i18 = 0;
                            while (true) {
                                if (i18 >= tLRPC$messages_Dialogs2.users.size()) {
                                    j5 = 0;
                                    break;
                                }
                                TLRPC$User tLRPC$User2 = tLRPC$messages_Dialogs2.users.get(i18);
                                if (tLRPC$User2.id == j13) {
                                    j5 = tLRPC$User2.access_hash;
                                    break;
                                }
                                i18++;
                            }
                            i7 = size2;
                            j = j13;
                            j4 = j5;
                            j2 = 0;
                            j3 = 0;
                            i9 = i15;
                        } else {
                            i7 = size2;
                            i9 = i15;
                            j = 0;
                            j2 = 0;
                            j3 = 0;
                            j4 = 0;
                        }
                    }
                }
                i8 = i14;
            }
            tLRPC$Message = tLRPC$Message3;
            sparseArray2 = sparseArray6;
            longSparseArray = longSparseArray11;
            longSparseArray2 = longSparseArray12;
            longSparseArray3 = longSparseArray9;
            longSparseArray4 = longSparseArray10;
            getUserConfig().setDialogsLoadOffset(i, i8, i9, j, j2, j3, j4);
            getUserConfig().setTotalDialogsCount(i, i7);
            getUserConfig().saveConfig(false);
        }
        final ArrayList arrayList4 = new ArrayList();
        int i19 = 0;
        while (i19 < tLRPC$messages_Dialogs2.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs2.dialogs.get(i19);
            DialogObject.initDialog(tLRPC$Dialog);
            long j14 = tLRPC$Dialog.id;
            if (j14 == 0) {
                sparseArray3 = sparseArray2;
            } else {
                if (DialogObject.isEncryptedDialog(j14)) {
                    sparseArray3 = sparseArray2;
                    if (sparseArray3 != null && sparseArray3.get(DialogObject.getEncryptedChatId(tLRPC$Dialog.id)) == null) {
                    }
                } else {
                    sparseArray3 = sparseArray2;
                }
                long j15 = this.promoDialogId;
                if (j15 != 0 && j15 == tLRPC$Dialog.id) {
                    this.promoDialog = tLRPC$Dialog;
                }
                if (tLRPC$Dialog.last_message_date == 0) {
                    longSparseArray6 = longSparseArray4;
                    ArrayList arrayList5 = (ArrayList) longSparseArray6.get(tLRPC$Dialog.id);
                    if (arrayList5 != null) {
                        int i20 = Integer.MIN_VALUE;
                        for (int i21 = 0; i21 < arrayList5.size(); i21++) {
                            MessageObject messageObject3 = (MessageObject) arrayList5.get(i21);
                            if (messageObject3 != null && (tLRPC$Message2 = messageObject3.messageOwner) != null && (i6 = tLRPC$Message2.date) > i20) {
                                i20 = i6;
                            }
                        }
                        if (i20 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i20;
                        }
                    }
                } else {
                    longSparseArray6 = longSparseArray4;
                }
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    longSparseArray7 = longSparseArray2;
                    TLRPC$Chat tLRPC$Chat7 = (TLRPC$Chat) longSparseArray7.get(-tLRPC$Dialog.id);
                    if (tLRPC$Chat7 != null) {
                        boolean z5 = tLRPC$Chat7.megagroup;
                        if (ChatObject.isNotInChat(tLRPC$Chat7)) {
                            long j16 = this.promoDialogId;
                            if (j16 != 0) {
                            }
                            longSparseArray8 = longSparseArray3;
                            i19++;
                            tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                            sparseArray2 = sparseArray3;
                            longSparseArray3 = longSparseArray8;
                            longSparseArray4 = longSparseArray6;
                            longSparseArray2 = longSparseArray7;
                        }
                        z4 = z5;
                    } else {
                        z4 = true;
                    }
                    this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                    longSparseArray8 = longSparseArray3;
                    longSparseArray8.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    if (!z4) {
                        i5 = 0;
                        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE && ((tLRPC$Dialog.read_outbox_max_id == 0 || tLRPC$Dialog.read_inbox_max_id == 0) && tLRPC$Dialog.top_message != 0)) {
                            arrayList4.add(tLRPC$Dialog);
                        }
                    } else {
                        i5 = 0;
                    }
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = Integer.valueOf(i5);
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = Integer.valueOf(i5);
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                    i19++;
                    tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                    sparseArray2 = sparseArray3;
                    longSparseArray3 = longSparseArray8;
                    longSparseArray4 = longSparseArray6;
                    longSparseArray2 = longSparseArray7;
                } else {
                    longSparseArray7 = longSparseArray2;
                    if (!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray7.get(-tLRPC$Dialog.id)) == null || (tLRPC$Chat.migrated_to == null && !ChatObject.isNotInChat(tLRPC$Chat))) {
                        z4 = true;
                        longSparseArray8 = longSparseArray3;
                        longSparseArray8.put(tLRPC$Dialog.id, tLRPC$Dialog);
                        if (!z4) {
                        }
                        num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num == null) {
                        }
                        this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                        num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num2 == null) {
                        }
                        this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                        i19++;
                        tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                        sparseArray2 = sparseArray3;
                        longSparseArray3 = longSparseArray8;
                        longSparseArray4 = longSparseArray6;
                        longSparseArray2 = longSparseArray7;
                    }
                    longSparseArray8 = longSparseArray3;
                    i19++;
                    tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
                    sparseArray2 = sparseArray3;
                    longSparseArray3 = longSparseArray8;
                    longSparseArray4 = longSparseArray6;
                    longSparseArray2 = longSparseArray7;
                }
            }
            longSparseArray7 = longSparseArray2;
            longSparseArray8 = longSparseArray3;
            longSparseArray6 = longSparseArray4;
            i19++;
            tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
            sparseArray2 = sparseArray3;
            longSparseArray3 = longSparseArray8;
            longSparseArray4 = longSparseArray6;
            longSparseArray2 = longSparseArray7;
        }
        final LongSparseArray longSparseArray13 = longSparseArray2;
        final LongSparseArray longSparseArray14 = longSparseArray3;
        final LongSparseArray longSparseArray15 = longSparseArray4;
        boolean z6 = false;
        if (i2 != this.DIALOGS_LOAD_TYPE_CACHE) {
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Dialogs.messages);
            int i22 = 0;
            while (i22 < tLRPC$messages_Dialogs.messages.size()) {
                TLRPC$Message tLRPC$Message7 = tLRPC$messages_Dialogs.messages.get(i22);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message7.action;
                if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                    long j17 = tLRPC$MessageAction.user_id;
                    longSparseArray5 = longSparseArray;
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray5.get(j17);
                    if (tLRPC$User3 != null && tLRPC$User3.bot) {
                        tLRPC$Message7.reply_markup = new TLRPC$TL_replyKeyboardHide();
                        tLRPC$Message7.flags |= 64;
                    }
                } else {
                    longSparseArray5 = longSparseArray;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message7.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message7.unread = z6;
                    tLRPC$Message7.media_unread = z6;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message7.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num3 = concurrentHashMap.get(Long.valueOf(tLRPC$Message7.dialog_id));
                    if (num3 == null) {
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message7.out, tLRPC$Message7.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message7.dialog_id), num3);
                    }
                    tLRPC$Message7.unread = num3.intValue() < tLRPC$Message7.id;
                }
                i22++;
                longSparseArray = longSparseArray5;
                z6 = false;
            }
            getMessagesStorage().putDialogs(tLRPC$messages_Dialogs, i2 == this.DIALOGS_LOAD_TYPE_UNKNOWN ? 3 : 0);
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CHANNEL) {
            final TLRPC$Chat tLRPC$Chat8 = tLRPC$messages_Dialogs.chats.get(0);
            getChannelDifference(tLRPC$Chat8.id);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda152
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$181(tLRPC$Chat8);
                }
            });
        }
        final TLRPC$Message tLRPC$Message8 = tLRPC$Message;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda163
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$182(tLRPC$Message8, i2, tLRPC$messages_Dialogs, arrayList, z3, i, longSparseArray14, longSparseArray15, longSparseArray13, i3, z2, i4, arrayList4);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDialogs$180(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, boolean z, long[] jArr, int i2) {
        putUsers(tLRPC$messages_Dialogs.users, true);
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (jArr[0] == 2147483647L) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processLoadedDialogs$181(TLRPC$Chat tLRPC$Chat) {
        checkChatInviter(tLRPC$Chat.id, true);
    }

    /* JADX WARN: Code restructure failed: missing block: B:159:0x024b, code lost:
        if (r8.size() == r7.size()) goto L147;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v29 */
    /* JADX WARN: Type inference failed for: r13v30 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$182(TLRPC$Message tLRPC$Message, int i, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList, boolean z, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, int i3, boolean z2, int i4, ArrayList arrayList2) {
        int i5;
        int i6;
        boolean z3;
        int i7;
        int i8;
        boolean z4;
        if (tLRPC$Message != null) {
            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, tLRPC$Message.date);
        } else {
            this.dialogsLoadedTillDate = Integer.MIN_VALUE;
        }
        if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
            applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
            getMediaDataController().loadDraftsIfNeed();
        }
        putUsers(tLRPC$messages_Dialogs.users, i == this.DIALOGS_LOAD_TYPE_CACHE);
        putChats(tLRPC$messages_Dialogs.chats, i == this.DIALOGS_LOAD_TYPE_CACHE);
        if (arrayList != null) {
            for (int i9 = 0; i9 < arrayList.size(); i9++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList.get(i9);
                if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                    getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, null);
                }
                putEncryptedChat(tLRPC$EncryptedChat, true);
            }
        }
        if (!z && i != this.DIALOGS_LOAD_TYPE_UNKNOWN && i != this.DIALOGS_LOAD_TYPE_CHANNEL) {
            this.loadingDialogs.put(i2, false);
        }
        this.dialogsLoaded = true;
        if (!z || this.allDialogs.isEmpty()) {
            i5 = 0;
        } else {
            ArrayList<TLRPC$Dialog> arrayList3 = this.allDialogs;
            i5 = arrayList3.get(arrayList3.size() - 1).last_message_date;
        }
        int i10 = 0;
        int i11 = 0;
        boolean z5 = false;
        while (i10 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i10);
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray.valueAt(i10);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            if (z && tLRPC$Dialog2 != null) {
                tLRPC$Dialog2.folder_id = tLRPC$Dialog.folder_id;
            }
            if (!z || i5 == 0 || tLRPC$Dialog.last_message_date >= i5) {
                if (i == this.DIALOGS_LOAD_TYPE_CACHE || !(tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage)) {
                    i7 = i11;
                } else {
                    i7 = i11;
                    getMediaDataController().saveDraft(tLRPC$Dialog.id, 0, tLRPC$Dialog.draft, null, false);
                }
                if (tLRPC$Dialog.folder_id != i2) {
                    i7++;
                }
                ArrayList<MessageObject> arrayList4 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList4);
                    if (arrayList4 != null) {
                        for (int i12 = 0; i12 < arrayList4.size(); i12++) {
                            MessageObject messageObject = arrayList4.get(i12);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j = messageObject.messageOwner.random_id;
                                if (j != 0) {
                                    this.dialogMessagesByRandomIds.put(j, messageObject);
                                }
                            }
                        }
                    }
                    i11 = i7;
                    i8 = i5;
                    z5 = true;
                } else {
                    if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    ArrayList<MessageObject> arrayList5 = this.dialogMessage.get(keyAt);
                    int i13 = 0;
                    while (true) {
                        i8 = i5;
                        if (arrayList5 == null || i13 >= arrayList5.size()) {
                            break;
                        } else if (arrayList5.get(i13) != null && arrayList5.get(i13).deleted) {
                            z4 = true;
                            break;
                        } else {
                            i13++;
                            i5 = i8;
                        }
                    }
                    z4 = false;
                    if (z4 || arrayList5 == null || tLRPC$Dialog2.top_message > 0) {
                        if (tLRPC$Dialog.top_message < tLRPC$Dialog2.top_message) {
                            if ((arrayList5 == null) == (arrayList4 == null)) {
                                if (arrayList5 != null) {
                                    if (arrayList4 != null) {
                                    }
                                }
                            }
                        }
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList4);
                        if (arrayList5 != null) {
                            for (int i14 = 0; i14 < arrayList5.size(); i14++) {
                                MessageObject messageObject2 = arrayList5.get(i14);
                                if (messageObject2 != null) {
                                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                        this.dialogMessagesByIds.remove(messageObject2.getId());
                                    }
                                    long j2 = messageObject2.messageOwner.random_id;
                                    if (j2 != 0) {
                                        this.dialogMessagesByRandomIds.remove(j2);
                                    }
                                }
                            }
                        }
                        if (arrayList4 != null) {
                            for (int i15 = 0; i15 < arrayList4.size(); i15++) {
                                MessageObject messageObject3 = arrayList4.get(i15);
                                if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                    int i16 = 0;
                                    while (true) {
                                        if (arrayList5 == null || i16 >= arrayList5.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = arrayList5.get(i16);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        }
                                        i16++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j3 = messageObject3.messageOwner.random_id;
                                    if (j3 != 0) {
                                        this.dialogMessagesByRandomIds.put(j3, messageObject3);
                                    }
                                }
                            }
                        }
                    } else {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList4);
                        for (int i17 = 0; i17 < arrayList5.size(); i17++) {
                            MessageObject messageObject5 = arrayList5.get(i17);
                            if (messageObject5 != null) {
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j4 = messageObject5.messageOwner.random_id;
                                if (j4 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j4);
                                }
                            }
                        }
                        if (arrayList4 != null) {
                            for (int i18 = 0; i18 < arrayList4.size(); i18++) {
                                MessageObject messageObject6 = arrayList4.get(i18);
                                if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                    int i19 = 0;
                                    while (true) {
                                        if (i19 >= arrayList5.size()) {
                                            break;
                                        }
                                        MessageObject messageObject7 = arrayList5.get(i19);
                                        if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                            messageObject6.deleted = messageObject7.deleted;
                                            break;
                                        }
                                        i19++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                    long j5 = messageObject6.messageOwner.random_id;
                                    if (j5 != 0) {
                                        this.dialogMessagesByRandomIds.put(j5, messageObject6);
                                    }
                                }
                            }
                        }
                    }
                    i11 = i7;
                }
            } else {
                i8 = i5;
            }
            i10++;
            i5 = i8;
        }
        int i20 = i11;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i21 = 0; i21 < size; i21++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i21);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(z ? longSparseArray3 : null);
        putAllNeededDraftDialogs();
        if (i != this.DIALOGS_LOAD_TYPE_CHANNEL && i != this.DIALOGS_LOAD_TYPE_UNKNOWN && !z) {
            this.dialogsEndReached.put(i2, (tLRPC$messages_Dialogs.dialogs.size() == 0 || tLRPC$messages_Dialogs.dialogs.size() != i3) && i == 0);
            if (i20 <= 0 || i20 >= 20 || i2 != 0) {
                z3 = true;
            } else {
                z3 = true;
                this.dialogsEndReached.put(1, true);
                if (getUserConfig().getDialogLoadOffsets(i2)[0] == 2147483647L) {
                    this.serverDialogsEndReached.put(1, true);
                }
            }
            if (!z2) {
                SparseBooleanArray sparseBooleanArray = this.serverDialogsEndReached;
                if ((tLRPC$messages_Dialogs.dialogs.size() != 0 && tLRPC$messages_Dialogs.dialogs.size() == i3) || i != 0) {
                    z3 = false;
                }
                sparseBooleanArray.put(i2, z3);
            }
        }
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(i2);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i2);
        if (z2 || z || totalDialogsCount >= 400) {
            i6 = 0;
        } else {
            i6 = 0;
            i6 = 0;
            i6 = 0;
            if (dialogLoadOffsets[0] != -1 && dialogLoadOffsets[0] != 2147483647L) {
                loadDialogs(i2, 0, 100, false);
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[i6]);
        if (z) {
            getUserConfig().migrateOffsetId = i4;
            getUserConfig().saveConfig(i6);
            this.migratingDialogs = i6;
            getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[i6]);
        } else {
            generateUpdateMessage();
            if (!z5 && i == this.DIALOGS_LOAD_TYPE_CACHE && this.dialogsEndReached.get(i2)) {
                loadDialogs(i2, i6, i3, i6);
            }
        }
        migrateDialogs(getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
        if (!arrayList2.isEmpty()) {
            reloadDialogsReadValue(arrayList2, 0L);
        }
        loadUnreadDialogs();
        if (tLRPC$messages_Dialogs.dialogs != null) {
            for (int i22 = i6; i22 < tLRPC$messages_Dialogs.dialogs.size(); i22++) {
                if (isForum(tLRPC$messages_Dialogs.dialogs.get(i22).id)) {
                    this.topicsController.preloadTopics(-tLRPC$messages_Dialogs.dialogs.get(i22).id);
                }
            }
        }
    }

    private void applyDialogNotificationsSettings(long j, int i, TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings) {
        getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j, i, tLRPC$PeerNotifySettings);
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC$Dialog> arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = arrayList.get(i);
            if (tLRPC$Dialog.peer != null && (tLRPC$Dialog.notify_settings instanceof TLRPC$TL_peerNotifySettings)) {
                getNotificationsController().getNotificationsSettingsFacade().setSettingsForDialog(tLRPC$Dialog, tLRPC$Dialog.notify_settings);
            }
        }
    }

    public void reloadMentionsCountForChannel(final TLRPC$InputPeer tLRPC$InputPeer, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
            } catch (Exception e2) {
                nativeByteBuffer = null;
                e = e2;
            }
            try {
                nativeByteBuffer.writeInt32(22);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
                tLRPC$TL_messages_getUnreadMentions.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getUnreadMentions.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda336
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$reloadMentionsCountForChannel$184(tLRPC$InputPeer, j, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions2 = new TLRPC$TL_messages_getUnreadMentions();
        tLRPC$TL_messages_getUnreadMentions2.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getUnreadMentions2.limit = 1;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda336
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadMentionsCountForChannel$184(tLRPC$InputPeer, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannel$184(TLRPC$InputPeer tLRPC$InputPeer, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        if (tLRPC$messages_Messages != null) {
            int i = tLRPC$messages_Messages.count;
            if (i == 0) {
                i = tLRPC$messages_Messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount(-tLRPC$InputPeer.channel_id, 0, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void reloadMentionsCountForChannels(final ArrayList<Long> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda110
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$185(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannels$185(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            reloadMentionsCountForChannel(getInputPeer(-((Long) arrayList.get(i)).longValue()), 0L);
        }
    }

    public void processDialogsUpdateRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda139
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$186(longSparseIntArray, longSparseIntArray2);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:42:0x00f7, code lost:
        r3 = true;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdateRead$186(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2) {
        boolean z;
        if (longSparseIntArray != null) {
            z = false;
            for (int i = 0; i < longSparseIntArray.size(); i++) {
                long keyAt = longSparseIntArray.keyAt(i);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                if (tLRPC$Dialog == null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= this.allDialogs.size()) {
                            break;
                        } else if (this.allDialogs.get(i2).id == keyAt) {
                            this.dialogs_dict.put(keyAt, this.allDialogs.get(i2));
                            tLRPC$Dialog = this.allDialogs.get(i2);
                            break;
                        } else {
                            i2++;
                        }
                    }
                }
                if (tLRPC$Dialog == null) {
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("can't update dialog " + keyAt + " with new unread " + longSparseIntArray.valueAt(i));
                    }
                    this.pendingUnreadCounter.put(keyAt, longSparseIntArray.valueAt(i));
                }
                if (tLRPC$Dialog != null) {
                    int i3 = tLRPC$Dialog.unread_count;
                    tLRPC$Dialog.unread_count = longSparseIntArray.valueAt(i);
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("update dialog " + keyAt + " with new unread " + tLRPC$Dialog.unread_count);
                    }
                    if (i3 != 0 && tLRPC$Dialog.unread_count == 0) {
                        if (!isDialogMuted(keyAt, 0)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i4 >= dialogFilterArr.length) {
                                    break;
                                }
                                if (dialogFilterArr[i4] != null && (dialogFilterArr[i4].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                                i4++;
                            }
                        }
                    } else if (i3 == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_count != 0) {
                        if (!isDialogMuted(keyAt, 0)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i5 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i5 >= dialogFilterArr2.length) {
                                    break;
                                }
                                if (dialogFilterArr2[i5] != null && (dialogFilterArr2[i5].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                                i5++;
                            }
                        }
                    }
                }
            }
        } else {
            z = false;
        }
        if (longSparseIntArray2 != null) {
            for (int i6 = 0; i6 < longSparseIntArray2.size(); i6++) {
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(longSparseIntArray2.keyAt(i6));
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.unread_mentions_count = longSparseIntArray2.valueAt(i6);
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), 0, Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i7 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i7 >= dialogFilterArr3.length) {
                                break;
                            } else if (dialogFilterArr3[i7] == null || ((dialogFilterArr3[i7].flags & DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0 && (dialogFilterArr3[i7].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) == 0)) {
                                i7++;
                            }
                        }
                        z = true;
                    }
                }
            }
        }
        if (z) {
            sortDialogs(null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        if (longSparseIntArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
        }
    }

    public void checkLastDialogMessage(final TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (DialogObject.isEncryptedDialog(tLRPC$Dialog.id) || this.checkingLastMessagesDialogs.indexOfKey(tLRPC$Dialog.id) >= 0) {
            return;
        }
        TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
        if (tLRPC$InputPeer == null) {
            tLRPC$InputPeer = getInputPeer(tLRPC$Dialog.id);
        }
        tLRPC$TL_messages_getHistory.peer = tLRPC$InputPeer;
        if (tLRPC$InputPeer == null) {
            return;
        }
        tLRPC$TL_messages_getHistory.limit = 1;
        this.checkingLastMessagesDialogs.put(tLRPC$Dialog.id, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id);
        }
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_getHistory.peer.getObjectSize() + 60);
            } catch (Exception e2) {
                nativeByteBuffer = null;
                e = e2;
            }
            try {
                nativeByteBuffer.writeInt32(14);
                nativeByteBuffer.writeInt64(tLRPC$Dialog.id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.top_message);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.read_inbox_max_id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.read_outbox_max_id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_count);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.last_message_date);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.pts);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.flags);
                nativeByteBuffer.writeBool(tLRPC$Dialog.pinned);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.pinnedNum);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_mentions_count);
                nativeByteBuffer.writeBool(tLRPC$Dialog.unread_mark);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.folder_id);
                tLRPC$TL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda335
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$190(tLRPC$Dialog, j, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda335
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkLastDialogMessage$190(tLRPC$Dialog, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$190(final TLRPC$Dialog tLRPC$Dialog, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(tLRPC$Dialog.id, tLRPC$messages_Messages.messages);
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has message");
                }
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.flags = tLRPC$Dialog.flags;
                tLRPC$TL_dialog.top_message = tLRPC$Message.id;
                tLRPC$TL_dialog.last_message_date = tLRPC$Message.date;
                tLRPC$TL_dialog.notify_settings = tLRPC$Dialog.notify_settings;
                tLRPC$TL_dialog.pts = tLRPC$Dialog.pts;
                tLRPC$TL_dialog.unread_count = tLRPC$Dialog.unread_count;
                tLRPC$TL_dialog.unread_mark = tLRPC$Dialog.unread_mark;
                tLRPC$TL_dialog.unread_mentions_count = tLRPC$Dialog.unread_mentions_count;
                tLRPC$TL_dialog.unread_reactions_count = tLRPC$Dialog.unread_reactions_count;
                tLRPC$TL_dialog.read_inbox_max_id = tLRPC$Dialog.read_inbox_max_id;
                tLRPC$TL_dialog.read_outbox_max_id = tLRPC$Dialog.read_outbox_max_id;
                tLRPC$TL_dialog.pinned = tLRPC$Dialog.pinned;
                tLRPC$TL_dialog.pinnedNum = tLRPC$Dialog.pinnedNum;
                tLRPC$TL_dialog.folder_id = tLRPC$Dialog.folder_id;
                long j2 = tLRPC$Dialog.id;
                tLRPC$TL_dialog.id = j2;
                tLRPC$Message.dialog_id = j2;
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$messages_Messages.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$messages_Messages.chats);
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$messages_Messages.messages);
                tLRPC$TL_messages_dialogs.count = 1;
                processDialogsUpdate(tLRPC$TL_messages_dialogs, null, false);
                getMessagesStorage().putMessages(tLRPC$messages_Messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, false, 0);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda159
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$188(tLRPC$Dialog);
                    }
                });
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda160
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkLastDialogMessage$189(tLRPC$Dialog);
            }
        });
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$188(final TLRPC$Dialog tLRPC$Dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has not message");
        }
        if (getMediaDataController().getDraft(tLRPC$Dialog.id, 0) == null) {
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(tLRPC$Dialog.id, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda161
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$187(tLRPC$Dialog);
                    }
                });
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog top message " + tLRPC$Dialog2.top_message);
            }
            if (tLRPC$Dialog2.top_message != 0) {
                return;
            }
            deleteDialog(tLRPC$Dialog.id, 3);
        }
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$187(TLRPC$Dialog tLRPC$Dialog) {
        deleteDialog(tLRPC$Dialog.id, 3);
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$189(TLRPC$Dialog tLRPC$Dialog) {
        this.checkingLastMessagesDialogs.delete(tLRPC$Dialog.id);
    }

    public void processDialogsUpdate(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda201
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$192(tLRPC$messages_Dialogs, z);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:29:0x009d, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L30;
     */
    /* JADX WARN: Code restructure failed: missing block: B:39:0x00b8, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L30;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$192(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final boolean z) {
        TLRPC$Chat tLRPC$Chat;
        LongSparseIntArray longSparseIntArray;
        TLRPC$Chat tLRPC$Chat2;
        ArrayList arrayList;
        TLRPC$Message tLRPC$Message;
        int i;
        int i2;
        ArrayList<MessageObject> arrayList2;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray(tLRPC$messages_Dialogs.users.size());
        LongSparseArray longSparseArray4 = new LongSparseArray(tLRPC$messages_Dialogs.chats.size());
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        for (int i3 = 0; i3 < tLRPC$messages_Dialogs.users.size(); i3++) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i3);
            longSparseArray3.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i4 = 0; i4 < tLRPC$messages_Dialogs.chats.size(); i4++) {
            TLRPC$Chat tLRPC$Chat3 = tLRPC$messages_Dialogs.chats.get(i4);
            longSparseArray4.put(tLRPC$Chat3.id, tLRPC$Chat3);
        }
        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        int i5 = 0;
        while (i5 < tLRPC$messages_Dialogs.messages.size()) {
            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Dialogs.messages.get(i5);
            LongSparseIntArray longSparseIntArray3 = longSparseIntArray2;
            long j = this.promoDialogId;
            if (j == 0 || j != tLRPC$Message2.dialog_id) {
                TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
                long j2 = tLRPC$Peer.channel_id;
                if (j2 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j2);
                    if (tLRPC$Chat4 != null) {
                    }
                } else {
                    long j3 = tLRPC$Peer.chat_id;
                    if (j3 != 0) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(j3);
                        if (tLRPC$Chat5 != null) {
                            if (tLRPC$Chat5.migrated_to == null) {
                            }
                            i2 = i5;
                            arrayList2 = arrayList3;
                        }
                    }
                }
                i5 = i2 + 1;
                arrayList3 = arrayList2;
                longSparseIntArray2 = longSparseIntArray3;
            }
            i2 = i5;
            arrayList2 = arrayList3;
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, false);
            arrayList2.add(messageObject);
            long dialogId = messageObject.getDialogId();
            ArrayList arrayList4 = (ArrayList) longSparseArray2.get(dialogId);
            if (arrayList4 == null) {
                arrayList4 = new ArrayList(1);
            }
            arrayList4.add(messageObject);
            longSparseArray2.put(dialogId, arrayList4);
            i5 = i2 + 1;
            arrayList3 = arrayList2;
            longSparseIntArray2 = longSparseIntArray3;
        }
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray2;
        getFileLoader().checkMediaExistance(arrayList3);
        int i6 = 0;
        while (i6 < tLRPC$messages_Dialogs.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i6);
            DialogObject.initDialog(tLRPC$Dialog);
            long j4 = this.promoDialogId;
            if ((j4 == 0 || j4 != tLRPC$Dialog.id) && (!DialogObject.isChannel(tLRPC$Dialog) ? !(!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) == null || (tLRPC$Chat.migrated_to == null && !ChatObject.isNotInChat(tLRPC$Chat))) : !((tLRPC$Chat2 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) == null || !ChatObject.isNotInChat(tLRPC$Chat2)))) {
                longSparseIntArray = longSparseIntArray4;
            } else {
                if (tLRPC$Dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id)) != null) {
                    int i7 = Integer.MIN_VALUE;
                    for (int i8 = 0; i8 < arrayList.size(); i8++) {
                        MessageObject messageObject2 = (MessageObject) arrayList.get(i8);
                        if (messageObject2 != null && (tLRPC$Message = messageObject2.messageOwner) != null && (i = tLRPC$Message.date) > i7) {
                            i7 = i;
                        }
                    }
                    if (i7 > Integer.MIN_VALUE) {
                        tLRPC$Dialog.last_message_date = i7;
                    }
                }
                longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                longSparseIntArray = longSparseIntArray4;
                longSparseIntArray.put(tLRPC$Dialog.id, tLRPC$Dialog.unread_count);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                int i9 = tLRPC$Dialog.read_inbox_max_id;
                int i10 = tLRPC$Dialog.top_message;
                if (i9 > i10) {
                    tLRPC$Dialog.read_inbox_max_id = i10;
                }
                int intValue = num.intValue();
                int i11 = tLRPC$Dialog.top_message;
                if (intValue > i11) {
                    num = Integer.valueOf(i11);
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            }
            i6++;
            longSparseIntArray4 = longSparseIntArray;
        }
        final LongSparseIntArray longSparseIntArray5 = longSparseIntArray4;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda199
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$191(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2, z, longSparseIntArray5);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:141:0x02c7, code lost:
        if (r8.size() == r12.size()) goto L142;
     */
    /* JADX WARN: Removed duplicated region for block: B:146:0x037e  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x0383 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$191(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, boolean z, LongSparseIntArray longSparseIntArray) {
        int i;
        boolean z2;
        int i2 = 1;
        putUsers(tLRPC$messages_Dialogs.users, true);
        putChats(tLRPC$messages_Dialogs.chats, true);
        int i3 = 0;
        while (i3 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i3);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processDialogsUpdate " + keyAt);
            }
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray.valueAt(i3);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            ArrayList<MessageObject> arrayList = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog null");
                }
                this.nextDialogsCacheOffset.put(tLRPC$Dialog.folder_id, this.nextDialogsCacheOffset.get(tLRPC$Dialog.folder_id, 0) + i2);
                i = i3;
                this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                this.dialogMessage.put(keyAt, arrayList);
                if (arrayList == null || arrayList.size() <= 0) {
                    if (z) {
                        checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message is null");
                    }
                } else {
                    for (int i4 = 0; i4 < arrayList.size(); i4++) {
                        MessageObject messageObject = arrayList.get(i4);
                        if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                            long j = messageObject.messageOwner.random_id;
                            if (j != 0) {
                                this.dialogMessagesByRandomIds.put(j, messageObject);
                            }
                        }
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message not null");
                    }
                }
            } else {
                i = i3;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog not null");
                }
                tLRPC$Dialog2.unread_count = tLRPC$Dialog.unread_count;
                int i5 = tLRPC$Dialog2.unread_mentions_count;
                int i6 = tLRPC$Dialog.unread_mentions_count;
                if (i5 != i6) {
                    tLRPC$Dialog2.unread_mentions_count = i6;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), 0, Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                }
                int i7 = tLRPC$Dialog2.unread_reactions_count;
                int i8 = tLRPC$Dialog.unread_reactions_count;
                if (i7 != i8) {
                    tLRPC$Dialog2.unread_reactions_count = i8;
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(tLRPC$Dialog2.id), 0, Integer.valueOf(tLRPC$Dialog2.unread_reactions_count), null);
                }
                ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(keyAt);
                for (int i9 = 0; arrayList2 != null && i9 < arrayList2.size(); i9++) {
                    if (arrayList2.get(i9) != null && arrayList2.get(i9).deleted) {
                        z2 = true;
                        break;
                    }
                }
                z2 = false;
                if (BuildVars.LOGS_ENABLED) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("processDialogsUpdate oldMsgs (count = ");
                    sb.append(arrayList2 == null ? "null" : Integer.valueOf(arrayList2.size()));
                    sb.append(") old top_message = ");
                    sb.append(tLRPC$Dialog2.top_message);
                    sb.append(" new top_message = ");
                    sb.append(tLRPC$Dialog.top_message);
                    sb.append("  unread_count =");
                    sb.append(tLRPC$Dialog2.unread_count);
                    sb.append(" fromCache=");
                    sb.append(z);
                    FileLog.d(sb.toString());
                    FileLog.d("processDialogsUpdate oldMsgDeleted " + z2);
                }
                if (arrayList2 == null || tLRPC$Dialog2.top_message > 0) {
                    if (!z2 && tLRPC$Dialog.top_message <= tLRPC$Dialog2.top_message) {
                        if ((arrayList2 == null) == (arrayList == null)) {
                            if (arrayList2 != null) {
                                if (arrayList != null) {
                                }
                            }
                            if (z && arrayList == null) {
                                checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                                if (!BuildVars.LOGS_ENABLED) {
                                    FileLog.d("processDialogsUpdate new messages are null");
                                }
                            }
                        }
                    }
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList);
                    for (int i10 = 0; arrayList2 != null && i10 < arrayList2.size(); i10++) {
                        MessageObject messageObject2 = arrayList2.get(i10);
                        if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject2.getId());
                            long j2 = messageObject2.messageOwner.random_id;
                            if (j2 != 0) {
                                this.dialogMessagesByRandomIds.remove(j2);
                            }
                        }
                    }
                    if (arrayList != null) {
                        for (int i11 = 0; i11 < arrayList.size(); i11++) {
                            MessageObject messageObject3 = arrayList.get(i11);
                            int i12 = 0;
                            while (true) {
                                if (arrayList2 == null || i12 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject4 = arrayList2.get(i12);
                                if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                    messageObject3.deleted = messageObject4.deleted;
                                    break;
                                }
                                i12++;
                            }
                            if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject3.messageOwner.date);
                                long j3 = messageObject3.messageOwner.random_id;
                                if (j3 != 0) {
                                    this.dialogMessagesByRandomIds.put(j3, messageObject3);
                                }
                            }
                        }
                    }
                    if (z) {
                        checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                        if (!BuildVars.LOGS_ENABLED) {
                        }
                    }
                } else if (z2 || messagesMaxDate(arrayList) > messagesMaxDate(arrayList2)) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList);
                    for (int i13 = 0; i13 < arrayList2.size(); i13++) {
                        MessageObject messageObject5 = arrayList2.get(i13);
                        if (messageObject5 != null && messageObject5.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject5.getId());
                        }
                    }
                    if (arrayList != null) {
                        for (int i14 = 0; i14 < arrayList.size(); i14++) {
                            MessageObject messageObject6 = arrayList.get(i14);
                            int i15 = 0;
                            while (true) {
                                if (i15 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject7 = arrayList2.get(i15);
                                if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                    messageObject6.deleted = messageObject7.deleted;
                                    break;
                                }
                                i15++;
                            }
                            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject6.messageOwner.date);
                                long j4 = messageObject6.messageOwner.random_id;
                                if (j4 != 0) {
                                    this.dialogMessagesByRandomIds.put(j4, messageObject6);
                                }
                            }
                        }
                    }
                    for (int i16 = 0; i16 < arrayList2.size(); i16++) {
                        long j5 = arrayList2.get(i16).messageOwner.random_id;
                        if (j5 != 0) {
                            this.dialogMessagesByRandomIds.remove(j5);
                        }
                    }
                }
            }
            i3 = i + 1;
            i2 = 1;
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i17 = 0; i17 < size; i17++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i17);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    private int messagesMaxDate(ArrayList<MessageObject> arrayList) {
        TLRPC$Message tLRPC$Message;
        int i;
        int i2 = Integer.MIN_VALUE;
        for (int i3 = 0; arrayList != null && i3 < arrayList.size(); i3++) {
            MessageObject messageObject = arrayList.get(i3);
            if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && (i = tLRPC$Message.date) > i2) {
                i2 = i;
            }
        }
        return i2;
    }

    public void addToViewsQueue(final MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda133
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$193(messageObject);
            }
        });
    }

    public /* synthetic */ void lambda$addToViewsQueue$193(MessageObject messageObject) {
        long dialogId = messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList<Integer> arrayList = this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(id))) {
            arrayList.add(Integer.valueOf(id));
        }
    }

    public void loadExtendedMediaForMessages(long j, ArrayList<MessageObject> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        TLRPC$TL_messages_getExtendedMedia tLRPC$TL_messages_getExtendedMedia = new TLRPC$TL_messages_getExtendedMedia();
        tLRPC$TL_messages_getExtendedMedia.peer = getInputPeer(j);
        for (int i = 0; i < arrayList.size(); i++) {
            tLRPC$TL_messages_getExtendedMedia.id.add(Integer.valueOf(arrayList.get(i).getId()));
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getExtendedMedia, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda263
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadExtendedMediaForMessages$194(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadExtendedMediaForMessages$194(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void loadReactionsForMessages(long j, ArrayList<MessageObject> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        TLRPC$TL_messages_getMessagesReactions tLRPC$TL_messages_getMessagesReactions = new TLRPC$TL_messages_getMessagesReactions();
        tLRPC$TL_messages_getMessagesReactions.peer = getInputPeer(j);
        for (int i = 0; i < arrayList.size(); i++) {
            tLRPC$TL_messages_getMessagesReactions.id.add(Integer.valueOf(arrayList.get(i).getId()));
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda264
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadReactionsForMessages$195(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadReactionsForMessages$195(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            for (int i = 0; i < tLRPC$Updates.updates.size(); i++) {
                if (tLRPC$Updates.updates.get(i) instanceof TLRPC$TL_updateMessageReactions) {
                    ((TLRPC$TL_updateMessageReactions) tLRPC$Updates.updates.get(i)).updateUnreadState = false;
                }
            }
            processUpdates(tLRPC$Updates, false);
        }
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        int i;
        SparseArray<MessageObject> sparseArray = this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i2 = 0; i2 < size; i2++) {
            sparseArray.valueAt(i2).pollVisibleOnScreen = false;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        int size2 = arrayList.size();
        boolean z = false;
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        for (int i4 = 0; i4 < size2; i4++) {
            MessageObject messageObject = arrayList.get(i4);
            if (messageObject.type == 17) {
                TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                if (!tLRPC$Poll.closed && (i = tLRPC$Poll.close_date) != 0) {
                    if (i <= currentTime) {
                        z = true;
                    } else {
                        i3 = Math.min(i3, i - currentTime);
                    }
                }
                int id = messageObject.getId();
                MessageObject messageObject2 = sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
        if (z) {
            this.lastViewsCheckTime = 0L;
        } else if (i3 < 5) {
            this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (messageObject.scheduled) {
            return;
        }
        ArrayList<Integer> arrayList = new ArrayList<>();
        if (messageObject.messageOwner.mentioned) {
            getMessagesStorage().markMentionMessageAsRead(-messageObject.messageOwner.peer_id.channel_id, messageObject.getId(), messageObject.getDialogId());
        }
        arrayList.add(Integer.valueOf(messageObject.getId()));
        long dialogId = messageObject.getDialogId();
        getMessagesStorage().markMessagesContentAsRead(dialogId, arrayList, 0);
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(dialogId), arrayList);
        if (messageObject.getId() < 0) {
            markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
        } else if (messageObject.messageOwner.peer_id.channel_id != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel == null) {
                return;
            }
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, MessagesController$$ExternalSyntheticLambda367.INSTANCE);
        } else {
            TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
            tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda248
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$markMessageContentAsRead$197(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markMessageContentAsRead$197(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public void markMentionMessageAsRead(int i, long j, long j2) {
        getMessagesStorage().markMentionMessageAsRead(-j, i, j2);
        if (j != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(j);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel == null) {
                return;
            }
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, MessagesController$$ExternalSyntheticLambda355.INSTANCE);
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda257
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMentionMessageAsRead$199(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markMentionMessageAsRead$199(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:32:0x007b  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0098  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void markMessageAsRead2(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        TLRPC$InputChannel tLRPC$InputChannel2;
        final long j3;
        NativeByteBuffer nativeByteBuffer;
        if (i == 0 || i2 <= 0) {
            return;
        }
        if (!DialogObject.isChatDialog(j) || tLRPC$InputChannel != null) {
            tLRPC$InputChannel2 = tLRPC$InputChannel;
        } else {
            TLRPC$InputChannel inputChannel = getInputChannel(j);
            if (inputChannel == null) {
                return;
            }
            tLRPC$InputChannel2 = inputChannel;
        }
        if (j2 == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(20 + (tLRPC$InputChannel2 != null ? tLRPC$InputChannel2.getObjectSize() : 0));
                try {
                    nativeByteBuffer.writeInt32(23);
                } catch (Exception e) {
                    e = e;
                }
            } catch (Exception e2) {
                e = e2;
            }
            try {
                nativeByteBuffer.writeInt64(j);
                nativeByteBuffer.writeInt32(i);
                nativeByteBuffer.writeInt32(i2);
                if (tLRPC$InputChannel2 != null) {
                    tLRPC$InputChannel2.serializeToStream(nativeByteBuffer);
                }
            } catch (Exception e3) {
                e = e3;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                int currentTime = getConnectionsManager().getCurrentTime();
                getMessagesStorage().createTaskForMid(j, i, currentTime, currentTime, i2, false);
                if (tLRPC$InputChannel2 == null) {
                }
            }
            j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            j3 = j2;
        }
        int currentTime2 = getConnectionsManager().getCurrentTime();
        getMessagesStorage().createTaskForMid(j, i, currentTime2, currentTime2, i2, false);
        if (tLRPC$InputChannel2 == null) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            tLRPC$TL_channels_readMessageContents.channel = tLRPC$InputChannel2;
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda292
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$markMessageAsRead2$200(j3, tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda293
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMessageAsRead2$201(j3, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markMessageAsRead2$200(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$markMessageAsRead2$201(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC$EncryptedChat encryptedChat;
        if (j2 == 0 || j == 0) {
            return;
        }
        if ((i <= 0 && i != Integer.MIN_VALUE) || !DialogObject.isEncryptedDialog(j) || (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) == null) {
            return;
        }
        ArrayList<Long> arrayList = new ArrayList<>();
        arrayList.add(Long.valueOf(j2));
        getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, null);
        if (i <= 0) {
            return;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void completeReadTask(ReadTask readTask) {
        TLRPC$TL_messages_readHistory tLRPC$TL_messages_readHistory;
        if (readTask.replyId != 0) {
            TLRPC$TL_messages_readDiscussion tLRPC$TL_messages_readDiscussion = new TLRPC$TL_messages_readDiscussion();
            tLRPC$TL_messages_readDiscussion.msg_id = (int) readTask.replyId;
            tLRPC$TL_messages_readDiscussion.peer = getInputPeer(readTask.dialogId);
            tLRPC$TL_messages_readDiscussion.read_max_id = readTask.maxId;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readDiscussion, MessagesController$$ExternalSyntheticLambda353.INSTANCE);
        } else if (!DialogObject.isEncryptedDialog(readTask.dialogId)) {
            TLRPC$InputPeer inputPeer = getInputPeer(readTask.dialogId);
            if (inputPeer instanceof TLRPC$TL_inputPeerChannel) {
                TLRPC$TL_channels_readHistory tLRPC$TL_channels_readHistory = new TLRPC$TL_channels_readHistory();
                tLRPC$TL_channels_readHistory.channel = getInputChannel(-readTask.dialogId);
                tLRPC$TL_channels_readHistory.max_id = readTask.maxId;
                tLRPC$TL_messages_readHistory = tLRPC$TL_channels_readHistory;
            } else {
                TLRPC$TL_messages_readHistory tLRPC$TL_messages_readHistory2 = new TLRPC$TL_messages_readHistory();
                tLRPC$TL_messages_readHistory2.peer = inputPeer;
                tLRPC$TL_messages_readHistory2.max_id = readTask.maxId;
                tLRPC$TL_messages_readHistory = tLRPC$TL_messages_readHistory2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda243
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$completeReadTask$203(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(readTask.dialogId)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr == null || bArr.length <= 1 || !(encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                return;
            }
            TLRPC$TL_messages_readEncryptedHistory tLRPC$TL_messages_readEncryptedHistory = new TLRPC$TL_messages_readEncryptedHistory();
            TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
            tLRPC$TL_messages_readEncryptedHistory.peer = tLRPC$TL_inputEncryptedChat;
            tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
            tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
            tLRPC$TL_messages_readEncryptedHistory.max_date = readTask.maxDate;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readEncryptedHistory, MessagesController$$ExternalSyntheticLambda362.INSTANCE);
        }
    }

    public /* synthetic */ void lambda$completeReadTask$203(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null || !(tLObject instanceof TLRPC$TL_messages_affectedMessages)) {
            return;
        }
        TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
        processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            ReadTask readTask = this.readTasks.get(i2);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i2);
                this.readTasksMap.remove(readTask.dialogId);
                i2--;
                size--;
            }
            i2++;
        }
        int size2 = this.repliesReadTasks.size();
        while (i < size2) {
            ReadTask readTask2 = this.repliesReadTasks.get(i);
            if (readTask2.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask2);
                this.repliesReadTasks.remove(i);
                this.threadsReadTasksMap.remove(readTask2.dialogId + "_" + readTask2.replyId);
                i += -1;
                size2 += -1;
            }
            i++;
        }
    }

    public void markDialogAsReadNow(final long j, final int i) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda48
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$205(i, j);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsReadNow$205(int i, long j) {
        if (i != 0) {
            String str = j + "_" + i;
            ReadTask readTask = this.threadsReadTasksMap.get(str);
            if (readTask == null) {
                return;
            }
            completeReadTask(readTask);
            this.repliesReadTasks.remove(readTask);
            this.threadsReadTasksMap.remove(str);
            return;
        }
        ReadTask readTask2 = this.readTasksMap.get(j);
        if (readTask2 == null) {
            return;
        }
        completeReadTask(readTask2);
        this.readTasks.remove(readTask2);
        this.readTasksMap.remove(j);
    }

    public void markMentionsAsRead(long j, int i) {
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        getMessagesStorage().resetMentionsCount(j, i, 0);
        TLRPC$TL_messages_readMentions tLRPC$TL_messages_readMentions = new TLRPC$TL_messages_readMentions();
        tLRPC$TL_messages_readMentions.peer = getInputPeer(j);
        if (i != 0) {
            tLRPC$TL_messages_readMentions.top_msg_id = i;
            tLRPC$TL_messages_readMentions.flags |= 1;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMentions, MessagesController$$ExternalSyntheticLambda352.INSTANCE);
    }

    /* JADX WARN: Code restructure failed: missing block: B:18:0x0072, code lost:
        if (r18 != Integer.MAX_VALUE) goto L5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:3:0x000c, code lost:
        if (r18 != Integer.MAX_VALUE) goto L5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:4:0x0010, code lost:
        r11 = false;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void markDialogAsRead(final long j, final int i, final int i2, final int i3, final boolean z, final int i4, final int i5, final boolean z2, int i6) {
        boolean z3 = true;
        if (i4 == 0) {
            boolean z4 = getNotificationsController().showBadgeMessages;
            if (!DialogObject.isEncryptedDialog(j)) {
                if (i == 0) {
                    return;
                }
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(num.intValue(), i)));
                getMessagesStorage().processPendingRead(j, i, i2, i6);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda76
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$208(j, i5, i, z);
                    }
                });
            } else if (i3 == 0) {
                return;
            } else {
                TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
                getMessagesStorage().processPendingRead(j, i, i2, i6);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda79
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$210(j, i3, z, i5, i2);
                    }
                });
                if (encryptedChat != null && encryptedChat.ttl > 0) {
                    getMessagesStorage().createTaskForSecretChat(encryptedChat.id, i3, Math.max(getConnectionsManager().getCurrentTime(), i3), 0, null);
                }
            }
            if (!z3) {
                return;
            }
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda53
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$markDialogAsRead$211(i4, j, z2, i3, i);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markDialogAsRead$208(final long j, final int i, final int i2, final boolean z) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda77
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$207(j, i, i2, z);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsRead$207(long j, int i, int i2, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i3 = tLRPC$Dialog.unread_count;
            if (i == 0 || i2 >= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i3 - i, 0);
                tLRPC$Dialog.unread_count = max;
                if (i2 != Integer.MIN_VALUE) {
                    int i4 = tLRPC$Dialog.top_message;
                    if (max > i4 - i2) {
                        tLRPC$Dialog.unread_count = i4 - i2;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i3 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0)) {
                    this.unreadUnmutedDialogs--;
                }
                int i5 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i5 < dialogFilterArr.length) {
                        if (dialogFilterArr[i5] != null && (dialogFilterArr[i5].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i5++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        if (!z) {
            getNotificationsController().processReadMessages(null, j, 0, i2, false);
            LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j, 0);
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
            return;
        }
        getNotificationsController().processReadMessages(null, j, 0, i2, true);
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray(1);
        longSparseIntArray2.put(j, -1);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray2);
    }

    public /* synthetic */ void lambda$markDialogAsRead$210(final long j, final int i, final boolean z, final int i2, final int i3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$209(j, i, z, i2, i3);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsRead$209(long j, int i, boolean z, int i2, int i3) {
        getNotificationsController().processReadMessages(null, j, i, 0, z);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i2 == 0 || i3 <= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i2, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i3 - i5) {
                        tLRPC$Dialog.unread_count = i3 - i5;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
        longSparseIntArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    public /* synthetic */ void lambda$markDialogAsRead$211(int i, long j, boolean z, int i2, int i3) {
        ReadTask readTask;
        if (i != 0) {
            HashMap<String, ReadTask> hashMap = this.threadsReadTasksMap;
            readTask = hashMap.get(j + "_" + i);
        } else {
            readTask = this.readTasksMap.get(j);
        }
        if (readTask == null) {
            readTask = new ReadTask();
            readTask.dialogId = j;
            readTask.replyId = i;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                if (i != 0) {
                    HashMap<String, ReadTask> hashMap2 = this.threadsReadTasksMap;
                    hashMap2.put(j + "_" + i, readTask);
                    this.repliesReadTasks.add(readTask);
                } else {
                    this.readTasksMap.put(j, readTask);
                    this.readTasks.add(readTask);
                }
            }
        }
        readTask.maxDate = i2;
        readTask.maxId = i3;
        if (z) {
            completeReadTask(readTask);
        }
    }

    public int createChat(String str, ArrayList<Long> arrayList, String str2, int i, boolean z, Location location, String str3, final BaseFragment baseFragment) {
        if (i == 0 && !z) {
            final TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat = new TLRPC$TL_messages_createChat();
            tLRPC$TL_messages_createChat.title = str;
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                TLRPC$User user = getUser(arrayList.get(i2));
                if (user != null) {
                    tLRPC$TL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_messages_createChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda343
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$214(baseFragment, tLRPC$TL_messages_createChat, tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else if (!z && i != 2 && i != 4) {
            return 0;
        } else {
            final TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel = new TLRPC$TL_channels_createChannel();
            tLRPC$TL_channels_createChannel.title = str;
            if (str2 == null) {
                str2 = "";
            }
            tLRPC$TL_channels_createChannel.about = str2;
            tLRPC$TL_channels_createChannel.for_import = z;
            if (z || i == 4) {
                tLRPC$TL_channels_createChannel.megagroup = true;
            } else {
                tLRPC$TL_channels_createChannel.broadcast = true;
            }
            if (location != null) {
                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                tLRPC$TL_channels_createChannel.geo_point = tLRPC$TL_inputGeoPoint;
                tLRPC$TL_inputGeoPoint.lat = location.getLatitude();
                tLRPC$TL_channels_createChannel.geo_point._long = location.getLongitude();
                tLRPC$TL_channels_createChannel.address = str3;
                tLRPC$TL_channels_createChannel.flags |= 4;
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_channels_createChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda341
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$217(baseFragment, tLRPC$TL_channels_createChannel, tLObject, tLRPC$TL_error);
                }
            }, 2);
        }
    }

    public /* synthetic */ void lambda$createChat$214(final BaseFragment baseFragment, final TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda176
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$212(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat);
                }
            });
            return;
        }
        final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda191
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$createChat$213(tLRPC$Updates);
            }
        });
    }

    public /* synthetic */ void lambda$createChat$212(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$createChat$213(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList != null && !arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$Updates.chats.get(0).id));
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$createChat$217(final BaseFragment baseFragment, final TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda172
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$215(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel);
                }
            });
            return;
        }
        final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda190
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$createChat$216(tLRPC$Updates);
            }
        });
    }

    public /* synthetic */ void lambda$createChat$215(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$createChat$216(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList != null && !arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$Updates.chats.get(0).id));
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
        }
    }

    public void convertToMegaGroup(Context context, long j, BaseFragment baseFragment, MessagesStorage.LongCallback longCallback) {
        convertToMegaGroup(context, j, baseFragment, longCallback, null);
    }

    public void convertToMegaGroup(final Context context, long j, final BaseFragment baseFragment, final MessagesStorage.LongCallback longCallback, final Runnable runnable) {
        final TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat = new TLRPC$TL_messages_migrateChat();
        tLRPC$TL_messages_migrateChat.chat_id = j;
        final AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_migrateChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda322
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToMegaGroup$221(context, alertDialog, longCallback, runnable, baseFragment, tLRPC$TL_messages_migrateChat, tLObject, tLRPC$TL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda0
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToMegaGroup$222(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.show();
            } catch (Exception unused) {
            }
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$221(final Context context, final AlertDialog alertDialog, final MessagesStorage.LongCallback longCallback, Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$convertToMegaGroup$218(context, alertDialog);
                    }
                });
            }
            final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda223
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToMegaGroup$219(MessagesStorage.LongCallback.this, tLRPC$Updates);
                }
            });
            return;
        }
        if (runnable != null) {
            runnable.run();
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda137
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$convertToMegaGroup$220(longCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat);
            }
        });
    }

    public static /* synthetic */ void lambda$convertToMegaGroup$218(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public static /* synthetic */ void lambda$convertToMegaGroup$219(MessagesStorage.LongCallback longCallback, TLRPC$Updates tLRPC$Updates) {
        if (longCallback != null) {
            for (int i = 0; i < tLRPC$Updates.chats.size(); i++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$Updates.chats.get(i);
                if (ChatObject.isChannel(tLRPC$Chat)) {
                    longCallback.run(tLRPC$Chat.id);
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$220(MessagesStorage.LongCallback longCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat) {
        if (longCallback != null) {
            longCallback.run(0L);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$convertToMegaGroup$222(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void convertToGigaGroup(final Context context, TLRPC$Chat tLRPC$Chat, final BaseFragment baseFragment, final MessagesStorage.BooleanCallback booleanCallback) {
        final TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup = new TLRPC$TL_channels_convertToGigagroup();
        tLRPC$TL_channels_convertToGigagroup.channel = getInputChannel(tLRPC$Chat);
        AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final AlertDialog alertDialog2 = alertDialog;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_channels_convertToGigagroup, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda321
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToGigaGroup$226(context, alertDialog2, booleanCallback, baseFragment, tLRPC$TL_channels_convertToGigagroup, tLObject, tLRPC$TL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda1
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToGigaGroup$227(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.showDelayed(400L);
            } catch (Exception unused) {
            }
        }
    }

    public /* synthetic */ void lambda$convertToGigaGroup$226(final Context context, final AlertDialog alertDialog, final MessagesStorage.BooleanCallback booleanCallback, final BaseFragment baseFragment, final TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$convertToGigaGroup$223(context, alertDialog);
                    }
                });
            }
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda222
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToGigaGroup$224(MessagesStorage.BooleanCallback.this);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda136
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$convertToGigaGroup$225(booleanCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup);
            }
        });
    }

    public static /* synthetic */ void lambda$convertToGigaGroup$223(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public static /* synthetic */ void lambda$convertToGigaGroup$224(MessagesStorage.BooleanCallback booleanCallback) {
        if (booleanCallback != null) {
            booleanCallback.run(true);
        }
    }

    public /* synthetic */ void lambda$convertToGigaGroup$225(MessagesStorage.BooleanCallback booleanCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup) {
        if (booleanCallback != null) {
            booleanCallback.run(false);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$convertToGigaGroup$227(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void addUsersToChannel(long j, ArrayList<TLRPC$InputUser> arrayList, final BaseFragment baseFragment) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        final TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
        tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(j);
        tLRPC$TL_channels_inviteToChannel.users = arrayList;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_inviteToChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda342
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$addUsersToChannel$229(baseFragment, tLRPC$TL_channels_inviteToChannel, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$addUsersToChannel$228(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel, Boolean.TRUE);
    }

    public /* synthetic */ void lambda$addUsersToChannel$229(final BaseFragment baseFragment, final TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda175
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUsersToChannel$228(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel);
                }
            });
        } else {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void setDefaultSendAs(final long j, long j2) {
        TLRPC$ChatFull chatFull = getChatFull(-j);
        if (chatFull != null) {
            chatFull.default_send_as = getPeer(j2);
            getMessagesStorage().updateChatInfo(chatFull, false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateDefaultSendAsPeer, Long.valueOf(j), chatFull.default_send_as);
        }
        TLRPC$TL_messages_saveDefaultSendAs tLRPC$TL_messages_saveDefaultSendAs = new TLRPC$TL_messages_saveDefaultSendAs();
        tLRPC$TL_messages_saveDefaultSendAs.peer = getInputPeer(j);
        tLRPC$TL_messages_saveDefaultSendAs.send_as = getInputPeer(j2);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveDefaultSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda286
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDefaultSendAs$230(j, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$setDefaultSendAs$230(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            long j2 = -j;
            if (getChatFull(j2) != null) {
                return;
            }
            loadFullChat(j2, 0, true);
        } else if (tLRPC$TL_error == null || tLRPC$TL_error.code != 400) {
        } else {
            loadFullChat(-j, 0, true);
        }
    }

    public void toggleChatNoForwards(long j, boolean z) {
        TLRPC$TL_messages_toggleNoForwards tLRPC$TL_messages_toggleNoForwards = new TLRPC$TL_messages_toggleNoForwards();
        tLRPC$TL_messages_toggleNoForwards.peer = getInputPeer(-j);
        tLRPC$TL_messages_toggleNoForwards.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleNoForwards, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda245
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatNoForwards$232(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatNoForwards$232(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda32
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatNoForwards$231();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChatNoForwards$231() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinToSend(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC$TL_channels_toggleJoinToSend tLRPC$TL_channels_toggleJoinToSend = new TLRPC$TL_channels_toggleJoinToSend();
        tLRPC$TL_channels_toggleJoinToSend.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleJoinToSend.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleJoinToSend, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda326
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatJoinToSend$234(runnable, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatJoinToSend$234(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda17
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinToSend$233();
                }
            });
            if (runnable == null) {
                return;
            }
            runnable.run();
        } else if (tLRPC$TL_error == null || "CHAT_NOT_MODIFIED".equals(tLRPC$TL_error.text)) {
            if (runnable == null) {
                return;
            }
            runnable.run();
        } else if (runnable2 == null) {
        } else {
            runnable2.run();
        }
    }

    public /* synthetic */ void lambda$toggleChatJoinToSend$233() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinRequest(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC$TL_channels_toggleJoinRequest tLRPC$TL_channels_toggleJoinRequest = new TLRPC$TL_channels_toggleJoinRequest();
        tLRPC$TL_channels_toggleJoinRequest.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleJoinRequest.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleJoinRequest, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda327
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatJoinRequest$236(runnable, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatJoinRequest$236(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda35
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinRequest$235();
                }
            });
            if (runnable == null) {
                return;
            }
            runnable.run();
        } else if (tLRPC$TL_error == null || "CHAT_NOT_MODIFIED".equals(tLRPC$TL_error.text)) {
            if (runnable == null) {
                return;
            }
            runnable.run();
        } else if (runnable2 == null) {
        } else {
            runnable2.run();
        }
    }

    public /* synthetic */ void lambda$toggleChatJoinRequest$235() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelSignatures(long j, boolean z) {
        TLRPC$TL_channels_toggleSignatures tLRPC$TL_channels_toggleSignatures = new TLRPC$TL_channels_toggleSignatures();
        tLRPC$TL_channels_toggleSignatures.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleSignatures.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSignatures, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda244
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelSignatures$238(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChannelSignatures$238(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda14
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelSignatures$237();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelSignatures$237() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelForum(long j, boolean z) {
        TLRPC$TL_channels_toggleForum tLRPC$TL_channels_toggleForum = new TLRPC$TL_channels_toggleForum();
        tLRPC$TL_channels_toggleForum.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleForum.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleForum, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda252
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelForum$240(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChannelForum$240(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda42
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelForum$239();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelForum$239() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelInvitesHistory(long j, boolean z) {
        TLRPC$TL_channels_togglePreHistoryHidden tLRPC$TL_channels_togglePreHistoryHidden = new TLRPC$TL_channels_togglePreHistoryHidden();
        tLRPC$TL_channels_togglePreHistoryHidden.channel = getInputChannel(j);
        tLRPC$TL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_togglePreHistoryHidden, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelInvitesHistory$242(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChannelInvitesHistory$242(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda24
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelInvitesHistory$241();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelInvitesHistory$241() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void updateChatAbout(long j, final String str, final TLRPC$ChatFull tLRPC$ChatFull) {
        TLRPC$TL_messages_editChatAbout tLRPC$TL_messages_editChatAbout = new TLRPC$TL_messages_editChatAbout();
        tLRPC$TL_messages_editChatAbout.peer = getInputPeer(-j);
        tLRPC$TL_messages_editChatAbout.about = str;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAbout, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda334
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChatAbout$244(tLRPC$ChatFull, str, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChatAbout$244(final TLRPC$ChatFull tLRPC$ChatFull, final String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (!(tLObject instanceof TLRPC$TL_boolTrue) || tLRPC$ChatFull == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda158
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateChatAbout$243(tLRPC$ChatFull, str);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatAbout$243(TLRPC$ChatFull tLRPC$ChatFull, String str) {
        tLRPC$ChatFull.about = str;
        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void updateChannelUserName(final BaseFragment baseFragment, final long j, final String str, final Runnable runnable, final Runnable runnable2) {
        final TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername = new TLRPC$TL_channels_updateUsername();
        tLRPC$TL_channels_updateUsername.channel = getInputChannel(j);
        tLRPC$TL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_updateUsername, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChannelUserName$246(j, str, runnable, baseFragment, tLRPC$TL_channels_updateUsername, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChannelUserName$246(final long j, final String str, final Runnable runnable, BaseFragment baseFragment, TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if ((tLObject instanceof TLRPC$TL_boolTrue) || (tLRPC$TL_error != null && "USERNAME_NOT_MODIFIED".equals(tLRPC$TL_error.text))) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda85
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateChannelUserName$245(j, str, runnable);
                }
            });
            return;
        }
        AlertsCreator.processError(UserConfig.selectedAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_updateUsername, new Object[0]);
        if (runnable2 == null) {
            return;
        }
        runnable2.run();
    }

    public /* synthetic */ void lambda$updateChannelUserName$245(long j, String str, Runnable runnable) {
        boolean z;
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat.usernames != null) {
            for (int i = 0; i < chat.usernames.size(); i++) {
                TLRPC$TL_username tLRPC$TL_username = chat.usernames.get(i);
                if (tLRPC$TL_username != null && tLRPC$TL_username.editable) {
                    tLRPC$TL_username.username = str;
                    z = true;
                    break;
                }
            }
        }
        z = false;
        if (!z) {
            ArrayList<TLRPC$TL_username> arrayList = chat.usernames;
            if (arrayList == null || arrayList.size() >= 1) {
                if (chat.usernames == null) {
                    chat.usernames = new ArrayList<>();
                }
                TLRPC$TL_username tLRPC$TL_username2 = new TLRPC$TL_username();
                tLRPC$TL_username2.username = str;
                tLRPC$TL_username2.active = true;
                tLRPC$TL_username2.editable = true;
                chat.usernames.add(0, tLRPC$TL_username2);
            } else {
                chat.username = str;
            }
        }
        ArrayList<TLRPC$Chat> arrayList2 = new ArrayList<>();
        arrayList2.add(chat);
        getMessagesStorage().putUsersAndChats(null, arrayList2, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        if (runnable != null) {
            runnable.run();
        }
    }

    public void sendBotStart(TLRPC$User tLRPC$User, String str) {
        if (tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
        tLRPC$TL_messages_startBot.bot = getInputUser(tLRPC$User);
        tLRPC$TL_messages_startBot.peer = getInputPeer(tLRPC$User.id);
        tLRPC$TL_messages_startBot.start_param = str;
        tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
        getConnectionsManager().sendRequest(tLRPC$TL_messages_startBot, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendBotStart$247(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$sendBotStart$247(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
    }

    public boolean isJoiningChannel(long j) {
        return this.joiningToChannels.contains(Long.valueOf(j));
    }

    public void addUserToChat(long j, TLRPC$User tLRPC$User, int i, String str, BaseFragment baseFragment, Runnable runnable) {
        addUserToChat(j, tLRPC$User, i, str, baseFragment, false, runnable, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void addUserToChat(final long j, TLRPC$User tLRPC$User, int i, String str, final BaseFragment baseFragment, final boolean z, final Runnable runnable, final ErrorDelegate errorDelegate) {
        TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser;
        if (tLRPC$User == null) {
            if (errorDelegate == null) {
                return;
            }
            errorDelegate.run(null);
            return;
        }
        final boolean isChannel = ChatObject.isChannel(j, this.currentAccount);
        final boolean z2 = isChannel && getChat(Long.valueOf(j)).megagroup;
        final TLRPC$InputUser inputUser = getInputUser(tLRPC$User);
        if (str != null && (!isChannel || z2)) {
            TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
            tLRPC$TL_messages_startBot.bot = inputUser;
            if (isChannel) {
                tLRPC$TL_messages_startBot.peer = getInputPeer(-j);
            } else {
                TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                tLRPC$TL_messages_startBot.peer = tLRPC$TL_inputPeerChat;
                tLRPC$TL_inputPeerChat.chat_id = j;
            }
            tLRPC$TL_messages_startBot.start_param = str;
            tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
            tLRPC$TL_messages_addChatUser = tLRPC$TL_messages_startBot;
        } else if (isChannel) {
            if (inputUser instanceof TLRPC$TL_inputUserSelf) {
                if (this.joiningToChannels.contains(Long.valueOf(j))) {
                    if (errorDelegate == null) {
                        return;
                    }
                    errorDelegate.run(null);
                    return;
                }
                TLRPC$TL_channels_joinChannel tLRPC$TL_channels_joinChannel = new TLRPC$TL_channels_joinChannel();
                tLRPC$TL_channels_joinChannel.channel = getInputChannel(j);
                this.joiningToChannels.add(Long.valueOf(j));
                tLRPC$TL_messages_addChatUser = tLRPC$TL_channels_joinChannel;
            } else {
                TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
                tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(j);
                tLRPC$TL_channels_inviteToChannel.users.add(inputUser);
                tLRPC$TL_messages_addChatUser = tLRPC$TL_channels_inviteToChannel;
            }
        } else {
            TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser2 = new TLRPC$TL_messages_addChatUser();
            tLRPC$TL_messages_addChatUser2.chat_id = j;
            tLRPC$TL_messages_addChatUser2.fwd_limit = i;
            tLRPC$TL_messages_addChatUser2.user_id = inputUser;
            tLRPC$TL_messages_addChatUser = tLRPC$TL_messages_addChatUser2;
        }
        final TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser3 = tLRPC$TL_messages_addChatUser;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_addChatUser3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda348
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$addUserToChat$252(isChannel, inputUser, j, z, runnable, errorDelegate, baseFragment, tLRPC$TL_messages_addChatUser3, z2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$addUserToChat$252(final boolean z, final TLRPC$InputUser tLRPC$InputUser, final long j, boolean z2, Runnable runnable, final ErrorDelegate errorDelegate, final BaseFragment baseFragment, final TLObject tLObject, final boolean z3, TLObject tLObject2, final TLRPC$TL_error tLRPC$TL_error) {
        boolean z4;
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda65
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$248(j);
                }
            });
        }
        if (tLRPC$TL_error != null) {
            if (!"USER_ALREADY_PARTICIPANT".equals(tLRPC$TL_error.text) || !z2) {
                if (errorDelegate != null) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda134
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$addUserToChat$249(errorDelegate, tLRPC$TL_error, baseFragment, tLObject, z, z3);
                        }
                    });
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda135
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUserToChat$250(errorDelegate, tLRPC$TL_error, baseFragment, tLObject, z, z3, tLRPC$InputUser);
                    }
                });
                return;
            } else if (runnable == null) {
                return;
            } else {
                AndroidUtilities.runOnUIThread(runnable);
                return;
            }
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject2;
        int i = 0;
        while (true) {
            if (i >= tLRPC$Updates.updates.size()) {
                z4 = false;
                break;
            }
            TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) && (((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action instanceof TLRPC$TL_messageActionChatAddUser)) {
                z4 = true;
                break;
            }
            i++;
        }
        processUpdates(tLRPC$Updates, false);
        if (z) {
            if (!z4 && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
                generateJoinMessage(j, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda70
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$251(j);
                }
            }, 1000L);
        }
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(-j, j, new ArrayList<>(), null, true);
        }
        if (runnable == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    public /* synthetic */ void lambda$addUserToChat$248(long j) {
        this.joiningToChannels.remove(Long.valueOf(j));
    }

    public /* synthetic */ void lambda$addUserToChat$249(ErrorDelegate errorDelegate, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2) {
        if (errorDelegate.run(tLRPC$TL_error)) {
            int i = this.currentAccount;
            boolean z3 = true;
            Object[] objArr = new Object[1];
            if (!z || z2) {
                z3 = false;
            }
            objArr[0] = Boolean.valueOf(z3);
            AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        }
    }

    public /* synthetic */ void lambda$addUserToChat$250(ErrorDelegate errorDelegate, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC$InputUser tLRPC$InputUser) {
        if (errorDelegate == null) {
            int i = this.currentAccount;
            Object[] objArr = new Object[1];
            objArr[0] = Boolean.valueOf(z && !z2);
            AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        }
        if (!z || !(tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public /* synthetic */ void lambda$addUserToChat$251(long j) {
        loadFullChat(j, 0, true);
    }

    public void deleteParticipantFromChat(long j, TLRPC$User tLRPC$User) {
        deleteParticipantFromChat(j, tLRPC$User, null, false, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void deleteParticipantFromChat(final long j, final TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, boolean z, boolean z2) {
        TLRPC$InputPeer inputPeer;
        TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser;
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            inputPeer = getInputPeer(tLRPC$User);
        } else {
            inputPeer = getInputPeer(tLRPC$Chat);
        }
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        final boolean isChannel = ChatObject.isChannel(chat);
        if (isChannel) {
            if (UserObject.isUserSelf(tLRPC$User)) {
                if (chat.creator && z) {
                    TLRPC$TL_channels_deleteChannel tLRPC$TL_channels_deleteChannel = new TLRPC$TL_channels_deleteChannel();
                    tLRPC$TL_channels_deleteChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_deleteChannel;
                } else {
                    TLRPC$TL_channels_leaveChannel tLRPC$TL_channels_leaveChannel = new TLRPC$TL_channels_leaveChannel();
                    tLRPC$TL_channels_leaveChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_leaveChannel;
                }
            } else {
                TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
                tLRPC$TL_channels_editBanned.channel = getInputChannel(chat);
                tLRPC$TL_channels_editBanned.participant = inputPeer;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = new TLRPC$TL_chatBannedRights();
                tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
                tLRPC$TL_chatBannedRights.view_messages = true;
                tLRPC$TL_chatBannedRights.send_media = true;
                tLRPC$TL_chatBannedRights.send_messages = true;
                tLRPC$TL_chatBannedRights.send_stickers = true;
                tLRPC$TL_chatBannedRights.send_gifs = true;
                tLRPC$TL_chatBannedRights.send_games = true;
                tLRPC$TL_chatBannedRights.send_inline = true;
                tLRPC$TL_chatBannedRights.embed_links = true;
                tLRPC$TL_chatBannedRights.pin_messages = true;
                tLRPC$TL_chatBannedRights.send_polls = true;
                tLRPC$TL_chatBannedRights.invite_users = true;
                tLRPC$TL_chatBannedRights.change_info = true;
                tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_editBanned;
            }
        } else if (z) {
            TLRPC$TL_messages_deleteChat tLRPC$TL_messages_deleteChat = new TLRPC$TL_messages_deleteChat();
            tLRPC$TL_messages_deleteChat.chat_id = j;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChat, MessagesController$$ExternalSyntheticLambda366.INSTANCE);
            return;
        } else {
            TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser2 = new TLRPC$TL_messages_deleteChatUser();
            tLRPC$TL_messages_deleteChatUser2.chat_id = j;
            tLRPC$TL_messages_deleteChatUser2.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_messages_deleteChatUser2.revoke_history = true;
            tLRPC$TL_messages_deleteChatUser = tLRPC$TL_messages_deleteChatUser2;
        }
        if (UserObject.isUserSelf(tLRPC$User)) {
            deleteDialog(-j, 0, z2);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChatUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda350
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteParticipantFromChat$255(isChannel, tLRPC$User, j, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$255(boolean z, TLRPC$User tLRPC$User, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
        if (!z || UserObject.isUserSelf(tLRPC$User)) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteParticipantFromChat$254(j);
            }
        }, 1000L);
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$254(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatTitle(long j, String str) {
        TLRPC$TL_messages_editChatTitle tLRPC$TL_messages_editChatTitle;
        if (ChatObject.isChannel(j, this.currentAccount)) {
            TLRPC$TL_channels_editTitle tLRPC$TL_channels_editTitle = new TLRPC$TL_channels_editTitle();
            tLRPC$TL_channels_editTitle.channel = getInputChannel(j);
            tLRPC$TL_channels_editTitle.title = str;
            tLRPC$TL_messages_editChatTitle = tLRPC$TL_channels_editTitle;
        } else {
            TLRPC$TL_messages_editChatTitle tLRPC$TL_messages_editChatTitle2 = new TLRPC$TL_messages_editChatTitle();
            tLRPC$TL_messages_editChatTitle2.chat_id = j;
            tLRPC$TL_messages_editChatTitle2.title = str;
            tLRPC$TL_messages_editChatTitle = tLRPC$TL_messages_editChatTitle2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatTitle, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda261
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$changeChatTitle$256(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$changeChatTitle$256(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatAvatar(long j, final TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$InputFile tLRPC$InputFile, TLRPC$InputFile tLRPC$InputFile2, double d, final String str, final TLRPC$FileLocation tLRPC$FileLocation, final TLRPC$FileLocation tLRPC$FileLocation2, final Runnable runnable) {
        MessagesController messagesController;
        TLRPC$InputChatPhoto tLRPC$InputChatPhoto;
        TLRPC$TL_messages_editChatPhoto tLRPC$TL_messages_editChatPhoto;
        if (tLRPC$TL_inputChatPhoto != null) {
            messagesController = this;
            tLRPC$InputChatPhoto = tLRPC$TL_inputChatPhoto;
        } else if (tLRPC$InputFile != null || tLRPC$InputFile2 != null) {
            TLRPC$TL_inputChatUploadedPhoto tLRPC$TL_inputChatUploadedPhoto = new TLRPC$TL_inputChatUploadedPhoto();
            if (tLRPC$InputFile != null) {
                tLRPC$TL_inputChatUploadedPhoto.file = tLRPC$InputFile;
                tLRPC$TL_inputChatUploadedPhoto.flags |= 1;
            }
            if (tLRPC$InputFile2 != null) {
                tLRPC$TL_inputChatUploadedPhoto.video = tLRPC$InputFile2;
                int i = tLRPC$TL_inputChatUploadedPhoto.flags | 2;
                tLRPC$TL_inputChatUploadedPhoto.flags = i;
                tLRPC$TL_inputChatUploadedPhoto.video_start_ts = d;
                tLRPC$TL_inputChatUploadedPhoto.flags = i | 4;
            }
            messagesController = this;
            tLRPC$InputChatPhoto = tLRPC$TL_inputChatUploadedPhoto;
        } else {
            tLRPC$InputChatPhoto = new TLRPC$InputChatPhoto() { // from class: org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
                public static int constructor = 480546647;

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(constructor);
                }
            };
            messagesController = this;
        }
        if (ChatObject.isChannel(j, messagesController.currentAccount)) {
            TLRPC$TL_channels_editPhoto tLRPC$TL_channels_editPhoto = new TLRPC$TL_channels_editPhoto();
            tLRPC$TL_channels_editPhoto.channel = getInputChannel(j);
            tLRPC$TL_channels_editPhoto.photo = tLRPC$InputChatPhoto;
            tLRPC$TL_messages_editChatPhoto = tLRPC$TL_channels_editPhoto;
        } else {
            TLRPC$TL_messages_editChatPhoto tLRPC$TL_messages_editChatPhoto2 = new TLRPC$TL_messages_editChatPhoto();
            tLRPC$TL_messages_editChatPhoto2.chat_id = j;
            tLRPC$TL_messages_editChatPhoto2.photo = tLRPC$InputChatPhoto;
            tLRPC$TL_messages_editChatPhoto = tLRPC$TL_messages_editChatPhoto2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatPhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda337
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$changeChatAvatar$258(tLRPC$TL_inputChatPhoto, tLRPC$FileLocation, tLRPC$FileLocation2, str, runnable, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$changeChatAvatar$258(TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$FileLocation tLRPC$FileLocation, TLRPC$FileLocation tLRPC$FileLocation2, String str, final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$VideoSize tLRPC$VideoSize;
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error != null) {
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        if (tLRPC$TL_inputChatPhoto == null) {
            int size = tLRPC$Updates.updates.size();
            int i = 0;
            while (true) {
                tLRPC$VideoSize = null;
                if (i >= size) {
                    tLRPC$Photo = null;
                    break;
                }
                TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                    TLRPC$MessageAction tLRPC$MessageAction = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatEditPhoto) {
                        tLRPC$Photo = tLRPC$MessageAction.photo;
                        if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                            break;
                        }
                    } else {
                        continue;
                    }
                    i++;
                } else {
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction2 = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction2.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    i++;
                }
            }
            if (tLRPC$Photo != null) {
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                if (!tLRPC$Photo.video_sizes.isEmpty()) {
                    tLRPC$VideoSize = tLRPC$Photo.video_sizes.get(0);
                }
                if (closestPhotoSizeWithSize != null && tLRPC$FileLocation != null) {
                    getFileLoader().getPathToAttach(tLRPC$FileLocation, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize, true));
                    ImageLoader.getInstance().replaceImageInCache(tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + "@50_50", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@50_50", ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo), true);
                }
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 800);
                if (closestPhotoSizeWithSize2 != null && tLRPC$FileLocation2 != null) {
                    getFileLoader().getPathToAttach(tLRPC$FileLocation2, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize2, true));
                }
                if (tLRPC$VideoSize != null && str != null) {
                    new File(str).renameTo(getFileLoader().getPathToAttach(tLRPC$VideoSize, "mp4", true));
                }
            }
        }
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$changeChatAvatar$257(runnable);
            }
        });
    }

    public /* synthetic */ void lambda$changeChatAvatar$257(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
    }

    public void unregistedPush() {
        if (!getUserConfig().registeredForPush || SharedConfig.pushString.length() != 0) {
            return;
        }
        TLRPC$TL_account_unregisterDevice tLRPC$TL_account_unregisterDevice = new TLRPC$TL_account_unregisterDevice();
        tLRPC$TL_account_unregisterDevice.token = SharedConfig.pushString;
        tLRPC$TL_account_unregisterDevice.token_type = SharedConfig.pushType;
        for (int i = 0; i < 4; i++) {
            UserConfig userConfig = UserConfig.getInstance(i);
            if (i != this.currentAccount && userConfig.isClientActivated()) {
                tLRPC$TL_account_unregisterDevice.other_uids.add(Long.valueOf(userConfig.getClientUserId()));
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_unregisterDevice, MessagesController$$ExternalSyntheticLambda354.INSTANCE);
    }

    public void performLogout(int i) {
        boolean z = true;
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_auth_logOut
                public static int constructor = 1047706137;

                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i2, boolean z2) {
                    return TLRPC$TL_auth_loggedOut.TLdeserialize(abstractSerializedData, i2, z2);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(constructor);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda254
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$performLogout$261(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            getConnectionsManager().cleanup(i == 2);
        }
        getUserConfig().clearConfig();
        SharedPrefsHelper.cleanupAccount(this.currentAccount);
        ArrayList<NotificationCenter.NotificationCenterDelegate> observers = getNotificationCenter().getObservers(NotificationCenter.appDidLogout);
        if (observers != null) {
            int size = observers.size();
            int i2 = 0;
            while (true) {
                if (i2 >= size) {
                    break;
                } else if (observers.get(i2) instanceof LaunchActivity) {
                    z = false;
                    break;
                } else {
                    i2++;
                }
            }
        }
        if (z && UserConfig.selectedAccount == this.currentAccount) {
            int i3 = 0;
            while (true) {
                if (i3 >= 4) {
                    i3 = -1;
                    break;
                } else if (UserConfig.getInstance(i3).isClientActivated()) {
                    break;
                } else {
                    i3++;
                }
            }
            if (i3 != -1) {
                UserConfig.selectedAccount = i3;
                UserConfig.getInstance(0).saveConfig(false);
                LaunchActivity.clearFragments();
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    public /* synthetic */ void lambda$performLogout$261(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getConnectionsManager().cleanup(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$performLogout$260(TLObject.this);
            }
        });
    }

    public static /* synthetic */ void lambda$performLogout$260(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_auth_loggedOut) {
            TLRPC$TL_auth_loggedOut tLRPC$TL_auth_loggedOut = (TLRPC$TL_auth_loggedOut) tLObject;
            if (tLRPC$TL_auth_loggedOut.future_auth_token == null) {
                return;
            }
            SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
            int i = sharedPreferences.getInt(NotificationBadge.NewHtcHomeBadger.COUNT, 0);
            SerializedData serializedData = new SerializedData(tLObject.getObjectSize());
            tLRPC$TL_auth_loggedOut.serializeToStream(serializedData);
            SharedPreferences.Editor edit = sharedPreferences.edit();
            edit.putString("log_out_token_" + i, Utilities.bytesToHex(serializedData.toByteArray())).putInt(NotificationBadge.NewHtcHomeBadger.COUNT, i + 1).apply();
        }
    }

    public static ArrayList<TLRPC$TL_auth_loggedOut> getSavedLogOutTokens() {
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
        int i = sharedPreferences.getInt(NotificationBadge.NewHtcHomeBadger.COUNT, 0);
        if (i == 0) {
            return null;
        }
        ArrayList<TLRPC$TL_auth_loggedOut> arrayList = new ArrayList<>();
        for (int i2 = 0; i2 < i; i2++) {
            SerializedData serializedData = new SerializedData(Utilities.hexToBytes(sharedPreferences.getString("log_out_token_" + i2, "")));
            TLRPC$TL_auth_loggedOut TLdeserialize = TLRPC$TL_auth_loggedOut.TLdeserialize(serializedData, serializedData.readInt32(true), true);
            if (TLdeserialize != null) {
                arrayList.add(TLdeserialize);
            }
        }
        return arrayList;
    }

    public static void saveLogOutTokens(ArrayList<TLRPC$TL_auth_loggedOut> arrayList) {
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
        ArrayList arrayList2 = new ArrayList();
        sharedPreferences.edit().clear().apply();
        long currentTimeMillis = System.currentTimeMillis() / 1000;
        for (int i = 0; i < Math.min(20, arrayList.size()); i++) {
            arrayList2.add(arrayList.get(i));
        }
        if (arrayList2.size() > 0) {
            SharedPreferences.Editor edit = sharedPreferences.edit();
            edit.putInt(NotificationBadge.NewHtcHomeBadger.COUNT, arrayList2.size());
            for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                SerializedData serializedData = new SerializedData(((TLRPC$TL_auth_loggedOut) arrayList2.get(i2)).getObjectSize());
                ((TLRPC$TL_auth_loggedOut) arrayList2.get(i2)).serializeToStream(serializedData);
                edit.putString("log_out_token_" + i2, Utilities.bytesToHex(serializedData.toByteArray()));
            }
            edit.apply();
        }
    }

    public void generateUpdateMessage() {
        String str;
        if (this.gettingAppChangelog || BuildVars.DEBUG_VERSION || (str = SharedConfig.lastUpdateVersion) == null || str.equals(BuildVars.BUILD_VERSION_STRING)) {
            return;
        }
        this.gettingAppChangelog = true;
        TLRPC$TL_help_getAppChangelog tLRPC$TL_help_getAppChangelog = new TLRPC$TL_help_getAppChangelog();
        tLRPC$TL_help_getAppChangelog.prev_app_version = SharedConfig.lastUpdateVersion;
        getConnectionsManager().sendRequest(tLRPC$TL_help_getAppChangelog, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda266
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$generateUpdateMessage$262(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$generateUpdateMessage$262(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (tLObject instanceof TLRPC$Updates) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void registerForPush(final int i, final String str) {
        if (TextUtils.isEmpty(str) || this.registeringForPush || getUserConfig().getClientUserId() == 0) {
            return;
        }
        if (getUserConfig().registeredForPush && str.equals(SharedConfig.pushString)) {
            return;
        }
        this.registeringForPush = true;
        this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
        if (SharedConfig.pushAuthKey == null) {
            SharedConfig.pushAuthKey = new byte[256];
            Utilities.random.nextBytes(SharedConfig.pushAuthKey);
            SharedConfig.saveConfig();
        }
        TLRPC$TL_account_registerDevice tLRPC$TL_account_registerDevice = new TLRPC$TL_account_registerDevice();
        tLRPC$TL_account_registerDevice.token_type = i;
        tLRPC$TL_account_registerDevice.token = str;
        tLRPC$TL_account_registerDevice.no_muted = false;
        tLRPC$TL_account_registerDevice.secret = SharedConfig.pushAuthKey;
        for (int i2 = 0; i2 < 4; i2++) {
            UserConfig userConfig = UserConfig.getInstance(i2);
            if (i2 != this.currentAccount && userConfig.isClientActivated()) {
                long clientUserId = userConfig.getClientUserId();
                tLRPC$TL_account_registerDevice.other_uids.add(Long.valueOf(clientUserId));
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                }
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_registerDevice, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda279
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$registerForPush$264(i, str, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$registerForPush$264(int i, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push, push type: " + i);
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            SharedConfig.pushType = i;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$registerForPush$263();
            }
        });
    }

    public /* synthetic */ void lambda$registerForPush$263() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (this.updatingState) {
            return;
        }
        this.updatingState = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_updates_getState
            public static int constructor = -304838614;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$TL_updates_state.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda247
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadCurrentState$265(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadCurrentState$265(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.updatingState = false;
        if (tLRPC$TL_error == null) {
            TLRPC$TL_updates_state tLRPC$TL_updates_state = (TLRPC$TL_updates_state) tLObject;
            getMessagesStorage().setLastDateValue(tLRPC$TL_updates_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$TL_updates_state.pts);
            getMessagesStorage().setLastSeqValue(tLRPC$TL_updates_state.seq);
            getMessagesStorage().setLastQtsValue(tLRPC$TL_updates_state.qts);
            for (int i = 0; i < 3; i++) {
                processUpdatesQueue(i, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (tLRPC$TL_error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC$Updates tLRPC$Updates) {
        if (tLRPC$Updates instanceof TLRPC$TL_updatesCombined) {
            return tLRPC$Updates.seq_start;
        }
        return tLRPC$Updates.seq;
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i != 2) {
        } else {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i != 2) {
            return 0L;
        }
        return this.updatesStartWaitTimeQts;
    }

    private int isValidUpdate(TLRPC$Updates tLRPC$Updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(tLRPC$Updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        } else if (i == 1) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts ? 0 : 1;
        } else if (i != 2) {
            return 0;
        } else {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + tLRPC$Updates.updates.size() == tLRPC$Updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(long j, int i) {
        char c;
        ArrayList<TLRPC$Updates> arrayList = this.updatesQueueChannels.get(j);
        if (arrayList == null) {
            return;
        }
        int i2 = this.channelsPts.get(j);
        if (arrayList.isEmpty() || i2 == 0) {
            this.updatesQueueChannels.remove(j);
            return;
        }
        Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda233.INSTANCE);
        if (i == 2) {
            this.channelsPts.put(j, arrayList.get(0).pts);
        }
        boolean z = false;
        while (arrayList.size() > 0) {
            TLRPC$Updates tLRPC$Updates = arrayList.get(0);
            int i3 = tLRPC$Updates.pts;
            if (i3 <= i2) {
                c = 2;
            } else {
                c = tLRPC$Updates.pts_count + i2 == i3 ? (char) 0 : (char) 1;
            }
            if (c == 0) {
                processUpdates(tLRPC$Updates, true);
                arrayList.remove(0);
                z = true;
            } else if (c == 1) {
                long j2 = this.updatesStartWaitTimeChannels.get(j);
                if (j2 != 0 && (z || Math.abs(System.currentTimeMillis() - j2) <= 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - will wait more time");
                    }
                    if (!z) {
                        return;
                    }
                    this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                    return;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - getChannelDifference ");
                }
                this.updatesStartWaitTimeChannels.delete(j);
                this.updatesQueueChannels.remove(j);
                getChannelDifference(j);
                return;
            } else {
                arrayList.remove(0);
            }
        }
        this.updatesQueueChannels.remove(j);
        this.updatesStartWaitTimeChannels.delete(j);
        if (!BuildVars.LOGS_ENABLED) {
            return;
        }
        FileLog.d("UPDATES CHANNEL " + j + " QUEUE PROCEED - OK");
    }

    public static /* synthetic */ int lambda$processChannelsUpdatesQueue$266(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC$Updates> arrayList;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda230
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$267;
                    lambda$processUpdatesQueue$267 = MessagesController.this.lambda$processUpdatesQueue$267((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                    return lambda$processUpdatesQueue$267;
                }
            });
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda234.INSTANCE);
        } else if (i == 2) {
            arrayList = this.updatesQueueQts;
            Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda232.INSTANCE);
        } else {
            arrayList = null;
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            if (i2 == 2) {
                TLRPC$Updates tLRPC$Updates = arrayList.get(0);
                if (i == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(tLRPC$Updates));
                } else if (i == 1) {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(tLRPC$Updates.pts);
                }
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates2 = arrayList.get(0);
                int isValidUpdate = isValidUpdate(tLRPC$Updates2, i);
                if (isValidUpdate == 0) {
                    processUpdates(tLRPC$Updates2, true);
                    arrayList.remove(0);
                    z = true;
                } else if (isValidUpdate == 1) {
                    if (getUpdatesStartTime(i) != 0 && (z || Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) <= 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                        }
                        if (!z) {
                            return;
                        }
                        setUpdatesStartTime(i, System.currentTimeMillis());
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(i, 0L);
                    arrayList.clear();
                    getDifference();
                    return;
                } else {
                    arrayList.remove(0);
                }
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(i, 0L);
    }

    public /* synthetic */ int lambda$processUpdatesQueue$267(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(getUpdateSeq(tLRPC$Updates), getUpdateSeq(tLRPC$Updates2));
    }

    public static /* synthetic */ int lambda$processUpdatesQueue$268(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    public static /* synthetic */ int lambda$processUpdatesQueue$269(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    public void loadUnknownChannel(final TLRPC$Chat tLRPC$Chat, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (!(tLRPC$Chat instanceof TLRPC$TL_channel) || this.gettingUnknownChannels.indexOfKey(tLRPC$Chat.id) >= 0) {
            return;
        }
        if (tLRPC$Chat.access_hash == 0) {
            if (j == 0) {
                return;
            }
            getMessagesStorage().removePendingTask(j);
            return;
        }
        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
        long j2 = tLRPC$Chat.id;
        tLRPC$TL_inputPeerChannel.channel_id = j2;
        tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
        this.gettingUnknownChannels.put(j2, Boolean.TRUE);
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize() + 4);
                try {
                    nativeByteBuffer.writeInt32(0);
                    tLRPC$Chat.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda315
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadUnknownChannel$270(j, tLRPC$Chat, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e3) {
                nativeByteBuffer = null;
                e = e3;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda315
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnknownChannel$270(j, tLRPC$Chat, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnknownChannel$270(long j, TLRPC$Chat tLRPC$Chat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty() && !tLRPC$TL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(tLRPC$Chat.id);
    }

    public void startShortPoll(final TLRPC$Chat tLRPC$Chat, final int i, final boolean z) {
        if (tLRPC$Chat == null) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$startShortPoll$271(tLRPC$Chat, z, i);
            }
        });
    }

    public /* synthetic */ void lambda$startShortPoll$271(TLRPC$Chat tLRPC$Chat, boolean z, int i) {
        ArrayList<Integer> arrayList = this.needShortPollChannels.get(tLRPC$Chat.id);
        ArrayList<Integer> arrayList2 = this.needShortPollOnlines.get(tLRPC$Chat.id);
        if (z) {
            if (arrayList != null) {
                arrayList.remove(Integer.valueOf(i));
            }
            if (arrayList == null || arrayList.isEmpty()) {
                this.needShortPollChannels.delete(tLRPC$Chat.id);
            }
            if (!tLRPC$Chat.megagroup) {
                return;
            }
            if (arrayList2 != null) {
                arrayList2.remove(Integer.valueOf(i));
            }
            if (arrayList2 != null && !arrayList2.isEmpty()) {
                return;
            }
            this.needShortPollOnlines.delete(tLRPC$Chat.id);
            return;
        }
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.needShortPollChannels.put(tLRPC$Chat.id, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(i))) {
            arrayList.add(Integer.valueOf(i));
        }
        if (this.shortPollChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            getChannelDifference(tLRPC$Chat.id, 3, 0L, null);
        }
        if (!tLRPC$Chat.megagroup) {
            return;
        }
        if (arrayList2 == null) {
            arrayList2 = new ArrayList<>();
            this.needShortPollOnlines.put(tLRPC$Chat.id, arrayList2);
        }
        if (!arrayList2.contains(Integer.valueOf(i))) {
            arrayList2.add(Integer.valueOf(i));
        }
        if (this.shortPollOnlines.indexOfKey(tLRPC$Chat.id) >= 0) {
            return;
        }
        this.shortPollOnlines.put(tLRPC$Chat.id, 0);
    }

    private void getChannelDifference(long j) {
        getChannelDifference(j, 0, 0L, null);
    }

    public static boolean isSupportUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User != null) {
            if (!tLRPC$User.support) {
                long j = tLRPC$User.id;
                if (j == 777000 || j == 333000 || j == 4240000 || j == 4244000 || j == 4245000 || j == 4246000 || j == 410000 || j == 420000 || j == 431000 || j == 431415000 || j == 434000 || j == 4243000 || j == 439000 || j == 449000 || j == 450000 || j == 452000 || j == 454000 || j == 4254000 || j == 455000 || j == 460000 || j == 470000 || j == 479000 || j == 796000 || j == 482000 || j == 490000 || j == 496000 || j == 497000 || j == 498000 || j == 4298000) {
                }
            }
            return true;
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x00cd  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00d4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void getChannelDifference(final long j, final int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        int i2;
        TLRPC$InputChannel tLRPC$InputChannel2;
        NativeByteBuffer nativeByteBuffer;
        long j3 = j2;
        if (this.gettingDifferenceChannels.get(j, Boolean.FALSE).booleanValue()) {
            return;
        }
        int i3 = 100;
        boolean z = true;
        if (i == 1) {
            if (this.channelsPts.get(j) != 0) {
                return;
            }
            i3 = 1;
            i2 = 1;
        } else {
            i2 = this.channelsPts.get(j);
            if (i2 == 0) {
                i2 = getMessagesStorage().getChannelPtsSync(j);
                if (i2 != 0) {
                    this.channelsPts.put(j, i2);
                }
                if (i2 == 0 && (i == 2 || i == 3)) {
                    return;
                }
            }
            if (i2 == 0) {
                return;
            }
        }
        if (tLRPC$InputChannel == null) {
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (chat == null && (chat = getMessagesStorage().getChatSync(j)) != null) {
                putChat(chat, true);
            }
            tLRPC$InputChannel2 = getInputChannel(chat);
        } else {
            tLRPC$InputChannel2 = tLRPC$InputChannel;
        }
        if (tLRPC$InputChannel2.access_hash == 0) {
            if (j3 == 0) {
                return;
            }
            getMessagesStorage().removePendingTask(j3);
            return;
        }
        if (j3 == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputChannel2.getObjectSize() + 16);
                try {
                    nativeByteBuffer.writeInt32(25);
                    nativeByteBuffer.writeInt64(j);
                    nativeByteBuffer.writeInt32(i);
                    tLRPC$InputChannel2.serializeToStream(nativeByteBuffer);
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    final long j4 = j3;
                    this.gettingDifferenceChannels.put(j, Boolean.TRUE);
                    TLRPC$TL_updates_getChannelDifference tLRPC$TL_updates_getChannelDifference = new TLRPC$TL_updates_getChannelDifference();
                    tLRPC$TL_updates_getChannelDifference.channel = tLRPC$InputChannel2;
                    tLRPC$TL_updates_getChannelDifference.filter = new TLRPC$ChannelMessagesFilter() { // from class: org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
                        public static int constructor = -1798033689;

                        @Override // org.telegram.tgnet.TLObject
                        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                            abstractSerializedData.writeInt32(constructor);
                        }
                    };
                    tLRPC$TL_updates_getChannelDifference.pts = i2;
                    tLRPC$TL_updates_getChannelDifference.limit = i3;
                    if (i == 3) {
                    }
                    tLRPC$TL_updates_getChannelDifference.force = z;
                    if (BuildVars.LOGS_ENABLED) {
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_updates_getChannelDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda302
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$getChannelDifference$280(j, i, j4, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e2) {
                e = e2;
            }
            j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j42 = j3;
        this.gettingDifferenceChannels.put(j, Boolean.TRUE);
        TLRPC$TL_updates_getChannelDifference tLRPC$TL_updates_getChannelDifference2 = new TLRPC$TL_updates_getChannelDifference();
        tLRPC$TL_updates_getChannelDifference2.channel = tLRPC$InputChannel2;
        tLRPC$TL_updates_getChannelDifference2.filter = new TLRPC$ChannelMessagesFilter() { // from class: org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
            public static int constructor = -1798033689;

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        };
        tLRPC$TL_updates_getChannelDifference2.pts = i2;
        tLRPC$TL_updates_getChannelDifference2.limit = i3;
        if (i == 3) {
            z = false;
        }
        tLRPC$TL_updates_getChannelDifference2.force = z;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start getChannelDifference with pts = " + i2 + " channelId = " + j);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_updates_getChannelDifference2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda302
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getChannelDifference$280(j, i, j42, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$280(final long j, final int i, final long j2, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        final TLRPC$Chat tLRPC$Chat;
        if (tLObject == null) {
            if (tLRPC$TL_error == null) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda169
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$279(tLRPC$TL_error, j);
                }
            });
            this.gettingDifferenceChannels.delete(j);
            if (j2 == 0) {
                return;
            }
            getMessagesStorage().removePendingTask(j2);
            return;
        }
        final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference = (TLRPC$updates_ChannelDifference) tLObject;
        final LongSparseArray longSparseArray = new LongSparseArray();
        int i2 = 0;
        for (int i3 = 0; i3 < tLRPC$updates_ChannelDifference.users.size(); i3++) {
            TLRPC$User tLRPC$User = tLRPC$updates_ChannelDifference.users.get(i3);
            longSparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        int i4 = 0;
        while (true) {
            if (i4 >= tLRPC$updates_ChannelDifference.chats.size()) {
                tLRPC$Chat = null;
                break;
            }
            tLRPC$Chat = tLRPC$updates_ChannelDifference.chats.get(i4);
            if (tLRPC$Chat.id == j) {
                break;
            }
            i4++;
        }
        final ArrayList arrayList = new ArrayList();
        if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
            while (i2 < tLRPC$updates_ChannelDifference.other_updates.size()) {
                TLRPC$Update tLRPC$Update = tLRPC$updates_ChannelDifference.other_updates.get(i2);
                if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                    arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                    tLRPC$updates_ChannelDifference.other_updates.remove(i2);
                    i2--;
                }
                i2++;
            }
        }
        getMessagesStorage().putUsersAndChats(tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, true);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda205
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$272(tLRPC$updates_ChannelDifference);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$278(arrayList, j, tLRPC$updates_ChannelDifference, tLRPC$Chat, longSparseArray, i, j2);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$272(TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        putUsers(tLRPC$updates_ChannelDifference.users, false);
        putChats(tLRPC$updates_ChannelDifference.chats, false);
    }

    public /* synthetic */ void lambda$getChannelDifference$278(ArrayList arrayList, final long j, final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, final TLRPC$Chat tLRPC$Chat, final LongSparseArray longSparseArray, final int i, final long j2) {
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, -j, null, tLRPC$TL_updateMessageID.id, 0, false, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$273(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$277(tLRPC$updates_ChannelDifference, j, tLRPC$Chat, longSparseArray, i, j2);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$273(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:72:0x0173  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelDifference$277(final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, long j, TLRPC$Chat tLRPC$Chat, LongSparseArray longSparseArray, int i, long j2) {
        boolean z;
        MessageObject messageObject;
        ArrayList arrayList;
        boolean z2;
        TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
        if ((tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifference) || (tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifferenceEmpty)) {
            if (!tLRPC$updates_ChannelDifference.new_messages.isEmpty()) {
                final LongSparseArray longSparseArray2 = new LongSparseArray();
                ImageLoader.saveMessagesThumbs(tLRPC$updates_ChannelDifference.new_messages);
                final ArrayList arrayList2 = new ArrayList();
                long j3 = -j;
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j3));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j3));
                    this.dialogs_read_inbox_max.put(Long.valueOf(j3), num);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j3));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j3));
                    this.dialogs_read_outbox_max.put(Long.valueOf(j3), num2);
                }
                int i2 = 0;
                while (i2 < tLRPC$updates_ChannelDifference.new_messages.size()) {
                    TLRPC$Message tLRPC$Message = tLRPC$updates_ChannelDifference.new_messages.get(i2);
                    if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                        if (tLRPC$Chat2 == null || !tLRPC$Chat2.left) {
                            if ((tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id && !(tLRPC$Message.action instanceof TLRPC$TL_messageActionChannelCreate)) {
                                z = true;
                                tLRPC$Message.unread = z;
                                boolean contains = this.createdDialogIds.contains(Long.valueOf(j3));
                                messageObject = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, contains, contains);
                                if ((messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                                    arrayList2.add(messageObject);
                                }
                                arrayList = (ArrayList) longSparseArray2.get(j3);
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                    longSparseArray2.put(j3, arrayList);
                                }
                                arrayList.add(messageObject);
                            }
                        }
                        z = false;
                        tLRPC$Message.unread = z;
                        boolean contains2 = this.createdDialogIds.contains(Long.valueOf(j3));
                        messageObject = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, contains2, contains2);
                        if (messageObject.isOut()) {
                        }
                        arrayList2.add(messageObject);
                        arrayList = (ArrayList) longSparseArray2.get(j3);
                        if (arrayList == null) {
                        }
                        arrayList.add(messageObject);
                    }
                    i2++;
                    tLRPC$Chat2 = tLRPC$Chat;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda99
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$274(longSparseArray2);
                    }
                });
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda128
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$276(arrayList2, tLRPC$updates_ChannelDifference);
                    }
                });
            }
            if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
                processUpdateArray(tLRPC$updates_ChannelDifference.other_updates, tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, 0);
            }
            processChannelsUpdatesQueue(j, 1);
            getMessagesStorage().saveChannelPts(j, tLRPC$updates_ChannelDifference.pts);
        } else if (tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifferenceTooLong) {
            long j4 = -j;
            Integer num3 = this.dialogs_read_inbox_max.get(Long.valueOf(j4));
            if (num3 == null) {
                num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j4));
                this.dialogs_read_inbox_max.put(Long.valueOf(j4), num3);
            }
            Integer num4 = this.dialogs_read_outbox_max.get(Long.valueOf(j4));
            if (num4 == null) {
                num4 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j4));
                this.dialogs_read_outbox_max.put(Long.valueOf(j4), num4);
            }
            for (int i3 = 0; i3 < tLRPC$updates_ChannelDifference.messages.size(); i3++) {
                TLRPC$Message tLRPC$Message2 = tLRPC$updates_ChannelDifference.messages.get(i3);
                tLRPC$Message2.dialog_id = j4;
                if (!(tLRPC$Message2.action instanceof TLRPC$TL_messageActionChannelCreate) && (tLRPC$Chat2 == null || !tLRPC$Chat2.left)) {
                    if ((tLRPC$Message2.out ? num4 : num3).intValue() < tLRPC$Message2.id) {
                        z2 = true;
                        tLRPC$Message2.unread = z2;
                    }
                }
                z2 = false;
                tLRPC$Message2.unread = z2;
            }
            getMessagesStorage().overwriteChannel(j, (TLRPC$TL_updates_channelDifferenceTooLong) tLRPC$updates_ChannelDifference, i);
        }
        this.gettingDifferenceChannels.delete(j);
        this.channelsPts.put(j, tLRPC$updates_ChannelDifference.pts);
        if ((tLRPC$updates_ChannelDifference.flags & 2) != 0) {
            this.shortPollChannels.put(j, ((int) (System.currentTimeMillis() / 1000)) + tLRPC$updates_ChannelDifference.timeout);
        }
        if (!tLRPC$updates_ChannelDifference.isFinal) {
            getChannelDifference(j);
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received channel difference with pts = " + tLRPC$updates_ChannelDifference.pts + " channelId = " + j);
            FileLog.d("new_messages = " + tLRPC$updates_ChannelDifference.new_messages.size() + " messages = " + tLRPC$updates_ChannelDifference.messages.size() + " users = " + tLRPC$updates_ChannelDifference.users.size() + " chats = " + tLRPC$updates_ChannelDifference.chats.size() + " other updates = " + tLRPC$updates_ChannelDifference.other_updates.size());
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
    }

    public /* synthetic */ void lambda$getChannelDifference$274(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$getChannelDifference$276(final ArrayList arrayList, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda115
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$275(arrayList);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_ChannelDifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false, 0);
    }

    public /* synthetic */ void lambda$getChannelDifference$275(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$getChannelDifference$279(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
    }

    private void checkChannelError(String str, long j) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1809401834:
                if (str.equals("USER_BANNED_IN_CHANNEL")) {
                    c = 0;
                    break;
                }
                break;
            case -795226617:
                if (str.equals("CHANNEL_PRIVATE")) {
                    c = 1;
                    break;
                }
                break;
            case -471086771:
                if (str.equals("CHANNEL_PUBLIC_GROUP_NA")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 2);
                return;
            case 1:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 0);
                return;
            case 2:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 1);
                return;
            default:
                return;
        }
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, final int i2, final int i3, boolean z) {
        registerForPush(SharedConfig.pushType, SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (!z && this.gettingDifference) {
        } else {
            this.gettingDifference = true;
            TLRPC$TL_updates_getDifference tLRPC$TL_updates_getDifference = new TLRPC$TL_updates_getDifference();
            tLRPC$TL_updates_getDifference.pts = i;
            tLRPC$TL_updates_getDifference.date = i2;
            tLRPC$TL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tLRPC$TL_updates_getDifference.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 5000;
                } else {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (tLRPC$TL_updates_getDifference.date == 0) {
                tLRPC$TL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tLRPC$TL_updates_getDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda271
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getDifference$290(i2, i3, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getDifference$290(final int i, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i3 = 0;
        if (tLRPC$TL_error == null) {
            final TLRPC$updates_Difference tLRPC$updates_Difference = (TLRPC$updates_Difference) tLObject;
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda208
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getDifference$281(tLRPC$updates_Difference, i, i2);
                    }
                });
                return;
            }
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
                TLRPC$TL_updates_state tLRPC$TL_updates_state = tLRPC$updates_Difference.intermediate_state;
                getDifference(tLRPC$TL_updates_state.pts, tLRPC$TL_updates_state.date, tLRPC$TL_updates_state.qts, true);
            }
            final LongSparseArray longSparseArray = new LongSparseArray();
            final LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i4 = 0; i4 < tLRPC$updates_Difference.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$updates_Difference.users.get(i4);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$updates_Difference.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$updates_Difference.chats.get(i5);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            final ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
                while (i3 < tLRPC$updates_Difference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_Difference.other_updates.get(i3);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_Difference.other_updates.remove(i3);
                    } else {
                        if (getUpdateType(tLRPC$Update) == 2) {
                            long updateChannelId = getUpdateChannelId(tLRPC$Update);
                            int i6 = this.channelsPts.get(updateChannelId);
                            if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                                this.channelsPts.put(updateChannelId, i6);
                            }
                            if (i6 != 0 && getUpdatePts(tLRPC$Update) <= i6) {
                                tLRPC$updates_Difference.other_updates.remove(i3);
                            }
                        }
                        i3++;
                    }
                    i3--;
                    i3++;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda207
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$282(tLRPC$updates_Difference);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda210
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$289(tLRPC$updates_Difference, arrayList, longSparseArray, longSparseArray2);
                }
            });
            return;
        }
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    public /* synthetic */ void lambda$getDifference$281(TLRPC$updates_Difference tLRPC$updates_Difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), tLRPC$updates_Difference.pts, i, i2);
    }

    public /* synthetic */ void lambda$getDifference$282(TLRPC$updates_Difference tLRPC$updates_Difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(tLRPC$updates_Difference.users, false);
        putChats(tLRPC$updates_Difference.chats, false);
    }

    public /* synthetic */ void lambda$getDifference$289(final TLRPC$updates_Difference tLRPC$updates_Difference, ArrayList arrayList, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        getMessagesStorage().putUsersAndChats(tLRPC$updates_Difference.users, tLRPC$updates_Difference.chats, true, false);
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, 0L, null, tLRPC$TL_updateMessageID.id, 0, false, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda97
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getDifference$283(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda209
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$288(tLRPC$updates_Difference, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$getDifference$283(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:76:0x0121, code lost:
        if (r10.messageOwner.from_scheduled != false) goto L83;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDifference$288(final TLRPC$updates_Difference tLRPC$updates_Difference, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        MessageObject messageObject;
        TLRPC$User tLRPC$User;
        int i = 0;
        if (!tLRPC$updates_Difference.new_messages.isEmpty() || !tLRPC$updates_Difference.new_encrypted_messages.isEmpty()) {
            final LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$updates_Difference.new_encrypted_messages.size(); i2++) {
                ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(tLRPC$updates_Difference.new_encrypted_messages.get(i2));
                if (decryptMessage != null && !decryptMessage.isEmpty()) {
                    tLRPC$updates_Difference.new_messages.addAll(decryptMessage);
                }
            }
            ImageLoader.saveMessagesThumbs(tLRPC$updates_Difference.new_messages);
            final ArrayList arrayList = new ArrayList();
            long clientUserId = getUserConfig().getClientUserId();
            for (int i3 = 0; i3 < tLRPC$updates_Difference.new_messages.size(); i3++) {
                TLRPC$Message tLRPC$Message = tLRPC$updates_Difference.new_messages.get(i3);
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    MessageObject.getDialogId(tLRPC$Message);
                    if (!DialogObject.isEncryptedDialog(tLRPC$Message.dialog_id)) {
                        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                            tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                            tLRPC$Message.flags |= 64;
                        }
                        TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                        if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                            tLRPC$Message.unread = false;
                            tLRPC$Message.media_unread = false;
                        } else {
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer num = concurrentHashMap.get(Long.valueOf(tLRPC$Message.dialog_id));
                            if (num == null) {
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                            }
                            tLRPC$Message.unread = num.intValue() < tLRPC$Message.id;
                        }
                    }
                    long j = tLRPC$Message.dialog_id;
                    if (j == clientUserId) {
                        tLRPC$Message.unread = false;
                        tLRPC$Message.media_unread = false;
                        tLRPC$Message.out = true;
                    }
                    boolean contains = this.createdDialogIds.contains(Long.valueOf(j));
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, longSparseArray2, contains, contains);
                    if (messageObject2.isOut()) {
                        messageObject = messageObject2;
                    } else {
                        messageObject = messageObject2;
                    }
                    if (messageObject.isUnread()) {
                        arrayList.add(messageObject);
                    }
                    ArrayList arrayList2 = (ArrayList) longSparseArray3.get(tLRPC$Message.dialog_id);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                        longSparseArray3.put(tLRPC$Message.dialog_id, arrayList2);
                    }
                    arrayList2.add(messageObject);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda130
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$287(arrayList, tLRPC$updates_Difference, longSparseArray3);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
            processUpdateArray(tLRPC$updates_Difference.other_updates, tLRPC$updates_Difference.users, tLRPC$updates_Difference.chats, true, 0);
        }
        if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference.state.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference.state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference.state.qts);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        } else if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference.intermediate_state.qts);
        } else if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.date);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + tLRPC$updates_Difference.new_messages.size() + " users = " + tLRPC$updates_Difference.users.size() + " chats = " + tLRPC$updates_Difference.chats.size() + " other updates = " + tLRPC$updates_Difference.other_updates.size());
        }
    }

    public /* synthetic */ void lambda$getDifference$287(final ArrayList arrayList, final TLRPC$updates_Difference tLRPC$updates_Difference, LongSparseArray longSparseArray) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda129
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$284(arrayList, tLRPC$updates_Difference);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_Difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false, 0);
        for (int i = 0; i < longSparseArray.size(); i++) {
            final long keyAt = longSparseArray.keyAt(i);
            final ArrayList<MessageObject> arrayList2 = (ArrayList) longSparseArray.valueAt(i);
            getMediaDataController().loadReplyMessagesForMessages(arrayList2, keyAt, false, 0, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda89
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$286(keyAt, arrayList2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getDifference$284(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        getNotificationsController().processNewMessages(arrayList, !(tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice), false, null);
    }

    public /* synthetic */ void lambda$getDifference$286(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda88
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$285(j, arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$getDifference$285(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(j, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public void markDialogAsUnread(long j, TLRPC$InputPeer tLRPC$InputPeer, final long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.unread_mark = true;
            if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j, 0)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    if (dialogFilterArr[i] != null && (dialogFilterArr[i].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs(null);
                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$TL_messages_markDialogUnread tLRPC$TL_messages_markDialogUnread = new TLRPC$TL_messages_markDialogUnread();
            tLRPC$TL_messages_markDialogUnread.unread = true;
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(j);
            }
            if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                return;
            }
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
            tLRPC$TL_messages_markDialogUnread.peer = tLRPC$TL_inputDialogPeer;
            if (j2 == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 12);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(9);
                    nativeByteBuffer.writeInt64(j);
                    tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda283
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$markDialogAsUnread$291(j2, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda283
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$markDialogAsUnread$291(j2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markDialogAsUnread$291(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadUnreadDialogs() {
        if (this.loadingUnreadDialogs || getUserConfig().unreadDialogsLoaded) {
            return;
        }
        this.loadingUnreadDialogs = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getDialogUnreadMarks
            public static int constructor = 585256482;

            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                int readInt32 = abstractSerializedData.readInt32(z);
                for (int i2 = 0; i2 < readInt32; i2++) {
                    TLRPC$DialogPeer TLdeserialize = TLRPC$DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize == null) {
                        return tLRPC$Vector;
                    }
                    tLRPC$Vector.objects.add(TLdeserialize);
                }
                return tLRPC$Vector;
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(constructor);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda267
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnreadDialogs$293(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$293(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda145
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadUnreadDialogs$292(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$292(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                TLRPC$DialogPeer tLRPC$DialogPeer = (TLRPC$DialogPeer) tLRPC$Vector.objects.get(i);
                if (tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer) {
                    TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer;
                    long j = tLRPC$Peer.user_id;
                    if (j == 0) {
                        long j2 = tLRPC$Peer.chat_id;
                        j = j2 != 0 ? -j2 : -tLRPC$Peer.channel_id;
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
                    if (tLRPC$Dialog != null && !tLRPC$Dialog.unread_mark) {
                        tLRPC$Dialog.unread_mark = true;
                        if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j, 0)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC$InputDialogPeer> arrayList, final long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messages_reorderPinnedDialogs tLRPC$TL_messages_reorderPinnedDialogs = new TLRPC$TL_messages_reorderPinnedDialogs();
        tLRPC$TL_messages_reorderPinnedDialogs.folder_id = i;
        tLRPC$TL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            if (dialogs.isEmpty()) {
                return;
            }
            ArrayList<Long> arrayList2 = new ArrayList<>();
            ArrayList<Integer> arrayList3 = new ArrayList<>();
            int size = dialogs.size();
            int i2 = 0;
            for (int i3 = 0; i3 < size; i3++) {
                TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                    if (!tLRPC$Dialog.pinned) {
                        if (tLRPC$Dialog.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        arrayList2.add(Long.valueOf(tLRPC$Dialog.id));
                        arrayList3.add(Integer.valueOf(tLRPC$Dialog.pinnedNum));
                        if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                            TLRPC$InputPeer inputPeer = getInputPeer(tLRPC$Dialog.id);
                            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                            tLRPC$TL_inputDialogPeer.peer = inputPeer;
                            tLRPC$TL_messages_reorderPinnedDialogs.order.add(tLRPC$TL_inputDialogPeer);
                            i2 += tLRPC$TL_inputDialogPeer.getObjectSize();
                        }
                    }
                }
            }
            getMessagesStorage().setDialogsPinned(arrayList2, arrayList3);
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                try {
                    nativeByteBuffer.writeInt32(16);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tLRPC$TL_messages_reorderPinnedDialogs.order.size());
                    int size2 = tLRPC$TL_messages_reorderPinnedDialogs.order.size();
                    for (int i4 = 0; i4 < size2; i4++) {
                        tLRPC$TL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda288
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$reorderPinnedDialogs$294(j, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e2) {
                e = e2;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            tLRPC$TL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda288
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$294(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reorderPinnedDialogs$294(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public boolean pinDialog(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null || tLRPC$Dialog.pinned == z) {
            return tLRPC$Dialog != null;
        }
        int i = tLRPC$Dialog.folder_id;
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        tLRPC$Dialog.pinned = z;
        if (z) {
            int i2 = 0;
            for (int i3 = 0; i3 < dialogs.size(); i3++) {
                TLRPC$Dialog tLRPC$Dialog2 = dialogs.get(i3);
                if (!(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                    if (!tLRPC$Dialog2.pinned) {
                        if (tLRPC$Dialog2.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
                    }
                }
            }
            tLRPC$Dialog.pinnedNum = i2 + 1;
        } else {
            tLRPC$Dialog.pinnedNum = 0;
        }
        NativeByteBuffer nativeByteBuffer2 = null;
        sortDialogs(null);
        if (!z && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == tLRPC$Dialog && !this.dialogsEndReached.get(i)) {
            dialogs.remove(dialogs.size() - 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        if (!DialogObject.isEncryptedDialog(j) && j2 != -1) {
            TLRPC$TL_messages_toggleDialogPin tLRPC$TL_messages_toggleDialogPin = new TLRPC$TL_messages_toggleDialogPin();
            tLRPC$TL_messages_toggleDialogPin.pinned = z;
            TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(j) : tLRPC$InputPeer;
            if (inputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                return false;
            }
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = inputPeer;
            tLRPC$TL_messages_toggleDialogPin.peer = tLRPC$TL_inputDialogPeer;
            if (j2 == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 16);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(4);
                    nativeByteBuffer.writeInt64(j);
                    nativeByteBuffer.writeBool(z);
                    inputPeer.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda296
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$pinDialog$295(createPendingTask, tLObject, tLRPC$TL_error);
                        }
                    });
                    getMessagesStorage().setDialogPinned(j, tLRPC$Dialog.pinnedNum);
                    return true;
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                createPendingTask = j2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda296
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$pinDialog$295(createPendingTask, tLObject, tLRPC$TL_error);
                }
            });
        }
        getMessagesStorage().setDialogPinned(j, tLRPC$Dialog.pinnedNum);
        return true;
    }

    public /* synthetic */ void lambda$pinDialog$295(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadPinnedDialogs(final int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) >= 0 || getUserConfig().isPinnedDialogsLoaded(i)) {
            return;
        }
        this.loadingPinnedDialogs.put(i, 1);
        TLRPC$TL_messages_getPinnedDialogs tLRPC$TL_messages_getPinnedDialogs = new TLRPC$TL_messages_getPinnedDialogs();
        tLRPC$TL_messages_getPinnedDialogs.folder_id = i;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda270
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadPinnedDialogs$298(i, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:21:0x009f, code lost:
        if (r9.left != false) goto L22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x00a1, code lost:
        r16 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x00b4, code lost:
        if (r9.migrated_to != null) goto L22;
     */
    /* JADX WARN: Removed duplicated region for block: B:27:0x00db  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPinnedDialogs$298(final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat;
        ArrayList arrayList;
        TLRPC$Message tLRPC$Message;
        int i2;
        TLRPC$Chat tLRPC$Chat2;
        int i3;
        ArrayList arrayList2;
        if (tLObject != null) {
            final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            final ArrayList arrayList3 = new ArrayList(tLRPC$TL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tLRPC$TL_messages_peerDialogs);
            final TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
            tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
            tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            final LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i4 = 0; i4 < tLRPC$TL_messages_peerDialogs.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i4);
                longSparseArray2.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$TL_messages_peerDialogs.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$TL_messages_peerDialogs.chats.get(i5);
                longSparseArray3.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            ArrayList<MessageObject> arrayList4 = new ArrayList<>();
            int i6 = 0;
            while (i6 < tLRPC$TL_messages_peerDialogs.messages.size()) {
                TLRPC$Message tLRPC$Message2 = tLRPC$TL_messages_peerDialogs.messages.get(i6);
                TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
                long j = tLRPC$Peer.channel_id;
                if (j != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray3.get(j);
                    if (tLRPC$Chat4 != null) {
                    }
                    i3 = i6;
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray2, (LongSparseArray<TLRPC$Chat>) longSparseArray3, false, false);
                    arrayList4.add(messageObject);
                    long dialogId = messageObject.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(messageObject);
                    longSparseArray.put(dialogId, arrayList2);
                } else {
                    long j2 = tLRPC$Peer.chat_id;
                    if (j2 != 0) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray3.get(j2);
                        if (tLRPC$Chat5 != null) {
                        }
                    }
                    i3 = i6;
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray2, (LongSparseArray<TLRPC$Chat>) longSparseArray3, false, false);
                    arrayList4.add(messageObject2);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId2);
                    if (arrayList2 == null) {
                    }
                    arrayList2.add(messageObject2);
                    longSparseArray.put(dialogId2, arrayList2);
                }
                i6 = i3 + 1;
            }
            getFileLoader().checkMediaExistance(arrayList4);
            final boolean z = !arrayList3.isEmpty() && (arrayList3.get(0) instanceof TLRPC$TL_dialogFolder);
            int size = arrayList3.size();
            for (int i7 = 0; i7 < size; i7++) {
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) arrayList3.get(i7);
                tLRPC$Dialog.pinned = true;
                DialogObject.initDialog(tLRPC$Dialog);
                if (!DialogObject.isChannel(tLRPC$Dialog) ? !DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id)) == null || tLRPC$Chat.migrated_to == null : (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id)) == null || !tLRPC$Chat2.left) {
                    if (tLRPC$Dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray.get(tLRPC$Dialog.id)) != null) {
                        int i8 = Integer.MIN_VALUE;
                        for (int i9 = 0; i9 < arrayList.size(); i9++) {
                            MessageObject messageObject3 = (MessageObject) arrayList.get(i9);
                            if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && (i2 = tLRPC$Message.date) > i8) {
                                i8 = i2;
                            }
                        }
                        if (i8 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i8;
                        }
                    }
                    Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda57
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadPinnedDialogs$297(i, arrayList3, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$297(final int i, final ArrayList arrayList, final boolean z, final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, final LongSparseArray longSparseArray, final TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPinnedDialogs$296(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs);
            }
        });
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$296(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        boolean z2;
        boolean z3;
        boolean z4;
        ArrayList<Integer> arrayList2;
        ArrayList<MessageObject> arrayList3;
        this.loadingPinnedDialogs.delete(i);
        applyDialogsNotificationsSettings(arrayList);
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        int i2 = z ? 1 : 0;
        int i3 = 0;
        int i4 = 0;
        boolean z5 = false;
        while (true) {
            z2 = true;
            if (i3 >= dialogs.size()) {
                break;
            }
            TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
            if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                if (DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                    if (i2 < arrayList.size()) {
                        arrayList.add(i2, tLRPC$Dialog);
                    } else {
                        arrayList.add(tLRPC$Dialog);
                    }
                    i2++;
                } else if (!tLRPC$Dialog.pinned) {
                    if (tLRPC$Dialog.id != this.promoDialogId) {
                        break;
                    }
                } else {
                    i4 = Math.max(tLRPC$Dialog.pinnedNum, i4);
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    i2++;
                    z5 = true;
                }
            }
            i3++;
        }
        ArrayList<Long> arrayList4 = new ArrayList<>();
        if (!arrayList.isEmpty()) {
            putUsers(tLRPC$TL_messages_peerDialogs.users, false);
            putChats(tLRPC$TL_messages_peerDialogs.chats, false);
            ArrayList<Long> arrayList5 = new ArrayList<>();
            ArrayList<Integer> arrayList6 = new ArrayList<>();
            int size = arrayList.size();
            int i5 = 0;
            z3 = false;
            while (i5 < size) {
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) arrayList.get(i5);
                tLRPC$Dialog2.pinnedNum = (size - i5) + i4;
                arrayList4.add(Long.valueOf(tLRPC$Dialog2.id));
                TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(tLRPC$Dialog2.id);
                if (tLRPC$Dialog3 != null) {
                    tLRPC$Dialog3.pinned = z2;
                    tLRPC$Dialog3.pinnedNum = tLRPC$Dialog2.pinnedNum;
                    arrayList5.add(Long.valueOf(tLRPC$Dialog2.id));
                    arrayList6.add(Integer.valueOf(tLRPC$Dialog2.pinnedNum));
                    arrayList2 = arrayList6;
                } else {
                    this.dialogs_dict.put(tLRPC$Dialog2.id, tLRPC$Dialog2);
                    ArrayList<MessageObject> arrayList7 = (ArrayList) longSparseArray.get(tLRPC$Dialog2.id);
                    arrayList2 = arrayList6;
                    this.dialogMessage.put(tLRPC$Dialog2.id, arrayList7);
                    if (arrayList7 != null) {
                        int i6 = 0;
                        while (i6 < arrayList7.size()) {
                            MessageObject messageObject = arrayList7.get(i6);
                            if (messageObject != null) {
                                arrayList3 = arrayList7;
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                    this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                                    long j = messageObject.messageOwner.random_id;
                                    if (j != 0) {
                                        this.dialogMessagesByRandomIds.put(j, messageObject);
                                    }
                                }
                            } else {
                                arrayList3 = arrayList7;
                            }
                            i6++;
                            arrayList7 = arrayList3;
                        }
                    }
                    z3 = true;
                }
                i5++;
                arrayList6 = arrayList2;
                z5 = true;
                z2 = true;
            }
            getMessagesStorage().setDialogsPinned(arrayList5, arrayList6);
        } else {
            z3 = false;
        }
        if (z5) {
            if (z3) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i7);
                    if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                        this.allDialogs.add(valueAt);
                    }
                }
            }
            sortDialogs(null);
            z4 = false;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            z4 = false;
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList4, i);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i, true);
        getUserConfig().saveConfig(z4);
    }

    public void generateJoinMessage(final long j, boolean z) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat == null || !ChatObject.isChannel(j, this.currentAccount)) {
            return;
        }
        if ((chat.left || chat.kicked) && !z) {
            return;
        }
        TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
        tLRPC$TL_messageService.flags = 256;
        int newMessageId = getUserConfig().getNewMessageId();
        tLRPC$TL_messageService.id = newMessageId;
        tLRPC$TL_messageService.local_id = newMessageId;
        tLRPC$TL_messageService.date = getConnectionsManager().getCurrentTime();
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
        tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
        TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
        tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
        tLRPC$TL_peerChannel.channel_id = j;
        tLRPC$TL_messageService.dialog_id = -j;
        tLRPC$TL_messageService.post = true;
        TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
        tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
        tLRPC$TL_messageActionChatAddUser.users.add(Long.valueOf(getUserConfig().getClientUserId()));
        getUserConfig().saveConfig(false);
        final ArrayList arrayList = new ArrayList();
        ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
        arrayList2.add(tLRPC$TL_messageService);
        arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_messageService, true, false));
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$generateJoinMessage$300(arrayList);
            }
        });
        getMessagesStorage().putMessages(arrayList2, true, true, false, 0, false, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda87
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$generateJoinMessage$301(j, arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$generateJoinMessage$299(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$generateJoinMessage$300(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda119
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$generateJoinMessage$299(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$generateJoinMessage$301(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(-j, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public void deleteMessagesByPush(final long j, final ArrayList<Integer> arrayList, final long j2) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda122
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$303(arrayList, j2, j);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$303(final ArrayList arrayList, final long j, long j2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$302(arrayList, j);
            }
        });
        getMessagesStorage().deletePushMessages(j2, arrayList);
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, j, arrayList, getMessagesStorage().markMessagesAsDeleted(j2, arrayList, false, true, false), false);
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$302(ArrayList arrayList, long j) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        if (j == 0) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
            }
            return;
        }
        ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(-j);
        if (arrayList2 == null) {
            return;
        }
        for (int i2 = 0; i2 < arrayList2.size(); i2++) {
            MessageObject messageObject2 = arrayList2.get(i2);
            int size2 = arrayList.size();
            int i3 = 0;
            while (true) {
                if (i3 >= size2) {
                    break;
                } else if (messageObject2.getId() == ((Integer) arrayList.get(i3)).intValue()) {
                    messageObject2.deleted = true;
                    break;
                } else {
                    i3++;
                }
            }
        }
    }

    public void checkChatInviter(final long j, final boolean z) {
        final TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (!ChatObject.isChannel(chat) || chat.creator || this.gettingChatInviters.indexOfKey(j) >= 0) {
            return;
        }
        this.gettingChatInviters.put(j, Boolean.TRUE);
        TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
        tLRPC$TL_channels_getParticipant.channel = getInputChannel(j);
        tLRPC$TL_channels_getParticipant.participant = getInputPeer(getUserConfig().getClientUserId());
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda333
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkChatInviter$308(chat, z, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatInviter$308(TLRPC$Chat tLRPC$Chat, boolean z, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final ArrayList arrayList;
        final TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant = (TLRPC$TL_channels_channelParticipant) tLObject;
        if (tLRPC$TL_channels_channelParticipant != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipant.participant;
            if (!(tLRPC$ChannelParticipant instanceof TLRPC$TL_channelParticipantSelf)) {
                return;
            }
            TLRPC$TL_channelParticipantSelf tLRPC$TL_channelParticipantSelf = (TLRPC$TL_channelParticipantSelf) tLRPC$ChannelParticipant;
            if (tLRPC$TL_channelParticipantSelf.inviter_id == getUserConfig().getClientUserId() && !tLRPC$TL_channelParticipantSelf.via_invite) {
                return;
            }
            if (tLRPC$Chat.megagroup && getMessagesStorage().isMigratedChat(tLRPC$Chat.id)) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda164
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkChatInviter$304(tLRPC$TL_channels_channelParticipant);
                }
            });
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipant.users, tLRPC$TL_channels_channelParticipant.chats, true, true);
            if (!z || Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$TL_channels_channelParticipant.participant.date) >= 86400 || getMessagesStorage().hasInviteMeMessage(j)) {
                arrayList = null;
            } else {
                TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                tLRPC$TL_messageService.media_unread = true;
                tLRPC$TL_messageService.unread = true;
                tLRPC$TL_messageService.flags = 256;
                tLRPC$TL_messageService.post = true;
                int newMessageId = getUserConfig().getNewMessageId();
                tLRPC$TL_messageService.id = newMessageId;
                tLRPC$TL_messageService.local_id = newMessageId;
                tLRPC$TL_messageService.date = tLRPC$TL_channels_channelParticipant.participant.date;
                if (tLRPC$TL_channelParticipantSelf.inviter_id != getUserConfig().getClientUserId()) {
                    tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatAddUser();
                } else if (tLRPC$TL_channelParticipantSelf.via_invite) {
                    tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatJoinedByRequest();
                }
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = tLRPC$TL_channels_channelParticipant.participant.inviter_id;
                tLRPC$TL_messageService.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                tLRPC$TL_peerChannel.channel_id = j;
                tLRPC$TL_messageService.dialog_id = -j;
                getUserConfig().saveConfig(false);
                arrayList = new ArrayList();
                ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
                ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                for (int i = 0; i < tLRPC$TL_channels_channelParticipant.users.size(); i++) {
                    TLRPC$User tLRPC$User = tLRPC$TL_channels_channelParticipant.users.get(i);
                    concurrentHashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                }
                arrayList2.add(tLRPC$TL_messageService);
                arrayList.add(new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_messageService, (AbstractMap<Long, TLRPC$User>) concurrentHashMap, true, false));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda112
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkChatInviter$306(arrayList);
                    }
                });
                getMessagesStorage().putMessages(arrayList2, true, true, false, 0, false, 0);
            }
            final ArrayList arrayList3 = arrayList;
            getMessagesStorage().saveChatInviter(j, tLRPC$TL_channels_channelParticipant.participant.inviter_id);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda91
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkChatInviter$307(j, arrayList3, tLRPC$TL_channels_channelParticipant);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkChatInviter$304(TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        putUsers(tLRPC$TL_channels_channelParticipant.users, false);
        putChats(tLRPC$TL_channels_channelParticipant.chats, false);
    }

    public /* synthetic */ void lambda$checkChatInviter$305(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$checkChatInviter$306(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkChatInviter$305(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatInviter$307(long j, ArrayList arrayList, TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        this.gettingChatInviters.delete(j);
        if (arrayList != null) {
            updateInterfaceWithMessages(-j, arrayList, false);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatInviter, Long.valueOf(j), Long.valueOf(tLRPC$TL_channels_channelParticipant.participant.inviter_id));
    }

    private int getUpdateType(TLRPC$Update tLRPC$Update) {
        if ((tLRPC$Update instanceof TLRPC$TL_updateNewMessage) || (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) || (tLRPC$Update instanceof TLRPC$TL_updateWebPage) || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) || (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) || (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages)) ? 2 : 3;
    }

    private static int getUpdatePts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts;
        }
        if (!(tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts;
    }

    private static int getUpdatePtsCount(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts_count;
        }
        if (!(tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts_count;
    }

    private static int getUpdateQts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return ((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).qts;
        }
        return 0;
    }

    public static long getUpdateChannelId(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
            return ((TLRPC$TL_updateReadChannelOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
            return ((TLRPC$TL_updateChannelMessageViews) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
            return ((TLRPC$TL_updateChannelMessageForwards) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
            return ((TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
            return ((TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
            return ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
            return ((TLRPC$TL_updateReadChannelInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) {
            return ((TLRPC$TL_updateChannelPinnedTopic) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics) {
            return ((TLRPC$TL_updateChannelPinnedTopics) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
            return ((TLRPC$TL_updateChannelUserTyping) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0L;
        }
        FileLog.e("trying to get unknown update channel_id for " + tLRPC$Update);
        return 0L;
    }

    /* JADX WARN: Code restructure failed: missing block: B:204:0x03ff, code lost:
        r2 = r10.pts_count + r1;
        r3 = r10.pts;
     */
    /* JADX WARN: Code restructure failed: missing block: B:205:0x0404, code lost:
        if (r2 != r3) goto L220;
     */
    /* JADX WARN: Code restructure failed: missing block: B:207:0x0418, code lost:
        if (processUpdateArray(r10.updates, r27.users, r27.chats, false, r27.date) != false) goto L219;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x041c, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L211;
     */
    /* JADX WARN: Code restructure failed: missing block: B:210:0x041e, code lost:
        org.telegram.messenger.FileLog.d("need get channel diff inner TL_updates, channel_id = " + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:211:0x0432, code lost:
        if (r9 != null) goto L215;
     */
    /* JADX WARN: Code restructure failed: missing block: B:212:0x0434, code lost:
        r5 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:216:0x0444, code lost:
        if (r9.contains(java.lang.Long.valueOf(r4)) != false) goto L218;
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x0446, code lost:
        r9.add(java.lang.Long.valueOf(r4));
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x044f, code lost:
        r26.channelsPts.put(r4, r10.pts);
        getMessagesStorage().saveChannelPts(r4, r10.pts);
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x0462, code lost:
        if (r1 == r3) goto L218;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x0466, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L225;
     */
    /* JADX WARN: Code restructure failed: missing block: B:224:0x0468, code lost:
        org.telegram.messenger.FileLog.d(r0 + " need get channel diff, pts: " + r1 + " " + r10.pts + " count = " + r10.pts_count + " channelId = " + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x0497, code lost:
        r0 = r26.updatesStartWaitTimeChannels.get(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:226:0x04ab, code lost:
        if (r26.gettingDifferenceChannels.get(r4, java.lang.Boolean.FALSE).booleanValue() != false) goto L236;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x04b1, code lost:
        if (r0 == 0) goto L236;
     */
    /* JADX WARN: Code restructure failed: missing block: B:230:0x04c0, code lost:
        if (java.lang.Math.abs(java.lang.System.currentTimeMillis() - r0) > 1500) goto L231;
     */
    /* JADX WARN: Code restructure failed: missing block: B:231:0x04c3, code lost:
        if (r9 != null) goto L233;
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x04c5, code lost:
        r5 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:234:0x04d3, code lost:
        if (r9.contains(java.lang.Long.valueOf(r4)) != false) goto L218;
     */
    /* JADX WARN: Code restructure failed: missing block: B:235:0x04d5, code lost:
        r9.add(java.lang.Long.valueOf(r4));
     */
    /* JADX WARN: Code restructure failed: missing block: B:237:0x04e1, code lost:
        if (r0 != 0) goto L239;
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x04e3, code lost:
        r26.updatesStartWaitTimeChannels.put(r4, java.lang.System.currentTimeMillis());
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x04ee, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L242;
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x04f0, code lost:
        org.telegram.messenger.FileLog.d(r23);
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x04f3, code lost:
        r0 = r26.updatesQueueChannels.get(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x04fb, code lost:
        if (r0 != null) goto L245;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x04fd, code lost:
        r0 = new java.util.ArrayList<>();
        r26.updatesQueueChannels.put(r4, r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x0507, code lost:
        r0.add(r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:262:0x0552, code lost:
        if (getMessagesStorage().getLastSeqValue() != r27.seq_start) goto L263;
     */
    /* JADX WARN: Code restructure failed: missing block: B:263:0x0555, code lost:
        r1 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:297:0x0571, code lost:
        if (r2 != getMessagesStorage().getLastSeqValue()) goto L263;
     */
    /* JADX WARN: Code restructure failed: missing block: B:333:0x071c, code lost:
        if (r2 != null) goto L334;
     */
    /* JADX WARN: Code restructure failed: missing block: B:335:0x0720, code lost:
        if (r9 != null) goto L336;
     */
    /* JADX WARN: Code restructure failed: missing block: B:449:0x074f, code lost:
        if (r2 != null) goto L450;
     */
    /* JADX WARN: Code restructure failed: missing block: B:451:0x0753, code lost:
        if (r16 != null) goto L336;
     */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0a00  */
    /* JADX WARN: Removed duplicated region for block: B:300:0x0630  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0a1a  */
    /* JADX WARN: Removed duplicated region for block: B:324:0x06f6  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x0716  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x0769  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x07a1 A[EDGE_INSN: B:363:0x07a1->B:364:0x07a1 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:377:0x07db  */
    /* JADX WARN: Removed duplicated region for block: B:442:0x0728  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x0710  */
    /* JADX WARN: Removed duplicated region for block: B:7:0x09c6  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0117  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processUpdates(final TLRPC$Updates tLRPC$Updates, boolean z) {
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        boolean z2;
        long j;
        TLRPC$User tLRPC$User2;
        boolean z3;
        boolean z4;
        TLRPC$User tLRPC$User3;
        boolean z5;
        boolean z6;
        int i;
        TLRPC$UserStatus tLRPC$UserStatus;
        int i2;
        TLRPC$Chat chat;
        boolean z7;
        ArrayList arrayList;
        int i3;
        boolean z8;
        ArrayList arrayList2;
        boolean z9;
        boolean z10;
        int i4;
        String str;
        int i5 = 0;
        int i6 = 1;
        if (tLRPC$Updates instanceof TLRPC$TL_updateShort) {
            ArrayList<TLRPC$Update> arrayList3 = new ArrayList<>();
            arrayList3.add(tLRPC$Updates.update);
            processUpdateArray(arrayList3, null, null, false, tLRPC$Updates.date);
        } else {
            boolean z11 = tLRPC$Updates instanceof TLRPC$TL_updateShortChatMessage;
            String str2 = "add to queue";
            if (z11 || (tLRPC$Updates instanceof TLRPC$TL_updateShortMessage)) {
                final long j2 = z11 ? tLRPC$Updates.from_id : tLRPC$Updates.user_id;
                TLRPC$User user = getUser(Long.valueOf(j2));
                FileLog.d("update message short userId = " + j2);
                if (user == null || user.min) {
                    user = getMessagesStorage().getUserSync(j2);
                    if (user != null && user.min) {
                        user = null;
                    }
                    putUser(user, true);
                }
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Updates.fwd_from;
                if (tLRPC$MessageFwdHeader != null) {
                    TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
                        tLRPC$User = getUser(Long.valueOf(tLRPC$Peer.user_id));
                        if (tLRPC$User == null) {
                            tLRPC$User = getMessagesStorage().getUserSync(tLRPC$Updates.fwd_from.from_id.user_id);
                            putUser(tLRPC$User, true);
                        }
                        tLRPC$Chat = null;
                    } else {
                        if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                            chat = getChat(Long.valueOf(tLRPC$Peer.channel_id));
                            if (chat == null) {
                                chat = getMessagesStorage().getChatSync(tLRPC$Updates.fwd_from.from_id.channel_id);
                                putChat(chat, true);
                            }
                        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                            chat = getChat(Long.valueOf(tLRPC$Peer.chat_id));
                            if (chat == null) {
                                chat = getMessagesStorage().getChatSync(tLRPC$Updates.fwd_from.from_id.chat_id);
                                putChat(chat, true);
                            }
                        }
                        tLRPC$Chat = chat;
                        tLRPC$User = null;
                    }
                    z2 = true;
                    j = tLRPC$Updates.via_bot_id;
                    if (j == 0) {
                        tLRPC$User2 = getUser(Long.valueOf(j));
                        if (tLRPC$User2 == null) {
                            tLRPC$User2 = getMessagesStorage().getUserSync(tLRPC$Updates.via_bot_id);
                            putUser(tLRPC$User2, true);
                        }
                        z3 = true;
                    } else {
                        tLRPC$User2 = null;
                        z3 = false;
                    }
                    z4 = tLRPC$Updates instanceof TLRPC$TL_updateShortMessage;
                    if (!z4) {
                        if (user != null) {
                            if (!z2) {
                                if (tLRPC$User != null) {
                                }
                            }
                            if (!z3) {
                            }
                            z5 = false;
                        }
                        z5 = true;
                    } else {
                        TLRPC$Chat chat2 = getChat(Long.valueOf(tLRPC$Updates.chat_id));
                        if (chat2 == null) {
                            tLRPC$User3 = tLRPC$User2;
                            chat2 = getMessagesStorage().getChatSync(tLRPC$Updates.chat_id);
                            putChat(chat2, true);
                        } else {
                            tLRPC$User3 = tLRPC$User2;
                        }
                        if (chat2 != null) {
                            if (user != null) {
                                if (z2) {
                                    if (tLRPC$User == null) {
                                    }
                                }
                                if (z3) {
                                }
                                z5 = false;
                            }
                        }
                        z5 = true;
                    }
                    z6 = z5;
                    if (!z6 && !tLRPC$Updates.entities.isEmpty()) {
                        i2 = 0;
                        while (true) {
                            if (i2 < tLRPC$Updates.entities.size()) {
                                break;
                            }
                            TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Updates.entities.get(i2);
                            if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                                long j3 = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                                TLRPC$User user2 = getUser(Long.valueOf(j3));
                                if (user2 == null || user2.min) {
                                    TLRPC$User userSync = getMessagesStorage().getUserSync(j3);
                                    if (userSync != null && userSync.min) {
                                        userSync = null;
                                    }
                                    if (userSync == null) {
                                        z6 = true;
                                        break;
                                    }
                                    putUser(user, true);
                                }
                            }
                            i2++;
                        }
                    }
                    if (!tLRPC$Updates.out || user == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires > 0 || Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$Updates.date) >= 30) {
                        i = 0;
                    } else {
                        this.onlinePrivacy.put(Long.valueOf(user.id), Integer.valueOf(tLRPC$Updates.date));
                        i = 1;
                    }
                    if (!z6) {
                        if (getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts) {
                            TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                            tLRPC$TL_message.id = tLRPC$Updates.id;
                            long clientUserId = getUserConfig().getClientUserId();
                            if (z4) {
                                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.from_id = tLRPC$TL_peerUser;
                                if (tLRPC$Updates.out) {
                                    tLRPC$TL_peerUser.user_id = clientUserId;
                                } else {
                                    tLRPC$TL_peerUser.user_id = j2;
                                }
                                TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.peer_id = tLRPC$TL_peerUser2;
                                tLRPC$TL_peerUser2.user_id = j2;
                                tLRPC$TL_message.dialog_id = j2;
                            } else {
                                TLRPC$TL_peerUser tLRPC$TL_peerUser3 = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.from_id = tLRPC$TL_peerUser3;
                                tLRPC$TL_peerUser3.user_id = j2;
                                TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
                                tLRPC$TL_message.peer_id = tLRPC$TL_peerChat;
                                long j4 = tLRPC$Updates.chat_id;
                                tLRPC$TL_peerChat.chat_id = j4;
                                tLRPC$TL_message.dialog_id = -j4;
                            }
                            tLRPC$TL_message.fwd_from = tLRPC$Updates.fwd_from;
                            tLRPC$TL_message.silent = tLRPC$Updates.silent;
                            tLRPC$TL_message.out = tLRPC$Updates.out;
                            tLRPC$TL_message.mentioned = tLRPC$Updates.mentioned;
                            tLRPC$TL_message.media_unread = tLRPC$Updates.media_unread;
                            tLRPC$TL_message.entities = tLRPC$Updates.entities;
                            tLRPC$TL_message.message = tLRPC$Updates.message;
                            tLRPC$TL_message.date = tLRPC$Updates.date;
                            tLRPC$TL_message.via_bot_id = tLRPC$Updates.via_bot_id;
                            tLRPC$TL_message.flags = tLRPC$Updates.flags | 256;
                            tLRPC$TL_message.reply_to = tLRPC$Updates.reply_to;
                            tLRPC$TL_message.ttl_period = tLRPC$Updates.ttl_period;
                            tLRPC$TL_message.media = new TLRPC$TL_messageMediaEmpty();
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$TL_message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer num = concurrentHashMap.get(Long.valueOf(tLRPC$TL_message.dialog_id));
                            if (num == null) {
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$TL_message.out, tLRPC$TL_message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(tLRPC$TL_message.dialog_id), num);
                            }
                            tLRPC$TL_message.unread = num.intValue() < tLRPC$TL_message.id;
                            if (tLRPC$TL_message.dialog_id == clientUserId) {
                                tLRPC$TL_message.unread = false;
                                tLRPC$TL_message.media_unread = false;
                                tLRPC$TL_message.out = true;
                            }
                            getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                            boolean contains = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_message.dialog_id));
                            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_message, contains, contains);
                            final ArrayList<MessageObject> arrayList4 = new ArrayList<>();
                            arrayList4.add(messageObject);
                            ArrayList<TLRPC$Message> arrayList5 = new ArrayList<>();
                            arrayList5.add(tLRPC$TL_message);
                            if (z4) {
                                final boolean z12 = !tLRPC$Updates.out && updatePrintingUsersWithNewMessages(tLRPC$Updates.user_id, arrayList4);
                                if (z12) {
                                    updatePrintingStrings();
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda215
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$309(z12, j2, arrayList4);
                                    }
                                });
                            } else {
                                final boolean updatePrintingUsersWithNewMessages = updatePrintingUsersWithNewMessages(-tLRPC$Updates.chat_id, arrayList4);
                                if (updatePrintingUsersWithNewMessages) {
                                    updatePrintingStrings();
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda217
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$310(updatePrintingUsersWithNewMessages, tLRPC$Updates, arrayList4);
                                    }
                                });
                            }
                            if (!messageObject.isOut()) {
                                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda118
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$312(arrayList4);
                                    }
                                });
                            }
                            getMessagesStorage().putMessages(arrayList5, false, true, false, 0, false, 0);
                        } else if (getMessagesStorage().getLastPtsValue() != tLRPC$Updates.pts) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("need get diff short message, pts: " + getMessagesStorage().getLastPtsValue() + " " + tLRPC$Updates.pts + " count = " + tLRPC$Updates.pts_count);
                            }
                            if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                if (this.updatesStartWaitTimePts == 0) {
                                    this.updatesStartWaitTimePts = System.currentTimeMillis();
                                }
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d(str2);
                                }
                                this.updatesQueuePts.add(tLRPC$Updates);
                            }
                        }
                        i6 = 0;
                        i5 = i;
                    }
                    i6 = 1;
                    i5 = i;
                }
                tLRPC$User = null;
                tLRPC$Chat = null;
                z2 = false;
                j = tLRPC$Updates.via_bot_id;
                if (j == 0) {
                }
                z4 = tLRPC$Updates instanceof TLRPC$TL_updateShortMessage;
                if (!z4) {
                }
                z6 = z5;
                if (!z6) {
                    i2 = 0;
                    while (true) {
                        if (i2 < tLRPC$Updates.entities.size()) {
                        }
                        i2++;
                    }
                }
                if (!tLRPC$Updates.out) {
                }
                i = 0;
                if (!z6) {
                }
                i6 = 1;
                i5 = i;
            } else if ((tLRPC$Updates instanceof TLRPC$TL_updatesCombined) || (tLRPC$Updates instanceof TLRPC$TL_updates)) {
                LongSparseArray longSparseArray = null;
                for (int i7 = 0; i7 < tLRPC$Updates.chats.size(); i7++) {
                    TLRPC$Chat tLRPC$Chat2 = tLRPC$Updates.chats.get(i7);
                    if ((tLRPC$Chat2 instanceof TLRPC$TL_channel) && tLRPC$Chat2.min) {
                        TLRPC$Chat chat3 = getChat(Long.valueOf(tLRPC$Chat2.id));
                        if (chat3 == null || chat3.min) {
                            chat3 = getMessagesStorage().getChatSync(tLRPC$Updates.chat_id);
                            putChat(chat3, true);
                        }
                        if (chat3 == null || chat3.min) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(tLRPC$Chat2.id, tLRPC$Chat2);
                        }
                    }
                }
                if (longSparseArray != null) {
                    for (int i8 = 0; i8 < tLRPC$Updates.updates.size(); i8++) {
                        TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i8);
                        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                            long j5 = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
                            if (longSparseArray.indexOfKey(j5) >= 0) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("need get diff because of min channel " + j5);
                                }
                                i3 = 1;
                                if (i3 != 0) {
                                    getMessagesStorage().putUsersAndChats(tLRPC$Updates.users, tLRPC$Updates.chats, true, true);
                                    Collections.sort(tLRPC$Updates.updates, this.updatesComparator);
                                    int i9 = i3;
                                    ArrayList arrayList6 = null;
                                    z8 = false;
                                    while (true) {
                                        if (tLRPC$Updates.updates.size() <= 0) {
                                            arrayList2 = arrayList6;
                                            break;
                                        }
                                        TLRPC$Update tLRPC$Update2 = tLRPC$Updates.updates.get(i5);
                                        if (getUpdateType(tLRPC$Update2) == 0) {
                                            TLRPC$TL_updates tLRPC$TL_updates = new TLRPC$TL_updates();
                                            tLRPC$TL_updates.updates.add(tLRPC$Update2);
                                            tLRPC$TL_updates.pts = getUpdatePts(tLRPC$Update2);
                                            tLRPC$TL_updates.pts_count = getUpdatePtsCount(tLRPC$Update2);
                                            while (i6 < tLRPC$Updates.updates.size()) {
                                                TLRPC$Update tLRPC$Update3 = tLRPC$Updates.updates.get(i6);
                                                int updatePts = getUpdatePts(tLRPC$Update3);
                                                int updatePtsCount = getUpdatePtsCount(tLRPC$Update3);
                                                if (getUpdateType(tLRPC$Update3) != 0 || tLRPC$TL_updates.pts + updatePtsCount != updatePts) {
                                                    break;
                                                }
                                                tLRPC$TL_updates.updates.add(tLRPC$Update3);
                                                tLRPC$TL_updates.pts = updatePts;
                                                tLRPC$TL_updates.pts_count += updatePtsCount;
                                                tLRPC$Updates.updates.remove(i6);
                                            }
                                            if (getMessagesStorage().getLastPtsValue() + tLRPC$TL_updates.pts_count == tLRPC$TL_updates.pts) {
                                                arrayList2 = arrayList6;
                                                if (!processUpdateArray(tLRPC$TL_updates.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date)) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d("need get diff inner TL_updates, pts: " + getMessagesStorage().getLastPtsValue() + " " + tLRPC$Updates.seq);
                                                    }
                                                    i9 = 1;
                                                    arrayList6 = arrayList2;
                                                    str = str2;
                                                } else {
                                                    getMessagesStorage().setLastPtsValue(tLRPC$TL_updates.pts);
                                                    arrayList6 = arrayList2;
                                                    str = str2;
                                                }
                                            } else {
                                                arrayList2 = arrayList6;
                                                if (getMessagesStorage().getLastPtsValue() != tLRPC$TL_updates.pts) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d(tLRPC$Update2 + " need get diff, pts: " + getMessagesStorage().getLastPtsValue() + " " + tLRPC$TL_updates.pts + " count = " + tLRPC$TL_updates.pts_count);
                                                    }
                                                    if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                                        if (this.updatesStartWaitTimePts == 0) {
                                                            this.updatesStartWaitTimePts = System.currentTimeMillis();
                                                        }
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d(str2);
                                                        }
                                                        this.updatesQueuePts.add(tLRPC$TL_updates);
                                                    }
                                                    i9 = 1;
                                                }
                                                arrayList6 = arrayList2;
                                                str = str2;
                                            }
                                        } else {
                                            arrayList2 = arrayList6;
                                            if (getUpdateType(tLRPC$Update2) == 1) {
                                                TLRPC$TL_updates tLRPC$TL_updates2 = new TLRPC$TL_updates();
                                                tLRPC$TL_updates2.updates.add(tLRPC$Update2);
                                                tLRPC$TL_updates2.pts = getUpdateQts(tLRPC$Update2);
                                                while (1 < tLRPC$Updates.updates.size()) {
                                                    TLRPC$Update tLRPC$Update4 = tLRPC$Updates.updates.get(1);
                                                    int updateQts = getUpdateQts(tLRPC$Update4);
                                                    if (getUpdateType(tLRPC$Update4) != 1 || tLRPC$TL_updates2.pts + 1 != updateQts) {
                                                        break;
                                                    }
                                                    tLRPC$TL_updates2.updates.add(tLRPC$Update4);
                                                    tLRPC$TL_updates2.pts = updateQts;
                                                    tLRPC$Updates.updates.remove(1);
                                                }
                                                if (getMessagesStorage().getLastQtsValue() == 0 || getMessagesStorage().getLastQtsValue() + tLRPC$TL_updates2.updates.size() == tLRPC$TL_updates2.pts) {
                                                    processUpdateArray(tLRPC$TL_updates2.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date);
                                                    getMessagesStorage().setLastQtsValue(tLRPC$TL_updates2.pts);
                                                    z8 = true;
                                                } else if (getMessagesStorage().getLastPtsValue() != tLRPC$TL_updates2.pts) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d(tLRPC$Update2 + " need get diff, qts: " + getMessagesStorage().getLastQtsValue() + " " + tLRPC$TL_updates2.pts);
                                                    }
                                                    if (this.gettingDifference || this.updatesStartWaitTimeQts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeQts) <= 1500) {
                                                        if (this.updatesStartWaitTimeQts == 0) {
                                                            this.updatesStartWaitTimeQts = System.currentTimeMillis();
                                                        }
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d(str2);
                                                        }
                                                        this.updatesQueueQts.add(tLRPC$TL_updates2);
                                                    }
                                                    i9 = 1;
                                                }
                                                arrayList6 = arrayList2;
                                                str = str2;
                                            } else if (getUpdateType(tLRPC$Update2) != 2) {
                                                break;
                                            } else {
                                                long updateChannelId = getUpdateChannelId(tLRPC$Update2);
                                                int i10 = this.channelsPts.get(updateChannelId);
                                                if (i10 == 0) {
                                                    i10 = getMessagesStorage().getChannelPtsSync(updateChannelId);
                                                    if (i10 == 0) {
                                                        int i11 = 0;
                                                        while (i11 < tLRPC$Updates.chats.size()) {
                                                            TLRPC$Chat tLRPC$Chat3 = tLRPC$Updates.chats.get(i11);
                                                            int i12 = i11;
                                                            if (tLRPC$Chat3.id == updateChannelId) {
                                                                loadUnknownChannel(tLRPC$Chat3, 0L);
                                                                z10 = true;
                                                                break;
                                                            }
                                                            i11 = i12 + 1;
                                                        }
                                                    } else {
                                                        this.channelsPts.put(updateChannelId, i10);
                                                    }
                                                }
                                                z10 = false;
                                                TLRPC$TL_updates tLRPC$TL_updates3 = new TLRPC$TL_updates();
                                                tLRPC$TL_updates3.updates.add(tLRPC$Update2);
                                                tLRPC$TL_updates3.pts = getUpdatePts(tLRPC$Update2);
                                                tLRPC$TL_updates3.pts_count = getUpdatePtsCount(tLRPC$Update2);
                                                while (true) {
                                                    if (1 >= tLRPC$Updates.updates.size()) {
                                                        i4 = i9;
                                                        str = str2;
                                                        break;
                                                    }
                                                    TLRPC$Update tLRPC$Update5 = tLRPC$Updates.updates.get(1);
                                                    int updatePts2 = getUpdatePts(tLRPC$Update5);
                                                    int updatePtsCount2 = getUpdatePtsCount(tLRPC$Update5);
                                                    i4 = i9;
                                                    str = str2;
                                                    if (getUpdateType(tLRPC$Update5) != 2 || updateChannelId != getUpdateChannelId(tLRPC$Update5) || tLRPC$TL_updates3.pts + updatePtsCount2 != updatePts2) {
                                                        break;
                                                    }
                                                    tLRPC$TL_updates3.updates.add(tLRPC$Update5);
                                                    tLRPC$TL_updates3.pts = updatePts2;
                                                    tLRPC$TL_updates3.pts_count += updatePtsCount2;
                                                    tLRPC$Updates.updates.remove(1);
                                                    i9 = i4;
                                                    str2 = str;
                                                }
                                                if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("need load unknown channel = " + updateChannelId);
                                                }
                                                arrayList6 = arrayList2;
                                                i9 = i4;
                                            }
                                        }
                                        tLRPC$Updates.updates.remove(0);
                                        str2 = str;
                                        i5 = 0;
                                        i6 = 1;
                                    }
                                    int i13 = i9;
                                    boolean z13 = tLRPC$Updates instanceof TLRPC$TL_updatesCombined;
                                    if (z13) {
                                        if (getMessagesStorage().getLastSeqValue() + 1 != tLRPC$Updates.seq_start) {
                                        }
                                        z9 = true;
                                    } else {
                                        int lastSeqValue = getMessagesStorage().getLastSeqValue() + 1;
                                        int i14 = tLRPC$Updates.seq;
                                        if (lastSeqValue != i14) {
                                            if (i14 != 0) {
                                            }
                                        }
                                        z9 = true;
                                    }
                                    if (z9) {
                                        processUpdateArray(tLRPC$Updates.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date);
                                        if (tLRPC$Updates.seq != 0) {
                                            if (tLRPC$Updates.date != 0) {
                                                getMessagesStorage().setLastDateValue(tLRPC$Updates.date);
                                            }
                                            getMessagesStorage().setLastSeqValue(tLRPC$Updates.seq);
                                        }
                                    } else {
                                        if (BuildVars.LOGS_ENABLED) {
                                            if (z13) {
                                                FileLog.d("need get diff TL_updatesCombined, seq: " + getMessagesStorage().getLastSeqValue() + " " + tLRPC$Updates.seq_start);
                                            } else {
                                                FileLog.d("need get diff TL_updates, seq: " + getMessagesStorage().getLastSeqValue() + " " + tLRPC$Updates.seq);
                                            }
                                        }
                                        if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                                            if (this.updatesStartWaitTimeSeq == 0) {
                                                this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                                            }
                                            if (BuildVars.LOGS_ENABLED) {
                                                FileLog.d("add TL_updates/Combined to queue");
                                            }
                                            this.updatesQueueSeq.add(tLRPC$Updates);
                                        } else {
                                            arrayList = arrayList2;
                                            i6 = 1;
                                        }
                                    }
                                    arrayList = arrayList2;
                                    i6 = i13;
                                } else {
                                    i6 = i3;
                                    arrayList = null;
                                    z8 = false;
                                }
                                z7 = z8;
                                i5 = 0;
                                getSecretChatHelper().processPendingEncMessages();
                                if (!z) {
                                    for (int i15 = 0; i15 < this.updatesQueueChannels.size(); i15++) {
                                        long keyAt = this.updatesQueueChannels.keyAt(i15);
                                        if (arrayList != null && arrayList.contains(Long.valueOf(keyAt))) {
                                            getChannelDifference(keyAt);
                                        } else {
                                            processChannelsUpdatesQueue(keyAt, 0);
                                        }
                                    }
                                    if (i6 != 0) {
                                        getDifference();
                                    } else {
                                        for (int i16 = 0; i16 < 3; i16++) {
                                            processUpdatesQueue(i16, 0);
                                        }
                                    }
                                }
                                if (z7) {
                                    TLRPC$TL_messages_receivedQueue tLRPC$TL_messages_receivedQueue = new TLRPC$TL_messages_receivedQueue();
                                    tLRPC$TL_messages_receivedQueue.max_qts = getMessagesStorage().getLastQtsValue();
                                    getConnectionsManager().sendRequest(tLRPC$TL_messages_receivedQueue, MessagesController$$ExternalSyntheticLambda368.INSTANCE);
                                }
                                if (i5 != 0) {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda19
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesController.this.lambda$processUpdates$314();
                                        }
                                    });
                                }
                                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                            }
                        }
                    }
                }
                i3 = 0;
                if (i3 != 0) {
                }
                z7 = z8;
                i5 = 0;
                getSecretChatHelper().processPendingEncMessages();
                if (!z) {
                }
                if (z7) {
                }
                if (i5 != 0) {
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (tLRPC$Updates instanceof TLRPC$TL_updatesTooLong) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("need get diff TL_updatesTooLong");
                }
            } else if (tLRPC$Updates instanceof UserActionUpdatesSeq) {
                getMessagesStorage().setLastSeqValue(tLRPC$Updates.seq);
            } else if (tLRPC$Updates instanceof UserActionUpdatesPts) {
                long j6 = tLRPC$Updates.chat_id;
                if (j6 != 0) {
                    this.channelsPts.put(j6, tLRPC$Updates.pts);
                    getMessagesStorage().saveChannelPts(tLRPC$Updates.chat_id, tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                }
            }
            z7 = false;
            arrayList = null;
            getSecretChatHelper().processPendingEncMessages();
            if (!z) {
            }
            if (z7) {
            }
            if (i5 != 0) {
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        }
        z7 = false;
        arrayList = null;
        i6 = 0;
        getSecretChatHelper().processPendingEncMessages();
        if (!z) {
        }
        if (z7) {
        }
        if (i5 != 0) {
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
    }

    public /* synthetic */ void lambda$processUpdates$309(boolean z, long j, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(j, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$310(boolean z, TLRPC$Updates tLRPC$Updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(-tLRPC$Updates.chat_id, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$311(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$processUpdates$312(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda111
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdates$311(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdates$314() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC$TL_updateFolderPeers> arrayList) {
        if (arrayList == null) {
            return false;
        }
        int size = arrayList.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = arrayList.get(i);
            int size2 = tLRPC$TL_updateFolderPeers.folder_peers.size();
            for (int i2 = 0; i2 < size2; i2++) {
                TLRPC$TL_folderPeer tLRPC$TL_folderPeer = tLRPC$TL_updateFolderPeers.folder_peers.get(i2);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer));
                if (tLRPC$Dialog != null) {
                    int i3 = tLRPC$Dialog.folder_id;
                    int i4 = tLRPC$TL_folderPeer.folder_id;
                    if (i3 != i4) {
                        tLRPC$Dialog.pinned = false;
                        tLRPC$Dialog.pinnedNum = 0;
                        tLRPC$Dialog.folder_id = i4;
                        ensureFolderDialogExists(i4, null);
                    }
                }
            }
            getMessagesStorage().setDialogsFolderId(arrayList.get(i).folder_peers, null, 0L, 0);
            i++;
            z = true;
        }
        return z;
    }

    /* JADX WARN: Code restructure failed: missing block: B:1047:0x138f, code lost:
        if (r0.action.user_id == r31) goto L917;
     */
    /* JADX WARN: Removed duplicated region for block: B:1018:0x1352 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1037:0x135d  */
    /* JADX WARN: Removed duplicated region for block: B:1077:0x1411  */
    /* JADX WARN: Removed duplicated region for block: B:1079:0x1417  */
    /* JADX WARN: Removed duplicated region for block: B:1082:0x1422  */
    /* JADX WARN: Removed duplicated region for block: B:1094:0x1477  */
    /* JADX WARN: Removed duplicated region for block: B:1114:0x14d9  */
    /* JADX WARN: Removed duplicated region for block: B:1121:0x150c  */
    /* JADX WARN: Removed duplicated region for block: B:1124:0x151a  */
    /* JADX WARN: Removed duplicated region for block: B:1127:0x152a  */
    /* JADX WARN: Removed duplicated region for block: B:1130:0x153d  */
    /* JADX WARN: Removed duplicated region for block: B:1142:0x1557  */
    /* JADX WARN: Removed duplicated region for block: B:1144:0x155d  */
    /* JADX WARN: Removed duplicated region for block: B:1145:0x1511  */
    /* JADX WARN: Removed duplicated region for block: B:1154:0x1250  */
    /* JADX WARN: Removed duplicated region for block: B:1231:0x1b1c  */
    /* JADX WARN: Removed duplicated region for block: B:1238:0x1b4f  */
    /* JADX WARN: Removed duplicated region for block: B:1240:0x1b5f  */
    /* JADX WARN: Removed duplicated region for block: B:1246:0x1b86  */
    /* JADX WARN: Removed duplicated region for block: B:1252:0x1bb2  */
    /* JADX WARN: Removed duplicated region for block: B:1258:0x1bd9  */
    /* JADX WARN: Removed duplicated region for block: B:1264:0x1bff  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x1583  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x1598  */
    /* JADX WARN: Removed duplicated region for block: B:871:0x1123  */
    /* JADX WARN: Removed duplicated region for block: B:945:0x1224  */
    /* JADX WARN: Removed duplicated region for block: B:954:0x1253  */
    /* JADX WARN: Removed duplicated region for block: B:976:0x12c8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean processUpdateArray(ArrayList<TLRPC$Update> arrayList, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, boolean z, final int i) {
        ConcurrentHashMap<Long, TLRPC$User> concurrentHashMap;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap2;
        final ArrayList<Long> arrayList4;
        final LongSparseArray longSparseArray;
        LongSparseArray<SparseIntArray> longSparseArray2;
        SparseIntArray sparseIntArray;
        LongSparseIntArray longSparseIntArray;
        LongSparseArray<ArrayList<Integer>> longSparseArray3;
        boolean z2;
        HashMap hashMap;
        LongSparseArray longSparseArray4;
        LongSparseIntArray longSparseIntArray2;
        LongSparseArray longSparseArray5;
        LongSparseArray longSparseArray6;
        ArrayList<Long> arrayList5;
        LongSparseArray longSparseArray7;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap3;
        LongSparseArray<ArrayList<Integer>> longSparseArray8;
        int i2;
        LongSparseArray<SparseIntArray> longSparseArray9;
        LongSparseArray<SparseIntArray> longSparseArray10;
        long j;
        LongSparseArray longSparseArray11;
        int i3;
        ArrayList arrayList6;
        long j2;
        ArrayList arrayList7;
        ArrayList arrayList8;
        LongSparseIntArray longSparseIntArray3;
        TLRPC$Message tLRPC$Message;
        TLRPC$Chat tLRPC$Chat;
        long j3;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$MessageAction tLRPC$MessageAction;
        LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray12;
        boolean z3;
        long j4;
        MessageObject messageObject;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap4;
        int i4;
        int i5;
        ArrayList arrayList9;
        ArrayList arrayList10;
        boolean z4;
        ImageLoader.MessageThumb generateMessageThumb;
        boolean z5;
        TLRPC$UserStatus tLRPC$UserStatus;
        LongSparseArray longSparseArray13;
        LongSparseArray longSparseArray14;
        ArrayList<Long> arrayList11;
        LongSparseArray longSparseArray15;
        HashMap hashMap2;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap3;
        ArrayList arrayList12;
        ArrayList arrayList13;
        ArrayList arrayList14;
        ArrayList arrayList15;
        TLRPC$SendMessageAction tLRPC$SendMessageAction;
        int i6;
        long j5;
        long j6;
        LongSparseArray longSparseArray16;
        boolean z6;
        LongSparseIntArray longSparseIntArray4;
        long j7;
        LongSparseArray longSparseArray17;
        long j8;
        ArrayList arrayList16;
        LongSparseArray<SparseIntArray> longSparseArray18;
        LongSparseArray<SparseIntArray> longSparseArray19;
        LongSparseArray longSparseArray20;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap5;
        ArrayList arrayList17;
        ArrayList arrayList18;
        LongSparseIntArray longSparseIntArray5;
        LongSparseArray longSparseArray21;
        final TLRPC$Message tLRPC$Message2;
        int i7;
        ArrayList arrayList19;
        ArrayList arrayList20;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap6;
        LongSparseArray<TLRPC$WebPage> longSparseArray22;
        ArrayList arrayList21;
        String str;
        TLRPC$TL_updateEncryptedChatTyping tLRPC$TL_updateEncryptedChatTyping;
        boolean z7;
        TLRPC$TL_updateNewEncryptedMessage tLRPC$TL_updateNewEncryptedMessage;
        LongSparseArray longSparseArray23;
        LongSparseArray longSparseArray24;
        ArrayList<Long> arrayList22;
        LongSparseArray longSparseArray25;
        ArrayList arrayList23;
        LongSparseArray longSparseArray26;
        ArrayList<TLRPC$Message> arrayList24;
        TLRPC$User tLRPC$User;
        int i8;
        ArrayList arrayList25;
        LongSparseIntArray longSparseIntArray6;
        long j9;
        long j10;
        TLRPC$UserStatus tLRPC$UserStatus2;
        long j11;
        ArrayList<Integer> arrayList26;
        if (arrayList.isEmpty()) {
            if (arrayList2 != null || arrayList3 != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda127
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$processUpdateArray$315(arrayList2, arrayList3);
                    }
                });
            }
            return true;
        }
        long currentTimeMillis = System.currentTimeMillis();
        if (arrayList2 != null) {
            concurrentHashMap = new ConcurrentHashMap<>();
            int size = arrayList2.size();
            for (int i9 = 0; i9 < size; i9++) {
                TLRPC$User tLRPC$User2 = arrayList2.get(i9);
                concurrentHashMap.put(Long.valueOf(tLRPC$User2.id), tLRPC$User2);
            }
        } else {
            concurrentHashMap = this.users;
        }
        if (arrayList3 != null) {
            concurrentHashMap2 = new ConcurrentHashMap<>();
            int size2 = arrayList3.size();
            for (int i10 = 0; i10 < size2; i10++) {
                TLRPC$Chat tLRPC$Chat3 = arrayList3.get(i10);
                concurrentHashMap2.put(Long.valueOf(tLRPC$Chat3.id), tLRPC$Chat3);
            }
        } else {
            concurrentHashMap2 = this.chats;
        }
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap7 = concurrentHashMap2;
        if (arrayList2 != null || arrayList3 != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda126
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$316(arrayList2, arrayList3);
                }
            });
        }
        long clientUserId = getUserConfig().getClientUserId();
        int size3 = arrayList.size();
        long j12 = clientUserId;
        long j13 = currentTimeMillis;
        LongSparseIntArray longSparseIntArray7 = null;
        LongSparseIntArray longSparseIntArray8 = null;
        LongSparseArray longSparseArray27 = null;
        LongSparseArray longSparseArray28 = null;
        SparseIntArray sparseIntArray2 = null;
        ArrayList<Long> arrayList27 = null;
        LongSparseArray longSparseArray29 = null;
        ArrayList arrayList28 = null;
        LongSparseArray longSparseArray30 = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray31 = null;
        int i11 = 0;
        ArrayList arrayList29 = null;
        LongSparseArray longSparseArray32 = null;
        LongSparseIntArray longSparseIntArray9 = null;
        LongSparseArray longSparseArray33 = null;
        ArrayList arrayList30 = null;
        LongSparseArray<SparseIntArray> longSparseArray34 = null;
        LongSparseArray<SparseIntArray> longSparseArray35 = null;
        LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray36 = null;
        ArrayList arrayList31 = null;
        boolean z8 = false;
        ArrayList arrayList32 = null;
        ArrayList<TLRPC$Message> arrayList33 = null;
        ArrayList<TLRPC$Message> arrayList34 = null;
        LongSparseIntArray longSparseIntArray10 = null;
        LongSparseArray<TLRPC$WebPage> longSparseArray37 = null;
        LongSparseIntArray longSparseIntArray11 = null;
        HashMap hashMap4 = null;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap5 = null;
        ArrayList arrayList35 = null;
        for (int i12 = 0; i12 < size3; i12 = i2 + 1) {
            SparseIntArray sparseIntArray3 = sparseIntArray2;
            TLRPC$Update tLRPC$Update = arrayList.get(i12);
            if (!BuildVars.LOGS_ENABLED || tLRPC$Update == null) {
                longSparseArray4 = longSparseArray29;
            } else {
                StringBuilder sb = new StringBuilder();
                longSparseArray4 = longSparseArray29;
                sb.append("process update ");
                sb.append(tLRPC$Update.getClass().getSimpleName());
                FileLog.d(sb.toString());
            }
            boolean z9 = tLRPC$Update instanceof TLRPC$TL_updateNewMessage;
            int i13 = size3;
            if (z9 || (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                longSparseIntArray2 = longSparseIntArray8;
                longSparseArray5 = longSparseArray27;
                longSparseArray6 = longSparseArray28;
                arrayList5 = arrayList27;
                longSparseArray7 = longSparseArray30;
                concurrentHashMap3 = concurrentHashMap7;
                longSparseArray8 = longSparseArray31;
                i2 = i12;
                longSparseArray9 = longSparseArray34;
                longSparseArray10 = longSparseArray35;
                j = j13;
                longSparseArray11 = longSparseArray4;
                i3 = i13;
                arrayList6 = arrayList35;
                j2 = j12;
                arrayList7 = arrayList28;
                arrayList8 = arrayList32;
                longSparseIntArray3 = longSparseIntArray7;
                if (z9) {
                    tLRPC$Message = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage) {
                    tLRPC$Message = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update).message;
                } else {
                    tLRPC$Message = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message;
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(tLRPC$Update + " channelId = " + tLRPC$Message.peer_id.channel_id + " message_id = " + tLRPC$Message.id);
                    }
                    if (!tLRPC$Message.out) {
                        TLRPC$Peer tLRPC$Peer = tLRPC$Message.from_id;
                        if ((tLRPC$Peer instanceof TLRPC$TL_peerUser) && tLRPC$Peer.user_id == getUserConfig().getClientUserId()) {
                            tLRPC$Message.out = true;
                        }
                    }
                }
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    NewMessageCallback newMessageCallback = this.newMessageCallback;
                    if (newMessageCallback == null || !newMessageCallback.onMessageReceived(tLRPC$Message)) {
                        tLRPC$Chat = null;
                    } else {
                        tLRPC$Chat = null;
                        this.newMessageCallback = null;
                    }
                    TLRPC$Peer tLRPC$Peer2 = tLRPC$Message.peer_id;
                    long j14 = tLRPC$Peer2.channel_id;
                    if (j14 == 0) {
                        j14 = tLRPC$Peer2.chat_id;
                        if (j14 == 0) {
                            long j15 = tLRPC$Peer2.user_id;
                            if (j15 != 0) {
                                j3 = j15;
                                j14 = 0;
                            } else {
                                j14 = 0;
                                j3 = 0;
                            }
                            if (j14 == 0) {
                                TLRPC$Chat tLRPC$Chat4 = concurrentHashMap3.get(Long.valueOf(j14));
                                if (tLRPC$Chat4 == null || tLRPC$Chat4.min) {
                                    tLRPC$Chat4 = getChat(Long.valueOf(j14));
                                }
                                if (tLRPC$Chat4 == null || tLRPC$Chat4.min) {
                                    tLRPC$Chat4 = getMessagesStorage().getChatSync(j14);
                                    putChat(tLRPC$Chat4, true);
                                }
                                tLRPC$Chat2 = tLRPC$Chat4;
                            } else {
                                tLRPC$Chat2 = tLRPC$Chat;
                            }
                            if (!z) {
                                if (j14 != 0 && tLRPC$Chat2 == null) {
                                    if (!BuildVars.LOGS_ENABLED) {
                                        return false;
                                    }
                                    FileLog.d("not found chat " + j14);
                                    return false;
                                }
                                int size4 = tLRPC$Message.entities.size() + 3;
                                for (int i14 = 0; i14 < size4; i14++) {
                                    if (i14 != 0) {
                                        if (i14 == 1) {
                                            TLRPC$Peer tLRPC$Peer3 = tLRPC$Message.from_id;
                                            long j16 = tLRPC$Peer3 instanceof TLRPC$TL_peerUser ? tLRPC$Peer3.user_id : 0L;
                                            if (tLRPC$Message.post) {
                                                j3 = j16;
                                                z5 = true;
                                                if (j3 > 0) {
                                                    TLRPC$User tLRPC$User3 = concurrentHashMap.get(Long.valueOf(j3));
                                                    if (tLRPC$User3 == null || (!z5 && tLRPC$User3.min)) {
                                                        tLRPC$User3 = getUser(Long.valueOf(j3));
                                                    }
                                                    if (tLRPC$User3 == null || (!z5 && tLRPC$User3.min)) {
                                                        tLRPC$User3 = getMessagesStorage().getUserSync(j3);
                                                        if (tLRPC$User3 != null && !z5 && tLRPC$User3.min) {
                                                            tLRPC$User3 = null;
                                                        }
                                                        putUser(tLRPC$User3, true);
                                                    }
                                                    if (tLRPC$User3 == null) {
                                                        if (!BuildVars.LOGS_ENABLED) {
                                                            return false;
                                                        }
                                                        FileLog.d("not found user " + j3);
                                                        return false;
                                                    } else if (!tLRPC$Message.out && i14 == 1 && (tLRPC$UserStatus = tLRPC$User3.status) != null && tLRPC$UserStatus.expires <= 0 && Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$Message.date) < 30) {
                                                        this.onlinePrivacy.put(Long.valueOf(j3), Integer.valueOf(tLRPC$Message.date));
                                                        i11 |= UPDATE_MASK_STATUS;
                                                    }
                                                }
                                            } else {
                                                j3 = j16;
                                            }
                                        } else {
                                            if (i14 == 2) {
                                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message.fwd_from;
                                                if (tLRPC$MessageFwdHeader != null) {
                                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                                                        j3 = tLRPC$Peer4.user_id;
                                                        z5 = false;
                                                    }
                                                }
                                                j3 = 0;
                                                z5 = false;
                                            } else {
                                                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i14 - 3);
                                                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                                                    j3 = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                                                    z5 = false;
                                                }
                                                j3 = 0;
                                                z5 = false;
                                            }
                                            if (j3 > 0) {
                                            }
                                        }
                                    }
                                    z5 = false;
                                    if (j3 > 0) {
                                    }
                                }
                            }
                            tLRPC$MessageAction = tLRPC$Message.action;
                            if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                                TLRPC$User tLRPC$User4 = concurrentHashMap.get(Long.valueOf(tLRPC$MessageAction.user_id));
                                if (tLRPC$User4 != null && tLRPC$User4.bot) {
                                    tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                                    tLRPC$Message.flags |= 64;
                                } else {
                                    TLRPC$Peer tLRPC$Peer5 = tLRPC$Message.from_id;
                                    if (tLRPC$Peer5 instanceof TLRPC$TL_peerUser) {
                                        if (tLRPC$Peer5.user_id == j2) {
                                        }
                                    }
                                }
                            }
                            ImageLoader.saveMessageThumbs(tLRPC$Message);
                            MessageObject.getDialogId(tLRPC$Message);
                            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || tLRPC$Message.reply_to == null || (tLRPC$Message.action instanceof TLRPC$TL_messageActionPinMessage)) {
                                longSparseArray12 = longSparseArray36;
                            } else {
                                longSparseArray12 = longSparseArray36;
                                if (longSparseArray12 == null) {
                                    longSparseArray12 = new LongSparseArray<>();
                                }
                                SparseArray<TLRPC$MessageReplies> sparseArray = longSparseArray12.get(tLRPC$Message.dialog_id);
                                if (sparseArray == null) {
                                    sparseArray = new SparseArray<>();
                                    longSparseArray12.put(tLRPC$Message.dialog_id, sparseArray);
                                }
                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
                                int i15 = tLRPC$TL_messageReplyHeader.reply_to_top_id;
                                if (i15 == 0) {
                                    i15 = tLRPC$TL_messageReplyHeader.reply_to_msg_id;
                                }
                                TLRPC$MessageReplies tLRPC$MessageReplies = sparseArray.get(i15);
                                if (tLRPC$MessageReplies == null) {
                                    tLRPC$MessageReplies = new TLRPC$TL_messageReplies();
                                    sparseArray.put(i15, tLRPC$MessageReplies);
                                }
                                TLRPC$Peer tLRPC$Peer6 = tLRPC$Message.from_id;
                                if (tLRPC$Peer6 != null) {
                                    tLRPC$MessageReplies.recent_repliers.add(0, tLRPC$Peer6);
                                }
                                tLRPC$MessageReplies.replies++;
                            }
                            longSparseArray36 = longSparseArray12;
                            if (this.createdDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id)) && tLRPC$Message.grouped_id == 0 && (generateMessageThumb = ImageLoader.generateMessageThumb(tLRPC$Message)) != null) {
                                ArrayList arrayList36 = arrayList31 != null ? new ArrayList() : arrayList31;
                                arrayList36.add(generateMessageThumb);
                                arrayList31 = arrayList36;
                            }
                            if (!(tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                                ArrayList<TLRPC$Message> arrayList37 = arrayList33 == null ? new ArrayList<>() : arrayList33;
                                arrayList37.add(tLRPC$Message);
                                boolean contains = this.createdScheduledDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id));
                                arrayList33 = arrayList37;
                                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap, concurrentHashMap3, contains, contains);
                                messageObject2.scheduled = true;
                                LongSparseArray longSparseArray38 = longSparseArray33 == null ? new LongSparseArray() : longSparseArray33;
                                ArrayList arrayList38 = (ArrayList) longSparseArray38.get(tLRPC$Message.dialog_id);
                                if (arrayList38 == null) {
                                    arrayList38 = new ArrayList();
                                    longSparseArray38.put(tLRPC$Message.dialog_id, arrayList38);
                                }
                                arrayList38.add(messageObject2);
                                arrayList10 = arrayList8;
                                concurrentHashMap4 = concurrentHashMap3;
                                longSparseArray30 = longSparseArray7;
                                longSparseArray33 = longSparseArray38;
                            } else {
                                ArrayList<TLRPC$Message> arrayList39 = arrayList34 == null ? new ArrayList<>() : arrayList34;
                                arrayList39.add(tLRPC$Message);
                                ConcurrentHashMap<Long, Integer> concurrentHashMap8 = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                                Integer num = concurrentHashMap8.get(Long.valueOf(tLRPC$Message.dialog_id));
                                if (num == null) {
                                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                                    concurrentHashMap8.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                                }
                                if (num.intValue() < tLRPC$Message.id && (tLRPC$Chat2 == null || !ChatObject.isNotInChat(tLRPC$Chat2))) {
                                    TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                                    if (!(tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) && !(tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                                        z3 = true;
                                        tLRPC$Message.unread = z3;
                                        j4 = tLRPC$Message.dialog_id;
                                        if (j4 == j2) {
                                            if (!tLRPC$Message.from_scheduled) {
                                                z4 = false;
                                                tLRPC$Message.unread = false;
                                            } else {
                                                z4 = false;
                                            }
                                            tLRPC$Message.media_unread = z4;
                                            tLRPC$Message.out = true;
                                        }
                                        boolean contains2 = this.createdDialogIds.contains(Long.valueOf(j4));
                                        ArrayList<TLRPC$Message> arrayList40 = arrayList39;
                                        concurrentHashMap4 = concurrentHashMap3;
                                        TLRPC$Chat tLRPC$Chat5 = tLRPC$Chat2;
                                        messageObject = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap, concurrentHashMap3, contains2, contains2);
                                        i4 = messageObject.type;
                                        if (i4 != 11) {
                                            i5 = UPDATE_MASK_CHAT_AVATAR;
                                        } else {
                                            if (i4 == 10) {
                                                i5 = UPDATE_MASK_CHAT_NAME;
                                            }
                                            if (longSparseArray7 == null) {
                                                longSparseArray7 = new LongSparseArray();
                                            }
                                            longSparseArray30 = longSparseArray7;
                                            arrayList9 = (ArrayList) longSparseArray30.get(tLRPC$Message.dialog_id);
                                            if (arrayList9 == null) {
                                                arrayList9 = new ArrayList();
                                                longSparseArray30.put(tLRPC$Message.dialog_id, arrayList9);
                                            }
                                            arrayList9.add(messageObject);
                                            if ((messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread() && (tLRPC$Chat5 == null || (!ChatObject.isNotInChat(tLRPC$Chat5) && !tLRPC$Chat5.min))) {
                                                arrayList10 = arrayList8 == null ? new ArrayList() : arrayList8;
                                                arrayList10.add(messageObject);
                                            } else {
                                                arrayList10 = arrayList8;
                                            }
                                            arrayList34 = arrayList40;
                                        }
                                        i11 |= i5;
                                        if (longSparseArray7 == null) {
                                        }
                                        longSparseArray30 = longSparseArray7;
                                        arrayList9 = (ArrayList) longSparseArray30.get(tLRPC$Message.dialog_id);
                                        if (arrayList9 == null) {
                                        }
                                        arrayList9.add(messageObject);
                                        if (messageObject.isOut()) {
                                        }
                                        if (arrayList8 == null) {
                                        }
                                        arrayList10.add(messageObject);
                                        arrayList34 = arrayList40;
                                    }
                                }
                                z3 = false;
                                tLRPC$Message.unread = z3;
                                j4 = tLRPC$Message.dialog_id;
                                if (j4 == j2) {
                                }
                                boolean contains22 = this.createdDialogIds.contains(Long.valueOf(j4));
                                ArrayList<TLRPC$Message> arrayList402 = arrayList39;
                                concurrentHashMap4 = concurrentHashMap3;
                                TLRPC$Chat tLRPC$Chat52 = tLRPC$Chat2;
                                messageObject = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap, concurrentHashMap3, contains22, contains22);
                                i4 = messageObject.type;
                                if (i4 != 11) {
                                }
                                i11 |= i5;
                                if (longSparseArray7 == null) {
                                }
                                longSparseArray30 = longSparseArray7;
                                arrayList9 = (ArrayList) longSparseArray30.get(tLRPC$Message.dialog_id);
                                if (arrayList9 == null) {
                                }
                                arrayList9.add(messageObject);
                                if (messageObject.isOut()) {
                                }
                                if (arrayList8 == null) {
                                }
                                arrayList10.add(messageObject);
                                arrayList34 = arrayList402;
                            }
                            arrayList28 = arrayList7;
                            longSparseArray29 = longSparseArray11;
                            longSparseIntArray8 = longSparseIntArray2;
                            longSparseArray27 = longSparseArray5;
                            longSparseArray28 = longSparseArray6;
                            arrayList27 = arrayList5;
                            arrayList35 = arrayList6;
                            longSparseArray35 = longSparseArray10;
                            longSparseArray34 = longSparseArray9;
                            arrayList32 = arrayList10;
                            longSparseIntArray7 = longSparseIntArray3;
                            if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                                arrayList14 = arrayList29 == null ? new ArrayList() : arrayList29;
                                arrayList14.add(tLRPC$Update);
                            } else if (tLRPC$Update instanceof TLRPC$TL_updateContactsReset) {
                                arrayList14 = arrayList29 == null ? new ArrayList() : arrayList29;
                                arrayList14.add(tLRPC$Update);
                            } else {
                                if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
                                    TLRPC$TL_updateChannelAvailableMessages tLRPC$TL_updateChannelAvailableMessages = (TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update;
                                    LongSparseIntArray longSparseIntArray12 = longSparseIntArray11;
                                    if (longSparseIntArray12 == null) {
                                        longSparseIntArray12 = new LongSparseIntArray();
                                    }
                                    long j17 = -tLRPC$TL_updateChannelAvailableMessages.channel_id;
                                    LongSparseIntArray longSparseIntArray13 = longSparseIntArray7;
                                    LongSparseIntArray longSparseIntArray14 = longSparseIntArray8;
                                    int i16 = longSparseIntArray12.get(j17, 0);
                                    if (i16 == 0 || i16 < tLRPC$TL_updateChannelAvailableMessages.available_min_id) {
                                        longSparseIntArray12.put(j17, tLRPC$TL_updateChannelAvailableMessages.available_min_id);
                                    }
                                    longSparseIntArray7 = longSparseIntArray13;
                                    longSparseIntArray8 = longSparseIntArray14;
                                    longSparseIntArray11 = longSparseIntArray12;
                                } else {
                                    LongSparseIntArray longSparseIntArray15 = longSparseIntArray7;
                                    LongSparseIntArray longSparseIntArray16 = longSparseIntArray8;
                                    LongSparseIntArray longSparseIntArray17 = longSparseIntArray11;
                                    if (tLRPC$Update instanceof TLRPC$TL_updateDialogUnreadMark) {
                                        ArrayList arrayList41 = arrayList29 == null ? new ArrayList() : arrayList29;
                                        arrayList41.add(tLRPC$Update);
                                        longSparseIntArray8 = longSparseIntArray16;
                                        arrayList29 = arrayList41;
                                        longSparseIntArray11 = longSparseIntArray17;
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) {
                                        TLRPC$TL_updateMessagePoll tLRPC$TL_updateMessagePoll = (TLRPC$TL_updateMessagePoll) tLRPC$Update;
                                        if (Math.abs(SystemClock.elapsedRealtime() - getSendMessagesHelper().getVoteSendTime(tLRPC$TL_updateMessagePoll.poll_id)) < 600) {
                                            longSparseArray13 = longSparseArray27;
                                            longSparseArray14 = longSparseArray28;
                                            arrayList11 = arrayList27;
                                            longSparseArray15 = longSparseArray29;
                                            hashMap2 = hashMap4;
                                            hashMap3 = hashMap5;
                                            longSparseIntArray7 = longSparseIntArray15;
                                            longSparseIntArray8 = longSparseIntArray16;
                                            hashMap5 = hashMap3;
                                            hashMap4 = hashMap2;
                                            longSparseArray29 = longSparseArray15;
                                            longSparseIntArray11 = longSparseIntArray17;
                                            longSparseArray27 = longSparseArray13;
                                            longSparseArray28 = longSparseArray14;
                                            arrayList27 = arrayList11;
                                            sparseIntArray2 = sparseIntArray3;
                                        } else {
                                            LongSparseArray longSparseArray39 = longSparseArray27;
                                            getMessagesStorage().updateMessagePollResults(tLRPC$TL_updateMessagePoll.poll_id, tLRPC$TL_updateMessagePoll.poll, tLRPC$TL_updateMessagePoll.results);
                                            ArrayList arrayList42 = arrayList29 == null ? new ArrayList() : arrayList29;
                                            arrayList42.add(tLRPC$Update);
                                            longSparseIntArray8 = longSparseIntArray16;
                                            arrayList29 = arrayList42;
                                            longSparseIntArray11 = longSparseIntArray17;
                                            longSparseArray27 = longSparseArray39;
                                        }
                                    } else {
                                        longSparseArray13 = longSparseArray27;
                                        if (tLRPC$Update instanceof TLRPC$TL_updateMessageReactions) {
                                            TLRPC$TL_updateMessageReactions tLRPC$TL_updateMessageReactions = (TLRPC$TL_updateMessageReactions) tLRPC$Update;
                                            long peerId = MessageObject.getPeerId(tLRPC$TL_updateMessageReactions.peer);
                                            longSparseArray14 = longSparseArray28;
                                            getMessagesStorage().updateMessageReactions(peerId, tLRPC$TL_updateMessageReactions.msg_id, tLRPC$TL_updateMessageReactions.reactions);
                                            if (tLRPC$TL_updateMessageReactions.updateUnreadState) {
                                                SparseBooleanArray sparseBooleanArray = new SparseBooleanArray();
                                                sparseBooleanArray.put(tLRPC$TL_updateMessageReactions.msg_id, MessageObject.hasUnreadReactions(tLRPC$TL_updateMessageReactions.reactions));
                                                if (BuildVars.DEBUG_PRIVATE_VERSION) {
                                                    FileLog.d("check reactions for " + peerId + " " + tLRPC$TL_updateMessageReactions.top_msg_id);
                                                }
                                                checkUnreadReactions(peerId, tLRPC$TL_updateMessageReactions.top_msg_id, sparseBooleanArray);
                                            }
                                            arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                            arrayList13.add(tLRPC$Update);
                                        } else {
                                            longSparseArray14 = longSparseArray28;
                                            if (tLRPC$Update instanceof TLRPC$TL_updateMessageExtendedMedia) {
                                                TLRPC$TL_updateMessageExtendedMedia tLRPC$TL_updateMessageExtendedMedia = (TLRPC$TL_updateMessageExtendedMedia) tLRPC$Update;
                                                if (tLRPC$TL_updateMessageExtendedMedia.extended_media instanceof TLRPC$TL_messageExtendedMedia) {
                                                    TLRPC$Message message = getMessagesStorage().getMessage(DialogObject.getPeerDialogId(tLRPC$TL_updateMessageExtendedMedia.peer), tLRPC$TL_updateMessageExtendedMedia.msg_id);
                                                    if (message != null) {
                                                        message.media.extended_media = tLRPC$TL_updateMessageExtendedMedia.extended_media;
                                                        ArrayList<TLRPC$Message> arrayList43 = arrayList34 == null ? new ArrayList<>() : arrayList34;
                                                        arrayList43.add(message);
                                                        arrayList34 = arrayList43;
                                                    }
                                                    if (arrayList29 == null) {
                                                        arrayList29 = new ArrayList();
                                                    }
                                                    ArrayList arrayList44 = arrayList29;
                                                    arrayList44.add(tLRPC$Update);
                                                    arrayList29 = arrayList44;
                                                }
                                                longSparseIntArray7 = longSparseIntArray15;
                                                longSparseIntArray8 = longSparseIntArray16;
                                                longSparseIntArray11 = longSparseIntArray17;
                                                longSparseArray27 = longSparseArray13;
                                                longSparseArray28 = longSparseArray14;
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerLocated) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateTheme) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateGeoLiveViewed) {
                                                getLocationController().setNewLocationEndWatchTime();
                                                arrayList11 = arrayList27;
                                                longSparseArray15 = longSparseArray29;
                                                hashMap2 = hashMap4;
                                                hashMap3 = hashMap5;
                                                longSparseIntArray7 = longSparseIntArray15;
                                                longSparseIntArray8 = longSparseIntArray16;
                                                hashMap5 = hashMap3;
                                                hashMap4 = hashMap2;
                                                longSparseArray29 = longSparseArray15;
                                                longSparseIntArray11 = longSparseIntArray17;
                                                longSparseArray27 = longSparseArray13;
                                                longSparseArray28 = longSparseArray14;
                                                arrayList27 = arrayList11;
                                                sparseIntArray2 = sparseIntArray3;
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilter) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilterOrder) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilters) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentEmojiStatuses) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateWebViewResultSent) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateAttachMenuBots) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateBotMenuButton) {
                                                arrayList13 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                arrayList13.add(tLRPC$Update);
                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
                                                TLRPC$TL_updateReadChannelDiscussionInbox tLRPC$TL_updateReadChannelDiscussionInbox = (TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update;
                                                ArrayList arrayList45 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                HashMap hashMap6 = hashMap4;
                                                if (hashMap6 == null) {
                                                    hashMap6 = new HashMap();
                                                }
                                                hashMap6.put(MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionInbox.channel_id, tLRPC$TL_updateReadChannelDiscussionInbox.top_msg_id), Integer.valueOf(Math.max(((Integer) Utilities.getOrDefault(hashMap6, MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionInbox.channel_id, tLRPC$TL_updateReadChannelDiscussionInbox.top_msg_id), 0)).intValue(), tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id)));
                                                arrayList45.add(tLRPC$Update);
                                                longSparseIntArray7 = longSparseIntArray15;
                                                arrayList29 = arrayList45;
                                                hashMap4 = hashMap6;
                                                longSparseArray29 = longSparseArray29;
                                                longSparseIntArray11 = longSparseIntArray17;
                                                longSparseArray27 = longSparseArray13;
                                                longSparseArray28 = longSparseArray14;
                                                arrayList27 = arrayList27;
                                                sparseIntArray2 = sparseIntArray3;
                                                longSparseIntArray8 = longSparseIntArray16;
                                            } else {
                                                arrayList11 = arrayList27;
                                                longSparseArray15 = longSparseArray29;
                                                hashMap2 = hashMap4;
                                                if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
                                                    TLRPC$TL_updateReadChannelDiscussionOutbox tLRPC$TL_updateReadChannelDiscussionOutbox = (TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update;
                                                    hashMap3 = hashMap5;
                                                    if (hashMap3 == null) {
                                                        hashMap3 = new HashMap<>();
                                                    }
                                                    hashMap3.put(MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id, tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), Integer.valueOf(Math.max(((Integer) Utilities.getOrDefault(hashMap3, MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id, tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), 0)).intValue(), tLRPC$TL_updateReadChannelDiscussionOutbox.read_max_id)));
                                                    arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                    arrayList12.add(tLRPC$Update);
                                                } else {
                                                    hashMap3 = hashMap5;
                                                    if (tLRPC$Update instanceof TLRPC$TL_updatePeerHistoryTTL) {
                                                        arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                        arrayList12.add(tLRPC$Update);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePendingJoinRequests) {
                                                        arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                        arrayList12.add(tLRPC$Update);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedRingtones) {
                                                        arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                        arrayList12.add(tLRPC$Update);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTranscribeAudio) {
                                                        arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                        arrayList12.add(tLRPC$Update);
                                                    } else {
                                                        if (tLRPC$Update instanceof TLRPC$TL_updateTranscribedAudio) {
                                                            arrayList12 = arrayList29 == null ? new ArrayList() : arrayList29;
                                                            arrayList12.add(tLRPC$Update);
                                                        }
                                                        longSparseIntArray7 = longSparseIntArray15;
                                                        longSparseIntArray8 = longSparseIntArray16;
                                                        hashMap5 = hashMap3;
                                                        hashMap4 = hashMap2;
                                                        longSparseArray29 = longSparseArray15;
                                                        longSparseIntArray11 = longSparseIntArray17;
                                                        longSparseArray27 = longSparseArray13;
                                                        longSparseArray28 = longSparseArray14;
                                                        arrayList27 = arrayList11;
                                                        sparseIntArray2 = sparseIntArray3;
                                                    }
                                                }
                                                longSparseIntArray8 = longSparseIntArray16;
                                                arrayList29 = arrayList12;
                                                hashMap5 = hashMap3;
                                                hashMap4 = hashMap2;
                                                longSparseArray29 = longSparseArray15;
                                                longSparseIntArray11 = longSparseIntArray17;
                                                longSparseArray27 = longSparseArray13;
                                                longSparseArray28 = longSparseArray14;
                                                arrayList27 = arrayList11;
                                                sparseIntArray2 = sparseIntArray3;
                                                longSparseIntArray7 = longSparseIntArray15;
                                            }
                                        }
                                        longSparseIntArray8 = longSparseIntArray16;
                                        arrayList29 = arrayList13;
                                        longSparseIntArray11 = longSparseIntArray17;
                                        longSparseArray27 = longSparseArray13;
                                        longSparseArray28 = longSparseArray14;
                                    }
                                    sparseIntArray2 = sparseIntArray3;
                                    longSparseIntArray7 = longSparseIntArray15;
                                }
                                sparseIntArray2 = sparseIntArray3;
                            }
                            arrayList29 = arrayList14;
                            sparseIntArray2 = sparseIntArray3;
                        }
                    }
                    j3 = 0;
                    if (j14 == 0) {
                    }
                    if (!z) {
                    }
                    tLRPC$MessageAction = tLRPC$Message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                    }
                    ImageLoader.saveMessageThumbs(tLRPC$Message);
                    MessageObject.getDialogId(tLRPC$Message);
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                    }
                    longSparseArray12 = longSparseArray36;
                    longSparseArray36 = longSparseArray12;
                    if (this.createdDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id))) {
                        if (arrayList31 != null) {
                        }
                        arrayList36.add(generateMessageThumb);
                        arrayList31 = arrayList36;
                    }
                    if (!(tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                    }
                    arrayList28 = arrayList7;
                    longSparseArray29 = longSparseArray11;
                    longSparseIntArray8 = longSparseIntArray2;
                    longSparseArray27 = longSparseArray5;
                    longSparseArray28 = longSparseArray6;
                    arrayList27 = arrayList5;
                    arrayList35 = arrayList6;
                    longSparseArray35 = longSparseArray10;
                    longSparseArray34 = longSparseArray9;
                    arrayList32 = arrayList10;
                    longSparseIntArray7 = longSparseIntArray3;
                    if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                    }
                    arrayList29 = arrayList14;
                    sparseIntArray2 = sparseIntArray3;
                }
                arrayList28 = arrayList7;
                concurrentHashMap4 = concurrentHashMap3;
                longSparseArray30 = longSparseArray7;
                longSparseArray29 = longSparseArray11;
                longSparseIntArray7 = longSparseIntArray3;
                sparseIntArray2 = sparseIntArray3;
                longSparseIntArray8 = longSparseIntArray2;
                longSparseArray27 = longSparseArray5;
                longSparseArray28 = longSparseArray6;
                arrayList27 = arrayList5;
                arrayList35 = arrayList6;
                arrayList32 = arrayList8;
                longSparseArray35 = longSparseArray10;
                longSparseArray34 = longSparseArray9;
            } else {
                if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
                    TLRPC$TL_updateReadMessagesContents tLRPC$TL_updateReadMessagesContents = (TLRPC$TL_updateReadMessagesContents) tLRPC$Update;
                    if (longSparseArray31 == null) {
                        longSparseArray31 = new LongSparseArray<>();
                    }
                    ArrayList<Integer> arrayList46 = longSparseArray31.get(0L);
                    arrayList15 = arrayList28;
                    if (arrayList46 == null) {
                        arrayList26 = new ArrayList<>();
                        longSparseArray31.put(0L, arrayList26);
                    } else {
                        arrayList26 = arrayList46;
                    }
                    arrayList26.addAll(tLRPC$TL_updateReadMessagesContents.messages);
                } else {
                    arrayList15 = arrayList28;
                    if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
                        TLRPC$TL_updateChannelReadMessagesContents tLRPC$TL_updateChannelReadMessagesContents = (TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update;
                        if (longSparseArray31 == null) {
                            longSparseArray31 = new LongSparseArray<>();
                        }
                        long j18 = -tLRPC$TL_updateChannelReadMessagesContents.channel_id;
                        ArrayList<Integer> arrayList47 = longSparseArray31.get(j18);
                        if (arrayList47 == null) {
                            arrayList47 = new ArrayList<>();
                            longSparseArray31.put(j18, arrayList47);
                        }
                        arrayList47.addAll(tLRPC$TL_updateChannelReadMessagesContents.messages);
                    } else {
                        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
                            TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = (TLRPC$TL_updateReadHistoryInbox) tLRPC$Update;
                            if (longSparseIntArray7 == null) {
                                longSparseIntArray7 = new LongSparseIntArray();
                            }
                            TLRPC$Peer tLRPC$Peer7 = tLRPC$TL_updateReadHistoryInbox.peer;
                            long j19 = tLRPC$Peer7.chat_id;
                            if (j19 != 0) {
                                longSparseIntArray7.put(-j19, tLRPC$TL_updateReadHistoryInbox.max_id);
                                j11 = -tLRPC$TL_updateReadHistoryInbox.peer.chat_id;
                            } else {
                                longSparseIntArray7.put(tLRPC$Peer7.user_id, tLRPC$TL_updateReadHistoryInbox.max_id);
                                j11 = tLRPC$TL_updateReadHistoryInbox.peer.user_id;
                            }
                            LongSparseIntArray longSparseIntArray18 = longSparseIntArray7;
                            Integer num2 = this.dialogs_read_inbox_max.get(Long.valueOf(j11));
                            if (num2 == null) {
                                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j11));
                            }
                            this.dialogs_read_inbox_max.put(Long.valueOf(j11), Integer.valueOf(Math.max(num2.intValue(), tLRPC$TL_updateReadHistoryInbox.max_id)));
                            longSparseArray8 = longSparseArray31;
                            i2 = i12;
                            j = j13;
                            longSparseArray29 = longSparseArray4;
                            longSparseIntArray7 = longSparseIntArray18;
                        } else if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
                            TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = (TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update;
                            if (longSparseIntArray8 == null) {
                                longSparseIntArray8 = new LongSparseIntArray();
                            }
                            TLRPC$Peer tLRPC$Peer8 = tLRPC$TL_updateReadHistoryOutbox.peer;
                            long j20 = tLRPC$Peer8.chat_id;
                            if (j20 != 0) {
                                longSparseIntArray8.put(-j20, tLRPC$TL_updateReadHistoryOutbox.max_id);
                                j10 = -tLRPC$TL_updateReadHistoryOutbox.peer.chat_id;
                                longSparseIntArray6 = longSparseIntArray8;
                            } else {
                                longSparseIntArray8.put(tLRPC$Peer8.user_id, tLRPC$TL_updateReadHistoryOutbox.max_id);
                                long j21 = tLRPC$TL_updateReadHistoryOutbox.peer.user_id;
                                TLRPC$User user = getUser(Long.valueOf(j21));
                                if (user == null || (tLRPC$UserStatus2 = user.status) == null || tLRPC$UserStatus2.expires > 0) {
                                    longSparseIntArray6 = longSparseIntArray8;
                                } else {
                                    longSparseIntArray6 = longSparseIntArray8;
                                    if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                        j9 = j21;
                                        this.onlinePrivacy.put(Long.valueOf(tLRPC$TL_updateReadHistoryOutbox.peer.user_id), Integer.valueOf(i));
                                        i11 |= UPDATE_MASK_STATUS;
                                        j10 = j9;
                                    }
                                }
                                j9 = j21;
                                j10 = j9;
                            }
                            Integer num3 = this.dialogs_read_outbox_max.get(Long.valueOf(j10));
                            if (num3 == null) {
                                num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j10));
                            }
                            this.dialogs_read_outbox_max.put(Long.valueOf(j10), Integer.valueOf(Math.max(num3.intValue(), tLRPC$TL_updateReadHistoryOutbox.max_id)));
                            longSparseArray8 = longSparseArray31;
                            i2 = i12;
                            j = j13;
                            longSparseArray29 = longSparseArray4;
                            longSparseIntArray8 = longSparseIntArray6;
                        } else if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
                            TLRPC$TL_updateDeleteMessages tLRPC$TL_updateDeleteMessages = (TLRPC$TL_updateDeleteMessages) tLRPC$Update;
                            if (longSparseArray27 == null) {
                                longSparseArray27 = new LongSparseArray();
                            }
                            ArrayList arrayList48 = (ArrayList) longSparseArray27.get(0L);
                            if (arrayList48 == null) {
                                arrayList48 = new ArrayList();
                                longSparseArray27.put(0L, arrayList48);
                            }
                            arrayList48.addAll(tLRPC$TL_updateDeleteMessages.messages);
                        } else {
                            if (tLRPC$Update instanceof TLRPC$TL_updateDeleteScheduledMessages) {
                                TLRPC$TL_updateDeleteScheduledMessages tLRPC$TL_updateDeleteScheduledMessages = (TLRPC$TL_updateDeleteScheduledMessages) tLRPC$Update;
                                if (longSparseArray28 == null) {
                                    longSparseArray28 = new LongSparseArray();
                                }
                                long peerId2 = MessageObject.getPeerId(tLRPC$TL_updateDeleteScheduledMessages.peer);
                                longSparseArray8 = longSparseArray31;
                                i2 = i12;
                                ArrayList arrayList49 = (ArrayList) longSparseArray28.get(MessageObject.getPeerId(tLRPC$TL_updateDeleteScheduledMessages.peer));
                                if (arrayList49 == null) {
                                    arrayList49 = new ArrayList();
                                    longSparseArray28.put(peerId2, arrayList49);
                                }
                                arrayList49.addAll(tLRPC$TL_updateDeleteScheduledMessages.messages);
                            } else {
                                longSparseArray8 = longSparseArray31;
                                i2 = i12;
                                boolean z10 = tLRPC$Update instanceof TLRPC$TL_updateUserTyping;
                                if (z10 || (tLRPC$Update instanceof TLRPC$TL_updateChatUserTyping) || (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping)) {
                                    longSparseArray5 = longSparseArray27;
                                    longSparseArray6 = longSparseArray28;
                                    arrayList5 = arrayList27;
                                    longSparseArray7 = longSparseArray30;
                                    concurrentHashMap3 = concurrentHashMap7;
                                    longSparseArray9 = longSparseArray34;
                                    longSparseArray10 = longSparseArray35;
                                    long j22 = j13;
                                    LongSparseArray longSparseArray40 = longSparseArray4;
                                    i3 = i13;
                                    arrayList6 = arrayList35;
                                    j2 = j12;
                                    arrayList8 = arrayList32;
                                    arrayList7 = arrayList15;
                                    longSparseIntArray3 = longSparseIntArray7;
                                    longSparseIntArray2 = longSparseIntArray8;
                                    if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
                                        TLRPC$TL_updateChannelUserTyping tLRPC$TL_updateChannelUserTyping = (TLRPC$TL_updateChannelUserTyping) tLRPC$Update;
                                        TLRPC$Peer tLRPC$Peer9 = tLRPC$TL_updateChannelUserTyping.from_id;
                                        j5 = tLRPC$Peer9.user_id;
                                        if (j5 == 0) {
                                            long j23 = tLRPC$Peer9.channel_id;
                                            if (j23 == 0) {
                                                j23 = tLRPC$Peer9.chat_id;
                                            }
                                            j5 = -j23;
                                        }
                                        j6 = tLRPC$TL_updateChannelUserTyping.channel_id;
                                        tLRPC$SendMessageAction = tLRPC$TL_updateChannelUserTyping.action;
                                        i6 = tLRPC$TL_updateChannelUserTyping.top_msg_id;
                                    } else if (z10) {
                                        final TLRPC$TL_updateUserTyping tLRPC$TL_updateUserTyping = (TLRPC$TL_updateUserTyping) tLRPC$Update;
                                        j5 = tLRPC$TL_updateUserTyping.user_id;
                                        tLRPC$SendMessageAction = tLRPC$TL_updateUserTyping.action;
                                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteraction) {
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda189
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$317(tLRPC$TL_updateUserTyping);
                                                }
                                            });
                                            longSparseArray11 = longSparseArray40;
                                            j = j22;
                                            arrayList28 = arrayList7;
                                            concurrentHashMap4 = concurrentHashMap3;
                                            longSparseArray30 = longSparseArray7;
                                            longSparseArray29 = longSparseArray11;
                                            longSparseIntArray7 = longSparseIntArray3;
                                            sparseIntArray2 = sparseIntArray3;
                                            longSparseIntArray8 = longSparseIntArray2;
                                            longSparseArray27 = longSparseArray5;
                                            longSparseArray28 = longSparseArray6;
                                            arrayList27 = arrayList5;
                                            arrayList35 = arrayList6;
                                            arrayList32 = arrayList8;
                                            longSparseArray35 = longSparseArray10;
                                            longSparseArray34 = longSparseArray9;
                                        } else {
                                            i6 = 0;
                                            j6 = 0;
                                        }
                                    } else {
                                        final TLRPC$TL_updateChatUserTyping tLRPC$TL_updateChatUserTyping = (TLRPC$TL_updateChatUserTyping) tLRPC$Update;
                                        long j24 = tLRPC$TL_updateChatUserTyping.chat_id;
                                        TLRPC$Peer tLRPC$Peer10 = tLRPC$TL_updateChatUserTyping.from_id;
                                        long j25 = tLRPC$Peer10.user_id;
                                        if (j25 == 0) {
                                            long j26 = tLRPC$Peer10.channel_id;
                                            if (j26 == 0) {
                                                j26 = tLRPC$Peer10.chat_id;
                                            }
                                            j25 = -j26;
                                        }
                                        tLRPC$SendMessageAction = tLRPC$TL_updateChatUserTyping.action;
                                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteraction) {
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda184
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$318(tLRPC$TL_updateChatUserTyping);
                                                }
                                            });
                                            longSparseArray11 = longSparseArray40;
                                            j = j22;
                                            arrayList28 = arrayList7;
                                            concurrentHashMap4 = concurrentHashMap3;
                                            longSparseArray30 = longSparseArray7;
                                            longSparseArray29 = longSparseArray11;
                                            longSparseIntArray7 = longSparseIntArray3;
                                            sparseIntArray2 = sparseIntArray3;
                                            longSparseIntArray8 = longSparseIntArray2;
                                            longSparseArray27 = longSparseArray5;
                                            longSparseArray28 = longSparseArray6;
                                            arrayList27 = arrayList5;
                                            arrayList35 = arrayList6;
                                            arrayList32 = arrayList8;
                                            longSparseArray35 = longSparseArray10;
                                            longSparseArray34 = longSparseArray9;
                                        } else {
                                            i6 = 0;
                                            j5 = j25;
                                            j6 = j24;
                                        }
                                    }
                                    long j27 = -j6;
                                    if (j27 == 0) {
                                        j27 = j5;
                                    }
                                    if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageHistoryImportAction) {
                                        LongSparseIntArray longSparseIntArray19 = longSparseIntArray9 == null ? new LongSparseIntArray() : longSparseIntArray9;
                                        longSparseIntArray19.put(j27, ((TLRPC$TL_sendMessageHistoryImportAction) tLRPC$SendMessageAction).progress);
                                        longSparseIntArray9 = longSparseIntArray19;
                                    } else if (j5 != getUserConfig().getClientUserId()) {
                                        if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_speakingInGroupCallAction)) {
                                            ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap9 = this.printingUsers.get(Long.valueOf(j27));
                                            ArrayList<PrintingUser> arrayList50 = concurrentHashMap9 != null ? concurrentHashMap9.get(Integer.valueOf(i6)) : null;
                                            if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageCancelAction)) {
                                                longSparseArray16 = longSparseArray40;
                                                if (concurrentHashMap9 == null) {
                                                    concurrentHashMap9 = new ConcurrentHashMap<>();
                                                    this.printingUsers.put(Long.valueOf(j27), concurrentHashMap9);
                                                }
                                                if (arrayList50 == null) {
                                                    arrayList50 = new ArrayList<>();
                                                    concurrentHashMap9.put(Integer.valueOf(i6), arrayList50);
                                                }
                                                Iterator<PrintingUser> it = arrayList50.iterator();
                                                while (true) {
                                                    if (!it.hasNext()) {
                                                        j = j22;
                                                        z6 = false;
                                                        break;
                                                    }
                                                    PrintingUser next = it.next();
                                                    if (next.userId == j5) {
                                                        j = j22;
                                                        next.lastTime = j;
                                                        if (next.action.getClass() != tLRPC$SendMessageAction.getClass()) {
                                                            z8 = true;
                                                        }
                                                        next.action = tLRPC$SendMessageAction;
                                                        z6 = true;
                                                    }
                                                }
                                                if (!z6) {
                                                    PrintingUser printingUser = new PrintingUser();
                                                    printingUser.userId = j5;
                                                    printingUser.lastTime = j;
                                                    printingUser.action = tLRPC$SendMessageAction;
                                                    arrayList50.add(printingUser);
                                                    z8 = true;
                                                }
                                                if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                                }
                                                arrayList28 = arrayList7;
                                                concurrentHashMap4 = concurrentHashMap3;
                                                longSparseArray30 = longSparseArray7;
                                                longSparseArray29 = longSparseArray16;
                                                longSparseIntArray7 = longSparseIntArray3;
                                                longSparseIntArray8 = longSparseIntArray2;
                                                longSparseArray27 = longSparseArray5;
                                                longSparseArray28 = longSparseArray6;
                                                arrayList27 = arrayList5;
                                                arrayList35 = arrayList6;
                                                arrayList32 = arrayList8;
                                                longSparseArray35 = longSparseArray10;
                                                longSparseArray34 = longSparseArray9;
                                            } else if (arrayList50 != null) {
                                                int size5 = arrayList50.size();
                                                int i17 = 0;
                                                while (true) {
                                                    if (i17 >= size5) {
                                                        longSparseArray16 = longSparseArray40;
                                                        break;
                                                    }
                                                    longSparseArray16 = longSparseArray40;
                                                    if (arrayList50.get(i17).userId == j5) {
                                                        arrayList50.remove(i17);
                                                        z8 = true;
                                                        break;
                                                    }
                                                    i17++;
                                                    longSparseArray40 = longSparseArray16;
                                                }
                                                if (arrayList50.isEmpty()) {
                                                    concurrentHashMap9.remove(Integer.valueOf(i6));
                                                    if (concurrentHashMap9.isEmpty()) {
                                                        this.printingUsers.remove(Long.valueOf(j27));
                                                    }
                                                }
                                                j = j22;
                                                if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                                    this.onlinePrivacy.put(Long.valueOf(j5), Integer.valueOf(i));
                                                }
                                                arrayList28 = arrayList7;
                                                concurrentHashMap4 = concurrentHashMap3;
                                                longSparseArray30 = longSparseArray7;
                                                longSparseArray29 = longSparseArray16;
                                                longSparseIntArray7 = longSparseIntArray3;
                                                longSparseIntArray8 = longSparseIntArray2;
                                                longSparseArray27 = longSparseArray5;
                                                longSparseArray28 = longSparseArray6;
                                                arrayList27 = arrayList5;
                                                arrayList35 = arrayList6;
                                                arrayList32 = arrayList8;
                                                longSparseArray35 = longSparseArray10;
                                                longSparseArray34 = longSparseArray9;
                                            }
                                        } else if (j6 != 0) {
                                            LongSparseArray longSparseArray41 = longSparseArray32 == null ? new LongSparseArray() : longSparseArray32;
                                            ArrayList arrayList51 = (ArrayList) longSparseArray41.get(j6);
                                            if (arrayList51 == null) {
                                                arrayList51 = new ArrayList();
                                                longSparseArray41.put(j6, arrayList51);
                                            }
                                            arrayList51.add(Long.valueOf(j5));
                                            longSparseArray32 = longSparseArray41;
                                        }
                                        longSparseArray16 = longSparseArray40;
                                        j = j22;
                                        if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                        }
                                        arrayList28 = arrayList7;
                                        concurrentHashMap4 = concurrentHashMap3;
                                        longSparseArray30 = longSparseArray7;
                                        longSparseArray29 = longSparseArray16;
                                        longSparseIntArray7 = longSparseIntArray3;
                                        longSparseIntArray8 = longSparseIntArray2;
                                        longSparseArray27 = longSparseArray5;
                                        longSparseArray28 = longSparseArray6;
                                        arrayList27 = arrayList5;
                                        arrayList35 = arrayList6;
                                        arrayList32 = arrayList8;
                                        longSparseArray35 = longSparseArray10;
                                        longSparseArray34 = longSparseArray9;
                                    }
                                    longSparseArray16 = longSparseArray40;
                                    j = j22;
                                    arrayList28 = arrayList7;
                                    concurrentHashMap4 = concurrentHashMap3;
                                    longSparseArray30 = longSparseArray7;
                                    longSparseArray29 = longSparseArray16;
                                    longSparseIntArray7 = longSparseIntArray3;
                                    longSparseIntArray8 = longSparseIntArray2;
                                    longSparseArray27 = longSparseArray5;
                                    longSparseArray28 = longSparseArray6;
                                    arrayList27 = arrayList5;
                                    arrayList35 = arrayList6;
                                    arrayList32 = arrayList8;
                                    longSparseArray35 = longSparseArray10;
                                    longSparseArray34 = longSparseArray9;
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipants) {
                                    TLRPC$TL_updateChatParticipants tLRPC$TL_updateChatParticipants = (TLRPC$TL_updateChatParticipants) tLRPC$Update;
                                    int i18 = i11 | UPDATE_MASK_CHAT_MEMBERS;
                                    if (arrayList30 == null) {
                                        arrayList30 = new ArrayList();
                                    }
                                    ArrayList arrayList52 = arrayList30;
                                    arrayList52.add(tLRPC$TL_updateChatParticipants.participants);
                                    i11 = i18;
                                    arrayList30 = arrayList52;
                                } else {
                                    if (tLRPC$Update instanceof TLRPC$TL_updateUserStatus) {
                                        i8 = i11 | UPDATE_MASK_STATUS;
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        arrayList25 = arrayList29;
                                        arrayList25.add(tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateUserEmojiStatus) {
                                        i8 = i11 | UPDATE_MASK_EMOJI_STATUS;
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        arrayList25 = arrayList29;
                                        arrayList25.add(tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateUserName) {
                                        i8 = i11 | UPDATE_MASK_NAME;
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        arrayList25 = arrayList29;
                                        arrayList25.add(tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhoto) {
                                        int i19 = i11 | UPDATE_MASK_AVATAR;
                                        getMessagesStorage().clearUserPhotos(((TLRPC$TL_updateUserPhoto) tLRPC$Update).user_id);
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        ArrayList arrayList53 = arrayList29;
                                        arrayList53.add(tLRPC$Update);
                                        arrayList29 = arrayList53;
                                        i11 = i19;
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhone) {
                                        i8 = i11 | UPDATE_MASK_PHONE;
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        arrayList25 = arrayList29;
                                        arrayList25.add(tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerSettings) {
                                        TLRPC$TL_updatePeerSettings tLRPC$TL_updatePeerSettings = (TLRPC$TL_updatePeerSettings) tLRPC$Update;
                                        if (arrayList27 == null) {
                                            arrayList27 = new ArrayList<>();
                                        }
                                        TLRPC$Peer tLRPC$Peer11 = tLRPC$TL_updatePeerSettings.peer;
                                        if ((tLRPC$Peer11 instanceof TLRPC$TL_peerUser) && (tLRPC$User = concurrentHashMap.get(Long.valueOf(tLRPC$Peer11.user_id))) != null) {
                                            if (tLRPC$User.contact) {
                                                int indexOf = arrayList27.indexOf(Long.valueOf(-tLRPC$TL_updatePeerSettings.peer.user_id));
                                                if (indexOf != -1) {
                                                    arrayList27.remove(indexOf);
                                                }
                                                if (!arrayList27.contains(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id))) {
                                                    arrayList27.add(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id));
                                                }
                                            } else {
                                                int indexOf2 = arrayList27.indexOf(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id));
                                                if (indexOf2 != -1) {
                                                    arrayList27.remove(indexOf2);
                                                }
                                                if (!arrayList27.contains(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id))) {
                                                    arrayList27.add(Long.valueOf(-tLRPC$TL_updatePeerSettings.peer.user_id));
                                                }
                                            }
                                        }
                                        if (arrayList29 == null) {
                                            arrayList29 = new ArrayList();
                                        }
                                        ArrayList arrayList54 = arrayList29;
                                        arrayList54.add(tLRPC$Update);
                                        arrayList29 = arrayList54;
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
                                        ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).message);
                                        if (decryptMessage == null || decryptMessage.isEmpty()) {
                                            longSparseArray23 = longSparseArray27;
                                            longSparseArray24 = longSparseArray28;
                                            arrayList22 = arrayList27;
                                            longSparseArray25 = longSparseArray4;
                                            i3 = i13;
                                            arrayList23 = arrayList15;
                                            concurrentHashMap4 = concurrentHashMap7;
                                        } else {
                                            long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$TL_updateNewEncryptedMessage.message.chat_id);
                                            LongSparseArray longSparseArray42 = longSparseArray30 == null ? new LongSparseArray() : longSparseArray30;
                                            ArrayList arrayList55 = (ArrayList) longSparseArray42.get(makeEncryptedDialogId);
                                            if (arrayList55 == null) {
                                                arrayList55 = new ArrayList();
                                                longSparseArray42.put(makeEncryptedDialogId, arrayList55);
                                            }
                                            ArrayList arrayList56 = arrayList55;
                                            int size6 = decryptMessage.size();
                                            int i20 = 0;
                                            while (i20 < size6) {
                                                LongSparseArray longSparseArray43 = longSparseArray27;
                                                TLRPC$Message tLRPC$Message3 = decryptMessage.get(i20);
                                                ImageLoader.saveMessageThumbs(tLRPC$Message3);
                                                if (arrayList34 == null) {
                                                    longSparseArray26 = longSparseArray28;
                                                    arrayList24 = new ArrayList<>();
                                                } else {
                                                    longSparseArray26 = longSparseArray28;
                                                    arrayList24 = arrayList34;
                                                }
                                                arrayList24.add(tLRPC$Message3);
                                                ArrayList<TLRPC$Message> arrayList57 = arrayList24;
                                                ArrayList<Long> arrayList58 = arrayList27;
                                                boolean contains3 = this.createdDialogIds.contains(Long.valueOf(makeEncryptedDialogId));
                                                int i21 = i20;
                                                ArrayList<TLRPC$Message> arrayList59 = decryptMessage;
                                                LongSparseArray longSparseArray44 = longSparseArray42;
                                                LongSparseArray longSparseArray45 = longSparseArray4;
                                                int i22 = size6;
                                                ArrayList arrayList60 = arrayList15;
                                                ArrayList arrayList61 = arrayList56;
                                                long j28 = makeEncryptedDialogId;
                                                int i23 = i13;
                                                ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap10 = concurrentHashMap7;
                                                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message3, concurrentHashMap, concurrentHashMap7, contains3, contains3);
                                                arrayList61.add(messageObject3);
                                                ArrayList arrayList62 = arrayList32 == null ? new ArrayList() : arrayList32;
                                                arrayList62.add(messageObject3);
                                                i20 = i21 + 1;
                                                arrayList56 = arrayList61;
                                                arrayList32 = arrayList62;
                                                longSparseArray4 = longSparseArray45;
                                                arrayList34 = arrayList57;
                                                size6 = i22;
                                                concurrentHashMap7 = concurrentHashMap10;
                                                longSparseArray42 = longSparseArray44;
                                                makeEncryptedDialogId = j28;
                                                longSparseArray27 = longSparseArray43;
                                                longSparseArray28 = longSparseArray26;
                                                arrayList27 = arrayList58;
                                                arrayList15 = arrayList60;
                                                i13 = i23;
                                                decryptMessage = arrayList59;
                                            }
                                            longSparseArray23 = longSparseArray27;
                                            longSparseArray24 = longSparseArray28;
                                            arrayList22 = arrayList27;
                                            LongSparseArray longSparseArray46 = longSparseArray42;
                                            longSparseArray25 = longSparseArray4;
                                            i3 = i13;
                                            arrayList23 = arrayList15;
                                            concurrentHashMap4 = concurrentHashMap7;
                                            longSparseArray30 = longSparseArray46;
                                        }
                                        arrayList28 = arrayList23;
                                        longSparseArray29 = longSparseArray25;
                                        j = j13;
                                        longSparseArray27 = longSparseArray23;
                                        longSparseArray28 = longSparseArray24;
                                        arrayList27 = arrayList22;
                                        j2 = j12;
                                    } else {
                                        LongSparseArray longSparseArray47 = longSparseArray27;
                                        LongSparseArray longSparseArray48 = longSparseArray28;
                                        ArrayList<Long> arrayList63 = arrayList27;
                                        LongSparseArray longSparseArray49 = longSparseArray4;
                                        i3 = i13;
                                        concurrentHashMap4 = concurrentHashMap7;
                                        if (tLRPC$Update instanceof TLRPC$TL_updateEncryptedChatTyping) {
                                            TLRPC$EncryptedChat encryptedChatDB = getEncryptedChatDB(((TLRPC$TL_updateEncryptedChatTyping) tLRPC$Update).chat_id, true);
                                            if (encryptedChatDB != null) {
                                                long makeEncryptedDialogId2 = DialogObject.makeEncryptedDialogId(tLRPC$TL_updateEncryptedChatTyping.chat_id);
                                                ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap11 = this.printingUsers.get(Long.valueOf(makeEncryptedDialogId2));
                                                if (concurrentHashMap11 == null) {
                                                    concurrentHashMap11 = new ConcurrentHashMap<>();
                                                    this.printingUsers.put(Long.valueOf(makeEncryptedDialogId2), concurrentHashMap11);
                                                }
                                                ArrayList<PrintingUser> arrayList64 = concurrentHashMap11.get(0);
                                                if (arrayList64 == null) {
                                                    arrayList64 = new ArrayList<>();
                                                    concurrentHashMap11.put(0, arrayList64);
                                                }
                                                int size7 = arrayList64.size();
                                                int i24 = 0;
                                                while (true) {
                                                    if (i24 >= size7) {
                                                        longSparseIntArray4 = longSparseIntArray8;
                                                        j7 = j13;
                                                        z7 = false;
                                                        break;
                                                    }
                                                    PrintingUser printingUser2 = arrayList64.get(i24);
                                                    longSparseIntArray4 = longSparseIntArray8;
                                                    int i25 = size7;
                                                    if (printingUser2.userId == encryptedChatDB.user_id) {
                                                        j7 = j13;
                                                        printingUser2.lastTime = j7;
                                                        printingUser2.action = new TLRPC$TL_sendMessageTypingAction();
                                                        z7 = true;
                                                        break;
                                                    }
                                                    i24++;
                                                    size7 = i25;
                                                    longSparseIntArray8 = longSparseIntArray4;
                                                }
                                                if (!z7) {
                                                    PrintingUser printingUser3 = new PrintingUser();
                                                    printingUser3.userId = encryptedChatDB.user_id;
                                                    printingUser3.lastTime = j7;
                                                    printingUser3.action = new TLRPC$TL_sendMessageTypingAction();
                                                    arrayList64.add(printingUser3);
                                                    z8 = true;
                                                }
                                                if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                                    this.onlinePrivacy.put(Long.valueOf(encryptedChatDB.user_id), Integer.valueOf(i));
                                                }
                                            } else {
                                                longSparseIntArray4 = longSparseIntArray8;
                                                j7 = j13;
                                            }
                                            j2 = j12;
                                        } else {
                                            longSparseIntArray4 = longSparseIntArray8;
                                            j7 = j13;
                                            if (tLRPC$Update instanceof TLRPC$TL_updateEncryptedMessagesRead) {
                                                TLRPC$TL_updateEncryptedMessagesRead tLRPC$TL_updateEncryptedMessagesRead = (TLRPC$TL_updateEncryptedMessagesRead) tLRPC$Update;
                                                SparseIntArray sparseIntArray4 = sparseIntArray3 == null ? new SparseIntArray() : sparseIntArray3;
                                                sparseIntArray4.put(tLRPC$TL_updateEncryptedMessagesRead.chat_id, tLRPC$TL_updateEncryptedMessagesRead.max_date);
                                                ArrayList arrayList65 = arrayList35;
                                                if (arrayList65 == null) {
                                                    arrayList65 = new ArrayList();
                                                }
                                                arrayList65.add(tLRPC$TL_updateEncryptedMessagesRead);
                                                j2 = j12;
                                                sparseIntArray3 = sparseIntArray4;
                                                arrayList35 = arrayList65;
                                            } else {
                                                ArrayList arrayList66 = arrayList35;
                                                if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantAdd) {
                                                    TLRPC$TL_updateChatParticipantAdd tLRPC$TL_updateChatParticipantAdd = (TLRPC$TL_updateChatParticipantAdd) tLRPC$Update;
                                                    longSparseArray17 = longSparseArray30;
                                                    getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantAdd.chat_id, tLRPC$TL_updateChatParticipantAdd.user_id, 0, tLRPC$TL_updateChatParticipantAdd.inviter_id, tLRPC$TL_updateChatParticipantAdd.version);
                                                } else {
                                                    longSparseArray17 = longSparseArray30;
                                                    if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantDelete) {
                                                        TLRPC$TL_updateChatParticipantDelete tLRPC$TL_updateChatParticipantDelete = (TLRPC$TL_updateChatParticipantDelete) tLRPC$Update;
                                                        getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantDelete.chat_id, tLRPC$TL_updateChatParticipantDelete.user_id, 1, 0L, tLRPC$TL_updateChatParticipantDelete.version);
                                                    } else {
                                                        if ((tLRPC$Update instanceof TLRPC$TL_updateDcOptions) || (tLRPC$Update instanceof TLRPC$TL_updateConfig)) {
                                                            j8 = j7;
                                                            arrayList16 = arrayList66;
                                                            longSparseArray18 = longSparseArray34;
                                                            longSparseArray19 = longSparseArray35;
                                                            longSparseArray20 = longSparseArray17;
                                                            concurrentHashMap5 = concurrentHashMap4;
                                                            j2 = j12;
                                                            arrayList17 = arrayList15;
                                                            arrayList18 = arrayList32;
                                                            longSparseIntArray5 = longSparseIntArray7;
                                                            getConnectionsManager().updateDcSettings();
                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateEncryption) {
                                                            getSecretChatHelper().processUpdateEncryption((TLRPC$TL_updateEncryption) tLRPC$Update, concurrentHashMap);
                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerBlocked) {
                                                            final TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked = (TLRPC$TL_updatePeerBlocked) tLRPC$Update;
                                                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda186
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesController.this.lambda$processUpdateArray$320(tLRPC$TL_updatePeerBlocked);
                                                                }
                                                            });
                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateNotifySettings) {
                                                            if (arrayList29 == null) {
                                                                arrayList29 = new ArrayList();
                                                            }
                                                            ArrayList arrayList67 = arrayList29;
                                                            arrayList67.add(tLRPC$Update);
                                                            arrayList29 = arrayList67;
                                                            arrayList35 = arrayList66;
                                                            arrayList28 = arrayList15;
                                                            longSparseArray29 = longSparseArray49;
                                                            longSparseArray30 = longSparseArray17;
                                                            longSparseArray28 = longSparseArray48;
                                                            arrayList27 = arrayList63;
                                                            j2 = j12;
                                                            j = j7;
                                                            longSparseIntArray8 = longSparseIntArray4;
                                                            longSparseArray27 = longSparseArray47;
                                                        } else {
                                                            if (tLRPC$Update instanceof TLRPC$TL_updateServiceNotification) {
                                                                final TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification = (TLRPC$TL_updateServiceNotification) tLRPC$Update;
                                                                if (tLRPC$TL_updateServiceNotification.popup && (str = tLRPC$TL_updateServiceNotification.message) != null && str.length() > 0) {
                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            MessagesController.this.lambda$processUpdateArray$321(tLRPC$TL_updateServiceNotification);
                                                                        }
                                                                    });
                                                                }
                                                                if ((tLRPC$TL_updateServiceNotification.flags & 2) != 0) {
                                                                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                                                                    int newMessageId = getUserConfig().getNewMessageId();
                                                                    tLRPC$TL_message.id = newMessageId;
                                                                    tLRPC$TL_message.local_id = newMessageId;
                                                                    getUserConfig().saveConfig(false);
                                                                    tLRPC$TL_message.unread = true;
                                                                    tLRPC$TL_message.flags = 256;
                                                                    int i26 = tLRPC$TL_updateServiceNotification.inbox_date;
                                                                    if (i26 != 0) {
                                                                        tLRPC$TL_message.date = i26;
                                                                    } else {
                                                                        tLRPC$TL_message.date = (int) (System.currentTimeMillis() / 1000);
                                                                    }
                                                                    TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                                                    tLRPC$TL_message.from_id = tLRPC$TL_peerUser;
                                                                    tLRPC$TL_peerUser.user_id = 777000L;
                                                                    TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                                                    tLRPC$TL_message.peer_id = tLRPC$TL_peerUser2;
                                                                    tLRPC$TL_peerUser2.user_id = getUserConfig().getClientUserId();
                                                                    tLRPC$TL_message.dialog_id = 777000L;
                                                                    TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$TL_updateServiceNotification.media;
                                                                    if (tLRPC$MessageMedia != null) {
                                                                        tLRPC$TL_message.media = tLRPC$MessageMedia;
                                                                        tLRPC$TL_message.flags |= 512;
                                                                    }
                                                                    tLRPC$TL_message.message = tLRPC$TL_updateServiceNotification.message;
                                                                    ArrayList<TLRPC$MessageEntity> arrayList68 = tLRPC$TL_updateServiceNotification.entities;
                                                                    if (arrayList68 != null) {
                                                                        tLRPC$TL_message.entities = arrayList68;
                                                                        tLRPC$TL_message.flags |= ConnectionsManager.RequestFlagNeedQuickAck;
                                                                    }
                                                                    ArrayList<TLRPC$Message> arrayList69 = arrayList34 == null ? new ArrayList<>() : arrayList34;
                                                                    arrayList69.add(tLRPC$TL_message);
                                                                    boolean contains4 = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_message.dialog_id));
                                                                    ArrayList<TLRPC$Message> arrayList70 = arrayList69;
                                                                    LongSparseArray longSparseArray50 = longSparseArray17;
                                                                    j8 = j7;
                                                                    arrayList16 = arrayList66;
                                                                    MessageObject messageObject4 = new MessageObject(this.currentAccount, tLRPC$TL_message, concurrentHashMap, concurrentHashMap4, contains4, contains4);
                                                                    if (longSparseArray50 == null) {
                                                                        longSparseArray50 = new LongSparseArray();
                                                                    }
                                                                    longSparseArray30 = longSparseArray50;
                                                                    ArrayList arrayList71 = (ArrayList) longSparseArray30.get(tLRPC$TL_message.dialog_id);
                                                                    if (arrayList71 == null) {
                                                                        arrayList71 = new ArrayList();
                                                                        longSparseArray30.put(tLRPC$TL_message.dialog_id, arrayList71);
                                                                    }
                                                                    arrayList71.add(messageObject4);
                                                                    ArrayList arrayList72 = arrayList32;
                                                                    if (arrayList72 == null) {
                                                                        arrayList72 = new ArrayList();
                                                                    }
                                                                    arrayList72.add(messageObject4);
                                                                    arrayList32 = arrayList72;
                                                                    arrayList34 = arrayList70;
                                                                } else {
                                                                    j8 = j7;
                                                                    arrayList16 = arrayList66;
                                                                    longSparseArray30 = longSparseArray17;
                                                                }
                                                                j2 = j12;
                                                            } else {
                                                                j8 = j7;
                                                                arrayList16 = arrayList66;
                                                                ArrayList arrayList73 = arrayList32;
                                                                longSparseArray20 = longSparseArray17;
                                                                if (tLRPC$Update instanceof TLRPC$TL_updateDialogPinned) {
                                                                    if (arrayList29 == null) {
                                                                        arrayList29 = new ArrayList();
                                                                    }
                                                                    arrayList21 = arrayList29;
                                                                    arrayList21.add(tLRPC$Update);
                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePinnedDialogs) {
                                                                    if (arrayList29 == null) {
                                                                        arrayList29 = new ArrayList();
                                                                    }
                                                                    arrayList21 = arrayList29;
                                                                    arrayList21.add(tLRPC$Update);
                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
                                                                    TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = (TLRPC$TL_updateFolderPeers) tLRPC$Update;
                                                                    arrayList28 = arrayList15 == null ? new ArrayList() : arrayList15;
                                                                    arrayList28.add(tLRPC$TL_updateFolderPeers);
                                                                    j2 = j12;
                                                                    arrayList32 = arrayList73;
                                                                    longSparseArray30 = longSparseArray20;
                                                                    longSparseArray29 = longSparseArray49;
                                                                    longSparseIntArray8 = longSparseIntArray4;
                                                                    longSparseArray27 = longSparseArray47;
                                                                    longSparseArray28 = longSparseArray48;
                                                                    arrayList27 = arrayList63;
                                                                    j = j8;
                                                                    arrayList35 = arrayList16;
                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePrivacy) {
                                                                    if (arrayList29 == null) {
                                                                        arrayList29 = new ArrayList();
                                                                    }
                                                                    arrayList21 = arrayList29;
                                                                    arrayList21.add(tLRPC$Update);
                                                                } else {
                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
                                                                        TLRPC$TL_updateWebPage tLRPC$TL_updateWebPage = (TLRPC$TL_updateWebPage) tLRPC$Update;
                                                                        longSparseArray22 = longSparseArray37 == null ? new LongSparseArray<>() : longSparseArray37;
                                                                        TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_updateWebPage.webpage;
                                                                        longSparseArray22.put(tLRPC$WebPage.id, tLRPC$WebPage);
                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
                                                                        TLRPC$TL_updateChannelWebPage tLRPC$TL_updateChannelWebPage = (TLRPC$TL_updateChannelWebPage) tLRPC$Update;
                                                                        longSparseArray22 = longSparseArray37 == null ? new LongSparseArray<>() : longSparseArray37;
                                                                        TLRPC$WebPage tLRPC$WebPage2 = tLRPC$TL_updateChannelWebPage.webpage;
                                                                        longSparseArray22.put(tLRPC$WebPage2.id, tLRPC$WebPage2);
                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
                                                                        TLRPC$TL_updateChannelTooLong tLRPC$TL_updateChannelTooLong = (TLRPC$TL_updateChannelTooLong) tLRPC$Update;
                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                            FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateChannelTooLong.channel_id);
                                                                        }
                                                                        int i27 = this.channelsPts.get(tLRPC$TL_updateChannelTooLong.channel_id, 0);
                                                                        if (i27 == 0) {
                                                                            i27 = getMessagesStorage().getChannelPtsSync(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                            if (i27 == 0) {
                                                                                concurrentHashMap6 = concurrentHashMap4;
                                                                                TLRPC$Chat tLRPC$Chat6 = concurrentHashMap6.get(Long.valueOf(tLRPC$TL_updateChannelTooLong.channel_id));
                                                                                if (tLRPC$Chat6 == null || tLRPC$Chat6.min) {
                                                                                    tLRPC$Chat6 = getChat(Long.valueOf(tLRPC$TL_updateChannelTooLong.channel_id));
                                                                                }
                                                                                if (tLRPC$Chat6 == null || tLRPC$Chat6.min) {
                                                                                    tLRPC$Chat6 = getMessagesStorage().getChatSync(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                    putChat(tLRPC$Chat6, true);
                                                                                }
                                                                                if (tLRPC$Chat6 != null && !tLRPC$Chat6.min) {
                                                                                    loadUnknownChannel(tLRPC$Chat6, 0L);
                                                                                }
                                                                            } else {
                                                                                concurrentHashMap6 = concurrentHashMap4;
                                                                                this.channelsPts.put(tLRPC$TL_updateChannelTooLong.channel_id, i27);
                                                                            }
                                                                        } else {
                                                                            concurrentHashMap6 = concurrentHashMap4;
                                                                        }
                                                                        if (i27 != 0) {
                                                                            if ((tLRPC$TL_updateChannelTooLong.flags & 1) != 0) {
                                                                                if (tLRPC$TL_updateChannelTooLong.pts > i27) {
                                                                                    getChannelDifference(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                }
                                                                            } else {
                                                                                getChannelDifference(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                            }
                                                                        }
                                                                        j2 = j12;
                                                                        longSparseIntArray5 = longSparseIntArray7;
                                                                        arrayList18 = arrayList73;
                                                                        concurrentHashMap5 = concurrentHashMap6;
                                                                        arrayList17 = arrayList15;
                                                                        longSparseArray18 = longSparseArray34;
                                                                        longSparseArray19 = longSparseArray35;
                                                                    } else {
                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
                                                                            TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = (TLRPC$TL_updateReadChannelInbox) tLRPC$Update;
                                                                            long j29 = -tLRPC$TL_updateReadChannelInbox.channel_id;
                                                                            Integer num4 = this.dialogs_read_inbox_max.get(Long.valueOf(j29));
                                                                            if (num4 == null) {
                                                                                num4 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j29));
                                                                            }
                                                                            if (longSparseIntArray7 == null) {
                                                                                longSparseIntArray7 = new LongSparseIntArray();
                                                                            }
                                                                            LongSparseIntArray longSparseIntArray20 = longSparseIntArray10 == null ? new LongSparseIntArray() : longSparseIntArray10;
                                                                            longSparseIntArray7.put(j29, tLRPC$TL_updateReadChannelInbox.max_id);
                                                                            longSparseIntArray20.put(j29, tLRPC$TL_updateReadChannelInbox.still_unread_count);
                                                                            longSparseIntArray5 = longSparseIntArray7;
                                                                            this.dialogs_read_inbox_max.put(Long.valueOf(j29), Integer.valueOf(Math.max(num4.intValue(), tLRPC$TL_updateReadChannelInbox.max_id)));
                                                                            StringBuilder sb2 = new StringBuilder();
                                                                            sb2.append("TL_updateReadChannelInbox ");
                                                                            sb2.append(j29);
                                                                            sb2.append("  new unread = ");
                                                                            sb2.append(tLRPC$TL_updateReadChannelInbox.still_unread_count);
                                                                            sb2.append(" max id = ");
                                                                            sb2.append(tLRPC$TL_updateReadChannelInbox.max_id);
                                                                            sb2.append(" from get diff ");
                                                                            longSparseArray21 = longSparseArray47;
                                                                            sb2.append(z);
                                                                            FileLog.d(sb2.toString());
                                                                            j2 = j12;
                                                                            longSparseIntArray10 = longSparseIntArray20;
                                                                        } else {
                                                                            longSparseArray21 = longSparseArray47;
                                                                            if ((tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) || (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics)) {
                                                                                j2 = j12;
                                                                                longSparseIntArray5 = longSparseIntArray7;
                                                                                longSparseArray47 = longSparseArray21;
                                                                                arrayList18 = arrayList73;
                                                                                concurrentHashMap5 = concurrentHashMap4;
                                                                                longSparseArray18 = longSparseArray34;
                                                                                longSparseArray19 = longSparseArray35;
                                                                                if (arrayList29 == null) {
                                                                                    arrayList29 = new ArrayList();
                                                                                }
                                                                                ArrayList arrayList74 = arrayList29;
                                                                                arrayList74.add(tLRPC$Update);
                                                                                arrayList28 = arrayList15;
                                                                                arrayList29 = arrayList74;
                                                                                concurrentHashMap4 = concurrentHashMap5;
                                                                                longSparseArray30 = longSparseArray20;
                                                                                longSparseArray29 = longSparseArray49;
                                                                                longSparseArray35 = longSparseArray19;
                                                                                longSparseIntArray7 = longSparseIntArray5;
                                                                                longSparseIntArray8 = longSparseIntArray4;
                                                                                longSparseArray27 = longSparseArray47;
                                                                                longSparseArray28 = longSparseArray48;
                                                                                arrayList27 = arrayList63;
                                                                                j = j8;
                                                                                arrayList35 = arrayList16;
                                                                                longSparseArray34 = longSparseArray18;
                                                                                arrayList32 = arrayList18;
                                                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
                                                                                TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = (TLRPC$TL_updateReadChannelOutbox) tLRPC$Update;
                                                                                if (BuildVars.LOGS_ENABLED) {
                                                                                    FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateReadChannelOutbox.channel_id);
                                                                                }
                                                                                LongSparseIntArray longSparseIntArray21 = longSparseIntArray4 == null ? new LongSparseIntArray() : longSparseIntArray4;
                                                                                long j30 = -tLRPC$TL_updateReadChannelOutbox.channel_id;
                                                                                longSparseIntArray21.put(j30, tLRPC$TL_updateReadChannelOutbox.max_id);
                                                                                LongSparseIntArray longSparseIntArray22 = longSparseIntArray7;
                                                                                Integer num5 = this.dialogs_read_outbox_max.get(Long.valueOf(j30));
                                                                                if (num5 == null) {
                                                                                    num5 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j30));
                                                                                }
                                                                                this.dialogs_read_outbox_max.put(Long.valueOf(j30), Integer.valueOf(Math.max(num5.intValue(), tLRPC$TL_updateReadChannelOutbox.max_id)));
                                                                                j2 = j12;
                                                                                longSparseArray30 = longSparseArray20;
                                                                                concurrentHashMap4 = concurrentHashMap4;
                                                                                arrayList28 = arrayList15;
                                                                                longSparseIntArray7 = longSparseIntArray22;
                                                                                longSparseArray28 = longSparseArray48;
                                                                                arrayList27 = arrayList63;
                                                                                arrayList35 = arrayList16;
                                                                                arrayList32 = arrayList73;
                                                                                longSparseArray27 = longSparseArray21;
                                                                                longSparseIntArray8 = longSparseIntArray21;
                                                                                longSparseArray29 = longSparseArray49;
                                                                                j = j8;
                                                                            } else {
                                                                                longSparseIntArray5 = longSparseIntArray7;
                                                                                if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
                                                                                    TLRPC$TL_updateDeleteChannelMessages tLRPC$TL_updateDeleteChannelMessages = (TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update;
                                                                                    if (BuildVars.LOGS_ENABLED) {
                                                                                        FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateDeleteChannelMessages.channel_id);
                                                                                    }
                                                                                    if (longSparseArray21 == null) {
                                                                                        longSparseArray21 = new LongSparseArray();
                                                                                    }
                                                                                    long j31 = -tLRPC$TL_updateDeleteChannelMessages.channel_id;
                                                                                    ArrayList arrayList75 = (ArrayList) longSparseArray21.get(j31);
                                                                                    if (arrayList75 == null) {
                                                                                        arrayList75 = new ArrayList();
                                                                                        longSparseArray21.put(j31, arrayList75);
                                                                                    }
                                                                                    arrayList75.addAll(tLRPC$TL_updateDeleteChannelMessages.messages);
                                                                                    j2 = j12;
                                                                                } else {
                                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
                                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                                            FileLog.d(tLRPC$Update + " channelId = " + ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id);
                                                                                        }
                                                                                        if (arrayList29 == null) {
                                                                                            arrayList29 = new ArrayList();
                                                                                        }
                                                                                        arrayList20 = arrayList29;
                                                                                        arrayList20.add(tLRPC$Update);
                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChat) {
                                                                                        if (arrayList29 == null) {
                                                                                            arrayList29 = new ArrayList();
                                                                                        }
                                                                                        arrayList20 = arrayList29;
                                                                                        arrayList20.add(tLRPC$Update);
                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
                                                                                        TLRPC$TL_updateChannelMessageViews tLRPC$TL_updateChannelMessageViews = (TLRPC$TL_updateChannelMessageViews) tLRPC$Update;
                                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                                            FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateChannelMessageViews.channel_id);
                                                                                        }
                                                                                        LongSparseArray<SparseIntArray> longSparseArray51 = longSparseArray34;
                                                                                        if (longSparseArray51 == null) {
                                                                                            longSparseArray51 = new LongSparseArray<>();
                                                                                        }
                                                                                        long j32 = -tLRPC$TL_updateChannelMessageViews.channel_id;
                                                                                        SparseIntArray sparseIntArray5 = longSparseArray51.get(j32);
                                                                                        if (sparseIntArray5 == null) {
                                                                                            sparseIntArray5 = new SparseIntArray();
                                                                                            longSparseArray51.put(j32, sparseIntArray5);
                                                                                        }
                                                                                        sparseIntArray5.put(tLRPC$TL_updateChannelMessageViews.id, tLRPC$TL_updateChannelMessageViews.views);
                                                                                        j2 = j12;
                                                                                        longSparseArray30 = longSparseArray20;
                                                                                        longSparseArray34 = longSparseArray51;
                                                                                        concurrentHashMap4 = concurrentHashMap4;
                                                                                        arrayList28 = arrayList15;
                                                                                        longSparseArray29 = longSparseArray49;
                                                                                        longSparseIntArray7 = longSparseIntArray5;
                                                                                        longSparseArray28 = longSparseArray48;
                                                                                        arrayList27 = arrayList63;
                                                                                        j = j8;
                                                                                        arrayList35 = arrayList16;
                                                                                        arrayList32 = arrayList73;
                                                                                        longSparseArray27 = longSparseArray21;
                                                                                        longSparseIntArray8 = longSparseIntArray4;
                                                                                    } else {
                                                                                        LongSparseArray<SparseIntArray> longSparseArray52 = longSparseArray34;
                                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
                                                                                            TLRPC$TL_updateChannelMessageForwards tLRPC$TL_updateChannelMessageForwards = (TLRPC$TL_updateChannelMessageForwards) tLRPC$Update;
                                                                                            if (BuildVars.LOGS_ENABLED) {
                                                                                                FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateChannelMessageForwards.channel_id);
                                                                                            }
                                                                                            LongSparseArray<SparseIntArray> longSparseArray53 = longSparseArray35;
                                                                                            if (longSparseArray53 == null) {
                                                                                                longSparseArray53 = new LongSparseArray<>();
                                                                                            }
                                                                                            long j33 = -tLRPC$TL_updateChannelMessageForwards.channel_id;
                                                                                            SparseIntArray sparseIntArray6 = longSparseArray53.get(j33);
                                                                                            if (sparseIntArray6 == null) {
                                                                                                sparseIntArray6 = new SparseIntArray();
                                                                                                longSparseArray53.put(j33, sparseIntArray6);
                                                                                            }
                                                                                            sparseIntArray6.put(tLRPC$TL_updateChannelMessageForwards.id, tLRPC$TL_updateChannelMessageForwards.forwards);
                                                                                            j2 = j12;
                                                                                            longSparseArray35 = longSparseArray53;
                                                                                            longSparseArray34 = longSparseArray52;
                                                                                        } else {
                                                                                            LongSparseArray<SparseIntArray> longSparseArray54 = longSparseArray35;
                                                                                            if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantAdmin) {
                                                                                                TLRPC$TL_updateChatParticipantAdmin tLRPC$TL_updateChatParticipantAdmin = (TLRPC$TL_updateChatParticipantAdmin) tLRPC$Update;
                                                                                                longSparseArray19 = longSparseArray54;
                                                                                                longSparseArray47 = longSparseArray21;
                                                                                                getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantAdmin.chat_id, tLRPC$TL_updateChatParticipantAdmin.user_id, 2, tLRPC$TL_updateChatParticipantAdmin.is_admin ? 1L : 0L, tLRPC$TL_updateChatParticipantAdmin.version);
                                                                                            } else {
                                                                                                longSparseArray47 = longSparseArray21;
                                                                                                longSparseArray19 = longSparseArray54;
                                                                                                if (tLRPC$Update instanceof TLRPC$TL_updateChatDefaultBannedRights) {
                                                                                                    TLRPC$TL_updateChatDefaultBannedRights tLRPC$TL_updateChatDefaultBannedRights = (TLRPC$TL_updateChatDefaultBannedRights) tLRPC$Update;
                                                                                                    TLRPC$Peer tLRPC$Peer12 = tLRPC$TL_updateChatDefaultBannedRights.peer;
                                                                                                    long j34 = tLRPC$Peer12.channel_id;
                                                                                                    if (j34 == 0) {
                                                                                                        j34 = tLRPC$Peer12.chat_id;
                                                                                                    }
                                                                                                    getMessagesStorage().updateChatDefaultBannedRights(j34, tLRPC$TL_updateChatDefaultBannedRights.default_banned_rights, tLRPC$TL_updateChatDefaultBannedRights.version);
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSets) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSetsOrder) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewStickerSet) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateDraftMessage) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateMoveStickerSetToTop) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedGifs) {
                                                                                                    if (arrayList29 == null) {
                                                                                                        arrayList29 = new ArrayList();
                                                                                                    }
                                                                                                    arrayList19 = arrayList29;
                                                                                                    arrayList19.add(tLRPC$Update);
                                                                                                } else {
                                                                                                    boolean z11 = tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage;
                                                                                                    if (z11 || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage)) {
                                                                                                        if (z11) {
                                                                                                            tLRPC$Message2 = ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message;
                                                                                                            TLRPC$Chat tLRPC$Chat7 = concurrentHashMap4.get(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                                                                                            if (tLRPC$Chat7 == null) {
                                                                                                                tLRPC$Chat7 = getChat(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                                                                                            }
                                                                                                            if (tLRPC$Chat7 == null) {
                                                                                                                putChat(getMessagesStorage().getChatSync(tLRPC$Message2.peer_id.channel_id), true);
                                                                                                            }
                                                                                                            j2 = j12;
                                                                                                        } else {
                                                                                                            tLRPC$Message2 = ((TLRPC$TL_updateEditMessage) tLRPC$Update).message;
                                                                                                            j2 = j12;
                                                                                                            if (tLRPC$Message2.dialog_id == j2) {
                                                                                                                tLRPC$Message2.unread = false;
                                                                                                                tLRPC$Message2.media_unread = false;
                                                                                                                tLRPC$Message2.out = true;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!tLRPC$Message2.out) {
                                                                                                            TLRPC$Peer tLRPC$Peer13 = tLRPC$Message2.from_id;
                                                                                                            if ((tLRPC$Peer13 instanceof TLRPC$TL_peerUser) && tLRPC$Peer13.user_id == j2) {
                                                                                                                tLRPC$Message2.out = true;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!z) {
                                                                                                            int size8 = tLRPC$Message2.entities.size();
                                                                                                            int i28 = 0;
                                                                                                            while (i28 < size8) {
                                                                                                                TLRPC$MessageEntity tLRPC$MessageEntity2 = tLRPC$Message2.entities.get(i28);
                                                                                                                if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityMentionName) {
                                                                                                                    long j35 = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity2).user_id;
                                                                                                                    TLRPC$User tLRPC$User5 = concurrentHashMap.get(Long.valueOf(j35));
                                                                                                                    i7 = size8;
                                                                                                                    if (tLRPC$User5 == null || tLRPC$User5.min) {
                                                                                                                        tLRPC$User5 = getUser(Long.valueOf(j35));
                                                                                                                    }
                                                                                                                    if (tLRPC$User5 == null || tLRPC$User5.min) {
                                                                                                                        TLRPC$User userSync = getMessagesStorage().getUserSync(j35);
                                                                                                                        if (userSync != null && userSync.min) {
                                                                                                                            userSync = null;
                                                                                                                        }
                                                                                                                        putUser(userSync, true);
                                                                                                                        tLRPC$User5 = userSync;
                                                                                                                    }
                                                                                                                    if (tLRPC$User5 == null) {
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    i7 = size8;
                                                                                                                }
                                                                                                                i28++;
                                                                                                                size8 = i7;
                                                                                                            }
                                                                                                        }
                                                                                                        MessageObject.getDialogId(tLRPC$Message2);
                                                                                                        ConcurrentHashMap<Long, Integer> concurrentHashMap12 = tLRPC$Message2.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                                                                                                        Integer num6 = concurrentHashMap12.get(Long.valueOf(tLRPC$Message2.dialog_id));
                                                                                                        if (num6 == null) {
                                                                                                            num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message2.out, tLRPC$Message2.dialog_id));
                                                                                                            concurrentHashMap12.put(Long.valueOf(tLRPC$Message2.dialog_id), num6);
                                                                                                        }
                                                                                                        tLRPC$Message2.unread = num6.intValue() < tLRPC$Message2.id;
                                                                                                        if (tLRPC$Message2.dialog_id == j2) {
                                                                                                            tLRPC$Message2.out = true;
                                                                                                            tLRPC$Message2.unread = false;
                                                                                                            tLRPC$Message2.media_unread = false;
                                                                                                        }
                                                                                                        if (tLRPC$Message2.out && tLRPC$Message2.message == null) {
                                                                                                            tLRPC$Message2.message = "";
                                                                                                            tLRPC$Message2.attachPath = "";
                                                                                                        }
                                                                                                        ImageLoader.saveMessageThumbs(tLRPC$Message2);
                                                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda162
                                                                                                            @Override // java.lang.Runnable
                                                                                                            public final void run() {
                                                                                                                MessagesController.this.lambda$processUpdateArray$322(tLRPC$Message2);
                                                                                                            }
                                                                                                        });
                                                                                                        boolean contains5 = this.createdDialogIds.contains(Long.valueOf(tLRPC$Message2.dialog_id));
                                                                                                        longSparseArray18 = longSparseArray52;
                                                                                                        arrayList18 = arrayList73;
                                                                                                        MessageObject messageObject5 = new MessageObject(this.currentAccount, tLRPC$Message2, concurrentHashMap, concurrentHashMap4, contains5, contains5);
                                                                                                        longSparseArray29 = longSparseArray49 == null ? new LongSparseArray() : longSparseArray49;
                                                                                                        ArrayList arrayList76 = (ArrayList) longSparseArray29.get(tLRPC$Message2.dialog_id);
                                                                                                        if (arrayList76 == null) {
                                                                                                            arrayList76 = new ArrayList();
                                                                                                            longSparseArray29.put(tLRPC$Message2.dialog_id, arrayList76);
                                                                                                        }
                                                                                                        arrayList76.add(messageObject5);
                                                                                                        arrayList28 = arrayList15;
                                                                                                        concurrentHashMap4 = concurrentHashMap4;
                                                                                                        longSparseArray30 = longSparseArray20;
                                                                                                        longSparseArray35 = longSparseArray19;
                                                                                                        longSparseIntArray7 = longSparseIntArray5;
                                                                                                        longSparseIntArray8 = longSparseIntArray4;
                                                                                                        longSparseArray27 = longSparseArray47;
                                                                                                        longSparseArray28 = longSparseArray48;
                                                                                                        arrayList27 = arrayList63;
                                                                                                        j = j8;
                                                                                                        arrayList35 = arrayList16;
                                                                                                        longSparseArray34 = longSparseArray18;
                                                                                                        arrayList32 = arrayList18;
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
                                                                                                        TLRPC$TL_updatePinnedChannelMessages tLRPC$TL_updatePinnedChannelMessages = (TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update;
                                                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                                                            FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updatePinnedChannelMessages.channel_id);
                                                                                                        }
                                                                                                        getMessagesStorage().updatePinnedMessages(-tLRPC$TL_updatePinnedChannelMessages.channel_id, tLRPC$TL_updatePinnedChannelMessages.messages, tLRPC$TL_updatePinnedChannelMessages.pinned, -1, 0, false, null);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
                                                                                                        TLRPC$TL_updatePinnedMessages tLRPC$TL_updatePinnedMessages = (TLRPC$TL_updatePinnedMessages) tLRPC$Update;
                                                                                                        getMessagesStorage().updatePinnedMessages(MessageObject.getPeerId(tLRPC$TL_updatePinnedMessages.peer), tLRPC$TL_updatePinnedMessages.messages, tLRPC$TL_updatePinnedMessages.pinned, -1, 0, false, null);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedStickers) {
                                                                                                        if (arrayList29 == null) {
                                                                                                            arrayList29 = new ArrayList();
                                                                                                        }
                                                                                                        arrayList19 = arrayList29;
                                                                                                        arrayList19.add(tLRPC$Update);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedEmojiStickers) {
                                                                                                        if (arrayList29 == null) {
                                                                                                            arrayList29 = new ArrayList();
                                                                                                        }
                                                                                                        arrayList19 = arrayList29;
                                                                                                        arrayList19.add(tLRPC$Update);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCall) {
                                                                                                        if (arrayList29 == null) {
                                                                                                            arrayList29 = new ArrayList();
                                                                                                        }
                                                                                                        arrayList19 = arrayList29;
                                                                                                        arrayList19.add(tLRPC$Update);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCallParticipants) {
                                                                                                        if (arrayList29 == null) {
                                                                                                            arrayList29 = new ArrayList();
                                                                                                        }
                                                                                                        arrayList19 = arrayList29;
                                                                                                        arrayList19.add(tLRPC$Update);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCall) {
                                                                                                        if (arrayList29 == null) {
                                                                                                            arrayList29 = new ArrayList();
                                                                                                        }
                                                                                                        arrayList19 = arrayList29;
                                                                                                        arrayList19.add(tLRPC$Update);
                                                                                                    } else if (!(tLRPC$Update instanceof TLRPC$TL_updateGroupCallConnection)) {
                                                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateBotCommands) {
                                                                                                            if (arrayList29 == null) {
                                                                                                                arrayList29 = new ArrayList();
                                                                                                            }
                                                                                                            arrayList19 = arrayList29;
                                                                                                            arrayList19.add(tLRPC$Update);
                                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCallSignalingData) {
                                                                                                            if (arrayList29 == null) {
                                                                                                                arrayList29 = new ArrayList();
                                                                                                            }
                                                                                                            arrayList19 = arrayList29;
                                                                                                            arrayList19.add(tLRPC$Update);
                                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateLangPack) {
                                                                                                            final TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack = (TLRPC$TL_updateLangPack) tLRPC$Update;
                                                                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda185
                                                                                                                @Override // java.lang.Runnable
                                                                                                                public final void run() {
                                                                                                                    MessagesController.this.lambda$processUpdateArray$323(tLRPC$TL_updateLangPack);
                                                                                                                }
                                                                                                            });
                                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateLangPackTooLong) {
                                                                                                            LocaleController.getInstance().reloadCurrentRemoteLocale(this.currentAccount, ((TLRPC$TL_updateLangPackTooLong) tLRPC$Update).lang_code, false);
                                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentReactions) {
                                                                                                            if (arrayList29 == null) {
                                                                                                                arrayList29 = new ArrayList();
                                                                                                            }
                                                                                                            arrayList19 = arrayList29;
                                                                                                            arrayList19.add(tLRPC$Update);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                j2 = j12;
                                                                                                arrayList29 = arrayList19;
                                                                                                longSparseArray30 = longSparseArray20;
                                                                                                concurrentHashMap4 = concurrentHashMap4;
                                                                                                arrayList28 = arrayList15;
                                                                                                longSparseArray29 = longSparseArray49;
                                                                                                longSparseArray35 = longSparseArray19;
                                                                                                longSparseIntArray7 = longSparseIntArray5;
                                                                                                longSparseIntArray8 = longSparseIntArray4;
                                                                                                longSparseArray28 = longSparseArray48;
                                                                                                arrayList27 = arrayList63;
                                                                                                j = j8;
                                                                                                arrayList35 = arrayList16;
                                                                                                arrayList32 = arrayList73;
                                                                                                longSparseArray34 = longSparseArray52;
                                                                                                longSparseArray27 = longSparseArray47;
                                                                                            }
                                                                                            j2 = j12;
                                                                                            arrayList18 = arrayList73;
                                                                                            longSparseArray18 = longSparseArray52;
                                                                                            concurrentHashMap5 = concurrentHashMap4;
                                                                                            arrayList17 = arrayList15;
                                                                                        }
                                                                                    }
                                                                                    j2 = j12;
                                                                                    arrayList29 = arrayList20;
                                                                                }
                                                                                longSparseArray30 = longSparseArray20;
                                                                                concurrentHashMap4 = concurrentHashMap4;
                                                                                arrayList28 = arrayList15;
                                                                                longSparseArray29 = longSparseArray49;
                                                                                longSparseIntArray7 = longSparseIntArray5;
                                                                                longSparseArray28 = longSparseArray48;
                                                                                arrayList27 = arrayList63;
                                                                                j = j8;
                                                                                arrayList35 = arrayList16;
                                                                                arrayList32 = arrayList73;
                                                                                longSparseArray27 = longSparseArray21;
                                                                                longSparseIntArray8 = longSparseIntArray4;
                                                                            }
                                                                        }
                                                                        concurrentHashMap4 = concurrentHashMap4;
                                                                        arrayList28 = arrayList15;
                                                                        longSparseArray29 = longSparseArray49;
                                                                        longSparseIntArray7 = longSparseIntArray5;
                                                                        arrayList27 = arrayList63;
                                                                        j = j8;
                                                                        arrayList35 = arrayList16;
                                                                        arrayList32 = arrayList73;
                                                                        longSparseArray30 = longSparseArray20;
                                                                        longSparseArray28 = longSparseArray48;
                                                                        longSparseArray27 = longSparseArray21;
                                                                        longSparseIntArray8 = longSparseIntArray4;
                                                                    }
                                                                    j2 = j12;
                                                                    arrayList32 = arrayList73;
                                                                    longSparseArray30 = longSparseArray20;
                                                                    longSparseArray37 = longSparseArray22;
                                                                }
                                                                j2 = j12;
                                                                arrayList29 = arrayList21;
                                                                arrayList32 = arrayList73;
                                                                longSparseArray30 = longSparseArray20;
                                                            }
                                                            arrayList28 = arrayList15;
                                                            longSparseArray29 = longSparseArray49;
                                                            longSparseIntArray8 = longSparseIntArray4;
                                                            longSparseArray27 = longSparseArray47;
                                                            longSparseArray28 = longSparseArray48;
                                                            arrayList27 = arrayList63;
                                                            j = j8;
                                                            arrayList35 = arrayList16;
                                                        }
                                                        arrayList28 = arrayList17;
                                                        concurrentHashMap4 = concurrentHashMap5;
                                                        longSparseArray30 = longSparseArray20;
                                                        longSparseArray29 = longSparseArray49;
                                                        longSparseArray35 = longSparseArray19;
                                                        longSparseIntArray7 = longSparseIntArray5;
                                                        longSparseIntArray8 = longSparseIntArray4;
                                                        longSparseArray27 = longSparseArray47;
                                                        longSparseArray28 = longSparseArray48;
                                                        arrayList27 = arrayList63;
                                                        j = j8;
                                                        arrayList35 = arrayList16;
                                                        longSparseArray34 = longSparseArray18;
                                                        arrayList32 = arrayList18;
                                                    }
                                                }
                                                j8 = j7;
                                                arrayList16 = arrayList66;
                                                longSparseArray18 = longSparseArray34;
                                                longSparseArray19 = longSparseArray35;
                                                longSparseArray20 = longSparseArray17;
                                                concurrentHashMap5 = concurrentHashMap4;
                                                j2 = j12;
                                                arrayList17 = arrayList15;
                                                arrayList18 = arrayList32;
                                                longSparseIntArray5 = longSparseIntArray7;
                                                arrayList28 = arrayList17;
                                                concurrentHashMap4 = concurrentHashMap5;
                                                longSparseArray30 = longSparseArray20;
                                                longSparseArray29 = longSparseArray49;
                                                longSparseArray35 = longSparseArray19;
                                                longSparseIntArray7 = longSparseIntArray5;
                                                longSparseIntArray8 = longSparseIntArray4;
                                                longSparseArray27 = longSparseArray47;
                                                longSparseArray28 = longSparseArray48;
                                                arrayList27 = arrayList63;
                                                j = j8;
                                                arrayList35 = arrayList16;
                                                longSparseArray34 = longSparseArray18;
                                                arrayList32 = arrayList18;
                                            }
                                        }
                                        arrayList28 = arrayList15;
                                        longSparseArray29 = longSparseArray49;
                                        longSparseArray28 = longSparseArray48;
                                        arrayList27 = arrayList63;
                                        j = j7;
                                        longSparseIntArray8 = longSparseIntArray4;
                                        longSparseArray27 = longSparseArray47;
                                    }
                                    i11 = i8;
                                    arrayList29 = arrayList25;
                                }
                                if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                                }
                                arrayList29 = arrayList14;
                                sparseIntArray2 = sparseIntArray3;
                            }
                            j = j13;
                            longSparseArray29 = longSparseArray4;
                        }
                        i3 = i13;
                        arrayList28 = arrayList15;
                        j2 = j12;
                        concurrentHashMap4 = concurrentHashMap7;
                        if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                        }
                        arrayList29 = arrayList14;
                        sparseIntArray2 = sparseIntArray3;
                    }
                }
                longSparseArray8 = longSparseArray31;
                i2 = i12;
                j = j13;
                longSparseArray29 = longSparseArray4;
                i3 = i13;
                arrayList28 = arrayList15;
                j2 = j12;
                concurrentHashMap4 = concurrentHashMap7;
                if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                }
                arrayList29 = arrayList14;
                sparseIntArray2 = sparseIntArray3;
            }
            size3 = i3;
            j12 = j2;
            concurrentHashMap7 = concurrentHashMap4;
            j13 = j;
            longSparseArray31 = longSparseArray8;
        }
        final LongSparseIntArray longSparseIntArray23 = longSparseIntArray8;
        final LongSparseArray longSparseArray55 = longSparseArray27;
        final LongSparseArray longSparseArray56 = longSparseArray28;
        final SparseIntArray sparseIntArray7 = sparseIntArray2;
        ArrayList<Long> arrayList77 = arrayList27;
        final ArrayList arrayList78 = arrayList28;
        final LongSparseArray longSparseArray57 = longSparseArray30;
        final LongSparseArray<ArrayList<Integer>> longSparseArray58 = longSparseArray31;
        final LongSparseArray<SparseIntArray> longSparseArray59 = longSparseArray34;
        LongSparseArray<SparseIntArray> longSparseArray60 = longSparseArray35;
        final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray61 = longSparseArray36;
        final ArrayList arrayList79 = arrayList32;
        final LongSparseIntArray longSparseIntArray24 = longSparseIntArray11;
        HashMap hashMap7 = hashMap4;
        ArrayList arrayList80 = arrayList35;
        final LongSparseIntArray longSparseIntArray25 = longSparseIntArray7;
        LongSparseArray longSparseArray62 = longSparseArray29;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap8 = hashMap5;
        if (longSparseArray57 != null) {
            int size9 = longSparseArray57.size();
            for (int i29 = 0; i29 < size9; i29++) {
                if (updatePrintingUsersWithNewMessages(longSparseArray57.keyAt(i29), (ArrayList) longSparseArray57.valueAt(i29))) {
                    z8 = true;
                }
            }
        }
        if (z8) {
            updatePrintingStrings();
        }
        if (arrayList77 != null) {
            arrayList4 = arrayList77;
            getContactsController().processContactsUpdates(arrayList4, concurrentHashMap);
        } else {
            arrayList4 = arrayList77;
        }
        if (arrayList79 != null) {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda113
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$325(arrayList79);
                }
            });
        }
        if (arrayList33 != null) {
            getMessagesStorage().putMessages(arrayList33, true, true, false, getDownloadController().getAutodownloadMask(), true, 0);
        }
        if (arrayList34 != null) {
            getStatsController().incrementReceivedItemsCount(ApplicationLoader.getCurrentNetworkType(), 1, arrayList34.size());
            getMessagesStorage().putMessages(arrayList34, true, true, false, getDownloadController().getAutodownloadMask(), false, 0);
        }
        if (longSparseArray62 != null) {
            int size10 = longSparseArray62.size();
            int i30 = 0;
            while (i30 < size10) {
                TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
                LongSparseArray longSparseArray63 = longSparseArray62;
                ArrayList arrayList81 = (ArrayList) longSparseArray63.valueAt(i30);
                int size11 = arrayList81.size();
                for (int i31 = 0; i31 < size11; i31++) {
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList81.get(i31)).messageOwner);
                }
                getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, longSparseArray63.keyAt(i30), -2, 0, false, false, 0);
                i30++;
                longSparseArray62 = longSparseArray63;
            }
            longSparseArray = longSparseArray62;
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda101
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$327(longSparseArray);
                }
            });
        } else {
            longSparseArray = longSparseArray62;
        }
        if (longSparseArray59 == null && longSparseArray60 == null && longSparseArray61 == null) {
            longSparseArray2 = longSparseArray60;
        } else {
            longSparseArray2 = longSparseArray60;
            getMessagesStorage().putChannelViews(longSparseArray59, longSparseArray2, longSparseArray61, true);
        }
        if (arrayList78 != null) {
            int size12 = arrayList78.size();
            for (int i32 = 0; i32 < size12; i32++) {
                getMessagesStorage().setDialogsFolderId(((TLRPC$TL_updateFolderPeers) arrayList78.get(i32)).folder_peers, null, 0L, 0);
            }
        }
        final int i33 = i11;
        final ArrayList arrayList82 = arrayList29;
        final LongSparseArray<TLRPC$WebPage> longSparseArray64 = longSparseArray37;
        final LongSparseArray longSparseArray65 = longSparseArray32;
        final LongSparseIntArray longSparseIntArray26 = longSparseIntArray9;
        final LongSparseArray<SparseIntArray> longSparseArray66 = longSparseArray2;
        final LongSparseArray longSparseArray67 = longSparseArray33;
        final LongSparseArray longSparseArray68 = longSparseArray;
        final boolean z12 = z8;
        final ArrayList arrayList83 = arrayList30;
        final ArrayList arrayList84 = arrayList31;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda54
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$335(i33, arrayList82, longSparseArray65, i, longSparseIntArray26, longSparseArray64, longSparseArray57, arrayList78, longSparseArray67, longSparseArray68, z12, arrayList4, arrayList83, longSparseArray59, longSparseArray66, longSparseArray61, arrayList84);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda140
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$337(longSparseIntArray25, longSparseIntArray23, sparseIntArray7, longSparseArray58, longSparseArray55, longSparseArray56, longSparseIntArray24);
            }
        });
        if (longSparseArray64 != null) {
            getMessagesStorage().putWebPages(longSparseArray64);
        }
        if (longSparseIntArray25 == null) {
            longSparseIntArray = longSparseIntArray23;
            sparseIntArray = sparseIntArray7;
            if (longSparseIntArray == null) {
                longSparseArray3 = longSparseArray58;
                if (sparseIntArray == null && longSparseArray3 == null && longSparseIntArray10 == null) {
                    hashMap = hashMap7;
                    z2 = true;
                    if (hashMap != null) {
                        for (MessagesStorage.TopicKey topicKey : hashMap.keySet()) {
                            getMessagesStorage().updateRepliesMaxReadId(-topicKey.dialogId, topicKey.topicId, ((Integer) hashMap.get(topicKey)).intValue(), -1, true);
                        }
                    }
                    if (hashMap8 != null) {
                        getMessagesStorage().updateTopicsWithReadMessages(hashMap8);
                        getTopicsController().updateReadOutbox(hashMap8);
                    }
                    if (longSparseArray3 != null) {
                        int currentTime = getConnectionsManager().getCurrentTime();
                        int size13 = longSparseArray3.size();
                        for (int i34 = 0; i34 < size13; i34++) {
                            getMessagesStorage().markMessagesContentAsRead(longSparseArray3.keyAt(i34), longSparseArray3.valueAt(i34), currentTime);
                        }
                    }
                    if (longSparseArray55 != null) {
                        int size14 = longSparseArray55.size();
                        for (int i35 = 0; i35 < size14; i35++) {
                            final long keyAt = longSparseArray55.keyAt(i35);
                            final ArrayList arrayList85 = (ArrayList) longSparseArray55.valueAt(i35);
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda86
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdateArray$338(keyAt, arrayList85);
                                }
                            });
                        }
                    }
                    if (longSparseArray56 != null) {
                        int size15 = longSparseArray56.size();
                        for (int i36 = 0; i36 < size15; i36++) {
                            getMessagesStorage().markMessagesAsDeleted(longSparseArray56.keyAt(i36), (ArrayList) longSparseArray56.valueAt(i36), true, false, true);
                        }
                    }
                    if (longSparseIntArray24 != null) {
                        int size16 = longSparseIntArray24.size();
                        for (int i37 = 0; i37 < size16; i37++) {
                            final long keyAt2 = longSparseIntArray24.keyAt(i37);
                            final int valueAt = longSparseIntArray24.valueAt(i37);
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda72
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdateArray$339(keyAt2, valueAt);
                                }
                            });
                        }
                    }
                    if (arrayList80 != null) {
                        int size17 = arrayList80.size();
                        for (int i38 = 0; i38 < size17; i38++) {
                            TLRPC$TL_updateEncryptedMessagesRead tLRPC$TL_updateEncryptedMessagesRead2 = (TLRPC$TL_updateEncryptedMessagesRead) arrayList80.get(i38);
                            getMessagesStorage().createTaskForSecretChat(tLRPC$TL_updateEncryptedMessagesRead2.chat_id, tLRPC$TL_updateEncryptedMessagesRead2.max_date, tLRPC$TL_updateEncryptedMessagesRead2.date, 1, null);
                        }
                    }
                    return z2;
                }
                if (longSparseIntArray25 == null || longSparseIntArray != null || longSparseArray3 != null || longSparseIntArray10 != null) {
                    getMessagesStorage().updateDialogsWithReadMessages(longSparseIntArray25, longSparseIntArray, longSparseArray3, longSparseIntArray10, true);
                }
                z2 = true;
                getMessagesStorage().markMessagesAsRead(longSparseIntArray25, longSparseIntArray, sparseIntArray, true);
                hashMap = hashMap7;
                if (hashMap != null) {
                }
                if (hashMap8 != null) {
                }
                if (longSparseArray3 != null) {
                }
                if (longSparseArray55 != null) {
                }
                if (longSparseArray56 != null) {
                }
                if (longSparseIntArray24 != null) {
                }
                if (arrayList80 != null) {
                }
                return z2;
            }
        } else {
            sparseIntArray = sparseIntArray7;
            longSparseIntArray = longSparseIntArray23;
        }
        longSparseArray3 = longSparseArray58;
        if (longSparseIntArray25 == null) {
        }
        getMessagesStorage().updateDialogsWithReadMessages(longSparseIntArray25, longSparseIntArray, longSparseArray3, longSparseIntArray10, true);
        z2 = true;
        getMessagesStorage().markMessagesAsRead(longSparseIntArray25, longSparseIntArray, sparseIntArray, true);
        hashMap = hashMap7;
        if (hashMap != null) {
        }
        if (hashMap8 != null) {
        }
        if (longSparseArray3 != null) {
        }
        if (longSparseArray55 != null) {
        }
        if (longSparseArray56 != null) {
        }
        if (longSparseIntArray24 != null) {
        }
        if (arrayList80 != null) {
        }
        return z2;
    }

    public /* synthetic */ void lambda$processUpdateArray$315(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$316(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$317(TLRPC$TL_updateUserTyping tLRPC$TL_updateUserTyping) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(tLRPC$TL_updateUserTyping.user_id), tLRPC$TL_updateUserTyping.action);
    }

    public /* synthetic */ void lambda$processUpdateArray$318(TLRPC$TL_updateChatUserTyping tLRPC$TL_updateChatUserTyping) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(-tLRPC$TL_updateChatUserTyping.chat_id), tLRPC$TL_updateChatUserTyping.action);
    }

    public /* synthetic */ void lambda$processUpdateArray$320(final TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$319(tLRPC$TL_updatePeerBlocked);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$319(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        long peerId = MessageObject.getPeerId(tLRPC$TL_updatePeerBlocked.peer_id);
        if (tLRPC$TL_updatePeerBlocked.blocked) {
            if (this.blockePeers.indexOfKey(peerId) < 0) {
                this.blockePeers.put(peerId, 1);
            }
        } else {
            this.blockePeers.delete(peerId);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdateArray$321(TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, tLRPC$TL_updateServiceNotification.message, tLRPC$TL_updateServiceNotification.type);
    }

    public /* synthetic */ void lambda$processUpdateArray$322(TLRPC$Message tLRPC$Message) {
        getSendMessagesHelper().onMessageEdited(tLRPC$Message);
    }

    public /* synthetic */ void lambda$processUpdateArray$323(TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tLRPC$TL_updateLangPack.difference, this.currentAccount);
    }

    public /* synthetic */ void lambda$processUpdateArray$324(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$processUpdateArray$325(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda116
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$324(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$327(final LongSparseArray longSparseArray) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$326(longSparseArray);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$326(LongSparseArray longSparseArray) {
        getNotificationsController().processEditedMessages(longSparseArray);
        getTopicsController().processEditedMessages(longSparseArray);
    }

    public /* synthetic */ void lambda$processUpdateArray$328(TLRPC$User tLRPC$User) {
        getContactsController().addContactToPhoneBook(tLRPC$User, true);
    }

    public /* synthetic */ void lambda$processUpdateArray$329() {
        getNotificationsController().deleteNotificationChannelGlobal(0);
    }

    public /* synthetic */ void lambda$processUpdateArray$330() {
        getNotificationsController().deleteNotificationChannelGlobal(1);
    }

    public /* synthetic */ void lambda$processUpdateArray$331() {
        getNotificationsController().deleteNotificationChannelGlobal(2);
    }

    public /* synthetic */ void lambda$processUpdateArray$332(TLRPC$TL_updateChannel tLRPC$TL_updateChannel) {
        getChannelDifference(tLRPC$TL_updateChannel.channel_id, 1, 0L, null);
    }

    public /* synthetic */ void lambda$processUpdateArray$333(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public /* synthetic */ void lambda$processUpdateArray$334(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:710:0x0f72  */
    /* JADX WARN: Removed duplicated region for block: B:716:0x0f8e  */
    /* JADX WARN: Removed duplicated region for block: B:775:0x1093  */
    /* JADX WARN: Removed duplicated region for block: B:777:0x10a1  */
    /* JADX WARN: Removed duplicated region for block: B:779:0x10a7  */
    /* JADX WARN: Removed duplicated region for block: B:782:0x10b3  */
    /* JADX WARN: Removed duplicated region for block: B:791:0x10ef  */
    /* JADX WARN: Removed duplicated region for block: B:794:0x1105  */
    /* JADX WARN: Removed duplicated region for block: B:797:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$335(int i, ArrayList arrayList, LongSparseArray longSparseArray, int i2, LongSparseIntArray longSparseIntArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, ArrayList arrayList2, LongSparseArray longSparseArray4, LongSparseArray longSparseArray5, boolean z, ArrayList arrayList3, ArrayList arrayList4, LongSparseArray longSparseArray6, LongSparseArray longSparseArray7, LongSparseArray longSparseArray8, ArrayList arrayList5) {
        int i3;
        boolean z2;
        int i4;
        long j;
        LongSparseArray longSparseArray9;
        boolean z3;
        int i5;
        long j2;
        MessageObject messageObject;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray10;
        long j3;
        boolean z4;
        ArrayList<TLRPC$User> arrayList6;
        int i6;
        ArrayList<TLRPC$User> arrayList7;
        int i7;
        ArrayList<TLRPC$User> arrayList8;
        TLRPC$ChatFull chatFull;
        TLRPC$UserFull tLRPC$UserFull;
        long j4;
        long j5;
        long j6;
        boolean z5;
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        int i8;
        int i9;
        int i10;
        TLRPC$Dialog tLRPC$Dialog;
        ChatObject.Call groupCall;
        long j7;
        int i11;
        ArrayList<Long> arrayList9;
        int i12;
        long j8;
        String str;
        String str2;
        int i13;
        ArrayList arrayList10 = arrayList;
        int i14 = 0;
        if (arrayList10 != null) {
            ArrayList<TLRPC$User> arrayList11 = new ArrayList<>();
            ArrayList<TLRPC$User> arrayList12 = new ArrayList<>();
            int size = arrayList.size();
            i3 = i;
            int i15 = 0;
            SharedPreferences.Editor editor = null;
            int i16 = 0;
            boolean z6 = false;
            while (i15 < size) {
                TLRPC$Update tLRPC$Update = (TLRPC$Update) arrayList10.get(i15);
                if (tLRPC$Update instanceof TLRPC$TL_updatePrivacy) {
                    TLRPC$TL_updatePrivacy tLRPC$TL_updatePrivacy = (TLRPC$TL_updatePrivacy) tLRPC$Update;
                    TLRPC$PrivacyKey tLRPC$PrivacyKey = tLRPC$TL_updatePrivacy.key;
                    if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyStatusTimestamp) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, i14);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyChatInvite) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 1);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneCall) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 2);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneP2P) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 3);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyProfilePhoto) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 4);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyForwards) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 5);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneNumber) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 6);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyAddedByPhone) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 7);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyVoiceMessages) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 8);
                    }
                    arrayList8 = arrayList12;
                    i7 = i15;
                    i6 = size;
                    arrayList7 = arrayList11;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserStatus) {
                    TLRPC$TL_updateUserStatus tLRPC$TL_updateUserStatus = (TLRPC$TL_updateUserStatus) tLRPC$Update;
                    int i17 = i15;
                    TLRPC$User user = getUser(Long.valueOf(tLRPC$TL_updateUserStatus.user_id));
                    TLRPC$UserStatus tLRPC$UserStatus = tLRPC$TL_updateUserStatus.status;
                    if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                        tLRPC$UserStatus.expires = -100;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                        tLRPC$UserStatus.expires = -101;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                        tLRPC$UserStatus.expires = -102;
                    }
                    if (user != null) {
                        user.id = tLRPC$TL_updateUserStatus.user_id;
                        user.status = tLRPC$UserStatus;
                    }
                    TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
                    tLRPC$TL_user.id = tLRPC$TL_updateUserStatus.user_id;
                    tLRPC$TL_user.status = tLRPC$TL_updateUserStatus.status;
                    arrayList12.add(tLRPC$TL_user);
                    if (tLRPC$TL_updateUserStatus.user_id == getUserConfig().getClientUserId()) {
                        getNotificationsController().setLastOnlineFromOtherDevice(tLRPC$TL_updateUserStatus.status.expires);
                    }
                    arrayList8 = arrayList12;
                    i6 = size;
                    arrayList7 = arrayList11;
                    i7 = i17;
                } else {
                    int i18 = i15;
                    if (tLRPC$Update instanceof TLRPC$TL_updateUserEmojiStatus) {
                        TLRPC$TL_updateUserEmojiStatus tLRPC$TL_updateUserEmojiStatus = (TLRPC$TL_updateUserEmojiStatus) tLRPC$Update;
                        TLRPC$User user2 = getUser(Long.valueOf(tLRPC$TL_updateUserEmojiStatus.user_id));
                        if (user2 != null) {
                            user2.id = tLRPC$TL_updateUserEmojiStatus.user_id;
                            user2.emoji_status = tLRPC$TL_updateUserEmojiStatus.emoji_status;
                            if (UserObject.isUserSelf(user2)) {
                                arrayList6 = arrayList12;
                                getNotificationCenter().postNotificationName(NotificationCenter.userEmojiStatusUpdated, user2);
                                TLRPC$TL_user tLRPC$TL_user2 = new TLRPC$TL_user();
                                tLRPC$TL_user2.id = tLRPC$TL_updateUserEmojiStatus.user_id;
                                tLRPC$TL_user2.emoji_status = tLRPC$TL_updateUserEmojiStatus.emoji_status;
                                arrayList11.add(tLRPC$TL_user2);
                            }
                        }
                        arrayList6 = arrayList12;
                        TLRPC$TL_user tLRPC$TL_user22 = new TLRPC$TL_user();
                        tLRPC$TL_user22.id = tLRPC$TL_updateUserEmojiStatus.user_id;
                        tLRPC$TL_user22.emoji_status = tLRPC$TL_updateUserEmojiStatus.emoji_status;
                        arrayList11.add(tLRPC$TL_user22);
                    } else {
                        arrayList6 = arrayList12;
                        if (tLRPC$Update instanceof TLRPC$TL_updateUserName) {
                            TLRPC$TL_updateUserName tLRPC$TL_updateUserName = (TLRPC$TL_updateUserName) tLRPC$Update;
                            TLRPC$User user3 = getUser(Long.valueOf(tLRPC$TL_updateUserName.user_id));
                            if (user3 != null) {
                                if (!UserObject.isContact(user3)) {
                                    user3.first_name = tLRPC$TL_updateUserName.first_name;
                                    user3.last_name = tLRPC$TL_updateUserName.last_name;
                                }
                                if (user3.usernames != null) {
                                    for (int i19 = 0; i19 < user3.usernames.size(); i19++) {
                                        TLRPC$TL_username tLRPC$TL_username = user3.usernames.get(i19);
                                        if (tLRPC$TL_username != null && !TextUtils.isEmpty(tLRPC$TL_username.username)) {
                                            this.objectsByUsernames.remove(tLRPC$TL_username.username);
                                        }
                                    }
                                }
                                for (int i20 = 0; i20 < tLRPC$TL_updateUserName.usernames.size(); i20++) {
                                    String str3 = tLRPC$TL_updateUserName.usernames.get(i20).username;
                                    if (!TextUtils.isEmpty(str3) && tLRPC$TL_updateUserName.usernames.get(i20).active) {
                                        this.objectsByUsernames.put(str3, user3);
                                    }
                                }
                                ArrayList<TLRPC$TL_username> arrayList13 = tLRPC$TL_updateUserName.usernames;
                                if (arrayList13 != null) {
                                    i13 = 1;
                                    if (arrayList13.size() > 1) {
                                        str = null;
                                        user3.username = null;
                                        user3.usernames = tLRPC$TL_updateUserName.usernames;
                                    } else {
                                        str = null;
                                    }
                                } else {
                                    str = null;
                                    i13 = 1;
                                }
                                ArrayList<TLRPC$TL_username> arrayList14 = tLRPC$TL_updateUserName.usernames;
                                user3.username = (arrayList14 == null || arrayList14.size() != i13) ? str : tLRPC$TL_updateUserName.usernames.get(0).username;
                                user3.usernames.clear();
                            } else {
                                str = null;
                            }
                            TLRPC$TL_user tLRPC$TL_user3 = new TLRPC$TL_user();
                            tLRPC$TL_user3.id = tLRPC$TL_updateUserName.user_id;
                            tLRPC$TL_user3.first_name = tLRPC$TL_updateUserName.first_name;
                            tLRPC$TL_user3.last_name = tLRPC$TL_updateUserName.last_name;
                            ArrayList<TLRPC$TL_username> arrayList15 = tLRPC$TL_updateUserName.usernames;
                            if (arrayList15 != null && arrayList15.size() == 1) {
                                str2 = tLRPC$TL_updateUserName.usernames.get(0).username;
                                tLRPC$TL_user3.username = str2;
                                arrayList11.add(tLRPC$TL_user3);
                            }
                            str2 = str;
                            tLRPC$TL_user3.username = str2;
                            arrayList11.add(tLRPC$TL_user3);
                        } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogPinned) {
                            TLRPC$TL_updateDialogPinned tLRPC$TL_updateDialogPinned = (TLRPC$TL_updateDialogPinned) tLRPC$Update;
                            TLRPC$DialogPeer tLRPC$DialogPeer = tLRPC$TL_updateDialogPinned.peer;
                            long peerDialogId = tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer ? DialogObject.getPeerDialogId(((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer) : 0L;
                            arrayList8 = arrayList6;
                            i7 = i18;
                            i6 = size;
                            arrayList7 = arrayList11;
                            if (!pinDialog(peerDialogId, tLRPC$TL_updateDialogPinned.pinned, null, -1L)) {
                                getUserConfig().setPinnedDialogsLoaded(tLRPC$TL_updateDialogPinned.folder_id, false);
                                getUserConfig().saveConfig(false);
                                loadPinnedDialogs(tLRPC$TL_updateDialogPinned.folder_id, peerDialogId, null);
                            }
                        } else {
                            i6 = size;
                            arrayList7 = arrayList11;
                            i7 = i18;
                            arrayList8 = arrayList6;
                            if (tLRPC$Update instanceof TLRPC$TL_updatePinnedDialogs) {
                                TLRPC$TL_updatePinnedDialogs tLRPC$TL_updatePinnedDialogs = (TLRPC$TL_updatePinnedDialogs) tLRPC$Update;
                                getUserConfig().setPinnedDialogsLoaded(tLRPC$TL_updatePinnedDialogs.folder_id, false);
                                getUserConfig().saveConfig(false);
                                if ((tLRPC$TL_updatePinnedDialogs.flags & 1) != 0) {
                                    arrayList9 = new ArrayList<>();
                                    ArrayList<TLRPC$DialogPeer> arrayList16 = tLRPC$TL_updatePinnedDialogs.order;
                                    int size2 = arrayList16.size();
                                    int i21 = 0;
                                    while (i21 < size2) {
                                        TLRPC$DialogPeer tLRPC$DialogPeer2 = arrayList16.get(i21);
                                        if (tLRPC$DialogPeer2 instanceof TLRPC$TL_dialogPeer) {
                                            TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer2).peer;
                                            i12 = size2;
                                            j8 = tLRPC$Peer.user_id;
                                            if (j8 == 0) {
                                                long j9 = tLRPC$Peer.chat_id;
                                                if (j9 == 0) {
                                                    j9 = tLRPC$Peer.channel_id;
                                                }
                                                j8 = -j9;
                                            }
                                        } else {
                                            i12 = size2;
                                            j8 = 0;
                                        }
                                        arrayList9.add(Long.valueOf(j8));
                                        i21++;
                                        size2 = i12;
                                    }
                                } else {
                                    arrayList9 = null;
                                }
                                loadPinnedDialogs(tLRPC$TL_updatePinnedDialogs.folder_id, 0L, arrayList9);
                            } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhoto) {
                                TLRPC$TL_updateUserPhoto tLRPC$TL_updateUserPhoto = (TLRPC$TL_updateUserPhoto) tLRPC$Update;
                                TLRPC$User user4 = getUser(Long.valueOf(tLRPC$TL_updateUserPhoto.user_id));
                                if (user4 != null) {
                                    user4.photo = tLRPC$TL_updateUserPhoto.photo;
                                }
                                TLRPC$TL_user tLRPC$TL_user4 = new TLRPC$TL_user();
                                tLRPC$TL_user4.id = tLRPC$TL_updateUserPhoto.user_id;
                                tLRPC$TL_user4.photo = tLRPC$TL_updateUserPhoto.photo;
                                arrayList7.add(tLRPC$TL_user4);
                                if (UserObject.isUserSelf(user4)) {
                                    getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                }
                            } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhone) {
                                TLRPC$TL_updateUserPhone tLRPC$TL_updateUserPhone = (TLRPC$TL_updateUserPhone) tLRPC$Update;
                                final TLRPC$User user5 = getUser(Long.valueOf(tLRPC$TL_updateUserPhone.user_id));
                                if (user5 != null) {
                                    user5.phone = tLRPC$TL_updateUserPhone.phone;
                                    Utilities.phoneBookQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda192
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesController.this.lambda$processUpdateArray$328(user5);
                                        }
                                    });
                                    if (UserObject.isUserSelf(user5)) {
                                        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                    }
                                }
                                TLRPC$TL_user tLRPC$TL_user5 = new TLRPC$TL_user();
                                tLRPC$TL_user5.id = tLRPC$TL_updateUserPhone.user_id;
                                tLRPC$TL_user5.phone = tLRPC$TL_updateUserPhone.phone;
                                arrayList7.add(tLRPC$TL_user5);
                            } else if (tLRPC$Update instanceof TLRPC$TL_updateNotifySettings) {
                                TLRPC$TL_updateNotifySettings tLRPC$TL_updateNotifySettings = (TLRPC$TL_updateNotifySettings) tLRPC$Update;
                                if (tLRPC$TL_updateNotifySettings.notify_settings instanceof TLRPC$TL_peerNotifySettings) {
                                    i16 |= DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                                    SharedPreferences.Editor edit = editor == null ? this.notificationsPreferences.edit() : editor;
                                    getConnectionsManager().getCurrentTime();
                                    TLRPC$NotifyPeer tLRPC$NotifyPeer = tLRPC$TL_updateNotifySettings.peer;
                                    if ((tLRPC$NotifyPeer instanceof TLRPC$TL_notifyPeer) || (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyForumTopic)) {
                                        if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyPeer) {
                                            TLRPC$Peer tLRPC$Peer2 = ((TLRPC$TL_notifyPeer) tLRPC$NotifyPeer).peer;
                                            j7 = tLRPC$Peer2.user_id;
                                            if (j7 == 0) {
                                                long j10 = tLRPC$Peer2.chat_id;
                                                if (j10 == 0) {
                                                    j10 = tLRPC$Peer2.channel_id;
                                                }
                                                j7 = -j10;
                                            }
                                            i11 = 0;
                                        } else {
                                            TLRPC$TL_notifyForumTopic tLRPC$TL_notifyForumTopic = (TLRPC$TL_notifyForumTopic) tLRPC$NotifyPeer;
                                            TLRPC$Peer tLRPC$Peer3 = tLRPC$TL_notifyForumTopic.peer;
                                            long j11 = tLRPC$Peer3.user_id;
                                            if (j11 != 0) {
                                                j7 = j11;
                                            } else {
                                                long j12 = tLRPC$Peer3.chat_id;
                                                j7 = j12 != 0 ? -j12 : -tLRPC$Peer3.channel_id;
                                            }
                                            i11 = tLRPC$TL_notifyForumTopic.top_msg_id;
                                        }
                                        getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j7, i11, tLRPC$TL_updateNotifySettings.notify_settings);
                                    } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyChats) {
                                        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings = tLRPC$TL_updateNotifySettings.notify_settings;
                                        if ((tLRPC$PeerNotifySettings.flags & 1) != 0) {
                                            edit.putBoolean("EnablePreviewGroup", tLRPC$PeerNotifySettings.show_previews);
                                        }
                                        if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                            int i22 = this.notificationsPreferences.getInt("EnableGroup2", 0);
                                            int i23 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                            if (i22 != i23) {
                                                edit.putInt("EnableGroup2", i23);
                                                edit.putBoolean("overwrite_group", true);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda36
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesController.this.lambda$processUpdateArray$329();
                                                    }
                                                });
                                            }
                                        }
                                        getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0, 0, false);
                                    } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyUsers) {
                                        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings2 = tLRPC$TL_updateNotifySettings.notify_settings;
                                        if ((tLRPC$PeerNotifySettings2.flags & 1) != 0) {
                                            edit.putBoolean("EnablePreviewAll", tLRPC$PeerNotifySettings2.show_previews);
                                        }
                                        int i24 = tLRPC$TL_updateNotifySettings.notify_settings.flags;
                                        getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0, 1, false);
                                        if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                            int i25 = this.notificationsPreferences.getInt("EnableAll2", 0);
                                            int i26 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                            if (i25 != i26) {
                                                edit.putInt("EnableAll2", i26);
                                                edit.putBoolean("overwrite_private", true);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda34
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesController.this.lambda$processUpdateArray$330();
                                                    }
                                                });
                                            }
                                        }
                                    } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyBroadcasts) {
                                        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings3 = tLRPC$TL_updateNotifySettings.notify_settings;
                                        if ((tLRPC$PeerNotifySettings3.flags & 1) != 0) {
                                            edit.putBoolean("EnablePreviewChannel", tLRPC$PeerNotifySettings3.show_previews);
                                        }
                                        if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                            int i27 = this.notificationsPreferences.getInt("EnableChannel2", 0);
                                            int i28 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                            if (i27 != i28) {
                                                edit.putInt("EnableChannel2", i28);
                                                edit.putBoolean("overwrite_channel", true);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda20
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesController.this.lambda$processUpdateArray$331();
                                                    }
                                                });
                                            }
                                        }
                                        getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0, 2, false);
                                    }
                                    getMessagesStorage().updateMutedDialogsFiltersCounters();
                                    editor = edit;
                                }
                            } else {
                                if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
                                    final TLRPC$TL_updateChannel tLRPC$TL_updateChannel = (TLRPC$TL_updateChannel) tLRPC$Update;
                                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(-tLRPC$TL_updateChannel.channel_id);
                                    TLRPC$Chat chat = getChat(Long.valueOf(tLRPC$TL_updateChannel.channel_id));
                                    if (chat != null) {
                                        if (tLRPC$Dialog2 == null && (chat instanceof TLRPC$TL_channel) && !chat.left) {
                                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$332(tLRPC$TL_updateChannel);
                                                }
                                            });
                                        } else if (ChatObject.isNotInChat(chat) && tLRPC$Dialog2 != null && ((tLRPC$Dialog = this.promoDialog) == null || tLRPC$Dialog.id != tLRPC$Dialog2.id)) {
                                            deleteDialog(tLRPC$Dialog2.id, 0);
                                        }
                                        if (((chat instanceof TLRPC$TL_channelForbidden) || chat.kicked) && (groupCall = getGroupCall(chat.id, false)) != null) {
                                            TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall = new TLRPC$TL_updateGroupCall();
                                            tLRPC$TL_updateGroupCall.chat_id = chat.id;
                                            TLRPC$TL_groupCallDiscarded tLRPC$TL_groupCallDiscarded = new TLRPC$TL_groupCallDiscarded();
                                            tLRPC$TL_updateGroupCall.call = tLRPC$TL_groupCallDiscarded;
                                            TLRPC$GroupCall tLRPC$GroupCall = groupCall.call;
                                            tLRPC$TL_groupCallDiscarded.id = tLRPC$GroupCall.id;
                                            tLRPC$TL_groupCallDiscarded.access_hash = tLRPC$GroupCall.access_hash;
                                            groupCall.processGroupCallUpdate(tLRPC$TL_updateGroupCall);
                                            if (VoIPService.getSharedInstance() != null) {
                                                VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall.call);
                                            }
                                        }
                                    }
                                    i10 = i3 | UPDATE_MASK_CHAT;
                                    loadFullChat(tLRPC$TL_updateChannel.channel_id, 0, true);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChat) {
                                    TLRPC$TL_updateChat tLRPC$TL_updateChat = (TLRPC$TL_updateChat) tLRPC$Update;
                                    TLRPC$Chat chat2 = getChat(Long.valueOf(tLRPC$TL_updateChat.chat_id));
                                    if (chat2 != null && ((chat2 instanceof TLRPC$TL_chatForbidden) || chat2.kicked)) {
                                        ChatObject.Call groupCall2 = getGroupCall(chat2.id, false);
                                        if (groupCall2 != null) {
                                            TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall2 = new TLRPC$TL_updateGroupCall();
                                            tLRPC$TL_updateGroupCall2.chat_id = chat2.id;
                                            TLRPC$TL_groupCallDiscarded tLRPC$TL_groupCallDiscarded2 = new TLRPC$TL_groupCallDiscarded();
                                            tLRPC$TL_updateGroupCall2.call = tLRPC$TL_groupCallDiscarded2;
                                            TLRPC$GroupCall tLRPC$GroupCall2 = groupCall2.call;
                                            tLRPC$TL_groupCallDiscarded2.id = tLRPC$GroupCall2.id;
                                            tLRPC$TL_groupCallDiscarded2.access_hash = tLRPC$GroupCall2.access_hash;
                                            groupCall2.processGroupCallUpdate(tLRPC$TL_updateGroupCall2);
                                            if (VoIPService.getSharedInstance() != null) {
                                                VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall2.call);
                                            }
                                        }
                                        TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(-chat2.id);
                                        if (tLRPC$Dialog3 != null) {
                                            i9 = 0;
                                            deleteDialog(tLRPC$Dialog3.id, 0);
                                            i10 = i3 | UPDATE_MASK_CHAT;
                                            loadFullChat(tLRPC$TL_updateChat.chat_id, i9, true);
                                        }
                                    }
                                    i9 = 0;
                                    i10 = i3 | UPDATE_MASK_CHAT;
                                    loadFullChat(tLRPC$TL_updateChat.chat_id, i9, true);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChatDefaultBannedRights) {
                                    TLRPC$TL_updateChatDefaultBannedRights tLRPC$TL_updateChatDefaultBannedRights = (TLRPC$TL_updateChatDefaultBannedRights) tLRPC$Update;
                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$TL_updateChatDefaultBannedRights.peer;
                                    long j13 = tLRPC$Peer4.channel_id;
                                    if (j13 == 0) {
                                        j13 = tLRPC$Peer4.chat_id;
                                    }
                                    final TLRPC$Chat chat3 = getChat(Long.valueOf(j13));
                                    if (chat3 != null) {
                                        chat3.default_banned_rights = tLRPC$TL_updateChatDefaultBannedRights.default_banned_rights;
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda154
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesController.this.lambda$processUpdateArray$333(chat3);
                                            }
                                        });
                                    }
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateBotCommands) {
                                    TLRPC$TL_updateBotCommands tLRPC$TL_updateBotCommands = (TLRPC$TL_updateBotCommands) tLRPC$Update;
                                    getMediaDataController().updateBotInfo(MessageObject.getPeerId(tLRPC$TL_updateBotCommands.peer), tLRPC$TL_updateBotCommands);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSets) {
                                    TLRPC$TL_updateStickerSets tLRPC$TL_updateStickerSets = (TLRPC$TL_updateStickerSets) tLRPC$Update;
                                    getMediaDataController().loadStickers(0, false, true);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSetsOrder) {
                                    TLRPC$TL_updateStickerSetsOrder tLRPC$TL_updateStickerSetsOrder = (TLRPC$TL_updateStickerSetsOrder) tLRPC$Update;
                                    if (tLRPC$TL_updateStickerSetsOrder.masks) {
                                        i8 = 1;
                                    } else {
                                        i8 = tLRPC$TL_updateStickerSetsOrder.emojis ? 5 : 0;
                                    }
                                    getMediaDataController().reorderStickers(i8, tLRPC$TL_updateStickerSetsOrder.order, false);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentReactions) {
                                    getMediaDataController().loadRecentAndTopReactions(true);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                                    getMediaDataController().loadRecents(2, false, false, true);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateContactsReset) {
                                    getContactsController().forceImportContacts();
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewStickerSet) {
                                    getMediaDataController().addNewStickerSet(((TLRPC$TL_updateNewStickerSet) tLRPC$Update).stickerset);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedGifs) {
                                    this.emojiPreferences.edit().putLong("lastGifLoadTime", 0L).commit();
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentStickers) {
                                    this.emojiPreferences.edit().putLong("lastStickersLoadTime", 0L).commit();
                                } else {
                                    if (tLRPC$Update instanceof TLRPC$TL_updateDraftMessage) {
                                        TLRPC$TL_updateDraftMessage tLRPC$TL_updateDraftMessage = (TLRPC$TL_updateDraftMessage) tLRPC$Update;
                                        TLRPC$Peer tLRPC$Peer5 = tLRPC$TL_updateDraftMessage.peer;
                                        long j14 = tLRPC$Peer5.user_id;
                                        if (j14 == 0) {
                                            long j15 = tLRPC$Peer5.channel_id;
                                            j14 = j15 != 0 ? -j15 : -tLRPC$Peer5.chat_id;
                                        }
                                        getMediaDataController().saveDraft(j14, tLRPC$TL_updateDraftMessage.top_msg_id, tLRPC$TL_updateDraftMessage.draft, null, true);
                                        z6 = true;
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedStickers) {
                                        getMediaDataController().markFeaturedStickersAsRead(false, false);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedEmojiStickers) {
                                        getMediaDataController().markFeaturedStickersAsRead(true, false);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMoveStickerSetToTop) {
                                        TLRPC$TL_updateMoveStickerSetToTop tLRPC$TL_updateMoveStickerSetToTop = (TLRPC$TL_updateMoveStickerSetToTop) tLRPC$Update;
                                        getMediaDataController().moveStickerSetToTop(tLRPC$TL_updateMoveStickerSetToTop.stickerset, tLRPC$TL_updateMoveStickerSetToTop.emojis, tLRPC$TL_updateMoveStickerSetToTop.masks);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) {
                                        TLRPC$TL_updateChannelPinnedTopic tLRPC$TL_updateChannelPinnedTopic = (TLRPC$TL_updateChannelPinnedTopic) tLRPC$Update;
                                        ArrayList<Integer> currentPinnedOrder = getTopicsController().getCurrentPinnedOrder(tLRPC$TL_updateChannelPinnedTopic.channel_id);
                                        currentPinnedOrder.remove(Integer.valueOf(tLRPC$TL_updateChannelPinnedTopic.topic_id));
                                        if (tLRPC$TL_updateChannelPinnedTopic.pinned) {
                                            currentPinnedOrder.add(0, Integer.valueOf(tLRPC$TL_updateChannelPinnedTopic.topic_id));
                                        }
                                        getTopicsController().applyPinnedOrder(tLRPC$TL_updateChannelPinnedTopic.channel_id, currentPinnedOrder);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics) {
                                        TLRPC$TL_updateChannelPinnedTopics tLRPC$TL_updateChannelPinnedTopics = (TLRPC$TL_updateChannelPinnedTopics) tLRPC$Update;
                                        if ((tLRPC$TL_updateChannelPinnedTopics.flags & 1) > 0) {
                                            getTopicsController().applyPinnedOrder(tLRPC$TL_updateChannelPinnedTopics.channel_id, tLRPC$TL_updateChannelPinnedTopics.order);
                                        } else {
                                            getTopicsController().reloadTopics(tLRPC$TL_updateChannelPinnedTopics.channel_id, false);
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCallSignalingData) {
                                        TLRPC$TL_updatePhoneCallSignalingData tLRPC$TL_updatePhoneCallSignalingData = (TLRPC$TL_updatePhoneCallSignalingData) tLRPC$Update;
                                        VoIPService sharedInstance = VoIPService.getSharedInstance();
                                        if (sharedInstance != null) {
                                            sharedInstance.onSignalingData(tLRPC$TL_updatePhoneCallSignalingData);
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCallParticipants) {
                                        TLRPC$TL_updateGroupCallParticipants tLRPC$TL_updateGroupCallParticipants = (TLRPC$TL_updateGroupCallParticipants) tLRPC$Update;
                                        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_updateGroupCallParticipants.call.id);
                                        if (call != null) {
                                            call.processParticipantsUpdate(tLRPC$TL_updateGroupCallParticipants, false);
                                        }
                                        if (VoIPService.getSharedInstance() != null) {
                                            VoIPService.getSharedInstance().onGroupCallParticipantsUpdate(tLRPC$TL_updateGroupCallParticipants);
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCall) {
                                        TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall3 = (TLRPC$TL_updateGroupCall) tLRPC$Update;
                                        ChatObject.Call call2 = this.groupCalls.get(tLRPC$TL_updateGroupCall3.call.id);
                                        if (call2 != null) {
                                            call2.processGroupCallUpdate(tLRPC$TL_updateGroupCall3);
                                            TLRPC$Chat chat4 = getChat(Long.valueOf(call2.chatId));
                                            if (chat4 != null) {
                                                chat4.call_active = tLRPC$TL_updateGroupCall3.call instanceof TLRPC$TL_groupCall;
                                            }
                                        } else {
                                            TLRPC$ChatFull chatFull2 = getChatFull(tLRPC$TL_updateGroupCall3.chat_id);
                                            if (chatFull2 != null && ((tLRPC$TL_inputGroupCall = chatFull2.call) == null || (tLRPC$TL_inputGroupCall != null && tLRPC$TL_inputGroupCall.id != tLRPC$TL_updateGroupCall3.call.id))) {
                                                loadFullChat(tLRPC$TL_updateGroupCall3.chat_id, 0, true);
                                            }
                                        }
                                        if (VoIPService.getSharedInstance() != null) {
                                            VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall3.call);
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCall) {
                                        TLRPC$PhoneCall tLRPC$PhoneCall = ((TLRPC$TL_updatePhoneCall) tLRPC$Update).phone_call;
                                        VoIPService sharedInstance2 = VoIPService.getSharedInstance();
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("Received call in update: " + tLRPC$PhoneCall);
                                            FileLog.d("call id " + tLRPC$PhoneCall.id);
                                        }
                                        if (tLRPC$PhoneCall instanceof TLRPC$TL_phoneCallRequested) {
                                            if (tLRPC$PhoneCall.date + (this.callRingTimeout / 1000) < getConnectionsManager().getCurrentTime()) {
                                                if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("ignoring too old call");
                                                }
                                            } else {
                                                int i29 = Build.VERSION.SDK_INT;
                                                if (i29 < 21 || NotificationManagerCompat.from(ApplicationLoader.applicationContext).areNotificationsEnabled()) {
                                                    z5 = false;
                                                } else if (!ApplicationLoader.mainInterfacePaused && ApplicationLoader.isScreenOn) {
                                                    z5 = true;
                                                } else if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("Ignoring incoming call because notifications are disabled in system");
                                                }
                                                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService("phone");
                                                if (sharedInstance2 != null || VoIPService.callIShouldHavePutIntoIntent != null || telephonyManager.getCallState() != 0) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d("Auto-declining call " + tLRPC$PhoneCall.id + " because there's already active one");
                                                    }
                                                    TLRPC$TL_phone_discardCall tLRPC$TL_phone_discardCall = new TLRPC$TL_phone_discardCall();
                                                    TLRPC$TL_inputPhoneCall tLRPC$TL_inputPhoneCall = new TLRPC$TL_inputPhoneCall();
                                                    tLRPC$TL_phone_discardCall.peer = tLRPC$TL_inputPhoneCall;
                                                    tLRPC$TL_inputPhoneCall.access_hash = tLRPC$PhoneCall.access_hash;
                                                    tLRPC$TL_inputPhoneCall.id = tLRPC$PhoneCall.id;
                                                    tLRPC$TL_phone_discardCall.reason = new TLRPC$TL_phoneCallDiscardReasonBusy();
                                                    getConnectionsManager().sendRequest(tLRPC$TL_phone_discardCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda260
                                                        @Override // org.telegram.tgnet.RequestDelegate
                                                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                            MessagesController.this.lambda$processUpdateArray$334(tLObject, tLRPC$TL_error);
                                                        }
                                                    });
                                                } else {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d("Starting service for call " + tLRPC$PhoneCall.id);
                                                    }
                                                    VoIPService.callIShouldHavePutIntoIntent = tLRPC$PhoneCall;
                                                    Intent intent = new Intent(ApplicationLoader.applicationContext, VoIPService.class);
                                                    intent.putExtra("is_outgoing", false);
                                                    intent.putExtra("user_id", tLRPC$PhoneCall.participant_id == getUserConfig().getClientUserId() ? tLRPC$PhoneCall.admin_id : tLRPC$PhoneCall.participant_id);
                                                    intent.putExtra("account", this.currentAccount);
                                                    intent.putExtra("notifications_disabled", z5);
                                                    if (!z5 && i29 >= 26) {
                                                        try {
                                                            ApplicationLoader.applicationContext.startForegroundService(intent);
                                                        } catch (Throwable th) {
                                                            FileLog.e(th);
                                                        }
                                                    } else {
                                                        ApplicationLoader.applicationContext.startService(intent);
                                                    }
                                                    if (ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
                                                        this.ignoreSetOnline = true;
                                                    }
                                                }
                                            }
                                        } else if (sharedInstance2 != null && tLRPC$PhoneCall != null) {
                                            sharedInstance2.onCallUpdated(tLRPC$PhoneCall);
                                        } else if (VoIPService.callIShouldHavePutIntoIntent != null) {
                                            if (BuildVars.LOGS_ENABLED) {
                                                FileLog.d("Updated the call while the service is starting");
                                            }
                                            if (tLRPC$PhoneCall.id == VoIPService.callIShouldHavePutIntoIntent.id) {
                                                VoIPService.callIShouldHavePutIntoIntent = tLRPC$PhoneCall;
                                            }
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogUnreadMark) {
                                        TLRPC$TL_updateDialogUnreadMark tLRPC$TL_updateDialogUnreadMark = (TLRPC$TL_updateDialogUnreadMark) tLRPC$Update;
                                        TLRPC$DialogPeer tLRPC$DialogPeer3 = tLRPC$TL_updateDialogUnreadMark.peer;
                                        if (tLRPC$DialogPeer3 instanceof TLRPC$TL_dialogPeer) {
                                            TLRPC$Peer tLRPC$Peer6 = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer3).peer;
                                            long j16 = tLRPC$Peer6.user_id;
                                            if (j16 != 0) {
                                                j6 = j16;
                                            } else {
                                                long j17 = tLRPC$Peer6.chat_id;
                                                j6 = j17 != 0 ? -j17 : -tLRPC$Peer6.channel_id;
                                            }
                                        } else {
                                            j6 = 0;
                                        }
                                        getMessagesStorage().setDialogUnread(j6, tLRPC$TL_updateDialogUnreadMark.unread);
                                        TLRPC$Dialog tLRPC$Dialog4 = this.dialogs_dict.get(j6);
                                        if (tLRPC$Dialog4 != null) {
                                            boolean z7 = tLRPC$Dialog4.unread_mark;
                                            boolean z8 = tLRPC$TL_updateDialogUnreadMark.unread;
                                            if (z7 != z8) {
                                                tLRPC$Dialog4.unread_mark = z8;
                                                if (tLRPC$Dialog4.unread_count == 0 && !isDialogMuted(j6, 0)) {
                                                    if (tLRPC$Dialog4.unread_mark) {
                                                        this.unreadUnmutedDialogs++;
                                                    } else {
                                                        this.unreadUnmutedDialogs--;
                                                    }
                                                }
                                                i3 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                                                i16 |= DIALOG_FILTER_FLAG_EXCLUDE_READ;
                                            }
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) {
                                        TLRPC$TL_updateMessagePoll tLRPC$TL_updateMessagePoll = (TLRPC$TL_updateMessagePoll) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.didUpdatePollResults, Long.valueOf(tLRPC$TL_updateMessagePoll.poll_id), tLRPC$TL_updateMessagePoll.poll, tLRPC$TL_updateMessagePoll.results);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerSettings) {
                                        TLRPC$TL_updatePeerSettings tLRPC$TL_updatePeerSettings = (TLRPC$TL_updatePeerSettings) tLRPC$Update;
                                        TLRPC$Peer tLRPC$Peer7 = tLRPC$TL_updatePeerSettings.peer;
                                        if (tLRPC$Peer7 instanceof TLRPC$TL_peerUser) {
                                            j5 = tLRPC$Peer7.user_id;
                                        } else {
                                            if (tLRPC$Peer7 instanceof TLRPC$TL_peerChat) {
                                                j4 = tLRPC$Peer7.chat_id;
                                            } else {
                                                j4 = tLRPC$Peer7.channel_id;
                                            }
                                            j5 = -j4;
                                        }
                                        savePeerSettings(j5, tLRPC$TL_updatePeerSettings.settings, true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerLocated) {
                                        getNotificationCenter().postNotificationName(NotificationCenter.newPeopleNearbyAvailable, tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessageReactions) {
                                        TLRPC$TL_updateMessageReactions tLRPC$TL_updateMessageReactions = (TLRPC$TL_updateMessageReactions) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateReactions, Long.valueOf(MessageObject.getPeerId(tLRPC$TL_updateMessageReactions.peer)), Integer.valueOf(tLRPC$TL_updateMessageReactions.msg_id), tLRPC$TL_updateMessageReactions.reactions);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessageExtendedMedia) {
                                        TLRPC$TL_updateMessageExtendedMedia tLRPC$TL_updateMessageExtendedMedia = (TLRPC$TL_updateMessageExtendedMedia) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateExtendedMedia, Long.valueOf(DialogObject.getPeerDialogId(tLRPC$TL_updateMessageExtendedMedia.peer)), Integer.valueOf(tLRPC$TL_updateMessageExtendedMedia.msg_id), tLRPC$TL_updateMessageExtendedMedia.extended_media);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTheme) {
                                        Theme.setThemeUploadInfo(null, null, (TLRPC$TL_theme) ((TLRPC$TL_updateTheme) tLRPC$Update).theme, this.currentAccount, true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilter) {
                                        loadRemoteFilters(true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilterOrder) {
                                        loadRemoteFilters(true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilters) {
                                        loadRemoteFilters(true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentEmojiStatuses) {
                                        getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate, new Object[0]);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateWebViewResultSent) {
                                        getNotificationCenter().postNotificationName(NotificationCenter.webViewResultSent, Long.valueOf(((TLRPC$TL_updateWebViewResultSent) tLRPC$Update).query_id));
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateAttachMenuBots) {
                                        getMediaDataController().loadAttachMenuBots(false, true);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateBotMenuButton) {
                                        TLRPC$TL_updateBotMenuButton tLRPC$TL_updateBotMenuButton = (TLRPC$TL_updateBotMenuButton) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.updateBotMenuButton, Long.valueOf(tLRPC$TL_updateBotMenuButton.bot_id), tLRPC$TL_updateBotMenuButton.button);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
                                        TLRPC$TL_updateReadChannelDiscussionInbox tLRPC$TL_updateReadChannelDiscussionInbox = (TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.threadMessagesRead, Long.valueOf(-tLRPC$TL_updateReadChannelDiscussionInbox.channel_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.top_msg_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id), 0);
                                        if ((tLRPC$TL_updateReadChannelDiscussionInbox.flags & 1) != 0) {
                                            getMessagesStorage().updateRepliesMaxReadId(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_id, tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_post, tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id, 0, true);
                                            getNotificationCenter().postNotificationName(NotificationCenter.commentsRead, Long.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_post), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id));
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
                                        TLRPC$TL_updateReadChannelDiscussionOutbox tLRPC$TL_updateReadChannelDiscussionOutbox = (TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update;
                                        getNotificationCenter().postNotificationName(NotificationCenter.threadMessagesRead, Long.valueOf(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), 0, Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionOutbox.read_max_id));
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerHistoryTTL) {
                                        TLRPC$TL_updatePeerHistoryTTL tLRPC$TL_updatePeerHistoryTTL = (TLRPC$TL_updatePeerHistoryTTL) tLRPC$Update;
                                        long peerId = MessageObject.getPeerId(tLRPC$TL_updatePeerHistoryTTL.peer);
                                        if (peerId > 0) {
                                            TLRPC$UserFull userFull = getUserFull(peerId);
                                            if (userFull != null) {
                                                int i30 = tLRPC$TL_updatePeerHistoryTTL.ttl_period;
                                                userFull.ttl_period = i30;
                                                if (i30 == 0) {
                                                    userFull.flags &= -16385;
                                                } else {
                                                    userFull.flags |= 16384;
                                                }
                                            }
                                            tLRPC$UserFull = userFull;
                                            chatFull = null;
                                        } else {
                                            chatFull = getChatFull(-peerId);
                                            if (chatFull != null) {
                                                int i31 = tLRPC$TL_updatePeerHistoryTTL.ttl_period;
                                                chatFull.ttl_period = i31;
                                                if (chatFull instanceof TLRPC$TL_channelFull) {
                                                    if (i31 == 0) {
                                                        chatFull.flags &= -16777217;
                                                    } else {
                                                        chatFull.flags |= ConnectionsManager.FileTypePhoto;
                                                    }
                                                } else if (i31 == 0) {
                                                    chatFull.flags &= -16385;
                                                } else {
                                                    chatFull.flags |= 16384;
                                                }
                                            }
                                            tLRPC$UserFull = null;
                                        }
                                        if (chatFull != null) {
                                            NotificationCenter notificationCenter = getNotificationCenter();
                                            int i32 = NotificationCenter.chatInfoDidLoad;
                                            Boolean bool = Boolean.FALSE;
                                            notificationCenter.postNotificationName(i32, chatFull, 0, bool, bool);
                                            getMessagesStorage().updateChatInfo(chatFull, false);
                                        } else if (tLRPC$UserFull != null) {
                                            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(peerId), tLRPC$UserFull);
                                            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
                                        }
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePendingJoinRequests) {
                                        getMemberRequestsController().onPendingRequestsUpdated((TLRPC$TL_updatePendingJoinRequests) tLRPC$Update);
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedRingtones) {
                                        getMediaDataController().ringtoneDataStore.lambda$new$0();
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTranscribeAudio) {
                                        FileLog.e("Received legacy TL_updateTranscribeAudio update");
                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTranscribedAudio) {
                                        TLRPC$TL_updateTranscribedAudio tLRPC$TL_updateTranscribedAudio = (TLRPC$TL_updateTranscribedAudio) tLRPC$Update;
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("Transcription update received, pending=" + tLRPC$TL_updateTranscribedAudio.pending + " id=" + tLRPC$TL_updateTranscribedAudio.transcription_id + " text=" + tLRPC$TL_updateTranscribedAudio.text);
                                        }
                                        if ((!tLRPC$TL_updateTranscribedAudio.pending || !TextUtils.isEmpty(tLRPC$TL_updateTranscribedAudio.text)) && (tLRPC$TL_updateTranscribedAudio.pending || !TranscribeButton.finishTranscription(null, tLRPC$TL_updateTranscribedAudio.transcription_id, tLRPC$TL_updateTranscribedAudio.text))) {
                                            getMessagesStorage().updateMessageVoiceTranscription(DialogObject.getPeerDialogId(tLRPC$TL_updateTranscribedAudio.peer), tLRPC$TL_updateTranscribedAudio.msg_id, tLRPC$TL_updateTranscribedAudio.text, tLRPC$TL_updateTranscribedAudio.transcription_id, !tLRPC$TL_updateTranscribedAudio.pending);
                                            getNotificationCenter().postNotificationName(NotificationCenter.voiceTranscriptionUpdate, null, Long.valueOf(tLRPC$TL_updateTranscribedAudio.transcription_id), tLRPC$TL_updateTranscribedAudio.text, null, Boolean.valueOf(!tLRPC$TL_updateTranscribedAudio.pending));
                                        }
                                    }
                                    i15 = i7 + 1;
                                    arrayList11 = arrayList7;
                                    size = i6;
                                    arrayList12 = arrayList8;
                                    i14 = 0;
                                    arrayList10 = arrayList;
                                }
                                i3 = i10;
                            }
                        }
                    }
                    i6 = size;
                    arrayList7 = arrayList11;
                    i7 = i18;
                    arrayList8 = arrayList6;
                }
                i15 = i7 + 1;
                arrayList11 = arrayList7;
                size = i6;
                arrayList12 = arrayList8;
                i14 = 0;
                arrayList10 = arrayList;
            }
            ArrayList<TLRPC$User> arrayList17 = arrayList12;
            ArrayList<TLRPC$User> arrayList18 = arrayList11;
            if (editor != null) {
                editor.commit();
                z4 = false;
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            } else {
                z4 = false;
            }
            getMessagesStorage().updateUsers(arrayList17, true, true, true);
            getMessagesStorage().updateUsers(arrayList18, z4, true, true);
            i4 = i16;
            z2 = z6;
        } else {
            i3 = i;
            z2 = false;
            i4 = 0;
        }
        if (longSparseArray != null) {
            int size3 = longSparseArray.size();
            for (int i33 = 0; i33 < size3; i33++) {
                ChatObject.Call call3 = this.groupCallsByChatId.get(longSparseArray.keyAt(i33));
                if (call3 != null) {
                    call3.processTypingsUpdate(getAccountInstance(), (ArrayList) longSparseArray.valueAt(i33), i2);
                }
            }
        }
        if (longSparseIntArray != null) {
            int size4 = longSparseIntArray.size();
            for (int i34 = 0; i34 < size4; i34++) {
                SendMessagesHelper.ImportingHistory importingHistory = getSendMessagesHelper().getImportingHistory(longSparseIntArray.keyAt(i34));
                if (importingHistory != null) {
                    importingHistory.setImportProgress(longSparseIntArray.valueAt(i34));
                }
            }
        }
        if (longSparseArray2 != null) {
            int i35 = 1;
            getNotificationCenter().postNotificationName(NotificationCenter.didReceivedWebpagesInUpdates, longSparseArray2);
            int i36 = 0;
            int i37 = 2;
            while (i36 < i37) {
                LongSparseArray<ArrayList<MessageObject>> longSparseArray11 = i36 == i35 ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
                int size5 = longSparseArray2.size();
                int i38 = 0;
                while (i38 < size5) {
                    long keyAt = longSparseArray2.keyAt(i38);
                    ArrayList<MessageObject> arrayList19 = longSparseArray11.get(keyAt);
                    longSparseArray11.remove(keyAt);
                    if (arrayList19 != null) {
                        TLRPC$WebPage tLRPC$WebPage = (TLRPC$WebPage) longSparseArray2.valueAt(i38);
                        ArrayList<TLRPC$Message> arrayList20 = new ArrayList<>();
                        if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                            int size6 = arrayList19.size();
                            int i39 = 0;
                            j3 = 0;
                            while (i39 < size6) {
                                LongSparseArray<ArrayList<MessageObject>> longSparseArray12 = longSparseArray11;
                                arrayList19.get(i39).messageOwner.media.webpage = tLRPC$WebPage;
                                if (i39 == 0) {
                                    j3 = arrayList19.get(i39).getDialogId();
                                    ImageLoader.saveMessageThumbs(arrayList19.get(i39).messageOwner);
                                }
                                arrayList20.add(arrayList19.get(i39).messageOwner);
                                i39++;
                                longSparseArray11 = longSparseArray12;
                            }
                            longSparseArray10 = longSparseArray11;
                        } else {
                            longSparseArray11.put(tLRPC$WebPage.id, arrayList19);
                            longSparseArray10 = longSparseArray11;
                            j3 = 0;
                        }
                        if (!arrayList20.isEmpty()) {
                            getMessagesStorage().putMessages(arrayList20, true, true, false, getDownloadController().getAutodownloadMask(), i36 == 1, 0);
                            getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j3), arrayList19);
                        }
                    } else {
                        longSparseArray10 = longSparseArray11;
                    }
                    i38++;
                    longSparseArray11 = longSparseArray10;
                }
                i36++;
                i37 = 2;
                i35 = 1;
            }
        }
        if (i4 != 0) {
            int i40 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i40 >= dialogFilterArr.length) {
                    break;
                }
                if (dialogFilterArr[i40] != null && (dialogFilterArr[i40].flags & i4) != 0) {
                    z2 = true;
                    break;
                }
                i40++;
            }
        }
        if (longSparseArray3 != null) {
            int size7 = longSparseArray3.size();
            boolean z9 = false;
            for (int i41 = 0; i41 < size7; i41++) {
                if (updateInterfaceWithMessages(longSparseArray3.keyAt(i41), (ArrayList) longSparseArray3.valueAt(i41), false)) {
                    z9 = true;
                }
            }
            j = 0;
            if (applyFoldersUpdates(arrayList2) || (!z9 && z2)) {
                sortDialogs(null);
            }
        } else {
            j = 0;
            boolean applyFoldersUpdates = applyFoldersUpdates(arrayList2);
            if (!z2 && !applyFoldersUpdates) {
                longSparseArray9 = longSparseArray4;
                z3 = false;
                if (longSparseArray9 != null) {
                    int size8 = longSparseArray4.size();
                    for (int i42 = 0; i42 < size8; i42++) {
                        updateInterfaceWithMessages(longSparseArray9.keyAt(i42), (ArrayList) longSparseArray9.valueAt(i42), true);
                    }
                }
                if (longSparseArray5 != null) {
                    int size9 = longSparseArray5.size();
                    int i43 = 0;
                    while (i43 < size9) {
                        long keyAt2 = longSparseArray5.keyAt(i43);
                        ArrayList<MessageObject> arrayList21 = (ArrayList) longSparseArray5.valueAt(i43);
                        int size10 = arrayList21.size();
                        SparseBooleanArray sparseBooleanArray = null;
                        for (int i44 = 0; i44 < size10; i44++) {
                            MessageObject messageObject2 = arrayList21.get(i44);
                            if (keyAt2 > j) {
                                if (sparseBooleanArray == null) {
                                    sparseBooleanArray = new SparseBooleanArray();
                                }
                                sparseBooleanArray.put(messageObject2.getId(), MessageObject.hasUnreadReactions(messageObject2.messageOwner));
                            }
                        }
                        if (keyAt2 > j) {
                            checkUnreadReactions(keyAt2, 0, sparseBooleanArray);
                        }
                        ArrayList<MessageObject> arrayList22 = this.dialogMessage.get(keyAt2);
                        if (arrayList22 != null) {
                            int i45 = 0;
                            while (i45 < arrayList22.size()) {
                                MessageObject messageObject3 = arrayList22.get(i45);
                                int size11 = arrayList21.size();
                                int i46 = 0;
                                while (i46 < size11) {
                                    MessageObject messageObject4 = arrayList21.get(i46);
                                    if (messageObject3.getId() == messageObject4.getId()) {
                                        arrayList22.set(i45, messageObject4);
                                        TLRPC$Peer tLRPC$Peer8 = messageObject4.messageOwner.peer_id;
                                        if (tLRPC$Peer8 != null) {
                                            j2 = 0;
                                            if (tLRPC$Peer8.channel_id == 0) {
                                                this.dialogMessagesByIds.put(messageObject4.getId(), messageObject4);
                                            }
                                        } else {
                                            j2 = 0;
                                        }
                                    } else {
                                        j2 = 0;
                                        if (messageObject3.getDialogId() != messageObject4.getDialogId() || !(messageObject3.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) || (messageObject = messageObject3.replyMessageObject) == null || messageObject.getId() != messageObject4.getId()) {
                                            i46++;
                                            j = 0;
                                        } else {
                                            messageObject3.replyMessageObject = messageObject4;
                                            messageObject3.generatePinMessageText(null, null);
                                        }
                                    }
                                    z3 = true;
                                    break;
                                }
                                j2 = j;
                                i45++;
                                j = j2;
                            }
                        }
                        getMediaDataController().loadReplyMessagesForMessages(arrayList21, keyAt2, false, 0, null);
                        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(keyAt2), arrayList21, Boolean.FALSE);
                        i43++;
                        j = j;
                    }
                }
                if (z3) {
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                if (z) {
                    i3 |= UPDATE_MASK_USER_PRINT;
                }
                if (arrayList3 != null) {
                    i3 = i3 | UPDATE_MASK_NAME | UPDATE_MASK_USER_PHONE;
                }
                if (arrayList4 != null) {
                    int size12 = arrayList4.size();
                    for (int i47 = 0; i47 < size12; i47++) {
                        getMessagesStorage().updateChatParticipants((TLRPC$ChatParticipants) arrayList4.get(i47));
                    }
                }
                if (longSparseArray6 != null && longSparseArray7 == null && longSparseArray8 == null) {
                    i5 = 1;
                } else {
                    i5 = 1;
                    getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
                }
                if (i3 != 0) {
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i48 = NotificationCenter.updateInterfaces;
                    Object[] objArr = new Object[i5];
                    objArr[0] = Integer.valueOf(i3);
                    notificationCenter2.postNotificationName(i48, objArr);
                }
                if (arrayList5 != null) {
                    return;
                }
                ImageLoader.getInstance().putThumbsToCache(arrayList5);
                return;
            }
            sortDialogs(null);
        }
        longSparseArray9 = longSparseArray4;
        z3 = true;
        if (longSparseArray9 != null) {
        }
        if (longSparseArray5 != null) {
        }
        if (z3) {
        }
        if (z) {
        }
        if (arrayList3 != null) {
        }
        if (arrayList4 != null) {
        }
        if (longSparseArray6 != null) {
        }
        i5 = 1;
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
        if (i3 != 0) {
        }
        if (arrayList5 != null) {
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$337(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final LongSparseArray longSparseArray3, final LongSparseIntArray longSparseIntArray3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda141
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$336(longSparseIntArray, longSparseIntArray2, sparseIntArray, longSparseArray, longSparseArray2, longSparseArray3, longSparseIntArray3);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:90:0x02be, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(getChat(java.lang.Long.valueOf(r3))) != false) goto L91;
     */
    /* JADX WARN: Type inference failed for: r14v10 */
    /* JADX WARN: Type inference failed for: r14v8 */
    /* JADX WARN: Type inference failed for: r14v9, types: [boolean] */
    /* JADX WARN: Type inference failed for: r15v6 */
    /* JADX WARN: Type inference failed for: r15v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$336(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, LongSparseIntArray longSparseIntArray3) {
        int i;
        ArrayList<MessageObject> arrayList;
        int i2;
        ArrayList<MessageObject> arrayList2;
        ?? r14;
        int i3;
        long j;
        int i4;
        ArrayList<MessageObject> arrayList3;
        int i5 = 0;
        if (longSparseIntArray != null || longSparseIntArray2 != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesRead, longSparseIntArray, longSparseIntArray2);
            if (longSparseIntArray != null) {
                getNotificationsController().processReadMessages(longSparseIntArray, 0L, 0, 0, false);
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                int size = longSparseIntArray.size();
                int i6 = 0;
                int i7 = 0;
                while (i7 < size) {
                    long keyAt = longSparseIntArray.keyAt(i7);
                    int valueAt = longSparseIntArray.valueAt(i7);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                    int i8 = size;
                    if (tLRPC$Dialog != null && (i2 = tLRPC$Dialog.top_message) > 0 && i2 <= valueAt && (arrayList2 = this.dialogMessage.get(tLRPC$Dialog.id)) != null) {
                        for (int i9 = 0; i9 < arrayList2.size(); i9++) {
                            MessageObject messageObject = arrayList2.get(i9);
                            if (messageObject != null && !messageObject.isOut()) {
                                messageObject.setIsRead();
                                i6 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                            }
                        }
                    }
                    if (keyAt != getUserConfig().getClientUserId()) {
                        edit.remove("diditem" + keyAt);
                        edit.remove("diditemo" + keyAt);
                    }
                    i7++;
                    size = i8;
                }
                edit.commit();
                i5 = i6;
            } else {
                i5 = 0;
            }
            if (longSparseIntArray2 != null) {
                int size2 = longSparseIntArray2.size();
                int i10 = i5;
                for (int i11 = 0; i11 < size2; i11++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i11);
                    int valueAt2 = longSparseIntArray2.valueAt(i11);
                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt2);
                    if (tLRPC$Dialog2 != null && valueAt2 > tLRPC$Dialog2.read_outbox_max_id) {
                        tLRPC$Dialog2.read_outbox_max_id = valueAt2;
                        i10 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                    }
                    if (tLRPC$Dialog2 != null && (i = tLRPC$Dialog2.top_message) > 0 && i <= valueAt2 && (arrayList = this.dialogMessage.get(tLRPC$Dialog2.id)) != null) {
                        for (int i12 = 0; i12 < arrayList.size(); i12++) {
                            MessageObject messageObject2 = arrayList.get(i12);
                            if (messageObject2 != null && messageObject2.isOut()) {
                                messageObject2.setIsRead();
                                i10 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                            }
                        }
                    }
                }
                i5 = i10;
            }
        }
        if (sparseIntArray != null) {
            int size3 = sparseIntArray.size();
            int i13 = i5;
            for (int i14 = 0; i14 < size3; i14++) {
                int keyAt3 = sparseIntArray.keyAt(i14);
                int valueAt3 = sparseIntArray.valueAt(i14);
                getNotificationCenter().postNotificationName(NotificationCenter.messagesReadEncrypted, Integer.valueOf(keyAt3), Integer.valueOf(valueAt3));
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(keyAt3);
                if (this.dialogs_dict.get(makeEncryptedDialogId) != null && (arrayList3 = this.dialogMessage.get(makeEncryptedDialogId)) != null) {
                    for (int i15 = 0; i15 < arrayList3.size(); i15++) {
                        MessageObject messageObject3 = arrayList3.get(i15);
                        if (messageObject3 != null && messageObject3.messageOwner.date <= valueAt3) {
                            messageObject3.setIsRead();
                            i13 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                        }
                    }
                }
            }
            r14 = 0;
            i3 = 1;
            i5 = i13;
        } else {
            r14 = 0;
            i3 = 1;
        }
        if (longSparseArray != null) {
            int size4 = longSparseArray.size();
            for (int i16 = 0; i16 < size4; i16++) {
                long keyAt4 = longSparseArray.keyAt(i16);
                NotificationCenter notificationCenter = getNotificationCenter();
                int i17 = NotificationCenter.messagesReadContent;
                Object[] objArr = new Object[2];
                objArr[r14] = Long.valueOf(keyAt4);
                objArr[i3] = (ArrayList) longSparseArray.valueAt(i16);
                notificationCenter.postNotificationName(i17, objArr);
            }
        }
        int i18 = 3;
        if (longSparseArray2 != null) {
            int size5 = longSparseArray2.size();
            int i19 = 0;
            while (i19 < size5) {
                long keyAt5 = longSparseArray2.keyAt(i19);
                ArrayList arrayList4 = (ArrayList) longSparseArray2.valueAt(i19);
                if (arrayList4 == null) {
                    i4 = size5;
                } else {
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i20 = NotificationCenter.messagesDeleted;
                    Object[] objArr2 = new Object[i18];
                    objArr2[r14] = arrayList4;
                    i4 = size5;
                    objArr2[i3] = Long.valueOf(-keyAt5);
                    objArr2[2] = Boolean.FALSE;
                    notificationCenter2.postNotificationName(i20, objArr2);
                    if (keyAt5 == 0) {
                        int size6 = arrayList4.size();
                        for (int i21 = 0; i21 < size6; i21++) {
                            MessageObject messageObject4 = this.dialogMessagesByIds.get(((Integer) arrayList4.get(i21)).intValue());
                            if (messageObject4 != null) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("mark messages " + messageObject4.getId() + " deleted");
                                }
                                messageObject4.deleted = i3;
                            }
                        }
                    } else {
                        ArrayList<MessageObject> arrayList5 = this.dialogMessage.get(keyAt5);
                        if (arrayList5 != null) {
                            for (int i22 = 0; i22 < arrayList5.size(); i22++) {
                                MessageObject messageObject5 = arrayList5.get(i22);
                                if (messageObject5 != null) {
                                    int size7 = arrayList4.size();
                                    int i23 = 0;
                                    while (true) {
                                        if (i23 >= size7) {
                                            break;
                                        } else if (messageObject5.getId() == ((Integer) arrayList4.get(i23)).intValue()) {
                                            messageObject5.deleted = i3;
                                            break;
                                        } else {
                                            i23++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                i19++;
                size5 = i4;
                i18 = 3;
            }
            getNotificationsController().removeDeletedMessagesFromNotifications(longSparseArray2, r14);
        }
        if (longSparseArray3 != null) {
            int size8 = longSparseArray3.size();
            for (int i24 = 0; i24 < size8; i24++) {
                long keyAt6 = longSparseArray3.keyAt(i24);
                ArrayList arrayList6 = (ArrayList) longSparseArray3.valueAt(i24);
                if (arrayList6 != null) {
                    NotificationCenter notificationCenter3 = getNotificationCenter();
                    int i25 = NotificationCenter.messagesDeleted;
                    Object[] objArr3 = new Object[3];
                    objArr3[r14] = arrayList6;
                    if (DialogObject.isChatDialog(keyAt6)) {
                        j = -keyAt6;
                    }
                    j = 0;
                    objArr3[i3] = Long.valueOf(j);
                    objArr3[2] = Boolean.TRUE;
                    notificationCenter3.postNotificationName(i25, objArr3);
                }
            }
        }
        if (longSparseIntArray3 != null) {
            int size9 = longSparseIntArray3.size();
            for (int i26 = 0; i26 < size9; i26++) {
                long keyAt7 = longSparseIntArray3.keyAt(i26);
                int valueAt4 = longSparseIntArray3.valueAt(i26);
                long j2 = -keyAt7;
                NotificationCenter notificationCenter4 = getNotificationCenter();
                int i27 = NotificationCenter.historyCleared;
                Object[] objArr4 = new Object[2];
                objArr4[r14] = Long.valueOf(j2);
                objArr4[i3] = Integer.valueOf(valueAt4);
                notificationCenter4.postNotificationName(i27, objArr4);
                ArrayList<MessageObject> arrayList7 = this.dialogMessage.get(j2);
                if (arrayList7 != null) {
                    int i28 = 0;
                    while (true) {
                        if (i28 >= arrayList7.size()) {
                            break;
                        }
                        MessageObject messageObject6 = arrayList7.get(i28);
                        if (messageObject6 != null && messageObject6.getId() <= valueAt4) {
                            messageObject6.deleted = i3;
                            break;
                        }
                        i28++;
                    }
                }
            }
            getNotificationsController().removeDeletedHisoryFromNotifications(longSparseIntArray3);
        }
        if (i5 != 0) {
            NotificationCenter notificationCenter5 = getNotificationCenter();
            int i29 = NotificationCenter.updateInterfaces;
            Object[] objArr5 = new Object[i3];
            Integer valueOf = Integer.valueOf(i5);
            char c = r14 == true ? 1 : 0;
            char c2 = r14 == true ? 1 : 0;
            objArr5[c] = valueOf;
            notificationCenter5.postNotificationName(i29, objArr5);
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$338(long j, ArrayList arrayList) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, false), false);
    }

    public /* synthetic */ void lambda$processUpdateArray$339(long j, int i) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, new ArrayList<>(), getMessagesStorage().markMessagesAsDeleted(j, i, false, true), false);
    }

    public void checkUnreadReactions(final long j, final int i, final SparseBooleanArray sparseBooleanArray) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda98
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkUnreadReactions$345(sparseBooleanArray, i, j);
            }
        });
    }

    public /* synthetic */ void lambda$checkUnreadReactions$345(SparseBooleanArray sparseBooleanArray, final int i, final long j) {
        int i2;
        SQLiteCursor queryFinalized;
        final ArrayList arrayList = new ArrayList();
        StringBuilder sb = new StringBuilder();
        for (int i3 = 0; i3 < sparseBooleanArray.size(); i3++) {
            int keyAt = sparseBooleanArray.keyAt(i3);
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(keyAt);
        }
        SparseBooleanArray sparseBooleanArray2 = new SparseBooleanArray();
        try {
            if (i != 0) {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions WHERE message_id IN (%s) AND dialog_id = %d", sb, Long.valueOf(j)), new Object[0]);
            } else {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions_topics WHERE message_id IN (%s) AND dialog_id = %d AND topic_id = %d", sb, Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
            }
            while (queryFinalized.next()) {
                sparseBooleanArray2.put(queryFinalized.intValue(0), queryFinalized.intValue(1) == 1);
            }
            queryFinalized.dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        int i4 = 0;
        int i5 = 0;
        boolean z = false;
        boolean z2 = false;
        while (i5 < sparseBooleanArray.size()) {
            int keyAt2 = sparseBooleanArray.keyAt(i5);
            boolean valueAt = sparseBooleanArray.valueAt(i5);
            if (sparseBooleanArray2.indexOfKey(keyAt2) < 0) {
                i2 = i4;
                z = true;
            } else if (sparseBooleanArray2.get(keyAt2) != valueAt) {
                i2 = i4 + (valueAt ? 1 : -1);
                z2 = true;
            } else {
                i2 = i4;
            }
            if (valueAt) {
                arrayList.add(Integer.valueOf(keyAt2));
            }
            if (i == 0) {
                try {
                    try {
                        SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions VALUES(?, ?, ?)");
                        executeFast.requery();
                        executeFast.bindInteger(1, keyAt2);
                        executeFast.bindInteger(2, valueAt ? 1 : 0);
                        try {
                            executeFast.bindLong(3, j);
                            executeFast.step();
                            executeFast.dispose();
                        } catch (SQLiteException e2) {
                            e = e2;
                            e.printStackTrace();
                            i5++;
                            i4 = i2;
                        }
                    } catch (SQLiteException e3) {
                        e = e3;
                    }
                } catch (SQLiteException e4) {
                    e = e4;
                }
            } else {
                SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions_topics VALUES(?, ?, ?, ?)");
                executeFast2.requery();
                executeFast2.bindInteger(1, keyAt2);
                executeFast2.bindInteger(2, valueAt ? 1 : 0);
                try {
                    executeFast2.bindLong(3, j);
                    executeFast2.bindInteger(4, i);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (SQLiteException e5) {
                    e = e5;
                    e.printStackTrace();
                    i5++;
                    i4 = i2;
                }
            }
            i5++;
            i4 = i2;
        }
        if (!z) {
            if (!z2) {
                return;
            }
            final int i6 = i4;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda51
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$344(i, j, i6);
                }
            });
        } else if (i == 0) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = getInputPeer(j);
            tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda303
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$341(j, i, arrayList, tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$TL_channels_getForumTopicsByID tLRPC$TL_channels_getForumTopicsByID = new TLRPC$TL_channels_getForumTopicsByID();
            tLRPC$TL_channels_getForumTopicsByID.topics.add(Integer.valueOf(i));
            tLRPC$TL_channels_getForumTopicsByID.channel = getMessagesController().getInputChannel(-j);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_channels_getForumTopicsByID, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$343(j, i, arrayList, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$341(final long j, final int i, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            final int i2 = tLRPC$TL_messages_peerDialogs.dialogs.size() == 0 ? 0 : tLRPC$TL_messages_peerDialogs.dialogs.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda74
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$340(j, i2, i, arrayList);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$340(long j, int i, int i2, ArrayList arrayList) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(j, 0, i, false);
            return;
        }
        tLRPC$Dialog.unread_reactions_count = i;
        getMessagesStorage().updateUnreadReactionsCount(j, i2, i);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(i), arrayList);
    }

    public /* synthetic */ void lambda$checkUnreadReactions$343(final long j, final int i, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_forumTopics tLRPC$TL_messages_forumTopics = (TLRPC$TL_messages_forumTopics) tLObject;
            final int i2 = tLRPC$TL_messages_forumTopics.topics.size() == 0 ? 0 : tLRPC$TL_messages_forumTopics.topics.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda75
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$342(j, i, i2, arrayList);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$342(long j, int i, int i2, ArrayList arrayList) {
        getMessagesController().getTopicsController().updateReactionsUnread(j, i, i2, false);
        getMessagesStorage().updateUnreadReactionsCount(j, i, i2);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), arrayList);
    }

    public /* synthetic */ void lambda$checkUnreadReactions$344(int i, long j, int i2) {
        if (i == 0) {
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
            if (tLRPC$Dialog == null) {
                getMessagesStorage().updateDialogUnreadReactions(j, 0, i2, true);
                return;
            }
            int i3 = tLRPC$Dialog.unread_reactions_count + i2;
            tLRPC$Dialog.unread_reactions_count = i3;
            if (i3 < 0) {
                tLRPC$Dialog.unread_reactions_count = 0;
            }
            getMessagesStorage().updateUnreadReactionsCount(j, 0, tLRPC$Dialog.unread_reactions_count);
            return;
        }
        int updateReactionsUnread = getMessagesController().getTopicsController().updateReactionsUnread(j, i, i2, true);
        if (updateReactionsUnread < 0) {
            return;
        }
        getMessagesStorage().updateUnreadReactionsCount(j, i, updateReactionsUnread, true);
    }

    public boolean isDialogMuted(long j, int i) {
        return isDialogMuted(j, i, null);
    }

    public boolean isDialogNotificationsSoundEnabled(long j, int i) {
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        return sharedPreferences.getBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(j, i), true);
    }

    public boolean isDialogMuted(long j, int i, TLRPC$Chat tLRPC$Chat) {
        Boolean bool;
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i2 = sharedPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY + NotificationsController.getSharedPrefKey(j, i), -1);
        if (i2 == -1) {
            if (tLRPC$Chat != null) {
                bool = Boolean.valueOf(ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup);
            } else {
                bool = null;
            }
            if (i != 0) {
                return isDialogMuted(j, 0, tLRPC$Chat);
            }
            return !getNotificationsController().isGlobalNotificationsEnabled(j, bool);
        } else if (i2 == 2) {
            return true;
        } else {
            if (i2 == 3) {
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, i), 0) >= getConnectionsManager().getCurrentTime()) {
                    return true;
                }
            }
            return false;
        }
    }

    public void markReactionsAsRead(long j, int i) {
        if (i == 0) {
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
            if (tLRPC$Dialog != null) {
                tLRPC$Dialog.unread_reactions_count = 0;
            }
        } else {
            this.topicsController.markAllReactionsAsRead(-j, i);
        }
        getMessagesStorage().updateUnreadReactionsCount(j, i, 0);
        TLRPC$TL_messages_readReactions tLRPC$TL_messages_readReactions = new TLRPC$TL_messages_readReactions();
        tLRPC$TL_messages_readReactions.peer = getInputPeer(j);
        if (i != 0) {
            tLRPC$TL_messages_readReactions.top_msg_id = i;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readReactions, MessagesController$$ExternalSyntheticLambda356.INSTANCE);
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_REACTIONS_READ));
    }

    public SponsoredMessagesInfo getSponsoredMessages(final long j) {
        SponsoredMessagesInfo sponsoredMessagesInfo = this.sponsoredMessages.get(j);
        if (sponsoredMessagesInfo == null || (!sponsoredMessagesInfo.loading && Math.abs(SystemClock.elapsedRealtime() - sponsoredMessagesInfo.loadTime) > 300000)) {
            TLRPC$Chat chat = getChat(Long.valueOf(-j));
            if (!ChatObject.isChannel(chat)) {
                return null;
            }
            final SponsoredMessagesInfo sponsoredMessagesInfo2 = new SponsoredMessagesInfo();
            sponsoredMessagesInfo2.loading = true;
            this.sponsoredMessages.put(j, sponsoredMessagesInfo2);
            TLRPC$TL_channels_getSponsoredMessages tLRPC$TL_channels_getSponsoredMessages = new TLRPC$TL_channels_getSponsoredMessages();
            tLRPC$TL_channels_getSponsoredMessages.channel = getInputChannel(chat);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getSponsoredMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda314
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getSponsoredMessages$349(j, sponsoredMessagesInfo2, tLObject, tLRPC$TL_error);
                }
            });
            return null;
        }
        return sponsoredMessagesInfo;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.lang.Integer] */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.lang.Integer] */
    /* JADX WARN: Type inference failed for: r6v12 */
    public /* synthetic */ void lambda$getSponsoredMessages$349(final long j, final SponsoredMessagesInfo sponsoredMessagesInfo, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final ?? r6;
        ArrayList arrayList;
        final ArrayList arrayList2 = null;
        if (tLObject instanceof TLRPC$messages_SponsoredMessages) {
            final TLRPC$messages_SponsoredMessages tLRPC$messages_SponsoredMessages = (TLRPC$messages_SponsoredMessages) tLObject;
            if (tLRPC$messages_SponsoredMessages.messages.isEmpty()) {
                arrayList = null;
            } else {
                if ((tLRPC$messages_SponsoredMessages instanceof TLRPC$TL_messages_sponsoredMessages) && (tLRPC$messages_SponsoredMessages.flags & 1) > 0) {
                    arrayList2 = Integer.valueOf(tLRPC$messages_SponsoredMessages.posts_between);
                }
                ArrayList arrayList3 = new ArrayList();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda203
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSponsoredMessages$347(tLRPC$messages_SponsoredMessages);
                    }
                });
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                int i = 0;
                for (int i2 = 0; i2 < tLRPC$messages_SponsoredMessages.users.size(); i2++) {
                    TLRPC$User tLRPC$User = tLRPC$messages_SponsoredMessages.users.get(i2);
                    longSparseArray.put(tLRPC$User.id, tLRPC$User);
                }
                for (int i3 = 0; i3 < tLRPC$messages_SponsoredMessages.chats.size(); i3++) {
                    TLRPC$Chat tLRPC$Chat = tLRPC$messages_SponsoredMessages.chats.get(i3);
                    longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                int i4 = -10000000;
                int size = tLRPC$messages_SponsoredMessages.messages.size();
                while (i < size) {
                    TLRPC$TL_sponsoredMessage tLRPC$TL_sponsoredMessage = tLRPC$messages_SponsoredMessages.messages.get(i);
                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                    tLRPC$TL_message.message = tLRPC$TL_sponsoredMessage.message;
                    if (!tLRPC$TL_sponsoredMessage.entities.isEmpty()) {
                        tLRPC$TL_message.entities = tLRPC$TL_sponsoredMessage.entities;
                        tLRPC$TL_message.flags |= ConnectionsManager.RequestFlagNeedQuickAck;
                    }
                    tLRPC$TL_message.peer_id = getPeer(j);
                    tLRPC$TL_message.from_id = tLRPC$TL_sponsoredMessage.from_id;
                    tLRPC$TL_message.flags |= 256;
                    tLRPC$TL_message.date = getConnectionsManager().getCurrentTime();
                    int i5 = i4 - 1;
                    tLRPC$TL_message.id = i4;
                    MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true);
                    messageObject.sponsoredId = tLRPC$TL_sponsoredMessage.random_id;
                    messageObject.botStartParam = tLRPC$TL_sponsoredMessage.start_param;
                    messageObject.sponsoredChannelPost = tLRPC$TL_sponsoredMessage.channel_post;
                    messageObject.sponsoredChatInvite = tLRPC$TL_sponsoredMessage.chat_invite;
                    messageObject.sponsoredChatInviteHash = tLRPC$TL_sponsoredMessage.chat_invite_hash;
                    messageObject.sponsoredRecommended = tLRPC$TL_sponsoredMessage.recommended;
                    messageObject.sponsoredShowPeerPhoto = tLRPC$TL_sponsoredMessage.show_peer_photo;
                    arrayList3.add(messageObject);
                    i++;
                    tLRPC$messages_SponsoredMessages = tLRPC$messages_SponsoredMessages;
                    i4 = i5;
                }
                arrayList = arrayList2;
                arrayList2 = arrayList3;
            }
            r6 = arrayList;
        } else {
            r6 = 0;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda124
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSponsoredMessages$348(arrayList2, j, sponsoredMessagesInfo, r6);
            }
        });
    }

    public /* synthetic */ void lambda$getSponsoredMessages$347(TLRPC$messages_SponsoredMessages tLRPC$messages_SponsoredMessages) {
        putUsers(tLRPC$messages_SponsoredMessages.users, false);
        putChats(tLRPC$messages_SponsoredMessages.chats, false);
    }

    public /* synthetic */ void lambda$getSponsoredMessages$348(ArrayList arrayList, long j, SponsoredMessagesInfo sponsoredMessagesInfo, Integer num) {
        if (arrayList == null) {
            this.sponsoredMessages.remove(j);
            return;
        }
        sponsoredMessagesInfo.loadTime = SystemClock.elapsedRealtime();
        sponsoredMessagesInfo.messages = arrayList;
        sponsoredMessagesInfo.posts_between = num;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadSponsoredMessages, Long.valueOf(j), arrayList);
    }

    public void clearSendAsPeers() {
        this.sendAsPeers.clear();
    }

    public TLRPC$TL_channels_sendAsPeers getSendAsPeers(final long j) {
        SendAsPeersInfo sendAsPeersInfo = this.sendAsPeers.get(j);
        if (sendAsPeersInfo != null && (sendAsPeersInfo.loading || Math.abs(SystemClock.elapsedRealtime() - sendAsPeersInfo.loadTime) <= 300000)) {
            return sendAsPeersInfo.sendAsPeers;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        if (chat != null && ChatObject.canSendAsPeers(chat)) {
            final SendAsPeersInfo sendAsPeersInfo2 = new SendAsPeersInfo();
            sendAsPeersInfo2.loading = true;
            this.sendAsPeers.put(j, sendAsPeersInfo2);
            TLRPC$TL_channels_getSendAs tLRPC$TL_channels_getSendAs = new TLRPC$TL_channels_getSendAs();
            tLRPC$TL_channels_getSendAs.peer = getInputPeer(j);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda313
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getSendAsPeers$352(j, sendAsPeersInfo2, tLObject, tLRPC$TL_error);
                }
            });
        }
        return null;
    }

    public /* synthetic */ void lambda$getSendAsPeers$352(final long j, final SendAsPeersInfo sendAsPeersInfo, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers = null;
        if (tLObject != null) {
            final TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers2 = (TLRPC$TL_channels_sendAsPeers) tLObject;
            if (!tLRPC$TL_channels_sendAsPeers2.peers.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda166
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSendAsPeers$350(tLRPC$TL_channels_sendAsPeers2);
                    }
                });
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                for (int i = 0; i < tLRPC$TL_channels_sendAsPeers2.users.size(); i++) {
                    TLRPC$User tLRPC$User = tLRPC$TL_channels_sendAsPeers2.users.get(i);
                    longSparseArray.put(tLRPC$User.id, tLRPC$User);
                }
                for (int i2 = 0; i2 < tLRPC$TL_channels_sendAsPeers2.chats.size(); i2++) {
                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_channels_sendAsPeers2.chats.get(i2);
                    longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                tLRPC$TL_channels_sendAsPeers = tLRPC$TL_channels_sendAsPeers2;
            }
        }
        final TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers3 = tLRPC$TL_channels_sendAsPeers;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda167
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSendAsPeers$351(tLRPC$TL_channels_sendAsPeers3, j, sendAsPeersInfo);
            }
        });
    }

    public /* synthetic */ void lambda$getSendAsPeers$350(TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers) {
        putUsers(tLRPC$TL_channels_sendAsPeers.users, false);
        putChats(tLRPC$TL_channels_sendAsPeers.chats, false);
    }

    public /* synthetic */ void lambda$getSendAsPeers$351(TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers, long j, SendAsPeersInfo sendAsPeersInfo) {
        if (tLRPC$TL_channels_sendAsPeers != null) {
            sendAsPeersInfo.loadTime = SystemClock.elapsedRealtime();
            sendAsPeersInfo.sendAsPeers = tLRPC$TL_channels_sendAsPeers;
            getNotificationCenter().postNotificationName(NotificationCenter.didLoadSendAsPeers, Long.valueOf(j), tLRPC$TL_channels_sendAsPeers);
            return;
        }
        this.sendAsPeers.remove(j);
    }

    public CharSequence getPrintingString(long j, int i, boolean z) {
        SparseArray<CharSequence> sparseArray;
        TLRPC$User user;
        TLRPC$UserStatus tLRPC$UserStatus;
        if ((!z || !DialogObject.isUserDialog(j) || (user = getUser(Long.valueOf(j))) == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires >= 0) && (sparseArray = this.printingStrings.get(j)) != null) {
            return sparseArray.get(i);
        }
        return null;
    }

    public Integer getPrintingStringType(long j, int i) {
        SparseArray<Integer> sparseArray = this.printingStringsTypes.get(j);
        if (sparseArray == null) {
            return null;
        }
        return sparseArray.get(i);
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (this.printingUsers.get(Long.valueOf(j)) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (next.isFromUser() && !arrayList2.contains(Long.valueOf(next.messageOwner.from_id.user_id))) {
                    arrayList2.add(Long.valueOf(next.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(Long.valueOf(j));
            if (concurrentHashMap != null) {
                ArrayList arrayList3 = null;
                z = false;
                for (Map.Entry<Integer, ArrayList<PrintingUser>> entry : concurrentHashMap.entrySet()) {
                    Integer key = entry.getKey();
                    ArrayList<PrintingUser> value = entry.getValue();
                    int i = 0;
                    while (i < value.size()) {
                        if (arrayList2.contains(Long.valueOf(value.get(i).userId))) {
                            value.remove(i);
                            i--;
                            if (value.isEmpty()) {
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                }
                                arrayList3.add(key);
                            }
                            z = true;
                        }
                        i++;
                    }
                }
                if (arrayList3 != null) {
                    int size = arrayList3.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        concurrentHashMap.remove(arrayList3.get(i2));
                    }
                    if (concurrentHashMap.isEmpty()) {
                        this.printingUsers.remove(Long.valueOf(j));
                    }
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:180:0x0480  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x0485  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean updateInterfaceWithMessages(final long j, ArrayList<MessageObject> arrayList, boolean z) {
        long j2;
        MessageObject messageObject;
        boolean z2;
        LongSparseArray<TLRPC$Chat> longSparseArray;
        boolean z3;
        boolean z4;
        LongSparseArray<TLRPC$Chat> longSparseArray2;
        boolean z5;
        TLRPC$Chat chat;
        boolean z6;
        TLRPC$ChatFull chatFull;
        MessagesController messagesController = this;
        if (arrayList == null || arrayList.isEmpty()) {
            return false;
        }
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        if (!z) {
            long j3 = 0;
            int i = 0;
            MessageObject messageObject2 = null;
            boolean z7 = false;
            boolean z8 = false;
            while (i < arrayList.size()) {
                MessageObject messageObject3 = arrayList.get(i);
                if (messageObject2 == null || ((!isEncryptedDialog && messageObject3.getId() > messageObject2.getId()) || (((isEncryptedDialog || (messageObject3.getId() < 0 && messageObject2.getId() < 0)) && messageObject3.getId() < messageObject2.getId()) || messageObject3.messageOwner.date > messageObject2.messageOwner.date))) {
                    z6 = isEncryptedDialog;
                    long j4 = messageObject3.messageOwner.peer_id.channel_id;
                    if (j4 != 0) {
                        j3 = j4;
                    }
                    messageObject2 = messageObject3;
                } else {
                    z6 = isEncryptedDialog;
                }
                TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                if ((tLRPC$Message.action instanceof TLRPC$TL_messageActionGroupCall) && (chatFull = messagesController.getChatFull(tLRPC$Message.peer_id.channel_id)) != null) {
                    TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall = chatFull.call;
                    if (tLRPC$TL_inputGroupCall == null || tLRPC$TL_inputGroupCall.id != messageObject3.messageOwner.action.call.id) {
                        messagesController = this;
                        messagesController.loadFullChat(messageObject3.messageOwner.peer_id.channel_id, 0, true);
                    } else {
                        messagesController = this;
                    }
                }
                if (!z7 && !messageObject3.isOut()) {
                    z7 = true;
                }
                if (messageObject3.isOut() && !messageObject3.isSending() && !messageObject3.isForwarded()) {
                    if (messageObject3.isNewGif()) {
                        if (MessageObject.isDocumentHasAttachedStickers(messageObject3.messageOwner.media.document) ? getMessagesController().saveGifsWithStickers : true) {
                            MediaDataController mediaDataController = getMediaDataController();
                            TLRPC$Message tLRPC$Message2 = messageObject3.messageOwner;
                            mediaDataController.addRecentGif(tLRPC$Message2.media.document, tLRPC$Message2.date, true);
                        }
                    } else if (!messageObject3.isAnimatedEmoji() && (messageObject3.isSticker() || messageObject3.isAnimatedSticker())) {
                        MediaDataController mediaDataController2 = getMediaDataController();
                        TLRPC$Message tLRPC$Message3 = messageObject3.messageOwner;
                        mediaDataController2.addRecentSticker(0, messageObject3, tLRPC$Message3.media.document, tLRPC$Message3.date, false);
                    }
                }
                if (messageObject3.isOut() && messageObject3.isSent()) {
                    z8 = true;
                }
                i++;
                isEncryptedDialog = z6;
            }
            messageObject = messageObject2;
            j2 = j3;
            z2 = z8;
        } else {
            j2 = 0;
            messageObject = null;
            z2 = false;
        }
        getMediaDataController().loadReplyMessagesForMessages(arrayList, j, z, 0, null);
        getNotificationCenter().postNotificationName(NotificationCenter.didReceiveNewMessages, Long.valueOf(j), arrayList, Boolean.valueOf(z));
        if (messageObject == null || z) {
            return false;
        }
        TLRPC$TL_dialog tLRPC$TL_dialog = (TLRPC$TL_dialog) messagesController.dialogs_dict.get(j);
        if (messageObject.messageOwner.action instanceof TLRPC$TL_messageActionChatMigrateTo) {
            if (tLRPC$TL_dialog != null) {
                messagesController.allDialogs.remove(tLRPC$TL_dialog);
                messagesController.dialogsServerOnly.remove(tLRPC$TL_dialog);
                messagesController.dialogsCanAddUsers.remove(tLRPC$TL_dialog);
                messagesController.dialogsMyGroups.remove(tLRPC$TL_dialog);
                messagesController.dialogsMyChannels.remove(tLRPC$TL_dialog);
                messagesController.dialogsChannelsOnly.remove(tLRPC$TL_dialog);
                messagesController.dialogsGroupsOnly.remove(tLRPC$TL_dialog);
                int i2 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = messagesController.selectedDialogFilter;
                    if (i2 >= dialogFilterArr.length) {
                        break;
                    }
                    if (dialogFilterArr[i2] != null) {
                        dialogFilterArr[i2].dialogs.remove(tLRPC$TL_dialog);
                    }
                    i2++;
                }
                messagesController.dialogsUsersOnly.remove(tLRPC$TL_dialog);
                messagesController.dialogsForBlock.remove(tLRPC$TL_dialog);
                messagesController.dialogsForward.remove(tLRPC$TL_dialog);
                messagesController.dialogs_dict.remove(tLRPC$TL_dialog.id);
                messagesController.dialogs_read_inbox_max.remove(Long.valueOf(tLRPC$TL_dialog.id));
                messagesController.dialogs_read_outbox_max.remove(Long.valueOf(tLRPC$TL_dialog.id));
                int i3 = messagesController.nextDialogsCacheOffset.get(tLRPC$TL_dialog.folder_id, 0);
                if (i3 > 0) {
                    messagesController.nextDialogsCacheOffset.put(tLRPC$TL_dialog.folder_id, i3 - 1);
                }
                messagesController.dialogMessage.remove(tLRPC$TL_dialog.id);
                ArrayList<TLRPC$Dialog> arrayList2 = messagesController.dialogsByFolder.get(tLRPC$TL_dialog.folder_id);
                if (arrayList2 != null) {
                    arrayList2.remove(tLRPC$TL_dialog);
                }
                MessageObject messageObject4 = messagesController.dialogMessagesByIds.get(tLRPC$TL_dialog.top_message);
                if (messageObject4 != null && messageObject4.messageOwner.peer_id.channel_id == 0) {
                    messagesController.dialogMessagesByIds.remove(tLRPC$TL_dialog.top_message);
                }
                if (messageObject4 != null) {
                    long j5 = messageObject4.messageOwner.random_id;
                    if (j5 != 0) {
                        messagesController.dialogMessagesByRandomIds.remove(j5);
                    }
                }
                z5 = false;
                tLRPC$TL_dialog.top_message = 0;
                getNotificationsController().removeNotificationsForDialog(tLRPC$TL_dialog.id);
                getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
            } else {
                z5 = false;
            }
            if (!DialogObject.isChatDialog(j)) {
                return z5;
            }
            ChatObject.Call groupCall = messagesController.getGroupCall(-j, z5);
            if (groupCall != null && (chat = messagesController.getChat(Long.valueOf(messageObject.messageOwner.action.channel_id))) != null) {
                groupCall.migrateToChat(chat);
            }
            return false;
        }
        if (tLRPC$TL_dialog == null) {
            TLRPC$Chat chat2 = messagesController.getChat(Long.valueOf(j2));
            if (j2 != 0 && chat2 == null) {
                return false;
            }
            if (chat2 != null && (ChatObject.isNotInChat(chat2) || chat2.min)) {
                return false;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("not found dialog with id " + j + " dictCount = " + messagesController.dialogs_dict.size() + " allCount = " + messagesController.allDialogs.size());
            }
            final TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
            tLRPC$TL_dialog2.id = j;
            final int id = messageObject.getId();
            tLRPC$TL_dialog2.top_message = id;
            tLRPC$TL_dialog2.last_message_date = messageObject.messageOwner.date;
            tLRPC$TL_dialog2.flags = ChatObject.isChannel(chat2) ? 1 : 0;
            if (messagesController.pendingUnreadCounter.get(j, 0) > 0) {
                tLRPC$TL_dialog2.unread_count = messagesController.pendingUnreadCounter.get(j);
                messagesController.pendingUnreadCounter.delete(j);
                if (!messagesController.isDialogMuted(j, 0)) {
                    messagesController.unreadUnmutedDialogs++;
                }
                int i4 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr2 = messagesController.selectedDialogFilter;
                    if (i4 >= dialogFilterArr2.length) {
                        break;
                    } else if (dialogFilterArr2[i4] != null && (dialogFilterArr2[i4].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        z4 = true;
                        break;
                    } else {
                        i4++;
                    }
                }
            }
            z4 = false;
            messagesController.dialogs_dict.put(j, tLRPC$TL_dialog2);
            messagesController.allDialogs.add(tLRPC$TL_dialog2);
            ArrayList<MessageObject> arrayList3 = new ArrayList<>();
            for (int i5 = 0; i5 < arrayList.size(); i5++) {
                MessageObject messageObject5 = arrayList.get(i5);
                if (messageObject5 != null && (messageObject5.getId() == messageObject.getId() || (messageObject5.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject5.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                    arrayList3.add(messageObject5);
                    if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                        messagesController.dialogMessagesByIds.put(messageObject5.getId(), messageObject5);
                        long j6 = messageObject5.messageOwner.random_id;
                        if (j6 != 0) {
                            messagesController.dialogMessagesByRandomIds.put(j6, messageObject5);
                        }
                    }
                }
            }
            messagesController.dialogMessage.put(j, arrayList3);
            if (z4) {
                longSparseArray2 = null;
                messagesController.sortDialogs(null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            } else {
                longSparseArray2 = null;
            }
            longSparseArray = longSparseArray2;
            getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda237
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i6) {
                    MessagesController.this.lambda$updateInterfaceWithMessages$353(tLRPC$TL_dialog2, id, j, i6);
                }
            });
        } else {
            longSparseArray = null;
            if ((tLRPC$TL_dialog.top_message <= 0 || messageObject.getId() <= 0 || messageObject.getId() <= tLRPC$TL_dialog.top_message) && ((tLRPC$TL_dialog.top_message >= 0 || messageObject.getId() >= 0 || messageObject.getId() >= tLRPC$TL_dialog.top_message) && messagesController.dialogMessage.indexOfKey(j) >= 0 && tLRPC$TL_dialog.top_message >= 0 && tLRPC$TL_dialog.last_message_date > messageObject.messageOwner.date)) {
                z3 = false;
                if (z3) {
                    messagesController.sortDialogs(longSparseArray);
                }
                if (z2) {
                    getMediaDataController().increasePeerRaiting(j);
                }
                return z3;
            }
            MessageObject messageObject6 = messagesController.dialogMessagesByIds.get(tLRPC$TL_dialog.top_message);
            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                messagesController.dialogMessagesByIds.remove(tLRPC$TL_dialog.top_message);
            }
            if (messageObject6 != null) {
                long j7 = messageObject6.messageOwner.random_id;
                if (j7 != 0) {
                    messagesController.dialogMessagesByRandomIds.remove(j7);
                }
            }
            tLRPC$TL_dialog.top_message = messageObject.getId();
            tLRPC$TL_dialog.last_message_date = messageObject.messageOwner.date;
            ArrayList<MessageObject> arrayList4 = new ArrayList<>(1);
            for (int i6 = 0; i6 < arrayList.size(); i6++) {
                MessageObject messageObject7 = arrayList.get(i6);
                if (messageObject7 != null && (messageObject7.getId() == messageObject.getId() || (messageObject7.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject7.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                    arrayList4.add(messageObject7);
                }
            }
            messagesController.dialogMessage.put(j, arrayList4);
            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                messagesController.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                long j8 = messageObject.messageOwner.random_id;
                if (j8 != 0) {
                    messagesController.dialogMessagesByRandomIds.put(j8, messageObject);
                }
            }
        }
        z3 = true;
        if (z3) {
        }
        if (z2) {
        }
        return z3;
    }

    public /* synthetic */ void lambda$updateInterfaceWithMessages$353(TLRPC$Dialog tLRPC$Dialog, int i, long j, int i2) {
        if (i2 == -1) {
            if (i <= 0 || DialogObject.isEncryptedDialog(j)) {
                return;
            }
            loadUnknownDialog(getInputPeer(j), 0L);
        } else if (i2 == 0) {
        } else {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs(null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.put(j, tLRPC$Dialog);
        } else {
            this.deletingDialogs.put(j, tLRPC$Dialog);
            this.allDialogs.remove(tLRPC$Dialog);
            sortDialogs(null);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.remove(j);
        } else {
            this.deletingDialogs.remove(j);
            if (!z2) {
                this.allDialogs.add(tLRPC$Dialog);
                sortDialogs(null);
            }
        }
        if (z2) {
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(21:1|(2:2|(3:4|(2:6|7)(1:9)|8)(1:10))|11|(4:14|(2:16|17)(1:19)|18|12)|20|21|(15:191|(2:192|(3:194|(1:214)(3:196|(3:198|(4:200|(1:204)|205|(2:207|208)(1:210))(1:211)|209)|212)|213)(0))|26|27|(2:29|(1:35))|36|(6:38|(6:40|(4:42|(4:45|(2:51|52)|53|43)|57|(2:61|62))|63|(2:65|(4:67|(1:(2:97|(1:99)(1:100))(1:96))|(3:116|(1:118)|108)(2:104|(1:106))|(2:112|(1:114)(1:115)))(2:120|(1:(3:130|(2:138|(1:140)(1:141))|144)(4:127|128|129|62))(2:145|(2:147|(1:149)))))|150|(3:110|112|(0)(0)))|151|(1:166)|155|(3:162|163|62)(4:161|128|129|62))|167|168|(1:172)|(1:176)|177|(4:180|(2:182|183)(1:185)|184|178)|186|187)(0)|25|26|27|(0)|36|(0)|167|168|(2:170|172)|(2:174|176)|177|(1:178)|186|187) */
    /* JADX WARN: Code restructure failed: missing block: B:107:0x01be, code lost:
        if (org.telegram.messenger.ChatObject.hasAdminRights(r7) == false) goto L108;
     */
    /* JADX WARN: Code restructure failed: missing block: B:119:0x01d4, code lost:
        if (org.telegram.messenger.ChatObject.canPost(r7) != false) goto L150;
     */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0248  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x024f  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x02d5  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0100  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void sortDialogs(LongSparseArray<TLRPC$Chat> longSparseArray) {
        TLRPC$EncryptedChat encryptedChat;
        TLRPC$Dialog tLRPC$Dialog;
        int size;
        int i;
        boolean z;
        TLRPC$Dialog tLRPC$Dialog2;
        TLRPC$User currentUser;
        boolean z2;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights;
        TLRPC$Chat tLRPC$Chat;
        boolean z3;
        boolean z4;
        boolean z5;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3;
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        TLRPC$Message tLRPC$Message;
        int i2;
        TLRPC$Chat chat;
        this.dialogsServerOnly.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsMyGroups.clear();
        this.dialogsMyChannels.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        int i3 = 0;
        while (true) {
            DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
            if (i3 >= dialogFilterArr.length) {
                break;
            }
            if (dialogFilterArr[i3] != null) {
                dialogFilterArr[i3].dialogs.clear();
            }
            i3++;
        }
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogsForward.clear();
        for (int i4 = 0; i4 < this.dialogsByFolder.size(); i4++) {
            ArrayList<TLRPC$Dialog> valueAt = this.dialogsByFolder.valueAt(i4);
            if (valueAt != null) {
                valueAt.clear();
            }
        }
        this.unreadUnmutedDialogs = 0;
        long clientUserId = getUserConfig().getClientUserId();
        DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
        if (dialogFilterArr2[0] != null || dialogFilterArr2[1] != null) {
            int i5 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                if (i5 < dialogFilterArr3.length) {
                    DialogFilter dialogFilter = dialogFilterArr3[i5];
                    this.sortingDialogFilter = dialogFilter;
                    if (dialogFilter != null) {
                        Collections.sort(this.allDialogs, this.dialogDateComparator);
                        ArrayList<TLRPC$Dialog> arrayList = this.sortingDialogFilter.dialogs;
                        int size2 = this.allDialogs.size();
                        for (int i6 = 0; i6 < size2; i6++) {
                            TLRPC$Dialog tLRPC$Dialog3 = this.allDialogs.get(i6);
                            if (tLRPC$Dialog3 instanceof TLRPC$TL_dialog) {
                                long j = tLRPC$Dialog3.id;
                                if (DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                                    j = encryptedChat.user_id;
                                }
                                if (this.sortingDialogFilter.includesDialog(getAccountInstance(), j, tLRPC$Dialog3)) {
                                    arrayList.add(tLRPC$Dialog3);
                                }
                            }
                        }
                    }
                    i5++;
                }
            }
            Collections.sort(this.allDialogs, this.dialogComparator);
            this.isLeftPromoChannel = true;
            tLRPC$Dialog = this.promoDialog;
            if (tLRPC$Dialog != null) {
                long j2 = tLRPC$Dialog.id;
                if (j2 < 0 && (chat = getChat(Long.valueOf(-j2))) != null && !chat.left) {
                    this.isLeftPromoChannel = false;
                }
            }
            size = this.allDialogs.size();
            i = 0;
            z = false;
            while (i < size) {
                TLRPC$Dialog tLRPC$Dialog4 = this.allDialogs.get(i);
                if (tLRPC$Dialog4 instanceof TLRPC$TL_dialog) {
                    ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(tLRPC$Dialog4.id);
                    if (arrayList2 != null) {
                        int i7 = Integer.MIN_VALUE;
                        for (int i8 = 0; i8 < arrayList2.size(); i8++) {
                            MessageObject messageObject = arrayList2.get(i8);
                            if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && (i2 = tLRPC$Message.date) > i7) {
                                i7 = i2;
                            }
                        }
                        if (i7 > Integer.MIN_VALUE && i7 < this.dialogsLoadedTillDate) {
                            i++;
                        }
                    }
                    if (!DialogObject.isEncryptedDialog(tLRPC$Dialog4.id)) {
                        this.dialogsServerOnly.add(tLRPC$Dialog4);
                        if (DialogObject.isChannel(tLRPC$Dialog4)) {
                            TLRPC$Chat chat2 = getChat(Long.valueOf(-tLRPC$Dialog4.id));
                            if (chat2 != null && ((z3 = chat2.creator) || (((z5 = chat2.megagroup) && (((tLRPC$TL_chatAdminRights3 = chat2.admin_rights) != null && (tLRPC$TL_chatAdminRights3.post_messages || tLRPC$TL_chatAdminRights3.add_admins)) || (tLRPC$TL_chatBannedRights = chat2.default_banned_rights) == null || !tLRPC$TL_chatBannedRights.invite_users)) || (!z5 && (tLRPC$TL_chatAdminRights2 = chat2.admin_rights) != null && tLRPC$TL_chatAdminRights2.add_admins)))) {
                                if (z3 || (((z4 = chat2.megagroup) && chat2.admin_rights != null) || (!z4 && chat2.admin_rights != null))) {
                                    if (chat2.megagroup) {
                                        this.dialogsMyGroups.add(tLRPC$Dialog4);
                                    } else {
                                        this.dialogsMyChannels.add(tLRPC$Dialog4);
                                    }
                                } else {
                                    this.dialogsCanAddUsers.add(tLRPC$Dialog4);
                                }
                            }
                            if (chat2 != null && chat2.megagroup) {
                                this.dialogsGroupsOnly.add(tLRPC$Dialog4);
                                if (chat2.gigagroup) {
                                }
                            } else {
                                this.dialogsChannelsOnly.add(tLRPC$Dialog4);
                                if (ChatObject.hasAdminRights(chat2)) {
                                }
                                z2 = false;
                            }
                            if (z2 && tLRPC$Dialog4.folder_id == 0) {
                                if (tLRPC$Dialog4.id != clientUserId) {
                                    this.dialogsForward.add(0, tLRPC$Dialog4);
                                    z = true;
                                } else {
                                    this.dialogsForward.add(tLRPC$Dialog4);
                                }
                            }
                        } else {
                            long j3 = tLRPC$Dialog4.id;
                            if (j3 < 0) {
                                if (longSparseArray != null && (tLRPC$Chat = longSparseArray.get(-j3)) != null && tLRPC$Chat.migrated_to != null) {
                                    this.allDialogs.remove(i);
                                    i--;
                                    size--;
                                    i++;
                                } else {
                                    TLRPC$Chat chat3 = getChat(Long.valueOf(-tLRPC$Dialog4.id));
                                    if (chat3 != null && (((tLRPC$TL_chatAdminRights = chat3.admin_rights) != null && (tLRPC$TL_chatAdminRights.add_admins || tLRPC$TL_chatAdminRights.invite_users)) || chat3.creator)) {
                                        if (chat3.creator) {
                                            this.dialogsMyGroups.add(tLRPC$Dialog4);
                                        } else {
                                            this.dialogsCanAddUsers.add(tLRPC$Dialog4);
                                        }
                                    }
                                    this.dialogsGroupsOnly.add(tLRPC$Dialog4);
                                }
                            } else if (j3 != clientUserId) {
                                this.dialogsUsersOnly.add(tLRPC$Dialog4);
                                if (!UserObject.isReplyUser(tLRPC$Dialog4.id)) {
                                    this.dialogsForBlock.add(tLRPC$Dialog4);
                                }
                            }
                        }
                    }
                    z2 = true;
                    if (z2) {
                        if (tLRPC$Dialog4.id != clientUserId) {
                        }
                    }
                }
                if ((getDialogUnreadCount(tLRPC$Dialog4) != 0 || tLRPC$Dialog4.unread_mark) && !isDialogMuted(tLRPC$Dialog4.id, 0)) {
                    this.unreadUnmutedDialogs++;
                }
                TLRPC$Dialog tLRPC$Dialog5 = this.promoDialog;
                if (tLRPC$Dialog5 != null && tLRPC$Dialog4.id == tLRPC$Dialog5.id && this.isLeftPromoChannel) {
                    this.allDialogs.remove(i);
                    i--;
                    size--;
                    i++;
                } else {
                    addDialogToItsFolder(-1, tLRPC$Dialog4);
                    i++;
                }
            }
            tLRPC$Dialog2 = this.promoDialog;
            if (tLRPC$Dialog2 != null && this.isLeftPromoChannel) {
                this.allDialogs.add(0, tLRPC$Dialog2);
                addDialogToItsFolder(-2, this.promoDialog);
            }
            if (!z && (currentUser = getUserConfig().getCurrentUser()) != null) {
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.id = currentUser.id;
                tLRPC$TL_dialog.notify_settings = new TLRPC$TL_peerNotifySettings();
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_dialog.peer = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = currentUser.id;
                this.dialogsForward.add(0, tLRPC$TL_dialog);
            }
            for (int i9 = 0; i9 < this.dialogsByFolder.size(); i9++) {
                int keyAt = this.dialogsByFolder.keyAt(i9);
                if (this.dialogsByFolder.valueAt(i9).isEmpty()) {
                    this.dialogsByFolder.remove(keyAt);
                }
            }
        }
        Collections.sort(this.allDialogs, this.dialogComparator);
        this.isLeftPromoChannel = true;
        tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
        }
        size = this.allDialogs.size();
        i = 0;
        z = false;
        while (i < size) {
        }
        tLRPC$Dialog2 = this.promoDialog;
        if (tLRPC$Dialog2 != null) {
            this.allDialogs.add(0, tLRPC$Dialog2);
            addDialogToItsFolder(-2, this.promoDialog);
        }
        if (!z) {
            TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
            tLRPC$TL_dialog2.id = currentUser.id;
            tLRPC$TL_dialog2.notify_settings = new TLRPC$TL_peerNotifySettings();
            TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
            tLRPC$TL_dialog2.peer = tLRPC$TL_peerUser2;
            tLRPC$TL_peerUser2.user_id = currentUser.id;
            this.dialogsForward.add(0, tLRPC$TL_dialog2);
        }
        while (i9 < this.dialogsByFolder.size()) {
        }
    }

    private void addDialogToItsFolder(int i, TLRPC$Dialog tLRPC$Dialog) {
        int i2 = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder ? 0 : tLRPC$Dialog.folder_id;
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(tLRPC$Dialog);
        } else if (i == -2) {
            if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC$TL_dialogFolder)) {
                arrayList.add(0, tLRPC$Dialog);
            } else {
                arrayList.add(1, tLRPC$Dialog);
            }
        } else {
            arrayList.add(i, tLRPC$Dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC$TL_restrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = arrayList.get(i);
            if ("all".equals(tLRPC$TL_restrictionReason.platform) || (!BuildVars.isStandaloneApp() && !BuildVars.isBetaApp() && "android".equals(tLRPC$TL_restrictionReason.platform))) {
                return tLRPC$TL_restrictionReason.text;
            }
        }
        return null;
    }

    public static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment == null || baseFragment.getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(baseFragment.getParentActivity(), baseFragment.getResourceProvider());
        builder.setTitle(LocaleController.getString(R.string.DialogNotAvailable));
        HashMap hashMap = new HashMap();
        hashMap.put("info1.**", Integer.valueOf(baseFragment.getThemedColor("dialogTopBackground")));
        hashMap.put("info2.**", Integer.valueOf(baseFragment.getThemedColor("dialogTopBackground")));
        builder.setTopAnimation(R.raw.not_available, 52, false, baseFragment.getThemedColor("dialogTopBackground"), hashMap);
        builder.setTopAnimationIsNew(true);
        builder.setPositiveButton(LocaleController.getString(R.string.Close), null);
        builder.setMessage(str);
        baseFragment.showDialog(builder.create());
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public boolean checkCanOpenChat(final Bundle bundle, final BaseFragment baseFragment, MessageObject messageObject) {
        TLRPC$Chat chat;
        String restrictionReason;
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages;
        if (bundle != null && baseFragment != null) {
            long j = bundle.getLong("user_id", 0L);
            long j2 = bundle.getLong("chat_id", 0L);
            int i = bundle.getInt("message_id", 0);
            TLRPC$User tLRPC$User = null;
            if (j != 0) {
                tLRPC$User = getUser(Long.valueOf(j));
                chat = null;
            } else {
                chat = j2 != 0 ? getChat(Long.valueOf(j2)) : null;
            }
            if (tLRPC$User == null && chat == null) {
                return true;
            }
            if (chat != null) {
                restrictionReason = getRestrictionReason(chat.restriction_reason);
            } else {
                restrictionReason = getRestrictionReason(tLRPC$User.restriction_reason);
            }
            if (restrictionReason != null) {
                showCantOpenAlert(baseFragment, restrictionReason);
                return false;
            } else if (i != 0 && messageObject != null && chat != null && chat.access_hash == 0) {
                long dialogId = messageObject.getDialogId();
                if (!DialogObject.isEncryptedDialog(dialogId)) {
                    final AlertDialog alertDialog = new AlertDialog(baseFragment.getParentActivity(), 3);
                    if (dialogId < 0) {
                        chat = getChat(Long.valueOf(-dialogId));
                    }
                    if (dialogId > 0 || !ChatObject.isChannel(chat)) {
                        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages2 = new TLRPC$TL_messages_getMessages();
                        tLRPC$TL_messages_getMessages2.id.add(Integer.valueOf(messageObject.getId()));
                        tLRPC$TL_messages_getMessages = tLRPC$TL_messages_getMessages2;
                    } else {
                        TLRPC$Chat chat2 = getChat(Long.valueOf(-dialogId));
                        TLRPC$TL_channels_getMessages tLRPC$TL_channels_getMessages = new TLRPC$TL_channels_getMessages();
                        tLRPC$TL_channels_getMessages.channel = getInputChannel(chat2);
                        tLRPC$TL_channels_getMessages.id.add(Integer.valueOf(messageObject.getId()));
                        tLRPC$TL_messages_getMessages = tLRPC$TL_channels_getMessages;
                    }
                    final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda340
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$checkCanOpenChat$355(alertDialog, baseFragment, bundle, tLObject, tLRPC$TL_error);
                        }
                    });
                    alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda3
                        @Override // android.content.DialogInterface.OnCancelListener
                        public final void onCancel(DialogInterface dialogInterface) {
                            MessagesController.this.lambda$checkCanOpenChat$356(sendRequest, baseFragment, dialogInterface);
                        }
                    });
                    baseFragment.setVisibleDialog(alertDialog);
                    alertDialog.show();
                    return false;
                }
            }
        }
        return true;
    }

    public /* synthetic */ void lambda$checkCanOpenChat$355(final AlertDialog alertDialog, final BaseFragment baseFragment, final Bundle bundle, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda211
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkCanOpenChat$354(alertDialog, tLObject, baseFragment, bundle);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkCanOpenChat$354(AlertDialog alertDialog, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        putUsers(tLRPC$messages_Messages.users, false);
        putChats(tLRPC$messages_Messages.chats, false);
        getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    public /* synthetic */ void lambda$checkCanOpenChat$356(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog(null);
    }

    public static void openChatOrProfileWith(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, int i, boolean z) {
        String restrictionReason;
        if ((tLRPC$User == null && tLRPC$Chat == null) || baseFragment == null) {
            return;
        }
        if (tLRPC$Chat != null) {
            restrictionReason = getRestrictionReason(tLRPC$Chat.restriction_reason);
        } else {
            restrictionReason = getRestrictionReason(tLRPC$User.restriction_reason);
            if (i != 3 && tLRPC$User.bot) {
                i = 1;
                z = true;
            }
        }
        if (restrictionReason != null) {
            showCantOpenAlert(baseFragment, restrictionReason);
            return;
        }
        Bundle bundle = new Bundle();
        if (tLRPC$Chat != null) {
            bundle.putLong("chat_id", tLRPC$Chat.id);
        } else {
            bundle.putLong("user_id", tLRPC$User.id);
        }
        if (i == 0) {
            baseFragment.presentFragment(new ProfileActivity(bundle));
        } else if (i == 2) {
            if (ChatObject.isForum(tLRPC$Chat)) {
                baseFragment.presentFragment(new TopicsFragment(bundle), true, true);
            } else {
                baseFragment.presentFragment(new ChatActivity(bundle), true, true);
            }
        } else if (ChatObject.isForum(tLRPC$Chat)) {
            baseFragment.presentFragment(new TopicsFragment(bundle), z);
        } else {
            baseFragment.presentFragment(new ChatActivity(bundle), z);
        }
    }

    public void openByUserName(String str, final BaseFragment baseFragment, final int i) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        if (str == null || baseFragment == null) {
            return;
        }
        TLObject userOrChat = getUserOrChat(str);
        if (userOrChat instanceof TLRPC$User) {
            tLRPC$User = (TLRPC$User) userOrChat;
            if (!tLRPC$User.min) {
                tLRPC$Chat = null;
            }
            tLRPC$User = null;
            tLRPC$Chat = null;
        } else {
            if (userOrChat instanceof TLRPC$Chat) {
                TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) userOrChat;
                if (!tLRPC$Chat2.min) {
                    tLRPC$Chat = tLRPC$Chat2;
                    tLRPC$User = null;
                }
            }
            tLRPC$User = null;
            tLRPC$Chat = null;
        }
        if (tLRPC$User != null) {
            openChatOrProfileWith(tLRPC$User, null, baseFragment, i, false);
        } else if (tLRPC$Chat != null) {
            openChatOrProfileWith(null, tLRPC$Chat, baseFragment, 1, false);
        } else if (baseFragment.getParentActivity() == null) {
        } else {
            final AlertDialog[] alertDialogArr = {new AlertDialog(baseFragment.getParentActivity(), 3)};
            TLRPC$TL_contacts_resolveUsername tLRPC$TL_contacts_resolveUsername = new TLRPC$TL_contacts_resolveUsername();
            tLRPC$TL_contacts_resolveUsername.username = str;
            final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_contacts_resolveUsername, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda351
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$openByUserName$358(alertDialogArr, baseFragment, i, tLObject, tLRPC$TL_error);
                }
            });
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda220
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$openByUserName$360(alertDialogArr, sendRequest, baseFragment);
                }
            }, 500L);
        }
    }

    public /* synthetic */ void lambda$openByUserName$358(final AlertDialog[] alertDialogArr, final BaseFragment baseFragment, final int i, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda221
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$openByUserName$357(alertDialogArr, baseFragment, tLRPC$TL_error, tLObject, i);
            }
        });
    }

    public /* synthetic */ void lambda$openByUserName$357(AlertDialog[] alertDialogArr, BaseFragment baseFragment, TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, int i) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog(null);
        if (tLRPC$TL_error == null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            putUsers(tLRPC$TL_contacts_resolvedPeer.users, false);
            putChats(tLRPC$TL_contacts_resolvedPeer.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_contacts_resolvedPeer.users, tLRPC$TL_contacts_resolvedPeer.chats, false, true);
            if (!tLRPC$TL_contacts_resolvedPeer.chats.isEmpty()) {
                openChatOrProfileWith(null, tLRPC$TL_contacts_resolvedPeer.chats.get(0), baseFragment, 1, false);
            } else if (tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
            } else {
                openChatOrProfileWith(tLRPC$TL_contacts_resolvedPeer.users.get(0), null, baseFragment, i, false);
            }
        } else if (baseFragment.getParentActivity() == null) {
        } else {
            try {
                if (baseFragment instanceof ChatActivity) {
                    ((ChatActivity) baseFragment).shakeContent();
                }
                BulletinFactory.of(baseFragment).createErrorBulletin(LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound)).show();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$360(AlertDialog[] alertDialogArr, final int i, BaseFragment baseFragment) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda2
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.this.lambda$openByUserName$359(i, dialogInterface);
            }
        });
        baseFragment.showDialog(alertDialogArr[0]);
    }

    public /* synthetic */ void lambda$openByUserName$359(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void ensureMessagesLoaded(final long j, int i, final MessagesLoadedCallback messagesLoadedCallback) {
        int i2;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j, 0);
        } else {
            i2 = i;
        }
        final int generateClassGuid = ConnectionsManager.generateClassGuid();
        final long j2 = DialogObject.isChatDialog(j) ? -j : 0L;
        if (j2 != 0 && getMessagesController().getChat(Long.valueOf(j2)) == null) {
            final MessagesStorage messagesStorage = getMessagesStorage();
            final int i3 = i2;
            messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda138
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$ensureMessagesLoaded$362(messagesStorage, j2, j, i3, messagesLoadedCallback);
                }
            });
            return;
        }
        int i4 = AndroidUtilities.isTablet() ? 30 : 20;
        final int i5 = i4;
        final int i6 = i2;
        NotificationCenter.NotificationCenterDelegate notificationCenterDelegate = new NotificationCenter.NotificationCenterDelegate() { // from class: org.telegram.messenger.MessagesController.1
            {
                MessagesController.this = this;
            }

            @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
            public void didReceivedNotification(int i7, int i8, Object... objArr) {
                int i9 = NotificationCenter.messagesDidLoadWithoutProcess;
                if (i7 == i9 && ((Integer) objArr[0]).intValue() == generateClassGuid) {
                    int intValue = ((Integer) objArr[1]).intValue();
                    boolean booleanValue = ((Boolean) objArr[2]).booleanValue();
                    boolean booleanValue2 = ((Boolean) objArr[3]).booleanValue();
                    int intValue2 = ((Integer) objArr[4]).intValue();
                    int i10 = i5;
                    if (intValue < i10 / 2 && !booleanValue2 && booleanValue) {
                        int i11 = i6;
                        if (i11 != 0) {
                            MessagesController.this.loadMessagesInternal(j, 0L, false, i10, i11, 0, false, 0, generateClassGuid, 3, intValue2, 0, 0, -1, 0, 0, 0, false, 0, true, false, false);
                            return;
                        } else {
                            MessagesController.this.loadMessagesInternal(j, 0L, false, i10, i11, 0, false, 0, generateClassGuid, 2, intValue2, 0, 0, -1, 0, 0, 0, false, 0, true, false, false);
                            return;
                        }
                    }
                    MessagesController.this.getNotificationCenter().removeObserver(this, i9);
                    MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                    MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
                    if (messagesLoadedCallback2 == null) {
                        return;
                    }
                    messagesLoadedCallback2.onMessagesLoaded(booleanValue);
                    return;
                }
                int i12 = NotificationCenter.loadingMessagesFailed;
                if (i7 != i12 || ((Integer) objArr[0]).intValue() != generateClassGuid) {
                    return;
                }
                MessagesController.this.getNotificationCenter().removeObserver(this, i9);
                MessagesController.this.getNotificationCenter().removeObserver(this, i12);
                MessagesLoadedCallback messagesLoadedCallback3 = messagesLoadedCallback;
                if (messagesLoadedCallback3 == null) {
                    return;
                }
                messagesLoadedCallback3.onError();
            }
        };
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.messagesDidLoadWithoutProcess);
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.loadingMessagesFailed);
        if (i2 != 0) {
            loadMessagesInternal(j, 0L, true, i4, i2, 0, true, 0, generateClassGuid, 3, 0, 0, 0, -1, 0, 0, 0, false, 0, true, false, false);
        } else {
            loadMessagesInternal(j, 0L, true, i4, i2, 0, true, 0, generateClassGuid, 2, 0, 0, 0, -1, 0, 0, 0, false, 0, true, false, false);
        }
    }

    public /* synthetic */ void lambda$ensureMessagesLoaded$362(MessagesStorage messagesStorage, long j, final long j2, final int i, final MessagesLoadedCallback messagesLoadedCallback) {
        final TLRPC$Chat chat = messagesStorage.getChat(j);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda156
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$ensureMessagesLoaded$361(chat, j2, i, messagesLoadedCallback);
            }
        });
    }

    public /* synthetic */ void lambda$ensureMessagesLoaded$361(TLRPC$Chat tLRPC$Chat, long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        if (tLRPC$Chat != null) {
            getMessagesController().putChat(tLRPC$Chat, true);
            ensureMessagesLoaded(j, i, messagesLoadedCallback);
        } else if (messagesLoadedCallback == null) {
        } else {
            messagesLoadedCallback.onError();
        }
    }

    public int getChatPendingRequestsOnClosed(long j) {
        SharedPreferences sharedPreferences = this.mainPreferences;
        return sharedPreferences.getInt("chatPendingRequests" + j, 0);
    }

    public void setChatPendingRequestsOnClose(long j, int i) {
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("chatPendingRequests" + j, i).apply();
    }

    public void deleteMessagesRange(final long j, final long j2, final int i, final int i2, boolean z, final Runnable runnable) {
        TLRPC$TL_messages_deleteHistory tLRPC$TL_messages_deleteHistory = new TLRPC$TL_messages_deleteHistory();
        tLRPC$TL_messages_deleteHistory.peer = getInputPeer(j);
        tLRPC$TL_messages_deleteHistory.flags = 12;
        tLRPC$TL_messages_deleteHistory.min_date = i;
        tLRPC$TL_messages_deleteHistory.max_date = i2;
        tLRPC$TL_messages_deleteHistory.revoke = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda301
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteMessagesRange$366(j, i, i2, j2, runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$366(final long j, final int i, final int i2, final long j2, final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda73
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteMessagesRange$364(j, i, i2, j2, runnable);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                runnable.run();
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$364(long j, int i, int i2, final long j2, final Runnable runnable) {
        final ArrayList<Integer> cachedMessagesInRange = getMessagesStorage().getCachedMessagesInRange(j, i, i2);
        getMessagesStorage().markMessagesAsDeleted(j, cachedMessagesInRange, false, true, false);
        getMessagesStorage().updateDialogsWithDeletedMessages(j, 0L, cachedMessagesInRange, null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda123
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesRange$363(cachedMessagesInRange, j2, runnable);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$363(ArrayList arrayList, long j, Runnable runnable) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        runnable.run();
    }

    public void setChatReactions(final long j, int i, List<String> list) {
        final TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions = new TLRPC$TL_messages_setChatAvailableReactions();
        tLRPC$TL_messages_setChatAvailableReactions.peer = getInputPeer(-j);
        if (i == 2) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsNone();
        } else if (i == 0) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsAll();
        } else {
            TLRPC$TL_chatReactionsSome tLRPC$TL_chatReactionsSome = new TLRPC$TL_chatReactionsSome();
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = tLRPC$TL_chatReactionsSome;
            for (int i2 = 0; i2 < list.size(); i2++) {
                TLRPC$TL_reactionEmoji tLRPC$TL_reactionEmoji = new TLRPC$TL_reactionEmoji();
                tLRPC$TL_reactionEmoji.emoticon = list.get(i2);
                tLRPC$TL_chatReactionsSome.reactions.add(tLRPC$TL_reactionEmoji);
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda317
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChatReactions$368(j, tLRPC$TL_messages_setChatAvailableReactions, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChatReactions$368(final long j, TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            TLRPC$ChatFull chatFull = getChatFull(j);
            if (chatFull != null) {
                if (chatFull instanceof TLRPC$TL_chatFull) {
                    chatFull.flags |= 262144;
                }
                if (chatFull instanceof TLRPC$TL_channelFull) {
                    chatFull.flags |= 1073741824;
                }
                chatFull.available_reactions = tLRPC$TL_messages_setChatAvailableReactions.available_reactions;
                getMessagesStorage().updateChatInfo(chatFull, false);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda63
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChatReactions$367(j);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setChatReactions$367(long j) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(j), 0);
    }

    public void checkIsInChat(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, final IsInChatCheckedCallback isInChatCheckedCallback) {
        TLRPC$ChatParticipant tLRPC$ChatParticipant;
        ArrayList<TLRPC$ChatParticipant> arrayList;
        boolean z = false;
        if (tLRPC$Chat == null || tLRPC$User == null) {
            if (isInChatCheckedCallback == null) {
                return;
            }
            isInChatCheckedCallback.run(false, null, null);
        } else if (tLRPC$Chat.megagroup || ChatObject.isChannel(tLRPC$Chat)) {
            TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
            tLRPC$TL_channels_getParticipant.channel = getInputChannel(tLRPC$Chat.id);
            tLRPC$TL_channels_getParticipant.participant = getInputPeer(tLRPC$User);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda239
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$checkIsInChat$369(MessagesController.IsInChatCheckedCallback.this, tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$ChatFull chatFull = getChatFull(tLRPC$Chat.id);
            if (chatFull == null) {
                if (isInChatCheckedCallback == null) {
                    return;
                }
                isInChatCheckedCallback.run(false, null, null);
                return;
            }
            TLRPC$ChatParticipants tLRPC$ChatParticipants = chatFull.participants;
            if (tLRPC$ChatParticipants != null && (arrayList = tLRPC$ChatParticipants.participants) != null) {
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    tLRPC$ChatParticipant = chatFull.participants.participants.get(i);
                    if (tLRPC$ChatParticipant != null && tLRPC$ChatParticipant.user_id == tLRPC$User.id) {
                        break;
                    }
                }
            }
            tLRPC$ChatParticipant = null;
            if (isInChatCheckedCallback == null) {
                return;
            }
            if (tLRPC$ChatParticipant != null) {
                z = true;
            }
            TLRPC$ChatParticipants tLRPC$ChatParticipants2 = chatFull.participants;
            isInChatCheckedCallback.run(z, (tLRPC$ChatParticipants2 == null || tLRPC$ChatParticipants2.admin_id != tLRPC$User.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), null);
        }
    }

    public static /* synthetic */ void lambda$checkIsInChat$369(IsInChatCheckedCallback isInChatCheckedCallback, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (isInChatCheckedCallback != null) {
            String str = null;
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLObject instanceof TLRPC$TL_channels_channelParticipant ? ((TLRPC$TL_channels_channelParticipant) tLObject).participant : null;
            boolean z = tLRPC$TL_error == null && tLRPC$ChannelParticipant != null && !tLRPC$ChannelParticipant.left;
            TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$ChannelParticipant != null ? tLRPC$ChannelParticipant.admin_rights : null;
            if (tLRPC$ChannelParticipant != null) {
                str = tLRPC$ChannelParticipant.rank;
            }
            isInChatCheckedCallback.run(z, tLRPC$TL_chatAdminRights, str);
        }
    }

    public void updateEmojiStatusUntilUpdate(long j, TLRPC$EmojiStatus tLRPC$EmojiStatus) {
        if (tLRPC$EmojiStatus instanceof TLRPC$TL_emojiStatusUntil) {
            this.emojiStatusUntilValues.put(j, Integer.valueOf(((TLRPC$TL_emojiStatusUntil) tLRPC$EmojiStatus).until));
        } else if (!this.emojiStatusUntilValues.containsKey(j)) {
            return;
        } else {
            this.emojiStatusUntilValues.remove(j);
        }
        updateEmojiStatusUntil();
    }

    public void updateEmojiStatusUntil() {
        int intValue;
        int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
        Long l = null;
        int i = 0;
        while (i < this.emojiStatusUntilValues.size()) {
            if (this.emojiStatusUntilValues.valueAt(i).intValue() > currentTimeMillis) {
                l = Long.valueOf(Math.min(l == null ? Long.MAX_VALUE : l.longValue(), intValue - currentTimeMillis));
            } else {
                this.emojiStatusUntilValues.removeAt(i);
                i--;
            }
            i++;
        }
        if (l != null) {
            Long valueOf = Long.valueOf(l.longValue() + 2);
            long j = currentTimeMillis;
            if (valueOf.longValue() + j == this.recentEmojiStatusUpdateRunnableTime + this.recentEmojiStatusUpdateRunnableTimeout) {
                return;
            }
            AndroidUtilities.cancelRunOnUIThread(this.recentEmojiStatusUpdateRunnable);
            this.recentEmojiStatusUpdateRunnableTime = j;
            this.recentEmojiStatusUpdateRunnableTimeout = valueOf.longValue();
            Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda27
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateEmojiStatusUntil$370();
                }
            };
            this.recentEmojiStatusUpdateRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, valueOf.longValue() * 1000);
            return;
        }
        Runnable runnable2 = this.recentEmojiStatusUpdateRunnable;
        if (runnable2 == null) {
            return;
        }
        this.recentEmojiStatusUpdateRunnableTime = -1L;
        this.recentEmojiStatusUpdateRunnableTimeout = -1L;
        AndroidUtilities.cancelRunOnUIThread(runnable2);
    }

    public /* synthetic */ void lambda$updateEmojiStatusUntil$370() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_EMOJI_STATUS));
        updateEmojiStatusUntil();
    }

    public String getMutedString(long j, int i) {
        if (getMessagesController().isDialogMuted(j, i)) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int i2 = sharedPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, i), 0);
            return i2 >= getConnectionsManager().getCurrentTime() ? LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatTTLString(i2)) : LocaleController.getString(R.string.NotificationsMuted);
        }
        return LocaleController.getString(R.string.NotificationsUnmuted);
    }

    public int getDialogUnreadCount(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return 0;
        }
        int i = tLRPC$Dialog.unread_count;
        TLRPC$Chat chat = getChat(Long.valueOf(-tLRPC$Dialog.id));
        return (chat == null || !chat.forum) ? i : this.topicsController.getForumUnreadCount(-tLRPC$Dialog.id)[0];
    }
}

package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Insets;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.RecordingCanvas;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.RenderEffect;
import android.graphics.RenderNode;
import android.graphics.Shader;
import android.graphics.SurfaceTexture;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.provider.Settings;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.ClickableSpan;
import android.text.style.LineHeightSpan;
import android.text.style.URLSpan;
import android.transition.ChangeBounds;
import android.transition.Fade;
import android.transition.Transition;
import android.transition.TransitionManager;
import android.transition.TransitionSet;
import android.transition.TransitionValues;
import android.util.FloatProperty;
import android.util.Pair;
import android.util.Property;
import android.util.Range;
import android.util.SparseArray;
import android.view.ContextThemeWrapper;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.OrientationEventListener;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewPropertyAnimator;
import android.view.ViewTreeObserver;
import android.view.WindowInsets;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.view.animation.OvershootInterpolator;
import android.webkit.WebView;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.OverScroller;
import android.widget.Scroller;
import android.widget.Space;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ViewSwitcher;
import androidx.annotation.Keep;
import androidx.collection.ArrayMap;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.widget.NestedScrollView;
import androidx.dynamicanimation.animation.DynamicAnimation;
import androidx.dynamicanimation.animation.FloatValueHolder;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerEnd;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.analytics.AnalyticsListener;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import com.google.android.gms.vision.Frame;
import com.google.android.gms.vision.face.Face;
import com.google.android.gms.vision.face.FaceDetector;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.AnimationNotificationsLocker;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.Bitmaps;
import org.telegram.messenger.BotWebViewVibrationEffect;
import org.telegram.messenger.BringAppForegroundService;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DispatchQueue;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FileStreamLoadOperation;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsSettingsFacade;
import org.telegram.messenger.R;
import org.telegram.messenger.SecureDocument;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.TranslateController;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.camera.Size;
import org.telegram.messenger.video.VideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInlineResult;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatPhoto;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DocumentAttribute;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputDocument;
import org.telegram.tgnet.TLRPC$InputStickerSet;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$PageBlock;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$StickerSet;
import org.telegram.tgnet.TLRPC$TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_fileLocationToBeDeprecated;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_inputChatPhoto;
import org.telegram.tgnet.TLRPC$TL_inputPhoto;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionEmpty;
import org.telegram.tgnet.TLRPC$TL_messageActionUserUpdatedPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaEmpty;
import org.telegram.tgnet.TLRPC$TL_messageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_page;
import org.telegram.tgnet.TLRPC$TL_pageBlockAuthorDate;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photoStrippedSize;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_webDocument;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebDocument;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.PhotoPickerPhotoCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChooseSpeedLayout;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedFloat;
import org.telegram.ui.Components.AnimatedTextView;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BlurringShader;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.CaptionPhotoViewer;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.CheckBox;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.Crop.CropAreaView;
import org.telegram.ui.Components.Crop.CropTransform;
import org.telegram.ui.Components.Crop.CropView;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.FilterGLThread;
import org.telegram.ui.Components.FilterShaders;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.Forum.ForumUtilities;
import org.telegram.ui.Components.GestureDetector2;
import org.telegram.ui.Components.GroupedPhotosListView;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.ItemOptions;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.LoadingDrawable;
import org.telegram.ui.Components.MediaActivity;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.OptionsSpeedIconDrawable;
import org.telegram.ui.Components.OtherDocumentPlaceholderDrawable;
import org.telegram.ui.Components.Paint.Views.LPhotoPaintView;
import org.telegram.ui.Components.Paint.Views.MaskPaintView;
import org.telegram.ui.Components.Paint.Views.PaintCancelView;
import org.telegram.ui.Components.Paint.Views.PaintDoneView;
import org.telegram.ui.Components.Paint.Views.StickerCutOutBtn;
import org.telegram.ui.Components.Paint.Views.StickerMakerBackgroundView;
import org.telegram.ui.Components.Paint.Views.StickerMakerView;
import org.telegram.ui.Components.PaintingOverlay;
import org.telegram.ui.Components.PhotoCropView;
import org.telegram.ui.Components.PhotoFilterView;
import org.telegram.ui.Components.PhotoViewerWebView;
import org.telegram.ui.Components.PickerBottomLayoutViewer;
import org.telegram.ui.Components.PipVideoOverlay;
import org.telegram.ui.Components.PlayPauseDrawable;
import org.telegram.ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.QuoteSpan;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ScaleStateListAnimator;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
import org.telegram.ui.Components.SpeedIconDrawable;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.TextViewSwitcher;
import org.telegram.ui.Components.ThanosEffect;
import org.telegram.ui.Components.Tooltip;
import org.telegram.ui.Components.TranslateAlert2;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.VideoCompressButton;
import org.telegram.ui.Components.VideoEditTextureView;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.VideoPlayer;
import org.telegram.ui.Components.VideoPlayerSeekBar;
import org.telegram.ui.Components.VideoSeekPreviewImage;
import org.telegram.ui.Components.VideoTimelinePlayView;
import org.telegram.ui.Components.ViewHelper;
import org.telegram.ui.Components.spoilers.SpoilersTextView;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.Stories.DarkThemeResourceProvider;
import org.telegram.ui.Stories.recorder.KeyboardNotifier;
import org.webrtc.MediaStreamTrack;
@SuppressLint({"WrongConstant"})
/* loaded from: classes4.dex */
public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector2.OnGestureListener, GestureDetector2.OnDoubleTapListener {
    @SuppressLint({"StaticFieldLeak"})
    private static volatile PhotoViewer Instance;
    private static volatile PhotoViewer PipInstance;
    private static final Property<VideoPlayerControlFrameLayout, Float> VPC_PROGRESS;
    private static DecelerateInterpolator decelerateInterpolator;
    private static Drawable[] progressDrawables;
    private static Paint progressPaint;
    private boolean ALLOW_USE_SURFACE;
    public final Property<View, Float> FLASH_VIEW_VALUE;
    private int aboutToSwitchTo;
    private ActionBar actionBar;
    private AnimatorSet actionBarAnimator;
    private PhotoViewerActionBarContainer actionBarContainer;
    private Map<View, Boolean> actionBarItemsVisibility;
    private boolean actionBarWasShownBeforeByEnd;
    private Context activityContext;
    private TextView adButtonTextView;
    private FrameLayout adButtonView;
    private ActionBarMenuSubItem allMediaItem;
    private boolean allowOrder;
    private boolean allowShare;
    private boolean allowShowFullscreenButton;
    private float animateToMirror;
    private float animateToRotate;
    private float animateToScale;
    private float animateToX;
    private float animateToY;
    private ClippingImageView animatingImageView;
    private Runnable animationEndRunnable;
    private int animationInProgress;
    private long animationStartTime;
    private float animationValue;
    private float[][] animationValues;
    private boolean applying;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private boolean attachedToWindow;
    private long audioFramesSize;
    private float avatarStartProgress;
    private long avatarStartTime;
    private final ArrayList<TLRPC$Photo> avatarsArr;
    private long avatarsDialogId;
    private BackgroundDrawable backgroundDrawable;
    private Paint bitmapPaint;
    private volatile int bitrate;
    private Paint blackPaint;
    private final AnimatedFloat blurAlpha;
    private RectF blurBounds;
    private BlurringShader.BlurManager blurManager;
    private LinearGradient bottomFancyShadow;
    private Matrix bottomFancyShadowMatrix;
    private Paint bottomFancyShadowPaint;
    private FrameLayout bottomLayout;
    private LinearLayout btnLayout;
    private boolean canDragDown;
    private boolean canEditAvatar;
    private boolean canZoom;
    private ObjectAnimator captionAnimator;
    private FrameLayout captionContainer;
    private String captionDetectedLanguage;
    private CaptionPhotoViewer captionEdit;
    private FrameLayout captionEditContainer;
    public CharSequence captionForAllMedia;
    private boolean captionHwLayerEnabled;
    private CaptionScrollView captionScrollView;
    private CaptionTextViewSwitcher captionTextViewSwitcher;
    private boolean captionTranslated;
    private long captureFrameAtTime;
    private long captureFrameReadyAtTime;
    private BlurringShader.ThumbBlurer centerBlur;
    private ImageReceiver centerImage;
    private AnimatedFloat[] centerImageInsideBlur;
    private boolean centerImageIsVideo;
    private Matrix centerImageTransform;
    private boolean centerImageTransformLocked;
    private AnimatorSet changeModeAnimation;
    private TextureView changedTextureView;
    private boolean changingPage;
    private boolean changingTextureView;
    private CheckBox checkImageView;
    ChooseSpeedLayout chooseSpeedLayout;
    private int classGuid;
    private Path clipFancyShadows;
    private float clippingImageProgress;
    public boolean closePhotoAfterSelect;
    private VideoCompressButton compressItem;
    private volatile int compressionsCount;
    private FrameLayoutDrawer containerView;
    private PhotoCountView countView;
    private boolean cropInitied;
    private ImageView cropItem;
    private CropTransform cropTransform;
    private int currentAccount;
    private AnimatedFileDrawable currentAnimation;
    private ImageLocation currentAvatarLocation;
    private Bitmap currentBitmap;
    private TLRPC$BotInlineResult currentBotInlineResult;
    private long currentDialogId;
    private int currentEditMode;
    private ImageLocation currentFileLocation;
    private ImageLocation currentFileLocationVideo;
    private String[] currentFileNames;
    private String currentFilterQuery;
    private ReactionsLayoutInBubble.VisibleReaction currentFilterTag;
    private boolean currentFiltered;
    private String currentImageFaceKey;
    private int currentImageHasFace;
    private String currentImagePath;
    private int currentIndex;
    private AnimatorSet currentListViewAnimation;
    private Runnable currentLoadingVideoRunnable;
    private MessageObject currentMessageObject;
    private TLRPC$PageBlock currentPageBlock;
    private float currentPanTranslationY;
    private String currentPathObject;
    private PlaceProviderObject currentPlaceObject;
    private Uri currentPlayingVideoFile;
    private SecureDocument currentSecureDocument;
    private String currentSubtitle;
    private ImageReceiver.BitmapHolder currentThumb;
    private boolean currentVideoFinishedLoading;
    private float currentVideoSpeed;
    public Utilities.Callback2<String, TLRPC$InputDocument> customStickerHandler;
    private CharSequence customTitle;
    private BlurButton cutOutBtn;
    private MessagesController.DialogPhotos dialogPhotos;
    private boolean disableShowCheck;
    private boolean discardTap;
    private TextView docInfoTextView;
    private TextView docNameTextView;
    private TextView doneButtonFullWidth;
    private boolean doneButtonPressed;
    private boolean dontAutoPlay;
    private boolean dontChangeCaptionPosition;
    private boolean dontResetZoomOnFirstLayout;
    private boolean doubleTap;
    private boolean doubleTapEnabled;
    private float dragY;
    private boolean draggingDown;
    private boolean[] drawPressedDrawable;
    private ActionBarMenuItem editItem;
    private EditState editState;
    private boolean editing;
    private PickerBottomLayoutViewer editorDoneLayout;
    private boolean[] endReached;
    private long endTime;
    private BlurButton eraseBtn;
    private long estimatedDuration;
    private long estimatedSize;
    private ImageView exitFullscreenButton;
    private boolean fancyShadows;
    private boolean firstAnimationDelay;
    private boolean firstFrameRendered;
    private FirstFrameView firstFrameView;
    private AnimatorSet flashAnimator;
    private View flashView;
    boolean fromCamera;
    private ImageView[] fullscreenButton;
    private int fullscreenedByButton;
    private GestureDetector2 gestureDetector;
    private GroupedPhotosListView groupedPhotosListView;
    public boolean hasCaptionForAllMedia;
    private Runnable hideActionBarRunnable;
    private PlaceProviderObject hideAfterAnimation;
    private UndoView hintView;
    private Rect hitRect;
    private boolean ignoreDidSetImage;
    private RectF imageBounds;
    private Matrix imageBoundsMatrix;
    private float[] imageBoundsPoints;
    private AnimatorSet imageMoveAnimation;
    private final ArrayList<MessageObject> imagesArr;
    private final ArrayList<Object> imagesArrLocals;
    private final ArrayList<ImageLocation> imagesArrLocations;
    private final ArrayList<Long> imagesArrLocationsSizes;
    private final ArrayList<ImageLocation> imagesArrLocationsVideo;
    private final ArrayList<TLRPC$Message> imagesArrMessages;
    private final ArrayList<MessageObject> imagesArrTemp;
    private final SparseArray<MessageObject>[] imagesByIds;
    private final SparseArray<MessageObject>[] imagesByIdsTemp;
    private boolean inBubbleMode;
    private boolean inPreview;
    private VideoPlayer injectingVideoPlayer;
    private SurfaceTexture injectingVideoPlayerSurface;
    private float inlineOutAnimationProgress;
    private final Rect insets;
    private DecelerateInterpolator interpolator;
    private boolean invalidCoords;
    private boolean isActionBarVisible;
    private boolean isCurrentVideo;
    private boolean isDocumentsPicker;
    private boolean isEmbedVideo;
    private boolean isEvent;
    private boolean isFirstLoading;
    private volatile boolean isH264Video;
    private boolean isInline;
    private boolean isPhotosListViewVisible;
    private boolean isPlaying;
    private boolean isStreaming;
    private boolean isVisible;
    private boolean isVisibleOrAnimating;
    private LinearLayout itemsLayout;
    private boolean keepScreenOnFlagSet;
    private int keyboardSize;
    private long lastBufferedPositionCheck;
    private boolean lastCaptionTranslating;
    private String lastControlFrameDuration;
    private Bitmap lastFrameBitmap;
    private ImageView lastFrameImageView;
    private int lastImageId;
    private long lastPhotoSetTime;
    private long lastSaveTime;
    private CharSequence lastTitle;
    private BlurringShader.ThumbBlurer leftBlur;
    private MediaController.CropState leftCropState;
    private CropTransform leftCropTransform;
    private ImageReceiver leftImage;
    private boolean leftImageIsVideo;
    private PaintingOverlay leftPaintingOverlay;
    private Bulletin limitBulletin;
    private boolean loadInitialVideo;
    private boolean loadingMoreImages;
    Runnable longPressRunnable;
    float longPressX;
    private boolean manuallyPaused;
    private MaskPaintView maskPaintView;
    private boolean maskPaintViewEraser;
    private boolean maskPaintViewShuttingDown;
    private int maskPaintViewTouched;
    private StickersAlert masksAlert;
    private ActionBarMenuItem masksItem;
    private int maxSelectedPhotos;
    private float maxX;
    private float maxY;
    private ActionBarMenu menu;
    private ActionBarMenuItem menuItem;
    private OptionsSpeedIconDrawable menuItemIcon;
    private long mergeDialogId;
    private float minX;
    private float minY;
    private AnimatorSet miniProgressAnimator;
    private Runnable miniProgressShowRunnable;
    private RadialProgressView miniProgressView;
    private float mirror;
    private ImageView mirrorItem;
    private float moveStartX;
    private float moveStartY;
    private boolean moving;
    private ImageView muteItem;
    private boolean muteVideo;
    private View navigationBar;
    private int navigationBarHeight;
    private boolean needCaptionLayout;
    private long needCaptureFrameReadyAtTime;
    private boolean needSearchImageInArr;
    private boolean needShowOnReady;
    private Runnable onUserLeaveHintListener;
    private boolean openedFromProfile;
    private boolean openedFullScreenVideo;
    private boolean opennedFromMedia;
    private OrientationEventListener orientationEventListener;
    private volatile int originalBitrate;
    private volatile int originalHeight;
    private long originalSize;
    private volatile int originalWidth;
    private BlurButton outlineBtn;
    private boolean padImageForHorizontalInsets;
    private PageBlocksAdapter pageBlocksAdapter;
    private ImageView paintItem;
    private AnimatorSet paintKeyboardAnimator;
    private KeyboardNotifier paintKeyboardNotifier;
    private int paintViewTouched;
    private PaintingOverlay paintingOverlay;
    private Activity parentActivity;
    private ChatAttachAlert parentAlert;
    private ChatActivity parentChatActivity;
    private BaseFragment parentFragment;
    private PhotoCropView photoCropView;
    private PhotoFilterView photoFilterView;
    private LPhotoPaintView photoPaintView;
    private PhotoProgressView[] photoProgressViews;
    private PhotoViewerWebView photoViewerWebView;
    private CounterView photosCounterView;
    private FrameLayout pickerView;
    private ImageView pickerViewSendButton;
    private Drawable pickerViewSendDrawable;
    private float pinchCenterX;
    private float pinchCenterY;
    private float pinchStartAngle;
    private float pinchStartDistance;
    private float pinchStartRotate;
    private float pinchStartScale;
    private float pinchStartX;
    private float pinchStartY;
    private boolean pipAnimationInProgress;
    private boolean pipAvailable;
    private ActionBarMenuItem pipItem;
    private int[] pipPosition;
    private boolean pipVideoOverlayAnimateFlag;
    private PhotoViewerProvider placeProvider;
    private View playButtonAccessibilityOverlay;
    private boolean playerAutoStarted;
    private boolean playerInjected;
    private boolean playerLooping;
    private boolean playerWasPlaying;
    private boolean playerWasReady;
    private GradientDrawable[] pressedDrawable;
    private float[] pressedDrawableAlpha;
    private int prevOrientation;
    private int previousCompression;
    private boolean previousCropMirrored;
    private int previousCropOrientation;
    private float previousCropPh;
    private float previousCropPw;
    private float previousCropPx;
    private float previousCropPy;
    private float previousCropRotation;
    private float previousCropScale;
    private boolean previousHasTransform;
    private RadialProgressView progressView;
    private QualityChooseView qualityChooseView;
    private AnimatorSet qualityChooseViewAnimation;
    private PickerBottomLayoutViewer qualityPicker;
    private RenderNode renderNode;
    public TLRPC$Document replacedSticker;
    private boolean requestingPreview;
    private TextView resetButton;
    private Theme.ResourcesProvider resourcesProvider;
    private BlurButton restoreBtn;
    private volatile int resultHeight;
    private volatile int resultWidth;
    private BlurringShader.ThumbBlurer rightBlur;
    private MediaController.CropState rightCropState;
    private CropTransform rightCropTransform;
    private ImageReceiver rightImage;
    private boolean rightImageIsVideo;
    private PaintingOverlay rightPaintingOverlay;
    private float rotate;
    private ImageView rotateItem;
    private int rotationValue;
    private float savedRotation;
    private float savedScale;
    private SavedState savedState;
    private float savedTx;
    private float savedTy;
    private ArrayMap<String, SavedVideoPosition> savedVideoPositions;
    private float scale;
    private Scroller scroller;
    private final ArrayList<SecureDocument> secureDocuments;
    private float seekToProgressPending;
    private float seekToProgressPending2;
    private volatile int selectedCompression;
    private ArrayList<String> selectedEmojis;
    private ListAdapter selectedPhotosAdapter;
    private SelectedPhotosListView selectedPhotosListView;
    private ActionBarMenuItem sendItem;
    private int sendPhotoType;
    private ActionBarPopupWindow.ActionBarPopupWindowLayout sendPopupLayout;
    private ActionBarPopupWindow sendPopupWindow;
    private ImageUpdater.AvatarFor setAvatarFor;
    private Runnable setLoadingRunnable;
    private BlurringShader.StoryBlurDrawer shadowBlurer;
    private int sharedMediaType;
    private float shiftDp;
    private String shouldSavePositionForCurrentVideo;
    private String shouldSavePositionForCurrentVideoShortTerm;
    private PlaceProviderObject showAfterAnimation;
    private boolean shownControlsByEnd;
    private ImageReceiver sideImage;
    private boolean skipFirstBufferingProgress;
    public boolean skipLastFrameDraw;
    private int slideshowMessageId;
    private ActionBarPopupWindow.GapView speedGap;
    private ActionBarMenuSubItem speedItem;
    private int startOffset;
    private long startTime;
    private long startedPlayTime;
    public boolean stickerEmpty;
    public boolean stickerEmptySent;
    private StickerMakerBackgroundView stickerMakerBackgroundView;
    public StickerMakerView stickerMakerView;
    private boolean streamingAlertShown;
    private Paint surfaceBlackoutPaint;
    private TextureView.SurfaceTextureListener surfaceTextureListener;
    private int switchImageAfterAnimation;
    private Runnable switchToInlineRunnable;
    private boolean switchingInlineMode;
    private int switchingToIndex;
    private int switchingToMode;
    private int[] tempInt;
    private TextSelectionHelper.SimpleTextSelectionHelper textSelectionHelper;
    private ImageView textureImageView;
    private boolean textureUploaded;
    private Tooltip tooltip;
    private LinearGradient topFancyShadow;
    private Matrix topFancyShadowMatrix;
    private Paint topFancyShadowPaint;
    private long topicId;
    private int totalImagesCount;
    private int totalImagesCountMerge;
    private int touchSlop;
    private long transitionAnimationStartTime;
    private AnimationNotificationsLocker transitionNotificationLocker;
    private float translateY;
    private ValueAnimator translateYAnimator;
    private float translationX;
    private float translationY;
    private boolean tryStartRequestPreviewOnFinish;
    private ImageView tuneItem;
    private BlurButton undoBtn;
    private final Runnable updateContainerFlagsRunnable;
    private Runnable updateProgressRunnable;
    private boolean usedSurfaceView;
    private VelocityTracker velocityTracker;
    private TextView videoAvatarTooltip;
    private volatile boolean videoConvertSupported;
    private float videoCrossfadeAlpha;
    private long videoCrossfadeAlphaLastTime;
    private boolean videoCrossfadeStarted;
    private float videoCutEnd;
    private float videoCutStart;
    private float videoDuration;
    private VideoForwardDrawable videoForwardDrawable;
    private Bitmap videoFrameBitmap;
    private Paint videoFrameBitmapPaint;
    private int videoFramerate;
    private long videoFramesSize;
    private int videoHeight;
    private Runnable videoPlayRunnable;
    private VideoPlayer videoPlayer;
    private Animator videoPlayerControlAnimator;
    private VideoPlayerControlFrameLayout videoPlayerControlFrameLayout;
    private boolean videoPlayerControlVisible;
    private int[] videoPlayerCurrentTime;
    VideoPlayerRewinder videoPlayerRewinder;
    private VideoPlayerSeekBar videoPlayerSeekbar;
    private View videoPlayerSeekbarView;
    private SimpleTextView videoPlayerTime;
    private int[] videoPlayerTotalTime;
    private VideoSeekPreviewImage videoPreviewFrame;
    private AnimatorSet videoPreviewFrameAnimation;
    private MessageObject videoPreviewMessageObject;
    private boolean videoSizeSet;
    private SurfaceView videoSurfaceView;
    private TextureView videoTextureView;
    private ObjectAnimator videoTimelineAnimator;
    private VideoTimelinePlayView videoTimelineView;
    private FrameLayout videoTimelineViewContainer;
    private int videoWidth;
    private AlertDialog visibleDialog;
    private int waitingForDraw;
    private int waitingForFirstTextureUpload;
    private boolean wasCountViewShown;
    private boolean wasLayout;
    private boolean wasRotated;
    private WindowManager.LayoutParams windowLayoutParams;
    private FrameLayout windowView;
    private boolean zoomAnimation;
    private boolean zooming;

    /* loaded from: classes4.dex */
    public static class EmptyPhotoViewerProvider implements PhotoViewerProvider {
        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean allowCaption() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean allowSendingSubmenu() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canCaptureMorePhotos() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canEdit(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean canLoadMoreAvatars() {
            return PhotoViewerProvider.-CC.$default$canLoadMoreAvatars(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canReplace(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canScrollAway() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean cancelButtonPressed() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean closeKeyboard() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void deleteImageAtIndex(int i) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean forceAllInGroup() {
            return PhotoViewerProvider.-CC.$default$forceAllInGroup(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public String getDeleteMessageString() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public MessageObject getEditingMessageObject() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getPhotoIndex(int i) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getSelectedCount() {
            return 0;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public HashMap<Object, Object> getSelectedPhotos() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ArrayList<Object> getSelectedPhotosOrder() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getTotalImageCount() {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean isPhotoChecked(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean loadMore() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void needAddMorePhotos() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onApplyCaption(CharSequence charSequence) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onClose() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean onDeletePhoto(int i) {
            return PhotoViewerProvider.-CC.$default$onDeletePhoto(this, i);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onEditModeChanged(boolean z) {
            PhotoViewerProvider.-CC.$default$onEditModeChanged(this, z);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onOpen() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onPreClose() {
            PhotoViewerProvider.-CC.$default$onPreClose(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onPreOpen() {
            PhotoViewerProvider.-CC.$default$onPreOpen(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onReleasePlayerBeforeClose(int i) {
            PhotoViewerProvider.-CC.$default$onReleasePlayerBeforeClose(this, i);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void openPhotoForEdit(String str, String str2, boolean z) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void replaceButtonPressed(int i, VideoEditedInfo videoEditedInfo) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean scaleToFill() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int setPhotoChecked(int i, VideoEditedInfo videoEditedInfo) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int setPhotoUnchecked(Object obj) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void updatePhotoAtIndex(int i) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void willHidePhotoViewer() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
        }
    }

    /* loaded from: classes4.dex */
    public interface PageBlocksAdapter {
        TLRPC$PageBlock get(int i);

        List<TLRPC$PageBlock> getAll();

        CharSequence getCaption(int i);

        File getFile(int i);

        TLRPC$PhotoSize getFileLocation(TLObject tLObject, int[] iArr);

        String getFileName(int i);

        int getItemsCount();

        TLObject getMedia(int i);

        Object getParentObject();

        boolean isHardwarePlayer(int i);

        boolean isVideo(int i);

        void updateSlideshowCell(TLRPC$PageBlock tLRPC$PageBlock);
    }

    /* loaded from: classes4.dex */
    public interface PhotoViewerProvider {

        /* loaded from: classes4.dex */
        public final /* synthetic */ class -CC {
            public static boolean $default$canLoadMoreAvatars(PhotoViewerProvider photoViewerProvider) {
                return true;
            }

            public static boolean $default$forceAllInGroup(PhotoViewerProvider photoViewerProvider) {
                return false;
            }

            public static boolean $default$onDeletePhoto(PhotoViewerProvider photoViewerProvider, int i) {
                return true;
            }

            public static void $default$onEditModeChanged(PhotoViewerProvider photoViewerProvider, boolean z) {
            }

            public static void $default$onPreClose(PhotoViewerProvider photoViewerProvider) {
            }

            public static void $default$onPreOpen(PhotoViewerProvider photoViewerProvider) {
            }

            public static void $default$onReleasePlayerBeforeClose(PhotoViewerProvider photoViewerProvider, int i) {
            }
        }

        boolean allowCaption();

        boolean allowSendingSubmenu();

        boolean canCaptureMorePhotos();

        boolean canEdit(int i);

        boolean canLoadMoreAvatars();

        boolean canReplace(int i);

        boolean canScrollAway();

        boolean cancelButtonPressed();

        boolean closeKeyboard();

        void deleteImageAtIndex(int i);

        boolean forceAllInGroup();

        String getDeleteMessageString();

        MessageObject getEditingMessageObject();

        int getPhotoIndex(int i);

        PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z);

        int getSelectedCount();

        HashMap<Object, Object> getSelectedPhotos();

        ArrayList<Object> getSelectedPhotosOrder();

        ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i);

        int getTotalImageCount();

        boolean isPhotoChecked(int i);

        boolean loadMore();

        void needAddMorePhotos();

        void onApplyCaption(CharSequence charSequence);

        void onClose();

        boolean onDeletePhoto(int i);

        void onEditModeChanged(boolean z);

        void onOpen();

        void onPreClose();

        void onPreOpen();

        void onReleasePlayerBeforeClose(int i);

        void openPhotoForEdit(String str, String str2, boolean z);

        void replaceButtonPressed(int i, VideoEditedInfo videoEditedInfo);

        boolean scaleToFill();

        void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2);

        int setPhotoChecked(int i, VideoEditedInfo videoEditedInfo);

        int setPhotoUnchecked(Object obj);

        void updatePhotoAtIndex(int i);

        void willHidePhotoViewer();

        void willSwitchFromPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i);
    }

    /* loaded from: classes4.dex */
    public static class PlaceProviderObject {
        public ClippingImageView animatingImageView;
        public int animatingImageViewYOffset;
        public boolean canEdit;
        public int clipBottomAddition;
        public int clipTopAddition;
        public long dialogId;
        public ImageReceiver imageReceiver;
        public boolean isEvent;
        public View parentView;
        public int[] radius;
        public long size;
        public int starOffset;
        public ImageReceiver.BitmapHolder thumb;
        public int viewX;
        public int viewY;
        public float scale = 1.0f;
        public boolean allowTakeAnimation = true;
    }

    private boolean enableSwipeToPiP() {
        return false;
    }

    public static /* synthetic */ void lambda$sendPressed$51(DialogInterface dialogInterface, int i) {
    }

    public static /* synthetic */ void lambda$setParentActivity$20() {
    }

    public void onConfigurationChanged(Configuration configuration) {
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    public boolean onDoubleTapEvent(MotionEvent motionEvent) {
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onLongPress(MotionEvent motionEvent) {
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onShowPress(MotionEvent motionEvent) {
    }

    public static /* synthetic */ void access$16800(PhotoViewer photoViewer) {
        photoViewer.updateCaptionTranslated();
    }

    public /* synthetic */ void lambda$new$0() {
        toggleMiniProgressInternal(true);
    }

    public TextureView getVideoTextureView() {
        return this.videoTextureView;
    }

    public boolean isVisibleOrAnimating() {
        return this.isVisibleOrAnimating;
    }

    public SurfaceView getVideoSurfaceView() {
        return this.videoSurfaceView;
    }

    /* loaded from: classes4.dex */
    public static class PhotoViewerActionBarContainer extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
        private FrameLayout container;
        private boolean hasSubtitle;
        int lastHeight;
        private float rightPadding;
        private ValueAnimator rightPaddingAnimator;
        private AnimatorSet subtitleAnimator;
        AnimatedTextView subtitleTextView;
        private AnimatorSet titleAnimator;
        private FrameLayout titleLayout;
        SimpleTextView[] titleTextView;

        public PhotoViewerActionBarContainer(Context context) {
            super(context);
            FrameLayout frameLayout = new FrameLayout(context);
            this.container = frameLayout;
            frameLayout.setPadding(AndroidUtilities.dp((AndroidUtilities.isTablet() ? 80 : 72) - 16), 0, 0, 0);
            addView(this.container, LayoutHelper.createFrame(-1, -1, 119));
            FrameLayout frameLayout2 = new FrameLayout(this, context) { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.1
                @Override // android.widget.FrameLayout, android.view.View
                protected void onMeasure(int i, int i2) {
                    super.onMeasure(i, i2);
                    setPivotY(getMeasuredHeight());
                }
            };
            this.titleLayout = frameLayout2;
            frameLayout2.setPivotX(AndroidUtilities.dp(16.0f));
            this.titleLayout.setPadding(AndroidUtilities.dp(16.0f), 0, 0, 0);
            this.titleLayout.setClipToPadding(false);
            this.container.addView(this.titleLayout, LayoutHelper.createFrame(-1, -1, 119));
            this.titleTextView = new SimpleTextView[2];
            for (int i = 0; i < 2; i++) {
                this.titleTextView[i] = new SimpleTextView(context);
                this.titleTextView[i].setGravity(19);
                this.titleTextView[i].setTextColor(-1);
                this.titleTextView[i].setTextSize(20);
                this.titleTextView[i].setTypeface(AndroidUtilities.bold());
                this.titleTextView[i].setDrawablePadding(AndroidUtilities.dp(4.0f));
                this.titleTextView[i].setScrollNonFitText(true);
                this.titleLayout.addView(this.titleTextView[i], LayoutHelper.createFrame(-1, -2, 19));
            }
            AnimatedTextView animatedTextView = new AnimatedTextView(context, true, false, false);
            this.subtitleTextView = animatedTextView;
            animatedTextView.setAnimationProperties(0.4f, 0L, 320L, CubicBezierInterpolator.EASE_OUT_QUINT);
            this.subtitleTextView.setTextSize(AndroidUtilities.dp(14.0f));
            this.subtitleTextView.setGravity(19);
            this.subtitleTextView.setTextColor(-1);
            this.subtitleTextView.setEllipsizeByGradient(true);
            this.container.addView(this.subtitleTextView, LayoutHelper.createFrame(-1, 20.0f, 51, 16.0f, 0.0f, 0.0f, 0.0f));
        }

        public void setTextShadows(boolean z) {
            this.titleTextView[0].getPaint().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
            this.titleTextView[1].getPaint().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
            this.subtitleTextView.getDrawable().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
        }

        public void setTitle(CharSequence charSequence) {
            this.titleTextView[1].setAlpha(0.0f);
            this.titleTextView[1].setVisibility(8);
            if (!areStringsEqual(this.titleTextView[0].getText(), charSequence)) {
                this.titleTextView[0].resetScrolling();
            }
            this.titleTextView[0].setText(charSequence);
            this.titleTextView[0].setAlpha(1.0f);
            this.titleTextView[0].setTranslationX(0.0f);
            this.titleTextView[0].setTranslationY(0.0f);
        }

        private boolean areStringsEqual(CharSequence charSequence, CharSequence charSequence2) {
            if (charSequence == null && charSequence2 == null) {
                return true;
            }
            if ((charSequence == null) != (charSequence2 == null)) {
                return false;
            }
            return TextUtils.equals(charSequence.toString(), charSequence2.toString());
        }

        public void setTitleAnimated(CharSequence charSequence, boolean z, boolean z2) {
            if (areStringsEqual(this.titleTextView[0].getText(), charSequence)) {
                return;
            }
            AnimatorSet animatorSet = this.titleAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.titleAnimator = null;
            }
            SimpleTextView[] simpleTextViewArr = this.titleTextView;
            simpleTextViewArr[1].copyScrolling(simpleTextViewArr[0]);
            SimpleTextView[] simpleTextViewArr2 = this.titleTextView;
            simpleTextViewArr2[1].setText(simpleTextViewArr2[0].getText());
            this.titleTextView[1].setRightPadding((int) this.rightPadding);
            this.titleTextView[0].resetScrolling();
            this.titleTextView[0].setText(charSequence);
            float dp = AndroidUtilities.dp(8.0f) * (z2 ? 1 : -1);
            this.titleTextView[1].setTranslationX(0.0f);
            this.titleTextView[1].setTranslationY(0.0f);
            if (z) {
                this.titleTextView[0].setTranslationX(0.0f);
                this.titleTextView[0].setTranslationY(-dp);
            } else {
                this.titleTextView[0].setTranslationX(-dp);
                this.titleTextView[0].setTranslationY(0.0f);
            }
            this.titleTextView[0].setAlpha(0.0f);
            this.titleTextView[1].setAlpha(1.0f);
            this.titleTextView[0].setVisibility(0);
            this.titleTextView[1].setVisibility(0);
            ArrayList arrayList = new ArrayList();
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[1], View.ALPHA, 0.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[0], View.ALPHA, 1.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[1], z ? View.TRANSLATION_Y : View.TRANSLATION_X, dp));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[0], z ? View.TRANSLATION_Y : View.TRANSLATION_X, 0.0f));
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.titleAnimator = animatorSet2;
            animatorSet2.playTogether(arrayList);
            this.titleAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.2
                {
                    PhotoViewerActionBarContainer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (PhotoViewerActionBarContainer.this.titleAnimator == animator) {
                        PhotoViewerActionBarContainer.this.titleTextView[1].setVisibility(8);
                        PhotoViewerActionBarContainer.this.titleAnimator = null;
                    }
                }
            });
            this.titleAnimator.setDuration(320L);
            this.titleAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            this.titleAnimator.start();
        }

        public void setSubtitle(CharSequence charSequence) {
            setSubtitle(charSequence, true);
        }

        public void setSubtitle(CharSequence charSequence, boolean z) {
            boolean z2 = !TextUtils.isEmpty(charSequence);
            if (z2 != this.hasSubtitle) {
                this.hasSubtitle = z2;
                AnimatorSet animatorSet = this.subtitleAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                Point point = AndroidUtilities.displaySize;
                int dp = AndroidUtilities.dp((z2 ? 30 : 33) - (point.x > point.y ? 6 : 0));
                if (z) {
                    ArrayList arrayList = new ArrayList();
                    AnimatedTextView animatedTextView = this.subtitleTextView;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z2 ? 1.0f : 0.0f;
                    arrayList.add(ObjectAnimator.ofFloat(animatedTextView, property, fArr));
                    arrayList.add(ObjectAnimator.ofFloat(this.subtitleTextView, View.TRANSLATION_Y, dp));
                    FrameLayout frameLayout = this.titleLayout;
                    Property property2 = View.TRANSLATION_Y;
                    float[] fArr2 = new float[1];
                    fArr2[0] = z2 ? AndroidUtilities.dp(-12.0f) : 0.0f;
                    arrayList.add(ObjectAnimator.ofFloat(frameLayout, property2, fArr2));
                    FrameLayout frameLayout2 = this.titleLayout;
                    Property property3 = View.SCALE_X;
                    float[] fArr3 = new float[1];
                    fArr3[0] = z2 ? 0.87f : 1.0f;
                    arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property3, fArr3));
                    FrameLayout frameLayout3 = this.titleLayout;
                    Property property4 = View.SCALE_Y;
                    float[] fArr4 = new float[1];
                    fArr4[0] = z2 ? 0.87f : 1.0f;
                    arrayList.add(ObjectAnimator.ofFloat(frameLayout3, property4, fArr4));
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.subtitleAnimator = animatorSet2;
                    animatorSet2.playTogether(arrayList);
                    this.subtitleAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    this.subtitleAnimator.start();
                } else {
                    this.subtitleTextView.setAlpha(z2 ? 1.0f : 0.0f);
                    this.subtitleTextView.setTranslationY(dp);
                    this.titleLayout.setTranslationY(z2 ? AndroidUtilities.dp(-12.0f) : 0.0f);
                    this.titleLayout.setScaleX(z2 ? 0.87f : 1.0f);
                    this.titleLayout.setScaleY(z2 ? 0.87f : 1.0f);
                }
            }
            this.subtitleTextView.setText(charSequence, z);
        }

        public void updateOrientation() {
            this.hasSubtitle = !this.hasSubtitle;
            setSubtitle(this.subtitleTextView.getText(), false);
        }

        public void updateRightPadding(final float f, boolean z) {
            ValueAnimator valueAnimator = this.rightPaddingAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
                this.rightPaddingAnimator = null;
            }
            if (z) {
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.rightPadding, f);
                this.rightPaddingAnimator = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$PhotoViewerActionBarContainer$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        PhotoViewer.PhotoViewerActionBarContainer.this.lambda$updateRightPadding$0(f, valueAnimator2);
                    }
                });
                this.rightPaddingAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.3
                    {
                        PhotoViewerActionBarContainer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewerActionBarContainer.this.updateRightPadding(f, false);
                    }
                });
                this.rightPaddingAnimator.setDuration(320L);
                this.rightPaddingAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                this.rightPaddingAnimator.start();
                return;
            }
            this.rightPadding = f;
            this.titleTextView[0].setRightPadding((int) f);
            this.subtitleTextView.setRightPadding(f);
        }

        public /* synthetic */ void lambda$updateRightPadding$0(float f, ValueAnimator valueAnimator) {
            this.rightPadding = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            int i = (int) f;
            this.titleTextView[0].setRightPadding(i);
            this.titleTextView[1].setRightPadding(i);
            this.subtitleTextView.setRightPadding(f);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i3 = Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0;
            int i4 = this.lastHeight;
            int i5 = AndroidUtilities.displaySize.y;
            if (i4 != i5) {
                this.lastHeight = i5;
                updateOrientation();
            }
            this.container.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(size2 - i3, 1073741824));
            setMeasuredDimension(size, size2);
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            this.container.layout(0, Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0, i3 - i, i4 - i2);
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(int i, int i2, Object... objArr) {
            if (i == NotificationCenter.emojiLoaded) {
                this.titleTextView[0].invalidate();
                this.titleTextView[1].invalidate();
                this.subtitleTextView.invalidate();
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        }
    }

    /* loaded from: classes4.dex */
    public static class PhotoCountView extends View {
        Paint backgroundPaint;
        StaticLayout center;
        float centerTop;
        float centerWidth;
        AnimatedTextView.AnimatedTextDrawable left;
        private String lng;
        private int marginTop;
        private boolean nextNotAnimate;
        TextPaint paint;
        AnimatedTextView.AnimatedTextDrawable right;
        private AnimatedFloat showT;
        private boolean shown;

        public PhotoCountView(Context context) {
            super(context);
            this.backgroundPaint = new Paint(1);
            this.paint = new TextPaint(1);
            this.shown = false;
            CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
            this.showT = new AnimatedFloat(this, 0L, 350L, cubicBezierInterpolator);
            this.backgroundPaint.setColor(2130706432);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = new AnimatedTextView.AnimatedTextDrawable(false, true, true);
            this.left = animatedTextDrawable;
            animatedTextDrawable.setAnimationProperties(0.3f, 0L, 320L, cubicBezierInterpolator);
            this.left.setTextColor(-1);
            this.left.setTextSize(AndroidUtilities.dp(14.0f));
            this.left.setTypeface(AndroidUtilities.bold());
            this.left.setCallback(this);
            this.left.setText("0");
            this.left.setOverrideFullWidth(AndroidUtilities.displaySize.x);
            this.paint.setColor(-1);
            this.paint.setTextSize(AndroidUtilities.dp(14.0f));
            this.paint.setTypeface(AndroidUtilities.bold());
            setCenterText();
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable2 = new AnimatedTextView.AnimatedTextDrawable(false, true, true);
            this.right = animatedTextDrawable2;
            animatedTextDrawable2.setAnimationProperties(0.3f, 0L, 320L, cubicBezierInterpolator);
            this.right.setTextColor(-1);
            this.right.setTextSize(AndroidUtilities.dp(14.0f));
            this.right.setTypeface(AndroidUtilities.bold());
            this.right.setCallback(this);
            this.right.setText("0");
            this.right.setOverrideFullWidth(AndroidUtilities.displaySize.x);
        }

        private void setCenterText() {
            StaticLayout staticLayout = new StaticLayout(getOf(), this.paint, AndroidUtilities.dp(200.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
            this.center = staticLayout;
            if (staticLayout.getLineCount() >= 1) {
                this.centerWidth = this.center.getLineWidth(0);
                this.centerTop = this.center.getLineDescent(0);
                return;
            }
            this.centerWidth = 0.0f;
            this.centerTop = 0.0f;
        }

        private String getOf() {
            this.lng = LocaleController.getInstance().getCurrentLocaleInfo().shortName;
            return LocaleController.getString("Of").replace("%1$d", "").replace("%2$d", "");
        }

        public void set(int i, int i2) {
            set(i, i2, true);
        }

        public void set(int i, int i2, boolean z) {
            boolean z2 = false;
            int max = Math.max(0, i);
            int max2 = Math.max(max, i2);
            if (LocaleController.getInstance().getCurrentLocaleInfo() != null && !TextUtils.equals(this.lng, LocaleController.getInstance().getCurrentLocaleInfo().shortName)) {
                setCenterText();
            }
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = this.left;
            Object[] objArr = new Object[1];
            objArr[0] = Integer.valueOf(LocaleController.isRTL ? max2 : max);
            animatedTextDrawable.setText(String.format("%d", objArr), (!z || this.nextNotAnimate || LocaleController.isRTL) ? false : true);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable2 = this.right;
            Object[] objArr2 = new Object[1];
            if (!LocaleController.isRTL) {
                max = max2;
            }
            objArr2[0] = Integer.valueOf(max);
            String format = String.format("%d", objArr2);
            if (z && !this.nextNotAnimate && !LocaleController.isRTL) {
                z2 = true;
            }
            animatedTextDrawable2.setText(format, z2);
            this.nextNotAnimate = !z;
        }

        @Override // android.view.View
        protected boolean verifyDrawable(Drawable drawable) {
            return this.left == drawable || this.right == drawable || super.verifyDrawable(drawable);
        }

        public void updateShow(boolean z, boolean z2) {
            if (this.shown != z) {
                this.shown = z;
                if (!z) {
                    this.nextNotAnimate = true;
                }
                if (!z2) {
                    this.showT.set(z ? 1.0f : 0.0f, true);
                }
                invalidate();
            }
        }

        @Override // android.view.View
        public boolean isShown() {
            return this.shown;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            float f = this.showT.set(this.shown ? 1.0f : 0.0f);
            if (f <= 0.0f) {
                return;
            }
            float currentWidth = this.left.getCurrentWidth() + this.centerWidth + this.right.getCurrentWidth() + AndroidUtilities.dp(18.0f);
            float f2 = this.marginTop + ((1.0f - f) * (-AndroidUtilities.dp(8.0f)));
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set((getWidth() - currentWidth) / 2.0f, AndroidUtilities.dpf2(10.0f) + f2, (getWidth() + currentWidth) / 2.0f, AndroidUtilities.dpf2(33.0f) + f2);
            int alpha = this.backgroundPaint.getAlpha();
            this.backgroundPaint.setAlpha((int) (alpha * f));
            canvas.drawRoundRect(rectF, AndroidUtilities.dpf2(12.0f), AndroidUtilities.dpf2(12.0f), this.backgroundPaint);
            this.backgroundPaint.setAlpha(alpha);
            canvas.save();
            canvas.translate(((getWidth() - currentWidth) / 2.0f) + AndroidUtilities.dp(9.0f), f2 + AndroidUtilities.dp(10.0f));
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = this.left;
            animatedTextDrawable.setBounds(0, 0, (int) animatedTextDrawable.getCurrentWidth(), AndroidUtilities.dp(23.0f));
            int i = (int) (f * 255.0f);
            this.left.setAlpha(i);
            this.left.draw(canvas);
            canvas.translate(this.left.getCurrentWidth(), 0.0f);
            canvas.save();
            canvas.translate((-(this.center.getWidth() - this.centerWidth)) / 2.0f, ((AndroidUtilities.dp(23.0f) - this.center.getHeight()) + (this.centerTop / 2.0f)) / 2.0f);
            this.paint.setAlpha(i);
            this.center.draw(canvas);
            canvas.restore();
            canvas.translate(this.centerWidth, 0.0f);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable2 = this.right;
            animatedTextDrawable2.setBounds(0, 0, (int) animatedTextDrawable2.getCurrentWidth(), AndroidUtilities.dp(23.0f));
            this.right.setAlpha(i);
            this.right.draw(canvas);
            canvas.restore();
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            int size = View.MeasureSpec.getSize(i);
            this.marginTop = ActionBar.getCurrentActionBarHeight() + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
            this.left.setOverrideFullWidth(size);
            this.right.setOverrideFullWidth(size);
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(this.marginTop + AndroidUtilities.dp(43.0f), 1073741824));
        }
    }

    public void addPhoto(MessageObject messageObject, int i) {
        if (i != this.classGuid) {
            return;
        }
        if (this.imagesByIds[0].indexOfKey(messageObject.getId()) < 0) {
            if (this.opennedFromMedia) {
                this.imagesArr.add(messageObject);
            } else {
                this.imagesArr.add(0, messageObject);
            }
            this.imagesByIds[0].put(messageObject.getId(), messageObject);
        }
        this.endReached[0] = this.imagesArr.size() == this.totalImagesCount;
        setImages();
    }

    public int getClassGuid() {
        return this.classGuid;
    }

    public void setCaption(CharSequence charSequence) {
        this.hasCaptionForAllMedia = true;
        this.captionForAllMedia = charSequence;
        setCurrentCaption(null, charSequence, false, false);
        updateCaptionTextForCurrentPhoto(null);
    }

    public void setAvatarFor(ImageUpdater.AvatarFor avatarFor) {
        int i;
        String str;
        TLRPC$User tLRPC$User;
        this.setAvatarFor = avatarFor;
        if (this.sendPhotoType == 1) {
            if (useFullWidthSendButton()) {
                this.doneButtonFullWidth.setVisibility(0);
                this.pickerViewSendButton.setVisibility(8);
            } else {
                this.pickerViewSendButton.setVisibility(0);
                this.doneButtonFullWidth.setVisibility(8);
            }
            if (avatarFor != null && (tLRPC$User = avatarFor.fromObject) != null && avatarFor.type == 1 && this.setAvatarFor.self) {
                if (avatarFor.isVideo) {
                    this.photoCropView.setSubtitle(LocaleController.formatString("SetSuggestedVideoTooltip", R.string.SetSuggestedVideoTooltip, tLRPC$User.first_name));
                } else {
                    this.photoCropView.setSubtitle(LocaleController.formatString("SetSuggestedPhotoTooltip", R.string.SetSuggestedPhotoTooltip, tLRPC$User.first_name));
                }
            } else {
                this.photoCropView.setSubtitle(null);
            }
        }
        if (avatarFor != null) {
            if (avatarFor.type == 2) {
                if (avatarFor.isVideo) {
                    i = R.string.SuggestVideo;
                    str = "SuggestVideo";
                } else {
                    i = R.string.SuggestPhoto;
                    str = "SuggestPhoto";
                }
                setTitle(LocaleController.getString(str, i));
            }
            if (avatarFor.isVideo) {
                this.videoAvatarTooltip.setText(LocaleController.getString("SetCover", R.string.SetCover));
            }
            this.actionBar.setBackground(null);
            if (Build.VERSION.SDK_INT >= 21) {
                this.actionBar.setElevation(2.0f);
            }
        }
    }

    public boolean useFullWidthSendButton() {
        ImageUpdater.AvatarFor avatarFor = this.setAvatarFor;
        return (avatarFor == null || !avatarFor.self || avatarFor.isVideo) ? false : true;
    }

    /* loaded from: classes4.dex */
    public static class SavedVideoPosition {
        public final float position;
        public final long timestamp;

        public SavedVideoPosition(float f, long j) {
            this.position = f;
            this.timestamp = j;
        }
    }

    public void onLinkClick(ClickableSpan clickableSpan, TextView textView) {
        if (textView != null && (clickableSpan instanceof URLSpan)) {
            String url = ((URLSpan) clickableSpan).getURL();
            if (url.startsWith(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                if (this.videoPlayer == null || this.currentMessageObject == null) {
                    return;
                }
                int intValue = Utilities.parseInt((CharSequence) url).intValue();
                if (this.videoPlayer.getDuration() == -9223372036854775807L) {
                    this.seekToProgressPending = intValue / ((float) this.currentMessageObject.getDuration());
                    return;
                }
                long j = intValue * 1000;
                this.videoPlayer.seekTo(j);
                this.videoPlayerSeekbar.setProgress(((float) j) / ((float) this.videoPlayer.getDuration()), true);
                this.videoPlayerSeekbarView.invalidate();
                return;
            } else if (url.startsWith("#")) {
                if (this.parentActivity instanceof LaunchActivity) {
                    DialogsActivity dialogsActivity = new DialogsActivity(null);
                    dialogsActivity.setSearchString(url);
                    ((LaunchActivity) this.parentActivity).presentFragment(dialogsActivity, false, true);
                    closePhoto(false, false);
                    return;
                }
                return;
            } else if (this.parentChatActivity != null && ((clickableSpan instanceof URLSpanReplacement) || AndroidUtilities.shouldShowUrlInAlert(url))) {
                AlertsCreator.showOpenUrlAlert(this.parentChatActivity, url, true, true);
                return;
            } else {
                clickableSpan.onClick(textView);
                return;
            }
        }
        clickableSpan.onClick(textView);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:1|(8:15|16|(1:5)(1:14)|6|7|8|9|10)|3|(0)(0)|6|7|8|9|10) */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0036  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x003e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onLinkLongPress(final URLSpan uRLSpan, final TextView textView, final Runnable runnable) {
        final int parseInt;
        BottomSheet.Builder builder = new BottomSheet.Builder(this.parentActivity, false, this.resourcesProvider, -14933463);
        if (uRLSpan.getURL().startsWith("video?")) {
            try {
                parseInt = Integer.parseInt(uRLSpan.getURL().substring(uRLSpan.getURL().indexOf(63) + 1));
            } catch (Throwable unused) {
            }
            if (parseInt < 0) {
                builder.setTitle(AndroidUtilities.formatDuration(parseInt, false));
            } else {
                builder.setTitle(uRLSpan.getURL());
            }
            builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda20
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    PhotoViewer.this.lambda$onLinkLongPress$1(uRLSpan, textView, parseInt, dialogInterface, i);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda23
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    runnable.run();
                }
            });
            BottomSheet create = builder.create();
            create.scrollNavBar = true;
            create.show();
            this.containerView.performHapticFeedback(0, 2);
            create.setItemColor(0, -1, -1);
            create.setItemColor(1, -1, -1);
            create.setBackgroundColor(-14933463);
            create.setTitleColor(-7697782);
            create.setCalcMandatoryInsets(true);
            AndroidUtilities.setNavigationBarColor(create.getWindow(), -14933463, false);
            AndroidUtilities.setLightNavigationBar(create.getWindow(), false);
            create.scrollNavBar = true;
        }
        parseInt = -1;
        if (parseInt < 0) {
        }
        builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda20
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                PhotoViewer.this.lambda$onLinkLongPress$1(uRLSpan, textView, parseInt, dialogInterface, i);
            }
        });
        builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda23
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                runnable.run();
            }
        });
        BottomSheet create2 = builder.create();
        create2.scrollNavBar = true;
        create2.show();
        this.containerView.performHapticFeedback(0, 2);
        create2.setItemColor(0, -1, -1);
        create2.setItemColor(1, -1, -1);
        create2.setBackgroundColor(-14933463);
        create2.setTitleColor(-7697782);
        create2.setCalcMandatoryInsets(true);
        AndroidUtilities.setNavigationBarColor(create2.getWindow(), -14933463, false);
        AndroidUtilities.setLightNavigationBar(create2.getWindow(), false);
        create2.scrollNavBar = true;
    }

    /* JADX WARN: Removed duplicated region for block: B:117:0x0102  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x010b  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x013b  */
    /* JADX WARN: Removed duplicated region for block: B:131:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$onLinkLongPress$1(URLSpan uRLSpan, TextView textView, int i, DialogInterface dialogInterface, int i2) {
        MessageObject messageObject;
        MessageObject messageObject2;
        String string;
        if (i2 == 0) {
            onLinkClick(uRLSpan, textView);
            return;
        }
        boolean z = true;
        if (i2 != 1) {
            return;
        }
        String url = uRLSpan.getURL();
        if (url.startsWith("mailto:")) {
            url = url.substring(7);
        } else if (url.startsWith("tel:")) {
            url = url.substring(4);
            AndroidUtilities.addToClipboard(url);
            if (!z) {
                string = LocaleController.getString("PhoneCopied", R.string.PhoneCopied);
            } else if (url.startsWith("#")) {
                string = LocaleController.getString("HashtagCopied", R.string.HashtagCopied);
            } else if (url.startsWith("@")) {
                string = LocaleController.getString("UsernameCopied", R.string.UsernameCopied);
            } else {
                string = LocaleController.getString("LinkCopied", R.string.LinkCopied);
            }
            if (AndroidUtilities.shouldShowClipboardToast()) {
                return;
            }
            BulletinFactory.of(this.containerView, this.resourcesProvider).createSimpleBulletin(R.raw.voip_invite, string).show();
            return;
        } else if (i >= 0 && (messageObject = this.currentMessageObject) != null && !messageObject.scheduled) {
            if (!messageObject.isVideo() && !this.currentMessageObject.isRoundVideo() && !this.currentMessageObject.isVoice() && !this.currentMessageObject.isMusic()) {
                z = false;
            }
            if (!z && (messageObject2 = this.currentMessageObject.replyMessageObject) != null) {
                messageObject = messageObject2;
            }
            long dialogId = messageObject.getDialogId();
            int id = messageObject.getId();
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader != null) {
                TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer;
                if (tLRPC$Peer != null) {
                    dialogId = MessageObject.getPeerId(tLRPC$Peer);
                    id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                } else {
                    TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer2 != null) {
                        dialogId = MessageObject.getPeerId(tLRPC$Peer2);
                        id = messageObject.messageOwner.fwd_from.channel_post;
                    }
                }
            }
            if (DialogObject.isChatDialog(dialogId)) {
                String publicUsername = ChatObject.getPublicUsername(MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId)));
                if (publicUsername != null) {
                    url = "https://t.me/" + publicUsername + "/" + id + "?t=" + i;
                }
            } else {
                TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                String publicUsername2 = UserObject.getPublicUsername(user);
                if (user != null && publicUsername2 != null) {
                    url = "https://t.me/" + publicUsername2 + "/" + id + "?t=" + i;
                }
            }
        }
        z = false;
        AndroidUtilities.addToClipboard(url);
        if (!z) {
        }
        if (AndroidUtilities.shouldShowClipboardToast()) {
        }
    }

    public void cancelFlashAnimations() {
        View view = this.flashView;
        if (view != null) {
            view.animate().setListener(null).cancel();
            this.flashView.setAlpha(0.0f);
        }
        AnimatorSet animatorSet = this.flashAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.flashAnimator = null;
        }
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.cancelThumbAnimation();
        }
    }

    public void cancelVideoPlayRunnable() {
        Runnable runnable = this.videoPlayRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.videoPlayRunnable = null;
        }
    }

    public long getCurrentVideoPosition() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
            return this.photoViewerWebView.getCurrentPosition();
        }
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null) {
            return 0L;
        }
        return videoPlayer.getCurrentPosition();
    }

    public long getVideoDuration() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
            return this.photoViewerWebView.getVideoDuration();
        }
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null) {
            return 0L;
        }
        return videoPlayer.getDuration();
    }

    public void seekVideoOrWebTo(long j) {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
            this.photoViewerWebView.seekTo(j);
        } else {
            VideoPlayer videoPlayer = this.videoPlayer;
            if (videoPlayer != null) {
                videoPlayer.seekTo(j);
            }
        }
        updateVideoPlayerTime();
    }

    public boolean isVideoPlaying() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
            return this.photoViewerWebView.isPlaying();
        }
        VideoPlayer videoPlayer = this.videoPlayer;
        return videoPlayer != null && videoPlayer.isPlaying();
    }

    /* loaded from: classes4.dex */
    public class 5 implements Runnable {
        5() {
            PhotoViewer.this = r1;
        }

        @Override // java.lang.Runnable
        public void run() {
            float f;
            if (PhotoViewer.this.videoPlayer != null || (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable())) {
                float f2 = 0.0f;
                if (PhotoViewer.this.isCurrentVideo) {
                    if (!PhotoViewer.this.videoTimelineView.isDragging()) {
                        float currentVideoPosition = ((float) PhotoViewer.this.getCurrentVideoPosition()) / ((float) PhotoViewer.this.getVideoDuration());
                        if (!PhotoViewer.this.shownControlsByEnd || PhotoViewer.this.actionBarWasShownBeforeByEnd) {
                            f2 = currentVideoPosition;
                        }
                        if (PhotoViewer.this.inPreview || (PhotoViewer.this.currentEditMode == 0 && PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 0)) {
                            if (PhotoViewer.this.sendPhotoType != 1) {
                                PhotoViewer.this.videoTimelineView.setProgress(f2);
                            }
                        } else if (f2 >= PhotoViewer.this.videoTimelineView.getRightProgress()) {
                            PhotoViewer.this.videoTimelineView.setProgress(PhotoViewer.this.videoTimelineView.getLeftProgress());
                            PhotoViewer.this.videoPlayer.seekTo((int) (PhotoViewer.this.videoTimelineView.getLeftProgress() * ((float) PhotoViewer.this.getVideoDuration())));
                            PhotoViewer.this.manuallyPaused = false;
                            PhotoViewer.this.cancelVideoPlayRunnable();
                            if (PhotoViewer.this.muteVideo || PhotoViewer.this.sendPhotoType == 1 || PhotoViewer.this.currentEditMode != 0 || PhotoViewer.this.switchingToMode > 0) {
                                PhotoViewer.this.playVideoOrWeb();
                            } else {
                                PhotoViewer.this.pauseVideoOrWeb();
                            }
                            PhotoViewer.this.containerView.invalidate();
                        } else {
                            PhotoViewer.this.videoTimelineView.setProgress(f2);
                        }
                        PhotoViewer.this.updateVideoPlayerTime();
                    }
                } else {
                    final float currentVideoPosition2 = ((float) PhotoViewer.this.getCurrentVideoPosition()) / ((float) PhotoViewer.this.getVideoDuration());
                    if (PhotoViewer.this.shownControlsByEnd && !PhotoViewer.this.actionBarWasShownBeforeByEnd) {
                        currentVideoPosition2 = 0.0f;
                    }
                    if (PhotoViewer.this.currentVideoFinishedLoading) {
                        f = 1.0f;
                    } else {
                        long elapsedRealtime = SystemClock.elapsedRealtime();
                        if (Math.abs(elapsedRealtime - PhotoViewer.this.lastBufferedPositionCheck) >= 500) {
                            if (PhotoViewer.this.photoViewerWebView == null || !PhotoViewer.this.photoViewerWebView.isControllable()) {
                                if (PhotoViewer.this.isStreaming) {
                                    f = FileLoader.getInstance(PhotoViewer.this.currentAccount).getBufferedProgressFromPosition(PhotoViewer.this.seekToProgressPending != 0.0f ? PhotoViewer.this.seekToProgressPending : currentVideoPosition2, PhotoViewer.this.currentFileNames[0]);
                                } else {
                                    f = 1.0f;
                                }
                            } else {
                                f = PhotoViewer.this.photoViewerWebView.getBufferedPosition();
                            }
                            PhotoViewer.this.lastBufferedPositionCheck = elapsedRealtime;
                        } else {
                            f = -1.0f;
                        }
                    }
                    if (PhotoViewer.this.inPreview || PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 0) {
                        if (PhotoViewer.this.seekToProgressPending == 0.0f) {
                            PhotoViewer photoViewer = PhotoViewer.this;
                            VideoPlayerRewinder videoPlayerRewinder = photoViewer.videoPlayerRewinder;
                            if (videoPlayerRewinder.rewindCount == 0 || !videoPlayerRewinder.rewindByBackSeek) {
                                photoViewer.videoPlayerSeekbar.setProgress(currentVideoPosition2, false);
                            }
                        }
                        if (f != -1.0f) {
                            PhotoViewer.this.videoPlayerSeekbar.setBufferedProgress(f);
                            PipVideoOverlay.setBufferedProgress(f);
                        }
                    } else if (currentVideoPosition2 >= PhotoViewer.this.videoTimelineView.getRightProgress()) {
                        PhotoViewer.this.manuallyPaused = false;
                        PhotoViewer.this.pauseVideoOrWeb();
                        PhotoViewer.this.videoPlayerSeekbar.setProgress(0.0f);
                        PhotoViewer photoViewer2 = PhotoViewer.this;
                        photoViewer2.seekVideoOrWebTo((int) (photoViewer2.videoTimelineView.getLeftProgress() * ((float) PhotoViewer.this.getVideoDuration())));
                        PhotoViewer.this.containerView.invalidate();
                    } else {
                        float leftProgress = currentVideoPosition2 - PhotoViewer.this.videoTimelineView.getLeftProgress();
                        if (leftProgress < 0.0f) {
                            leftProgress = 0.0f;
                        }
                        currentVideoPosition2 = leftProgress / (PhotoViewer.this.videoTimelineView.getRightProgress() - PhotoViewer.this.videoTimelineView.getLeftProgress());
                        if (currentVideoPosition2 > 1.0f) {
                            currentVideoPosition2 = 1.0f;
                        }
                        PhotoViewer.this.videoPlayerSeekbar.setProgress(currentVideoPosition2);
                    }
                    PhotoViewer.this.videoPlayerSeekbarView.invalidate();
                    if (PhotoViewer.this.shouldSavePositionForCurrentVideo != null && currentVideoPosition2 >= 0.0f && SystemClock.elapsedRealtime() - PhotoViewer.this.lastSaveTime >= 1000) {
                        String unused = PhotoViewer.this.shouldSavePositionForCurrentVideo;
                        PhotoViewer.this.lastSaveTime = SystemClock.elapsedRealtime();
                        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$5$$ExternalSyntheticLambda0
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.5.this.lambda$run$0(currentVideoPosition2);
                            }
                        });
                    }
                    PhotoViewer.this.updateVideoPlayerTime();
                }
            }
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.updateAlpha();
            }
            if (PhotoViewer.this.isPlaying) {
                AndroidUtilities.runOnUIThread(PhotoViewer.this.updateProgressRunnable, 17L);
            }
        }

        public /* synthetic */ void lambda$run$0(float f) {
            ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).edit().putFloat(PhotoViewer.this.shouldSavePositionForCurrentVideo, f).commit();
        }
    }

    public void checkChangedTextureView(boolean z) {
        if (z) {
            TextureView textureView = this.changedTextureView;
            if (textureView == null) {
                return;
            }
            textureView.getViewTreeObserver().addOnPreDrawListener(new 8());
            this.changedTextureView.invalidate();
        } else if (this.waitingForFirstTextureUpload == 2) {
            ImageView imageView = this.textureImageView;
            if (imageView != null) {
                imageView.setVisibility(4);
                this.textureImageView.setImageDrawable(null);
                Bitmap bitmap = this.currentBitmap;
                if (bitmap != null) {
                    bitmap.recycle();
                    this.currentBitmap = null;
                }
            }
            this.switchingInlineMode = false;
            if (Build.VERSION.SDK_INT >= 21) {
                final View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
                if (aspectRatioFrameLayout == null) {
                    return;
                }
                aspectRatioFrameLayout.getLocationInWindow(this.pipPosition);
                int[] iArr = this.pipPosition;
                iArr[1] = (int) (iArr[1] - this.containerView.getTranslationY());
                ImageView imageView2 = this.textureImageView;
                if (imageView2 != null) {
                    imageView2.setTranslationX(imageView2.getTranslationX() + getLeftInset());
                }
                if (view != null) {
                    view.setTranslationX((view.getTranslationX() + getLeftInset()) - this.aspectRatioFrameLayout.getX());
                }
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setTranslationX(view.getTranslationX());
                }
                ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda8
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$checkChangedTextureView$3(valueAnimator);
                    }
                });
                float x = this.usedSurfaceView ? 0.0f : this.pipPosition[0] - this.aspectRatioFrameLayout.getX();
                float y = this.usedSurfaceView ? 0.0f : this.pipPosition[1] - this.aspectRatioFrameLayout.getY();
                AnimatorSet animatorSet = new AnimatorSet();
                ArrayList arrayList = new ArrayList();
                arrayList.add(ofFloat);
                arrayList.add(ObjectAnimator.ofFloat(this.textureImageView, View.SCALE_X, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(this.textureImageView, View.SCALE_Y, 1.0f));
                ImageView imageView3 = this.textureImageView;
                Property property = View.TRANSLATION_X;
                float[] fArr = new float[1];
                fArr[0] = this.usedSurfaceView ? 0.0f : this.pipPosition[0];
                arrayList.add(ObjectAnimator.ofFloat(imageView3, property, fArr));
                ImageView imageView4 = this.textureImageView;
                Property property2 = View.TRANSLATION_Y;
                float[] fArr2 = new float[1];
                fArr2[0] = this.usedSurfaceView ? 0.0f : this.pipPosition[1];
                arrayList.add(ObjectAnimator.ofFloat(imageView4, property2, fArr2));
                arrayList.add(ObjectAnimator.ofFloat(view, View.SCALE_X, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(view, View.SCALE_Y, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(view, View.TRANSLATION_X, x));
                arrayList.add(ObjectAnimator.ofFloat(view, View.TRANSLATION_Y, y));
                arrayList.add(ObjectAnimator.ofInt(this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, 255));
                FirstFrameView firstFrameView2 = this.firstFrameView;
                if (firstFrameView2 != null) {
                    arrayList.add(ObjectAnimator.ofFloat(firstFrameView2, View.SCALE_X, 1.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, View.SCALE_Y, 1.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, View.TRANSLATION_X, x));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, View.TRANSLATION_Y, y));
                }
                float f = PipVideoOverlay.getPipRect(false, this.aspectRatioFrameLayout.getAspectRatio()).width;
                view.getWidth();
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda17
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$checkChangedTextureView$4(view, valueAnimator);
                    }
                });
                arrayList.add(ofFloat2);
                animatorSet.playTogether(arrayList);
                DecelerateInterpolator decelerateInterpolator2 = new DecelerateInterpolator();
                animatorSet.setInterpolator(decelerateInterpolator2);
                animatorSet.setDuration(250L);
                SurfaceView surfaceView = this.videoSurfaceView;
                if (surfaceView != null) {
                    surfaceView.setVisibility(0);
                }
                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.9
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.pipAnimationInProgress = false;
                        view.setOutlineProvider(null);
                        if (PhotoViewer.this.textureImageView != null) {
                            PhotoViewer.this.textureImageView.setOutlineProvider(null);
                        }
                        if (PhotoViewer.this.firstFrameView != null) {
                            PhotoViewer.this.firstFrameView.setOutlineProvider(null);
                        }
                        if (PhotoViewer.this.videoSurfaceView != null) {
                            PhotoViewer.this.videoSurfaceView.setVisibility(0);
                        }
                    }
                });
                animatorSet.start();
                toggleActionBar(true, true, new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(250).animationInterpolator(decelerateInterpolator2));
            } else {
                toggleActionBar(true, false);
            }
            this.waitingForFirstTextureUpload = 0;
        }
    }

    /* loaded from: classes4.dex */
    public class 8 implements ViewTreeObserver.OnPreDrawListener {
        8() {
            PhotoViewer.this = r1;
        }

        @Override // android.view.ViewTreeObserver.OnPreDrawListener
        public boolean onPreDraw() {
            PhotoViewer.this.changedTextureView.getViewTreeObserver().removeOnPreDrawListener(this);
            if (PhotoViewer.this.textureImageView != null) {
                if (!PhotoViewer.this.isInline) {
                    PhotoViewer.this.textureImageView.setVisibility(4);
                    PhotoViewer.this.textureImageView.setImageDrawable(null);
                    if (PhotoViewer.this.currentBitmap != null) {
                        PhotoViewer.this.currentBitmap.recycle();
                        PhotoViewer.this.currentBitmap = null;
                    }
                } else {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$8$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.8.this.lambda$onPreDraw$0();
                        }
                    }, 300L);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$8$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.8.this.lambda$onPreDraw$1();
                }
            });
            PhotoViewer.this.waitingForFirstTextureUpload = 0;
            return true;
        }

        public /* synthetic */ void lambda$onPreDraw$0() {
            PhotoViewer.this.textureImageView.setVisibility(4);
            PhotoViewer.this.textureImageView.setImageDrawable(null);
            if (PhotoViewer.this.currentBitmap != null) {
                PhotoViewer.this.currentBitmap.recycle();
                PhotoViewer.this.currentBitmap = null;
            }
        }

        public /* synthetic */ void lambda$onPreDraw$1() {
            if (PhotoViewer.this.isInline) {
                PhotoViewer.this.dismissInternal();
            }
        }
    }

    public /* synthetic */ void lambda$checkChangedTextureView$3(ValueAnimator valueAnimator) {
        this.clippingImageProgress = 1.0f - ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$checkChangedTextureView$4(View view, ValueAnimator valueAnimator) {
        this.inlineOutAnimationProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        view.invalidateOutline();
        ImageView imageView = this.textureImageView;
        if (imageView != null) {
            imageView.invalidateOutline();
        }
        FirstFrameView firstFrameView = this.firstFrameView;
        if (firstFrameView != null) {
            firstFrameView.invalidateOutline();
        }
    }

    public /* synthetic */ void lambda$new$5() {
        if (this.isVisible && this.animationInProgress == 0) {
            updateContainerFlags(this.isActionBarVisible);
        }
    }

    /* loaded from: classes4.dex */
    public static class EditState {
        public long averageDuration;
        public MediaController.CropState cropState;
        public ArrayList<VideoEditedInfo.MediaEntity> croppedMediaEntities;
        public String croppedPaintPath;
        public ArrayList<VideoEditedInfo.MediaEntity> mediaEntities;
        public String paintPath;
        public MediaController.SavedFilterState savedFilterState;

        public void reset() {
            this.paintPath = null;
            this.cropState = null;
            this.savedFilterState = null;
            this.mediaEntities = null;
            this.croppedPaintPath = null;
            this.croppedMediaEntities = null;
            this.averageDuration = 0L;
        }
    }

    /* loaded from: classes4.dex */
    public class SavedState {
        private int index;
        private ArrayList<MessageObject> messages;
        private PhotoViewerProvider provider;

        public SavedState(int i, ArrayList<MessageObject> arrayList, PhotoViewerProvider photoViewerProvider) {
            PhotoViewer.this = r1;
            this.messages = arrayList;
            this.index = i;
            this.provider = photoViewerProvider;
        }

        public void restore() {
            PhotoViewer.this.placeProvider = this.provider;
            if (Build.VERSION.SDK_INT >= 21) {
                PhotoViewer.this.windowLayoutParams.flags = -2147286784;
            } else {
                PhotoViewer.this.windowLayoutParams.flags = 131072;
            }
            PhotoViewer.this.windowLayoutParams.softInputMode = 272;
            PhotoViewer.this.windowView.setFocusable(false);
            PhotoViewer.this.containerView.setFocusable(false);
            PhotoViewer.this.backgroundDrawable.setAlpha(255);
            PhotoViewer.this.containerView.setAlpha(1.0f);
            PhotoViewer photoViewer = PhotoViewer.this;
            ArrayList<MessageObject> arrayList = this.messages;
            int i = this.index;
            photoViewer.onPhotoShow(null, null, null, null, arrayList, null, null, i, this.provider.getPlaceForPhoto(arrayList.get(i), null, this.index, true));
        }
    }

    /* loaded from: classes4.dex */
    public class BackgroundDrawable extends ColorDrawable {
        private boolean allowDrawContent;
        private Runnable drawRunnable;
        private final Paint paint;
        private final RectF rect;
        private final RectF visibleRect;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public BackgroundDrawable(int i) {
            super(i);
            PhotoViewer.this = r2;
            this.rect = new RectF();
            this.visibleRect = new RectF();
            Paint paint = new Paint(1);
            this.paint = paint;
            paint.setColor(i);
        }

        @Override // android.graphics.drawable.ColorDrawable, android.graphics.drawable.Drawable
        @Keep
        public void setAlpha(int i) {
            if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                this.allowDrawContent = (PhotoViewer.this.isVisible && i == 255) ? false : true;
                ((LaunchActivity) PhotoViewer.this.parentActivity).drawerLayoutContainer.setAllowDrawContent(this.allowDrawContent);
                if (PhotoViewer.this.parentAlert != null) {
                    if (this.allowDrawContent) {
                        PhotoViewer.this.parentAlert.setAllowDrawContent(true);
                    } else {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$BackgroundDrawable$$ExternalSyntheticLambda0
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.BackgroundDrawable.this.lambda$setAlpha$0();
                            }
                        }, 50L);
                    }
                }
            }
            super.setAlpha(i);
            this.paint.setAlpha(i);
        }

        public /* synthetic */ void lambda$setAlpha$0() {
            if (PhotoViewer.this.parentAlert != null) {
                PhotoViewer.this.parentAlert.setAllowDrawContent(this.allowDrawContent);
            }
        }

        @Override // android.graphics.drawable.ColorDrawable, android.graphics.drawable.Drawable
        public void draw(Canvas canvas) {
            Runnable runnable;
            if (PhotoViewer.this.animationInProgress != 0 && !AndroidUtilities.isTablet() && PhotoViewer.this.currentPlaceObject != null && PhotoViewer.this.currentPlaceObject.animatingImageView != null) {
                PhotoViewer.this.animatingImageView.getClippedVisibleRect(this.visibleRect);
                if (!this.visibleRect.isEmpty()) {
                    this.visibleRect.inset(AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f));
                    Rect bounds = getBounds();
                    float f = bounds.right;
                    float f2 = bounds.bottom;
                    for (int i = 0; i < 4; i++) {
                        if (i == 0) {
                            RectF rectF = this.rect;
                            RectF rectF2 = this.visibleRect;
                            rectF.set(0.0f, rectF2.top, rectF2.left, rectF2.bottom);
                        } else if (i == 1) {
                            this.rect.set(0.0f, 0.0f, f, this.visibleRect.top);
                        } else if (i == 2) {
                            RectF rectF3 = this.rect;
                            RectF rectF4 = this.visibleRect;
                            rectF3.set(rectF4.right, rectF4.top, f, rectF4.bottom);
                        } else if (i == 3) {
                            this.rect.set(0.0f, this.visibleRect.bottom, f, f2);
                        }
                        canvas.drawRect(this.rect, this.paint);
                    }
                }
            } else {
                super.draw(canvas);
            }
            if (getAlpha() == 0 || (runnable = this.drawRunnable) == null) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
            this.drawRunnable = null;
        }
    }

    /* loaded from: classes4.dex */
    public static class SelectedPhotosListView extends RecyclerListView {
        private Drawable arrowDrawable;
        private Paint paint;
        private RectF rect;

        public SelectedPhotosListView(Context context) {
            super(context);
            this.paint = new Paint(1);
            this.rect = new RectF();
            setWillNotDraw(false);
            setClipToPadding(false);
            setTranslationY(-AndroidUtilities.dp(10.0f));
            DefaultItemAnimator defaultItemAnimator = new DefaultItemAnimator() { // from class: org.telegram.ui.PhotoViewer.SelectedPhotosListView.1
                {
                    SelectedPhotosListView.this = this;
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // androidx.recyclerview.widget.DefaultItemAnimator
                public void onMoveAnimationUpdate(RecyclerView.ViewHolder viewHolder) {
                    SelectedPhotosListView.this.invalidate();
                }
            };
            setItemAnimator(defaultItemAnimator);
            defaultItemAnimator.setDelayAnimations(false);
            defaultItemAnimator.setSupportsChangeAnimations(false);
            setPadding(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(12.0f), AndroidUtilities.dp(12.0f), AndroidUtilities.dp(6.0f));
            this.paint.setColor(2130706432);
            this.arrowDrawable = context.getResources().getDrawable(R.drawable.photo_tooltip2).mutate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            int childCount = getChildCount();
            if (childCount > 0) {
                int measuredWidth = getMeasuredWidth() - AndroidUtilities.dp(87.0f);
                Drawable drawable = this.arrowDrawable;
                drawable.setBounds(measuredWidth, 0, drawable.getIntrinsicWidth() + measuredWidth, AndroidUtilities.dp(6.0f));
                this.arrowDrawable.draw(canvas);
                int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                int i2 = Integer.MIN_VALUE;
                for (int i3 = 0; i3 < childCount; i3++) {
                    View childAt = getChildAt(i3);
                    i = (int) Math.min(i, Math.floor(childAt.getX()));
                    i2 = (int) Math.max(i2, Math.ceil(childAt.getX() + childAt.getMeasuredWidth()));
                }
                if (i == Integer.MAX_VALUE || i2 == Integer.MIN_VALUE) {
                    return;
                }
                this.rect.set(i - AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), i2 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(103.0f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(8.0f), this.paint);
            }
        }
    }

    /* loaded from: classes4.dex */
    public static class CounterView extends View {
        private int currentCount;
        private int height;
        private Paint paint;
        private RectF rect;
        private float rotation;
        private StaticLayout staticLayout;
        private TextPaint textPaint;
        private int width;

        public CounterView(Context context) {
            super(context);
            this.currentCount = 0;
            TextPaint textPaint = new TextPaint(1);
            this.textPaint = textPaint;
            textPaint.setTextSize(AndroidUtilities.dp(15.0f));
            this.textPaint.setTypeface(AndroidUtilities.bold());
            this.textPaint.setColor(-1);
            Paint paint = new Paint(1);
            this.paint = paint;
            paint.setColor(-1);
            this.paint.setStrokeWidth(AndroidUtilities.dp(2.0f));
            this.paint.setStyle(Paint.Style.STROKE);
            this.paint.setStrokeJoin(Paint.Join.ROUND);
            this.rect = new RectF();
            setCount(0);
        }

        @Override // android.view.View
        @Keep
        public void setScaleX(float f) {
            super.setScaleX(f);
            invalidate();
        }

        @Override // android.view.View
        @Keep
        public void setRotationX(float f) {
            this.rotation = f;
            invalidate();
        }

        @Override // android.view.View
        public float getRotationX() {
            return this.rotation;
        }

        public void setCount(int i) {
            StaticLayout staticLayout = new StaticLayout("" + Math.max(1, i), this.textPaint, AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.staticLayout = staticLayout;
            this.width = (int) Math.ceil((double) staticLayout.getLineWidth(0));
            this.height = this.staticLayout.getLineBottom(0);
            AnimatorSet animatorSet = new AnimatorSet();
            if (i == 0) {
                Paint paint = this.paint;
                Property<Paint, Integer> property = AnimationProperties.PAINT_ALPHA;
                animatorSet.playTogether(ObjectAnimator.ofFloat(this, View.SCALE_X, 0.0f), ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.0f), ObjectAnimator.ofInt(paint, property, 0), ObjectAnimator.ofInt(this.textPaint, (Property<TextPaint, Integer>) property, 0));
                animatorSet.setInterpolator(new DecelerateInterpolator());
            } else {
                int i2 = this.currentCount;
                if (i2 == 0) {
                    Paint paint2 = this.paint;
                    Property<Paint, Integer> property2 = AnimationProperties.PAINT_ALPHA;
                    animatorSet.playTogether(ObjectAnimator.ofFloat(this, View.SCALE_X, 0.0f, 1.0f), ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.0f, 1.0f), ObjectAnimator.ofInt(paint2, property2, 0, 255), ObjectAnimator.ofInt(this.textPaint, (Property<TextPaint, Integer>) property2, 0, 255));
                    animatorSet.setInterpolator(new DecelerateInterpolator());
                } else if (i < i2) {
                    animatorSet.playTogether(ObjectAnimator.ofFloat(this, View.SCALE_X, 1.1f, 1.0f), ObjectAnimator.ofFloat(this, View.SCALE_Y, 1.1f, 1.0f));
                    animatorSet.setInterpolator(new OvershootInterpolator());
                } else {
                    animatorSet.playTogether(ObjectAnimator.ofFloat(this, View.SCALE_X, 0.9f, 1.0f), ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.9f, 1.0f));
                    animatorSet.setInterpolator(new OvershootInterpolator());
                }
            }
            animatorSet.setDuration(180L);
            animatorSet.start();
            requestLayout();
            this.currentCount = i;
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.max(this.width + AndroidUtilities.dp(20.0f), AndroidUtilities.dp(30.0f)), 1073741824), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40.0f), 1073741824));
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            int measuredHeight = getMeasuredHeight() / 2;
            this.paint.setAlpha(255);
            this.rect.set(AndroidUtilities.dp(1.0f), measuredHeight - AndroidUtilities.dp(14.0f), getMeasuredWidth() - AndroidUtilities.dp(1.0f), measuredHeight + AndroidUtilities.dp(14.0f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(15.0f), AndroidUtilities.dp(15.0f), this.paint);
            if (this.staticLayout != null) {
                this.textPaint.setAlpha((int) ((1.0f - this.rotation) * 255.0f));
                canvas.save();
                canvas.translate((getMeasuredWidth() - this.width) / 2, ((getMeasuredHeight() - this.height) / 2) + AndroidUtilities.dpf2(0.2f) + (this.rotation * AndroidUtilities.dp(5.0f)));
                this.staticLayout.draw(canvas);
                canvas.restore();
                this.paint.setAlpha((int) (this.rotation * 255.0f));
                int centerX = (int) this.rect.centerX();
                int centerY = (int) (((int) this.rect.centerY()) - (AndroidUtilities.dp(5.0f) * (1.0f - this.rotation)));
                canvas.drawLine(AndroidUtilities.dp(5.0f) + centerX, centerY - AndroidUtilities.dp(5.0f), centerX - AndroidUtilities.dp(5.0f), AndroidUtilities.dp(5.0f) + centerY, this.paint);
                canvas.drawLine(centerX - AndroidUtilities.dp(5.0f), centerY - AndroidUtilities.dp(5.0f), centerX + AndroidUtilities.dp(5.0f), centerY + AndroidUtilities.dp(5.0f), this.paint);
            }
        }
    }

    /* loaded from: classes4.dex */
    public class PhotoProgressView {
        private View parent;
        private final CombinedDrawable playDrawable;
        private final PlayPauseDrawable playPauseDrawable;
        private boolean visible;
        private long lastUpdateTime = 0;
        private float radOffset = 0.0f;
        private float currentProgress = 0.0f;
        private float animationProgressStart = 0.0f;
        private long currentProgressTime = 0;
        private float animatedProgressValue = 0.0f;
        private RectF progressRect = new RectF();
        private int backgroundState = -1;
        private int size = AndroidUtilities.dp(64.0f);
        private int previousBackgroundState = -2;
        private float animatedAlphaValue = 1.0f;
        private float[] animAlphas = new float[3];
        private float[] alphas = new float[3];
        private float scale = 1.0f;

        protected void onBackgroundStateUpdated(int i) {
            throw null;
        }

        protected void onVisibilityChanged(boolean z) {
            throw null;
        }

        public PhotoProgressView(View view) {
            PhotoViewer.this = r5;
            if (PhotoViewer.decelerateInterpolator == null) {
                DecelerateInterpolator unused = PhotoViewer.decelerateInterpolator = new DecelerateInterpolator(1.5f);
                Paint unused2 = PhotoViewer.progressPaint = new Paint(1);
                PhotoViewer.progressPaint.setStyle(Paint.Style.STROKE);
                PhotoViewer.progressPaint.setStrokeCap(Paint.Cap.ROUND);
                PhotoViewer.progressPaint.setStrokeWidth(AndroidUtilities.dp(3.0f));
                PhotoViewer.progressPaint.setColor(-1);
            }
            this.parent = view;
            resetAlphas();
            PlayPauseDrawable playPauseDrawable = new PlayPauseDrawable(28);
            this.playPauseDrawable = playPauseDrawable;
            playPauseDrawable.setDuration(200);
            this.playDrawable = new CombinedDrawable(ContextCompat.getDrawable(r5.parentActivity, R.drawable.circle_big).mutate(), playPauseDrawable);
        }

        private void updateAnimation(boolean z) {
            boolean z2;
            long currentTimeMillis = System.currentTimeMillis();
            long j = currentTimeMillis - this.lastUpdateTime;
            if (j > 18) {
                j = 18;
            }
            this.lastUpdateTime = currentTimeMillis;
            int i = 0;
            if (z) {
                if (this.animatedProgressValue == 1.0f && this.currentProgress == 1.0f) {
                    z2 = false;
                } else {
                    this.radOffset += ((float) (360 * j)) / 3000.0f;
                    float f = this.currentProgress - this.animationProgressStart;
                    if (Math.abs(f) > 0.0f) {
                        long j2 = this.currentProgressTime + j;
                        this.currentProgressTime = j2;
                        if (j2 < 300) {
                            this.animatedProgressValue = this.animationProgressStart + (f * PhotoViewer.decelerateInterpolator.getInterpolation(((float) this.currentProgressTime) / 300.0f));
                        } else {
                            float f2 = this.currentProgress;
                            this.animatedProgressValue = f2;
                            this.animationProgressStart = f2;
                            this.currentProgressTime = 0L;
                        }
                    }
                    z2 = true;
                }
                float f3 = this.animatedAlphaValue;
                if (f3 > 0.0f && this.previousBackgroundState != -2) {
                    float f4 = f3 - (((float) j) / 200.0f);
                    this.animatedAlphaValue = f4;
                    if (f4 <= 0.0f) {
                        this.animatedAlphaValue = 0.0f;
                        this.previousBackgroundState = -2;
                    }
                    z2 = true;
                }
            } else {
                z2 = false;
            }
            while (true) {
                float[] fArr = this.alphas;
                if (i >= fArr.length) {
                    break;
                }
                float f5 = fArr[i];
                float[] fArr2 = this.animAlphas;
                if (f5 > fArr2[i]) {
                    fArr2[i] = Math.min(1.0f, fArr2[i] + (((float) j) / 200.0f));
                } else if (fArr[i] < fArr2[i]) {
                    fArr2[i] = Math.max(0.0f, fArr2[i] - (((float) j) / 200.0f));
                } else {
                    i++;
                }
                z2 = true;
                i++;
            }
            if (z2) {
                this.parent.postInvalidateOnAnimation();
            }
        }

        public void setProgress(float f, boolean z) {
            if (!z) {
                this.animatedProgressValue = f;
                this.animationProgressStart = f;
            } else {
                this.animationProgressStart = this.animatedProgressValue;
            }
            this.currentProgress = f;
            this.currentProgressTime = 0L;
            this.parent.invalidate();
        }

        public void setBackgroundState(int i, boolean z, boolean z2) {
            int i2;
            int i3 = this.backgroundState;
            if (i3 == i) {
                return;
            }
            PlayPauseDrawable playPauseDrawable = this.playPauseDrawable;
            if (playPauseDrawable != null) {
                boolean z3 = z2 && (i3 == 3 || i3 == 4);
                if (i == 3) {
                    playPauseDrawable.setPause(false, z3);
                } else if (i == 4) {
                    playPauseDrawable.setPause(true, z3);
                }
                this.playPauseDrawable.setParent(this.parent);
                this.playPauseDrawable.invalidateSelf();
            }
            this.lastUpdateTime = System.currentTimeMillis();
            if (z && (i2 = this.backgroundState) != i) {
                this.previousBackgroundState = i2;
                this.animatedAlphaValue = 1.0f;
            } else {
                this.previousBackgroundState = -2;
            }
            this.backgroundState = i;
            onBackgroundStateUpdated(i);
            this.parent.invalidate();
        }

        public void setAlpha(float f) {
            setIndexedAlpha(0, f, false);
        }

        public void setScale(float f) {
            this.scale = f;
        }

        public void setIndexedAlpha(int i, float f, boolean z) {
            float[] fArr = this.alphas;
            if (fArr[i] != f) {
                fArr[i] = f;
                if (!z) {
                    this.animAlphas[i] = f;
                }
                checkVisibility();
                this.parent.invalidate();
            }
        }

        public void resetAlphas() {
            int i = 0;
            while (true) {
                float[] fArr = this.alphas;
                if (i < fArr.length) {
                    this.animAlphas[i] = 1.0f;
                    fArr[i] = 1.0f;
                    i++;
                } else {
                    checkVisibility();
                    return;
                }
            }
        }

        private float calculateAlpha() {
            float f;
            float f2 = 1.0f;
            int i = 0;
            while (true) {
                float[] fArr = this.animAlphas;
                if (i >= fArr.length) {
                    return f2;
                }
                if (i == 2) {
                    f = AndroidUtilities.accelerateInterpolator.getInterpolation(fArr[i]);
                } else {
                    f = fArr[i];
                }
                f2 *= f;
                i++;
            }
        }

        private void checkVisibility() {
            boolean z = false;
            int i = 0;
            while (true) {
                float[] fArr = this.alphas;
                if (i >= fArr.length) {
                    z = true;
                    break;
                } else if (fArr[i] != 1.0f) {
                    break;
                } else {
                    i++;
                }
            }
            if (z != this.visible) {
                this.visible = z;
                onVisibilityChanged(z);
            }
        }

        public boolean isVisible() {
            return this.visible;
        }

        public int getX() {
            return (PhotoViewer.this.containerView.getWidth() - ((int) (this.size * this.scale))) / 2;
        }

        public int getY() {
            int i = (int) ((((AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - ((int) (this.size * this.scale))) / 2) + PhotoViewer.this.currentPanTranslationY);
            return PhotoViewer.this.sendPhotoType == 1 ? i - AndroidUtilities.dp(38.0f) : i;
        }

        public void onDraw(Canvas canvas) {
            int i;
            Drawable drawable;
            Drawable drawable2;
            int i2 = (int) (this.size * this.scale);
            int x = getX();
            int y = getY();
            float calculateAlpha = calculateAlpha();
            int i3 = this.previousBackgroundState;
            if (i3 >= 0 && i3 < PhotoViewer.progressDrawables.length + 2) {
                if (this.previousBackgroundState < PhotoViewer.progressDrawables.length) {
                    drawable2 = PhotoViewer.progressDrawables[this.previousBackgroundState];
                } else {
                    drawable2 = this.playDrawable;
                }
                if (drawable2 != null) {
                    drawable2.setAlpha((int) (this.animatedAlphaValue * 255.0f * calculateAlpha));
                    drawable2.setBounds(x, y, x + i2, y + i2);
                    drawable2.draw(canvas);
                }
            }
            int i4 = this.backgroundState;
            if (i4 >= 0 && i4 < PhotoViewer.progressDrawables.length + 2) {
                if (this.backgroundState < PhotoViewer.progressDrawables.length) {
                    drawable = PhotoViewer.progressDrawables[this.backgroundState];
                } else {
                    drawable = this.playDrawable;
                }
                if (drawable != null) {
                    if (this.previousBackgroundState != -2) {
                        drawable.setAlpha((int) ((1.0f - this.animatedAlphaValue) * 255.0f * calculateAlpha));
                    } else {
                        drawable.setAlpha((int) (calculateAlpha * 255.0f));
                    }
                    drawable.setBounds(x, y, x + i2, y + i2);
                    drawable.draw(canvas);
                }
            }
            int i5 = this.backgroundState;
            if (i5 == 0 || i5 == 1 || (i = this.previousBackgroundState) == 0 || i == 1) {
                int dp = AndroidUtilities.dp(4.0f);
                if (this.previousBackgroundState != -2) {
                    PhotoViewer.progressPaint.setAlpha((int) (this.animatedAlphaValue * 255.0f * calculateAlpha));
                } else {
                    PhotoViewer.progressPaint.setAlpha((int) (calculateAlpha * 255.0f));
                }
                this.progressRect.set(x + dp, y + dp, (x + i2) - dp, (y + i2) - dp);
                canvas.drawArc(this.progressRect, this.radOffset - 90.0f, Math.max(4.0f, this.animatedProgressValue * 360.0f), false, PhotoViewer.progressPaint);
                updateAnimation(true);
                return;
            }
            updateAnimation(false);
        }
    }

    /* loaded from: classes4.dex */
    public class FrameLayoutDrawer extends SizeNotifierFrameLayoutPhoto {
        private boolean captionAbove;
        private ArrayList<Rect> exclusionRects;
        private boolean ignoreLayout;
        private Paint paint;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public FrameLayoutDrawer(Context context, Activity activity) {
            super(context, activity, false);
            PhotoViewer.this = r1;
            this.paint = new Paint();
            setWillNotDraw(false);
            this.paint.setColor(AndroidUtilities.DARK_STATUS_BAR_OVERLAY);
            setLayerType(2, null);
        }

        /* JADX WARN: Removed duplicated region for block: B:211:0x0287  */
        /* JADX WARN: Removed duplicated region for block: B:212:0x028a  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            int i3;
            int i4;
            int bitmapWidth;
            int bitmapHeight;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            if (getLayoutParams().height > 0) {
                size2 = getLayoutParams().height;
            }
            int i5 = size2;
            setMeasuredDimension(size, i5);
            if (!PhotoViewer.this.isCurrentVideo) {
                this.ignoreLayout = true;
                if (!PhotoViewer.this.needCaptionLayout) {
                    PhotoViewer.this.captionTextViewSwitcher.getCurrentView().setMaxLines(ConnectionsManager.DEFAULT_DATACENTER_ID);
                    PhotoViewer.this.captionTextViewSwitcher.getNextView().setMaxLines(ConnectionsManager.DEFAULT_DATACENTER_ID);
                } else {
                    Point point = AndroidUtilities.displaySize;
                    int i6 = point.x > point.y ? 5 : 10;
                    PhotoViewer.this.captionTextViewSwitcher.getCurrentView().setMaxLines(i6);
                    PhotoViewer.this.captionTextViewSwitcher.getNextView().setMaxLines(i6);
                }
                this.ignoreLayout = false;
            }
            int dp = PhotoViewer.this.bottomLayout.getVisibility() != 8 ? AndroidUtilities.dp(48.0f) : 0;
            if (PhotoViewer.this.groupedPhotosListView == null || PhotoViewer.this.groupedPhotosListView.getVisibility() == 8) {
                i3 = 0;
            } else {
                ((ViewGroup.MarginLayoutParams) PhotoViewer.this.groupedPhotosListView.getLayoutParams()).bottomMargin = dp;
                measureChildWithMargins(PhotoViewer.this.groupedPhotosListView, i, 0, i2, 0);
                int measuredHeight = PhotoViewer.this.groupedPhotosListView.getMeasuredHeight();
                this.ignoreLayout = true;
                if (AndroidUtilities.isTablet() || i5 >= size) {
                    if (PhotoViewer.this.groupedPhotosListView.getVisibility() != 0) {
                        PhotoViewer.this.groupedPhotosListView.setVisibility(0);
                    }
                } else if (PhotoViewer.this.groupedPhotosListView.getVisibility() != 4) {
                    PhotoViewer.this.groupedPhotosListView.setVisibility(4);
                }
                this.ignoreLayout = false;
                i3 = measuredHeight;
            }
            if (PhotoViewer.this.videoPlayerControlFrameLayout != null) {
                PhotoViewer.this.videoPlayerControlFrameLayout.parentWidth = size;
                PhotoViewer.this.videoPlayerControlFrameLayout.parentHeight = i5;
            }
            int paddingRight = size - (getPaddingRight() + getPaddingLeft());
            int paddingBottom = i5 - getPaddingBottom();
            int childCount = getChildCount();
            for (int i7 = 0; i7 < childCount; i7++) {
                View childAt = getChildAt(i7);
                if (childAt.getVisibility() != 8 && childAt != PhotoViewer.this.groupedPhotosListView) {
                    if (childAt != PhotoViewer.this.aspectRatioFrameLayout) {
                        if (childAt == PhotoViewer.this.paintingOverlay) {
                            if (PhotoViewer.this.aspectRatioFrameLayout == null || PhotoViewer.this.aspectRatioFrameLayout.getVisibility() != 0) {
                                bitmapWidth = PhotoViewer.this.centerImage.getBitmapWidth();
                                bitmapHeight = PhotoViewer.this.centerImage.getBitmapHeight();
                            } else {
                                View view = PhotoViewer.this.usedSurfaceView ? PhotoViewer.this.videoSurfaceView : PhotoViewer.this.videoTextureView;
                                bitmapWidth = view.getMeasuredWidth();
                                bitmapHeight = view.getMeasuredHeight();
                            }
                            if (bitmapWidth == 0 || bitmapHeight == 0) {
                                bitmapWidth = paddingRight;
                                bitmapHeight = paddingBottom;
                            }
                            PhotoViewer.this.paintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(bitmapWidth, 1073741824), View.MeasureSpec.makeMeasureSpec(bitmapHeight, 1073741824));
                        } else if (PhotoViewer.this.captionEdit.editText.isPopupView(childAt)) {
                            if (PhotoViewer.this.inBubbleMode) {
                                childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingBottom + 0, 1073741824));
                            } else if (AndroidUtilities.isInMultiwindow) {
                                if (AndroidUtilities.isTablet()) {
                                    childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), (paddingBottom + 0) - AndroidUtilities.statusBarHeight), 1073741824));
                                } else {
                                    childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec((paddingBottom + 0) - AndroidUtilities.statusBarHeight, 1073741824));
                                }
                            } else {
                                childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(childAt.getLayoutParams().height + AndroidUtilities.navigationBarHeight, 1073741824));
                            }
                        } else if (childAt == PhotoViewer.this.captionScrollView) {
                            if (!PhotoViewer.this.dontChangeCaptionPosition) {
                                if (PhotoViewer.this.groupedPhotosListView.hasPhotos() && (AndroidUtilities.isTablet() || paddingBottom > paddingRight)) {
                                    i4 = dp + i3;
                                    this.captionAbove = true;
                                    int currentActionBarHeight = (paddingBottom - ((!PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                                    ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                                    childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(currentActionBarHeight, 1073741824));
                                } else {
                                    this.captionAbove = false;
                                    i4 = dp;
                                    int currentActionBarHeight2 = (paddingBottom - ((!PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                                    ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                                    childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(currentActionBarHeight2, 1073741824));
                                }
                            } else {
                                if (this.captionAbove) {
                                    i4 = dp + i3;
                                    int currentActionBarHeight22 = (paddingBottom - ((!PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                                    ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                                    childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(currentActionBarHeight22, 1073741824));
                                }
                                i4 = dp;
                                int currentActionBarHeight222 = (paddingBottom - ((!PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                                ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                                childAt.measure(View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824), View.MeasureSpec.makeMeasureSpec(currentActionBarHeight222, 1073741824));
                            }
                        } else {
                            measureChildWithMargins(childAt, i, 0, i2, 0);
                        }
                    } else {
                        childAt.measure(i, View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0), 1073741824));
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Removed duplicated region for block: B:106:0x0076  */
        /* JADX WARN: Removed duplicated region for block: B:110:0x0085  */
        /* JADX WARN: Removed duplicated region for block: B:114:0x009c  */
        /* JADX WARN: Removed duplicated region for block: B:116:0x00a9  */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            int paddingLeft;
            int paddingRight;
            int paddingBottom;
            int i5;
            int i6;
            int i7;
            int i8;
            int i9;
            int i10;
            int height;
            int i11;
            int height2;
            int measuredHeight;
            int dp;
            int childCount = getChildCount();
            PhotoViewer.this.keyboardSize = measureKeyboardHeight();
            for (int i12 = 0; i12 < childCount; i12++) {
                View childAt = getChildAt(i12);
                if (childAt.getVisibility() != 8) {
                    if (childAt == PhotoViewer.this.aspectRatioFrameLayout) {
                        paddingLeft = i;
                        paddingRight = i3;
                        paddingBottom = i4;
                    } else {
                        paddingLeft = i + getPaddingLeft();
                        paddingRight = i3 - getPaddingRight();
                        paddingBottom = i4 - getPaddingBottom();
                    }
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) childAt.getLayoutParams();
                    int measuredWidth = childAt.getMeasuredWidth();
                    int measuredHeight2 = childAt.getMeasuredHeight();
                    int i13 = layoutParams.gravity;
                    if (i13 == -1) {
                        i13 = 51;
                    }
                    int i14 = i13 & 7;
                    int i15 = i13 & R.styleable.AppCompatTheme_toolbarNavigationButtonStyle;
                    if (i14 == 1) {
                        i5 = (((paddingRight - paddingLeft) - measuredWidth) / 2) + layoutParams.leftMargin;
                        i6 = layoutParams.rightMargin;
                    } else if (i14 == 5) {
                        i5 = (paddingRight - paddingLeft) - measuredWidth;
                        i6 = layoutParams.rightMargin;
                    } else {
                        i7 = layoutParams.leftMargin;
                        if (i15 != 16) {
                            i8 = ((((paddingBottom + 0) - i2) - measuredHeight2) / 2) + layoutParams.topMargin;
                            i9 = layoutParams.bottomMargin;
                        } else if (i15 == 80) {
                            i8 = ((paddingBottom + 0) - i2) - measuredHeight2;
                            i9 = layoutParams.bottomMargin;
                        } else {
                            i10 = layoutParams.topMargin;
                            if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                                height = PhotoViewer.this.captionEdit.getEditTextHeight();
                            } else {
                                if (PhotoViewer.this.captionEdit.editText.isPopupView(childAt)) {
                                    measuredHeight = (i4 - i2) - measuredHeight2;
                                    dp = (PhotoViewer.this.inBubbleMode || AndroidUtilities.isInMultiwindow) ? 0 : AndroidUtilities.navigationBarHeight;
                                } else if (childAt == PhotoViewer.this.selectedPhotosListView) {
                                    measuredHeight = PhotoViewer.this.actionBar.getMeasuredHeight();
                                    dp = AndroidUtilities.dp(5.0f);
                                } else {
                                    if (childAt == PhotoViewer.this.muteItem) {
                                        i11 = ((PhotoViewer.this.videoTimelineViewContainer == null || PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 0) ? PhotoViewer.this.pickerView.getTop() : PhotoViewer.this.videoTimelineViewContainer.getTop()) - AndroidUtilities.dp((PhotoViewer.this.sendPhotoType == 4 || PhotoViewer.this.sendPhotoType == 5) ? 40.0f : 15.0f);
                                        height2 = childAt.getMeasuredHeight();
                                    } else if (childAt == PhotoViewer.this.videoTimelineViewContainer) {
                                        i10 -= PhotoViewer.this.pickerView.getHeight();
                                        if (PhotoViewer.this.sendPhotoType != 1) {
                                            if (PhotoViewer.this.captionEdit.getVisibility() == 0) {
                                                height = AndroidUtilities.dp(56.0f);
                                            }
                                            childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                                        } else {
                                            height = AndroidUtilities.dp(52.0f);
                                        }
                                    } else if (childAt != PhotoViewer.this.captionEditContainer) {
                                        if (childAt == PhotoViewer.this.videoAvatarTooltip) {
                                            height = PhotoViewer.this.pickerView.getHeight() + AndroidUtilities.dp(31.0f);
                                        }
                                        childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                                    } else {
                                        i11 = ((paddingBottom - i2) - measuredHeight2) - layoutParams.bottomMargin;
                                        height2 = PhotoViewer.this.pickerView.getHeight();
                                    }
                                    i10 = i11 - height2;
                                    childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                                }
                                i10 = measuredHeight + dp;
                                childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                            }
                            i10 -= height;
                            childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                        }
                        i10 = i8 - i9;
                        if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                        }
                        i10 -= height;
                        childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                    }
                    i7 = i5 - i6;
                    if (i15 != 16) {
                    }
                    i10 = i8 - i9;
                    if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                    }
                    i10 -= height;
                    childAt.layout(i7 + paddingLeft, i10, i7 + measuredWidth + paddingLeft, measuredHeight2 + i10);
                }
            }
            notifyHeightChanged();
            updateExclusionRects();
        }

        public void updateExclusionRects() {
            if (Build.VERSION.SDK_INT >= 29) {
                if (this.exclusionRects == null) {
                    this.exclusionRects = new ArrayList<>();
                }
                this.exclusionRects.clear();
                if (PhotoViewer.this.currentEditMode == 1 || PhotoViewer.this.switchingToMode == 1) {
                    int measuredHeight = getMeasuredHeight();
                    int measuredWidth = getMeasuredWidth();
                    this.exclusionRects.add(new Rect(0, (measuredHeight - AndroidUtilities.dp(200.0f)) / 2, AndroidUtilities.dp(100.0f), (AndroidUtilities.dp(200.0f) + measuredHeight) / 2));
                    this.exclusionRects.add(new Rect(measuredWidth - AndroidUtilities.dp(100.0f), (measuredHeight - AndroidUtilities.dp(200.0f)) / 2, measuredWidth, (measuredHeight + AndroidUtilities.dp(200.0f)) / 2));
                }
                setSystemGestureExclusionRects(this.exclusionRects);
                invalidate();
            }
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            PhotoViewer.this.onDraw(canvas);
            if (!PhotoViewer.this.isStatusBarVisible() || AndroidUtilities.statusBarHeight == 0 || PhotoViewer.this.actionBar == null) {
                return;
            }
            if (Build.VERSION.SDK_INT < 21) {
                this.paint.setAlpha((int) (PhotoViewer.this.actionBar.getAlpha() * 255.0f * 0.2f));
                canvas.drawRect(0.0f, PhotoViewer.this.currentPanTranslationY, getMeasuredWidth(), PhotoViewer.this.currentPanTranslationY + AndroidUtilities.statusBarHeight, this.paint);
            }
            this.paint.setAlpha((int) (PhotoViewer.this.actionBar.getAlpha() * 255.0f * 0.498f));
            if (getPaddingRight() > 0) {
                canvas.drawRect(getMeasuredWidth() - getPaddingRight(), 0.0f, getMeasuredWidth(), getMeasuredHeight(), this.paint);
            }
            if (getPaddingLeft() > 0) {
                canvas.drawRect(0.0f, 0.0f, getPaddingLeft(), getMeasuredHeight(), this.paint);
            }
            if (getPaddingBottom() > 0) {
                float dpf2 = AndroidUtilities.dpf2(24.0f) * (1.0f - PhotoViewer.this.actionBar.getAlpha());
                canvas.drawRect(0.0f, (getMeasuredHeight() - getPaddingBottom()) + dpf2, getMeasuredWidth(), getMeasuredHeight() + dpf2, this.paint);
            }
        }

        @Override // android.view.View
        public void draw(Canvas canvas) {
            super.draw(canvas);
            if (PhotoViewer.this.photoViewerWebView == null || !PhotoViewer.this.photoViewerWebView.isControllable() || PhotoViewer.this.videoForwardDrawable == null || !PhotoViewer.this.videoForwardDrawable.isAnimating()) {
                return;
            }
            int measuredHeight = ((int) (PhotoViewer.this.photoViewerWebView.getWebView().getMeasuredHeight() * (PhotoViewer.this.scale - 1.0f))) / 2;
            PhotoViewer.this.videoForwardDrawable.setBounds(PhotoViewer.this.photoViewerWebView.getLeft(), (PhotoViewer.this.photoViewerWebView.getWebView().getTop() - measuredHeight) + ((int) (PhotoViewer.this.translationY / PhotoViewer.this.scale)), PhotoViewer.this.photoViewerWebView.getRight(), PhotoViewer.this.photoViewerWebView.getWebView().getBottom() + measuredHeight + ((int) (PhotoViewer.this.translationY / PhotoViewer.this.scale)));
            PhotoViewer.this.videoForwardDrawable.draw(canvas);
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            if (view == PhotoViewer.this.leftPaintingOverlay || view == PhotoViewer.this.rightPaintingOverlay) {
                return false;
            }
            if (view != PhotoViewer.this.navigationBar && (PhotoViewer.this.captionEdit == null || !PhotoViewer.this.captionEdit.editText.isPopupView(view))) {
                canvas.save();
            }
            boolean drawChildInternal = drawChildInternal(canvas, view, j);
            if (view != PhotoViewer.this.navigationBar && (PhotoViewer.this.captionEdit == null || !PhotoViewer.this.captionEdit.editText.isPopupView(view))) {
                canvas.restore();
            }
            return drawChildInternal;
        }

        protected boolean drawChildInternal(Canvas canvas, View view, long j) {
            if (view == PhotoViewer.this.miniProgressView) {
                return false;
            }
            if (view != PhotoViewer.this.videoTimelineViewContainer || PhotoViewer.this.videoTimelineViewContainer.getTranslationY() <= 0.0f || PhotoViewer.this.pickerView.getTranslationY() != 0.0f) {
                try {
                    if (view == PhotoViewer.this.aspectRatioFrameLayout || view == PhotoViewer.this.paintingOverlay) {
                        return false;
                    }
                    return super.drawChild(canvas, view, j);
                } catch (Throwable unused) {
                    return true;
                }
            }
            canvas.save();
            canvas.clipRect(PhotoViewer.this.videoTimelineViewContainer.getX(), PhotoViewer.this.videoTimelineViewContainer.getY(), PhotoViewer.this.videoTimelineViewContainer.getX() + PhotoViewer.this.videoTimelineViewContainer.getMeasuredWidth(), PhotoViewer.this.videoTimelineViewContainer.getBottom());
            boolean drawChild = super.drawChild(canvas, view, j);
            canvas.restore();
            return drawChild;
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            Bulletin.addDelegate(this, new Bulletin.Delegate() { // from class: org.telegram.ui.PhotoViewer.FrameLayoutDrawer.1
                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean allowLayoutChanges() {
                    return Bulletin.Delegate.-CC.$default$allowLayoutChanges(this);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean bottomOffsetAnimated() {
                    return Bulletin.Delegate.-CC.$default$bottomOffsetAnimated(this);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean clipWithGradient(int i) {
                    return Bulletin.Delegate.-CC.$default$clipWithGradient(this, i);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ int getTopOffset(int i) {
                    return Bulletin.Delegate.-CC.$default$getTopOffset(this, i);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onBottomOffsetChange(float f) {
                    Bulletin.Delegate.-CC.$default$onBottomOffsetChange(this, f);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onHide(Bulletin bulletin) {
                    Bulletin.Delegate.-CC.$default$onHide(this, bulletin);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onShow(Bulletin bulletin) {
                    Bulletin.Delegate.-CC.$default$onShow(this, bulletin);
                }

                {
                    FrameLayoutDrawer.this = this;
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public int getBottomOffset(int i) {
                    int height;
                    int i2 = 0;
                    if (PhotoViewer.this.editing) {
                        if (PhotoViewer.this.captionEdit != null && PhotoViewer.this.captionEdit.getVisibility() == 0) {
                            i2 = 0 + PhotoViewer.this.captionEdit.getEditTextHeight() + AndroidUtilities.dp(12.0f);
                        }
                        if (PhotoViewer.this.pickerView == null || PhotoViewer.this.pickerView.getVisibility() != 0) {
                            return i2;
                        }
                        height = PhotoViewer.this.pickerView.getHeight();
                    } else {
                        if (PhotoViewer.this.bottomLayout != null && PhotoViewer.this.bottomLayout.getVisibility() == 0) {
                            i2 = 0 + PhotoViewer.this.bottomLayout.getHeight();
                        }
                        if (PhotoViewer.this.groupedPhotosListView == null || !PhotoViewer.this.groupedPhotosListView.hasPhotos()) {
                            return i2;
                        }
                        if (!AndroidUtilities.isTablet() && PhotoViewer.this.containerView.getMeasuredHeight() <= PhotoViewer.this.containerView.getMeasuredWidth()) {
                            return i2;
                        }
                        height = PhotoViewer.this.groupedPhotosListView.getHeight();
                    }
                    return i2 + height;
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            Bulletin.removeDelegate(this);
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout
        public void notifyHeightChanged() {
            super.notifyHeightChanged();
            if (PhotoViewer.this.isCurrentVideo) {
                PhotoViewer.this.photoProgressViews[0].setIndexedAlpha(2, getKeyboardHeight() <= AndroidUtilities.dp(20.0f) ? 1.0f : 0.0f, true);
            }
        }
    }

    static {
        if (Build.VERSION.SDK_INT >= 24) {
            VPC_PROGRESS = new FloatProperty<VideoPlayerControlFrameLayout>("progress") { // from class: org.telegram.ui.PhotoViewer.11
                @Override // android.util.FloatProperty
                public void setValue(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout, float f) {
                    videoPlayerControlFrameLayout.setProgress(f);
                }

                @Override // android.util.Property
                public Float get(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout) {
                    return Float.valueOf(videoPlayerControlFrameLayout.getProgress());
                }
            };
        } else {
            VPC_PROGRESS = new Property<VideoPlayerControlFrameLayout, Float>(Float.class, "progress") { // from class: org.telegram.ui.PhotoViewer.12
                @Override // android.util.Property
                public void set(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout, Float f) {
                    videoPlayerControlFrameLayout.setProgress(f.floatValue());
                }

                @Override // android.util.Property
                public Float get(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout) {
                    return Float.valueOf(videoPlayerControlFrameLayout.getProgress());
                }
            };
        }
        Instance = null;
        PipInstance = null;
    }

    /* loaded from: classes4.dex */
    public class VideoPlayerControlFrameLayout extends FrameLayout {
        private boolean ignoreLayout;
        private int lastTimeWidth;
        private int parentHeight;
        private int parentWidth;
        private float progress;
        private boolean seekBarTransitionEnabled;
        private SpringAnimation timeSpring;
        private FloatValueHolder timeValue;
        private boolean translationYAnimationEnabled;

        public /* synthetic */ void lambda$new$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            PhotoViewer.this.videoPlayerSeekbar.setSize((int) (((getMeasuredWidth() - AndroidUtilities.dp(16.0f)) - f) - (this.parentWidth > this.parentHeight ? AndroidUtilities.dp(48.0f) : 0)), getMeasuredHeight());
        }

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public VideoPlayerControlFrameLayout(Context context) {
            super(context);
            PhotoViewer.this = r3;
            this.progress = 1.0f;
            this.translationYAnimationEnabled = true;
            this.timeValue = new FloatValueHolder(0.0f);
            this.timeSpring = new SpringAnimation(this.timeValue).setSpring(new SpringForce(0.0f).setStiffness(750.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.PhotoViewer$VideoPlayerControlFrameLayout$$ExternalSyntheticLambda0
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    PhotoViewer.VideoPlayerControlFrameLayout.this.lambda$new$0(dynamicAnimation, f, f2);
                }
            });
            setWillNotDraw(false);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (this.progress < 1.0f) {
                return false;
            }
            if (PhotoViewer.this.videoPlayerSeekbar.onTouch(motionEvent.getAction(), motionEvent.getX() - AndroidUtilities.dp(2.0f), motionEvent.getY())) {
                getParent().requestDisallowInterceptTouchEvent(true);
                PhotoViewer.this.videoPlayerSeekbarView.invalidate();
            }
            return true;
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.timeValue.setValue(0.0f);
            this.lastTimeWidth = 0;
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int i3;
            String format;
            this.ignoreLayout = true;
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) PhotoViewer.this.videoPlayerTime.getLayoutParams();
            if (this.parentWidth > this.parentHeight) {
                if (PhotoViewer.this.exitFullscreenButton.getVisibility() != 0) {
                    PhotoViewer.this.exitFullscreenButton.setVisibility(0);
                }
                i3 = AndroidUtilities.dp(48.0f);
                layoutParams.rightMargin = AndroidUtilities.dp(47.0f);
            } else {
                if (PhotoViewer.this.exitFullscreenButton.getVisibility() != 4) {
                    PhotoViewer.this.exitFullscreenButton.setVisibility(4);
                }
                layoutParams.rightMargin = AndroidUtilities.dp(12.0f);
                i3 = 0;
            }
            this.ignoreLayout = false;
            super.onMeasure(i, i2);
            long j = 0;
            if (PhotoViewer.this.videoPlayer != null) {
                long duration = PhotoViewer.this.videoPlayer.getDuration();
                if (duration != -9223372036854775807L) {
                    j = duration;
                }
            } else if (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable()) {
                j = PhotoViewer.this.photoViewerWebView.getVideoDuration();
            }
            long j2 = j / 1000;
            long j3 = j2 / 60;
            if (j3 > 60) {
                format = String.format(Locale.ROOT, "%02d:%02d:%02d", Long.valueOf(j3 / 60), Long.valueOf(j3 % 60), Long.valueOf(j2 % 60));
            } else {
                format = String.format(Locale.ROOT, "%02d:%02d", Long.valueOf(j3), Long.valueOf(j2 % 60));
            }
            int ceil = (int) Math.ceil(PhotoViewer.this.videoPlayerTime.getPaint().measureText(String.format(Locale.ROOT, "%1$s / %1$s", format)));
            this.timeSpring.cancel();
            if (this.lastTimeWidth != 0) {
                float f = ceil;
                if (this.timeValue.getValue() != f) {
                    this.timeSpring.getSpring().setFinalPosition(f);
                    this.timeSpring.start();
                    this.lastTimeWidth = ceil;
                }
            }
            PhotoViewer.this.videoPlayerSeekbar.setSize(((getMeasuredWidth() - AndroidUtilities.dp(16.0f)) - ceil) - i3, getMeasuredHeight());
            this.timeValue.setValue(ceil);
            this.lastTimeWidth = ceil;
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            float currentPosition = PhotoViewer.this.videoPlayer != null ? ((float) PhotoViewer.this.videoPlayer.getCurrentPosition()) / ((float) PhotoViewer.this.videoPlayer.getDuration()) : 0.0f;
            if (PhotoViewer.this.playerWasReady) {
                PhotoViewer.this.videoPlayerSeekbar.setProgress(currentPosition);
            }
            PhotoViewer.this.videoTimelineView.setProgress(currentPosition);
        }

        public float getProgress() {
            return this.progress;
        }

        public void setProgress(float f) {
            if (this.progress != f) {
                this.progress = f;
                onProgressChanged(f);
            }
        }

        private void onProgressChanged(float f) {
            PhotoViewer.this.videoPlayerTime.setAlpha(f);
            PhotoViewer.this.exitFullscreenButton.setAlpha(f);
            if (this.seekBarTransitionEnabled) {
                PhotoViewer.this.videoPlayerTime.setPivotX(PhotoViewer.this.videoPlayerTime.getWidth());
                PhotoViewer.this.videoPlayerTime.setPivotY(PhotoViewer.this.videoPlayerTime.getHeight());
                float f2 = 1.0f - f;
                float f3 = 1.0f - (0.1f * f2);
                PhotoViewer.this.videoPlayerTime.setScaleX(f3);
                PhotoViewer.this.videoPlayerTime.setScaleY(f3);
                PhotoViewer.this.videoPlayerSeekbar.setTransitionProgress(f2);
                return;
            }
            if (this.translationYAnimationEnabled) {
                setTranslationY(AndroidUtilities.dpf2(24.0f) * (1.0f - f));
            }
            PhotoViewer.this.videoPlayerSeekbarView.setAlpha(f);
        }

        public void setSeekBarTransitionEnabled(boolean z) {
            if (this.seekBarTransitionEnabled != z) {
                this.seekBarTransitionEnabled = z;
                if (!z) {
                    PhotoViewer.this.videoPlayerTime.setScaleX(1.0f);
                    PhotoViewer.this.videoPlayerTime.setScaleY(1.0f);
                    PhotoViewer.this.videoPlayerSeekbar.setTransitionProgress(0.0f);
                } else {
                    setTranslationY(0.0f);
                    PhotoViewer.this.videoPlayerSeekbarView.setAlpha(1.0f);
                }
                onProgressChanged(this.progress);
            }
        }

        public void setTranslationYAnimationEnabled(boolean z) {
            if (this.translationYAnimationEnabled != z) {
                this.translationYAnimationEnabled = z;
                if (!z) {
                    setTranslationY(0.0f);
                }
                onProgressChanged(this.progress);
            }
        }
    }

    /* loaded from: classes4.dex */
    public static class CaptionTextViewSwitcher extends TextViewSwitcher {
        private float alpha;
        private FrameLayout container;
        private boolean inScrollView;
        private NestedScrollView scrollView;

        public CaptionTextViewSwitcher(Context context) {
            super(context);
            this.inScrollView = false;
            this.alpha = 1.0f;
        }

        public void setScrollView(NestedScrollView nestedScrollView) {
            this.scrollView = nestedScrollView;
        }

        public void setContainer(FrameLayout frameLayout) {
            this.container = frameLayout;
        }

        @Override // android.view.View
        public void setVisibility(int i) {
            setVisibility(i, true);
        }

        public void setVisibility(int i, boolean z) {
            super.setVisibility(i);
            if (this.inScrollView && z) {
                this.scrollView.setVisibility(i);
            }
        }

        @Override // android.view.View
        public void setAlpha(float f) {
            this.alpha = f;
            if (this.inScrollView) {
                this.scrollView.setAlpha(f);
            } else {
                super.setAlpha(f);
            }
        }

        @Override // android.view.View
        public float getAlpha() {
            if (this.inScrollView) {
                return this.alpha;
            }
            return super.getAlpha();
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            if (this.inScrollView) {
                this.scrollView.invalidate();
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            if (this.container == null || getParent() != this.container) {
                return;
            }
            this.inScrollView = true;
            this.scrollView.setVisibility(getVisibility());
            this.scrollView.setAlpha(this.alpha);
            super.setAlpha(1.0f);
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            if (this.inScrollView) {
                this.inScrollView = false;
                this.scrollView.setVisibility(8);
                super.setAlpha(this.alpha);
            }
        }
    }

    /* loaded from: classes4.dex */
    public static class CaptionScrollView extends NestedScrollView {
        private Method abortAnimatedScrollMethod;
        public float backgroundAlpha;
        private final FrameLayout captionContainer;
        private final CaptionTextViewSwitcher captionTextViewSwitcher;
        public boolean dontChangeTopMargin;
        private boolean isLandscape;
        private boolean nestedScrollStarted;
        private float overScrollY;
        private final Paint paint;
        private int pendingTopMargin;
        private int prevHeight;
        private OverScroller scroller;
        private final SpringAnimation springAnimation;
        private int textHash;
        private float velocitySign;
        private float velocityY;

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        protected float getBottomFadingEdgeStrength() {
            return 1.0f;
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        protected float getTopFadingEdgeStrength() {
            return 1.0f;
        }

        protected boolean isStatusBarVisible() {
            return true;
        }

        protected void onScrollEnd() {
        }

        protected void onScrollStart() {
        }

        protected void onScrollUpdate() {
        }

        public CaptionScrollView(Context context, CaptionTextViewSwitcher captionTextViewSwitcher, FrameLayout frameLayout) {
            super(context);
            Paint paint = new Paint(1);
            this.paint = paint;
            this.backgroundAlpha = 1.0f;
            this.pendingTopMargin = -1;
            this.captionTextViewSwitcher = captionTextViewSwitcher;
            this.captionContainer = frameLayout;
            setClipChildren(false);
            setOverScrollMode(2);
            paint.setColor(-16777216);
            setFadingEdgeLength(AndroidUtilities.dp(12.0f));
            setVerticalFadingEdgeEnabled(true);
            setWillNotDraw(false);
            SpringAnimation springAnimation = new SpringAnimation(captionTextViewSwitcher, DynamicAnimation.TRANSLATION_Y, 0.0f);
            this.springAnimation = springAnimation;
            springAnimation.getSpring().setStiffness(100.0f);
            springAnimation.setMinimumVisibleChange(1.0f);
            springAnimation.addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.PhotoViewer$CaptionScrollView$$ExternalSyntheticLambda1
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    PhotoViewer.CaptionScrollView.this.lambda$new$0(dynamicAnimation, f, f2);
                }
            });
            springAnimation.addEndListener(new DynamicAnimation.OnAnimationEndListener() { // from class: org.telegram.ui.PhotoViewer$CaptionScrollView$$ExternalSyntheticLambda0
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationEndListener
                public final void onAnimationEnd(DynamicAnimation dynamicAnimation, boolean z, float f, float f2) {
                    PhotoViewer.CaptionScrollView.this.lambda$new$1(dynamicAnimation, z, f, f2);
                }
            });
            springAnimation.getSpring().setDampingRatio(1.0f);
            try {
                Method declaredMethod = NestedScrollView.class.getDeclaredMethod("abortAnimatedScroll", new Class[0]);
                this.abortAnimatedScrollMethod = declaredMethod;
                declaredMethod.setAccessible(true);
            } catch (Exception e) {
                this.abortAnimatedScrollMethod = null;
                FileLog.e(e);
            }
            try {
                Field declaredField = NestedScrollView.class.getDeclaredField("mScroller");
                declaredField.setAccessible(true);
                this.scroller = (OverScroller) declaredField.get(this);
            } catch (Exception e2) {
                this.scroller = null;
                FileLog.e(e2);
            }
        }

        public /* synthetic */ void lambda$new$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            this.overScrollY = f;
            this.velocityY = f2;
            onScrollUpdate();
        }

        public /* synthetic */ void lambda$new$1(DynamicAnimation dynamicAnimation, boolean z, float f, float f2) {
            onScrollEnd();
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (motionEvent.getAction() != 0 || motionEvent.getY() >= (this.captionContainer.getTop() - getScrollY()) + this.captionTextViewSwitcher.getTranslationY()) {
                return super.onTouchEvent(motionEvent);
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // androidx.core.widget.NestedScrollView, android.widget.FrameLayout, android.view.View
        public void onMeasure(int i, int i2) {
            updateTopMargin(View.MeasureSpec.getSize(i), View.MeasureSpec.getSize(i2));
            super.onMeasure(i, i2);
        }

        public void applyPendingTopMargin() {
            this.dontChangeTopMargin = false;
            if (this.pendingTopMargin >= 0) {
                ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin = this.pendingTopMargin;
                this.pendingTopMargin = -1;
                requestLayout();
            }
        }

        public int getPendingMarginTopDiff() {
            int i = this.pendingTopMargin;
            if (i >= 0) {
                return i - ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin;
            }
            return 0;
        }

        public void updateTopMargin() {
            updateTopMargin(getWidth(), getHeight());
        }

        private void updateTopMargin(int i, int i2) {
            int calculateNewContainerMarginTop = calculateNewContainerMarginTop(i, i2);
            if (calculateNewContainerMarginTop >= 0) {
                if (this.dontChangeTopMargin) {
                    this.pendingTopMargin = calculateNewContainerMarginTop;
                    return;
                }
                ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin = calculateNewContainerMarginTop;
                this.pendingTopMargin = -1;
            }
        }

        public int calculateNewContainerMarginTop(int i, int i2) {
            int fontMetricsInt;
            int dp;
            if (i == 0 || i2 == 0) {
                return -1;
            }
            TextView currentView = this.captionTextViewSwitcher.getCurrentView();
            CharSequence text = currentView.getText();
            int hashCode = text.hashCode();
            Point point = AndroidUtilities.displaySize;
            boolean z = point.x > point.y;
            if (this.textHash == hashCode && this.isLandscape == z && this.prevHeight == i2) {
                return -1;
            }
            this.textHash = hashCode;
            this.isLandscape = z;
            this.prevHeight = i2;
            currentView.measure(View.MeasureSpec.makeMeasureSpec(i, 1073741824), View.MeasureSpec.makeMeasureSpec(i2, Integer.MIN_VALUE));
            Layout layout = currentView.getLayout();
            int lineCount = layout.getLineCount();
            if ((z && lineCount <= 2) || (!z && lineCount <= 5)) {
                fontMetricsInt = i2 - currentView.getMeasuredHeight();
                dp = this.captionTextViewSwitcher.getPaddingBottom();
            } else {
                int min = Math.min(z ? 2 : 5, lineCount);
                loop0: while (min > 1) {
                    int i3 = min - 1;
                    for (int lineStart = layout.getLineStart(i3); lineStart < layout.getLineEnd(i3); lineStart++) {
                        if (!Character.isWhitespace(text.charAt(lineStart))) {
                            break loop0;
                        }
                    }
                    min--;
                }
                fontMetricsInt = i2 - (currentView.getPaint().getFontMetricsInt(null) * min);
                dp = AndroidUtilities.dp(8.0f);
            }
            return fontMetricsInt - dp;
        }

        public void reset() {
            scrollTo(0, 0);
        }

        public void stopScrolling() {
            Method method = this.abortAnimatedScrollMethod;
            if (method != null) {
                try {
                    method.invoke(this, new Object[0]);
                } catch (Exception e) {
                    FileLog.e(e);
                }
            }
        }

        @Override // androidx.core.widget.NestedScrollView
        public void fling(int i) {
            super.fling(i);
            this.velocitySign = Math.signum(i);
            this.velocityY = 0.0f;
        }

        @Override // androidx.core.widget.NestedScrollView
        public boolean dispatchNestedPreScroll(int i, int i2, int[] iArr, int[] iArr2, int i3) {
            iArr[1] = 0;
            if (this.nestedScrollStarted) {
                float f = this.overScrollY;
                if ((f > 0.0f && i2 > 0) || (f < 0.0f && i2 < 0)) {
                    float f2 = i2;
                    float f3 = f - f2;
                    if (f > 0.0f) {
                        if (f3 < 0.0f) {
                            this.overScrollY = 0.0f;
                            iArr[1] = (int) (iArr[1] + f2 + f3);
                        } else {
                            this.overScrollY = f3;
                            iArr[1] = iArr[1] + i2;
                        }
                    } else if (f3 > 0.0f) {
                        this.overScrollY = 0.0f;
                        iArr[1] = (int) (iArr[1] + f2 + f3);
                    } else {
                        this.overScrollY = f3;
                        iArr[1] = iArr[1] + i2;
                    }
                    onScrollUpdate();
                    this.captionTextViewSwitcher.setTranslationY(this.overScrollY);
                    return true;
                }
            }
            return false;
        }

        @Override // androidx.core.widget.NestedScrollView
        public void dispatchNestedScroll(int i, int i2, int i3, int i4, int[] iArr, int i5, int[] iArr2) {
            float f;
            if (i4 != 0) {
                int round = Math.round(i4 * (1.0f - Math.abs((-this.overScrollY) / (this.captionContainer.getTop() - ((isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())))));
                if (round != 0) {
                    if (!this.nestedScrollStarted) {
                        if (!this.springAnimation.isRunning()) {
                            OverScroller overScroller = this.scroller;
                            float currVelocity = overScroller != null ? overScroller.getCurrVelocity() : Float.NaN;
                            if (Float.isNaN(currVelocity)) {
                                f = 0.0f;
                            } else {
                                Point point = AndroidUtilities.displaySize;
                                float min = Math.min(point.x > point.y ? 3000.0f : 5000.0f, currVelocity);
                                round = (int) ((round * min) / currVelocity);
                                f = min * (-this.velocitySign);
                            }
                            if (round != 0) {
                                float f2 = this.overScrollY - round;
                                this.overScrollY = f2;
                                this.captionTextViewSwitcher.setTranslationY(f2);
                            }
                            startSpringAnimationIfNotRunning(f);
                        }
                    } else {
                        float f3 = this.overScrollY - round;
                        this.overScrollY = f3;
                        this.captionTextViewSwitcher.setTranslationY(f3);
                    }
                }
                onScrollUpdate();
            }
        }

        private void startSpringAnimationIfNotRunning(float f) {
            if (this.springAnimation.isRunning()) {
                return;
            }
            this.springAnimation.setStartVelocity(f);
            this.springAnimation.start();
        }

        @Override // androidx.core.widget.NestedScrollView
        public boolean startNestedScroll(int i, int i2) {
            if (i2 == 0) {
                this.springAnimation.cancel();
                this.nestedScrollStarted = true;
                this.overScrollY = this.captionTextViewSwitcher.getTranslationY();
                onScrollStart();
            }
            return true;
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public void computeScroll() {
            OverScroller overScroller;
            super.computeScroll();
            if (!this.nestedScrollStarted && this.overScrollY != 0.0f && (overScroller = this.scroller) != null && overScroller.isFinished()) {
                startSpringAnimationIfNotRunning(0.0f);
            }
            onScrollUpdate();
        }

        @Override // androidx.core.widget.NestedScrollView
        public void stopNestedScroll(int i) {
            OverScroller overScroller;
            if (this.nestedScrollStarted && i == 0) {
                this.nestedScrollStarted = false;
                if (this.overScrollY != 0.0f && (overScroller = this.scroller) != null && overScroller.isFinished()) {
                    startSpringAnimationIfNotRunning(this.velocityY);
                }
                onScrollEnd();
            }
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public void draw(Canvas canvas) {
            int width = getWidth();
            int height = getHeight();
            int scrollY = getScrollY();
            int save = canvas.save();
            int i = height + scrollY;
            canvas.clipRect(0, scrollY, width, i);
            this.paint.setAlpha((int) (this.backgroundAlpha * 127.0f));
            canvas.drawRect(0.0f, this.captionContainer.getTop() + this.captionTextViewSwitcher.getTranslationY(), width, i, this.paint);
            super.draw(canvas);
            canvas.restoreToCount(save);
        }
    }

    public static PhotoViewer getPipInstance() {
        return PipInstance;
    }

    public static PhotoViewer getInstance() {
        PhotoViewer photoViewer = Instance;
        if (photoViewer == null) {
            synchronized (PhotoViewer.class) {
                photoViewer = Instance;
                if (photoViewer == null) {
                    photoViewer = new PhotoViewer();
                    Instance = photoViewer;
                }
            }
        }
        return photoViewer;
    }

    public boolean isOpenedFullScreenVideo() {
        return this.openedFullScreenVideo;
    }

    public static boolean hasInstance() {
        return Instance != null;
    }

    public PhotoViewer() {
        this.ALLOW_USE_SURFACE = Build.VERSION.SDK_INT >= 30;
        this.maxSelectedPhotos = -1;
        this.allowOrder = true;
        this.miniProgressShowRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda75
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$new$0();
            }
        };
        this.isActionBarVisible = true;
        this.closePhotoAfterSelect = true;
        this.actionBarItemsVisibility = new HashMap(3);
        this.backgroundDrawable = new BackgroundDrawable(-16777216);
        this.blackPaint = new Paint();
        this.photoProgressViews = new PhotoProgressView[3];
        this.onUserLeaveHintListener = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda76
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.onUserLeaveHint();
            }
        };
        this.pressedDrawable = new GradientDrawable[2];
        this.drawPressedDrawable = new boolean[2];
        this.pressedDrawableAlpha = new float[2];
        this.cropTransform = new CropTransform();
        this.leftCropTransform = new CropTransform();
        this.rightCropTransform = new CropTransform();
        this.shiftDp = -8.0f;
        this.bitmapPaint = new Paint(2);
        this.insets = new Rect();
        this.setLoadingRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.1
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                FileLoader.getInstance(PhotoViewer.this.currentMessageObject.currentAccount).setLoadingVideo(PhotoViewer.this.currentMessageObject.getDocument(), true, false);
            }
        };
        this.hideActionBarRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.2
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying && !ApplicationLoader.mainInterfacePaused) {
                    if (PhotoViewer.this.menuItem == null || !PhotoViewer.this.menuItem.isSubMenuShowing()) {
                        if (PhotoViewer.this.captionScrollView == null || PhotoViewer.this.captionScrollView.getScrollY() == 0) {
                            if (PhotoViewer.this.miniProgressView == null || PhotoViewer.this.miniProgressView.getVisibility() != 0) {
                                PhotoViewer photoViewer = PhotoViewer.PipInstance;
                                PhotoViewer photoViewer2 = PhotoViewer.this;
                                if (photoViewer == photoViewer2) {
                                    return;
                                }
                                photoViewer2.toggleActionBar(false, true);
                            }
                        }
                    }
                }
            }
        };
        this.savedVideoPositions = new ArrayMap<>();
        this.videoPlayerControlVisible = true;
        this.videoPlayerCurrentTime = new int[2];
        this.videoPlayerTotalTime = new int[2];
        this.fullscreenButton = new ImageView[3];
        this.pipPosition = new int[2];
        this.pipVideoOverlayAnimateFlag = true;
        this.lastImageId = -1;
        this.prevOrientation = -10;
        this.videoPlayerRewinder = new VideoPlayerRewinder() { // from class: org.telegram.ui.PhotoViewer.3
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void onRewindCanceled() {
                PhotoViewer.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                PhotoViewer.this.videoForwardDrawable.setShowing(false);
                PipVideoOverlay.onRewindCanceled();
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void updateRewindProgressUi(long j, float f, boolean z) {
                PhotoViewer.this.videoForwardDrawable.setTime(Math.abs(j));
                if (z) {
                    PhotoViewer.this.videoPlayerSeekbar.setProgress(f);
                    PhotoViewer.this.videoPlayerSeekbarView.invalidate();
                }
                PipVideoOverlay.onUpdateRewindProgressUi(j, f, z);
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void onRewindStart(boolean z) {
                PhotoViewer.this.videoForwardDrawable.setOneShootAnimation(false);
                PhotoViewer.this.videoForwardDrawable.setLeftSide(!z);
                PhotoViewer.this.videoForwardDrawable.setShowing(true);
                PhotoViewer.this.containerView.invalidate();
                PipVideoOverlay.onRewindStart(z);
            }
        };
        this.FLASH_VIEW_VALUE = new AnimationProperties.FloatProperty<View>("flashViewAlpha") { // from class: org.telegram.ui.PhotoViewer.4
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
            public void setValue(View view, float f) {
                view.setAlpha(f);
                if (PhotoViewer.this.photoCropView != null) {
                    PhotoViewer.this.photoCropView.setVideoThumbFlashAlpha(f);
                }
            }

            @Override // android.util.Property
            public Float get(View view) {
                return Float.valueOf(view.getAlpha());
            }
        };
        this.updateProgressRunnable = new 5();
        this.switchToInlineRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.6
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (!PipVideoOverlay.isVisible()) {
                    PhotoViewer.this.switchingInlineMode = false;
                    if (PhotoViewer.this.currentBitmap != null) {
                        PhotoViewer.this.currentBitmap.recycle();
                        PhotoViewer.this.currentBitmap = null;
                    }
                    PhotoViewer.this.changingTextureView = true;
                    TextureViewContainer textureViewContainer = new TextureViewContainer(PhotoViewer.this.parentActivity);
                    try {
                        if (PhotoViewer.this.usedSurfaceView) {
                            Drawable drawable = PhotoViewer.this.textureImageView.getDrawable();
                            if (drawable instanceof BitmapDrawable) {
                                PhotoViewer.this.currentBitmap = ((BitmapDrawable) drawable).getBitmap();
                            } else {
                                PhotoViewer photoViewer = PhotoViewer.this;
                                photoViewer.currentBitmap = Bitmaps.createBitmap(photoViewer.videoSurfaceView.getWidth(), PhotoViewer.this.videoSurfaceView.getHeight(), Bitmap.Config.ARGB_8888);
                                AndroidUtilities.getBitmapFromSurface(PhotoViewer.this.videoSurfaceView, PhotoViewer.this.currentBitmap);
                            }
                        } else {
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.currentBitmap = Bitmaps.createBitmap(photoViewer2.videoTextureView.getWidth(), PhotoViewer.this.videoTextureView.getHeight(), Bitmap.Config.ARGB_8888);
                            PhotoViewer.this.videoTextureView.getBitmap(PhotoViewer.this.currentBitmap);
                        }
                    } catch (Throwable th) {
                        if (PhotoViewer.this.currentBitmap != null) {
                            PhotoViewer.this.currentBitmap.recycle();
                            PhotoViewer.this.currentBitmap = null;
                        }
                        FileLog.e(th);
                    }
                    if (PhotoViewer.this.currentBitmap != null) {
                        if (PhotoViewer.this.textureImageView != null) {
                            PhotoViewer.this.textureImageView.setVisibility(0);
                            PhotoViewer.this.textureImageView.setImageBitmap(PhotoViewer.this.currentBitmap);
                        }
                        textureViewContainer.imageReceiver.setImageBitmap(PhotoViewer.this.currentBitmap);
                    }
                    PhotoViewer.this.isInline = true;
                    PhotoViewer.this.changedTextureView = textureViewContainer.textureView;
                    if (PipVideoOverlay.show(false, PhotoViewer.this.parentActivity, textureViewContainer, PhotoViewer.this.videoWidth, PhotoViewer.this.videoHeight, PhotoViewer.this.pipVideoOverlayAnimateFlag)) {
                        PipVideoOverlay.setPhotoViewer(PhotoViewer.this);
                    }
                    PhotoViewer.this.pipVideoOverlayAnimateFlag = true;
                    if (PhotoViewer.this.usedSurfaceView) {
                        if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                            PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoTextureView);
                            PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoSurfaceView);
                        }
                        PhotoViewer.this.videoPlayer.setSurfaceView(null);
                        PhotoViewer.this.videoPlayer.setTextureView(null);
                        PhotoViewer.this.videoPlayer.play();
                        PhotoViewer.this.videoPlayer.setTextureView(PhotoViewer.this.changedTextureView);
                        PhotoViewer.this.checkChangedTextureView(true);
                        PhotoViewer.this.changedTextureView.setVisibility(0);
                        return;
                    }
                    PhotoViewer.this.changedTextureView.setVisibility(4);
                    if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                        PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoTextureView);
                        PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoSurfaceView);
                        return;
                    }
                    return;
                }
                PipVideoOverlay.dismiss();
                AndroidUtilities.runOnUIThread(this, 250L);
            }
        };
        this.surfaceTextureListener = new TextureView.SurfaceTextureListener() { // from class: org.telegram.ui.PhotoViewer.7
            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i2) {
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i2) {
            }

            {
                PhotoViewer.this = this;
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
                if (PhotoViewer.this.videoTextureView != null && PhotoViewer.this.changingTextureView) {
                    if (PhotoViewer.this.switchingInlineMode) {
                        PhotoViewer.this.waitingForFirstTextureUpload = 2;
                    }
                    PhotoViewer.this.videoTextureView.setSurfaceTexture(surfaceTexture);
                    PhotoViewer.this.videoTextureView.setVisibility(0);
                    PhotoViewer.this.changingTextureView = false;
                    PhotoViewer.this.containerView.invalidate();
                    return false;
                }
                return true;
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
                if (PhotoViewer.this.waitingForFirstTextureUpload == 1) {
                    PhotoViewer.this.checkChangedTextureView(true);
                }
            }
        };
        this.animationValues = (float[][]) Array.newInstance(float.class, 2, 13);
        this.updateContainerFlagsRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda68
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$new$5();
            }
        };
        this.leftImage = new ImageReceiver();
        this.centerImage = new ImageReceiver() { // from class: org.telegram.ui.PhotoViewer.10
            {
                PhotoViewer.this = this;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.messenger.ImageReceiver
            public boolean setImageBitmapByKey(Drawable drawable, String str, int i, boolean z, int i2) {
                boolean imageBitmapByKey = super.setImageBitmapByKey(drawable, str, i, z, i2);
                PhotoViewer.this.prepareSegmentImage();
                return imageBitmapByKey;
            }
        };
        this.rightImage = new ImageReceiver();
        this.leftBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda79(this));
        this.centerBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda79(this));
        this.rightBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda79(this));
        this.centerImageTransformLocked = false;
        this.centerImageTransform = new Matrix();
        this.videoFrameBitmapPaint = new Paint();
        this.videoFrameBitmap = null;
        this.editState = new EditState();
        this.currentFileNames = new String[3];
        this.endReached = new boolean[]{false, true};
        this.scale = 1.0f;
        this.rotate = 0.0f;
        this.mirror = 0.0f;
        this.switchingToMode = -1;
        this.interpolator = new DecelerateInterpolator(1.5f);
        this.pinchStartScale = 1.0f;
        this.pinchStartRotate = 0.0f;
        this.canZoom = true;
        this.canDragDown = true;
        this.shownControlsByEnd = false;
        this.actionBarWasShownBeforeByEnd = false;
        this.imagesArrTemp = new ArrayList<>();
        this.imagesByIdsTemp = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.imagesArr = new ArrayList<>();
        this.imagesByIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.imagesArrLocations = new ArrayList<>();
        this.imagesArrLocationsVideo = new ArrayList<>();
        this.imagesArrLocationsSizes = new ArrayList<>();
        this.imagesArrMessages = new ArrayList<>();
        this.secureDocuments = new ArrayList<>();
        this.avatarsArr = new ArrayList<>();
        this.imagesArrLocals = new ArrayList<>();
        this.currentAvatarLocation = null;
        this.savedState = null;
        this.hitRect = new Rect();
        this.transitionNotificationLocker = new AnimationNotificationsLocker(new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.mediaCountDidLoad, NotificationCenter.mediaDidLoad, NotificationCenter.dialogPhotosUpdate});
        this.longPressRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda67
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.onLongPress();
            }
        };
        this.tempInt = new int[2];
        this.captureFrameAtTime = -1L;
        this.captureFrameReadyAtTime = -1L;
        this.needCaptureFrameReadyAtTime = -1L;
        this.compressionsCount = -1;
        this.blurAlpha = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda79(this), 180L, CubicBezierInterpolator.EASE_OUT);
        this.blackPaint.setColor(-16777216);
        this.videoFrameBitmapPaint.setColor(-1);
        this.centerImage.setFileLoadingPriority(3);
    }

    /* JADX WARN: Code restructure failed: missing block: B:822:0x05b8, code lost:
        if (r1.get(r1.size() - 1).getDialogId() != r30.mergeDialogId) goto L356;
     */
    /* JADX WARN: Code restructure failed: missing block: B:836:0x05f9, code lost:
        if (r30.imagesArrTemp.get(0).getDialogId() != r30.mergeDialogId) goto L356;
     */
    /* JADX WARN: Code restructure failed: missing block: B:837:0x05fb, code lost:
        r1 = 1;
        r11 = 0;
     */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        int i3;
        int id;
        int i4;
        TLRPC$Chat chat;
        TLRPC$User tLRPC$User;
        ImageLocation forUserOrChat;
        ArrayList<TLRPC$PhotoSize> arrayList;
        int i5;
        MessageObject messageObject;
        TLRPC$BotInlineResult tLRPC$BotInlineResult;
        PageBlocksAdapter pageBlocksAdapter;
        float f = 1.0f;
        int i6 = 3;
        int i7 = 2;
        int i8 = 0;
        if (i == NotificationCenter.fileLoadFailed) {
            String str = (String) objArr[0];
            int i9 = 0;
            while (i9 < 3) {
                String[] strArr = this.currentFileNames;
                if (strArr[i9] != null && strArr[i9].equals(str)) {
                    this.photoProgressViews[i9].setProgress(1.0f, i9 == 0 || (i9 == 1 && this.sideImage == this.rightImage) || (i9 == 2 && this.sideImage == this.leftImage));
                    checkProgress(i9, false, true);
                    return;
                }
                i9++;
            }
        } else if (i == NotificationCenter.customStickerCreated) {
            closePhoto(false, false);
        } else if (i == NotificationCenter.fileLoaded) {
            String str2 = (String) objArr[0];
            int i10 = 0;
            while (i10 < 3) {
                String[] strArr2 = this.currentFileNames;
                if (strArr2[i10] != null && strArr2[i10].equals(str2)) {
                    boolean z = i10 == 0 || (i10 == 1 && this.sideImage == this.rightImage) || (i10 == 2 && this.sideImage == this.leftImage);
                    this.photoProgressViews[i10].setProgress(1.0f, z);
                    checkProgress(i10, false, z);
                    if (this.videoPlayer == null && i10 == 0 && (((messageObject = this.currentMessageObject) != null && messageObject.isVideo()) || (((tLRPC$BotInlineResult = this.currentBotInlineResult) != null && (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) || ((pageBlocksAdapter = this.pageBlocksAdapter) != null && (pageBlocksAdapter.isVideo(this.currentIndex) || this.pageBlocksAdapter.isHardwarePlayer(this.currentIndex)))))) {
                        onActionClick(false);
                    }
                    if (i10 != 0 || this.videoPlayer == null) {
                        return;
                    }
                    this.currentVideoFinishedLoading = true;
                    return;
                }
                i10++;
            }
        } else if (i == NotificationCenter.fileLoadProgressChanged) {
            String str3 = (String) objArr[0];
            int i11 = 0;
            while (i11 < i6) {
                String[] strArr3 = this.currentFileNames;
                if (strArr3[i11] != null && strArr3[i11].equals(str3)) {
                    float min = Math.min(f, ((float) ((Long) objArr[1]).longValue()) / ((float) ((Long) objArr[i7]).longValue()));
                    this.photoProgressViews[i11].setProgress(min, i11 == 0 || (i11 == 1 && this.sideImage == this.rightImage) || (i11 == i7 && this.sideImage == this.leftImage));
                    if (i11 == 0 && this.videoPlayer != null && this.videoPlayerSeekbar != null) {
                        if (!this.currentVideoFinishedLoading) {
                            long elapsedRealtime = SystemClock.elapsedRealtime();
                            if (Math.abs(elapsedRealtime - this.lastBufferedPositionCheck) >= 500) {
                                float f2 = this.seekToProgressPending;
                                if (f2 == 0.0f) {
                                    long duration = this.videoPlayer.getDuration();
                                    long currentPosition = this.videoPlayer.getCurrentPosition();
                                    f2 = (duration < 0 || duration == -9223372036854775807L || currentPosition < 0) ? 0.0f : ((float) currentPosition) / ((float) duration);
                                }
                                f = this.isStreaming ? FileLoader.getInstance(this.currentAccount).getBufferedProgressFromPosition(f2, this.currentFileNames[0]) : 1.0f;
                                this.lastBufferedPositionCheck = elapsedRealtime;
                            } else {
                                f = -1.0f;
                            }
                        }
                        if (f != -1.0f) {
                            this.videoPlayerSeekbar.setBufferedProgress(f);
                            PipVideoOverlay.setBufferedProgress(f);
                            this.videoPlayerSeekbarView.invalidate();
                        }
                        checkBufferedProgress(min);
                    }
                }
                i11++;
                f = 1.0f;
                i6 = 3;
                i7 = 2;
            }
        } else {
            int i12 = -1;
            if (i == NotificationCenter.dialogPhotosUpdate) {
                MessagesController.DialogPhotos dialogPhotos = (MessagesController.DialogPhotos) objArr[0];
                if (this.avatarsDialogId == dialogPhotos.dialogId) {
                    this.dialogPhotos = dialogPhotos;
                    ArrayList arrayList2 = new ArrayList(dialogPhotos.photos);
                    this.imagesArrLocations.clear();
                    this.imagesArrLocationsSizes.clear();
                    this.imagesArrLocationsVideo.clear();
                    this.imagesArrMessages.clear();
                    this.avatarsArr.clear();
                    int i13 = 0;
                    int i14 = -1;
                    while (i13 < arrayList2.size()) {
                        TLRPC$Photo tLRPC$Photo = (TLRPC$Photo) arrayList2.get(i13);
                        if (tLRPC$Photo == null || (tLRPC$Photo instanceof TLRPC$TL_photoEmpty) || (arrayList = tLRPC$Photo.sizes) == null) {
                            this.imagesArrLocations.add(null);
                            this.imagesArrLocationsSizes.add(null);
                            this.imagesArrLocationsVideo.add(null);
                            this.imagesArrMessages.add(null);
                            this.avatarsArr.add(null);
                        } else {
                            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 640);
                            TLRPC$VideoSize closestVideoSizeWithSize = tLRPC$Photo.video_sizes.isEmpty() ? null : FileLoader.getClosestVideoSizeWithSize(tLRPC$Photo.video_sizes, 1000);
                            if (closestPhotoSizeWithSize != null) {
                                if (i14 == i12 && this.currentFileLocation != null) {
                                    int i15 = 0;
                                    while (true) {
                                        if (i15 >= tLRPC$Photo.sizes.size()) {
                                            break;
                                        }
                                        TLRPC$FileLocation tLRPC$FileLocation = tLRPC$Photo.sizes.get(i15).location;
                                        if (tLRPC$FileLocation != null) {
                                            int i16 = tLRPC$FileLocation.local_id;
                                            TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated = this.currentFileLocation.location;
                                            if (i16 == tLRPC$TL_fileLocationToBeDeprecated.local_id && tLRPC$FileLocation.volume_id == tLRPC$TL_fileLocationToBeDeprecated.volume_id) {
                                                i14 = this.imagesArrLocations.size();
                                                break;
                                            }
                                        }
                                        i15++;
                                    }
                                }
                                if (i14 == i12 && this.currentFileLocation != null) {
                                    int i17 = 0;
                                    while (i17 < tLRPC$Photo.video_sizes.size()) {
                                        TLRPC$FileLocation tLRPC$FileLocation2 = tLRPC$Photo.video_sizes.get(i17).location;
                                        if (tLRPC$FileLocation2 != null) {
                                            int i18 = tLRPC$FileLocation2.local_id;
                                            TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated2 = this.currentFileLocation.location;
                                            if (i18 == tLRPC$TL_fileLocationToBeDeprecated2.local_id) {
                                                i5 = i14;
                                                if (tLRPC$FileLocation2.volume_id == tLRPC$TL_fileLocationToBeDeprecated2.volume_id) {
                                                    i14 = this.imagesArrLocations.size();
                                                    break;
                                                } else {
                                                    i17++;
                                                    i14 = i5;
                                                }
                                            }
                                        }
                                        i5 = i14;
                                        i17++;
                                        i14 = i5;
                                    }
                                }
                                i14 = i14;
                                int i19 = tLRPC$Photo.dc_id;
                                if (i19 != 0) {
                                    TLRPC$FileLocation tLRPC$FileLocation3 = closestPhotoSizeWithSize.location;
                                    tLRPC$FileLocation3.dc_id = i19;
                                    tLRPC$FileLocation3.file_reference = tLRPC$Photo.file_reference;
                                }
                                ImageLocation forPhoto = ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo);
                                ImageLocation forPhoto2 = closestVideoSizeWithSize != null ? ImageLocation.getForPhoto(closestVideoSizeWithSize, tLRPC$Photo) : forPhoto;
                                if (forPhoto != null) {
                                    this.imagesArrLocations.add(forPhoto);
                                    this.imagesArrLocationsSizes.add(forPhoto2 != null ? Long.valueOf(forPhoto2.currentSize) : null);
                                    this.imagesArrLocationsVideo.add(forPhoto2);
                                    this.imagesArrMessages.add(null);
                                    this.avatarsArr.add(tLRPC$Photo);
                                }
                            }
                        }
                        i13++;
                        i12 = -1;
                    }
                    if (!this.avatarsArr.isEmpty()) {
                        this.menuItem.showSubItem(6);
                    } else {
                        this.menuItem.hideSubItem(6);
                    }
                    this.needSearchImageInArr = false;
                    this.currentIndex = -1;
                    if (i14 != -1) {
                        setImageIndex(i14);
                        return;
                    }
                    if (this.avatarsDialogId > 0) {
                        tLRPC$User = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId));
                        chat = null;
                    } else {
                        chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                        tLRPC$User = null;
                    }
                    if (tLRPC$User == null && chat == null) {
                        return;
                    }
                    if (tLRPC$User != null) {
                        forUserOrChat = ImageLocation.getForUserOrChat(tLRPC$User, 0);
                    } else {
                        forUserOrChat = ImageLocation.getForUserOrChat(chat, 0);
                    }
                    if (forUserOrChat != null) {
                        if (!this.imagesArrLocations.isEmpty() && this.imagesArrLocations.get(0) != null && this.imagesArrLocations.get(0).photoId == forUserOrChat.photoId) {
                            this.imagesArrLocations.remove(0);
                            this.avatarsArr.remove(0);
                            this.imagesArrLocationsSizes.remove(0);
                            this.imagesArrLocationsVideo.remove(0);
                            this.imagesArrMessages.remove(0);
                        }
                        this.imagesArrLocations.add(0, forUserOrChat);
                        this.avatarsArr.add(0, new TLRPC$TL_photoEmpty());
                        ArrayList<Long> arrayList3 = this.imagesArrLocationsSizes;
                        ImageLocation imageLocation = this.currentFileLocationVideo;
                        arrayList3.add(0, imageLocation != null ? Long.valueOf(imageLocation.currentSize) : null);
                        this.imagesArrLocationsVideo.add(0, this.currentFileLocationVideo);
                        this.imagesArrMessages.add(0, null);
                        setImageIndex(0);
                    }
                }
            } else if (i == NotificationCenter.mediaCountDidLoad) {
                long longValue = ((Long) objArr[0]).longValue();
                long longValue2 = ((Long) objArr[1]).longValue();
                if (this.topicId == longValue2) {
                    if (longValue == this.currentDialogId || longValue == this.mergeDialogId) {
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2 == null || MediaDataController.getMediaType(messageObject2.messageOwner) == this.sharedMediaType) {
                            if (longValue == this.currentDialogId) {
                                this.totalImagesCount = ((Integer) objArr[2]).intValue();
                            } else {
                                this.totalImagesCountMerge = ((Integer) objArr[2]).intValue();
                            }
                            if (this.needSearchImageInArr && this.isFirstLoading) {
                                this.isFirstLoading = false;
                                this.loadingMoreImages = true;
                                MediaDataController.getInstance(this.currentAccount).loadMedia(this.currentDialogId, 20, 0, 0, this.sharedMediaType, longValue2, 1, this.classGuid, 0, this.currentFilterTag, null);
                            } else if (!this.imagesArr.isEmpty()) {
                                setIsAboutToSwitchToIndex(this.switchingToIndex, true, true);
                            }
                        }
                    }
                }
            } else if (i == NotificationCenter.mediaDidLoad) {
                long longValue3 = ((Long) objArr[0]).longValue();
                int intValue = ((Integer) objArr[3]).intValue();
                long j = this.currentDialogId;
                if ((longValue3 == j || longValue3 == this.mergeDialogId) && intValue == this.classGuid) {
                    this.loadingMoreImages = false;
                    char c = longValue3 == j ? (char) 0 : (char) 1;
                    ArrayList arrayList4 = (ArrayList) objArr[2];
                    this.endReached[c] = ((Boolean) objArr[5]).booleanValue();
                    boolean booleanValue = ((Boolean) objArr[6]).booleanValue();
                    if (this.needSearchImageInArr) {
                        if ((arrayList4.isEmpty() && (c != 0 || this.mergeDialogId == 0)) || (i3 = this.currentIndex) < 0 || i3 >= this.imagesArr.size()) {
                            this.needSearchImageInArr = false;
                            return;
                        }
                        MessageObject messageObject3 = this.imagesArr.get(this.currentIndex);
                        int i20 = -1;
                        int i21 = 0;
                        for (int i22 = 0; i22 < arrayList4.size(); i22++) {
                            MessageObject messageObject4 = (MessageObject) arrayList4.get(i22);
                            if (this.imagesByIdsTemp[c].indexOfKey(messageObject4.getId()) < 0) {
                                this.imagesByIdsTemp[c].put(messageObject4.getId(), messageObject4);
                                if (this.opennedFromMedia) {
                                    this.imagesArrTemp.add(messageObject4);
                                    if (messageObject4.getId() == messageObject3.getId()) {
                                        i20 = i21;
                                    }
                                    i21++;
                                } else {
                                    i21++;
                                    this.imagesArrTemp.add(0, messageObject4);
                                    if (messageObject4.getId() == messageObject3.getId()) {
                                        i20 = arrayList4.size() - i21;
                                    }
                                }
                            }
                        }
                        if (i21 == 0 && (c != 0 || this.mergeDialogId == 0)) {
                            this.totalImagesCount = this.imagesArr.size();
                            this.totalImagesCountMerge = 0;
                        }
                        if (i20 != -1) {
                            this.imagesArr.clear();
                            this.imagesArr.addAll(this.imagesArrTemp);
                            for (int i23 = 0; i23 < 2; i23++) {
                                this.imagesByIds[i23] = this.imagesByIdsTemp[i23].clone();
                                this.imagesByIdsTemp[i23].clear();
                            }
                            this.imagesArrTemp.clear();
                            this.needSearchImageInArr = false;
                            this.currentIndex = -1;
                            if (i20 >= this.imagesArr.size()) {
                                i20 = this.imagesArr.size() - 1;
                            }
                            setImageIndex(i20);
                            return;
                        }
                        if (this.opennedFromMedia) {
                            if (this.imagesArrTemp.isEmpty()) {
                                id = 0;
                            } else {
                                ArrayList<MessageObject> arrayList5 = this.imagesArrTemp;
                                id = arrayList5.get(arrayList5.size() - 1).getId();
                            }
                            if (c == 0 && this.endReached[c] && this.mergeDialogId != 0) {
                                if (!this.imagesArrTemp.isEmpty()) {
                                    ArrayList<MessageObject> arrayList6 = this.imagesArrTemp;
                                }
                                i4 = id;
                                c = 1;
                            }
                            i4 = id;
                        } else {
                            id = this.imagesArrTemp.isEmpty() ? 0 : this.imagesArrTemp.get(0).getId();
                            if (c == 0 && this.endReached[c] && this.mergeDialogId != 0) {
                                if (!this.imagesArrTemp.isEmpty()) {
                                }
                                i4 = id;
                                c = 1;
                            }
                            i4 = id;
                        }
                        if (this.endReached[c]) {
                            return;
                        }
                        this.loadingMoreImages = true;
                        MediaDataController.getInstance(this.currentAccount).loadMedia(c == 0 ? this.currentDialogId : this.mergeDialogId, 40, i4, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                        return;
                    }
                    int i24 = 0;
                    for (int i25 = 0; i25 < arrayList4.size(); i25++) {
                        MessageObject messageObject5 = (MessageObject) arrayList4.get(booleanValue ? (arrayList4.size() - 1) - i25 : i25);
                        if (this.imagesByIds[c].indexOfKey(messageObject5.getId()) < 0) {
                            i24++;
                            if (!this.opennedFromMedia) {
                                this.imagesArr.add(0, messageObject5);
                            } else if (booleanValue) {
                                this.imagesArr.add(0, messageObject5);
                                int i26 = this.startOffset - 1;
                                this.startOffset = i26;
                                this.currentIndex++;
                                if (i26 < 0) {
                                    this.startOffset = 0;
                                }
                            } else {
                                this.imagesArr.add(messageObject5);
                            }
                            this.imagesByIds[c].put(messageObject5.getId(), messageObject5);
                        }
                    }
                    if (this.opennedFromMedia) {
                        if (i24 != 0 || booleanValue) {
                            return;
                        }
                        this.totalImagesCount = this.startOffset + this.imagesArr.size();
                        this.totalImagesCountMerge = 0;
                    } else if (i24 != 0) {
                        int i27 = this.currentIndex;
                        this.currentIndex = -1;
                        setImageIndex(i27 + i24);
                    } else {
                        this.totalImagesCount = this.imagesArr.size();
                        this.totalImagesCountMerge = 0;
                    }
                }
            } else if (i == NotificationCenter.emojiLoaded) {
                CaptionTextViewSwitcher captionTextViewSwitcher = this.captionTextViewSwitcher;
                if (captionTextViewSwitcher != null) {
                    captionTextViewSwitcher.invalidateViews();
                }
            } else if (i == NotificationCenter.filePreparingFailed) {
                MessageObject messageObject6 = (MessageObject) objArr[0];
                if (this.loadInitialVideo) {
                    this.loadInitialVideo = false;
                    this.progressView.setVisibility(4);
                    preparePlayer(this.currentPlayingVideoFile, false, false, this.editState.savedFilterState);
                } else if (this.tryStartRequestPreviewOnFinish) {
                    releasePlayer(false);
                    this.tryStartRequestPreviewOnFinish = !MediaController.getInstance().scheduleVideoConvert(this.videoPreviewMessageObject, true, true);
                } else if (messageObject6 == this.videoPreviewMessageObject) {
                    this.requestingPreview = false;
                    this.progressView.setVisibility(4);
                }
            } else if (i == NotificationCenter.fileNewChunkAvailable) {
                if (((MessageObject) objArr[0]) == this.videoPreviewMessageObject) {
                    String str4 = (String) objArr[1];
                    long longValue4 = ((Long) objArr[3]).longValue();
                    this.photoProgressViews[0].setProgress(((Float) objArr[4]).floatValue(), true);
                    if (longValue4 != 0) {
                        this.requestingPreview = false;
                        this.photoProgressViews[0].setProgress(1.0f, true);
                        this.photoProgressViews[0].setBackgroundState(3, true, true);
                        preparePlayer(Uri.fromFile(new File(str4)), false, true, this.editState.savedFilterState);
                    }
                }
            } else if (i == NotificationCenter.messagesDeleted) {
                int i28 = 2;
                if (((Boolean) objArr[2]).booleanValue()) {
                    return;
                }
                long longValue5 = ((Long) objArr[1]).longValue();
                ArrayList arrayList7 = (ArrayList) objArr[0];
                int i29 = 0;
                boolean z2 = false;
                boolean z3 = false;
                while (i29 < i28) {
                    ArrayList<MessageObject> arrayList8 = i29 == 0 ? this.imagesArr : this.imagesArrTemp;
                    SparseArray<MessageObject>[] sparseArrayArr = i29 == 0 ? this.imagesByIds : this.imagesByIdsTemp;
                    if (!arrayList8.isEmpty()) {
                        int i30 = 0;
                        while (i30 < 2) {
                            if (sparseArrayArr[i30].size() > 0 && sparseArrayArr[i30].valueAt(i8).messageOwner.peer_id.channel_id == longValue5) {
                                int size = arrayList7.size();
                                for (int i31 = 0; i31 < size; i31++) {
                                    int intValue2 = ((Integer) arrayList7.get(i31)).intValue();
                                    MessageObject messageObject7 = sparseArrayArr[i30].get(((Integer) arrayList7.get(i31)).intValue());
                                    if (messageObject7 != null) {
                                        sparseArrayArr[i30].remove(intValue2);
                                        arrayList8.remove(messageObject7);
                                        if (i30 == 0) {
                                            this.totalImagesCount--;
                                        } else {
                                            this.totalImagesCountMerge--;
                                        }
                                        if (messageObject7 == this.currentMessageObject) {
                                            z3 = true;
                                        }
                                        z2 = true;
                                    }
                                }
                            }
                            i30++;
                            i8 = 0;
                        }
                    }
                    i29++;
                    i28 = 2;
                    i8 = 0;
                }
                if (z2) {
                    if (z3 && this == PipInstance) {
                        destroyPhotoViewer();
                    } else if (!this.imagesArr.isEmpty()) {
                        int i32 = this.currentIndex;
                        this.currentIndex = -1;
                        if (i32 >= this.imagesArr.size()) {
                            i32 = this.imagesArr.size() - 1;
                        }
                        setImageIndex(i32);
                    } else {
                        closePhoto(false, true);
                    }
                }
            }
        }
    }

    public void showDownloadAlert() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this.parentActivity, this.resourcesProvider);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        MessageObject messageObject = this.currentMessageObject;
        boolean z = false;
        if (messageObject != null && messageObject.isVideo() && FileLoader.getInstance(this.currentMessageObject.currentAccount).isLoadingFile(this.currentFileNames[0])) {
            z = true;
        }
        if (z) {
            builder.setMessage(LocaleController.getString("PleaseStreamDownload", R.string.PleaseStreamDownload));
        } else {
            builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
        }
        showAlertDialog(builder);
    }

    public void onSharePressed() {
        boolean z;
        if (this.parentActivity == null || !this.allowShare) {
            return;
        }
        try {
            MessageObject messageObject = this.currentMessageObject;
            boolean z2 = false;
            File file = null;
            if (messageObject != null) {
                z2 = messageObject.isVideo();
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    File file2 = new File(this.currentMessageObject.messageOwner.attachPath);
                    if (file2.exists()) {
                        file = file2;
                    }
                }
                if (file == null) {
                    file = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                }
            } else if (this.currentFileLocationVideo != null) {
                FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                TLRPC$FileLocation fileLocation = getFileLocation(this.currentFileLocationVideo);
                String fileLocationExt = getFileLocationExt(this.currentFileLocationVideo);
                if (this.avatarsDialogId == 0 && !this.isEvent) {
                    z = false;
                    file = fileLoader.getPathToAttach(fileLocation, fileLocationExt, z);
                }
                z = true;
                file = fileLoader.getPathToAttach(fileLocation, fileLocationExt, z);
            } else {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    file = pageBlocksAdapter.getFile(this.currentIndex);
                }
            }
            if (file != null && !file.exists()) {
                file = new File(FileLoader.getDirectory(4), file.getName());
            }
            if (file != null && file.exists()) {
                Intent intent = new Intent("android.intent.action.SEND");
                if (z2) {
                    intent.setType("video/mp4");
                } else {
                    MessageObject messageObject2 = this.currentMessageObject;
                    if (messageObject2 != null) {
                        intent.setType(messageObject2.getMimeType());
                    } else {
                        intent.setType("image/jpeg");
                    }
                }
                if (Build.VERSION.SDK_INT >= 24) {
                    try {
                        Activity activity = this.parentActivity;
                        intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(activity, ApplicationLoader.getApplicationId() + ".provider", file));
                        intent.setFlags(1);
                    } catch (Exception unused) {
                        intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file));
                    }
                } else {
                    intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file));
                }
                this.parentActivity.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
                return;
            }
            showDownloadAlert();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void setScaleToFill() {
        float bitmapWidth = this.centerImage.getBitmapWidth();
        float bitmapHeight = this.centerImage.getBitmapHeight();
        if (bitmapWidth == 0.0f || bitmapHeight == 0.0f) {
            return;
        }
        float containerViewWidth = getContainerViewWidth();
        float containerViewHeight = getContainerViewHeight();
        float min = Math.min(containerViewHeight / bitmapHeight, containerViewWidth / bitmapWidth);
        float max = Math.max(containerViewWidth / ((int) (bitmapWidth * min)), containerViewHeight / ((int) (bitmapHeight * min)));
        this.scale = max;
        updateMinMax(max);
    }

    public void setParentAlert(ChatAttachAlert chatAttachAlert) {
        this.parentAlert = chatAttachAlert;
    }

    public void setParentActivity(Activity activity) {
        setParentActivity(activity, null, null);
    }

    public void setParentActivity(Activity activity, Theme.ResourcesProvider resourcesProvider) {
        setParentActivity(activity, null, resourcesProvider);
    }

    public void setParentActivity(BaseFragment baseFragment) {
        setParentActivity(baseFragment, (Theme.ResourcesProvider) null);
    }

    public void setParentActivity(BaseFragment baseFragment, Theme.ResourcesProvider resourcesProvider) {
        setParentActivity(null, baseFragment, resourcesProvider);
    }

    public void setParentActivity(Activity activity, BaseFragment baseFragment, final Theme.ResourcesProvider resourcesProvider) {
        final Activity parentActivity = activity != null ? activity : baseFragment.getParentActivity();
        Theme.createChatResources(parentActivity, false);
        this.resourcesProvider = resourcesProvider;
        this.parentFragment = baseFragment;
        int i = UserConfig.selectedAccount;
        this.currentAccount = i;
        this.centerImage.setCurrentAccount(i);
        this.leftImage.setCurrentAccount(this.currentAccount);
        this.rightImage.setCurrentAccount(this.currentAccount);
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer != null) {
            captionPhotoViewer.setAccount(this.currentAccount);
        }
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setCurrentAccount(this.currentAccount);
        }
        if (this.parentActivity == parentActivity || parentActivity == null) {
            updateColors();
            return;
        }
        this.inBubbleMode = parentActivity instanceof BubbleActivity;
        this.parentActivity = parentActivity;
        this.activityContext = new ContextThemeWrapper(this.parentActivity, R.style.Theme_TMessages);
        this.touchSlop = ViewConfiguration.get(this.parentActivity).getScaledTouchSlop();
        if (progressDrawables == null) {
            progressDrawables = new Drawable[]{ContextCompat.getDrawable(this.parentActivity, R.drawable.circle_big), ContextCompat.getDrawable(this.parentActivity, R.drawable.cancel_big), ContextCompat.getDrawable(this.parentActivity, R.drawable.load_big)};
        }
        this.scroller = new Scroller(parentActivity);
        13 r0 = new 13(parentActivity);
        this.windowView = r0;
        r0.setBackgroundDrawable(this.backgroundDrawable);
        this.windowView.setFocusable(false);
        ClippingImageView clippingImageView = new ClippingImageView(parentActivity);
        this.animatingImageView = clippingImageView;
        clippingImageView.setAnimationValues(this.animationValues);
        this.windowView.addView(this.animatingImageView, LayoutHelper.createFrame(40, 40.0f));
        FrameLayoutDrawer frameLayoutDrawer = new FrameLayoutDrawer(parentActivity, parentActivity) { // from class: org.telegram.ui.PhotoViewer.14
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
            public int getBottomPadding() {
                return PhotoViewer.this.pickerView.getHeight();
            }

            @Override // android.view.ViewGroup, android.view.View
            public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                PhotoViewer.this.textSelectionHelper.getOverlayView(getContext()).checkCancelAction(motionEvent);
                if (PhotoViewer.this.textSelectionHelper.isInSelectionMode()) {
                    PhotoViewer.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent);
                    return true;
                }
                return super.dispatchTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.PhotoViewer.FrameLayoutDrawer, android.view.ViewGroup
            protected boolean drawChild(Canvas canvas, View view, long j) {
                if (view == PhotoViewer.this.textSelectionHelper.getOverlayView(PhotoViewer.this.windowView.getContext()) || view == PhotoViewer.this.stickerMakerBackgroundView) {
                    return false;
                }
                return super.drawChild(canvas, view, j);
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
            public void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
                PhotoViewer.this.textSelectionHelper.getOverlayView(PhotoViewer.this.windowView.getContext()).draw(canvas);
            }

            @Override // org.telegram.ui.PhotoViewer.FrameLayoutDrawer, org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
            protected void onLayout(boolean z, int i2, int i3, int i4, int i5) {
                if (PhotoViewer.this.btnLayout != null && PhotoViewer.this.undoBtn != null) {
                    int dp = (i4 - i2) - AndroidUtilities.dp(20.0f);
                    PhotoViewer.this.undoBtn.setTranslationY(((-dp) / 2.0f) - AndroidUtilities.dp(47.0f));
                    float f = dp / 2.0f;
                    PhotoViewer.this.btnLayout.setTranslationY(AndroidUtilities.dp(47.0f) + f);
                    PhotoViewer.this.cutOutBtn.setTranslationY(AndroidUtilities.dp(47.0f) + f);
                    PhotoViewer.this.outlineBtn.setTranslationY(f + AndroidUtilities.dp(95.0f));
                }
                super.onLayout(z, i2, i3, i4, i5);
            }
        };
        this.containerView = frameLayoutDrawer;
        frameLayoutDrawer.setFocusable(false);
        this.containerView.setClipChildren(true);
        this.containerView.setClipToPadding(true);
        this.windowView.setClipChildren(false);
        this.windowView.setClipToPadding(false);
        BlurringShader.BlurManager blurManager = new BlurringShader.BlurManager(this.containerView);
        this.blurManager = blurManager;
        blurManager.padding = 1;
        this.shadowBlurer = new BlurringShader.StoryBlurDrawer(blurManager, this.containerView, 6);
        this.windowView.addView(this.containerView, LayoutHelper.createFrame(-1, -1, 51));
        int i2 = Build.VERSION.SDK_INT;
        if (i2 >= 21) {
            this.containerView.setFitsSystemWindows(true);
            this.containerView.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda25
                @Override // android.view.View.OnApplyWindowInsetsListener
                public final WindowInsets onApplyWindowInsets(View view, WindowInsets windowInsets) {
                    WindowInsets lambda$setParentActivity$6;
                    lambda$setParentActivity$6 = PhotoViewer.this.lambda$setParentActivity$6(view, windowInsets);
                    return lambda$setParentActivity$6;
                }
            });
            this.containerView.setSystemUiVisibility(1792);
        }
        WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
        this.windowLayoutParams = layoutParams;
        layoutParams.height = -1;
        layoutParams.format = -3;
        layoutParams.width = -1;
        layoutParams.gravity = 51;
        layoutParams.type = 99;
        if (i2 >= 28) {
            layoutParams.layoutInDisplayCutoutMode = 1;
        }
        if (i2 >= 21) {
            layoutParams.flags = -2147286784;
        } else {
            layoutParams.flags = 131072;
        }
        PaintingOverlay paintingOverlay = new PaintingOverlay(this.parentActivity);
        this.paintingOverlay = paintingOverlay;
        this.containerView.addView(paintingOverlay, LayoutHelper.createFrame(-2, -2.0f));
        PaintingOverlay paintingOverlay2 = new PaintingOverlay(this.parentActivity);
        this.leftPaintingOverlay = paintingOverlay2;
        this.containerView.addView(paintingOverlay2, LayoutHelper.createFrame(-2, -2.0f));
        PaintingOverlay paintingOverlay3 = new PaintingOverlay(this.parentActivity);
        this.rightPaintingOverlay = paintingOverlay3;
        this.containerView.addView(paintingOverlay3, LayoutHelper.createFrame(-2, -2.0f));
        ActionBar actionBar = new ActionBar(parentActivity) { // from class: org.telegram.ui.PhotoViewer.15
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                PhotoViewer.this.containerView.invalidate();
            }
        };
        this.actionBar = actionBar;
        actionBar.setOverlayTitleAnimation(true);
        this.actionBar.setTitleColor(-1);
        this.actionBar.setSubtitleColor(-1);
        this.actionBar.setBackgroundColor(2130706432);
        this.actionBar.setOccupyStatusBar(isStatusBarVisible());
        this.actionBar.setItemsBackgroundColor(1090519039, false);
        this.actionBar.setItemsColor(-1, false);
        this.actionBar.setBackButtonImage(R.drawable.ic_ab_back);
        PhotoViewerActionBarContainer photoViewerActionBarContainer = new PhotoViewerActionBarContainer(parentActivity);
        this.actionBarContainer = photoViewerActionBarContainer;
        this.actionBar.addView(photoViewerActionBarContainer, LayoutHelper.createFrame(-1, -1, 119));
        this.containerView.addView(this.actionBar, LayoutHelper.createFrame(-1, -2.0f));
        PhotoCountView photoCountView = new PhotoCountView(parentActivity);
        this.countView = photoCountView;
        this.containerView.addView(photoCountView, LayoutHelper.createFrame(-1, -2, 55));
        this.actionBar.setActionBarMenuOnItemClick(new 16(resourcesProvider));
        ActionBarMenu createMenu = this.actionBar.createMenu();
        this.menu = createMenu;
        createMenu.setOnLayoutListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda82
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.updateActionBarTitlePadding();
            }
        });
        ActionBarMenuItem addItem = this.menu.addItem(13, R.drawable.msg_mask);
        this.masksItem = addItem;
        addItem.setContentDescription(LocaleController.getString("Masks", R.string.Masks));
        ActionBarMenuItem addItem2 = this.menu.addItem(5, R.drawable.ic_goinline);
        this.pipItem = addItem2;
        addItem2.setContentDescription(LocaleController.getString("AccDescrPipMode", R.string.AccDescrPipMode));
        ActionBarMenuItem addItem3 = this.menu.addItem(20, R.drawable.msg_header_draw);
        this.editItem = addItem3;
        addItem3.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
        ActionBarMenuItem addItem4 = this.menu.addItem(3, R.drawable.msg_header_share);
        this.sendItem = addItem4;
        addItem4.setContentDescription(LocaleController.getString("Forward", R.string.Forward));
        ActionBarMenu actionBarMenu = this.menu;
        OptionsSpeedIconDrawable optionsSpeedIconDrawable = new OptionsSpeedIconDrawable();
        this.menuItemIcon = optionsSpeedIconDrawable;
        ActionBarMenuItem addItem5 = actionBarMenu.addItem(0, optionsSpeedIconDrawable);
        this.menuItem = addItem5;
        addItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda37
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$setParentActivity$7(view);
            }
        });
        this.menuItem.setOnMenuDismiss(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda112
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$8((Boolean) obj);
            }
        });
        this.menuItem.getPopupLayout().swipeBackGravityRight = true;
        this.chooseSpeedLayout = new ChooseSpeedLayout(this.activityContext, this.menuItem.getPopupLayout().getSwipeBack(), new ChooseSpeedLayout.Callback() { // from class: org.telegram.ui.PhotoViewer.17
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.ChooseSpeedLayout.Callback
            public void onSpeedSelected(float f, boolean z, boolean z2) {
                if (f != PhotoViewer.this.currentVideoSpeed) {
                    PhotoViewer.this.currentVideoSpeed = f;
                    if (PhotoViewer.this.currentMessageObject != null) {
                        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("playback_speed", 0);
                        if (Math.abs(PhotoViewer.this.currentVideoSpeed - 1.0f) < 0.001f) {
                            SharedPreferences.Editor edit = sharedPreferences.edit();
                            edit.remove("speed" + PhotoViewer.this.currentMessageObject.getDialogId() + "_" + PhotoViewer.this.currentMessageObject.getId()).commit();
                        } else {
                            SharedPreferences.Editor edit2 = sharedPreferences.edit();
                            edit2.putFloat("speed" + PhotoViewer.this.currentMessageObject.getDialogId() + "_" + PhotoViewer.this.currentMessageObject.getId(), PhotoViewer.this.currentVideoSpeed).commit();
                        }
                    }
                    if (PhotoViewer.this.videoPlayer != null) {
                        PhotoViewer.this.videoPlayer.setPlaybackSpeed(PhotoViewer.this.currentVideoSpeed);
                    }
                    if (PhotoViewer.this.photoViewerWebView != null) {
                        PhotoViewer.this.photoViewerWebView.setPlaybackSpeed(PhotoViewer.this.currentVideoSpeed);
                    }
                }
                PhotoViewer.this.setMenuItemIcon(true, z);
                if (z2) {
                    PhotoViewer.this.menuItem.toggleSubMenu();
                }
            }
        });
        this.speedItem = this.menuItem.addSwipeBackItem(R.drawable.msg_speed, null, LocaleController.getString("Speed", R.string.Speed), this.chooseSpeedLayout.speedSwipeBackLayout);
        this.menuItem.getPopupLayout().setSwipeBackForegroundColor(-14540254);
        this.speedItem.setSubtext(LocaleController.getString("SpeedNormal", R.string.SpeedNormal));
        this.speedItem.setColors(-328966, -328966);
        ActionBarPopupWindow.GapView addColoredGap = this.menuItem.addColoredGap();
        this.speedGap = addColoredGap;
        addColoredGap.setColor(-15198184);
        this.menuItem.getPopupLayout().setFitItems(true);
        this.menuItem.addSubItem(11, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp)).setColors(-328966, -328966);
        this.menuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
        ActionBarMenuSubItem addSubItem = this.menuItem.addSubItem(2, R.drawable.msg_media, LocaleController.getString(R.string.ShowAllMedia));
        this.allMediaItem = addSubItem;
        addSubItem.setColors(-328966, -328966);
        this.menuItem.addSubItem(14, R.drawable.msg_gif, LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs)).setColors(-328966, -328966);
        this.menuItem.addSubItem(4, R.drawable.msg_message, LocaleController.getString("ShowInChat", R.string.ShowInChat)).setColors(-328966, -328966);
        this.menuItem.addSubItem(1, R.drawable.msg_gallery, LocaleController.getString("SaveToGallery", R.string.SaveToGallery)).setColors(-328966, -328966);
        this.menuItem.addSubItem(23, R.drawable.menu_reply, LocaleController.getString(R.string.Reply)).setColors(-328966, -328966);
        this.menuItem.addSubItem(10, R.drawable.msg_shareout, LocaleController.getString("ShareFile", R.string.ShareFile)).setColors(-328966, -328966);
        this.menuItem.addSubItem(15, R.drawable.msg_sticker, LocaleController.getString("ShowStickers", R.string.ShowStickers)).setColors(-328966, -328966);
        this.menuItem.addSubItem(16, R.drawable.msg_openprofile, LocaleController.getString("SetAsMain", R.string.SetAsMain)).setColors(-328966, -328966);
        ActionBarMenuItem actionBarMenuItem = this.menuItem;
        int i3 = R.drawable.msg_translate;
        actionBarMenuItem.addSubItem(21, i3, LocaleController.getString(R.string.TranslateMessage)).setColors(-328966, -328966);
        this.menuItem.addSubItem(22, i3, LocaleController.getString(R.string.HideTranslation)).setColors(-328966, -328966);
        this.menuItem.addSubItem(6, R.drawable.msg_delete, LocaleController.getString("Delete", R.string.Delete)).setColors(-328966, -328966);
        this.menuItem.addSubItem(7, R.drawable.msg_cancel, LocaleController.getString("StopDownload", R.string.StopDownload)).setColors(-328966, -328966);
        this.menuItem.redrawPopup(-115203550);
        this.menuItem.hideSubItem(21);
        this.menuItem.hideSubItem(22);
        setMenuItemIcon(false, true);
        this.menuItem.setPopupItemsSelectorColor(268435455);
        this.menuItem.setSubMenuDelegate(new ActionBarMenuItem.ActionBarSubMenuItemDelegate() { // from class: org.telegram.ui.PhotoViewer.18
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarSubMenuItemDelegate
            public void onShowSubMenu() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                    AndroidUtilities.cancelRunOnUIThread(PhotoViewer.this.hideActionBarRunnable);
                }
            }

            @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarSubMenuItemDelegate
            public void onHideSubMenu() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                    PhotoViewer.this.scheduleActionBarHide();
                }
            }
        });
        FrameLayout frameLayout = new FrameLayout(this, this.activityContext) { // from class: org.telegram.ui.PhotoViewer.19
            @Override // android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
            }
        };
        this.bottomLayout = frameLayout;
        frameLayout.setBackgroundColor(2130706432);
        this.containerView.addView(this.bottomLayout, LayoutHelper.createFrame(-1, 48, 83));
        View view = new View(this.activityContext);
        this.navigationBar = view;
        view.setBackgroundColor(this.sendPhotoType == 11 ? -16777216 : 2130706432);
        this.windowView.addView(this.navigationBar, LayoutHelper.createFrame(-1.0f, this.navigationBarHeight / AndroidUtilities.density, 87));
        this.pressedDrawable[0] = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, new int[]{838860800, 0});
        this.pressedDrawable[0].setShape(0);
        this.pressedDrawable[1] = new GradientDrawable(GradientDrawable.Orientation.RIGHT_LEFT, new int[]{838860800, 0});
        this.pressedDrawable[1].setShape(0);
        GroupedPhotosListView groupedPhotosListView = new GroupedPhotosListView(this.activityContext, AndroidUtilities.dp(10.0f));
        this.groupedPhotosListView = groupedPhotosListView;
        this.containerView.addView(groupedPhotosListView, LayoutHelper.createFrame(-1, 68, 83));
        this.groupedPhotosListView.setDelegate(new GroupedPhotosListView.GroupedPhotosListViewDelegate() { // from class: org.telegram.ui.PhotoViewer.20
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getCurrentIndex() {
                return PhotoViewer.this.currentIndex;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getCurrentAccount() {
                return PhotoViewer.this.currentAccount;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public long getAvatarsDialogId() {
                return PhotoViewer.this.avatarsDialogId;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getSlideshowMessageId() {
                return PhotoViewer.this.slideshowMessageId;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public ArrayList<ImageLocation> getImagesArrLocations() {
                return PhotoViewer.this.imagesArrLocations;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public ArrayList<MessageObject> getImagesArr() {
                return PhotoViewer.this.imagesArr;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public List<TLRPC$PageBlock> getPageBlockArr() {
                if (PhotoViewer.this.pageBlocksAdapter != null) {
                    return PhotoViewer.this.pageBlocksAdapter.getAll();
                }
                return null;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public Object getParentObject() {
                if (PhotoViewer.this.pageBlocksAdapter != null) {
                    return PhotoViewer.this.pageBlocksAdapter.getParentObject();
                }
                return null;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void setCurrentIndex(int i4) {
                PhotoViewer.this.currentIndex = -1;
                if (PhotoViewer.this.currentThumb != null) {
                    PhotoViewer.this.currentThumb.release();
                    PhotoViewer.this.currentThumb = null;
                }
                PhotoViewer.this.dontAutoPlay = true;
                PhotoViewer.this.setImageIndex(i4);
                PhotoViewer.this.dontAutoPlay = false;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void onShowAnimationStart() {
                PhotoViewer.this.containerView.requestLayout();
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void onStopScrolling() {
                PhotoViewer photoViewer = PhotoViewer.this;
                if (photoViewer.shouldMessageObjectAutoPlayed(photoViewer.currentMessageObject)) {
                    PhotoViewer.this.playerAutoStarted = true;
                    PhotoViewer.this.onActionClick(true);
                    PhotoViewer.this.checkProgress(0, false, true);
                }
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public boolean forceAll() {
                return PhotoViewer.this.placeProvider != null && PhotoViewer.this.placeProvider.forceAllInGroup();
            }
        });
        for (int i4 = 0; i4 < 3; i4++) {
            this.fullscreenButton[i4] = new ImageView(this.parentActivity);
            this.fullscreenButton[i4].setImageResource(R.drawable.msg_maxvideo);
            this.fullscreenButton[i4].setContentDescription(LocaleController.getString("AccSwitchToFullscreen", R.string.AccSwitchToFullscreen));
            this.fullscreenButton[i4].setScaleType(ImageView.ScaleType.CENTER);
            this.fullscreenButton[i4].setBackground(Theme.createSelectorDrawable(1090519039));
            this.fullscreenButton[i4].setVisibility(4);
            this.fullscreenButton[i4].setAlpha(1.0f);
            this.containerView.addView(this.fullscreenButton[i4], LayoutHelper.createFrame(48, 48.0f));
            this.fullscreenButton[i4].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda36
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    PhotoViewer.this.lambda$setParentActivity$9(view2);
                }
            });
        }
        this.textSelectionHelper = new TextSelectionHelper.SimpleTextSelectionHelper(this, null, new DarkThemeResourceProvider()) { // from class: org.telegram.ui.PhotoViewer.21
            @Override // org.telegram.ui.Cells.TextSelectionHelper
            public int getParentBottomPadding() {
                return 0;
            }
        };
        CaptionTextViewSwitcher captionTextViewSwitcher = new CaptionTextViewSwitcher(this.containerView.getContext());
        this.captionTextViewSwitcher = captionTextViewSwitcher;
        captionTextViewSwitcher.setFactory(new ViewSwitcher.ViewFactory() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda65
            @Override // android.widget.ViewSwitcher.ViewFactory
            public final View makeView() {
                View lambda$setParentActivity$10;
                lambda$setParentActivity$10 = PhotoViewer.this.lambda$setParentActivity$10();
                return lambda$setParentActivity$10;
            }
        });
        this.captionTextViewSwitcher.setVisibility(4);
        setCaptionHwLayerEnabled(true);
        for (int i5 = 0; i5 < 3; i5++) {
            this.photoProgressViews[i5] = new PhotoProgressView(this.containerView) { // from class: org.telegram.ui.PhotoViewer.22
                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.PhotoViewer.PhotoProgressView
                protected void onBackgroundStateUpdated(int i6) {
                    if (this == PhotoViewer.this.photoProgressViews[0]) {
                        PhotoViewer.this.updateAccessibilityOverlayVisibility();
                    }
                }

                @Override // org.telegram.ui.PhotoViewer.PhotoProgressView
                protected void onVisibilityChanged(boolean z) {
                    if (this == PhotoViewer.this.photoProgressViews[0]) {
                        PhotoViewer.this.updateAccessibilityOverlayVisibility();
                    }
                }
            };
            this.photoProgressViews[i5].setBackgroundState(0, false, true);
        }
        RadialProgressView radialProgressView = new RadialProgressView(this.activityContext, resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.23
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.RadialProgressView, android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                if (PhotoViewer.this.containerView != null) {
                    PhotoViewer.this.containerView.invalidate();
                }
            }

            @Override // android.view.View
            public void invalidate() {
                super.invalidate();
                if (PhotoViewer.this.containerView != null) {
                    PhotoViewer.this.containerView.invalidate();
                }
            }
        };
        this.miniProgressView = radialProgressView;
        radialProgressView.setUseSelfAlpha(true);
        this.miniProgressView.setProgressColor(-1);
        this.miniProgressView.setSize(AndroidUtilities.dp(54.0f));
        RadialProgressView radialProgressView2 = this.miniProgressView;
        int i6 = R.drawable.circle_big;
        radialProgressView2.setBackgroundResource(i6);
        this.miniProgressView.setVisibility(4);
        this.miniProgressView.setAlpha(0.0f);
        this.containerView.addView(this.miniProgressView, LayoutHelper.createFrame(64, 64, 17));
        createVideoControlsInterface();
        RadialProgressView radialProgressView3 = new RadialProgressView(this.parentActivity, resourcesProvider);
        this.progressView = radialProgressView3;
        radialProgressView3.setProgressColor(-1);
        this.progressView.setBackgroundResource(i6);
        this.progressView.setVisibility(4);
        this.containerView.addView(this.progressView, LayoutHelper.createFrame(54, 54, 17));
        PickerBottomLayoutViewer pickerBottomLayoutViewer = new PickerBottomLayoutViewer(this.parentActivity);
        this.qualityPicker = pickerBottomLayoutViewer;
        pickerBottomLayoutViewer.setBackgroundColor(2130706432);
        this.qualityPicker.updateSelectedCount(0, false);
        this.qualityPicker.setTranslationY(AndroidUtilities.dp(120.0f));
        this.qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
        TextView textView = this.qualityPicker.doneButton;
        int i7 = Theme.key_chat_editMediaButton;
        textView.setTextColor(getThemedColor(i7));
        this.containerView.addView(this.qualityPicker, LayoutHelper.createFrame(-1, 48, 83));
        this.qualityPicker.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda49
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$11(view2);
            }
        });
        this.qualityPicker.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda42
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$12(view2);
            }
        });
        VideoForwardDrawable videoForwardDrawable = new VideoForwardDrawable(false);
        this.videoForwardDrawable = videoForwardDrawable;
        videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.PhotoViewer.24
            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
            public void onAnimationEnd() {
            }

            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
            public void invalidate() {
                PhotoViewer.this.containerView.invalidate();
            }
        });
        QualityChooseView qualityChooseView = new QualityChooseView(this.parentActivity);
        this.qualityChooseView = qualityChooseView;
        qualityChooseView.setTranslationY(AndroidUtilities.dp(120.0f));
        this.qualityChooseView.setVisibility(4);
        this.qualityChooseView.setBackgroundColor(2130706432);
        this.containerView.addView(this.qualityChooseView, LayoutHelper.createFrame(-1, 70.0f, 83, 0.0f, 0.0f, 0.0f, 48.0f));
        new Paint().setColor(2130706432);
        FrameLayout frameLayout2 = new FrameLayout(this.activityContext) { // from class: org.telegram.ui.PhotoViewer.25
            private final Paint bgPaint = new Paint(3);
            private final LinearGradient bgGradient = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{0, 2130706432}, new float[]{0.0f, 1.0f}, Shader.TileMode.CLAMP);
            private final Matrix bgMatrix = new Matrix();

            {
                PhotoViewer.this = this;
            }

            @Override // android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                if (!PhotoViewer.this.fancyShadows) {
                    int measuredHeight = PhotoViewer.this.doneButtonFullWidth.getVisibility() == 0 ? getMeasuredHeight() - AndroidUtilities.dp(48.0f) : 0;
                    if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == -1) {
                        this.bgMatrix.reset();
                        this.bgMatrix.postTranslate(0.0f, measuredHeight);
                        this.bgMatrix.postScale(1.0f, Math.min(AndroidUtilities.dp(40.0f), getMeasuredHeight() - measuredHeight) / 16.0f);
                        this.bgGradient.setLocalMatrix(this.bgMatrix);
                        this.bgPaint.setShader(this.bgGradient);
                    } else {
                        this.bgPaint.setShader(null);
                        this.bgPaint.setColor(2130706432);
                    }
                    canvas.drawRect(0.0f, measuredHeight, getMeasuredWidth(), getMeasuredHeight(), this.bgPaint);
                }
                super.dispatchDraw(canvas);
            }

            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i8, int i9) {
                ((FrameLayout.LayoutParams) PhotoViewer.this.itemsLayout.getLayoutParams()).rightMargin = PhotoViewer.this.pickerViewSendButton.getVisibility() == 0 ? AndroidUtilities.dp(70.0f) : 0;
                super.onMeasure(i8, i9);
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                super.setTranslationY(f);
                if (PhotoViewer.this.videoTimelineViewContainer != null && PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 8) {
                    PhotoViewer.this.videoTimelineViewContainer.setTranslationY(f - Math.max(0, PhotoViewer.this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
                }
                if (PhotoViewer.this.captionEditContainer != null) {
                    PhotoViewer.this.captionEditContainer.setTranslationY(f);
                }
                if (PhotoViewer.this.videoAvatarTooltip == null || PhotoViewer.this.videoAvatarTooltip.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.videoAvatarTooltip.setTranslationY(f);
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                if (PhotoViewer.this.videoTimelineViewContainer != null && PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 8) {
                    PhotoViewer.this.videoTimelineViewContainer.setAlpha(f);
                }
                if (PhotoViewer.this.captionEdit == null || PhotoViewer.this.captionEdit.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.captionEdit.setAlpha(f);
            }

            @Override // android.view.View
            public void setVisibility(int i8) {
                super.setVisibility(i8);
                if (PhotoViewer.this.videoTimelineViewContainer == null || PhotoViewer.this.videoTimelineViewContainer.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.videoTimelineViewContainer.setVisibility(i8 == 0 ? 0 : 4);
            }

            @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
            protected void onLayout(boolean z, int i8, int i9, int i10, int i11) {
                super.onLayout(z, i8, i9, i10, i11);
                if (PhotoViewer.this.itemsLayout.getVisibility() != 8) {
                    int dp = (((i10 - i8) - (PhotoViewer.this.pickerViewSendButton.getVisibility() == 0 ? AndroidUtilities.dp(70.0f) : 0)) - PhotoViewer.this.itemsLayout.getMeasuredWidth()) / 2;
                    PhotoViewer.this.itemsLayout.layout(dp, PhotoViewer.this.itemsLayout.getTop(), PhotoViewer.this.itemsLayout.getMeasuredWidth() + dp, PhotoViewer.this.itemsLayout.getTop() + PhotoViewer.this.itemsLayout.getMeasuredHeight());
                }
            }
        };
        this.pickerView = frameLayout2;
        this.containerView.addView(frameLayout2, LayoutHelper.createFrame(-1, -2, 83));
        TextView textView2 = new TextView(this.containerView.getContext());
        this.docNameTextView = textView2;
        textView2.setTextSize(1, 15.0f);
        this.docNameTextView.setTypeface(AndroidUtilities.bold());
        this.docNameTextView.setSingleLine(true);
        this.docNameTextView.setMaxLines(1);
        this.docNameTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.docNameTextView.setTextColor(-1);
        this.docNameTextView.setGravity(3);
        this.pickerView.addView(this.docNameTextView, LayoutHelper.createFrame(-1, -2.0f, 51, 20.0f, 23.0f, 84.0f, 0.0f));
        TextView textView3 = new TextView(this.containerView.getContext());
        this.docInfoTextView = textView3;
        textView3.setTextSize(1, 14.0f);
        this.docInfoTextView.setSingleLine(true);
        this.docInfoTextView.setMaxLines(1);
        this.docInfoTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.docInfoTextView.setTextColor(-1);
        this.docInfoTextView.setGravity(3);
        this.pickerView.addView(this.docInfoTextView, LayoutHelper.createFrame(-1, -2.0f, 51, 20.0f, 46.0f, 84.0f, 0.0f));
        TextView textView4 = new TextView(this.containerView.getContext());
        this.doneButtonFullWidth = textView4;
        int i8 = Theme.key_featuredStickers_addButton;
        textView4.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(i8), 6.0f));
        TextView textView5 = this.doneButtonFullWidth;
        int i9 = Theme.key_featuredStickers_buttonText;
        textView5.setTextColor(getThemedColor(i9));
        this.doneButtonFullWidth.setEllipsize(TextUtils.TruncateAt.END);
        this.doneButtonFullWidth.setGravity(17);
        this.doneButtonFullWidth.setLines(1);
        this.doneButtonFullWidth.setSingleLine(true);
        this.doneButtonFullWidth.setText(LocaleController.getString("SetAsMyPhoto", R.string.SetAsMyPhoto));
        this.doneButtonFullWidth.setTextSize(1, 15.0f);
        this.doneButtonFullWidth.setTypeface(AndroidUtilities.bold());
        this.doneButtonFullWidth.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda48
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$13(view2);
            }
        });
        this.doneButtonFullWidth.setVisibility(8);
        this.pickerView.addView(this.doneButtonFullWidth, LayoutHelper.createFrame(-1, 48.0f, 51, 20.0f, 0.0f, 20.0f, 64.0f));
        VideoTimelinePlayView videoTimelinePlayView = new VideoTimelinePlayView(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.26
            private final BlurringShader.StoryBlurDrawer blur;

            @Override // org.telegram.ui.Components.VideoTimelinePlayView
            protected boolean customBlur() {
                return true;
            }

            {
                PhotoViewer.this = this;
                new Path();
                this.blur = new BlurringShader.StoryBlurDrawer(this.blurManager, this, 0);
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                if (getTranslationY() != f) {
                    super.setTranslationY(f);
                    PhotoViewer.this.containerView.invalidate();
                }
            }

            @Override // org.telegram.ui.Components.VideoTimelinePlayView
            protected void drawBlur(Canvas canvas, RectF rectF) {
                canvas.save();
                canvas.clipRect(rectF);
                canvas.translate((-getX()) - PhotoViewer.this.videoTimelineViewContainer.getX(), (-getY()) - PhotoViewer.this.videoTimelineViewContainer.getY());
                PhotoViewer.this.drawCaptionBlur(canvas, this.blur, -14803426, AndroidUtilities.DARK_STATUS_BAR_OVERLAY, false, true, false);
                canvas.restore();
            }

            @Override // android.view.View
            public void invalidate() {
                if (SharedConfig.photoViewerBlur && (PhotoViewer.this.animationInProgress == 1 || PhotoViewer.this.animationInProgress == 2 || PhotoViewer.this.animationInProgress == 3)) {
                    return;
                }
                super.invalidate();
            }
        };
        this.videoTimelineView = videoTimelinePlayView;
        videoTimelinePlayView.setDelegate(new 27());
        FrameLayout frameLayout3 = new FrameLayout(this.parentActivity);
        this.videoTimelineViewContainer = frameLayout3;
        frameLayout3.setClipChildren(false);
        this.videoTimelineViewContainer.addView(this.videoTimelineView, LayoutHelper.createFrame(-1, 54, 83));
        showVideoTimeline(false, false);
        this.containerView.addView(this.videoTimelineViewContainer, LayoutHelper.createFrame(-1, 54.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        Context context = this.containerView.getContext();
        FrameLayout frameLayout4 = this.windowView;
        FrameLayoutDrawer frameLayoutDrawer2 = this.containerView;
        CaptionPhotoViewer captionPhotoViewer2 = new CaptionPhotoViewer(context, frameLayout4, frameLayoutDrawer2, frameLayoutDrawer2, resourcesProvider, this.blurManager, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.applyCaption();
            }
        }) { // from class: org.telegram.ui.PhotoViewer.28
            private final Path path = new Path();

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected boolean customBlur() {
                return true;
            }

            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected boolean ignoreTouches(float f, float f2) {
                return (this.keyboardShown || PhotoViewer.this.currentEditMode == 0) ? false : true;
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected void drawBlur(BlurringShader.StoryBlurDrawer storyBlurDrawer, Canvas canvas, RectF rectF, float f, boolean z, float f2, float f3, boolean z2) {
                canvas.save();
                this.path.rewind();
                this.path.addRoundRect(rectF, f, f, Path.Direction.CW);
                canvas.clipPath(this.path);
                if (z2) {
                    canvas.translate(((-getX()) - PhotoViewer.this.captionEditContainer.getX()) + f2, ((-getY()) - PhotoViewer.this.captionEditContainer.getY()) + f3);
                } else {
                    canvas.translate(f2, f3);
                }
                PhotoViewer.this.drawCaptionBlur(canvas, storyBlurDrawer, z ? -8882056 : -14277082, z2 ? z ? 0 : AndroidUtilities.DARK_STATUS_BAR_OVERLAY : 1140850688, false, !z, !z && z2);
                canvas.restore();
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            public boolean captionLimitToast() {
                if (PhotoViewer.this.limitBulletin == null || Bulletin.getVisibleBulletin() != PhotoViewer.this.limitBulletin) {
                    PhotoViewer photoViewer = PhotoViewer.this;
                    return photoViewer.showCaptionLimitBulletin(photoViewer.containerView);
                }
                return false;
            }

            @Override // org.telegram.ui.Components.CaptionPhotoViewer, org.telegram.ui.Stories.recorder.CaptionContainerView
            protected void setupMentionContainer() {
                this.mentionContainer.getAdapter().setAllowStickers(false);
                this.mentionContainer.getAdapter().setAllowBots(false);
                this.mentionContainer.getAdapter().setAllowChats(false);
                this.mentionContainer.getAdapter().setSearchInDailogs(true);
                if (PhotoViewer.this.parentChatActivity != null) {
                    this.mentionContainer.getAdapter().setChatInfo(PhotoViewer.this.parentChatActivity.chatInfo);
                    this.mentionContainer.getAdapter().setNeedUsernames(PhotoViewer.this.parentChatActivity.currentChat != null);
                } else {
                    this.mentionContainer.getAdapter().setChatInfo(null);
                    this.mentionContainer.getAdapter().setNeedUsernames(false);
                }
                this.mentionContainer.getAdapter().setNeedBotContext(false);
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.CaptionPhotoViewer, org.telegram.ui.Stories.recorder.CaptionContainerView
            public void onUpdateShowKeyboard(float f) {
                super.onUpdateShowKeyboard(f);
                float f2 = 1.0f - f;
                PhotoViewer.this.muteItem.setAlpha((PhotoViewer.this.muteItem.getTag() != null ? 1 : 0) * f2);
                PhotoViewer.this.videoTimelineViewContainer.setAlpha(f2 * (PhotoViewer.this.videoTimelineViewContainer.getTag() == null ? 0 : 1));
            }

            @Override // android.view.View
            public void invalidate() {
                if (SharedConfig.photoViewerBlur && (PhotoViewer.this.animationInProgress == 1 || PhotoViewer.this.animationInProgress == 2 || PhotoViewer.this.animationInProgress == 3)) {
                    return;
                }
                super.invalidate();
            }
        };
        this.captionEdit = captionPhotoViewer2;
        captionPhotoViewer2.setOnTimerChange(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda113
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$14((Integer) obj);
            }
        });
        this.captionEdit.setAccount(this.currentAccount);
        this.captionEdit.setOnHeightUpdate(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda115
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$15((Integer) obj);
            }
        });
        this.captionEdit.setOnAddPhotoClick(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda55
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$16(view2);
            }
        });
        StickerMakerBackgroundView stickerMakerBackgroundView = new StickerMakerBackgroundView(this.activityContext) { // from class: org.telegram.ui.PhotoViewer.29
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                PhotoViewer.this.windowView.invalidate();
            }
        };
        this.stickerMakerBackgroundView = stickerMakerBackgroundView;
        stickerMakerBackgroundView.setVisibility(8);
        this.containerView.addView(this.stickerMakerBackgroundView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
        StickerMakerView stickerMakerView2 = new StickerMakerView(this.activityContext, resourcesProvider);
        this.stickerMakerView = stickerMakerView2;
        stickerMakerView2.setCurrentAccount(this.currentAccount);
        FrameLayoutDrawer frameLayoutDrawer3 = this.containerView;
        frameLayoutDrawer3.addView(this.stickerMakerView, frameLayoutDrawer3.indexOfChild(this.actionBar) - 1, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
        BlurButton blurButton = new BlurButton();
        this.cutOutBtn = blurButton;
        blurButton.setRad(18);
        this.cutOutBtn.wrapContentDynamic();
        this.stickerMakerView.setStickerCutOutBtn(this.cutOutBtn);
        this.cutOutBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda41
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$22(view2);
            }
        });
        this.cutOutBtn.setCutOutState(false);
        this.containerView.addView(this.cutOutBtn, LayoutHelper.createFrame(-1, 36, 17));
        LinearLayout linearLayout = new LinearLayout(this.parentActivity);
        this.btnLayout = linearLayout;
        linearLayout.setOrientation(0);
        BlurButton blurButton2 = new BlurButton();
        this.eraseBtn = blurButton2;
        blurButton2.wrapContent();
        this.eraseBtn.setRad(18);
        this.eraseBtn.setEraseState(false);
        this.eraseBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda56
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$23(view2);
            }
        });
        this.btnLayout.addView(this.eraseBtn, LayoutHelper.createLinear(-2, 36));
        this.btnLayout.addView(new Space(this.parentActivity), LayoutHelper.createLinear(12, -1));
        BlurButton blurButton3 = new BlurButton();
        this.restoreBtn = blurButton3;
        blurButton3.wrapContent();
        this.restoreBtn.setRad(18);
        this.restoreBtn.setRestoreState(false);
        this.restoreBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda39
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$24(view2);
            }
        });
        this.btnLayout.addView(this.restoreBtn, LayoutHelper.createLinear(-2, 36));
        this.containerView.addView(this.btnLayout, LayoutHelper.createFrame(-2, 36, 17));
        BlurButton blurButton4 = new BlurButton();
        this.undoBtn = blurButton4;
        blurButton4.setUndoState(false);
        this.undoBtn.setRad(18);
        this.undoBtn.wrapContent();
        this.undoBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda31
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$25(view2);
            }
        });
        this.containerView.addView(this.undoBtn, LayoutHelper.createFrame(-2, 36, 17));
        BlurButton blurButton5 = new BlurButton();
        this.outlineBtn = blurButton5;
        blurButton5.setOutlineState(false);
        this.outlineBtn.setRad(18);
        this.outlineBtn.wrapContent();
        this.outlineBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda51
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$26(view2);
            }
        });
        this.containerView.addView(this.outlineBtn, LayoutHelper.createFrame(-2, 36, 17));
        showEditCaption(false, false);
        showStickerMode(false, false);
        FrameLayout frameLayout5 = new FrameLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.30
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                super.setTranslationY(f);
                PhotoViewer.this.invalidateBlur();
            }
        };
        this.captionEditContainer = frameLayout5;
        frameLayout5.addView(this.captionEdit, LayoutHelper.createFrame(-1, -1, 83));
        this.containerView.addView(this.captionEditContainer, LayoutHelper.createFrame(-1, -1.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        TextView textView6 = new TextView(this.parentActivity);
        this.videoAvatarTooltip = textView6;
        textView6.setSingleLine(true);
        this.videoAvatarTooltip.setVisibility(8);
        this.videoAvatarTooltip.setText(LocaleController.getString("ChooseCover", R.string.ChooseCover));
        this.videoAvatarTooltip.setGravity(1);
        this.videoAvatarTooltip.setTextSize(1, 14.0f);
        this.videoAvatarTooltip.setTextColor(-7566196);
        this.containerView.addView(this.videoAvatarTooltip, LayoutHelper.createFrame(-1, -2.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        ImageView imageView = new ImageView(this.parentActivity);
        this.pickerViewSendButton = imageView;
        imageView.setScaleType(ImageView.ScaleType.CENTER);
        Drawable createSimpleSelectorCircleDrawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(48.0f), getThemedColor(i7), getThemedColor(Build.VERSION.SDK_INT >= 21 ? Theme.key_dialogFloatingButtonPressed : i7));
        this.pickerViewSendDrawable = createSimpleSelectorCircleDrawable;
        this.pickerViewSendButton.setBackgroundDrawable(createSimpleSelectorCircleDrawable);
        this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
        this.pickerViewSendButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogFloatingIcon), PorterDuff.Mode.MULTIPLY));
        this.containerView.addView(this.pickerViewSendButton, LayoutHelper.createFrame(48, 48.0f, 85, 0.0f, 0.0f, 14.0f, 2.33f));
        this.pickerViewSendButton.setContentDescription(LocaleController.getString("Send", R.string.Send));
        ScaleStateListAnimator.apply(this.pickerViewSendButton);
        this.pickerViewSendButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda46
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$27(view2);
            }
        });
        this.pickerViewSendButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda63
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view2) {
                boolean lambda$setParentActivity$31;
                lambda$setParentActivity$31 = PhotoViewer.this.lambda$setParentActivity$31(resourcesProvider, view2);
                return lambda$setParentActivity$31;
            }
        });
        LinearLayout linearLayout2 = new LinearLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.31
            {
                PhotoViewer.this = this;
            }

            @Override // android.widget.LinearLayout, android.view.View
            protected void onMeasure(int i10, int i11) {
                int childCount = getChildCount();
                int i12 = 0;
                for (int i13 = 0; i13 < childCount; i13++) {
                    if (getChildAt(i13).getVisibility() == 0) {
                        i12++;
                    }
                }
                int size = View.MeasureSpec.getSize(i10);
                int size2 = View.MeasureSpec.getSize(i11);
                if (i12 != 0) {
                    int min = Math.min(AndroidUtilities.dp(70.0f), size / i12);
                    if (PhotoViewer.this.compressItem.getVisibility() == 0) {
                        int max = Math.max(0, (min - AndroidUtilities.dp(PhotoViewer.this.selectedCompression < 2 ? 48 : 64)) / 2);
                        PhotoViewer.this.compressItem.setPadding(max, 0, max, 0);
                    }
                    for (int i14 = 0; i14 < childCount; i14++) {
                        View childAt = getChildAt(i14);
                        if (childAt.getVisibility() != 8) {
                            childAt.measure(View.MeasureSpec.makeMeasureSpec(min, 1073741824), View.MeasureSpec.makeMeasureSpec(size2, 1073741824));
                        }
                    }
                    setMeasuredDimension(min * i12, size2);
                    return;
                }
                setMeasuredDimension(size, size2);
            }
        };
        this.itemsLayout = linearLayout2;
        linearLayout2.setOrientation(0);
        this.pickerView.addView(this.itemsLayout, LayoutHelper.createFrame(-2, 48.0f, 81, 0.0f, 0.0f, 70.0f, 0.0f));
        ImageView imageView2 = new ImageView(this.parentActivity);
        this.cropItem = imageView2;
        imageView2.setScaleType(ImageView.ScaleType.CENTER);
        this.cropItem.setImageResource(R.drawable.media_crop);
        this.cropItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.cropItem, LayoutHelper.createLinear(48, 48));
        this.cropItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda30
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$32(view2);
            }
        });
        this.cropItem.setContentDescription(LocaleController.getString("CropImage", R.string.CropImage));
        ImageView imageView3 = new ImageView(this.parentActivity);
        this.rotateItem = imageView3;
        imageView3.setScaleType(ImageView.ScaleType.CENTER);
        this.rotateItem.setImageResource(R.drawable.msg_photo_rotate);
        this.rotateItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.rotateItem, LayoutHelper.createLinear(48, 48));
        this.rotateItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda34
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$33(view2);
            }
        });
        this.rotateItem.setContentDescription(LocaleController.getString("AccDescrRotate", R.string.AccDescrRotate));
        ImageView imageView4 = new ImageView(this.parentActivity);
        this.mirrorItem = imageView4;
        imageView4.setScaleType(ImageView.ScaleType.CENTER);
        this.mirrorItem.setImageResource(R.drawable.media_flip);
        this.mirrorItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.mirrorItem, LayoutHelper.createLinear(48, 48));
        this.mirrorItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda28
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$34(view2);
            }
        });
        this.mirrorItem.setContentDescription(LocaleController.getString("AccDescrMirror", R.string.AccDescrMirror));
        ImageView imageView5 = new ImageView(this.parentActivity);
        this.paintItem = imageView5;
        imageView5.setScaleType(ImageView.ScaleType.CENTER);
        this.paintItem.setImageResource(R.drawable.media_draw);
        this.paintItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.paintItem, LayoutHelper.createLinear(48, 48));
        this.paintItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda29
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$35(view2);
            }
        });
        this.paintItem.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
        ImageView imageView6 = new ImageView(this.parentActivity);
        this.muteItem = imageView6;
        imageView6.setScaleType(ImageView.ScaleType.CENTER);
        this.muteItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.containerView.addView(this.muteItem, LayoutHelper.createFrame(48, 48.0f, 83, 16.0f, 0.0f, 0.0f, 0.0f));
        this.muteItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda52
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$36(view2);
            }
        });
        VideoCompressButton videoCompressButton = new VideoCompressButton(this.parentActivity);
        this.compressItem = videoCompressButton;
        videoCompressButton.setTag(1);
        this.compressItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.selectedCompression = selectCompression();
        this.compressItem.setState(this.videoConvertSupported && this.compressionsCount > 1, this.muteVideo, Math.min(this.resultWidth, this.resultHeight));
        this.compressItem.setContentDescription(LocaleController.getString("AccDescrVideoQuality", R.string.AccDescrVideoQuality));
        this.itemsLayout.addView(this.compressItem, LayoutHelper.createLinear(48, 48));
        this.compressItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda58
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$37(parentActivity, view2);
            }
        });
        ImageView imageView7 = new ImageView(this.parentActivity);
        this.tuneItem = imageView7;
        imageView7.setScaleType(ImageView.ScaleType.CENTER);
        this.tuneItem.setImageResource(R.drawable.media_settings);
        this.tuneItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.tuneItem, LayoutHelper.createLinear(48, 48));
        this.tuneItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda35
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$38(view2);
            }
        });
        this.tuneItem.setContentDescription(LocaleController.getString("AccDescrPhotoAdjust", R.string.AccDescrPhotoAdjust));
        PickerBottomLayoutViewer pickerBottomLayoutViewer2 = new PickerBottomLayoutViewer(this.activityContext);
        this.editorDoneLayout = pickerBottomLayoutViewer2;
        pickerBottomLayoutViewer2.setBackgroundColor(-872415232);
        this.editorDoneLayout.updateSelectedCount(0, false);
        this.editorDoneLayout.setVisibility(8);
        this.containerView.addView(this.editorDoneLayout, LayoutHelper.createFrame(-1, 48, 83));
        this.editorDoneLayout.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda45
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$40(view2);
            }
        });
        this.editorDoneLayout.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda44
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$41(view2);
            }
        });
        TextView textView7 = new TextView(this.activityContext);
        this.resetButton = textView7;
        textView7.setClickable(false);
        this.resetButton.setVisibility(8);
        this.resetButton.setTextSize(1, 14.0f);
        this.resetButton.setTextColor(-1);
        this.resetButton.setGravity(17);
        this.resetButton.setBackgroundDrawable(Theme.createSelectorDrawable(-12763843, 0));
        this.resetButton.setPadding(AndroidUtilities.dp(20.0f), 0, AndroidUtilities.dp(20.0f), 0);
        this.resetButton.setText(LocaleController.getString("Reset", R.string.CropReset).toUpperCase());
        this.resetButton.setTypeface(AndroidUtilities.bold());
        this.editorDoneLayout.addView(this.resetButton, LayoutHelper.createFrame(-2, -1, 49));
        this.resetButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda33
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$43(view2);
            }
        });
        GestureDetector2 gestureDetector2 = new GestureDetector2(this.containerView.getContext(), this);
        this.gestureDetector = gestureDetector2;
        gestureDetector2.setIsLongpressEnabled(false);
        setDoubleTapEnabled(true);
        ImageReceiver.ImageReceiverDelegate imageReceiverDelegate = new ImageReceiver.ImageReceiverDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda109
            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public final void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
                PhotoViewer.this.lambda$setParentActivity$44(imageReceiver, z, z2, z3);
            }

            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public /* synthetic */ void didSetImageBitmap(int i10, String str, Drawable drawable) {
                ImageReceiver.ImageReceiverDelegate.-CC.$default$didSetImageBitmap(this, i10, str, drawable);
            }

            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public /* synthetic */ void onAnimationReady(ImageReceiver imageReceiver) {
                ImageReceiver.ImageReceiverDelegate.-CC.$default$onAnimationReady(this, imageReceiver);
            }
        };
        this.centerImage.setParentView(this.containerView);
        this.centerImage.setCrossfadeAlpha((byte) 2);
        this.centerImage.setInvalidateAll(true);
        this.centerImage.setDelegate(imageReceiverDelegate);
        this.leftImage.setParentView(this.containerView);
        this.leftImage.setCrossfadeAlpha((byte) 2);
        this.leftImage.setInvalidateAll(true);
        this.leftImage.setDelegate(imageReceiverDelegate);
        this.rightImage.setParentView(this.containerView);
        this.rightImage.setCrossfadeAlpha((byte) 2);
        this.rightImage.setInvalidateAll(true);
        this.rightImage.setDelegate(imageReceiverDelegate);
        int rotation = ((WindowManager) ApplicationLoader.applicationContext.getSystemService("window")).getDefaultDisplay().getRotation();
        CheckBox checkBox = new CheckBox(this.containerView.getContext(), R.drawable.selectphoto_large);
        this.checkImageView = checkBox;
        checkBox.setDrawBackground(true);
        this.checkImageView.setHasBorder(true);
        this.checkImageView.setSize(34);
        this.checkImageView.setCheckOffset(AndroidUtilities.dp(1.0f));
        this.checkImageView.setColor(getThemedColor(i7), -1);
        this.checkImageView.setVisibility(8);
        this.containerView.addView(this.checkImageView, LayoutHelper.createFrame(34, 34.0f, 53, 0.0f, (rotation == 3 || rotation == 1) ? 61.0f : 71.0f, 11.0f, 0.0f));
        if (isStatusBarVisible()) {
            ((FrameLayout.LayoutParams) this.checkImageView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
        }
        this.checkImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda32
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$45(view2);
            }
        });
        CounterView counterView = new CounterView(this.parentActivity);
        this.photosCounterView = counterView;
        this.containerView.addView(counterView, LayoutHelper.createFrame(40, 40.0f, 53, 0.0f, (rotation == 3 || rotation == 1) ? 58.0f : 68.0f, 64.0f, 0.0f));
        if (isStatusBarVisible()) {
            ((FrameLayout.LayoutParams) this.photosCounterView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
        }
        this.photosCounterView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda50
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$46(view2);
            }
        });
        SelectedPhotosListView selectedPhotosListView = new SelectedPhotosListView(this.parentActivity);
        this.selectedPhotosListView = selectedPhotosListView;
        selectedPhotosListView.setVisibility(8);
        this.selectedPhotosListView.setAlpha(0.0f);
        this.selectedPhotosListView.setLayoutManager(new LinearLayoutManager(this, this.parentActivity, 0, true) { // from class: org.telegram.ui.PhotoViewer.32
            @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
            public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i10) {
                LinearSmoothScrollerEnd linearSmoothScrollerEnd = new LinearSmoothScrollerEnd(this, recyclerView.getContext()) { // from class: org.telegram.ui.PhotoViewer.32.1
                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // androidx.recyclerview.widget.LinearSmoothScrollerEnd
                    public int calculateTimeForDeceleration(int i11) {
                        return Math.max(180, super.calculateTimeForDeceleration(i11));
                    }
                };
                linearSmoothScrollerEnd.setTargetPosition(i10);
                startSmoothScroll(linearSmoothScrollerEnd);
            }
        });
        SelectedPhotosListView selectedPhotosListView2 = this.selectedPhotosListView;
        ListAdapter listAdapter = new ListAdapter(this.parentActivity);
        this.selectedPhotosAdapter = listAdapter;
        selectedPhotosListView2.setAdapter(listAdapter);
        this.containerView.addView(this.selectedPhotosListView, LayoutHelper.createFrame(-1, (int) R.styleable.AppCompatTheme_textAppearanceListItem, 51));
        this.selectedPhotosListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda121
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view2, int i10) {
                PhotoViewer.this.lambda$setParentActivity$47(view2, i10);
            }
        });
        UndoView undoView = new UndoView(this.activityContext, null, false, resourcesProvider);
        this.hintView = undoView;
        undoView.setAdditionalTranslationY(AndroidUtilities.dp(112.0f));
        this.hintView.setColors(-115203550, -1);
        this.containerView.addView(this.hintView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
        if (AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            View view2 = new View(this.activityContext);
            this.playButtonAccessibilityOverlay = view2;
            view2.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
            this.playButtonAccessibilityOverlay.setFocusable(true);
            this.containerView.addView(this.playButtonAccessibilityOverlay, LayoutHelper.createFrame(64, 64, 17));
        }
        this.doneButtonFullWidth.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(i8), 6.0f));
        this.doneButtonFullWidth.setTextColor(getThemedColor(i9));
        TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper = this.textSelectionHelper;
        simpleTextSelectionHelper.allowScrollPrentRelative = true;
        simpleTextSelectionHelper.useMovingOffset = false;
        TextSelectionHelper<Cell>.TextSelectionOverlay overlayView = simpleTextSelectionHelper.getOverlayView(this.windowView.getContext());
        if (overlayView != null) {
            AndroidUtilities.removeFromParent(overlayView);
            this.containerView.addView(overlayView);
        }
        this.textSelectionHelper.setParentView(this.containerView);
        this.textSelectionHelper.setInvalidateParent();
    }

    /* loaded from: classes4.dex */
    public class 13 extends FrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        13(Context context) {
            super(context);
            PhotoViewer.this = r1;
        }

        @Override // android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            return PhotoViewer.this.isVisible && super.onInterceptTouchEvent(motionEvent);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            return PhotoViewer.this.isVisible && PhotoViewer.this.onTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            keyEvent.getKeyCode();
            if (!PhotoViewer.this.muteVideo && PhotoViewer.this.sendPhotoType != 1 && PhotoViewer.this.isCurrentVideo && PhotoViewer.this.videoPlayer != null && keyEvent.getRepeatCount() == 0 && keyEvent.getAction() == 0 && (keyEvent.getKeyCode() == 24 || keyEvent.getKeyCode() == 25)) {
                PhotoViewer.this.videoPlayer.setVolume(1.0f);
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        /* JADX WARN: Code restructure failed: missing block: B:36:0x0020, code lost:
            if (r0 != 6) goto L17;
         */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                int actionMasked = motionEvent.getActionMasked();
                if (actionMasked != 0) {
                    if (actionMasked != 1 && actionMasked != 3) {
                        if (actionMasked != 5) {
                        }
                    }
                    PhotoViewer.this.scheduleActionBarHide();
                }
                AndroidUtilities.cancelRunOnUIThread(PhotoViewer.this.hideActionBarRunnable);
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            try {
                return super.drawChild(canvas, view, j);
            } catch (Throwable unused) {
                return false;
            }
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int i3;
            int i4;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i5 = Build.VERSION.SDK_INT;
            if (i5 >= 21) {
                if (!PhotoViewer.this.inBubbleMode) {
                    if (!AndroidUtilities.incorrectDisplaySizeFix) {
                        if (PhotoViewer.this.insets.bottom >= 0 && (i3 = AndroidUtilities.statusBarHeight) >= 0 && (i4 = (size2 - i3) - PhotoViewer.this.insets.bottom) > 0 && i4 < 4096) {
                            AndroidUtilities.displaySize.y = i4;
                        }
                    } else {
                        int i6 = AndroidUtilities.displaySize.y;
                        if (size2 > i6) {
                            size2 = i6;
                        }
                        size2 += AndroidUtilities.statusBarHeight;
                    }
                }
                size2 -= PhotoViewer.this.insets.bottom;
            } else {
                if (i5 < 21) {
                    PhotoViewer.this.insets.top = AndroidUtilities.statusBarHeight;
                    PhotoViewer.this.insets.bottom = AndroidUtilities.navigationBarHeight;
                }
                int i7 = AndroidUtilities.displaySize.y;
                if (size2 > i7) {
                    size2 = i7;
                }
            }
            int paddingLeft = size - (getPaddingLeft() + getPaddingRight());
            int paddingBottom = size2 - getPaddingBottom();
            setMeasuredDimension(paddingLeft, paddingBottom);
            ViewGroup.LayoutParams layoutParams = PhotoViewer.this.animatingImageView.getLayoutParams();
            PhotoViewer.this.animatingImageView.measure(View.MeasureSpec.makeMeasureSpec(layoutParams.width, Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(layoutParams.height, Integer.MIN_VALUE));
            PhotoViewer.this.containerView.measure(View.MeasureSpec.makeMeasureSpec(paddingLeft, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingBottom, 1073741824));
            PhotoViewer.this.navigationBar.measure(View.MeasureSpec.makeMeasureSpec(paddingLeft, 1073741824), View.MeasureSpec.makeMeasureSpec(PhotoViewer.this.navigationBarHeight, 1073741824));
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            PhotoViewer.this.animatingImageView.layout(getPaddingLeft(), 0, getPaddingLeft() + PhotoViewer.this.animatingImageView.getMeasuredWidth(), PhotoViewer.this.animatingImageView.getMeasuredHeight());
            PhotoViewer.this.containerView.layout(getPaddingLeft(), 0, getPaddingLeft() + PhotoViewer.this.containerView.getMeasuredWidth(), PhotoViewer.this.containerView.getMeasuredHeight());
            PhotoViewer.this.navigationBar.layout(getPaddingLeft(), PhotoViewer.this.containerView.getMeasuredHeight(), PhotoViewer.this.navigationBar.getMeasuredWidth(), PhotoViewer.this.containerView.getMeasuredHeight() + PhotoViewer.this.navigationBar.getMeasuredHeight());
            PhotoViewer.this.wasLayout = true;
            if (z) {
                if (!PhotoViewer.this.dontResetZoomOnFirstLayout) {
                    PhotoViewer photoViewer = PhotoViewer.this;
                    photoViewer.scale = photoViewer.scale1();
                    PhotoViewer.this.translationX = 0.0f;
                    PhotoViewer.this.translationY = 0.0f;
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.updateMinMax(photoViewer2.scale);
                }
                if (PhotoViewer.this.checkImageView != null) {
                    PhotoViewer.this.checkImageView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$13$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.13.this.lambda$onLayout$0();
                        }
                    });
                }
            }
            if (PhotoViewer.this.dontResetZoomOnFirstLayout) {
                PhotoViewer.this.setScaleToFill();
                PhotoViewer.this.dontResetZoomOnFirstLayout = false;
            }
        }

        public /* synthetic */ void lambda$onLayout$0() {
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) PhotoViewer.this.checkImageView.getLayoutParams();
            ((WindowManager) ApplicationLoader.applicationContext.getSystemService("window")).getDefaultDisplay().getRotation();
            int currentActionBarHeight = ((ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(34.0f)) / 2) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
            if (currentActionBarHeight != layoutParams.topMargin) {
                layoutParams.topMargin = currentActionBarHeight;
                PhotoViewer.this.checkImageView.setLayoutParams(layoutParams);
            }
            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) PhotoViewer.this.photosCounterView.getLayoutParams();
            int currentActionBarHeight2 = ((ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(40.0f)) / 2) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
            if (layoutParams2.topMargin != currentActionBarHeight2) {
                layoutParams2.topMargin = currentActionBarHeight2;
                PhotoViewer.this.photosCounterView.setLayoutParams(layoutParams2);
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            PhotoViewer.this.centerImage.onAttachedToWindow();
            PhotoViewer.this.leftImage.onAttachedToWindow();
            PhotoViewer.this.rightImage.onAttachedToWindow();
            PhotoViewer.this.attachedToWindow = true;
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            PhotoViewer.this.centerImage.onDetachedFromWindow();
            PhotoViewer.this.leftImage.onDetachedFromWindow();
            PhotoViewer.this.rightImage.onDetachedFromWindow();
            PhotoViewer.this.attachedToWindow = false;
            PhotoViewer.this.wasLayout = false;
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEventPreIme(KeyEvent keyEvent) {
            if (keyEvent != null && keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1) {
                if (PhotoViewer.this.textSelectionHelper.isInSelectionMode()) {
                    PhotoViewer.this.textSelectionHelper.clear();
                }
                if (PhotoViewer.this.isCaptionOpen()) {
                    PhotoViewer.this.closeCaptionEnter(true);
                    return false;
                } else if (ContentPreviewViewer.getInstance().isVisible()) {
                    ContentPreviewViewer.getInstance().closeWithMenu();
                    return false;
                } else {
                    PhotoViewer.getInstance().closePhoto(true, false);
                    return true;
                }
            }
            return super.dispatchKeyEventPreIme(keyEvent);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (PhotoViewer.this.stickerMakerBackgroundView != null && PhotoViewer.this.stickerMakerBackgroundView.getVisibility() == 0) {
                View view = (View) PhotoViewer.this.stickerMakerBackgroundView.getParent();
                float min = Math.min(PhotoViewer.this.stickerMakerBackgroundView.getAlpha(), view != null ? view.getAlpha() : 1.0f);
                if (min > 0.0f) {
                    canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), (int) (min * 255.0f), 31);
                    PhotoViewer.this.stickerMakerBackgroundView.draw(canvas);
                    canvas.restore();
                }
            }
            if (Build.VERSION.SDK_INT < 21 || !PhotoViewer.this.isVisible) {
                return;
            }
            PhotoViewer.this.blackPaint.setAlpha(PhotoViewer.this.backgroundDrawable.getAlpha());
            canvas.drawRect(0.0f, getMeasuredHeight(), getMeasuredWidth(), getMeasuredHeight() + PhotoViewer.this.insets.bottom, PhotoViewer.this.blackPaint);
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void dispatchDraw(Canvas canvas) {
            UndoView undoView;
            super.dispatchDraw(canvas);
            if (PhotoViewer.this.parentChatActivity == null || (undoView = PhotoViewer.this.parentChatActivity.getUndoView()) == null || undoView.getVisibility() != 0) {
                return;
            }
            canvas.save();
            View view = (View) undoView.getParent();
            canvas.clipRect(view.getX(), view.getY(), view.getX() + view.getWidth(), view.getY() + view.getHeight());
            canvas.translate(undoView.getX(), undoView.getY());
            undoView.draw(canvas);
            canvas.restore();
            invalidate();
        }
    }

    public /* synthetic */ WindowInsets lambda$setParentActivity$6(View view, WindowInsets windowInsets) {
        Rect rect = new Rect(this.insets);
        int i = Build.VERSION.SDK_INT;
        if (i >= 30) {
            Insets insets = windowInsets.getInsets(WindowInsetsCompat.Type.displayCutout() | WindowInsetsCompat.Type.systemBars());
            this.insets.set(insets.left, insets.top, insets.right, insets.bottom);
        } else {
            this.insets.set(windowInsets.getStableInsetLeft(), windowInsets.getStableInsetTop(), windowInsets.getStableInsetRight(), windowInsets.getStableInsetBottom());
        }
        int i2 = this.insets.top;
        Activity activity = this.parentActivity;
        if ((activity instanceof LaunchActivity) && ((i2 != 0 || AndroidUtilities.isInMultiwindow) && !this.inBubbleMode && AndroidUtilities.statusBarHeight != i2)) {
            AndroidUtilities.statusBarHeight = i2;
            ((LaunchActivity) activity).drawerLayoutContainer.requestLayout();
        }
        if (!rect.equals(windowInsets)) {
            int i3 = this.animationInProgress;
            if (i3 == 1 || i3 == 3) {
                ClippingImageView clippingImageView = this.animatingImageView;
                clippingImageView.setTranslationX(clippingImageView.getTranslationX() - getLeftInset());
                this.animationValues[0][2] = this.animatingImageView.getTranslationX();
            }
            FrameLayout frameLayout = this.windowView;
            if (frameLayout != null) {
                frameLayout.requestLayout();
            }
        }
        View view2 = this.navigationBar;
        if (view2 != null) {
            this.navigationBarHeight = this.insets.bottom;
            ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams) view2.getLayoutParams();
            int i4 = this.navigationBarHeight;
            marginLayoutParams.height = i4;
            marginLayoutParams.bottomMargin = (-i4) / 2;
            this.navigationBar.setLayoutParams(marginLayoutParams);
        }
        this.containerView.setPadding(windowInsets.getSystemWindowInsetLeft(), 0, windowInsets.getSystemWindowInsetRight(), 0);
        if (this.actionBar != null) {
            AndroidUtilities.cancelRunOnUIThread(this.updateContainerFlagsRunnable);
            if (this.isVisible && this.animationInProgress == 0) {
                AndroidUtilities.runOnUIThread(this.updateContainerFlagsRunnable, 200L);
            }
        }
        if (i >= 30) {
            return WindowInsets.CONSUMED;
        }
        return windowInsets.consumeSystemWindowInsets();
    }

    /* loaded from: classes4.dex */
    public class 16 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Theme.ResourcesProvider val$resourcesProvider;

        16(Theme.ResourcesProvider resourcesProvider) {
            PhotoViewer.this = r1;
            this.val$resourcesProvider = resourcesProvider;
        }

        public /* synthetic */ void lambda$onItemClick$0(boolean z, Uri uri) {
            BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, z, -115203550, -1).show();
        }

        public /* synthetic */ void lambda$onItemClick$2(DialogInterface dialogInterface, int i) {
            File pathToMessage;
            if (PhotoViewer.this.currentMessageObject == null) {
                return;
            }
            if (!(MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) || MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage == null || MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.document != null) {
                pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(PhotoViewer.this.currentMessageObject.messageOwner);
            } else {
                PhotoViewer photoViewer = PhotoViewer.this;
                pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(photoViewer.getFileLocation(photoViewer.currentIndex, null), true);
            }
            final boolean isVideo = PhotoViewer.this.currentMessageObject.isVideo();
            if (pathToMessage == null || !pathToMessage.exists()) {
                PhotoViewer.this.showDownloadAlert();
                return;
            }
            MediaController.saveFile(pathToMessage.toString(), PhotoViewer.this.parentActivity, isVideo ? 1 : 0, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda15
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.16.this.lambda$onItemClick$1(isVideo, (Uri) obj);
                }
            });
        }

        public /* synthetic */ void lambda$onItemClick$1(boolean z, Uri uri) {
            BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, z, -115203550, -1).show();
        }

        public /* synthetic */ void lambda$onItemClick$5(final boolean z, ArrayList arrayList, DialogInterface dialogInterface, int i) {
            File pathToMessage;
            final int[] iArr = new int[1];
            final int[] iArr2 = new int[1];
            final Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda12
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.16.this.lambda$onItemClick$3(iArr2, iArr, z);
                }
            };
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                MessageObject messageObject = (MessageObject) arrayList.get(i2);
                if (messageObject != null) {
                    if (!(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) || MessageObject.getMedia(messageObject.messageOwner).webpage == null || MessageObject.getMedia(messageObject.messageOwner).webpage.document != null) {
                        pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(messageObject.messageOwner);
                    } else {
                        FileLoader fileLoader = FileLoader.getInstance(PhotoViewer.this.currentAccount);
                        PhotoViewer photoViewer = PhotoViewer.this;
                        pathToMessage = fileLoader.getPathToAttach(photoViewer.getFileLocation(photoViewer.currentIndex, null), true);
                    }
                    boolean isVideo = messageObject.isVideo();
                    if (pathToMessage != null && pathToMessage.exists()) {
                        iArr[0] = iArr[0] + 1;
                        MediaController.saveFile(pathToMessage.toString(), PhotoViewer.this.parentActivity, isVideo ? 1 : 0, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda14
                            @Override // org.telegram.messenger.Utilities.Callback
                            public final void run(Object obj) {
                                Uri uri = (Uri) obj;
                                AndroidUtilities.runOnUIThread(runnable);
                            }
                        });
                    }
                }
            }
        }

        public /* synthetic */ void lambda$onItemClick$3(int[] iArr, int[] iArr2, boolean z) {
            iArr[0] = iArr[0] + 1;
            if (iArr[0] == iArr2[0]) {
                BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, iArr2[0], z, -115203550, -1).show();
            }
        }

        public /* synthetic */ void lambda$onItemClick$7(DialogInterface dialogInterface, int i) {
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(PhotoViewer.this.currentMessageObject);
            PhotoViewer.this.showShareAlert(arrayList);
        }

        public /* synthetic */ void lambda$onItemClick$8(ArrayList arrayList, DialogInterface dialogInterface, int i) {
            PhotoViewer.this.showShareAlert(arrayList);
        }

        public /* synthetic */ boolean lambda$onItemClick$10(ArrayList arrayList, ChatActivity chatActivity, DialogsActivity dialogsActivity, ArrayList arrayList2, CharSequence charSequence, boolean z, TopicsFragment topicsFragment) {
            UndoView undoView;
            long j;
            if (arrayList2.size() > 1 || ((MessagesStorage.TopicKey) arrayList2.get(0)).dialogId == UserConfig.getInstance(PhotoViewer.this.currentAccount).getClientUserId() || charSequence != null) {
                for (int i = 0; i < arrayList2.size(); i++) {
                    long j2 = ((MessagesStorage.TopicKey) arrayList2.get(i)).dialogId;
                    if (charSequence != null) {
                        j = j2;
                        SendMessagesHelper.getInstance(PhotoViewer.this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(charSequence.toString(), j2, null, null, null, true, null, null, null, true, 0, null, false));
                    } else {
                        j = j2;
                    }
                    SendMessagesHelper.getInstance(PhotoViewer.this.currentAccount).sendMessage(arrayList, j, false, false, true, 0);
                }
                dialogsActivity.finishFragment();
                if (chatActivity != null && (undoView = chatActivity.getUndoView()) != null) {
                    if (arrayList2.size() == 1) {
                        undoView.showWithAction(((MessagesStorage.TopicKey) arrayList2.get(0)).dialogId, 53, Integer.valueOf(arrayList.size()));
                    } else {
                        undoView.showWithAction(0L, 53, Integer.valueOf(arrayList.size()), Integer.valueOf(arrayList2.size()), (Runnable) null, (Runnable) null);
                    }
                }
            } else {
                MessagesStorage.TopicKey topicKey = (MessagesStorage.TopicKey) arrayList2.get(0);
                long j3 = topicKey.dialogId;
                Bundle bundle = new Bundle();
                bundle.putBoolean("scrollToTopOnResume", true);
                if (DialogObject.isEncryptedDialog(j3)) {
                    bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j3));
                } else if (DialogObject.isUserDialog(j3)) {
                    bundle.putLong("user_id", j3);
                } else {
                    bundle.putLong("chat_id", -j3);
                }
                ChatActivity chatActivity2 = new ChatActivity(bundle);
                if (topicKey.topicId != 0) {
                    ForumUtilities.applyTopic(chatActivity2, topicKey);
                }
                if (((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(chatActivity2, true, false)) {
                    chatActivity2.showFieldPanelForForward(true, arrayList);
                } else {
                    dialogsActivity.finishFragment();
                }
            }
            return true;
        }

        public static /* synthetic */ void lambda$onItemClick$11(boolean[] zArr, View view) {
            zArr[0] = !zArr[0];
            ((CheckBoxCell) view).setChecked(zArr[0], true);
        }

        /* JADX WARN: Multi-variable type inference failed */
        public /* synthetic */ void lambda$onItemClick$12(boolean[] zArr, DialogInterface dialogInterface, int i) {
            ArrayList arrayList;
            TLRPC$EncryptedChat tLRPC$EncryptedChat;
            if (PhotoViewer.this.placeProvider.onDeletePhoto(PhotoViewer.this.currentIndex)) {
                if (!PhotoViewer.this.imagesArr.isEmpty()) {
                    if (PhotoViewer.this.currentIndex < 0 || PhotoViewer.this.currentIndex >= PhotoViewer.this.imagesArr.size()) {
                        return;
                    }
                    MessageObject messageObject = (MessageObject) PhotoViewer.this.imagesArr.get(PhotoViewer.this.currentIndex);
                    if (messageObject.isSent()) {
                        PhotoViewer.this.closePhoto(false, false);
                        ArrayList arrayList2 = new ArrayList();
                        if (PhotoViewer.this.slideshowMessageId != 0) {
                            arrayList2.add(Integer.valueOf(PhotoViewer.this.slideshowMessageId));
                        } else {
                            arrayList2.add(Integer.valueOf(messageObject.getId()));
                        }
                        if (!DialogObject.isEncryptedDialog(messageObject.getDialogId()) || messageObject.messageOwner.random_id == 0) {
                            arrayList = null;
                            tLRPC$EncryptedChat = null;
                        } else {
                            ArrayList arrayList3 = new ArrayList();
                            arrayList3.add(Long.valueOf(messageObject.messageOwner.random_id));
                            arrayList = arrayList3;
                            tLRPC$EncryptedChat = MessagesController.getInstance(PhotoViewer.this.currentAccount).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(messageObject.getDialogId())));
                        }
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteMessages(arrayList2, arrayList, tLRPC$EncryptedChat, messageObject.getDialogId(), messageObject.getQuickReplyId(), zArr[0], messageObject.getChatMode());
                        return;
                    }
                    return;
                } else if (!PhotoViewer.this.avatarsArr.isEmpty()) {
                    if (PhotoViewer.this.currentIndex < 0 || PhotoViewer.this.currentIndex >= PhotoViewer.this.avatarsArr.size()) {
                        return;
                    }
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) PhotoViewer.this.imagesArrMessages.get(PhotoViewer.this.currentIndex);
                    if (tLRPC$Message != null) {
                        ArrayList<Integer> arrayList4 = new ArrayList<>();
                        arrayList4.add(Integer.valueOf(tLRPC$Message.id));
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteMessages(arrayList4, null, null, MessageObject.getDialogId(tLRPC$Message), tLRPC$Message.quick_reply_shortcut_id, true, 0);
                        NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
                    }
                    if (PhotoViewer.this.isCurrentAvatarSet()) {
                        if (PhotoViewer.this.avatarsDialogId > 0) {
                            MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteUserPhoto(null);
                        } else {
                            MessagesController.getInstance(PhotoViewer.this.currentAccount).changeChatAvatar(-PhotoViewer.this.avatarsDialogId, null, null, null, null, 0.0d, null, null, null, null);
                        }
                        PhotoViewer.this.closePhoto(false, false);
                        return;
                    }
                    TLRPC$Photo tLRPC$Photo = (TLRPC$Photo) PhotoViewer.this.avatarsArr.get(PhotoViewer.this.currentIndex);
                    if (tLRPC$Photo == null) {
                        return;
                    }
                    TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                    tLRPC$TL_inputPhoto.id = tLRPC$Photo.id;
                    tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
                    byte[] bArr = tLRPC$Photo.file_reference;
                    tLRPC$TL_inputPhoto.file_reference = bArr;
                    if (bArr == null) {
                        tLRPC$TL_inputPhoto.file_reference = new byte[0];
                    }
                    if (PhotoViewer.this.avatarsDialogId > 0) {
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteUserPhoto(tLRPC$TL_inputPhoto);
                    }
                    MessagesStorage.getInstance(PhotoViewer.this.currentAccount).clearUserPhoto(PhotoViewer.this.avatarsDialogId, tLRPC$Photo.id);
                    PhotoViewer.this.imagesArrLocations.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrLocationsSizes.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrLocationsVideo.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrMessages.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.avatarsArr.remove(PhotoViewer.this.currentIndex);
                    if (!PhotoViewer.this.imagesArrLocations.isEmpty()) {
                        int i2 = PhotoViewer.this.currentIndex;
                        if (i2 >= PhotoViewer.this.avatarsArr.size()) {
                            i2 = PhotoViewer.this.avatarsArr.size() - 1;
                        }
                        PhotoViewer.this.currentIndex = -1;
                        PhotoViewer.this.setImageIndex(i2);
                    } else {
                        PhotoViewer.this.closePhoto(false, false);
                    }
                    if (tLRPC$Message == null) {
                        NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
                        return;
                    }
                    return;
                } else if (PhotoViewer.this.secureDocuments.isEmpty() || PhotoViewer.this.placeProvider == null) {
                    return;
                } else {
                    PhotoViewer.this.secureDocuments.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.placeProvider.deleteImageAtIndex(PhotoViewer.this.currentIndex);
                    if (!PhotoViewer.this.secureDocuments.isEmpty()) {
                        int i3 = PhotoViewer.this.currentIndex;
                        if (i3 >= PhotoViewer.this.secureDocuments.size()) {
                            i3 = PhotoViewer.this.secureDocuments.size() - 1;
                        }
                        PhotoViewer.this.currentIndex = -1;
                        PhotoViewer.this.setImageIndex(i3);
                        return;
                    }
                    PhotoViewer.this.closePhoto(false, false);
                    return;
                }
            }
            PhotoViewer.this.closePhoto(false, false);
        }

        /* JADX WARN: Removed duplicated region for block: B:631:0x03aa  */
        /* JADX WARN: Removed duplicated region for block: B:633:0x03c0  */
        /* JADX WARN: Removed duplicated region for block: B:634:0x03c6  */
        /* JADX WARN: Removed duplicated region for block: B:641:0x03e4  */
        /* JADX WARN: Removed duplicated region for block: B:668:0x04d3  */
        /* JADX WARN: Removed duplicated region for block: B:690:0x058f  */
        /* JADX WARN: Removed duplicated region for block: B:691:0x059d  */
        /* JADX WARN: Removed duplicated region for block: B:724:0x0680  */
        /* JADX WARN: Removed duplicated region for block: B:770:0x07f5  */
        /* JADX WARN: Removed duplicated region for block: B:968:? A[RETURN, SYNTHETIC] */
        /* JADX WARN: Type inference failed for: r10v33 */
        /* JADX WARN: Type inference failed for: r10v34 */
        /* JADX WARN: Type inference failed for: r10v35, types: [int, boolean] */
        /* JADX WARN: Type inference failed for: r10v36 */
        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onItemClick(int i) {
            TLObject tLObject;
            boolean z;
            CharSequence deleteMessageString;
            TextView textView;
            long dialogId;
            TLRPC$Chat chat;
            TLRPC$User tLRPC$User;
            boolean z2;
            final ArrayList arrayList;
            MessageObject.GroupedMessages group;
            boolean z3;
            String str;
            MessageObject.GroupedMessages groupedMessages;
            final ?? r10;
            boolean isVideo;
            File pathToMessage;
            boolean z4 = true;
            if (i == -1) {
                if (PhotoViewer.this.photoPaintView == null || !PhotoViewer.this.photoPaintView.onBackPressed()) {
                    if (PhotoViewer.this.isCaptionOpen()) {
                        PhotoViewer.this.closeCaptionEnter(false);
                        return;
                    } else {
                        PhotoViewer.this.closePhoto(true, false);
                        return;
                    }
                }
                return;
            }
            File file = null;
            if (i == 1) {
                int i2 = Build.VERSION.SDK_INT;
                if (i2 >= 23 && ((i2 <= 28 || BuildVars.NO_SCOPED_STORAGE) && PhotoViewer.this.parentActivity.checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                    PhotoViewer.this.parentActivity.requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                    return;
                }
                final ArrayList arrayList2 = new ArrayList(1);
                if (PhotoViewer.this.parentChatActivity != null) {
                    str = "AllNPhotos";
                    groupedMessages = PhotoViewer.this.parentChatActivity.getGroup(PhotoViewer.this.currentMessageObject.getGroupId());
                } else {
                    str = "AllNPhotos";
                    groupedMessages = null;
                }
                if (groupedMessages == null) {
                    arrayList2.add(PhotoViewer.this.currentMessageObject);
                } else {
                    arrayList2.addAll(groupedMessages.messages);
                }
                if (arrayList2.size() <= 1) {
                    if (PhotoViewer.this.currentMessageObject != null) {
                        if (!(MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) || MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage == null || MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.document != null) {
                            pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(PhotoViewer.this.currentMessageObject.messageOwner);
                        } else {
                            PhotoViewer photoViewer = PhotoViewer.this;
                            pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(photoViewer.getFileLocation(photoViewer.currentIndex, null), true);
                            if (!pathToMessage.exists()) {
                                pathToMessage = new File(FileLoader.getDirectory(4), pathToMessage.getName());
                            }
                        }
                        file = pathToMessage;
                        isVideo = PhotoViewer.this.currentMessageObject.isVideo();
                    } else {
                        if (PhotoViewer.this.currentFileLocationVideo != null) {
                            String fileLocationExt = PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo);
                            file = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), fileLocationExt, PhotoViewer.this.avatarsDialogId != 0 || PhotoViewer.this.isEvent);
                            if (fileLocationExt != null) {
                                fileLocationExt = fileLocationExt.toLowerCase();
                            }
                            if (fileLocationExt == null || (!fileLocationExt.equals("webm") && !fileLocationExt.equals("mp4") && !fileLocationExt.equals("gif"))) {
                                z4 = false;
                            }
                            r10 = z4;
                        } else if (PhotoViewer.this.pageBlocksAdapter != null) {
                            file = PhotoViewer.this.pageBlocksAdapter.getFile(PhotoViewer.this.currentIndex);
                            isVideo = PhotoViewer.this.pageBlocksAdapter.isVideo(PhotoViewer.this.currentIndex);
                        } else {
                            r10 = 0;
                        }
                        if (file != null && !file.exists()) {
                            file = new File(FileLoader.getDirectory(4), file.getName());
                        }
                        if (file != null || !file.exists()) {
                            PhotoViewer.this.showDownloadAlert();
                            return;
                        } else {
                            MediaController.saveFile(file.toString(), PhotoViewer.this.parentActivity, r10, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda16
                                @Override // org.telegram.messenger.Utilities.Callback
                                public final void run(Object obj) {
                                    PhotoViewer.16.this.lambda$onItemClick$0(r10, (Uri) obj);
                                }
                            });
                            return;
                        }
                    }
                    r10 = isVideo;
                    if (file != null) {
                        file = new File(FileLoader.getDirectory(4), file.getName());
                    }
                    if (file != null) {
                    }
                    PhotoViewer.this.showDownloadAlert();
                    return;
                }
                final boolean z5 = false;
                for (int i3 = 0; i3 < arrayList2.size() && !z5; i3++) {
                    if (((MessageObject) arrayList2.get(i3)).isVideo()) {
                        z5 = true;
                    }
                }
                AlertDialog.Builder negativeButton = new AlertDialog.Builder(PhotoViewer.this.parentActivity, this.val$resourcesProvider).setTitle(LocaleController.getString("SaveGroupMedia", R.string.SaveGroupMedia)).setMessage(LocaleController.getString("SaveGroupMediaMessage", R.string.SaveGroupMediaMessage)).setDialogButtonColorKey(Theme.key_voipgroup_listeningText).setNegativeButton(!z5 ? LocaleController.getString("ThisPhoto", R.string.ThisPhoto) : LocaleController.getString("ThisMedia", R.string.ThisMedia), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda0
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        PhotoViewer.16.this.lambda$onItemClick$2(dialogInterface, i4);
                    }
                });
                int size = arrayList2.size();
                Object[] objArr = new Object[0];
                AlertDialog create = negativeButton.setPositiveButton(!z5 ? LocaleController.formatPluralString(str, size, objArr) : LocaleController.formatPluralString("AllNMedia", size, objArr), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda3
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        PhotoViewer.16.this.lambda$onItemClick$5(z5, arrayList2, dialogInterface, i4);
                    }
                }).setNeutralButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda6
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        dialogInterface.dismiss();
                    }
                }).create();
                create.setBackgroundColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_dialogBackground));
                create.show();
                View button = create.getButton(-3);
                if (button instanceof TextView) {
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    int i4 = Theme.key_text_RedBold;
                    ((TextView) button).setTextColor(photoViewer2.getThemedColor(i4));
                    button.setBackground(Theme.getRoundRectSelectorDrawable(PhotoViewer.this.getThemedColor(i4)));
                    if ((create.getButtonsLayout() instanceof LinearLayout) && ((LinearLayout) create.getButtonsLayout()).getOrientation() == 1) {
                        button.bringToFront();
                    }
                }
                create.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_actionBarItems));
            } else if (i == 2) {
                if (PhotoViewer.this.currentDialogId != 0) {
                    PhotoViewer.this.disableShowCheck = true;
                    Bundle bundle = new Bundle();
                    bundle.putLong("dialog_id", PhotoViewer.this.currentDialogId);
                    MediaActivity mediaActivity = new MediaActivity(bundle, null);
                    if (PhotoViewer.this.parentChatActivity != null) {
                        mediaActivity.setChatInfo(PhotoViewer.this.parentChatActivity.getCurrentChatInfo());
                    }
                    PhotoViewer.this.closePhoto(false, false);
                    if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                        ((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(mediaActivity, false, true);
                    }
                }
            } else if (i == 4 || i == 23) {
                if (PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                Bundle bundle2 = new Bundle();
                long j = PhotoViewer.this.currentDialogId;
                if (PhotoViewer.this.currentMessageObject != null) {
                    j = PhotoViewer.this.currentMessageObject.getDialogId();
                }
                if (DialogObject.isEncryptedDialog(j)) {
                    bundle2.putInt("enc_id", DialogObject.getEncryptedChatId(j));
                } else if (!DialogObject.isUserDialog(j)) {
                    TLRPC$Chat chat2 = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-j));
                    if (chat2 != null && chat2.migrated_to != null) {
                        bundle2.putLong("migrated_to", j);
                        j = -chat2.migrated_to.channel_id;
                    }
                    bundle2.putLong("chat_id", -j);
                } else {
                    bundle2.putLong("user_id", j);
                }
                bundle2.putInt("message_id", PhotoViewer.this.currentMessageObject.getId());
                if (i == 23) {
                    bundle2.putInt("reply_to", PhotoViewer.this.currentMessageObject.getId());
                }
                NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeChats, new Object[0]);
                if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                    LaunchActivity launchActivity = (LaunchActivity) PhotoViewer.this.parentActivity;
                    launchActivity.presentFragment(new ChatActivity(bundle2), launchActivity.getMainFragmentsCount() > 1 || AndroidUtilities.isTablet(), true);
                }
                PhotoViewer.this.closePhoto(false, false);
                PhotoViewer.this.currentMessageObject = null;
            } else if (i == 3) {
                if (PhotoViewer.this.currentMessageObject == null || !(PhotoViewer.this.parentActivity instanceof LaunchActivity)) {
                    return;
                }
                if (!PhotoViewer.this.currentMessageObject.scheduled) {
                    long dialogId2 = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (DialogObject.isChatDialog(dialogId2)) {
                        z2 = ChatObject.isChannelAndNotMegaGroup(MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId2)));
                        ((LaunchActivity) PhotoViewer.this.parentActivity).switchToAccount(PhotoViewer.this.currentMessageObject.currentAccount, true);
                        arrayList = new ArrayList(1);
                        group = PhotoViewer.this.parentChatActivity != null ? PhotoViewer.this.parentChatActivity.getGroup(PhotoViewer.this.currentMessageObject.getGroupId()) : null;
                        if (group != null) {
                            arrayList.add(PhotoViewer.this.currentMessageObject);
                        } else {
                            arrayList.addAll(group.messages);
                        }
                        if (!z2 && arrayList.size() <= 1) {
                            PhotoViewer.this.showShareAlert(arrayList);
                            return;
                        } else if (arrayList.size() <= 1) {
                            for (int i5 = 0; i5 < arrayList.size(); i5++) {
                                if (!((MessageObject) arrayList.get(i5)).isPhoto() || ((MessageObject) arrayList.get(i5)).isVideo()) {
                                    z3 = false;
                                    break;
                                }
                            }
                            z3 = true;
                            AlertDialog create2 = new AlertDialog.Builder(PhotoViewer.this.parentActivity, this.val$resourcesProvider).setTitle(LocaleController.getString("ForwardGroupMedia", R.string.ForwardGroupMedia)).setMessage(LocaleController.getString("ForwardGroupMediaMessage", R.string.ForwardGroupMediaMessage)).setDialogButtonColorKey(Theme.key_voipgroup_listeningText).setNegativeButton(z3 ? LocaleController.getString("ThisPhoto", R.string.ThisPhoto) : LocaleController.getString("ThisMedia", R.string.ThisMedia), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda1
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    PhotoViewer.16.this.lambda$onItemClick$7(dialogInterface, i6);
                                }
                            }).setPositiveButton(z3 ? LocaleController.formatPluralString("AllNPhotos", arrayList.size(), new Object[0]) : LocaleController.formatPluralString("AllNMedia", arrayList.size(), new Object[0]), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda2
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    PhotoViewer.16.this.lambda$onItemClick$8(arrayList, dialogInterface, i6);
                                }
                            }).setNeutralButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda5
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    dialogInterface.dismiss();
                                }
                            }).create();
                            create2.setBackgroundColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_dialogBackground));
                            create2.show();
                            View button2 = create2.getButton(-3);
                            if (button2 instanceof TextView) {
                                PhotoViewer photoViewer3 = PhotoViewer.this;
                                int i6 = Theme.key_text_RedBold;
                                ((TextView) button2).setTextColor(photoViewer3.getThemedColor(i6));
                                button2.setBackground(Theme.getRoundRectSelectorDrawable(PhotoViewer.this.getThemedColor(i6)));
                                if ((create2.getButtonsLayout() instanceof LinearLayout) && ((LinearLayout) create2.getButtonsLayout()).getOrientation() == 1) {
                                    button2.bringToFront();
                                }
                            }
                            create2.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_actionBarItems));
                            return;
                        } else {
                            Bundle bundle3 = new Bundle();
                            bundle3.putBoolean("onlySelect", true);
                            bundle3.putBoolean("canSelectTopics", true);
                            bundle3.putInt("dialogsType", 3);
                            DialogsActivity dialogsActivity = new DialogsActivity(bundle3);
                            final ArrayList arrayList3 = new ArrayList();
                            arrayList3.add(PhotoViewer.this.currentMessageObject);
                            final ChatActivity chatActivity = PhotoViewer.this.parentChatActivity;
                            dialogsActivity.setDelegate(new DialogsActivity.DialogsActivityDelegate() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda18
                                @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
                                public final boolean didSelectDialogs(DialogsActivity dialogsActivity2, ArrayList arrayList4, CharSequence charSequence, boolean z6, TopicsFragment topicsFragment) {
                                    boolean lambda$onItemClick$10;
                                    lambda$onItemClick$10 = PhotoViewer.16.this.lambda$onItemClick$10(arrayList3, chatActivity, dialogsActivity2, arrayList4, charSequence, z6, topicsFragment);
                                    return lambda$onItemClick$10;
                                }
                            });
                            ((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(dialogsActivity, false, true);
                            PhotoViewer.this.closePhoto(false, false);
                            return;
                        }
                    }
                }
                z2 = false;
                ((LaunchActivity) PhotoViewer.this.parentActivity).switchToAccount(PhotoViewer.this.currentMessageObject.currentAccount, true);
                arrayList = new ArrayList(1);
                if (PhotoViewer.this.parentChatActivity != null) {
                }
                if (group != null) {
                }
                if (!z2) {
                }
                if (arrayList.size() <= 1) {
                }
            } else if (i == 20) {
                PhotoViewer.this.openCurrentPhotoInPaintModeForSelect();
            } else if (i != 6) {
                if (i == 10 || i == 18) {
                    PhotoViewer.this.onSharePressed();
                } else if (i == 11) {
                    try {
                        if (PhotoViewer.this.isEmbedVideo) {
                            Browser.openUrl(PhotoViewer.this.parentActivity, MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.url);
                            PhotoViewer.this.closePhoto(false, false);
                        } else if (PhotoViewer.this.currentMessageObject != null) {
                            MessageObject messageObject = PhotoViewer.this.currentMessageObject;
                            Activity activity = PhotoViewer.this.parentActivity;
                            Theme.ResourcesProvider resourcesProvider = this.val$resourcesProvider;
                            if (!PhotoViewer.this.currentMessageObject.isVideo() && !PhotoViewer.this.currentMessageObject.isPhoto() && !PhotoViewer.this.currentMessageObject.isSticker()) {
                                z4 = false;
                            }
                            if (!AndroidUtilities.openForView(messageObject, activity, resourcesProvider, z4)) {
                                PhotoViewer.this.showDownloadAlert();
                            } else {
                                PhotoViewer.this.closePhoto(false, false);
                            }
                        } else if (PhotoViewer.this.pageBlocksAdapter != null) {
                            if (!AndroidUtilities.openForView(PhotoViewer.this.pageBlocksAdapter.getMedia(PhotoViewer.this.currentIndex), PhotoViewer.this.parentActivity)) {
                                PhotoViewer.this.showDownloadAlert();
                            } else {
                                PhotoViewer.this.closePhoto(false, false);
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                } else if (i == 13 || i == 15) {
                    if (PhotoViewer.this.parentActivity == null || PhotoViewer.this.currentMessageObject == null) {
                        return;
                    }
                    if (MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaPhoto) {
                        tLObject = MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).photo;
                    } else if (!(MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC$TL_messageMediaDocument)) {
                        return;
                    } else {
                        tLObject = MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).document;
                    }
                    PhotoViewer.this.masksAlert = new StickersAlert(PhotoViewer.this.parentActivity, PhotoViewer.this.currentMessageObject, tLObject, this.val$resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.16.1
                        {
                            16.this = this;
                        }

                        @Override // org.telegram.ui.Components.StickersAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
                        public void dismiss() {
                            super.dismiss();
                            if (PhotoViewer.this.masksAlert == this) {
                                PhotoViewer.this.masksAlert = null;
                            }
                        }
                    };
                    PhotoViewer.this.masksAlert.show();
                } else if (i == 5) {
                    if (PhotoViewer.this.pipItem.getAlpha() != 1.0f) {
                        return;
                    }
                    if (PhotoViewer.this.isEmbedVideo) {
                        if (PhotoViewer.this.photoViewerWebView.openInPip()) {
                            if (PhotoViewer.PipInstance != null) {
                                PhotoViewer.PipInstance.destroyPhotoViewer();
                            }
                            PhotoViewer.this.isInline = true;
                            PhotoViewer unused = PhotoViewer.PipInstance = PhotoViewer.Instance;
                            PhotoViewer unused2 = PhotoViewer.Instance = null;
                            PhotoViewer.this.isVisible = false;
                            PhotoViewer.this.isVisibleOrAnimating = false;
                            if (PhotoViewer.this.currentPlaceObject != null && !PhotoViewer.this.currentPlaceObject.imageReceiver.getVisible()) {
                                PhotoViewer.this.currentPlaceObject.imageReceiver.setVisible(true, true);
                            }
                            PhotoViewer.this.clippingImageProgress = 1.0f;
                            PhotoViewer.this.containerView.invalidate();
                            PhotoViewer.this.dismissInternal();
                            return;
                        }
                        return;
                    }
                    PhotoViewer.this.switchToPip(false);
                } else if (i == 7) {
                    if (PhotoViewer.this.currentMessageObject == null) {
                        return;
                    }
                    FileLoader.getInstance(PhotoViewer.this.currentAccount).cancelLoadFile(PhotoViewer.this.currentMessageObject.getDocument());
                    PhotoViewer.this.releasePlayer(false);
                    PhotoViewer.this.bottomLayout.setTag(r3);
                    PhotoViewer.this.bottomLayout.setVisibility(0);
                } else if (i == 14) {
                    if (PhotoViewer.this.currentMessageObject != null) {
                        TLRPC$Document document = PhotoViewer.this.currentMessageObject.getDocument();
                        if (PhotoViewer.this.parentChatActivity == null || PhotoViewer.this.parentChatActivity.chatActivityEnterView == null) {
                            MediaDataController.getInstance(PhotoViewer.this.currentAccount).addRecentGif(document, (int) (System.currentTimeMillis() / 1000), true);
                        } else {
                            PhotoViewer.this.parentChatActivity.chatActivityEnterView.addRecentGif(document);
                        }
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).saveGif(PhotoViewer.this.currentMessageObject, document);
                    } else if (PhotoViewer.this.pageBlocksAdapter == null) {
                        return;
                    } else {
                        TLObject media = PhotoViewer.this.pageBlocksAdapter.getMedia(PhotoViewer.this.currentIndex);
                        if (media instanceof TLRPC$Document) {
                            TLRPC$Document tLRPC$Document = (TLRPC$Document) media;
                            MediaDataController.getInstance(PhotoViewer.this.currentAccount).addRecentGif(tLRPC$Document, (int) (System.currentTimeMillis() / 1000), true);
                            MessagesController.getInstance(PhotoViewer.this.currentAccount).saveGif(PhotoViewer.this.pageBlocksAdapter.getParentObject(), tLRPC$Document);
                        }
                    }
                    if (PhotoViewer.this.containerView != null) {
                        BulletinFactory.of(PhotoViewer.this.containerView, this.val$resourcesProvider).createDownloadBulletin(BulletinFactory.FileType.GIF, this.val$resourcesProvider).show();
                    }
                } else if (i == 16) {
                    final TLRPC$Photo tLRPC$Photo = (TLRPC$Photo) PhotoViewer.this.avatarsArr.get(PhotoViewer.this.currentIndex);
                    if (tLRPC$Photo == null || tLRPC$Photo.sizes.isEmpty()) {
                        return;
                    }
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 800);
                    TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 90);
                    final UserConfig userConfig = UserConfig.getInstance(PhotoViewer.this.currentAccount);
                    if (PhotoViewer.this.avatarsDialogId != userConfig.clientUserId) {
                        TLRPC$Chat chat3 = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-PhotoViewer.this.avatarsDialogId));
                        if (chat3 == null) {
                            return;
                        }
                        TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto = new TLRPC$TL_inputChatPhoto();
                        TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                        tLRPC$TL_inputChatPhoto.id = tLRPC$TL_inputPhoto;
                        tLRPC$TL_inputPhoto.id = tLRPC$Photo.id;
                        tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
                        tLRPC$TL_inputPhoto.file_reference = tLRPC$Photo.file_reference;
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).changeChatAvatar(-PhotoViewer.this.avatarsDialogId, tLRPC$TL_inputChatPhoto, null, null, null, 0.0d, null, null, null, null);
                        TLRPC$ChatPhoto tLRPC$ChatPhoto = chat3.photo;
                        tLRPC$ChatPhoto.dc_id = tLRPC$Photo.dc_id;
                        tLRPC$ChatPhoto.photo_small = closestPhotoSizeWithSize2.location;
                        tLRPC$ChatPhoto.photo_big = closestPhotoSizeWithSize.location;
                        NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_AVATAR));
                    } else {
                        TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
                        TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto2 = new TLRPC$TL_inputPhoto();
                        tLRPC$TL_photos_updateProfilePhoto.id = tLRPC$TL_inputPhoto2;
                        tLRPC$TL_inputPhoto2.id = tLRPC$Photo.id;
                        tLRPC$TL_inputPhoto2.access_hash = tLRPC$Photo.access_hash;
                        tLRPC$TL_inputPhoto2.file_reference = tLRPC$Photo.file_reference;
                        ConnectionsManager.getInstance(PhotoViewer.this.currentAccount).sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda17
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                                PhotoViewer.16.this.lambda$onItemClick$14(userConfig, tLRPC$Photo, tLObject2, tLRPC$TL_error);
                            }
                        });
                        TLRPC$User user = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(userConfig.clientUserId));
                        if (user != null) {
                            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = user.photo;
                            tLRPC$UserProfilePhoto.photo_id = tLRPC$Photo.id;
                            tLRPC$UserProfilePhoto.dc_id = tLRPC$Photo.dc_id;
                            tLRPC$UserProfilePhoto.photo_small = closestPhotoSizeWithSize2.location;
                            tLRPC$UserProfilePhoto.photo_big = closestPhotoSizeWithSize.location;
                            userConfig.setCurrentUser(user);
                            userConfig.saveConfig(true);
                            NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                        }
                    }
                    PhotoViewer.this.currentAvatarLocation = ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo);
                    PhotoViewer.this.avatarsArr.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.avatarsArr.add(0, tLRPC$Photo);
                    PhotoViewer.this.imagesArrLocations.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrLocations.add(0, (ImageLocation) PhotoViewer.this.imagesArrLocations.get(PhotoViewer.this.currentIndex));
                    PhotoViewer.this.imagesArrLocationsVideo.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrLocationsVideo.add(0, (ImageLocation) PhotoViewer.this.imagesArrLocationsVideo.get(PhotoViewer.this.currentIndex));
                    PhotoViewer.this.imagesArrLocationsSizes.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrLocationsSizes.add(0, (Long) PhotoViewer.this.imagesArrLocationsSizes.get(PhotoViewer.this.currentIndex));
                    PhotoViewer.this.imagesArrMessages.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.imagesArrMessages.add(0, (TLRPC$Message) PhotoViewer.this.imagesArrMessages.get(PhotoViewer.this.currentIndex));
                    PhotoViewer.this.currentIndex = -1;
                    PhotoViewer.this.setImageIndex(0);
                    PhotoViewer.this.groupedPhotosListView.clear();
                    PhotoViewer.this.groupedPhotosListView.fillList();
                    PhotoViewer.this.hintView.showWithAction(PhotoViewer.this.avatarsDialogId, 22, PhotoViewer.this.currentFileLocationVideo == PhotoViewer.this.currentFileLocation ? null : 1);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda10
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.16.this.lambda$onItemClick$15();
                        }
                    }, 300L);
                } else if (i == 17) {
                    File pathToAttach = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo), true);
                    boolean z6 = PhotoViewer.this.currentFileLocationVideo.imageType == 2;
                    PhotoViewer.this.placeProvider.openPhotoForEdit(pathToAttach.getAbsolutePath(), z6 ? FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocation), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocation), true).getAbsolutePath() : null, z6);
                } else if (i != 21) {
                    if (i == 22) {
                        PhotoViewer.this.captionTranslated = false;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda9
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.16.this.lambda$onItemClick$18();
                            }
                        }, 32L);
                        PhotoViewer.this.updateCaptionTranslated();
                    }
                } else if (PhotoViewer.this.switchingToIndex >= 0 && PhotoViewer.this.switchingToIndex < PhotoViewer.this.imagesArr.size()) {
                    PhotoViewer.this.captionTranslated = true;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda8
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.16.this.lambda$onItemClick$16();
                        }
                    }, 32L);
                    PhotoViewer.this.updateCaptionTranslated();
                    TranslateController translateController = MessagesController.getInstance(PhotoViewer.this.currentAccount).getTranslateController();
                    final PhotoViewer photoViewer4 = PhotoViewer.this;
                    translateController.translatePhoto((MessageObject) PhotoViewer.this.imagesArr.get(PhotoViewer.this.switchingToIndex), new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda13
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.access$16800(PhotoViewer.this);
                        }
                    });
                }
            } else if (PhotoViewer.this.parentActivity != null && PhotoViewer.this.placeProvider != null) {
                if (PhotoViewer.this.currentMessageObject != null && !PhotoViewer.this.currentMessageObject.scheduled) {
                    long dialogId3 = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (DialogObject.isChatDialog(dialogId3)) {
                        z = ChatObject.isChannel(MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId3)));
                        AlertDialog.Builder builder = new AlertDialog.Builder(PhotoViewer.this.parentActivity);
                        deleteMessageString = PhotoViewer.this.placeProvider.getDeleteMessageString();
                        if (deleteMessageString != null) {
                            if (!PhotoViewer.this.isEmbedVideo && ((PhotoViewer.this.currentFileLocationVideo == null || PhotoViewer.this.currentFileLocationVideo == PhotoViewer.this.currentFileLocation) && (PhotoViewer.this.currentMessageObject == null || !PhotoViewer.this.currentMessageObject.isVideo()))) {
                                if (PhotoViewer.this.currentMessageObject != null && PhotoViewer.this.currentMessageObject.isGif()) {
                                    builder.setTitle(LocaleController.getString("AreYouSureDeleteGIFTitle", R.string.AreYouSureDeleteGIFTitle));
                                    if (z) {
                                        builder.setMessage(LocaleController.formatString("AreYouSureDeleteGIFEveryone", R.string.AreYouSureDeleteGIFEveryone, new Object[0]));
                                    } else {
                                        builder.setMessage(LocaleController.formatString("AreYouSureDeleteGIF", R.string.AreYouSureDeleteGIF, new Object[0]));
                                    }
                                } else {
                                    builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
                                    if (z) {
                                        builder.setMessage(LocaleController.formatString("AreYouSureDeletePhotoEveryone", R.string.AreYouSureDeletePhotoEveryone, new Object[0]));
                                    } else {
                                        builder.setMessage(LocaleController.formatString("AreYouSureDeletePhoto", R.string.AreYouSureDeletePhoto, new Object[0]));
                                    }
                                }
                            } else {
                                builder.setTitle(LocaleController.getString("AreYouSureDeleteVideoTitle", R.string.AreYouSureDeleteVideoTitle));
                                if (z) {
                                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteVideoEveryone", R.string.AreYouSureDeleteVideoEveryone, new Object[0]));
                                } else {
                                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteVideo", R.string.AreYouSureDeleteVideo, new Object[0]));
                                }
                            }
                        } else {
                            builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
                            builder.setMessage(deleteMessageString);
                        }
                        final boolean[] zArr = new boolean[1];
                        if (PhotoViewer.this.currentMessageObject != null && !PhotoViewer.this.currentMessageObject.scheduled) {
                            dialogId = PhotoViewer.this.currentMessageObject.getDialogId();
                            if (!DialogObject.isEncryptedDialog(dialogId)) {
                                if (DialogObject.isUserDialog(dialogId)) {
                                    tLRPC$User = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(dialogId));
                                    chat = null;
                                } else {
                                    chat = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId));
                                    tLRPC$User = null;
                                }
                                if (tLRPC$User != null || !ChatObject.isChannel(chat)) {
                                    int currentTime = ConnectionsManager.getInstance(PhotoViewer.this.currentAccount).getCurrentTime();
                                    int i7 = tLRPC$User != null ? MessagesController.getInstance(PhotoViewer.this.currentAccount).revokeTimePmLimit : MessagesController.getInstance(PhotoViewer.this.currentAccount).revokeTimeLimit;
                                    if ((tLRPC$User != null && tLRPC$User.id != UserConfig.getInstance(PhotoViewer.this.currentAccount).getClientUserId()) || chat != null) {
                                        boolean z7 = tLRPC$User != null && MessagesController.getInstance(PhotoViewer.this.currentAccount).canRevokePmInbox;
                                        if ((PhotoViewer.this.currentMessageObject.messageOwner.action == null || (PhotoViewer.this.currentMessageObject.messageOwner.action instanceof TLRPC$TL_messageActionEmpty)) && ((PhotoViewer.this.currentMessageObject.isOut() || z7 || ChatObject.hasAdminRights(chat)) && currentTime - PhotoViewer.this.currentMessageObject.messageOwner.date <= i7)) {
                                            FrameLayout frameLayout = new FrameLayout(PhotoViewer.this.parentActivity);
                                            CheckBoxCell checkBoxCell = new CheckBoxCell(PhotoViewer.this.parentActivity, 1, this.val$resourcesProvider);
                                            checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                            if (chat != null) {
                                                checkBoxCell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
                                            } else {
                                                checkBoxCell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(tLRPC$User)), "", false, false);
                                            }
                                            checkBoxCell.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16.0f : 8.0f), 0, AndroidUtilities.dp(LocaleController.isRTL ? 8.0f : 16.0f), 0);
                                            frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                                            checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda7
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view) {
                                                    PhotoViewer.16.lambda$onItemClick$11(zArr, view);
                                                }
                                            });
                                            builder.setView(frameLayout);
                                            builder.setCustomViewOffset(9);
                                        }
                                    }
                                }
                            }
                        }
                        builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda4
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i8) {
                                PhotoViewer.16.this.lambda$onItemClick$12(zArr, dialogInterface, i8);
                            }
                        });
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        AlertDialog create3 = builder.create();
                        PhotoViewer.this.showAlertDialog(builder);
                        textView = (TextView) create3.getButton(-1);
                        if (textView == null) {
                            textView.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_text_RedBold));
                            return;
                        }
                        return;
                    }
                }
                z = false;
                AlertDialog.Builder builder2 = new AlertDialog.Builder(PhotoViewer.this.parentActivity);
                deleteMessageString = PhotoViewer.this.placeProvider.getDeleteMessageString();
                if (deleteMessageString != null) {
                }
                final boolean[] zArr2 = new boolean[1];
                if (PhotoViewer.this.currentMessageObject != null) {
                    dialogId = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (!DialogObject.isEncryptedDialog(dialogId)) {
                    }
                }
                builder2.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda4
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i8) {
                        PhotoViewer.16.this.lambda$onItemClick$12(zArr2, dialogInterface, i8);
                    }
                });
                builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                AlertDialog create32 = builder2.create();
                PhotoViewer.this.showAlertDialog(builder2);
                textView = (TextView) create32.getButton(-1);
                if (textView == null) {
                }
            }
        }

        public /* synthetic */ void lambda$onItemClick$14(final UserConfig userConfig, final TLRPC$Photo tLRPC$Photo, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda11
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.16.this.lambda$onItemClick$13(tLObject, userConfig, tLRPC$Photo);
                }
            });
        }

        public /* synthetic */ void lambda$onItemClick$13(TLObject tLObject, UserConfig userConfig, TLRPC$Photo tLRPC$Photo) {
            if (tLObject instanceof TLRPC$TL_photos_photo) {
                TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                MessagesController.getInstance(PhotoViewer.this.currentAccount).putUsers(tLRPC$TL_photos_photo.users, false);
                TLRPC$User user = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(userConfig.clientUserId));
                if (tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) {
                    int indexOf = PhotoViewer.this.avatarsArr.indexOf(tLRPC$Photo);
                    if (indexOf >= 0) {
                        PhotoViewer.this.avatarsArr.set(indexOf, tLRPC$TL_photos_photo.photo);
                    }
                    if (user != null) {
                        user.photo.photo_id = tLRPC$TL_photos_photo.photo.id;
                        userConfig.setCurrentUser(user);
                        userConfig.saveConfig(true);
                    }
                }
            }
        }

        public /* synthetic */ void lambda$onItemClick$15() {
            if (PhotoViewer.this.menuItem == null) {
                return;
            }
            PhotoViewer.this.menuItem.hideSubItem(16);
        }

        public /* synthetic */ void lambda$onItemClick$16() {
            PhotoViewer.this.menuItem.hideSubItem(21);
            PhotoViewer.this.menuItem.showSubItem(22);
        }

        public /* synthetic */ void lambda$onItemClick$18() {
            PhotoViewer.this.menuItem.showSubItem(21);
            PhotoViewer.this.menuItem.hideSubItem(22);
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public boolean canOpenMenu() {
            if (PhotoViewer.this.currentMessageObject == null && PhotoViewer.this.currentSecureDocument == null) {
                if (PhotoViewer.this.currentFileLocationVideo == null) {
                    return PhotoViewer.this.pageBlocksAdapter != null;
                }
                File pathToAttach = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.this.avatarsDialogId != 0 || PhotoViewer.this.isEvent);
                return pathToAttach.exists() || new File(FileLoader.getDirectory(4), pathToAttach.getName()).exists();
            }
            return true;
        }
    }

    public /* synthetic */ void lambda$setParentActivity$7(View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.isSponsored()) {
            openAdsMenu();
        } else if (this.actionBar.actionBarMenuOnItemClick.canOpenMenu()) {
            this.menuItem.toggleSubMenu();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$8(Boolean bool) {
        checkProgress(0, false, false);
    }

    public /* synthetic */ void lambda$setParentActivity$9(View view) {
        Activity activity = this.parentActivity;
        if (activity == null) {
            return;
        }
        this.wasRotated = false;
        this.fullscreenedByButton = 1;
        if (this.prevOrientation == -10) {
            this.prevOrientation = activity.getRequestedOrientation();
        }
        if (((WindowManager) this.parentActivity.getSystemService("window")).getDefaultDisplay().getRotation() == 3) {
            this.parentActivity.setRequestedOrientation(8);
        } else {
            this.parentActivity.setRequestedOrientation(0);
        }
        toggleActionBar(false, false);
    }

    public /* synthetic */ View lambda$setParentActivity$10() {
        return new CaptionTextView(this.activityContext, this.captionScrollView, this.textSelectionHelper, new Utilities.Callback2() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda110
            @Override // org.telegram.messenger.Utilities.Callback2
            public final void run(Object obj, Object obj2) {
                PhotoViewer.this.onLinkClick((ClickableSpan) obj, (TextView) obj2);
            }
        }, new Utilities.Callback3() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda111
            @Override // org.telegram.messenger.Utilities.Callback3
            public final void run(Object obj, Object obj2, Object obj3) {
                PhotoViewer.this.onLinkLongPress((URLSpan) obj, (TextView) obj2, (Runnable) obj3);
            }
        });
    }

    public /* synthetic */ void lambda$setParentActivity$11(View view) {
        this.selectedCompression = this.previousCompression;
        didChangedCompressionLevel(false);
        showQualityView(false);
        requestVideoPreview(2);
    }

    public /* synthetic */ void lambda$setParentActivity$12(View view) {
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (obj instanceof MediaController.MediaEditState) {
            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
        }
        showQualityView(false);
        requestVideoPreview(2);
    }

    public /* synthetic */ void lambda$setParentActivity$13(View view) {
        sendPressed(false, 0);
    }

    /* loaded from: classes4.dex */
    public class 27 implements VideoTimelinePlayView.VideoTimelineViewDelegate {
        private int seekTo;
        private Runnable seekToRunnable;
        private boolean wasPlaying;

        27() {
            PhotoViewer.this = r1;
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onLeftProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.videoPlayer.isPlaying()) {
                PhotoViewer.this.manuallyPaused = false;
                PhotoViewer.this.videoPlayer.pause();
                PhotoViewer.this.containerView.invalidate();
            }
            updateAvatarStartTime(1);
            seekTo(f);
            PhotoViewer.this.videoPlayerSeekbar.setProgress(0.0f);
            PhotoViewer.this.videoTimelineView.setProgress(f);
            PhotoViewer.this.updateVideoInfo();
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onRightProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.videoPlayer.isPlaying()) {
                PhotoViewer.this.manuallyPaused = false;
                PhotoViewer.this.videoPlayer.pause();
                PhotoViewer.this.containerView.invalidate();
            }
            updateAvatarStartTime(2);
            seekTo(f);
            PhotoViewer.this.videoPlayerSeekbar.setProgress(1.0f);
            PhotoViewer.this.videoTimelineView.setProgress(f);
            PhotoViewer.this.updateVideoInfo();
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onPlayProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.sendPhotoType == 1) {
                updateAvatarStartTime(0);
            }
            seekTo(f);
        }

        private void seekTo(float f) {
            this.seekTo = (int) (PhotoViewer.this.videoDuration * f);
            if (SharedConfig.getDevicePerformanceClass() == 2) {
                PhotoViewer.this.seekVideoOrWebTo(this.seekTo);
                if (PhotoViewer.this.sendPhotoType == 1) {
                    PhotoViewer.this.needCaptureFrameReadyAtTime = this.seekTo;
                    if (PhotoViewer.this.captureFrameReadyAtTime != PhotoViewer.this.needCaptureFrameReadyAtTime) {
                        PhotoViewer.this.captureFrameReadyAtTime = -1L;
                    }
                }
                this.seekToRunnable = null;
            } else if (this.seekToRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$27$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.27.this.lambda$seekTo$0();
                    }
                };
                this.seekToRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 100L);
            }
        }

        public /* synthetic */ void lambda$seekTo$0() {
            PhotoViewer.this.seekVideoOrWebTo(this.seekTo);
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.needCaptureFrameReadyAtTime = this.seekTo;
                if (PhotoViewer.this.captureFrameReadyAtTime != PhotoViewer.this.needCaptureFrameReadyAtTime) {
                    PhotoViewer.this.captureFrameReadyAtTime = -1L;
                }
            }
            this.seekToRunnable = null;
        }

        private void updateAvatarStartTime(int i) {
            if (PhotoViewer.this.sendPhotoType != 1) {
                return;
            }
            if (i != 0) {
                if (PhotoViewer.this.photoCropView != null) {
                    if (PhotoViewer.this.videoTimelineView.getLeftProgress() > PhotoViewer.this.avatarStartProgress || PhotoViewer.this.videoTimelineView.getRightProgress() < PhotoViewer.this.avatarStartProgress) {
                        PhotoViewer.this.photoCropView.setVideoThumbVisible(false);
                        if (i == 1) {
                            PhotoViewer photoViewer = PhotoViewer.this;
                            photoViewer.avatarStartTime = photoViewer.videoDuration * 1000.0f * PhotoViewer.this.videoTimelineView.getLeftProgress();
                        } else {
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.avatarStartTime = photoViewer2.videoDuration * 1000.0f * PhotoViewer.this.videoTimelineView.getRightProgress();
                        }
                        PhotoViewer.this.captureFrameAtTime = -1L;
                        return;
                    }
                    return;
                }
                return;
            }
            PhotoViewer photoViewer3 = PhotoViewer.this;
            photoViewer3.avatarStartProgress = photoViewer3.videoTimelineView.getProgress();
            PhotoViewer photoViewer4 = PhotoViewer.this;
            photoViewer4.avatarStartTime = photoViewer4.videoDuration * 1000.0f * PhotoViewer.this.avatarStartProgress;
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void didStartDragging(int i) {
            if (i == VideoTimelinePlayView.TYPE_PROGRESS) {
                PhotoViewer.this.cancelVideoPlayRunnable();
                if (PhotoViewer.this.sendPhotoType == 1) {
                    PhotoViewer.this.cancelFlashAnimations();
                    PhotoViewer.this.captureFrameAtTime = -1L;
                }
                boolean isVideoPlaying = PhotoViewer.this.isVideoPlaying();
                this.wasPlaying = isVideoPlaying;
                if (isVideoPlaying) {
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.pauseVideoOrWeb();
                    PhotoViewer.this.containerView.invalidate();
                }
            }
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void didStopDragging(int i) {
            Runnable runnable = this.seekToRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.seekToRunnable.run();
            }
            PhotoViewer.this.cancelVideoPlayRunnable();
            if (PhotoViewer.this.sendPhotoType != 1 || PhotoViewer.this.flashView == null || i != VideoTimelinePlayView.TYPE_PROGRESS) {
                if (PhotoViewer.this.sendPhotoType == 1 || this.wasPlaying) {
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.playVideoOrWeb();
                    return;
                }
                return;
            }
            PhotoViewer.this.cancelFlashAnimations();
            PhotoViewer photoViewer = PhotoViewer.this;
            photoViewer.captureFrameAtTime = photoViewer.avatarStartTime;
            if (PhotoViewer.this.captureFrameReadyAtTime == this.seekTo) {
                PhotoViewer.this.captureCurrentFrame();
            }
        }
    }

    public /* synthetic */ void lambda$setParentActivity$14(Integer num) {
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (obj instanceof MediaController.PhotoEntry) {
            ((MediaController.PhotoEntry) obj).ttl = num.intValue();
        } else if (obj instanceof MediaController.SearchImage) {
            ((MediaController.SearchImage) obj).ttl = num.intValue();
        }
        if (num.intValue() == 0 || this.placeProvider.isPhotoChecked(this.currentIndex)) {
            return;
        }
        setPhotoChecked();
    }

    public /* synthetic */ void lambda$setParentActivity$15(Integer num) {
        FrameLayout frameLayout = this.videoTimelineViewContainer;
        if (frameLayout != null && frameLayout.getVisibility() != 8) {
            this.videoTimelineViewContainer.setTranslationY(this.pickerView.getTranslationY() - Math.max(0, this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
        }
        this.muteItem.setTranslationY(-Math.max(0, num.intValue() - AndroidUtilities.dp(46.0f)));
    }

    public /* synthetic */ void lambda$setParentActivity$16(View view) {
        if (this.placeProvider == null || isCaptionOpen()) {
            return;
        }
        this.placeProvider.needAddMorePhotos();
        closePhoto(true, false);
    }

    public /* synthetic */ void lambda$setParentActivity$22(View view) {
        int i;
        if (this.stickerEmpty || this.cutOutBtn.isLoading() || this.cutOutBtn.isUndoCutState() || (i = this.currentIndex) < 0 || i >= this.imagesArrLocals.size() || this.stickerMakerView.isThanosInProgress) {
            return;
        }
        final MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        final boolean z = !TextUtils.isEmpty(mediaEditState.filterPath);
        if (this.cutOutBtn.isCutOutState()) {
            this.cutOutBtn.setCancelState(true);
            this.stickerMakerView.enableClippingMode(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda118
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$setParentActivity$21(z, mediaEditState, (StickerMakerView.SegmentedObject) obj);
                }
            });
            this.containerView.invalidate();
        } else if (this.cutOutBtn.isCancelState()) {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
            this.stickerMakerView.disableClippingMode();
            this.containerView.invalidate();
        } else {
            this.stickerMakerView.resetPaths();
            this.stickerMakerView.getThanosEffect();
            this.stickerMakerView.setSegmentedState(false, null);
            this.centerImage.setImageBitmap(this.stickerMakerView.getSourceBitmap(z));
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
            applyCurrentEditMode();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$21(boolean z, MediaController.MediaEditState mediaEditState, StickerMakerView.SegmentedObject segmentedObject) {
        float f;
        float f2;
        float f3;
        if (this.stickerMakerView.hasSegmentedBitmap()) {
            ThanosEffect thanosEffect = this.stickerMakerView.getThanosEffect();
            this.stickerMakerView.setSegmentedState(true, segmentedObject);
            final Bitmap segmentedImage = this.stickerMakerView.getSegmentedImage(this.centerImage.getBitmap(), z, this.centerImage.getOrientation());
            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex);
            if (thanosEffect == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda84(this));
                return;
            }
            Bitmap thanosImage = this.stickerMakerView.getThanosImage(photoEntry, this.centerImage.getOrientation());
            if (thanosImage == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda84(this));
                return;
            }
            MediaController.CropState cropState = mediaEditState.cropState;
            if (cropState != null) {
                thanosImage = createCroppedBitmap(thanosImage, cropState, new int[]{this.centerImage.getOrientation(), this.centerImage.getInvert()}, true);
            }
            if (thanosImage == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showEditStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda84(this));
                return;
            }
            Matrix matrix = new Matrix();
            int width = thanosImage.getWidth();
            int height = thanosImage.getHeight();
            if (!photoEntry.isCropped && (this.centerImage.getOrientation() / 90) % 2 != 0) {
                width = thanosImage.getHeight();
                height = thanosImage.getWidth();
            }
            float f4 = width;
            float f5 = height;
            float min = Math.min(getContainerViewWidth() / f4, getContainerViewHeight() / f5);
            float f6 = f4 * min;
            float f7 = f5 * min;
            float f8 = 0.0f;
            if ((this.centerImage.getOrientation() == 0 || photoEntry.isCropped) && this.rotate == 0.0f) {
                f = f6;
                f2 = f7;
                f3 = 0.0f;
            } else {
                float width2 = thanosImage.getWidth();
                float height2 = thanosImage.getHeight();
                float f9 = width2 / 2.0f;
                float f10 = height2 / 2.0f;
                float sqrt = (float) Math.sqrt((f9 * f9) + (f10 * f10));
                float f11 = sqrt * 2.0f;
                int i = (int) f11;
                Bitmap createBitmap = Bitmap.createBitmap(i, i, Bitmap.Config.ARGB_8888);
                Canvas canvas = new Canvas(createBitmap);
                canvas.save();
                canvas.rotate((photoEntry.isCropped ? 0 : this.centerImage.getOrientation()) + this.rotate, sqrt, sqrt);
                canvas.drawBitmap(thanosImage, (f11 - width2) / 2.0f, (f11 - height2) / 2.0f, (Paint) null);
                thanosImage.recycle();
                float f12 = f6 / 2.0f;
                float f13 = f7 / 2.0f;
                f = ((float) Math.sqrt((f12 * f12) + (f13 * f13))) * 2.0f;
                f8 = (-(f - f6)) / 2.0f;
                f3 = (-(f - f7)) / 2.0f;
                thanosImage = createBitmap;
                f2 = f;
            }
            matrix.postScale(f, f2);
            float f14 = this.scale;
            matrix.postScale(f14, f14, f / 2.0f, f2 / 2.0f);
            matrix.postTranslate(this.translationX + f8 + Math.max(0, (int) ((getContainerViewWidth() - f6) / 2.0f)), this.translationY + f3 + Math.max(0, (int) ((getContainerViewHeight() - f7) / 2.0f)));
            this.stickerMakerView.isThanosInProgress = true;
            Utilities.themeQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda90
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$17(segmentedImage);
                }
            });
            final Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda73
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$18();
                }
            };
            thanosEffect.animate(matrix, thanosImage, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda91
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$19(segmentedImage, runnable);
                }
            }, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda105
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.lambda$setParentActivity$20();
                }
            });
            AndroidUtilities.runOnUIThread(runnable, 1200L);
        } else {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
        }
        this.stickerMakerView.disableClippingMode();
        this.containerView.invalidate();
    }

    public /* synthetic */ void lambda$setParentActivity$18() {
        this.stickerMakerView.isThanosInProgress = false;
    }

    public /* synthetic */ void lambda$setParentActivity$19(Bitmap bitmap, Runnable runnable) {
        this.centerImage.setImageBitmap(bitmap);
        this.cutOutBtn.setUndoCutState(true);
        showStickerMode(true, true);
        AndroidUtilities.cancelRunOnUIThread(runnable);
        AndroidUtilities.runOnUIThread(runnable, 800L);
    }

    public /* synthetic */ void lambda$setParentActivity$23(View view) {
        this.eraseBtn.setActive(true, true);
        this.restoreBtn.setActive(false, true);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setOutlineVisible(false);
        }
        this.maskPaintViewEraser = true;
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView != null) {
            maskPaintView.setEraser(true);
        }
        switchToEditMode(4);
    }

    public /* synthetic */ void lambda$setParentActivity$24(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(true, true);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setOutlineVisible(false);
        }
        this.maskPaintViewEraser = false;
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView != null) {
            maskPaintView.setEraser(false);
        }
        switchToEditMode(4);
    }

    public /* synthetic */ void lambda$setParentActivity$25(View view) {
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView == null || !maskPaintView.undo()) {
            switchToEditMode(0);
            this.stickerMakerView.resetPaths();
            boolean z = !TextUtils.isEmpty(((MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex)).filterPath);
            StickerMakerView stickerMakerView = this.stickerMakerView;
            if (stickerMakerView != null && !stickerMakerView.empty) {
                stickerMakerView.setSegmentedState(false, null);
            }
            this.centerImage.setImageBitmap(this.stickerMakerView.getSourceBitmap(z));
            StickerMakerView stickerMakerView2 = this.stickerMakerView;
            if (stickerMakerView2 == null || !stickerMakerView2.empty) {
                this.cutOutBtn.setCutOutState(true);
            }
            showStickerMode(true, true);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$26(View view) {
        if (this.stickerMakerView != null) {
            BlurButton blurButton = this.outlineBtn;
            boolean z = true;
            blurButton.setActive(!blurButton.isActive(), true);
            this.stickerMakerView.setOutlineVisible((!this.outlineBtn.isActive() || this.eraseBtn.isActive() || this.restoreBtn.isActive()) ? false : false);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$27(View view) {
        if (this.captionEdit.isCaptionOverLimit()) {
            AnimatedTextView animatedTextView = this.captionEdit.limitTextView;
            float f = -this.shiftDp;
            this.shiftDp = f;
            AndroidUtilities.shakeViewSpring(animatedTextView, f);
            BotWebViewVibrationEffect.APP_ERROR.vibrate();
            if (MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked() || MessagesController.getInstance(this.currentAccount).captionLengthLimitPremium <= this.captionEdit.getCodePointCount()) {
                return;
            }
            showCaptionLimitBulletin(this.containerView);
            return;
        }
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity != null && chatActivity.isInScheduleMode() && !this.parentChatActivity.isEditingMessageMedia()) {
            showScheduleDatePickerDialog();
        } else {
            sendPressed(true, 0);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:211:0x0101, code lost:
        if (r7 != false) goto L42;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x010a, code lost:
        if (org.telegram.messenger.UserObject.isUserSelf(r2) != false) goto L42;
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x010f, code lost:
        if (r12 == 3) goto L118;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x0111, code lost:
        if (r6 == false) goto L42;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x0114, code lost:
        if (r12 != 4) goto L67;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x0118, code lost:
        if (r16.isCurrentVideo == false) goto L116;
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x0120, code lost:
        if (r16.captionEdit.hasTimer() == false) goto L67;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x0123, code lost:
        r14 = r16.parentActivity;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x0127, code lost:
        if (r12 != 0) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x0129, code lost:
        r15 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:230:0x012b, code lost:
        r15 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x012e, code lost:
        if (r12 != 3) goto L95;
     */
    /* JADX WARN: Code restructure failed: missing block: B:233:0x0130, code lost:
        r13 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:234:0x0132, code lost:
        r13 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:235:0x0133, code lost:
        r7 = new org.telegram.ui.ActionBar.ActionBarMenuSubItem(r14, r15, r13, r17);
     */
    /* JADX WARN: Code restructure failed: missing block: B:236:0x0136, code lost:
        if (r12 != 0) goto L81;
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x013c, code lost:
        if (org.telegram.messenger.UserObject.isUserSelf(r2) == false) goto L80;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x013e, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString("SetReminder", org.telegram.messenger.R.string.SetReminder), org.telegram.messenger.R.drawable.msg_calendar2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x014c, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString("ScheduleMessage", org.telegram.messenger.R.string.ScheduleMessage), org.telegram.messenger.R.drawable.msg_calendar2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x015a, code lost:
        if (r12 != 1) goto L83;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x015c, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString("SendWithoutSound", org.telegram.messenger.R.string.SendWithoutSound), org.telegram.messenger.R.drawable.input_notify_off);
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x016a, code lost:
        if (r12 != 2) goto L85;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x016c, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString("ReplacePhoto", org.telegram.messenger.R.string.ReplacePhoto), org.telegram.messenger.R.drawable.msg_replace);
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x017a, code lost:
        if (r12 != 3) goto L87;
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x017c, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString("SendAsNewPhoto", org.telegram.messenger.R.string.SendAsNewPhoto), org.telegram.messenger.R.drawable.msg_send);
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x018b, code lost:
        if (r12 != 4) goto L78;
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x018d, code lost:
        r10 = r16.placeProvider;
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x018f, code lost:
        if (r10 == null) goto L94;
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x0195, code lost:
        if (r10.getSelectedCount() <= 1) goto L94;
     */
    /* JADX WARN: Code restructure failed: missing block: B:253:0x0197, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.SendAsFiles), org.telegram.messenger.R.drawable.msg_sendfile);
     */
    /* JADX WARN: Code restructure failed: missing block: B:254:0x01a3, code lost:
        r7.setTextAndIcon(org.telegram.messenger.LocaleController.getString(org.telegram.messenger.R.string.SendAsFile), org.telegram.messenger.R.drawable.msg_sendfile);
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x01ae, code lost:
        r7.setMinimumWidth(org.telegram.messenger.AndroidUtilities.dp(196.0f));
        r7.setColors(-1, -1);
        r16.sendPopupLayout.addView((android.view.View) r7, org.telegram.ui.Components.LayoutHelper.createLinear(-1, 48));
        r7.setOnClickListener(new org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda57());
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ boolean lambda$setParentActivity$31(Theme.ResourcesProvider resourcesProvider, View view) {
        PhotoViewerProvider photoViewerProvider;
        boolean z;
        ChatActivity chatActivity;
        PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
        if ((photoViewerProvider2 == null || photoViewerProvider2.allowSendingSubmenu()) && this.sendPhotoType != 11) {
            BaseFragment baseFragment = this.parentFragment;
            if ((((baseFragment == null || baseFragment.getLastStoryViewer() == null) ? false : true) || !((chatActivity = this.parentChatActivity) == null || chatActivity.isInScheduleMode())) && !this.captionEdit.isCaptionOverLimit()) {
                this.parentChatActivity.getCurrentChat();
                TLRPC$User currentUser = this.parentChatActivity.getCurrentUser();
                ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(this.parentActivity);
                this.sendPopupLayout = actionBarPopupWindowLayout;
                actionBarPopupWindowLayout.setAnimationEnabled(false);
                this.sendPopupLayout.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda64
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view2, MotionEvent motionEvent) {
                        boolean lambda$setParentActivity$28;
                        lambda$setParentActivity$28 = PhotoViewer.this.lambda$setParentActivity$28(view2, motionEvent);
                        return lambda$setParentActivity$28;
                    }
                });
                this.sendPopupLayout.setDispatchKeyEventListener(new ActionBarPopupWindow.OnDispatchKeyEventListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda119
                    @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow.OnDispatchKeyEventListener
                    public final void onDispatchKeyEvent(KeyEvent keyEvent) {
                        PhotoViewer.this.lambda$setParentActivity$29(keyEvent);
                    }
                });
                this.sendPopupLayout.setShownFromBottom(false);
                this.sendPopupLayout.setBackgroundColor(-115203550);
                PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
                boolean z2 = photoViewerProvider3 != null && photoViewerProvider3.canEdit(this.currentIndex);
                PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
                boolean z3 = photoViewerProvider4 != null && photoViewerProvider4.canReplace(this.currentIndex);
                int[] iArr = {4, 3, 2, 0, 1};
                int i = 0;
                for (int i2 = 5; i < i2; i2 = 5) {
                    final int i3 = iArr[i];
                    if ((i3 == 2 || i3 == 3 || !z2 || !z3) && ((i3 == 1 || !z2 || z3) && (i3 != 0 || this.parentChatActivity.canScheduleMessage()))) {
                        if (i3 != 0 || (photoViewerProvider = this.placeProvider) == null || photoViewerProvider.getSelectedPhotos() == null) {
                            if (i3 == 1) {
                            }
                            if (i3 != 2) {
                            }
                        } else {
                            for (Map.Entry<Object, Object> entry : this.placeProvider.getSelectedPhotos().entrySet()) {
                                Object value = entry.getValue();
                                if (value instanceof MediaController.PhotoEntry) {
                                    if (((MediaController.PhotoEntry) value).ttl != 0) {
                                        z = true;
                                        break;
                                    }
                                } else if ((value instanceof MediaController.SearchImage) && ((MediaController.SearchImage) value).ttl != 0) {
                                    z = true;
                                    break;
                                }
                            }
                            z = false;
                        }
                        i++;
                    }
                    i++;
                }
                if (this.sendPopupLayout.getChildCount() == 0) {
                    return false;
                }
                this.sendPopupLayout.setupRadialSelectors(620756991);
                ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(this.sendPopupLayout, -2, -2);
                this.sendPopupWindow = actionBarPopupWindow;
                actionBarPopupWindow.setAnimationEnabled(false);
                this.sendPopupWindow.setAnimationStyle(R.style.PopupContextAnimation2);
                this.sendPopupWindow.setOutsideTouchable(true);
                this.sendPopupWindow.setClippingEnabled(true);
                this.sendPopupWindow.setInputMethodMode(2);
                this.sendPopupWindow.setSoftInputMode(0);
                this.sendPopupWindow.getContentView().setFocusableInTouchMode(true);
                this.sendPopupLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                this.sendPopupWindow.setFocusable(true);
                int[] iArr2 = new int[2];
                view.getLocationInWindow(iArr2);
                this.sendPopupWindow.showAtLocation(view, 51, ((iArr2[0] + view.getMeasuredWidth()) - this.sendPopupLayout.getMeasuredWidth()) + AndroidUtilities.dp(14.0f), (iArr2[1] - this.sendPopupLayout.getMeasuredHeight()) - AndroidUtilities.dp(18.0f));
                view.performHapticFeedback(3, 2);
                return false;
            }
            return false;
        }
        return false;
    }

    public /* synthetic */ boolean lambda$setParentActivity$28(View view, MotionEvent motionEvent) {
        ActionBarPopupWindow actionBarPopupWindow;
        if (motionEvent.getActionMasked() == 0 && (actionBarPopupWindow = this.sendPopupWindow) != null && actionBarPopupWindow.isShowing()) {
            view.getHitRect(this.hitRect);
            if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                return false;
            }
            this.sendPopupWindow.dismiss();
            return false;
        }
        return false;
    }

    public /* synthetic */ void lambda$setParentActivity$29(KeyEvent keyEvent) {
        ActionBarPopupWindow actionBarPopupWindow;
        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0 && (actionBarPopupWindow = this.sendPopupWindow) != null && actionBarPopupWindow.isShowing()) {
            this.sendPopupWindow.dismiss();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$30(int i, View view) {
        ActionBarPopupWindow actionBarPopupWindow = this.sendPopupWindow;
        if (actionBarPopupWindow != null && actionBarPopupWindow.isShowing()) {
            this.sendPopupWindow.dismiss();
        }
        if (i == 0) {
            showScheduleDatePickerDialog();
        } else if (i == 1) {
            sendPressed(false, 0);
        } else if (i == 2) {
            replacePressed();
        } else if (i == 3) {
            sendPressed(true, 0);
        } else if (i == 4) {
            sendPressed(true, 0, false, true, false);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$32(View view) {
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(1);
    }

    public /* synthetic */ void lambda$setParentActivity$33(View view) {
        cropRotate(-90.0f);
    }

    public /* synthetic */ void lambda$setParentActivity$34(View view) {
        cropMirror();
    }

    public /* synthetic */ void lambda$setParentActivity$35(View view) {
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(3);
    }

    public /* synthetic */ void lambda$setParentActivity$36(View view) {
        if (isCaptionOpen()) {
            return;
        }
        this.muteVideo = !this.muteVideo;
        updateMuteButton();
        updateVideoInfo();
        if (this.muteVideo && !this.checkImageView.isChecked()) {
            this.checkImageView.callOnClick();
            return;
        }
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (obj instanceof MediaController.MediaEditState) {
            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$37(Activity activity, View view) {
        if (isCaptionOpen() || this.muteVideo) {
            return;
        }
        if (this.compressItem.getTag() == null) {
            if (this.videoConvertSupported) {
                if (this.tooltip == null) {
                    this.tooltip = new Tooltip(activity, this.containerView, -871296751, -1);
                }
                this.tooltip.setText(LocaleController.getString("VideoQualityIsTooLow", R.string.VideoQualityIsTooLow));
                this.tooltip.show(this.compressItem);
                return;
            }
            return;
        }
        showQualityView(true);
        requestVideoPreview(1);
    }

    public /* synthetic */ void lambda$setParentActivity$38(View view) {
        if (view.getAlpha() < 0.9f) {
            return;
        }
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(2);
    }

    public /* synthetic */ void lambda$setParentActivity$40(View view) {
        if (this.imageMoveAnimation != null) {
            return;
        }
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda85
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$setParentActivity$39();
            }
        };
        if (!this.previousHasTransform) {
            float stateOrientation = this.previousCropOrientation - this.photoCropView.cropView.getStateOrientation();
            if (Math.abs(stateOrientation) > 180.0f) {
                stateOrientation = stateOrientation < 0.0f ? stateOrientation + 360.0f : -(360.0f - stateOrientation);
            }
            cropRotate(stateOrientation, this.photoCropView.cropView.getStateMirror(), runnable);
            return;
        }
        runnable.run();
    }

    public /* synthetic */ void lambda$setParentActivity$39() {
        this.cropTransform.setViewTransform(this.previousHasTransform, this.previousCropPx, this.previousCropPy, this.previousCropRotation, this.previousCropOrientation, this.previousCropScale, scale1(), scale1(), this.previousCropPw, this.previousCropPh, 0.0f, 0.0f, this.previousCropMirrored);
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$setParentActivity$41(View view) {
        if (this.currentEditMode != 1 || this.photoCropView.isReady()) {
            applyCurrentEditMode();
            switchToEditMode(0);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$43(View view) {
        float f = -this.photoCropView.cropView.getStateOrientation();
        if (Math.abs(f) > 180.0f) {
            f = f < 0.0f ? f + 360.0f : -(360.0f - f);
        }
        cropRotate(f, this.photoCropView.cropView.getStateMirror(), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$setParentActivity$42();
            }
        });
    }

    public /* synthetic */ void lambda$setParentActivity$42() {
        this.photoCropView.reset(true);
    }

    public /* synthetic */ void lambda$setParentActivity$44(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        PhotoViewerProvider photoViewerProvider;
        int i;
        Bitmap bitmap;
        int i2;
        if (imageReceiver == this.centerImage && z && !z2) {
            if (!this.isCurrentVideo && ((this.currentEditMode == 1 || (i2 = this.sendPhotoType) == 1 || i2 == 11) && this.photoCropView != null && (bitmap = imageReceiver.getBitmap()) != null)) {
                PhotoCropView photoCropView = this.photoCropView;
                int orientation = imageReceiver.getOrientation();
                int i3 = this.sendPhotoType;
                photoCropView.setBitmap(bitmap, orientation, (i3 == 1 || i3 == 11) ? false : true, true, this.paintingOverlay, this.cropTransform, null, null);
            }
            if (this.paintingOverlay.getVisibility() == 0) {
                this.containerView.requestLayout();
            }
            detectFaces();
        }
        if (imageReceiver != this.centerImage || !z || (photoViewerProvider = this.placeProvider) == null || !photoViewerProvider.scaleToFill() || this.ignoreDidSetImage || (i = this.sendPhotoType) == 1 || i == 11) {
            return;
        }
        if (!this.wasLayout) {
            this.dontResetZoomOnFirstLayout = true;
        } else {
            setScaleToFill();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$45(View view) {
        if (isCaptionOpen()) {
            return;
        }
        setPhotoChecked();
    }

    public /* synthetic */ void lambda$setParentActivity$46(View view) {
        PhotoViewerProvider photoViewerProvider;
        if (isCaptionOpen() || (photoViewerProvider = this.placeProvider) == null || photoViewerProvider.getSelectedPhotosOrder() == null || this.placeProvider.getSelectedPhotosOrder().isEmpty()) {
            return;
        }
        togglePhotosListView(!this.isPhotosListViewVisible, true);
    }

    public /* synthetic */ void lambda$setParentActivity$47(View view, int i) {
        int i2;
        if (!this.imagesArrLocals.isEmpty() && (i2 = this.currentIndex) >= 0 && i2 < this.imagesArrLocals.size()) {
            Object obj = this.imagesArrLocals.get(this.currentIndex);
            if (obj instanceof MediaController.MediaEditState) {
                ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
            }
        }
        this.ignoreDidSetImage = true;
        int indexOf = this.imagesArrLocals.indexOf(view.getTag());
        if (indexOf >= 0) {
            this.currentIndex = -1;
            setImageIndex(indexOf);
        }
        this.ignoreDidSetImage = false;
    }

    public boolean showCaptionLimitBulletin(FrameLayout frameLayout) {
        BaseFragment baseFragment = this.parentFragment;
        if ((baseFragment instanceof ChatActivity) && ChatObject.isChannelAndNotMegaGroup(((ChatActivity) baseFragment).getCurrentChat())) {
            this.limitBulletin = BulletinFactory.of(frameLayout, this.resourcesProvider).createCaptionLimitBulletin(MessagesController.getInstance(this.currentAccount).captionLengthLimitPremium, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda69
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$showCaptionLimitBulletin$48();
                }
            }).setOnHideListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda70
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$showCaptionLimitBulletin$49();
                }
            }).show();
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$showCaptionLimitBulletin$48() {
        closePhoto(false, false);
        ChatAttachAlert chatAttachAlert = this.parentAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismiss(true);
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment != null) {
            baseFragment.presentFragment(new PremiumPreviewFragment("caption_limit"));
        }
    }

    public /* synthetic */ void lambda$showCaptionLimitBulletin$49() {
        this.limitBulletin = null;
    }

    private void showScheduleDatePickerDialog() {
        if (this.parentChatActivity == null) {
            return;
        }
        AlertsCreator.createScheduleDatePickerDialog(this.parentActivity, this.parentChatActivity.getDialogId(), new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda120
            @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
            public final void didSelectDate(boolean z, int i) {
                PhotoViewer.this.sendPressed(z, i);
            }
        }, new AlertsCreator.ScheduleDatePickerColors(-1, -14342875, -1, 520093695, -1, -115203550, 620756991));
    }

    public void sendPressed(boolean z, int i) {
        sendPressed(z, i, false, false, false);
    }

    private void replacePressed() {
        sendPressed(false, 0, true, false, false);
    }

    private void sendPressed(final boolean z, final int i, final boolean z2, final boolean z3, boolean z4) {
        Bitmap bitmap;
        VideoEditedInfo videoEditedInfo;
        String str;
        Object obj;
        MediaController.CropState cropState;
        int i2;
        ChatActivity chatActivity;
        ImageUpdater.AvatarFor avatarFor;
        String str2;
        String string;
        TextureView textureView;
        if (isCaptionOpen() || this.placeProvider == null || this.doneButtonPressed) {
            return;
        }
        char c = 1;
        if (this.sendPhotoType == 1) {
            if (!z4 && (avatarFor = this.setAvatarFor) != null) {
                long j = 0;
                TLObject tLObject = avatarFor.object;
                if (tLObject instanceof TLRPC$User) {
                    String str3 = ((TLRPC$User) tLObject).first_name;
                    long j2 = ((TLRPC$User) tLObject).id;
                    str2 = str3;
                    j = j2;
                } else {
                    str2 = "";
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(this.containerView.getContext());
                builder.setAdditionalHorizontalPadding(AndroidUtilities.dp(8.0f));
                SuggestUserPhotoView suggestUserPhotoView = new SuggestUserPhotoView(this.containerView.getContext());
                suggestUserPhotoView.setImages(this.setAvatarFor.object, this.containerView, this.photoCropView);
                builder.setTopView(suggestUserPhotoView);
                if (this.setAvatarFor.type == 1) {
                    if (UserConfig.getInstance(this.currentAccount).clientUserId == j) {
                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("SetUserPhotoSelfAlertMessage", R.string.SetUserPhotoSelfAlertMessage)));
                    } else {
                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SetUserPhotoAlertMessage", R.string.SetUserPhotoAlertMessage, str2, str2)));
                    }
                    if (this.centerImageIsVideo) {
                        string = LocaleController.getString("SetVideo", R.string.SetVideo);
                    } else {
                        string = LocaleController.getString("SetPhoto", R.string.SetPhoto);
                    }
                } else {
                    if (this.centerImageIsVideo) {
                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SuggestVideoAlertMessage", R.string.SuggestVideoAlertMessage, str2)));
                    } else {
                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SuggestPhotoAlertMessage", R.string.SuggestPhotoAlertMessage, str2)));
                    }
                    string = LocaleController.getString("SuggestPhotoShort", R.string.SuggestPhotoShort);
                }
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda22
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i3) {
                        PhotoViewer.lambda$sendPressed$51(dialogInterface, i3);
                    }
                });
                builder.setPositiveButton(string, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda21
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i3) {
                        PhotoViewer.this.lambda$sendPressed$52(z, i, z2, z3, dialogInterface, i3);
                    }
                });
                builder.setDialogButtonColorKey(Theme.key_voipgroup_listeningText);
                AlertDialog create = builder.create();
                create.setBlurParams(0.8f, false, true);
                create.setBackgroundColor(ColorUtils.setAlphaComponent(-15461356, 204));
                create.show();
                create.setTextColor(Theme.getColor(Theme.key_voipgroup_nameText));
                create.setOnDismissListener(new 34());
                if (!this.isCurrentVideo || (textureView = this.videoTextureView) == null) {
                    return;
                }
                try {
                    this.lastFrameBitmap = textureView.getBitmap();
                    ImageView imageView = this.lastFrameImageView;
                    if (imageView != null) {
                        this.aspectRatioFrameLayout.removeView(imageView);
                        this.lastFrameImageView = null;
                    }
                    ImageView imageView2 = new ImageView(this.videoTextureView.getContext());
                    this.lastFrameImageView = imageView2;
                    imageView2.setBackground(new BitmapDrawable(this.lastFrameBitmap));
                    this.aspectRatioFrameLayout.addView(this.lastFrameImageView);
                    return;
                } catch (Throwable th) {
                    Bitmap bitmap2 = this.currentBitmap;
                    if (bitmap2 != null) {
                        bitmap2.recycle();
                        this.currentBitmap = null;
                    }
                    FileLog.e(th);
                    return;
                }
            }
            applyCurrentEditMode();
        }
        if (!z2 && (chatActivity = this.parentChatActivity) != null) {
            TLRPC$Chat currentChat = chatActivity.getCurrentChat();
            if (this.parentChatActivity.getCurrentUser() != null || ((ChatObject.isChannel(currentChat) && currentChat.megagroup) || !ChatObject.isChannel(currentChat))) {
                MessagesController.getNotificationsSettings(this.currentAccount).edit().putBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + this.parentChatActivity.getDialogId(), !z).commit();
            }
        }
        VideoEditedInfo currentVideoEditedInfo = getCurrentVideoEditedInfo();
        if (!this.imagesArrLocals.isEmpty() && (i2 = this.currentIndex) >= 0 && i2 < this.imagesArrLocals.size()) {
            Object obj2 = this.imagesArrLocals.get(this.currentIndex);
            if (obj2 instanceof MediaController.MediaEditState) {
                ((MediaController.MediaEditState) obj2).editedInfo = currentVideoEditedInfo;
            }
        }
        ChatActivity chatActivity2 = this.parentChatActivity;
        if (chatActivity2 != null && chatActivity2.getCurrentChat() != null) {
            boolean z5 = this.isCurrentVideo || currentVideoEditedInfo != null;
            if (z5 && !ChatObject.canSendVideo(this.parentChatActivity.getCurrentChat())) {
                BulletinFactory.of(this.containerView, this.resourcesProvider).createErrorBulletin(LocaleController.getString(R.string.GlobalAttachVideoRestricted)).show();
                return;
            } else if (!z5 && !ChatObject.canSendPhoto(this.parentChatActivity.getCurrentChat())) {
                BulletinFactory.of(this.containerView, this.resourcesProvider).createErrorBulletin(LocaleController.getString(R.string.GlobalAttachPhotoRestricted)).show();
                return;
            }
        }
        this.doneButtonPressed = true;
        if (currentVideoEditedInfo != null) {
            long j3 = ((float) currentVideoEditedInfo.estimatedSize) * 0.9f;
            if ((j3 > FileLoader.DEFAULT_MAX_FILE_SIZE && !UserConfig.getInstance(this.currentAccount).isPremium()) || j3 > 4194304000L) {
                if (this.parentAlert != null) {
                    new LimitReachedBottomSheet(this.parentAlert.getBaseFragment(), this.parentAlert.getContainer().getContext(), 6, UserConfig.selectedAccount, null).show();
                    return;
                }
                return;
            }
        }
        if (!z2) {
            if (this.sendPhotoType == 11) {
                Object obj3 = this.imagesArrLocals.get(this.currentIndex);
                if (obj3 instanceof MediaController.PhotoEntry) {
                    final MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj3;
                    Bitmap createBitmap = Bitmap.createBitmap(LiteMode.FLAG_CALLS_ANIMATIONS, LiteMode.FLAG_CALLS_ANIMATIONS, Bitmap.Config.ARGB_8888);
                    Canvas canvas = new Canvas(createBitmap);
                    Path path = new Path();
                    RectF rectF = new RectF();
                    rectF.set(0.0f, 0.0f, createBitmap.getWidth(), createBitmap.getHeight());
                    int i3 = 8;
                    float width = createBitmap.getWidth() / 8;
                    path.addRoundRect(rectF, width, width, Path.Direction.CW);
                    canvas.clipPath(path);
                    int containerViewWidth = getContainerViewWidth();
                    getContainerViewHeight();
                    float dp = containerViewWidth - AndroidUtilities.dp(20.0f);
                    StickerMakerView stickerMakerView = this.stickerMakerView;
                    if (stickerMakerView != null && stickerMakerView.outlineVisible && stickerMakerView.getSourceBitmap() != null) {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        applyTransformToOutline(canvas);
                        this.stickerMakerView.drawOutline(canvas, false, null, false);
                        canvas.restore();
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        applyTransformToOutline(canvas);
                        this.centerImage.draw(canvas);
                        canvas.restore();
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        applyTransformToOutline(canvas);
                        this.stickerMakerView.drawOutline(canvas, true, null, false);
                        canvas.restore();
                    } else {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        applyTransformToOutline(canvas);
                        this.centerImage.draw(canvas);
                        canvas.restore();
                    }
                    if (this.paintingOverlay != null) {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        applyTransformToOutline(canvas);
                        canvas.translate((-this.centerImage.getImageWidth()) / 2.0f, (-this.centerImage.getImageHeight()) / 2.0f);
                        canvas.scale(this.centerImage.getImageWidth() / this.paintingOverlay.getMeasuredWidth(), this.centerImage.getImageHeight() / this.paintingOverlay.getMeasuredHeight());
                        this.paintingOverlay.drawChildren = !hasAnimatedMediaEntities();
                        this.paintingOverlay.draw(canvas);
                        this.paintingOverlay.drawChildren = true;
                        canvas.restore();
                    }
                    if (hasAnimatedMediaEntities()) {
                        Matrix matrix = new Matrix();
                        matrix.reset();
                        float f = dp / 2.0f;
                        matrix.preTranslate(f, f);
                        applyTransformToMatrix(matrix);
                        matrix.preTranslate((-this.centerImage.getImageWidth()) / 2.0f, (-this.centerImage.getImageHeight()) / 2.0f);
                        matrix.preScale(this.centerImage.getImageWidth(), this.centerImage.getImageHeight());
                        ArrayList<VideoEditedInfo.MediaEntity> arrayList = new ArrayList<>();
                        Iterator<VideoEditedInfo.MediaEntity> it = photoEntry.mediaEntities.iterator();
                        String str4 = null;
                        while (it.hasNext()) {
                            VideoEditedInfo.MediaEntity copy = it.next().copy();
                            float f2 = copy.x;
                            float f3 = copy.y;
                            float f4 = copy.width;
                            float f5 = copy.height;
                            Iterator<VideoEditedInfo.MediaEntity> it2 = it;
                            float[] fArr = new float[i3];
                            fArr[0] = f2;
                            fArr[c] = f3;
                            float f6 = f4 + f2;
                            fArr[2] = f6;
                            fArr[3] = f3;
                            fArr[4] = f6;
                            float f7 = f3 + f5;
                            fArr[5] = f7;
                            fArr[6] = f2;
                            fArr[7] = f7;
                            matrix.mapPoints(fArr);
                            Bitmap bitmap3 = createBitmap;
                            copy.width = ((float) Math.sqrt(Math.pow(fArr[0] - fArr[2], 2.0d) + Math.pow(fArr[c] - fArr[3], 2.0d))) / dp;
                            float sqrt = ((float) Math.sqrt(Math.pow(fArr[0] - fArr[6], 2.0d) + Math.pow(fArr[1] - fArr[7], 2.0d))) / dp;
                            copy.height = sqrt;
                            copy.x = (((fArr[0] + fArr[4]) / 2.0f) / dp) - (copy.width / 2.0f);
                            copy.y = (((fArr[1] + fArr[5]) / 2.0f) / dp) - (sqrt / 2.0f);
                            copy.scale = 1.0f;
                            copy.customTextView = true;
                            if (photoEntry.isCropped && (cropState = photoEntry.cropState) != null) {
                                double d = copy.rotation;
                                double d2 = cropState.transformRotation / 180.0f;
                                Double.isNaN(d2);
                                Double.isNaN(d);
                                copy.rotation = (float) (d - (d2 * 3.141592653589793d));
                            }
                            double d3 = copy.rotation;
                            double d4 = this.rotate / 180.0f;
                            Double.isNaN(d4);
                            Double.isNaN(d3);
                            copy.rotation = (float) (d3 - (d4 * 3.141592653589793d));
                            arrayList.add(copy);
                            TLRPC$Document tLRPC$Document = copy.document;
                            if (tLRPC$Document == null || str4 != null) {
                                obj = null;
                            } else {
                                obj = null;
                                str4 = MessageObject.findAnimatedEmojiEmoticon(tLRPC$Document, null);
                            }
                            it = it2;
                            createBitmap = bitmap3;
                            c = 1;
                            i3 = 8;
                        }
                        bitmap = createBitmap;
                        VideoEditedInfo videoEditedInfo2 = new VideoEditedInfo();
                        videoEditedInfo2.isPhoto = true;
                        videoEditedInfo2.resultWidth = LiteMode.FLAG_CALLS_ANIMATIONS;
                        videoEditedInfo2.originalWidth = LiteMode.FLAG_CALLS_ANIMATIONS;
                        videoEditedInfo2.resultHeight = LiteMode.FLAG_CALLS_ANIMATIONS;
                        videoEditedInfo2.originalHeight = LiteMode.FLAG_CALLS_ANIMATIONS;
                        videoEditedInfo2.mediaEntities = arrayList;
                        long clamp = Utilities.clamp(photoEntry.averageDuration, 2999L, 800L);
                        videoEditedInfo2.estimatedDuration = clamp;
                        videoEditedInfo2.originalDuration = clamp;
                        videoEditedInfo2.bitrate = 200000;
                        videoEditedInfo2.framerate = 30;
                        videoEditedInfo2.isSticker = true;
                        videoEditedInfo2.estimatedSize = 262144L;
                        videoEditedInfo = videoEditedInfo2;
                        str = str4;
                    } else {
                        bitmap = createBitmap;
                        videoEditedInfo = null;
                        str = null;
                    }
                    Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.WEBP;
                    float f8 = (float) LiteMode.FLAG_CALLS_ANIMATIONS;
                    final String file = FileLoader.getInstance(UserConfig.selectedAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, compressFormat, f8, f8, 100, false, 101, 101), "webp", true).toString();
                    if (videoEditedInfo != null) {
                        videoEditedInfo.originalPath = file;
                    }
                    if (this.selectedEmojis == null) {
                        this.selectedEmojis = new ArrayList<>();
                    }
                    if (this.selectedEmojis.isEmpty()) {
                        String str5 = this.stickerMakerView.detectedEmoji;
                        if (str5 != null && Emoji.getEmojiDrawable(str5) != null) {
                            this.selectedEmojis.add(this.stickerMakerView.detectedEmoji);
                        } else if (str != null) {
                            this.selectedEmojis.add(str);
                        } else {
                            this.selectedEmojis.add("👍");
                        }
                    }
                    this.doneButtonPressed = false;
                    final VideoEditedInfo videoEditedInfo3 = videoEditedInfo;
                    ContentPreviewViewer.getInstance().showCustomStickerActions(file, videoEditedInfo, this.stickerMakerView, this.selectedEmojis, new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.PhotoViewer.35
                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean can() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canDeleteSticker(TLRPC$Document tLRPC$Document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canDeleteSticker(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canEditSticker() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canEditSticker(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canSchedule() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSchedule(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ Boolean canSetAsStatus(TLRPC$Document tLRPC$Document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void copyEmoji(TLRPC$Document tLRPC$Document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void deleteSticker(TLRPC$Document tLRPC$Document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$deleteSticker(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void editSticker(TLRPC$Document tLRPC$Document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$editSticker(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ String getQuery(boolean z6) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z6);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void gifAddedOrDeleted() {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean isInScheduleMode() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isInScheduleMode(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean isPhotoEditor() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isPhotoEditor(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isStickerEditor() {
                            return true;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needCopy(TLRPC$Document tLRPC$Document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needMenu() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needOpen() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needRemove() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needRemoveFromRecent(TLRPC$Document tLRPC$Document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needSend(int i4) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needSend(this, i4);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void openSet(TLRPC$InputStickerSet tLRPC$InputStickerSet, boolean z6) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$openSet(this, tLRPC$InputStickerSet, z6);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void removeFromRecent(TLRPC$Document tLRPC$Document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void resetTouch() {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendEmoji(TLRPC$Document tLRPC$Document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, tLRPC$Document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendGif(Object obj4, Object obj5, boolean z6, int i4) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj4, obj5, z6, i4);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendSticker(TLRPC$Document tLRPC$Document2, String str6, Object obj4, boolean z6, int i4) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendSticker(this, tLRPC$Document2, str6, obj4, z6, i4);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void setAsEmojiStatus(TLRPC$Document tLRPC$Document2, Integer num) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, tLRPC$Document2, num);
                        }

                        {
                            PhotoViewer.this = this;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void sendSticker() {
                            if (PhotoViewer.this.placeProvider == null) {
                                return;
                            }
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            photoEntry.imagePath = file;
                            PhotoViewer.this.placeProvider.sendButtonPressed(PhotoViewer.this.currentIndex, videoEditedInfo3, z, i, z3);
                            NotificationCenter.getInstance(UserConfig.selectedAccount).postNotificationNameOnUIThread(NotificationCenter.customStickerCreated, Boolean.TRUE);
                        }

                        private void generateThumb() {
                            ContentPreviewViewer contentPreviewViewer = ContentPreviewViewer.getInstance();
                            if (photoEntry.thumbPath != null) {
                                try {
                                    new File(photoEntry.thumbPath).delete();
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                                photoEntry.thumbPath = null;
                            }
                            Bitmap createBitmap2 = Bitmap.createBitmap(LiteMode.FLAG_CALLS_ANIMATIONS, LiteMode.FLAG_CALLS_ANIMATIONS, Bitmap.Config.ARGB_8888);
                            Canvas canvas2 = new Canvas(createBitmap2);
                            ImageReceiver imageReceiver = contentPreviewViewer.centerImage;
                            if (imageReceiver != null) {
                                imageReceiver.setAlpha(1.0f);
                                contentPreviewViewer.centerImage.setImageCoords(0.0f, 0.0f, createBitmap2.getWidth(), createBitmap2.getHeight());
                                contentPreviewViewer.centerImage.draw(canvas2);
                            }
                            if (contentPreviewViewer.paintingOverlay != null) {
                                canvas2.save();
                                canvas2.scale(createBitmap2.getWidth() / contentPreviewViewer.paintingOverlay.getWidth(), createBitmap2.getHeight() / contentPreviewViewer.paintingOverlay.getHeight());
                                contentPreviewViewer.paintingOverlay.setAlpha(1.0f);
                                Path path2 = new Path();
                                path2.rewind();
                                RectF rectF2 = AndroidUtilities.rectTmp;
                                rectF2.set(0.0f, 0.0f, contentPreviewViewer.paintingOverlay.getWidth(), contentPreviewViewer.paintingOverlay.getHeight());
                                path2.addRoundRect(rectF2, contentPreviewViewer.paintingOverlay.getWidth() / 8.0f, contentPreviewViewer.paintingOverlay.getHeight() / 8.0f, Path.Direction.CW);
                                canvas2.clipPath(path2);
                                contentPreviewViewer.paintingOverlay.draw(canvas2);
                                canvas2.restore();
                            }
                            TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(createBitmap2, PhotoViewer.this.getCompressFormat(), 512.0f, 512.0f, 83, false, 101, 101);
                            photoEntry.thumbPath = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(scaleAndSaveImage, true).toString();
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void addToFavoriteSelected(String str6) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer.this.stickerMakerView.uploadStickerFile(file, videoEditedInfo3, str6, null, true, null, null, photoEntry.thumbPath, null, null);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void stickerSetSelected(TLRPC$StickerSet tLRPC$StickerSet, String str6) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer photoViewer = PhotoViewer.this;
                            photoViewer.stickerMakerView.uploadStickerFile(file, videoEditedInfo3, str6, null, false, tLRPC$StickerSet, photoViewer.replacedSticker, photoEntry.thumbPath, null, null);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void newStickerPackSelected(CharSequence charSequence, String str6, Utilities.Callback<Boolean> callback) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer.this.stickerMakerView.uploadStickerFile(file, videoEditedInfo3, str6, charSequence, false, null, null, photoEntry.thumbPath, callback, null);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void setIntroSticker(String str6) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer photoViewer = PhotoViewer.this;
                            photoViewer.stickerMakerView.uploadStickerFile(file, videoEditedInfo3, str6, null, false, null, null, photoEntry.thumbPath, null, photoViewer.customStickerHandler);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isReplacedSticker() {
                            return PhotoViewer.this.replacedSticker != null;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isSettingIntroSticker() {
                            return PhotoViewer.this.customStickerHandler != null;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public long getDialogId() {
                            return PhotoViewer.this.currentDialogId;
                        }
                    });
                    return;
                }
            }
            this.placeProvider.sendButtonPressed(this.currentIndex, currentVideoEditedInfo, z, i, z3);
        } else {
            this.placeProvider.replaceButtonPressed(this.currentIndex, currentVideoEditedInfo);
        }
        if (this.closePhotoAfterSelect) {
            closePhoto(false, false);
        }
    }

    public /* synthetic */ void lambda$sendPressed$52(boolean z, int i, boolean z2, boolean z3, DialogInterface dialogInterface, int i2) {
        sendPressed(z, i, z2, z3, true);
    }

    /* loaded from: classes4.dex */
    public class 34 implements DialogInterface.OnDismissListener {
        34() {
            PhotoViewer.this = r1;
        }

        @Override // android.content.DialogInterface.OnDismissListener
        public void onDismiss(DialogInterface dialogInterface) {
            if (PhotoViewer.this.lastFrameImageView != null) {
                PhotoViewer.this.lastFrameImageView.animate().alpha(0.0f).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$34$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.34.this.lambda$onDismiss$0();
                    }
                }).setDuration(150L).start();
            }
        }

        public /* synthetic */ void lambda$onDismiss$0() {
            if (PhotoViewer.this.lastFrameImageView == null || PhotoViewer.this.lastFrameImageView.getParent() == null) {
                return;
            }
            ((ViewGroup) PhotoViewer.this.lastFrameImageView.getParent()).removeView(PhotoViewer.this.lastFrameImageView);
            if (PhotoViewer.this.lastFrameBitmap != null) {
                if (PhotoViewer.this.lastFrameImageView != null) {
                    PhotoViewer.this.lastFrameImageView.setBackground(null);
                }
                AndroidUtilities.recycleBitmap(PhotoViewer.this.lastFrameBitmap);
                PhotoViewer.this.lastFrameBitmap = null;
            }
            PhotoViewer.this.lastFrameImageView = null;
        }
    }

    private String getTempFileAbsolutePath() {
        File directory = FileLoader.getDirectory(4);
        return new File(directory, SharedConfig.getLastLocalId() + "_temp.jpg").getAbsolutePath();
    }

    public Bitmap.CompressFormat getCompressFormat() {
        return this.sendPhotoType == 11 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;
    }

    public boolean isCaptionOpen() {
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        return captionPhotoViewer != null && (captionPhotoViewer.keyboardNotifier.keyboardVisible() || this.captionEdit.editText.isPopupShowing());
    }

    public void showShareAlert(ArrayList<MessageObject> arrayList) {
        boolean z;
        boolean z2;
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        requestAdjustToNothing();
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getChatActivityEnterView() == null || this.parentChatActivity.getFragmentView() == null) {
            z = false;
        } else {
            if (this.parentChatActivity.getChatActivityEnterView().isKeyboardVisible()) {
                this.parentChatActivity.getChatActivityEnterView().showEmojiView();
                z2 = true;
            } else {
                z2 = false;
            }
            AndroidUtilities.setAdjustResizeToNothing(this.parentChatActivity.getParentActivity(), this.classGuid);
            this.parentChatActivity.getFragmentView().requestLayout();
            z = z2;
        }
        final 36 r12 = new 36(this.parentActivity, this.parentChatActivity, arrayList, null, null, false, null, null, false, true, false, null, frameLayoutDrawer, z);
        r12.setFocusable(false);
        r12.getWindow().setSoftInputMode(48);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda98
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$showShareAlert$53(r12);
            }
        }, 250L);
        r12.show();
    }

    /* loaded from: classes4.dex */
    public class 36 extends ShareAlert {
        final /* synthetic */ boolean val$finalOpenKeyboardOnShareAlertClose;
        final /* synthetic */ FrameLayout val$photoContainerView;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        36(Context context, ChatActivity chatActivity, ArrayList arrayList, String str, String str2, boolean z, String str3, String str4, boolean z2, boolean z3, boolean z4, Theme.ResourcesProvider resourcesProvider, FrameLayout frameLayout, boolean z5) {
            super(context, chatActivity, arrayList, str, str2, z, str3, str4, z2, z3, z4, resourcesProvider);
            PhotoViewer.this = r15;
            this.val$photoContainerView = frameLayout;
            this.val$finalOpenKeyboardOnShareAlertClose = z5;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.ShareAlert
        public void onSend(final LongSparseArray<TLRPC$Dialog> longSparseArray, final int i, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
            final FrameLayout frameLayout = this.val$photoContainerView;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$36$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.36.this.lambda$onSend$0(frameLayout, longSparseArray, i);
                }
            }, 250L);
        }

        public /* synthetic */ void lambda$onSend$0(FrameLayout frameLayout, LongSparseArray longSparseArray, int i) {
            BulletinFactory.createForwardedBulletin(PhotoViewer.this.parentActivity, frameLayout, longSparseArray.size(), longSparseArray.size() == 1 ? ((TLRPC$Dialog) longSparseArray.valueAt(0)).id : 0L, i, -115203550, -1).show();
        }

        @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
        public void dismissInternal() {
            super.dismissInternal();
            if (this.val$finalOpenKeyboardOnShareAlertClose) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$36$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.36.this.lambda$dismissInternal$1();
                    }
                }, 50L);
            }
            PhotoViewer.this.requestAdjust();
        }

        public /* synthetic */ void lambda$dismissInternal$1() {
            if (PhotoViewer.this.parentChatActivity == null || PhotoViewer.this.parentChatActivity.getChatActivityEnterView() == null) {
                return;
            }
            PhotoViewer.this.parentChatActivity.getChatActivityEnterView().openKeyboard();
        }
    }

    public /* synthetic */ void lambda$showShareAlert$53(ShareAlert shareAlert) {
        if (shareAlert == null || shareAlert.getWindow() == null) {
            return;
        }
        shareAlert.setFocusable(true);
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getChatActivityEnterView() == null) {
            return;
        }
        this.parentChatActivity.getChatActivityEnterView().hidePopup(false);
    }

    public void updateActionBarTitlePadding() {
        if (this.menu == null || this.actionBarContainer == null) {
            return;
        }
        float f = 0.0f;
        for (int i = 0; i < this.menu.getChildCount(); i++) {
            View childAt = this.menu.getChildAt(i);
            if (childAt.getVisibility() == 0) {
                f += Math.min(0.5f, childAt.getAlpha()) * 2.0f * childAt.getWidth();
            }
        }
        CheckBox checkBox = this.checkImageView;
        if (checkBox != null && checkBox.getVisibility() == 0) {
            f = Math.max(f, AndroidUtilities.dp(48.0f));
        }
        CounterView counterView = this.photosCounterView;
        if (counterView != null && counterView.getVisibility() == 0) {
            f = Math.max(f, AndroidUtilities.dp(100.0f));
        }
        this.actionBarContainer.updateRightPadding(f, false);
    }

    public void setMenuItemIcon(boolean z, boolean z2) {
        if (this.speedItem.getVisibility() != 0) {
            this.menuItemIcon.setSpeed(null, z);
            return;
        }
        this.menuItemIcon.setSpeed(Math.abs(this.currentVideoSpeed - 1.0f) >= 0.001f ? Float.valueOf(this.currentVideoSpeed) : null, z);
        if (z2) {
            if (Math.abs(this.currentVideoSpeed - 0.2f) < 0.05f) {
                this.speedItem.setSubtext(LocaleController.getString("VideoSpeedVerySlow", R.string.VideoSpeedVerySlow));
            } else if (Math.abs(this.currentVideoSpeed - 0.5f) < 0.05f) {
                this.speedItem.setSubtext(LocaleController.getString("VideoSpeedSlow", R.string.VideoSpeedSlow));
            } else if (Math.abs(this.currentVideoSpeed - 1.0f) < 0.05f) {
                this.speedItem.setSubtext(LocaleController.getString("VideoSpeedNormal", R.string.VideoSpeedNormal));
            } else if (Math.abs(this.currentVideoSpeed - 1.5f) < 0.05f) {
                this.speedItem.setSubtext(LocaleController.getString("VideoSpeedFast", R.string.VideoSpeedFast));
            } else if (Math.abs(this.currentVideoSpeed - 2.0f) < 0.05f) {
                this.speedItem.setSubtext(LocaleController.getString("VideoSpeedVeryFast", R.string.VideoSpeedVeryFast));
            } else {
                ActionBarMenuSubItem actionBarMenuSubItem = this.speedItem;
                int i = R.string.VideoSpeedCustom;
                actionBarMenuSubItem.setSubtext(LocaleController.formatString("VideoSpeedCustom", i, SpeedIconDrawable.formatNumber(this.currentVideoSpeed) + "x"));
            }
        }
        this.chooseSpeedLayout.update(this.currentVideoSpeed, z2);
    }

    public float getCurrentVideoSpeed() {
        return this.currentVideoSpeed;
    }

    private boolean checkInlinePermissions() {
        Activity activity = this.parentActivity;
        if (activity == null) {
            return false;
        }
        if (Build.VERSION.SDK_INT < 23 || Settings.canDrawOverlays(activity)) {
            return true;
        }
        AlertsCreator.createDrawOverlayPermissionDialog(this.parentActivity, null).show();
        return false;
    }

    public void captureCurrentFrame() {
        TextureView textureView;
        if (this.captureFrameAtTime == -1 || (textureView = this.videoTextureView) == null) {
            return;
        }
        this.captureFrameAtTime = -1L;
        final Bitmap bitmap = textureView.getBitmap();
        this.flashView.animate().alpha(1.0f).setInterpolator(CubicBezierInterpolator.EASE_BOTH).setDuration(85L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.37
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.photoCropView.setVideoThumb(bitmap, 0);
                PhotoViewer.this.flashAnimator = new AnimatorSet();
                PhotoViewer.this.flashAnimator.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.flashView, PhotoViewer.this.FLASH_VIEW_VALUE, 0.0f));
                PhotoViewer.this.flashAnimator.setDuration(85L);
                PhotoViewer.this.flashAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT);
                PhotoViewer.this.flashAnimator.addListener(new 1());
                PhotoViewer.this.flashAnimator.start();
            }

            /* loaded from: classes4.dex */
            public class 1 extends AnimatorListenerAdapter {
                1() {
                    37.this = r1;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (PhotoViewer.this.flashAnimator == null) {
                        return;
                    }
                    AndroidUtilities.runOnUIThread(PhotoViewer.this.videoPlayRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$37$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.37.1.this.lambda$onAnimationEnd$0();
                        }
                    }, 860L);
                }

                public /* synthetic */ void lambda$onAnimationEnd$0() {
                    PhotoViewer.this.manuallyPaused = false;
                    if (PhotoViewer.this.videoPlayer != null) {
                        PhotoViewer.this.videoPlayer.play();
                    }
                    PhotoViewer.this.videoPlayRunnable = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    PhotoViewer.this.flashAnimator = null;
                }
            }
        }).start();
    }

    /* loaded from: classes4.dex */
    public static class CaptionTextView extends SpoilersTextView {
        private AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiDrawables;
        private boolean hasQuote;
        private Layout lastLayout;
        private Layout lastLoadingLayout;
        private final LinkSpanDrawable.LinkCollector links;
        private boolean loading;
        private LoadingDrawable loadingDrawable;
        private Path loadingPath;
        private final Utilities.Callback2<ClickableSpan, TextView> onLinkClick;
        private final Utilities.Callback3<URLSpan, TextView, Runnable> onLinkLongPress;
        private LinkSpanDrawable<ClickableSpan> pressedLink;
        private ArrayList<QuoteSpan.Block> quoteBlocks;
        private final CaptionScrollView scrollView;
        private final TextSelectionHelper.SimpleTextSelectionHelper textSelectionHelper;

        public CaptionTextView(Context context, final CaptionScrollView captionScrollView, TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper, Utilities.Callback2<ClickableSpan, TextView> callback2, Utilities.Callback3<URLSpan, TextView, Runnable> callback3) {
            super(context);
            this.links = new LinkSpanDrawable.LinkCollector(this);
            this.scrollView = captionScrollView;
            this.onLinkClick = callback2;
            this.onLinkLongPress = callback3;
            this.textSelectionHelper = simpleTextSelectionHelper;
            ViewHelper.setPadding(this, 16.0f, 8.0f, 16.0f, 8.0f);
            setLinkTextColor(-8796932);
            setTextColor(-1);
            setHighlightColor(872415231);
            setGravity(LayoutHelper.getAbsoluteGravityStart() | 16);
            setTextSize(1, 16.0f);
            setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$CaptionTextView$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.CaptionTextView.lambda$new$0(PhotoViewer.CaptionScrollView.this, view);
                }
            });
        }

        public static /* synthetic */ void lambda$new$0(CaptionScrollView captionScrollView, View view) {
            if (captionScrollView != null) {
                captionScrollView.smoothScrollBy(0, AndroidUtilities.dp(64.0f));
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:88:0x012a  */
        /* JADX WARN: Removed duplicated region for block: B:95:0x014c  */
        @Override // android.widget.TextView, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ClickableSpan clickableSpan;
            boolean z;
            if (getLayout() == null) {
                return false;
            }
            if (this.textSelectionHelper != null && getStaticTextLayout() != null) {
                this.textSelectionHelper.setSelectabeleView(this);
                this.textSelectionHelper.setScrollingParent(this.scrollView);
                this.textSelectionHelper.update(getPaddingLeft(), getPaddingTop());
                this.textSelectionHelper.onTouchEvent(motionEvent);
            }
            if (motionEvent.getAction() == 0 || (this.pressedLink != null && motionEvent.getAction() == 1)) {
                int y = (int) (motionEvent.getY() - getPaddingTop());
                int lineForVertical = getLayout().getLineForVertical(y);
                float x = (int) (motionEvent.getX() - getPaddingLeft());
                int offsetForHorizontal = getLayout().getOffsetForHorizontal(lineForVertical, x);
                float lineLeft = getLayout().getLineLeft(lineForVertical);
                if (lineLeft <= x && lineLeft + getLayout().getLineWidth(lineForVertical) >= x && y >= 0 && y <= getLayout().getHeight()) {
                    SpannableString spannableString = new SpannableString(getText());
                    ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannableString.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                    if (clickableSpanArr.length != 0) {
                        clickableSpan = clickableSpanArr[0];
                        if (motionEvent.getAction() == 0) {
                            this.links.clear();
                            LinkSpanDrawable<ClickableSpan> linkSpanDrawable = new LinkSpanDrawable<>(clickableSpanArr[0], null, motionEvent.getX(), motionEvent.getY());
                            this.pressedLink = linkSpanDrawable;
                            linkSpanDrawable.setColor(1717742051);
                            this.links.addLink(this.pressedLink);
                            int spanStart = spannableString.getSpanStart(this.pressedLink.getSpan());
                            int spanEnd = spannableString.getSpanEnd(this.pressedLink.getSpan());
                            LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                            obtainNewPath.setCurrentLayout(getLayout(), spanStart, getPaddingTop());
                            getLayout().getSelectionPath(spanStart, spanEnd, obtainNewPath);
                            final LinkSpanDrawable<ClickableSpan> linkSpanDrawable2 = this.pressedLink;
                            postDelayed(new Runnable() { // from class: org.telegram.ui.PhotoViewer$CaptionTextView$$ExternalSyntheticLambda2
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.CaptionTextView.this.lambda$onTouchEvent$1(linkSpanDrawable2);
                                }
                            }, ViewConfiguration.getLongPressTimeout());
                            z = true;
                            if (motionEvent.getAction() == 1) {
                                this.links.clear();
                                LinkSpanDrawable<ClickableSpan> linkSpanDrawable3 = this.pressedLink;
                                if (linkSpanDrawable3 != null && linkSpanDrawable3.getSpan() == clickableSpan) {
                                    this.onLinkClick.run(this.pressedLink.getSpan(), this);
                                }
                                this.pressedLink = null;
                                z = true;
                            }
                            return !z || super.onTouchEvent(motionEvent);
                        }
                        z = false;
                        if (motionEvent.getAction() == 1) {
                        }
                        if (z) {
                        }
                    }
                }
                clickableSpan = null;
                z = false;
                if (motionEvent.getAction() == 1) {
                }
                if (z) {
                }
            } else if (motionEvent.getAction() != 3) {
                z = false;
                if (z) {
                }
            } else {
                this.links.clear();
                this.pressedLink = null;
                z = true;
                if (z) {
                }
            }
        }

        public /* synthetic */ void lambda$onTouchEvent$1(LinkSpanDrawable linkSpanDrawable) {
            LinkSpanDrawable<ClickableSpan> linkSpanDrawable2 = this.pressedLink;
            if (linkSpanDrawable == linkSpanDrawable2 && linkSpanDrawable2 != null && (linkSpanDrawable2.getSpan() instanceof URLSpan)) {
                LinkSpanDrawable.LinkCollector linkCollector = this.links;
                Objects.requireNonNull(linkCollector);
                this.onLinkLongPress.run((URLSpan) this.pressedLink.getSpan(), this, new PhotoViewer$CaptionTextView$$ExternalSyntheticLambda1(linkCollector));
                this.pressedLink = null;
            }
        }

        @Override // android.view.View
        public void setPressed(boolean z) {
            boolean z2 = z != isPressed();
            super.setPressed(z);
            if (z2) {
                invalidate();
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.spoilers.SpoilersTextView, android.widget.TextView, android.view.View
        public void onDraw(Canvas canvas) {
            TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper = this.textSelectionHelper;
            if (simpleTextSelectionHelper != null && simpleTextSelectionHelper.isInSelectionMode()) {
                canvas.save();
                canvas.translate(getPaddingLeft(), getPaddingTop());
                if (this.textSelectionHelper != null && getStaticTextLayout() != null && this.textSelectionHelper.isCurrent(this)) {
                    this.textSelectionHelper.draw(canvas);
                }
                canvas.restore();
            }
            canvas.save();
            canvas.translate(getPaddingLeft(), 0.0f);
            if (this.links.draw(canvas)) {
                invalidate();
            }
            canvas.restore();
            super.onDraw(canvas);
            if (this.lastLayout != getLayout()) {
                boolean z = true;
                this.animatedEmojiDrawables = AnimatedEmojiSpan.update(0, this, this.animatedEmojiDrawables, getLayout());
                this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(getLayout(), this.quoteBlocks);
                z = (getLayout() == null || !(getLayout().getText() instanceof Spanned) || ((QuoteSpan.QuoteStyleSpan[]) ((Spanned) getLayout().getText()).getSpans(0, getLayout().getText().length(), QuoteSpan.QuoteStyleSpan.class)).length <= 0) ? false : false;
                this.hasQuote = z;
                ViewHelper.setPadding(this, 16.0f, 8.0f, (z ? 32 : 0) + 16, 8.0f);
                this.lastLayout = getLayout();
            }
        }

        @Override // android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            AnimatedEmojiSpan.release(this, this.animatedEmojiDrawables);
            this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(null, this.quoteBlocks);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.spoilers.SpoilersTextView, android.widget.TextView
        public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            super.onTextChanged(charSequence, i, i2, i3);
            this.animatedEmojiDrawables = AnimatedEmojiSpan.update(0, this, this.animatedEmojiDrawables, getLayout());
            this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(getLayout(), this.quoteBlocks);
        }

        @Override // android.view.View
        protected void dispatchDraw(Canvas canvas) {
            if (this.loading) {
                checkLoadingPath();
                if (this.loadingDrawable == null) {
                    LoadingDrawable loadingDrawable = new LoadingDrawable();
                    this.loadingDrawable = loadingDrawable;
                    loadingDrawable.usePath(this.loadingPath);
                    this.loadingDrawable.setRadiiDp(4.0f);
                    this.loadingDrawable.setColors(Theme.multAlpha(-1, 0.3f), Theme.multAlpha(-1, 0.1f), Theme.multAlpha(-1, 0.2f), Theme.multAlpha(-1, 0.7f));
                    this.loadingDrawable.setCallback(this);
                }
                this.loadingDrawable.setBounds(0, 0, getWidth(), getHeight());
                this.loadingDrawable.draw(canvas);
            }
            if (this.loading) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), 178, 31);
            }
            if (this.quoteBlocks != null && this.hasQuote) {
                canvas.save();
                canvas.translate(getPaddingLeft(), getPaddingTop());
                for (int i = 0; i < this.quoteBlocks.size(); i++) {
                    this.quoteBlocks.get(i).draw(canvas, 0.0f, ((getWidth() - getPaddingLeft()) - getPaddingRight()) + (this.hasQuote ? AndroidUtilities.dp(32.0f) : 0), -1, 1.0f, getPaint());
                }
                canvas.restore();
            }
            super.dispatchDraw(canvas);
            if (this.loading) {
                canvas.restore();
            }
            canvas.save();
            canvas.translate(getPaddingLeft(), getPaddingTop());
            canvas.clipRect(0.0f, getScrollY(), getWidth() - getPaddingRight(), (getHeight() + getScrollY()) - (getPaddingBottom() * 0.75f));
            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.animatedEmojiDrawables, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f);
            canvas.restore();
        }

        public void setLoading(boolean z) {
            if (this.loading == z) {
                return;
            }
            this.loading = z;
            invalidate();
        }

        private void checkLoadingPath() {
            Layout layout = getLayout();
            Path path = this.loadingPath;
            if (path == null || this.lastLoadingLayout != layout) {
                if (path == null) {
                    this.loadingPath = new Path();
                } else {
                    path.rewind();
                }
                if (layout != null) {
                    float dp = AndroidUtilities.dp(16.0f);
                    float dp2 = AndroidUtilities.dp(8.0f);
                    float f = 0.0f;
                    int i = 0;
                    while (i < layout.getLineCount()) {
                        float f2 = dp / 3.0f;
                        float lineLeft = layout.getLineLeft(i) - f2;
                        float lineRight = layout.getLineRight(i) + f2;
                        if (i == 0) {
                            f = layout.getLineTop(i) - (dp2 / 3.0f);
                        }
                        float lineBottom = layout.getLineBottom(i);
                        if (i >= layout.getLineCount() - 1) {
                            lineBottom += dp2 / 3.0f;
                        }
                        this.loadingPath.addRect(getPaddingLeft() + lineLeft, getPaddingTop() + f, getPaddingLeft() + lineRight, getPaddingTop() + lineBottom, Path.Direction.CW);
                        i++;
                        f = lineBottom;
                    }
                }
                this.lastLoadingLayout = layout;
            }
        }

        @Override // android.widget.TextView, android.view.View
        protected boolean verifyDrawable(Drawable drawable) {
            return drawable == this.loadingDrawable || super.verifyDrawable(drawable);
        }
    }

    public int getLeftInset() {
        return this.insets.left;
    }

    public int getRightInset() {
        return this.insets.right;
    }

    public void dismissInternal() {
        try {
            if (this.windowView.getParent() != null) {
                Activity activity = this.parentActivity;
                if (activity instanceof LaunchActivity) {
                    ((LaunchActivity) activity).drawerLayoutContainer.setAllowDrawContent(true);
                }
                ((WindowManager) this.parentActivity.getSystemService("window")).removeView(this.windowView);
                onHideView();
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void switchToPip(boolean z) {
        float translationX;
        float translationY;
        float translationY2;
        float f;
        CubicBezierInterpolator cubicBezierInterpolator;
        CubicBezierInterpolator cubicBezierInterpolator2;
        if (this.videoPlayer == null || !this.textureUploaded || !checkInlinePermissions() || this.changingTextureView || this.switchingInlineMode || this.isInline) {
            return;
        }
        if (PipInstance != null) {
            PipInstance.destroyPhotoViewer();
        }
        this.openedFullScreenVideo = false;
        PipInstance = Instance;
        Instance = null;
        this.switchingInlineMode = true;
        this.isVisible = false;
        this.isVisibleOrAnimating = false;
        AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
        PlaceProviderObject placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null && !placeProviderObject.imageReceiver.getVisible()) {
            this.currentPlaceObject.imageReceiver.setVisible(true, true);
            AnimatedFileDrawable animation = this.currentPlaceObject.imageReceiver.getAnimation();
            if (animation != null) {
                Bitmap animatedBitmap = animation.getAnimatedBitmap();
                if (animatedBitmap != null) {
                    try {
                        if (this.usedSurfaceView) {
                            AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, animatedBitmap);
                        } else {
                            Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                            new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                            bitmap.recycle();
                        }
                    } catch (Throwable th) {
                        FileLog.e(th);
                    }
                }
                animation.seekTo(this.videoPlayer.getCurrentPosition(), true);
                if (z) {
                    this.currentPlaceObject.imageReceiver.setAlpha(0.0f);
                    final ImageReceiver imageReceiver = this.currentPlaceObject.imageReceiver;
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            PhotoViewer.lambda$switchToPip$54(ImageReceiver.this, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.PhotoViewer.38
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            imageReceiver.setAlpha(1.0f);
                        }
                    });
                    ofFloat.setDuration(250L);
                    ofFloat.start();
                }
                this.currentPlaceObject.imageReceiver.setAllowStartAnimation(true);
                this.currentPlaceObject.imageReceiver.startAnimation();
            }
        }
        if (Build.VERSION.SDK_INT >= 21) {
            this.pipAnimationInProgress = true;
            org.telegram.ui.Components.Rect pipRect = PipVideoOverlay.getPipRect(true, this.aspectRatioFrameLayout.getAspectRatio());
            final View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            final float width = pipRect.width / view.getWidth();
            final ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
            if (this.usedSurfaceView) {
                translationX = this.aspectRatioFrameLayout.getLeft() + view.getTranslationX();
                translationY = this.aspectRatioFrameLayout.getTop() + view.getTranslationY() + this.translationY;
                translationY2 = this.aspectRatioFrameLayout.getTop() + this.textureImageView.getTranslationY();
                f = this.translationY;
            } else {
                translationX = view.getTranslationX();
                translationY = view.getTranslationY() + this.translationY;
                translationY2 = this.textureImageView.getTranslationY();
                f = this.translationY;
            }
            final float f2 = translationY2 + f;
            final float f3 = translationY;
            final float f4 = translationX;
            final float f5 = pipRect.x;
            final float leftInset = getLeftInset() + (f5 - this.aspectRatioFrameLayout.getX());
            final float f6 = pipRect.y;
            final float y = f6 - this.aspectRatioFrameLayout.getY();
            if (this.videoSurfaceView != null) {
                this.videoPlayer.player.pause();
                this.textureImageView.setVisibility(0);
                if (this.usedSurfaceView) {
                    Bitmap createBitmap = Bitmaps.createBitmap(this.videoSurfaceView.getWidth(), this.videoSurfaceView.getHeight(), Bitmap.Config.ARGB_8888);
                    AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, createBitmap);
                    this.textureImageView.setImageBitmap(createBitmap);
                }
                this.videoSurfaceView.setVisibility(4);
            }
            this.textureImageView.setTranslationY(f2);
            view.setTranslationY(f3);
            FirstFrameView firstFrameView = this.firstFrameView;
            if (firstFrameView != null) {
                firstFrameView.setTranslationY(f3);
            }
            this.translationY = 0.0f;
            this.containerView.invalidate();
            if (z) {
                if (f3 < y) {
                    cubicBezierInterpolator2 = new CubicBezierInterpolator(0.5d, 0.0d, 0.9d, 0.9d);
                } else {
                    cubicBezierInterpolator2 = new CubicBezierInterpolator(0.0d, 0.5d, 0.9d, 0.9d);
                }
                cubicBezierInterpolator = cubicBezierInterpolator2;
            } else {
                cubicBezierInterpolator = null;
            }
            ViewOutlineProvider viewOutlineProvider = new ViewOutlineProvider(this) { // from class: org.telegram.ui.PhotoViewer.39
                @Override // android.view.ViewOutlineProvider
                public void getOutline(View view2, Outline outline) {
                    outline.setRoundRect(0, 0, view2.getMeasuredWidth(), view2.getMeasuredHeight(), ((Float) ofFloat2.getAnimatedValue()).floatValue() * AndroidUtilities.dp(10.0f) * (1.0f / width));
                }
            };
            view.setOutlineProvider(viewOutlineProvider);
            view.setClipToOutline(true);
            this.textureImageView.setOutlineProvider(viewOutlineProvider);
            this.textureImageView.setClipToOutline(true);
            FirstFrameView firstFrameView2 = this.firstFrameView;
            if (firstFrameView2 != null) {
                firstFrameView2.setOutlineProvider(viewOutlineProvider);
                this.firstFrameView.setClipToOutline(true);
            }
            final CubicBezierInterpolator cubicBezierInterpolator3 = cubicBezierInterpolator;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda18
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$switchToPip$55(cubicBezierInterpolator3, f4, f5, f2, f6, view, leftInset, f3, y, valueAnimator);
                }
            });
            AnimatorSet animatorSet = new AnimatorSet();
            ValueAnimator ofFloat3 = ValueAnimator.ofFloat(0.0f, 1.0f);
            ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda9
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$switchToPip$56(valueAnimator);
                }
            });
            animatorSet.playTogether(ofFloat3, ObjectAnimator.ofFloat(this.textureImageView, View.SCALE_X, width), ObjectAnimator.ofFloat(this.textureImageView, View.SCALE_Y, width), ObjectAnimator.ofFloat(view, View.SCALE_X, width), ObjectAnimator.ofFloat(view, View.SCALE_Y, width), ObjectAnimator.ofInt(this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, 0), ofFloat2);
            if (z) {
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT);
                animatorSet.setDuration(300L);
            } else {
                animatorSet.setInterpolator(new DecelerateInterpolator());
                animatorSet.setDuration(250L);
            }
            animatorSet.addListener(new 40(view));
            animatorSet.start();
            if (!z) {
                toggleActionBar(false, true, new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(250).animationInterpolator(new DecelerateInterpolator()));
            }
        } else {
            this.switchToInlineRunnable.run();
            dismissInternal();
        }
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getFragmentView() == null) {
            return;
        }
        this.parentChatActivity.getFragmentView().invalidate();
    }

    public static /* synthetic */ void lambda$switchToPip$54(ImageReceiver imageReceiver, ValueAnimator valueAnimator) {
        imageReceiver.setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public /* synthetic */ void lambda$switchToPip$55(CubicBezierInterpolator cubicBezierInterpolator, float f, float f2, float f3, float f4, View view, float f5, float f6, float f7, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        float interpolation = cubicBezierInterpolator == null ? floatValue : cubicBezierInterpolator.getInterpolation(floatValue);
        ImageView imageView = this.textureImageView;
        if (imageView != null) {
            imageView.setTranslationX(((1.0f - floatValue) * f) + (f2 * floatValue));
            this.textureImageView.setTranslationY((f3 * (1.0f - interpolation)) + (f4 * interpolation));
            this.textureImageView.invalidateOutline();
        }
        view.setTranslationX((f * (1.0f - floatValue)) + (f5 * floatValue));
        view.setTranslationY((f6 * (1.0f - interpolation)) + (f7 * interpolation));
        view.invalidateOutline();
        FirstFrameView firstFrameView = this.firstFrameView;
        if (firstFrameView != null) {
            firstFrameView.setTranslationX(view.getTranslationX());
            this.firstFrameView.setTranslationY(view.getTranslationY());
            this.firstFrameView.setScaleX(view.getScaleX());
            this.firstFrameView.setScaleY(view.getScaleY());
            this.firstFrameView.invalidateOutline();
        }
    }

    public /* synthetic */ void lambda$switchToPip$56(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    /* loaded from: classes4.dex */
    public class 40 extends AnimatorListenerAdapter {
        final /* synthetic */ View val$textureView;

        40(View view) {
            PhotoViewer.this = r1;
            this.val$textureView = view;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            PhotoViewer.this.pipAnimationInProgress = false;
            PhotoViewer.this.switchToInlineRunnable.run();
            final View view = this.val$textureView;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$40$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.40.this.lambda$onAnimationEnd$0(view);
                }
            }, 100L);
        }

        public /* synthetic */ void lambda$onAnimationEnd$0(View view) {
            view.setOutlineProvider(null);
            if (PhotoViewer.this.textureImageView != null) {
                PhotoViewer.this.textureImageView.setOutlineProvider(null);
            }
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.setOutlineProvider(null);
            }
        }
    }

    public boolean cropMirror() {
        if (this.imageMoveAnimation != null || this.photoCropView == null) {
            return false;
        }
        this.mirror = 0.0f;
        this.animateToMirror = 1.0f;
        this.animationStartTime = System.currentTimeMillis();
        AnimatorSet animatorSet = new AnimatorSet();
        this.imageMoveAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
        this.imageMoveAnimation.setDuration(250L);
        this.imageMoveAnimation.setInterpolator(CubicBezierInterpolator.DEFAULT);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.41
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.imageMoveAnimation = null;
                if (PhotoViewer.this.photoCropView == null) {
                    return;
                }
                if (PhotoViewer.this.photoCropView.mirror()) {
                    PhotoViewer.this.mirrorItem.setColorFilter(new PorterDuffColorFilter(PhotoViewer.this.getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY));
                } else {
                    PhotoViewer.this.mirrorItem.setColorFilter((ColorFilter) null);
                }
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.mirror = photoViewer.animateToMirror = 0.0f;
                PhotoViewer.this.containerView.invalidate();
            }
        });
        this.imageMoveAnimation.start();
        return !this.photoCropView.cropView.isMirrored();
    }

    public boolean cropRotate(float f) {
        return cropRotate(f, false, null);
    }

    public float scale1() {
        return scale1(true);
    }

    public float scale1(boolean z) {
        int i;
        if (this.sendPhotoType == 11) {
            int containerViewWidth = getContainerViewWidth();
            if (containerViewWidth == 0) {
                containerViewWidth = AndroidUtilities.displaySize.x;
            }
            float dp = ((containerViewWidth - AndroidUtilities.dp(20.0f)) + 1) / containerViewWidth;
            if (z) {
                int bitmapWidth = this.centerImage.getBitmapWidth();
                int bitmapHeight = this.centerImage.getBitmapHeight();
                if ((bitmapWidth <= 1 || bitmapHeight <= 1) && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                    Object obj = this.imagesArrLocals.get(this.currentIndex);
                    if (obj instanceof MediaController.PhotoEntry) {
                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                        if ((photoEntry.orientation / 90) % 2 != 0) {
                            bitmapWidth = photoEntry.height;
                            bitmapHeight = photoEntry.width;
                        } else {
                            bitmapWidth = photoEntry.width;
                            bitmapHeight = photoEntry.height;
                        }
                    }
                }
                return (bitmapWidth <= 1 || bitmapHeight <= 1 || bitmapWidth <= bitmapHeight) ? dp : dp * (bitmapWidth / bitmapHeight);
            }
            return dp;
        }
        return 1.0f;
    }

    private boolean cropRotate(final float f, boolean z, final Runnable runnable) {
        PhotoCropView photoCropView;
        if (this.imageMoveAnimation == null && (photoCropView = this.photoCropView) != null) {
            photoCropView.cropView.maximize(true);
            this.rotate = 0.0f;
            this.animateToRotate = 0.0f + f;
            if (z) {
                this.mirror = 0.0f;
                this.animateToMirror = 1.0f;
            }
            this.animationStartTime = System.currentTimeMillis();
            this.imageMoveAnimation = new AnimatorSet();
            if (this.sendPhotoType == 1) {
                this.animateToScale = 1.0f;
                this.scale = 1.0f;
            } else {
                ImageReceiver imageReceiver = this.centerImage;
                if (imageReceiver != null) {
                    int bitmapWidth = imageReceiver.getBitmapWidth();
                    int bitmapHeight = this.centerImage.getBitmapHeight();
                    if (Math.abs((((int) this.photoCropView.cropView.getStateOrientation()) / 90) % 2) == 1) {
                        bitmapHeight = bitmapWidth;
                        bitmapWidth = bitmapHeight;
                    }
                    MediaController.CropState cropState = this.editState.cropState;
                    if (cropState != null) {
                        bitmapWidth = (int) (bitmapWidth * cropState.cropPw);
                        bitmapHeight = (int) (bitmapHeight * cropState.cropPh);
                    }
                    float f2 = bitmapWidth;
                    float f3 = bitmapHeight;
                    float min = Math.min(getContainerViewWidth(1) / f2, getContainerViewHeight(1) / f3);
                    this.animateToScale = (Math.abs((f / 90.0f) % 2.0f) == 1.0f ? Math.min(getContainerViewWidth(1) / f3, getContainerViewHeight(1) / f2) : min) / min;
                }
            }
            if (this.sendPhotoType == 11) {
                this.scale *= scale1(false);
                this.animateToScale *= scale1(false);
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            final float rotation = this.photoCropView.wheelView.getRotation();
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda16
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$cropRotate$57(f, rotation, valueAnimator);
                }
            });
            this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ofFloat);
            this.imageMoveAnimation.setDuration(250L);
            this.imageMoveAnimation.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.42
                {
                    PhotoViewer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    PhotoViewer.this.imageMoveAnimation = null;
                    PhotoViewer photoViewer = PhotoViewer.this;
                    photoViewer.rotate = photoViewer.animateToRotate = 0.0f;
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.mirror = photoViewer2.animateToMirror = 0.0f;
                    PhotoViewer photoViewer3 = PhotoViewer.this;
                    photoViewer3.scale = photoViewer3.animateToScale = photoViewer3.scale1(false);
                    PhotoViewer.this.containerView.invalidate();
                    PhotoViewer.this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, PhotoViewer.this.scale1(false), 0.0f, 0.0f);
                    PhotoViewer.this.photoCropView.wheelView.setRotated(false);
                    if (Math.abs(f) > 0.0f) {
                        if (PhotoViewer.this.photoCropView.rotate(f)) {
                            PhotoViewer.this.rotateItem.setColorFilter(new PorterDuffColorFilter(PhotoViewer.this.getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY));
                        } else {
                            PhotoViewer.this.rotateItem.setColorFilter((ColorFilter) null);
                        }
                    }
                    if (PhotoViewer.this.editState.cropState != null) {
                        MediaController.CropState cropState2 = PhotoViewer.this.editState.cropState;
                        PhotoViewer.this.editState.cropState.cropPy = 0.0f;
                        cropState2.cropPx = 0.0f;
                        MediaController.CropState cropState3 = PhotoViewer.this.editState.cropState;
                        PhotoViewer.this.editState.cropState.cropPh = 1.0f;
                        cropState3.cropPw = 1.0f;
                    }
                    Runnable runnable2 = runnable;
                    if (runnable2 != null) {
                        runnable2.run();
                    }
                }
            });
            this.imageMoveAnimation.start();
            return Math.abs(this.photoCropView.cropView.getStateOrientation() + f) > 0.01f;
        }
        return false;
    }

    public /* synthetic */ void lambda$cropRotate$57(float f, float f2, ValueAnimator valueAnimator) {
        CropAreaView cropAreaView = this.photoCropView.cropView.areaView;
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue() * f;
        float f3 = this.scale;
        cropAreaView.setRotationScaleTranslation(floatValue, f3 + ((this.animateToScale - f3) * this.animationValue), 0.0f, 0.0f);
        this.photoCropView.wheelView.setRotation(AndroidUtilities.lerp(f2, 0.0f, ((Float) valueAnimator.getAnimatedValue()).floatValue()), false);
    }

    public VideoPlayer getVideoPlayer() {
        return this.videoPlayer;
    }

    public void exitFromPip() {
        if (this.isInline) {
            if (Instance != null) {
                Instance.closePhoto(false, true);
            }
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
                photoViewerWebView.exitFromPip();
            }
            Instance = PipInstance;
            PipInstance = null;
            if (this.photoViewerWebView == null) {
                this.switchingInlineMode = true;
                Bitmap bitmap = this.currentBitmap;
                if (bitmap != null) {
                    bitmap.recycle();
                    this.currentBitmap = null;
                }
                this.changingTextureView = true;
            }
            this.isInline = false;
            View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            if (this.photoViewerWebView == null && view != null) {
                AndroidUtilities.removeFromParent(view);
                view.setVisibility(4);
                this.aspectRatioFrameLayout.addView(view);
            }
            if (ApplicationLoader.mainInterfacePaused) {
                try {
                    this.parentActivity.startService(new Intent(ApplicationLoader.applicationContext, BringAppForegroundService.class));
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }
            if (this.photoViewerWebView == null) {
                if (Build.VERSION.SDK_INT >= 21 && view != null) {
                    this.pipAnimationInProgress = true;
                    org.telegram.ui.Components.Rect pipRect = PipVideoOverlay.getPipRect(false, this.aspectRatioFrameLayout.getAspectRatio());
                    final float f = pipRect.width / this.textureImageView.getLayoutParams().width;
                    this.textureImageView.setScaleX(f);
                    this.textureImageView.setScaleY(f);
                    this.textureImageView.setTranslationX(pipRect.x);
                    this.textureImageView.setTranslationY(pipRect.y);
                    view.setScaleX(f);
                    view.setScaleY(f);
                    view.setTranslationX(pipRect.x - this.aspectRatioFrameLayout.getX());
                    view.setTranslationY(pipRect.y - this.aspectRatioFrameLayout.getY());
                    FirstFrameView firstFrameView = this.firstFrameView;
                    if (firstFrameView != null) {
                        firstFrameView.setScaleX(f);
                        this.firstFrameView.setScaleY(f);
                        this.firstFrameView.setTranslationX(view.getTranslationX());
                        this.firstFrameView.setTranslationY(view.getTranslationY());
                    }
                    this.inlineOutAnimationProgress = 0.0f;
                    ViewOutlineProvider viewOutlineProvider = new ViewOutlineProvider() { // from class: org.telegram.ui.PhotoViewer.43
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setRoundRect(0, 0, view2.getMeasuredWidth(), view2.getMeasuredHeight(), (1.0f - PhotoViewer.this.inlineOutAnimationProgress) * AndroidUtilities.dp(10.0f) * (1.0f / f));
                        }
                    };
                    view.setOutlineProvider(viewOutlineProvider);
                    view.setClipToOutline(true);
                    this.textureImageView.setOutlineProvider(viewOutlineProvider);
                    this.textureImageView.setClipToOutline(true);
                    FirstFrameView firstFrameView2 = this.firstFrameView;
                    if (firstFrameView2 != null) {
                        firstFrameView2.setOutlineProvider(viewOutlineProvider);
                        this.firstFrameView.setClipToOutline(true);
                    }
                } else {
                    PipVideoOverlay.dismiss(true);
                }
            } else {
                this.clippingImageProgress = 0.0f;
            }
            try {
                this.isVisible = true;
                this.isVisibleOrAnimating = true;
                ((WindowManager) this.parentActivity.getSystemService("window")).addView(this.windowView, this.windowLayoutParams);
                onShowView();
                PlaceProviderObject placeProviderObject = this.currentPlaceObject;
                if (placeProviderObject != null) {
                    placeProviderObject.imageReceiver.setVisible(false, false);
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.usedSurfaceView) {
                ExoPlayer exoPlayer = this.videoPlayer.player;
                if (exoPlayer != null) {
                    exoPlayer.setVideoTextureView(null);
                }
                this.videoPlayer.setSurfaceView(this.videoSurfaceView);
                this.videoSurfaceView.setVisibility(4);
                this.waitingForFirstTextureUpload = 2;
                this.changingTextureView = false;
                this.containerView.invalidate();
                if (Build.VERSION.SDK_INT >= 21) {
                    this.waitingForDraw = 4;
                }
            } else if (Build.VERSION.SDK_INT >= 21) {
                this.waitingForDraw = 4;
            }
        }
    }

    private void onShowView() {
        Activity activity = this.parentActivity;
        if (activity instanceof LaunchActivity) {
            ((LaunchActivity) activity).addOnUserLeaveHintListener(this.onUserLeaveHintListener);
        }
    }

    private void onHideView() {
        Activity activity = this.parentActivity;
        if (activity instanceof LaunchActivity) {
            ((LaunchActivity) activity).removeOnUserLeaveHintListener(this.onUserLeaveHintListener);
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment == null || baseFragment.getFragmentView() == null) {
            return;
        }
        this.clippingImageProgress = 1.0f;
        View fragmentView = this.parentFragment.getFragmentView();
        fragmentView.setScaleX(1.0f);
        fragmentView.setScaleY(1.0f);
        ChatAttachAlert chatAttachAlert = this.parentAlert;
        if (chatAttachAlert != null) {
            BottomSheet.ContainerView container = chatAttachAlert.getContainer();
            container.setScaleX(1.0f);
            container.setScaleY(1.0f);
        }
    }

    public void onUserLeaveHint() {
        if (this.pipItem.getAlpha() == 1.0f && AndroidUtilities.checkInlinePermissions(this.parentActivity) && !PipVideoOverlay.isVisible() && this.isPlaying) {
            if (this.isEmbedVideo) {
                PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
                if (photoViewerWebView == null || photoViewerWebView.isInAppOnly() || !this.photoViewerWebView.openInPip()) {
                    return;
                }
                this.pipVideoOverlayAnimateFlag = false;
                if (PipInstance != null) {
                    PipInstance.destroyPhotoViewer();
                }
                this.isInline = true;
                PipInstance = Instance;
                Instance = null;
                this.isVisible = false;
                PlaceProviderObject placeProviderObject = this.currentPlaceObject;
                if (placeProviderObject != null && !placeProviderObject.imageReceiver.getVisible()) {
                    this.currentPlaceObject.imageReceiver.setVisible(true, true);
                }
                this.clippingImageProgress = 1.0f;
                this.containerView.invalidate();
                dismissInternal();
                return;
            }
            this.pipVideoOverlayAnimateFlag = false;
            switchToPip(false);
        }
    }

    public void updateVideoSeekPreviewPosition() {
        int thumbX = (this.videoPlayerSeekbar.getThumbX() + AndroidUtilities.dp(2.0f)) - (this.videoPreviewFrame.getMeasuredWidth() / 2);
        int dp = AndroidUtilities.dp(10.0f);
        int measuredWidth = (this.videoPlayerControlFrameLayout.getMeasuredWidth() - AndroidUtilities.dp(10.0f)) - (this.videoPreviewFrame.getMeasuredWidth() / 2);
        if (thumbX < dp) {
            VideoSeekPreviewImage videoSeekPreviewImage = this.videoPreviewFrame;
            videoSeekPreviewImage.setPivotX(Utilities.clamp((videoSeekPreviewImage.getMeasuredWidth() / 2.0f) - (dp - thumbX), this.videoPreviewFrame.getMeasuredWidth(), 0.0f));
            thumbX = dp;
        } else if (thumbX >= measuredWidth) {
            VideoSeekPreviewImage videoSeekPreviewImage2 = this.videoPreviewFrame;
            videoSeekPreviewImage2.setPivotX(Utilities.clamp((videoSeekPreviewImage2.getMeasuredWidth() / 2.0f) + (thumbX - measuredWidth), this.videoPreviewFrame.getMeasuredWidth(), 0.0f));
            thumbX = measuredWidth;
        } else {
            VideoSeekPreviewImage videoSeekPreviewImage3 = this.videoPreviewFrame;
            videoSeekPreviewImage3.setPivotX(videoSeekPreviewImage3.getMeasuredWidth() / 2.0f);
        }
        this.videoPreviewFrame.setTranslationX(thumbX);
    }

    public void showVideoSeekPreviewPosition(boolean z) {
        PhotoViewerWebView photoViewerWebView;
        if (!z || this.videoPreviewFrame.getTag() == null) {
            if (z || this.videoPreviewFrame.getTag() != null) {
                if (z && !this.videoPreviewFrame.isReady() && ((photoViewerWebView = this.photoViewerWebView) == null || !photoViewerWebView.isYouTube() || !this.photoViewerWebView.hasYoutubeStoryboards())) {
                    this.needShowOnReady = true;
                    return;
                }
                AnimatorSet animatorSet = this.videoPreviewFrameAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                this.videoPreviewFrame.setTag(z ? 1 : null);
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.videoPreviewFrameAnimation = animatorSet2;
                Animator[] animatorArr = new Animator[4];
                VideoSeekPreviewImage videoSeekPreviewImage = this.videoPreviewFrame;
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = z ? 1.0f : 0.0f;
                animatorArr[0] = ObjectAnimator.ofFloat(videoSeekPreviewImage, property, fArr);
                VideoSeekPreviewImage videoSeekPreviewImage2 = this.videoPreviewFrame;
                Property property2 = View.SCALE_X;
                float[] fArr2 = new float[1];
                fArr2[0] = z ? 1.0f : 0.5f;
                animatorArr[1] = ObjectAnimator.ofFloat(videoSeekPreviewImage2, property2, fArr2);
                VideoSeekPreviewImage videoSeekPreviewImage3 = this.videoPreviewFrame;
                Property property3 = View.SCALE_Y;
                float[] fArr3 = new float[1];
                fArr3[0] = z ? 1.0f : 0.5f;
                animatorArr[2] = ObjectAnimator.ofFloat(videoSeekPreviewImage3, property3, fArr3);
                VideoSeekPreviewImage videoSeekPreviewImage4 = this.videoPreviewFrame;
                Property property4 = View.TRANSLATION_Y;
                float[] fArr4 = new float[1];
                fArr4[0] = z ? 0.0f : AndroidUtilities.dp(12.0f);
                animatorArr[3] = ObjectAnimator.ofFloat(videoSeekPreviewImage4, property4, fArr4);
                animatorSet2.playTogether(animatorArr);
                this.videoPreviewFrameAnimation.setDuration(380L);
                this.videoPreviewFrameAnimation.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                this.videoPreviewFrameAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.44
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.videoPreviewFrameAnimation = null;
                    }
                });
                this.videoPreviewFrameAnimation.start();
            }
        }
    }

    private void createVideoControlsInterface() {
        VideoPlayerControlFrameLayout videoPlayerControlFrameLayout = new VideoPlayerControlFrameLayout(this.containerView.getContext());
        this.videoPlayerControlFrameLayout = videoPlayerControlFrameLayout;
        this.containerView.addView(videoPlayerControlFrameLayout, LayoutHelper.createFrame(-1, 48, 83));
        final VideoPlayerSeekBar.SeekBarDelegate seekBarDelegate = new VideoPlayerSeekBar.SeekBarDelegate() { // from class: org.telegram.ui.PhotoViewer.45
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.VideoPlayerSeekBar.SeekBarDelegate
            public void onSeekBarDrag(float f) {
                if (PhotoViewer.this.videoPlayer != null || (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable())) {
                    if (!PhotoViewer.this.inPreview && PhotoViewer.this.videoTimelineViewContainer.getVisibility() == 0) {
                        f = PhotoViewer.this.videoTimelineView.getLeftProgress() + ((PhotoViewer.this.videoTimelineView.getRightProgress() - PhotoViewer.this.videoTimelineView.getLeftProgress()) * f);
                    }
                    long videoDuration = PhotoViewer.this.getVideoDuration();
                    if (videoDuration == -9223372036854775807L) {
                        PhotoViewer.this.seekToProgressPending = f;
                    } else {
                        PhotoViewer.this.seekVideoOrWebTo((int) (f * ((float) videoDuration)));
                    }
                    PhotoViewer.this.showVideoSeekPreviewPosition(false);
                    PhotoViewer.this.needShowOnReady = false;
                }
            }

            @Override // org.telegram.ui.Components.VideoPlayerSeekBar.SeekBarDelegate
            public void onSeekBarContinuousDrag(float f) {
                if (PhotoViewer.this.photoViewerWebView == null || !PhotoViewer.this.photoViewerWebView.isYouTube() || PhotoViewer.this.videoPreviewFrame == null) {
                    if (PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPreviewFrame != null) {
                        PhotoViewer.this.videoPreviewFrame.setProgress(f, PhotoViewer.this.videoPlayerSeekbar.getWidth());
                    }
                } else {
                    PhotoViewer.this.videoPreviewFrame.setProgressForYouTube(PhotoViewer.this.photoViewerWebView, f, PhotoViewer.this.videoPlayerSeekbar.getWidth());
                }
                PhotoViewer.this.showVideoSeekPreviewPosition(true);
                PhotoViewer.this.updateVideoSeekPreviewPosition();
            }
        };
        FloatSeekBarAccessibilityDelegate floatSeekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.PhotoViewer.46
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                return PhotoViewer.this.videoPlayerSeekbar.getProgress();
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                seekBarDelegate.onSeekBarDrag(f);
                PhotoViewer.this.videoPlayerSeekbar.setProgress(f);
                PhotoViewer.this.videoPlayerSeekbarView.invalidate();
            }

            @Override // org.telegram.ui.Components.SeekBarAccessibilityDelegate
            public String getContentDescription(View view) {
                return LocaleController.formatString("AccDescrPlayerDuration", R.string.AccDescrPlayerDuration, LocaleController.formatPluralString("Minutes", PhotoViewer.this.videoPlayerCurrentTime[0], new Object[0]) + ' ' + LocaleController.formatPluralString("Seconds", PhotoViewer.this.videoPlayerCurrentTime[1], new Object[0]), LocaleController.formatPluralString("Minutes", PhotoViewer.this.videoPlayerTotalTime[0], new Object[0]) + ' ' + LocaleController.formatPluralString("Seconds", PhotoViewer.this.videoPlayerTotalTime[1], new Object[0]));
            }
        };
        View view = new View(this.containerView.getContext()) { // from class: org.telegram.ui.PhotoViewer.47
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            protected void onDraw(Canvas canvas) {
                PhotoViewer.this.videoPlayerSeekbar.draw(canvas, this);
            }
        };
        this.videoPlayerSeekbarView = view;
        view.setAccessibilityDelegate(floatSeekBarAccessibilityDelegate);
        this.videoPlayerSeekbarView.setImportantForAccessibility(1);
        this.videoPlayerControlFrameLayout.addView(this.videoPlayerSeekbarView, LayoutHelper.createFrame(-1, -1.0f));
        VideoPlayerSeekBar videoPlayerSeekBar = new VideoPlayerSeekBar(this.videoPlayerSeekbarView);
        this.videoPlayerSeekbar = videoPlayerSeekBar;
        videoPlayerSeekBar.setHorizontalPadding(AndroidUtilities.dp(2.0f));
        this.videoPlayerSeekbar.setColors(872415231, 872415231, -1, -1, -1, 1509949439);
        this.videoPlayerSeekbar.setDelegate(seekBarDelegate);
        VideoSeekPreviewImage videoSeekPreviewImage = new VideoSeekPreviewImage(this.containerView.getContext(), new VideoSeekPreviewImage.VideoSeekPreviewImageDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda123
            @Override // org.telegram.ui.Components.VideoSeekPreviewImage.VideoSeekPreviewImageDelegate
            public final void onReady() {
                PhotoViewer.this.lambda$createVideoControlsInterface$58();
            }
        }) { // from class: org.telegram.ui.PhotoViewer.48
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
                super.onLayout(z, i, i2, i3, i4);
                PhotoViewer.this.updateVideoSeekPreviewPosition();
            }

            @Override // android.view.View
            public void setVisibility(int i) {
                super.setVisibility(i);
                if (i == 0) {
                    PhotoViewer.this.updateVideoSeekPreviewPosition();
                }
            }
        };
        this.videoPreviewFrame = videoSeekPreviewImage;
        videoSeekPreviewImage.setAlpha(0.0f);
        this.containerView.addView(this.videoPreviewFrame, LayoutHelper.createFrame(-2, -2.0f, 83, 0.0f, 0.0f, 0.0f, 58.0f));
        SimpleTextView simpleTextView = new SimpleTextView(this.containerView.getContext());
        this.videoPlayerTime = simpleTextView;
        simpleTextView.setTextColor(-1);
        this.videoPlayerTime.setGravity(53);
        this.videoPlayerTime.setTextSize(14);
        this.videoPlayerTime.setImportantForAccessibility(2);
        this.videoPlayerControlFrameLayout.addView(this.videoPlayerTime, LayoutHelper.createFrame(-2, -2.0f, 53, 0.0f, 15.0f, 12.0f, 0.0f));
        ImageView imageView = new ImageView(this.containerView.getContext());
        this.exitFullscreenButton = imageView;
        imageView.setImageResource(R.drawable.msg_minvideo);
        this.exitFullscreenButton.setContentDescription(LocaleController.getString("AccExitFullscreen", R.string.AccExitFullscreen));
        this.exitFullscreenButton.setScaleType(ImageView.ScaleType.CENTER);
        this.exitFullscreenButton.setBackground(Theme.createSelectorDrawable(1090519039));
        this.exitFullscreenButton.setVisibility(4);
        this.videoPlayerControlFrameLayout.addView(this.exitFullscreenButton, LayoutHelper.createFrame(48, 48, 53));
        this.exitFullscreenButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda53
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$createVideoControlsInterface$59(view2);
            }
        });
    }

    public /* synthetic */ void lambda$createVideoControlsInterface$58() {
        if (this.needShowOnReady) {
            showVideoSeekPreviewPosition(true);
        }
    }

    public /* synthetic */ void lambda$createVideoControlsInterface$59(View view) {
        Activity activity = this.parentActivity;
        if (activity == null) {
            return;
        }
        this.wasRotated = false;
        this.fullscreenedByButton = 2;
        if (this.prevOrientation == -10) {
            this.prevOrientation = activity.getRequestedOrientation();
        }
        this.parentActivity.setRequestedOrientation(1);
    }

    /* JADX WARN: Code restructure failed: missing block: B:35:0x0067, code lost:
        if (r4 != null) goto L6;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int[] fixVideoWidthHeight(int i, int i2) {
        int[] iArr = {i, i2};
        if (Build.VERSION.SDK_INT >= 21) {
            MediaCodec mediaCodec = null;
            try {
                mediaCodec = MediaCodec.createEncoderByType(MediaController.VIDEO_MIME_TYPE);
                MediaCodecInfo.VideoCapabilities videoCapabilities = mediaCodec.getCodecInfo().getCapabilitiesForType(MediaController.VIDEO_MIME_TYPE).getVideoCapabilities();
                Range<Integer> supportedWidths = videoCapabilities.getSupportedWidths();
                Range<Integer> supportedHeights = videoCapabilities.getSupportedHeights();
                iArr[0] = Math.max(supportedWidths.getLower().intValue(), Math.round(i / 16.0f) * 16);
                iArr[1] = Math.max(supportedHeights.getLower().intValue(), Math.round(i2 / 16.0f) * 16);
            } catch (Exception unused) {
            } catch (Throwable th) {
                if (mediaCodec != null) {
                    try {
                        mediaCodec.release();
                    } catch (Exception unused2) {
                    }
                }
                throw th;
            }
            try {
                mediaCodec.release();
            } catch (Exception unused3) {
            }
        }
        return iArr;
    }

    public VideoEditedInfo getCurrentVideoEditedInfo() {
        int i;
        long j;
        boolean z = false;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = null;
        if (!this.isCurrentVideo && hasAnimatedMediaEntities() && this.centerImage.getBitmapWidth() > 0) {
            float f = 854.0f;
            int i2 = this.sendPhotoType;
            if (i2 == 1) {
                f = 800.0f;
            } else if (i2 == 11) {
                f = 500.0f;
            }
            VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
            videoEditedInfo.startTime = 0L;
            videoEditedInfo.start = (float) 0;
            videoEditedInfo.endTime = Math.min(3000L, this.editState.averageDuration);
            while (true) {
                j = videoEditedInfo.endTime;
                if (j <= 0 || j >= 1000) {
                    break;
                }
                videoEditedInfo.endTime = j * 2;
            }
            videoEditedInfo.end = (float) j;
            videoEditedInfo.compressQuality = this.selectedCompression;
            videoEditedInfo.rotationValue = 0;
            videoEditedInfo.originalPath = this.currentImagePath;
            long j2 = videoEditedInfo.endTime;
            videoEditedInfo.estimatedSize = (int) ((((float) j2) / 1000.0f) * 115200.0f);
            videoEditedInfo.estimatedDuration = j2;
            videoEditedInfo.framerate = 30;
            videoEditedInfo.originalDuration = j2;
            EditState editState = this.editState;
            videoEditedInfo.filterState = editState.savedFilterState;
            String str = editState.croppedPaintPath;
            if (str != null) {
                videoEditedInfo.paintPath = str;
                ArrayList<VideoEditedInfo.MediaEntity> arrayList2 = editState.croppedMediaEntities;
                if (arrayList2 != null && !arrayList2.isEmpty()) {
                    arrayList = this.editState.croppedMediaEntities;
                }
                videoEditedInfo.mediaEntities = arrayList;
            } else {
                videoEditedInfo.paintPath = editState.paintPath;
                videoEditedInfo.mediaEntities = editState.mediaEntities;
            }
            videoEditedInfo.isPhoto = true;
            int bitmapWidth = this.centerImage.getBitmapWidth();
            int bitmapHeight = this.centerImage.getBitmapHeight();
            MediaController.CropState cropState = this.editState.cropState;
            if (cropState != null) {
                int i3 = cropState.transformRotation;
                if (i3 == 90 || i3 == 270) {
                    bitmapHeight = bitmapWidth;
                    bitmapWidth = bitmapHeight;
                }
                bitmapWidth = (int) (bitmapWidth * cropState.cropPw);
                bitmapHeight = (int) (bitmapHeight * cropState.cropPh);
            }
            int i4 = this.sendPhotoType;
            if (i4 == 1 || i4 == 11) {
                bitmapWidth = bitmapHeight;
            }
            float f2 = bitmapWidth;
            float f3 = bitmapHeight;
            float max = Math.max(f2 / f, f3 / f);
            if (max < 1.0f) {
                max = 1.0f;
            }
            int i5 = (int) (f2 / max);
            int i6 = (int) (f3 / max);
            if (i5 % 16 != 0) {
                i5 = Math.max(1, Math.round(i5 / 16.0f)) * 16;
            }
            if (i6 % 16 != 0) {
                i6 = Math.max(1, Math.round(i6 / 16.0f)) * 16;
            }
            videoEditedInfo.resultWidth = i5;
            videoEditedInfo.originalWidth = i5;
            videoEditedInfo.resultHeight = i6;
            videoEditedInfo.originalHeight = i6;
            videoEditedInfo.bitrate = -1;
            videoEditedInfo.muted = true;
            videoEditedInfo.avatarStartTime = 0L;
            return videoEditedInfo;
        } else if (!this.isCurrentVideo || this.currentPlayingVideoFile == null || this.compressionsCount == 0) {
            return null;
        } else {
            VideoEditedInfo videoEditedInfo2 = new VideoEditedInfo();
            videoEditedInfo2.startTime = this.startTime;
            videoEditedInfo2.endTime = this.endTime;
            videoEditedInfo2.start = this.videoCutStart;
            videoEditedInfo2.end = this.videoCutEnd;
            videoEditedInfo2.compressQuality = this.selectedCompression;
            videoEditedInfo2.rotationValue = this.rotationValue;
            videoEditedInfo2.originalWidth = this.originalWidth;
            videoEditedInfo2.originalHeight = this.originalHeight;
            videoEditedInfo2.bitrate = this.bitrate;
            videoEditedInfo2.originalPath = this.currentPathObject;
            long j3 = this.estimatedSize;
            if (j3 == 0) {
                j3 = 1;
            }
            videoEditedInfo2.estimatedSize = j3;
            videoEditedInfo2.estimatedDuration = this.estimatedDuration;
            videoEditedInfo2.framerate = this.videoFramerate;
            videoEditedInfo2.originalDuration = this.videoDuration * 1000.0f;
            EditState editState2 = this.editState;
            videoEditedInfo2.filterState = editState2.savedFilterState;
            String str2 = editState2.croppedPaintPath;
            if (str2 != null) {
                videoEditedInfo2.paintPath = str2;
                ArrayList<VideoEditedInfo.MediaEntity> arrayList3 = editState2.croppedMediaEntities;
                if (arrayList3 != null && !arrayList3.isEmpty()) {
                    arrayList = this.editState.croppedMediaEntities;
                }
                videoEditedInfo2.mediaEntities = arrayList;
            } else {
                videoEditedInfo2.paintPath = editState2.paintPath;
                ArrayList<VideoEditedInfo.MediaEntity> arrayList4 = editState2.mediaEntities;
                if (arrayList4 != null && !arrayList4.isEmpty()) {
                    arrayList = this.editState.mediaEntities;
                }
                videoEditedInfo2.mediaEntities = arrayList;
            }
            if (this.sendPhotoType != 1 && !this.muteVideo && (this.compressItem.getTag() == null || (videoEditedInfo2.resultWidth == this.originalWidth && videoEditedInfo2.resultHeight == this.originalHeight))) {
                videoEditedInfo2.resultWidth = this.originalWidth;
                videoEditedInfo2.resultHeight = this.originalHeight;
                videoEditedInfo2.bitrate = this.muteVideo ? -1 : this.originalBitrate;
            } else {
                if (this.muteVideo || this.sendPhotoType == 1) {
                    this.selectedCompression = 1;
                    updateWidthHeightBitrateForCompression();
                }
                videoEditedInfo2.resultWidth = this.resultWidth;
                videoEditedInfo2.resultHeight = this.resultHeight;
                if (!this.muteVideo && this.sendPhotoType != 1) {
                    r5 = this.bitrate;
                }
                videoEditedInfo2.bitrate = r5;
            }
            MediaController.CropState cropState2 = this.editState.cropState;
            videoEditedInfo2.cropState = cropState2;
            if (cropState2 != null) {
                videoEditedInfo2.rotationValue += cropState2.transformRotation;
                while (true) {
                    i = videoEditedInfo2.rotationValue;
                    if (i < 360) {
                        break;
                    }
                    videoEditedInfo2.rotationValue = i - 360;
                }
                if (i == 90 || i == 270) {
                    MediaController.CropState cropState3 = videoEditedInfo2.cropState;
                    cropState3.transformWidth = (int) (videoEditedInfo2.resultWidth * cropState3.cropPh);
                    cropState3.transformHeight = (int) (videoEditedInfo2.resultHeight * cropState3.cropPw);
                } else {
                    MediaController.CropState cropState4 = videoEditedInfo2.cropState;
                    cropState4.transformWidth = (int) (videoEditedInfo2.resultWidth * cropState4.cropPw);
                    cropState4.transformHeight = (int) (videoEditedInfo2.resultHeight * cropState4.cropPh);
                }
                if (this.sendPhotoType == 1) {
                    MediaController.CropState cropState5 = videoEditedInfo2.cropState;
                    if (cropState5.transformWidth > 800) {
                        cropState5.transformWidth = 800;
                    }
                    if (cropState5.transformHeight > 800) {
                        cropState5.transformHeight = 800;
                    }
                    int min = Math.min(cropState5.transformWidth, cropState5.transformHeight);
                    cropState5.transformHeight = min;
                    cropState5.transformWidth = min;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("original transformed w = " + videoEditedInfo2.cropState.transformWidth + " h = " + videoEditedInfo2.cropState.transformHeight + " r = " + videoEditedInfo2.rotationValue);
                }
                MediaController.CropState cropState6 = videoEditedInfo2.cropState;
                int[] fixVideoWidthHeight = fixVideoWidthHeight(cropState6.transformWidth, cropState6.transformHeight);
                MediaController.CropState cropState7 = videoEditedInfo2.cropState;
                cropState7.transformWidth = fixVideoWidthHeight[0];
                cropState7.transformHeight = fixVideoWidthHeight[1];
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("fixed transformed w = " + videoEditedInfo2.cropState.transformWidth + " h = " + videoEditedInfo2.cropState.transformHeight);
                }
            }
            if (this.sendPhotoType == 1) {
                videoEditedInfo2.avatarStartTime = this.avatarStartTime;
                videoEditedInfo2.originalBitrate = this.originalBitrate;
            }
            videoEditedInfo2.muted = (this.muteVideo || this.sendPhotoType == 1) ? true : true;
            return videoEditedInfo2;
        }
    }

    private boolean supportsSendingNewEntities() {
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        ChatActivity chatActivity = this.parentChatActivity;
        return chatActivity != null && ((tLRPC$EncryptedChat = chatActivity.currentEncryptedChat) == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101);
    }

    public void closeCaptionEnter(boolean z) {
        int i = this.currentIndex;
        if (i < 0 || i >= this.imagesArrLocals.size() || !isCaptionOpen()) {
            return;
        }
        this.imagesArrLocals.get(this.currentIndex);
        if (z) {
            applyCaption();
        }
        this.captionEdit.onBackPressed();
    }

    public CharSequence applyCaption() {
        int i;
        if (!isVisible() || this.placeProvider == null || (i = this.currentIndex) < 0 || i >= this.imagesArrLocals.size()) {
            return null;
        }
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        CharSequence text = this.captionEdit.getText();
        CharSequence[] charSequenceArr = {text};
        if (this.hasCaptionForAllMedia && !TextUtils.equals(this.captionForAllMedia, text) && this.placeProvider.getPhotoIndex(this.currentIndex) != 0 && this.placeProvider.getSelectedCount() > 0) {
            this.hasCaptionForAllMedia = false;
        }
        ArrayList<TLRPC$MessageEntity> entities = MediaDataController.getInstance(this.currentAccount).getEntities(charSequenceArr, supportsSendingNewEntities());
        this.captionForAllMedia = charSequenceArr[0];
        if (obj instanceof MediaController.PhotoEntry) {
            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
            photoEntry.caption = charSequenceArr[0];
            photoEntry.entities = entities;
        } else if (obj instanceof MediaController.SearchImage) {
            MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
            searchImage.caption = charSequenceArr[0];
            searchImage.entities = entities;
        }
        if (text.length() != 0 && !this.placeProvider.isPhotoChecked(this.currentIndex)) {
            setPhotoChecked();
        }
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
            photoViewerProvider.onApplyCaption(text);
        }
        return text;
    }

    public void updateVideoPlayerTime() {
        String format;
        String format2;
        Arrays.fill(this.videoPlayerCurrentTime, 0);
        Arrays.fill(this.videoPlayerTotalTime, 0);
        VideoPlayer videoPlayer = this.videoPlayer;
        long j = 0;
        if (videoPlayer != null) {
            long max = Math.max(0L, videoPlayer.getCurrentPosition());
            if (this.shownControlsByEnd && !this.actionBarWasShownBeforeByEnd) {
                max = 0;
            }
            long max2 = Math.max(0L, this.videoPlayer.getDuration());
            if (!this.inPreview && this.videoTimelineViewContainer.getVisibility() == 0) {
                max2 = ((float) max2) * (this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress());
                max = ((float) max) - (this.videoTimelineView.getLeftProgress() * ((float) max2));
                if (max > max2) {
                    max = max2;
                }
            }
            long j2 = max / 1000;
            long j3 = max2 / 1000;
            int[] iArr = this.videoPlayerCurrentTime;
            iArr[0] = (int) (j2 / 60);
            iArr[1] = (int) (j2 % 60);
            int[] iArr2 = this.videoPlayerTotalTime;
            iArr2[0] = (int) (j3 / 60);
            iArr2[1] = (int) (j3 % 60);
        } else {
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
                long max3 = Math.max(0, this.photoViewerWebView.getCurrentPosition());
                if (!this.shownControlsByEnd || this.actionBarWasShownBeforeByEnd) {
                    j = max3;
                }
                long max4 = Math.max(0, this.photoViewerWebView.getVideoDuration());
                if (!this.inPreview && this.videoTimelineViewContainer.getVisibility() == 0) {
                    max4 = ((float) max4) * (this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress());
                    j = ((float) j) - (this.videoTimelineView.getLeftProgress() * ((float) max4));
                    if (j > max4) {
                        j = max4;
                    }
                }
                long j4 = j / 1000;
                long j5 = max4 / 1000;
                int[] iArr3 = this.videoPlayerCurrentTime;
                iArr3[0] = (int) (j4 / 60);
                iArr3[1] = (int) (j4 % 60);
                int[] iArr4 = this.videoPlayerTotalTime;
                iArr4[0] = (int) (j5 / 60);
                iArr4[1] = (int) (j5 % 60);
            }
        }
        int[] iArr5 = this.videoPlayerCurrentTime;
        if (iArr5[0] >= 60) {
            format = format(iArr5[0] / 60, iArr5[0] % 60, iArr5[1]);
        } else {
            format = format(iArr5[0], iArr5[1]);
        }
        int[] iArr6 = this.videoPlayerTotalTime;
        if (iArr6[0] >= 60) {
            format2 = format(iArr6[0] / 60, iArr6[0] % 60, iArr6[1]);
        } else {
            format2 = format(iArr6[0], iArr6[1]);
        }
        this.videoPlayerTime.setText(format + " / " + format2);
        if (Objects.equals(this.lastControlFrameDuration, format2)) {
            return;
        }
        this.lastControlFrameDuration = format2;
        this.videoPlayerControlFrameLayout.requestLayout();
    }

    private String format(int i, int i2, int i3) {
        char[] cArr = new char[8];
        cArr[0] = (char) (((i >= 100 ? 99 : i) / 10) + 48);
        if (i >= 100) {
            i = 99;
        }
        cArr[1] = (char) ((i % 10) + 48);
        cArr[2] = ':';
        cArr[3] = (char) (((i2 >= 100 ? 99 : i2) / 10) + 48);
        if (i2 >= 100) {
            i2 = 99;
        }
        cArr[4] = (char) ((i2 % 10) + 48);
        cArr[5] = ':';
        cArr[6] = (char) (((i3 >= 100 ? 99 : i3) / 10) + 48);
        if (i3 >= 100) {
            i3 = 99;
        }
        cArr[7] = (char) ((i3 % 10) + 48);
        return new String(cArr);
    }

    private String format(int i, int i2) {
        char[] cArr = new char[5];
        cArr[0] = (char) (((i >= 100 ? 99 : i) / 10) + 48);
        if (i >= 100) {
            i = 99;
        }
        cArr[1] = (char) ((i % 10) + 48);
        cArr[2] = ':';
        cArr[3] = (char) (((i2 >= 100 ? 99 : i2) / 10) + 48);
        if (i2 >= 100) {
            i2 = 99;
        }
        cArr[4] = (char) ((i2 % 10) + 48);
        return new String(cArr);
    }

    private void checkBufferedProgress(float f) {
        MessageObject messageObject;
        TLRPC$Document document;
        if (!this.isStreaming || this.parentActivity == null || this.streamingAlertShown || this.videoPlayer == null || (messageObject = this.currentMessageObject) == null || (document = messageObject.getDocument()) == null || this.currentMessageObject.getDuration() < 20.0d) {
            return;
        }
        boolean z = document.size >= 2147483648L;
        if (!((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 4) != 0) || f >= 0.9f) {
            return;
        }
        long j = document.size;
        if (((float) j) * f >= 5242880.0f || (f >= 0.5f && j >= 2097152)) {
            if (Math.abs(SystemClock.elapsedRealtime() - this.startedPlayTime) >= (z ? 10000 : 3000)) {
                if (this.videoPlayer.getDuration() == -9223372036854775807L) {
                    Toast.makeText(this.parentActivity, LocaleController.getString(R.string.VideoDoesNotSupportStreaming), 1).show();
                }
                this.streamingAlertShown = true;
            }
        }
    }

    public void updateColors() {
        int i = Theme.key_chat_editMediaButton;
        int themedColor = getThemedColor(i);
        ImageView imageView = this.pickerViewSendButton;
        if (imageView != null) {
            Drawable background = imageView.getBackground();
            Theme.setSelectorDrawableColor(background, themedColor, false);
            Theme.setSelectorDrawableColor(background, getThemedColor(Build.VERSION.SDK_INT >= 21 ? Theme.key_dialogFloatingButtonPressed : i), true);
            this.pickerViewSendButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogFloatingIcon), PorterDuff.Mode.MULTIPLY));
        }
        CheckBox checkBox = this.checkImageView;
        if (checkBox != null) {
            checkBox.setColor(getThemedColor(i), -1);
        }
        PorterDuffColorFilter porterDuffColorFilter = new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY);
        ImageView imageView2 = this.paintItem;
        if (imageView2 != null && imageView2.getColorFilter() != null) {
            this.paintItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView3 = this.cropItem;
        if (imageView3 != null && imageView3.getColorFilter() != null) {
            this.cropItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView4 = this.tuneItem;
        if (imageView4 != null && imageView4.getColorFilter() != null) {
            this.tuneItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView5 = this.rotateItem;
        if (imageView5 != null && imageView5.getColorFilter() != null) {
            this.rotateItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView6 = this.mirrorItem;
        if (imageView6 != null && imageView6.getColorFilter() != null) {
            this.mirrorItem.setColorFilter(porterDuffColorFilter);
        }
        PickerBottomLayoutViewer pickerBottomLayoutViewer = this.editorDoneLayout;
        if (pickerBottomLayoutViewer != null) {
            pickerBottomLayoutViewer.doneButton.setTextColor(themedColor);
        }
        PickerBottomLayoutViewer pickerBottomLayoutViewer2 = this.qualityPicker;
        if (pickerBottomLayoutViewer2 != null) {
            pickerBottomLayoutViewer2.doneButton.setTextColor(themedColor);
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.updateColors();
        }
        PhotoFilterView photoFilterView = this.photoFilterView;
        if (photoFilterView != null) {
            photoFilterView.updateColors();
        }
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer != null) {
            captionPhotoViewer.updateColors(this.resourcesProvider);
        }
        VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
        if (videoTimelinePlayView != null) {
            videoTimelinePlayView.invalidate();
        }
        SelectedPhotosListView selectedPhotosListView = this.selectedPhotosListView;
        if (selectedPhotosListView != null) {
            int childCount = selectedPhotosListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.selectedPhotosListView.getChildAt(i2);
                if (childAt instanceof PhotoPickerPhotoCell) {
                    ((PhotoPickerPhotoCell) childAt).updateColors();
                }
            }
        }
        StickersAlert stickersAlert = this.masksAlert;
        if (stickersAlert != null) {
            stickersAlert.updateColors(true);
        }
    }

    public void injectVideoPlayer(VideoPlayer videoPlayer) {
        this.injectingVideoPlayer = videoPlayer;
    }

    public void injectVideoPlayerSurface(SurfaceTexture surfaceTexture) {
        this.injectingVideoPlayerSurface = surfaceTexture;
    }

    public boolean isInjectingVideoPlayer() {
        return this.injectingVideoPlayer != null;
    }

    public void scheduleActionBarHide() {
        scheduleActionBarHide(3000);
    }

    private void scheduleActionBarHide(int i) {
        if (isAccessibilityEnabled()) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
        AndroidUtilities.runOnUIThread(this.hideActionBarRunnable, i);
    }

    private boolean isAccessibilityEnabled() {
        try {
            AccessibilityManager accessibilityManager = (AccessibilityManager) this.activityContext.getSystemService("accessibility");
            if (accessibilityManager.isEnabled()) {
                return accessibilityManager.isTouchExplorationEnabled();
            }
            return false;
        } catch (Exception e) {
            FileLog.e(e);
            return false;
        }
    }

    public void updateWebPlayerState(boolean z, int i) {
        updatePlayerState(z, i);
    }

    public void updatePlayerState(boolean z, int i) {
        VideoPlayer videoPlayer;
        MessageObject messageObject;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$WebPage tLRPC$WebPage;
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            PhotoViewerWebView photoViewerWebView2 = this.photoViewerWebView;
            if (photoViewerWebView2 != null && photoViewerWebView2.isControllable() && !z) {
                toggleActionBar(true, true);
            }
            PhotoViewerWebView photoViewerWebView3 = this.photoViewerWebView;
            float f = 0.0f;
            if (photoViewerWebView3 != null && photoViewerWebView3.isControllable() && i == 3 && getVideoDuration() >= 10000 && this.shouldSavePositionForCurrentVideo == null && this.shouldSavePositionForCurrentVideoShortTerm == null) {
                if (this.currentMessageObject != null) {
                    long videoDuration = getVideoDuration() / 1000;
                    TLRPC$Message tLRPC$Message = this.currentMessageObject.messageOwner;
                    String str = (tLRPC$Message == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null || (tLRPC$WebPage = tLRPC$MessageMedia.webpage) == null) ? null : tLRPC$WebPage.url;
                    if (!TextUtils.isEmpty(str)) {
                        if (videoDuration >= 600) {
                            if (this.currentMessageObject.forceSeekTo < 0.0f) {
                                float f2 = ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).getFloat(str, -1.0f);
                                if (f2 > 0.0f && f2 < 0.999f) {
                                    this.currentMessageObject.forceSeekTo = f2;
                                    this.videoPlayerSeekbar.setProgress(f2);
                                }
                            }
                            this.shouldSavePositionForCurrentVideo = str;
                        } else if (videoDuration >= 10) {
                            SavedVideoPosition savedVideoPosition = null;
                            for (int size = this.savedVideoPositions.size() - 1; size >= 0; size--) {
                                SavedVideoPosition valueAt = this.savedVideoPositions.valueAt(size);
                                if (valueAt.timestamp < SystemClock.elapsedRealtime() - 5000) {
                                    this.savedVideoPositions.removeAt(size);
                                } else if (savedVideoPosition == null && this.savedVideoPositions.keyAt(size).equals(str)) {
                                    savedVideoPosition = valueAt;
                                }
                            }
                            MessageObject messageObject2 = this.currentMessageObject;
                            if (messageObject2.forceSeekTo < 0.0f && savedVideoPosition != null) {
                                float f3 = savedVideoPosition.position;
                                if (f3 > 0.0f && f3 < 0.999f) {
                                    messageObject2.forceSeekTo = f3;
                                    this.videoPlayerSeekbar.setProgress(f3);
                                }
                            }
                            this.shouldSavePositionForCurrentVideoShortTerm = str;
                        }
                    }
                }
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3 != null) {
                    float f4 = messageObject3.forceSeekTo;
                    if (f4 >= 0.0f) {
                        seekVideoOrWebToProgress(f4);
                        this.currentMessageObject.forceSeekTo = -1.0f;
                    }
                }
            }
            if (this.isStreaming) {
                if (i != 2 || !this.skipFirstBufferingProgress) {
                    boolean z2 = this.seekToProgressPending != 0.0f || i == 2;
                    if (z2) {
                        AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
                    } else {
                        scheduleActionBarHide();
                    }
                    toggleMiniProgress(z2, true);
                } else if (z) {
                    this.skipFirstBufferingProgress = false;
                }
            }
            AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            if (aspectRatioFrameLayout != null) {
                aspectRatioFrameLayout.setKeepScreenOn((!z || i == 4 || i == 1) ? false : true);
            }
            if (z && i != 4 && i != 1) {
                try {
                    this.parentActivity.getWindow().addFlags(128);
                    this.keepScreenOnFlagSet = true;
                } catch (Exception e) {
                    FileLog.e(e);
                }
            } else {
                try {
                    this.parentActivity.getWindow().clearFlags(128);
                    this.keepScreenOnFlagSet = false;
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
            if (i == 3 || i == 1) {
                if (this.currentMessageObject != null && (videoPlayer = this.videoPlayer) != null) {
                    this.videoPreviewFrame.open(videoPlayer.getCurrentUri());
                }
                float f5 = this.seekToProgressPending;
                if (f5 != 0.0f) {
                    seekVideoOrWebToProgress(f5);
                    this.seekToProgressPending = 0.0f;
                    MessageObject messageObject4 = this.currentMessageObject;
                    if (messageObject4 != null && !FileLoader.getInstance(messageObject4.currentAccount).isLoadingVideoAny(this.currentMessageObject.getDocument())) {
                        this.skipFirstBufferingProgress = true;
                    }
                }
            }
            if (i == 3) {
                AspectRatioFrameLayout aspectRatioFrameLayout2 = this.aspectRatioFrameLayout;
                if (aspectRatioFrameLayout2 != null && aspectRatioFrameLayout2.getVisibility() != 0) {
                    this.aspectRatioFrameLayout.setVisibility(0);
                }
                if (!this.pipItem.isEnabled() && this.pipItem.getVisibility() == 0) {
                    this.pipAvailable = true;
                    this.pipItem.setEnabled(true);
                    this.pipItem.animate().alpha(1.0f).setDuration(175L).withEndAction(null).start();
                }
                this.playerWasReady = true;
                MessageObject messageObject5 = this.currentMessageObject;
                if (messageObject5 != null && messageObject5.isVideo()) {
                    AndroidUtilities.cancelRunOnUIThread(this.setLoadingRunnable);
                    FileLoader.getInstance(this.currentMessageObject.currentAccount).removeLoadingVideo(this.currentMessageObject.getDocument(), true, false);
                }
            } else if (i == 2 && z && (messageObject = this.currentMessageObject) != null && messageObject.isVideo()) {
                if (this.playerWasReady) {
                    this.setLoadingRunnable.run();
                } else {
                    AndroidUtilities.runOnUIThread(this.setLoadingRunnable, 1000L);
                }
            }
            VideoPlayer videoPlayer2 = this.videoPlayer;
            if (videoPlayer2 == null ? this.photoViewerWebView.isPlaying() : videoPlayer2.isPlaying()) {
                if (i != 4) {
                    if (!this.isPlaying) {
                        this.isPlaying = true;
                        this.photoProgressViews[0].setBackgroundState(this.isCurrentVideo ? -1 : 4, false, true);
                        PhotoProgressView photoProgressView = this.photoProgressViews[0];
                        if (this.isCurrentVideo || ((isAccessibilityEnabled() && !this.playerWasPlaying) || ((!this.playerAutoStarted || this.playerWasPlaying) && this.isActionBarVisible))) {
                            f = 1.0f;
                        }
                        photoProgressView.setIndexedAlpha(1, f, false);
                        this.playerWasPlaying = true;
                        AndroidUtilities.runOnUIThread(this.updateProgressRunnable);
                    }
                    PipVideoOverlay.updatePlayButton();
                    this.videoPlayerSeekbar.updateTimestamps(this.currentMessageObject, getVideoDuration());
                    updateVideoPlayerTime();
                }
            }
            if (this.isPlaying || i == 4) {
                if (this.currentEditMode != 3) {
                    this.photoProgressViews[0].setIndexedAlpha(1, 1.0f, i == 4);
                    PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
                    photoProgressViewArr[0].setBackgroundState(3, false, photoProgressViewArr[0].animAlphas[1] > 0.0f);
                }
                this.isPlaying = false;
                AndroidUtilities.cancelRunOnUIThread(this.updateProgressRunnable);
                if (i == 4) {
                    if (this.isCurrentVideo) {
                        if (!this.videoTimelineView.isDragging()) {
                            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
                            videoTimelinePlayView.setProgress(videoTimelinePlayView.getLeftProgress());
                            if (!this.inPreview && (this.currentEditMode != 0 || this.videoTimelineViewContainer.getVisibility() == 0)) {
                                seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                            } else {
                                seekVideoOrWebToProgress(0.0f);
                            }
                            this.manuallyPaused = false;
                            cancelVideoPlayRunnable();
                            if (this.sendPhotoType != 1 && this.currentEditMode == 0 && this.switchingToMode <= 0) {
                                pauseVideoOrWeb();
                            } else {
                                playVideoOrWeb();
                            }
                            this.containerView.invalidate();
                        }
                    } else {
                        this.videoPlayerSeekbar.setProgress(0.0f);
                        this.videoPlayerSeekbarView.invalidate();
                        if (!this.inPreview && this.videoTimelineViewContainer.getVisibility() == 0) {
                            seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                        } else {
                            seekVideoOrWebToProgress(0.0f);
                        }
                        this.manuallyPaused = false;
                        pauseVideoOrWeb();
                        if (!this.isActionBarVisible) {
                            toggleActionBar(true, true);
                        }
                    }
                    PipVideoOverlay.onVideoCompleted();
                }
            }
            PipVideoOverlay.updatePlayButton();
            this.videoPlayerSeekbar.updateTimestamps(this.currentMessageObject, getVideoDuration());
            updateVideoPlayerTime();
        }
    }

    public void playVideoOrWeb() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.play();
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.playVideo();
        }
    }

    public void pauseVideoOrWeb() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.pause();
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.pauseVideo();
        }
    }

    private void seekVideoOrWebToProgress(float f) {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.seekTo(f * ((float) videoPlayer.getDuration()));
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.seekTo(f * photoViewerWebView.getVideoDuration());
        }
    }

    private void preparePlayer(Uri uri, boolean z, boolean z2) {
        preparePlayer(uri, z, z2, null);
    }

    private void preparePlayer(Uri uri, boolean z, boolean z2, MediaController.SavedFilterState savedFilterState) {
        boolean z3;
        PageBlocksAdapter pageBlocksAdapter;
        if (!z2) {
            this.currentPlayingVideoFile = uri;
        }
        if (this.parentActivity == null) {
            return;
        }
        this.streamingAlertShown = false;
        this.startedPlayTime = SystemClock.elapsedRealtime();
        this.currentVideoFinishedLoading = false;
        this.lastBufferedPositionCheck = 0L;
        this.firstAnimationDelay = true;
        this.inPreview = z2;
        releasePlayer(false);
        SavedVideoPosition savedVideoPosition = null;
        if (this.imagesArrLocals.isEmpty()) {
            createVideoTextureView(null);
        }
        if (Build.VERSION.SDK_INT >= 21 && this.textureImageView == null) {
            ImageView imageView = new ImageView(this.parentActivity);
            this.textureImageView = imageView;
            imageView.setBackgroundColor(-65536);
            this.textureImageView.setPivotX(0.0f);
            this.textureImageView.setPivotY(0.0f);
            this.textureImageView.setVisibility(4);
            this.containerView.addView(this.textureImageView);
        }
        checkFullscreenButton();
        if (this.orientationEventListener == null) {
            OrientationEventListener orientationEventListener = new OrientationEventListener(ApplicationLoader.applicationContext) { // from class: org.telegram.ui.PhotoViewer.49
                {
                    PhotoViewer.this = this;
                }

                @Override // android.view.OrientationEventListener
                public void onOrientationChanged(int i) {
                    if (PhotoViewer.this.orientationEventListener == null || PhotoViewer.this.aspectRatioFrameLayout == null || PhotoViewer.this.aspectRatioFrameLayout.getVisibility() != 0 || PhotoViewer.this.parentActivity == null || PhotoViewer.this.fullscreenedByButton == 0) {
                        return;
                    }
                    if (PhotoViewer.this.fullscreenedByButton != 1) {
                        if (i <= 0 || (i < 330 && i > 30)) {
                            if (!PhotoViewer.this.wasRotated || i < 240 || i > 300) {
                                return;
                            }
                            PhotoViewer.this.parentActivity.setRequestedOrientation(PhotoViewer.this.prevOrientation);
                            PhotoViewer.this.fullscreenedByButton = 0;
                            PhotoViewer.this.wasRotated = false;
                            return;
                        }
                        PhotoViewer.this.wasRotated = true;
                    } else if (i < 240 || i > 300) {
                        if (!PhotoViewer.this.wasRotated || i <= 0) {
                            return;
                        }
                        if (i >= 330 || i <= 30) {
                            PhotoViewer.this.parentActivity.setRequestedOrientation(PhotoViewer.this.prevOrientation);
                            PhotoViewer.this.fullscreenedByButton = 0;
                            PhotoViewer.this.wasRotated = false;
                        }
                    } else {
                        PhotoViewer.this.wasRotated = true;
                    }
                }
            };
            this.orientationEventListener = orientationEventListener;
            if (orientationEventListener.canDetectOrientation()) {
                this.orientationEventListener.enable();
            } else {
                this.orientationEventListener.disable();
                this.orientationEventListener = null;
            }
        }
        this.textureUploaded = false;
        this.videoSizeSet = false;
        this.videoCrossfadeStarted = false;
        this.playerWasReady = false;
        this.playerWasPlaying = false;
        this.captureFrameReadyAtTime = -1L;
        this.captureFrameAtTime = -1L;
        this.needCaptureFrameReadyAtTime = -1L;
        this.firstFrameRendered = false;
        if (this.videoPlayer == null) {
            VideoPlayer videoPlayer = this.injectingVideoPlayer;
            if (videoPlayer != null) {
                this.videoPlayer = videoPlayer;
                this.injectingVideoPlayer = null;
                this.playerInjected = true;
                updatePlayerState(videoPlayer.getPlayWhenReady(), this.videoPlayer.getPlaybackState());
                z3 = false;
            } else {
                this.videoPlayer = new VideoPlayer() { // from class: org.telegram.ui.PhotoViewer.50
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void play() {
                        super.play();
                        PhotoViewer.this.playOrStopAnimatedStickers(true);
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void pause() {
                        super.pause();
                        if (PhotoViewer.this.currentEditMode == 0) {
                            PhotoViewer.this.playOrStopAnimatedStickers(false);
                        }
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void seekTo(long j) {
                        super.seekTo(j);
                        if (PhotoViewer.this.isCurrentVideo) {
                            PhotoViewer.this.seekAnimatedStickersTo(j);
                        }
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer, com.google.android.exoplayer2.Player.Listener
                    public void onRenderedFirstFrame() {
                        super.onRenderedFirstFrame();
                        PhotoViewer.this.firstFrameRendered = true;
                        if (PhotoViewer.this.usedSurfaceView) {
                            PhotoViewer.this.containerView.invalidate();
                        }
                    }
                };
                z3 = true;
            }
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                this.videoPlayer.setTextureView(textureView);
            } else {
                SurfaceView surfaceView = this.videoSurfaceView;
                if (surfaceView != null) {
                    this.videoPlayer.setSurfaceView(surfaceView);
                }
            }
            FirstFrameView firstFrameView = this.firstFrameView;
            if (firstFrameView != null) {
                firstFrameView.clear();
            }
            this.videoPlayer.setDelegate(new 51());
        } else {
            z3 = false;
        }
        if (!this.imagesArrLocals.isEmpty()) {
            createVideoTextureView(savedFilterState);
        }
        this.videoCrossfadeAlpha = 0.0f;
        TextureView textureView2 = this.videoTextureView;
        if (textureView2 != null) {
            textureView2.setAlpha(0.0f);
        }
        SurfaceView surfaceView2 = this.videoSurfaceView;
        if (surfaceView2 != null) {
            surfaceView2.setVisibility(4);
        }
        PaintingOverlay paintingOverlay = this.paintingOverlay;
        if (paintingOverlay != null) {
            paintingOverlay.setAlpha(this.videoCrossfadeAlpha);
        }
        this.shouldSavePositionForCurrentVideo = null;
        this.shouldSavePositionForCurrentVideoShortTerm = null;
        this.lastSaveTime = 0L;
        if (z3) {
            this.seekToProgressPending = this.seekToProgressPending2;
            this.videoPlayerSeekbar.setProgress(0.0f);
            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
            videoTimelinePlayView.setProgress(videoTimelinePlayView.getLeftProgress());
            this.videoPlayerSeekbar.setBufferedProgress(0.0f);
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject != null) {
                int duration = (int) messageObject.getDuration();
                String fileName = this.currentMessageObject.getFileName();
                if (!TextUtils.isEmpty(fileName)) {
                    if (duration >= 600) {
                        if (this.currentMessageObject.forceSeekTo < 0.0f) {
                            float f = ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).getFloat(fileName, -1.0f);
                            if (f > 0.0f && f < 0.999f) {
                                this.currentMessageObject.forceSeekTo = f;
                                this.videoPlayerSeekbar.setProgress(f);
                            }
                        }
                        this.shouldSavePositionForCurrentVideo = fileName;
                    } else if (duration >= 10) {
                        for (int size = this.savedVideoPositions.size() - 1; size >= 0; size--) {
                            SavedVideoPosition valueAt = this.savedVideoPositions.valueAt(size);
                            if (valueAt.timestamp < SystemClock.elapsedRealtime() - 5000) {
                                this.savedVideoPositions.removeAt(size);
                            } else if (savedVideoPosition == null && this.savedVideoPositions.keyAt(size).equals(fileName)) {
                                savedVideoPosition = valueAt;
                            }
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2 != null && messageObject2.forceSeekTo < 0.0f && savedVideoPosition != null) {
                            float f2 = savedVideoPosition.position;
                            if (f2 > 0.0f && f2 < 0.999f) {
                                messageObject2.forceSeekTo = f2;
                                this.videoPlayerSeekbar.setProgress(f2);
                            }
                        }
                        this.shouldSavePositionForCurrentVideoShortTerm = fileName;
                    }
                }
            }
            this.videoPlayer.preparePlayer(uri, "other");
            this.videoPlayer.setPlayWhenReady(z);
        }
        MessageObject messageObject3 = this.currentMessageObject;
        boolean z4 = (messageObject3 != null && messageObject3.getDuration() <= 30.0d) || ((pageBlocksAdapter = this.pageBlocksAdapter) != null && pageBlocksAdapter.isHardwarePlayer(this.currentIndex));
        this.playerLooping = z4;
        this.videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(z4);
        this.videoPlayer.setLooping(this.playerLooping);
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null) {
            float f3 = messageObject4.forceSeekTo;
            if (f3 >= 0.0f) {
                this.seekToProgressPending = f3;
                messageObject4.forceSeekTo = -1.0f;
            }
        }
        TLRPC$BotInlineResult tLRPC$BotInlineResult = this.currentBotInlineResult;
        if (tLRPC$BotInlineResult != null && (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) {
            this.bottomLayout.setVisibility(0);
            this.bottomLayout.setPadding(0, 0, AndroidUtilities.dp(84.0f), 0);
            this.pickerView.setVisibility(8);
        } else {
            this.bottomLayout.setPadding(0, 0, 0, 0);
        }
        if (this.pageBlocksAdapter != null) {
            this.bottomLayout.setVisibility(0);
        }
        PageBlocksAdapter pageBlocksAdapter2 = this.pageBlocksAdapter;
        if (pageBlocksAdapter2 != null && pageBlocksAdapter2.isHardwarePlayer(this.currentIndex) && !this.pageBlocksAdapter.isVideo(this.currentIndex)) {
            setVideoPlayerControlVisible(false, true);
        } else {
            setVideoPlayerControlVisible(!this.isCurrentVideo, true);
        }
        if (!this.isCurrentVideo) {
            scheduleActionBarHide(this.playerAutoStarted ? 3000 : 1000);
        }
        if (this.currentMessageObject != null) {
            this.videoPlayer.setPlaybackSpeed(this.currentVideoSpeed);
        }
        this.inPreview = z2;
    }

    /* loaded from: classes4.dex */
    public class 51 implements VideoPlayer.VideoPlayerDelegate {
        private boolean firstState = true;

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public /* synthetic */ void onSeekFinished(AnalyticsListener.EventTime eventTime) {
            VideoPlayer.VideoPlayerDelegate.-CC.$default$onSeekFinished(this, eventTime);
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public /* synthetic */ void onSeekStarted(AnalyticsListener.EventTime eventTime) {
            VideoPlayer.VideoPlayerDelegate.-CC.$default$onSeekStarted(this, eventTime);
        }

        51() {
            PhotoViewer.this = r1;
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onStateChanged(boolean z, int i) {
            if (this.firstState && PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPlayer.getDuration() != -9223372036854775807L) {
                this.firstState = false;
                if (PhotoViewer.this.imagesArr.isEmpty() && PhotoViewer.this.secureDocuments.isEmpty() && PhotoViewer.this.imagesArrLocations.isEmpty() && !PhotoViewer.this.imagesArrLocals.isEmpty() && PhotoViewer.this.switchingToIndex >= 0 && PhotoViewer.this.switchingToIndex < PhotoViewer.this.imagesArrLocals.size()) {
                    Object obj = PhotoViewer.this.imagesArrLocals.get(PhotoViewer.this.switchingToIndex);
                    if (obj instanceof MediaController.PhotoEntry) {
                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                        if (photoEntry.isVideo && photoEntry.editedInfo != null) {
                            PhotoViewer.this.videoPlayer.seekTo(photoEntry.editedInfo.start * ((float) PhotoViewer.this.videoPlayer.getDuration()));
                            if (PhotoViewer.this.videoTimelineView != null) {
                                PhotoViewer.this.videoTimelineView.setProgress(photoEntry.editedInfo.start);
                            }
                        }
                    }
                }
            }
            PhotoViewer.this.updatePlayerState(z, i);
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onError(VideoPlayer videoPlayer, Exception exc) {
            if (PhotoViewer.this.videoPlayer != videoPlayer) {
                return;
            }
            FileLog.e(exc);
            if (PhotoViewer.this.menuItem.isSubItemVisible(11)) {
                AlertDialog.Builder builder = new AlertDialog.Builder(PhotoViewer.this.parentActivity, PhotoViewer.this.resourcesProvider);
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("CantPlayVideo", R.string.CantPlayVideo));
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$51$$ExternalSyntheticLambda0
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        PhotoViewer.51.this.lambda$onError$0(dialogInterface, i);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                PhotoViewer.this.showAlertDialog(builder);
            }
        }

        public /* synthetic */ void lambda$onError$0(DialogInterface dialogInterface, int i) {
            try {
                AndroidUtilities.openForView(PhotoViewer.this.currentMessageObject, PhotoViewer.this.parentActivity, PhotoViewer.this.resourcesProvider, true);
                PhotoViewer.this.closePhoto(false, false);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onVideoSizeChanged(int i, int i2, int i3, float f) {
            if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                if (i3 == 90 || i3 == 270) {
                    i2 = i;
                    i = i2;
                }
                float f2 = i * f;
                int i4 = (int) f2;
                PhotoViewer.this.videoWidth = i4;
                float f3 = i2;
                PhotoViewer.this.videoHeight = (int) (f * f3);
                PhotoViewer.this.aspectRatioFrameLayout.setAspectRatio(i2 == 0 ? 1.0f : f2 / f3, i3);
                if (PhotoViewer.this.videoTextureView instanceof VideoEditTextureView) {
                    ((VideoEditTextureView) PhotoViewer.this.videoTextureView).setHDRInfo(PhotoViewer.this.videoPlayer.getHDRStaticInfo(null));
                    ((VideoEditTextureView) PhotoViewer.this.videoTextureView).setVideoSize(i4, i2);
                    if (PhotoViewer.this.sendPhotoType == 1) {
                        PhotoViewer.this.setCropBitmap();
                    }
                }
                PhotoViewer.this.videoSizeSet = true;
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onRenderedFirstFrame() {
            if (!PhotoViewer.this.textureUploaded) {
                PhotoViewer.this.textureUploaded = true;
                PhotoViewer.this.containerView.invalidate();
            }
            if (PhotoViewer.this.firstFrameView != null) {
                if (PhotoViewer.this.videoPlayer == null || !PhotoViewer.this.videoPlayer.isLooping()) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$51$$ExternalSyntheticLambda3
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.51.this.lambda$onRenderedFirstFrame$1();
                        }
                    }, 64L);
                }
            }
        }

        public /* synthetic */ void lambda$onRenderedFirstFrame$1() {
            PhotoViewer.this.firstFrameView.updateAlpha();
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onRenderedFirstFrame(AnalyticsListener.EventTime eventTime) {
            if (eventTime.eventPlaybackPositionMs == PhotoViewer.this.needCaptureFrameReadyAtTime) {
                PhotoViewer.this.captureFrameReadyAtTime = eventTime.eventPlaybackPositionMs;
                PhotoViewer.this.needCaptureFrameReadyAtTime = -1L;
                PhotoViewer.this.captureCurrentFrame();
            }
            if (PhotoViewer.this.firstFrameView != null) {
                if (PhotoViewer.this.videoPlayer == null || !PhotoViewer.this.videoPlayer.isLooping()) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$51$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.51.this.lambda$onRenderedFirstFrame$2();
                        }
                    }, 64L);
                }
            }
        }

        public /* synthetic */ void lambda$onRenderedFirstFrame$2() {
            PhotoViewer.this.firstFrameView.updateAlpha();
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public boolean onSurfaceDestroyed(SurfaceTexture surfaceTexture) {
            if (PhotoViewer.this.changingTextureView) {
                PhotoViewer.this.changingTextureView = false;
                if (PhotoViewer.this.isInline) {
                    PhotoViewer.this.waitingForFirstTextureUpload = 1;
                    PhotoViewer.this.changedTextureView.setSurfaceTexture(surfaceTexture);
                    PhotoViewer.this.changedTextureView.setSurfaceTextureListener(PhotoViewer.this.surfaceTextureListener);
                    PhotoViewer.this.changedTextureView.setVisibility(0);
                    return true;
                }
            }
            return false;
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
            PhotoViewer.this.checkChangedTextureView(false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$51$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.51.this.lambda$onSurfaceTextureUpdated$3();
                }
            });
        }

        public /* synthetic */ void lambda$onSurfaceTextureUpdated$3() {
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.checkFromPlayer(PhotoViewer.this.videoPlayer);
            }
        }
    }

    public void checkFullscreenButton() {
        int measuredWidth;
        TextureView textureView;
        int measuredHeight;
        TextureView textureView2;
        float f;
        MessageObject messageObject;
        if (this.imagesArr.isEmpty()) {
            for (int i = 0; i < 3; i++) {
                this.fullscreenButton[i].setVisibility(4);
            }
            return;
        }
        int i2 = 0;
        while (i2 < 3) {
            int i3 = this.currentIndex;
            if (i2 == 1) {
                i3++;
            } else if (i2 == 2) {
                i3--;
            }
            if (i3 < 0 || i3 >= this.imagesArr.size()) {
                this.fullscreenButton[i2].setVisibility(4);
            } else {
                MessageObject messageObject2 = this.imagesArr.get(i3);
                if (!messageObject2.isVideo() && !messageObject2.isYouTubeVideo()) {
                    this.fullscreenButton[i2].setVisibility(4);
                } else {
                    boolean z = messageObject2.isYouTubeVideo() && (messageObject = this.currentMessageObject) != null && messageObject.getId() == messageObject2.getId();
                    if (z) {
                        measuredWidth = messageObject2.messageOwner.media.webpage.embed_width;
                    } else {
                        measuredWidth = (i2 != 0 || (textureView = this.videoTextureView) == null) ? 0 : textureView.getMeasuredWidth();
                    }
                    if (z) {
                        measuredHeight = messageObject2.messageOwner.media.webpage.embed_height;
                    } else {
                        measuredHeight = (i2 != 0 || (textureView2 = this.videoTextureView) == null) ? 0 : textureView2.getMeasuredHeight();
                    }
                    TLRPC$Document document = messageObject2.getDocument();
                    if (document != null) {
                        int size = document.attributes.size();
                        int i4 = 0;
                        while (true) {
                            if (i4 >= size) {
                                break;
                            }
                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute = document.attributes.get(i4);
                            if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeVideo) {
                                measuredWidth = tLRPC$DocumentAttribute.w;
                                measuredHeight = tLRPC$DocumentAttribute.h;
                                break;
                            }
                            i4++;
                        }
                    }
                    Point point = AndroidUtilities.displaySize;
                    if (point.y > point.x && measuredWidth > measuredHeight) {
                        if (this.fullscreenButton[i2].getVisibility() != 0) {
                            this.fullscreenButton[i2].setVisibility(0);
                        }
                        if (this.isActionBarVisible) {
                            this.fullscreenButton[i2].setAlpha(1.0f);
                        }
                        ((FrameLayout.LayoutParams) this.fullscreenButton[i2].getLayoutParams()).topMargin = ((this.containerView.getMeasuredHeight() + ((int) (measuredHeight / (measuredWidth / this.containerView.getMeasuredWidth())))) / 2) - AndroidUtilities.dp(48.0f);
                    } else if (this.fullscreenButton[i2].getVisibility() != 4) {
                        this.fullscreenButton[i2].setVisibility(4);
                    }
                    if (this.imageMoveAnimation != null) {
                        float f2 = this.translationX;
                        f = f2 + ((this.animateToX - f2) * this.animationValue);
                    } else {
                        f = this.translationX;
                    }
                    float f3 = 0.0f;
                    if (i2 != 1) {
                        if (i2 == 2) {
                            f3 = ((-AndroidUtilities.displaySize.x) - AndroidUtilities.dp(15.0f)) + (f - this.maxX);
                        } else {
                            float f4 = this.minX;
                            if (f < f4) {
                                f3 = f - f4;
                            }
                        }
                    }
                    this.fullscreenButton[i2].setTranslationX((f3 + AndroidUtilities.displaySize.x) - AndroidUtilities.dp(48.0f));
                }
            }
            i2++;
        }
    }

    private void createVideoTextureView(final MediaController.SavedFilterState savedFilterState) {
        if (this.videoTextureView != null) {
            return;
        }
        AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.52
            {
                PhotoViewer.this = this;
            }

            @Override // com.google.android.exoplayer2.ui.AspectRatioFrameLayout, android.widget.FrameLayout, android.view.View
            public void onMeasure(int i, int i2) {
                super.onMeasure(i, i2);
                if (PhotoViewer.this.textureImageView != null) {
                    ViewGroup.LayoutParams layoutParams = PhotoViewer.this.textureImageView.getLayoutParams();
                    layoutParams.width = getMeasuredWidth();
                    layoutParams.height = getMeasuredHeight();
                }
                if (PhotoViewer.this.videoTextureView instanceof VideoEditTextureView) {
                    PhotoViewer.this.videoTextureView.setPivotX(PhotoViewer.this.videoTextureView.getMeasuredWidth() / 2);
                    PhotoViewer.this.firstFrameView.setPivotX(PhotoViewer.this.videoTextureView.getMeasuredWidth() / 2);
                } else {
                    if (PhotoViewer.this.videoTextureView != null) {
                        PhotoViewer.this.videoTextureView.setPivotX(0.0f);
                    }
                    if (PhotoViewer.this.videoSurfaceView != null) {
                        PhotoViewer.this.videoSurfaceView.setPivotX(0.0f);
                    }
                    PhotoViewer.this.firstFrameView.setPivotX(0.0f);
                }
                PhotoViewer.this.checkFullscreenButton();
            }

            @Override // android.view.ViewGroup
            protected boolean drawChild(Canvas canvas, View view, long j) {
                if (view == PhotoViewer.this.lastFrameImageView && PhotoViewer.this.skipLastFrameDraw) {
                    return true;
                }
                return super.drawChild(canvas, view, j);
            }
        };
        this.aspectRatioFrameLayout = aspectRatioFrameLayout;
        aspectRatioFrameLayout.setWillNotDraw(false);
        this.aspectRatioFrameLayout.setVisibility(4);
        this.containerView.addView(this.aspectRatioFrameLayout, 0, LayoutHelper.createFrame(-1, -1, 17));
        this.usedSurfaceView = false;
        if (this.imagesArrLocals.isEmpty()) {
            if (this.ALLOW_USE_SURFACE && this.injectingVideoPlayerSurface == null) {
                this.videoSurfaceView = new SurfaceView(this.parentActivity);
                this.usedSurfaceView = true;
            } else {
                this.videoTextureView = new TextureView(this.parentActivity);
            }
        } else {
            VideoEditTextureView videoEditTextureView = new VideoEditTextureView(this.parentActivity, this.videoPlayer);
            this.blurManager.resetBitmap();
            videoEditTextureView.updateUiBlurManager(this.blurManager);
            if (savedFilterState != null) {
                videoEditTextureView.setDelegate(new VideoEditTextureView.VideoEditTextureViewDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda122
                    @Override // org.telegram.ui.Components.VideoEditTextureView.VideoEditTextureViewDelegate
                    public final void onEGLThreadAvailable(FilterGLThread filterGLThread) {
                        PhotoViewer.lambda$createVideoTextureView$60(MediaController.SavedFilterState.this, filterGLThread);
                    }
                });
            }
            this.videoTextureView = videoEditTextureView;
        }
        SurfaceTexture surfaceTexture = this.injectingVideoPlayerSurface;
        if (surfaceTexture != null) {
            this.videoTextureView.setSurfaceTexture(surfaceTexture);
            this.textureUploaded = true;
            this.videoSizeSet = true;
            this.injectingVideoPlayerSurface = null;
        }
        TextureView textureView = this.videoTextureView;
        if (textureView != null) {
            textureView.setPivotX(0.0f);
            this.videoTextureView.setPivotY(0.0f);
            this.videoTextureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1, 17));
        } else {
            this.aspectRatioFrameLayout.addView(this.videoSurfaceView, LayoutHelper.createFrame(-1, -1, 17));
        }
        FirstFrameView firstFrameView = new FirstFrameView(this.parentActivity);
        this.firstFrameView = firstFrameView;
        firstFrameView.setPivotX(0.0f);
        this.firstFrameView.setPivotY(0.0f);
        this.firstFrameView.setScaleType(ImageView.ScaleType.FIT_XY);
        this.aspectRatioFrameLayout.addView(this.firstFrameView, LayoutHelper.createFrame(-1, -1, 17));
        if (this.sendPhotoType == 1) {
            View view = new View(this.parentActivity);
            this.flashView = view;
            view.setBackgroundColor(-1);
            this.flashView.setAlpha(0.0f);
            this.aspectRatioFrameLayout.addView(this.flashView, LayoutHelper.createFrame(-1, -1, 17));
        }
    }

    public static /* synthetic */ void lambda$createVideoTextureView$60(MediaController.SavedFilterState savedFilterState, FilterGLThread filterGLThread) {
        filterGLThread.setFilterGLThreadDelegate(FilterShaders.getFilterShadersDelegate(savedFilterState));
    }

    public void releasePlayer(boolean z) {
        this.usedSurfaceView = false;
        if (this.videoPlayer != null) {
            cancelVideoPlayRunnable();
            AndroidUtilities.cancelRunOnUIThread(this.setLoadingRunnable);
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (this.shouldSavePositionForCurrentVideoShortTerm != null) {
                this.savedVideoPositions.put(this.shouldSavePositionForCurrentVideoShortTerm, new SavedVideoPosition(((float) this.videoPlayer.getCurrentPosition()) / ((float) this.videoPlayer.getDuration()), SystemClock.elapsedRealtime()));
            }
            this.videoPlayer.releasePlayer(true);
            this.videoPlayer = null;
        } else {
            this.playerWasPlaying = false;
        }
        if (this.photoViewerWebView != null) {
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (this.shouldSavePositionForCurrentVideoShortTerm != null) {
                this.savedVideoPositions.put(this.shouldSavePositionForCurrentVideoShortTerm, new SavedVideoPosition(((float) getCurrentVideoPosition()) / ((float) getVideoDuration()), SystemClock.elapsedRealtime()));
            }
        }
        OrientationEventListener orientationEventListener = this.orientationEventListener;
        if (orientationEventListener != null) {
            orientationEventListener.disable();
            this.orientationEventListener = null;
        }
        this.videoPreviewFrame.close();
        toggleMiniProgress(false, false);
        this.pipAvailable = false;
        this.playerInjected = false;
        if (this.pipItem.isEnabled()) {
            this.pipItem.setEnabled(false);
            this.pipItem.animate().alpha(0.5f).setDuration(175L).withEndAction(null).start();
        }
        if (this.keepScreenOnFlagSet) {
            try {
                this.parentActivity.getWindow().clearFlags(128);
                this.keepScreenOnFlagSet = false;
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
        if (aspectRatioFrameLayout != null) {
            try {
                this.containerView.removeView(aspectRatioFrameLayout);
            } catch (Throwable unused) {
            }
            this.aspectRatioFrameLayout = null;
        }
        cancelFlashAnimations();
        this.flashView = null;
        TextureView textureView = this.videoTextureView;
        if (textureView != null) {
            if (textureView instanceof VideoEditTextureView) {
                ((VideoEditTextureView) textureView).release();
            }
            this.videoTextureView = null;
        }
        this.blurManager.resetBitmap();
        if (this.videoSurfaceView != null) {
            this.videoSurfaceView = null;
        }
        if (this.isPlaying) {
            this.isPlaying = false;
            AndroidUtilities.cancelRunOnUIThread(this.updateProgressRunnable);
        }
        if (!z && !this.inPreview && !this.requestingPreview) {
            setVideoPlayerControlVisible(false, true);
        }
        this.photoProgressViews[0].resetAlphas();
    }

    private void setVideoPlayerControlVisible(final boolean z, boolean z2) {
        if (this.videoPlayerControlVisible != z) {
            if (z) {
                this.bottomLayout.setTag(1);
            } else {
                this.bottomLayout.setTag(null);
            }
            Animator animator = this.videoPlayerControlAnimator;
            if (animator != null) {
                animator.cancel();
            }
            this.videoPlayerControlVisible = z;
            if (z2) {
                if (z) {
                    this.videoPlayerControlFrameLayout.setVisibility(0);
                }
                float[] fArr = new float[2];
                fArr[0] = this.videoPlayerControlFrameLayout.getAlpha();
                fArr[1] = z ? 1.0f : 0.0f;
                ValueAnimator ofFloat = ValueAnimator.ofFloat(fArr);
                ofFloat.setDuration(200L);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda11
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$setVideoPlayerControlVisible$61(valueAnimator);
                    }
                });
                ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.53
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator2) {
                        if (z) {
                            return;
                        }
                        PhotoViewer.this.videoPlayerControlFrameLayout.setVisibility(8);
                    }
                });
                this.videoPlayerControlAnimator = ofFloat;
                ofFloat.start();
            } else {
                this.videoPlayerControlFrameLayout.setVisibility(z ? 0 : 8);
                this.videoPlayerControlFrameLayout.setAlpha(z ? 1.0f : 0.0f);
            }
            if (this.allowShare && this.pageBlocksAdapter == null) {
                if (z) {
                    this.menuItem.showSubItem(10);
                } else {
                    this.menuItem.hideSubItem(10);
                }
            }
        }
    }

    public /* synthetic */ void lambda$setVideoPlayerControlVisible$61(ValueAnimator valueAnimator) {
        this.videoPlayerControlFrameLayout.setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    private void updateCaptionTextForCurrentPhoto(Object obj) {
        CharSequence charSequence;
        if (this.hasCaptionForAllMedia) {
            charSequence = this.captionForAllMedia;
        } else if (obj instanceof MediaController.PhotoEntry) {
            charSequence = ((MediaController.PhotoEntry) obj).caption;
        } else {
            charSequence = (!(obj instanceof TLRPC$BotInlineResult) && (obj instanceof MediaController.SearchImage)) ? ((MediaController.SearchImage) obj).caption : null;
        }
        if (TextUtils.isEmpty(charSequence)) {
            this.captionEdit.setText("");
        } else {
            this.captionEdit.setText(AnimatedEmojiSpan.cloneSpans(charSequence, 3));
        }
        this.captionEdit.editText.getEditText().setAllowTextEntitiesIntersection(supportsSendingNewEntities());
    }

    public void showAlertDialog(AlertDialog.Builder builder) {
        if (this.parentActivity == null) {
            return;
        }
        try {
            AlertDialog alertDialog = this.visibleDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
                this.visibleDialog = null;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        try {
            AlertDialog show = builder.show();
            this.visibleDialog = show;
            show.setCanceledOnTouchOutside(true);
            this.visibleDialog.setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda24
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    PhotoViewer.this.lambda$showAlertDialog$62(dialogInterface);
                }
            });
        } catch (Exception e2) {
            FileLog.e(e2);
        }
    }

    public /* synthetic */ void lambda$showAlertDialog$62(DialogInterface dialogInterface) {
        this.visibleDialog = null;
    }

    private void mergeImages(String str, String str2, Bitmap bitmap, Bitmap bitmap2, float f, boolean z) {
        boolean z2;
        if (bitmap == null) {
            try {
                bitmap = BitmapFactory.decodeFile(str2);
                z2 = true;
            } catch (Throwable th) {
                FileLog.e(th);
                return;
            }
        } else {
            z2 = false;
        }
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        float f2 = width;
        if (f2 > f || height > f) {
            float max = Math.max(width, height) / f;
            height = (int) (height / max);
            width = (int) (f2 / max);
        }
        Bitmap createBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(createBitmap);
        Rect rect = new Rect(0, 0, width, height);
        if (z) {
            canvas.drawBitmap(bitmap2, (Rect) null, rect, this.bitmapPaint);
            canvas.drawBitmap(bitmap, (Rect) null, rect, this.bitmapPaint);
        } else {
            canvas.drawBitmap(bitmap, (Rect) null, rect, this.bitmapPaint);
            canvas.drawBitmap(bitmap2, (Rect) null, rect, this.bitmapPaint);
        }
        FileOutputStream fileOutputStream = new FileOutputStream(new File(str));
        createBitmap.compress(getCompressFormat(), f == 512.0f ? 83 : 87, fileOutputStream);
        try {
            fileOutputStream.close();
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (z2) {
            bitmap.recycle();
        }
        createBitmap.recycle();
    }

    public void seekAnimatedStickersTo(long j) {
        RLottieDrawable lottieAnimation;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                VideoEditedInfo.MediaEntity mediaEntity = this.editState.mediaEntities.get(i);
                if (mediaEntity.type == 0 && (mediaEntity.subType & 1) != 0) {
                    View view = mediaEntity.view;
                    if ((view instanceof BackupImageView) && (lottieAnimation = ((BackupImageView) view).getImageReceiver().getLottieAnimation()) != null) {
                        long j2 = this.startTime;
                        lottieAnimation.setProgressMs(j - (j2 > 0 ? j2 / 1000 : 0L));
                    }
                }
            }
        }
    }

    public void playOrStopAnimatedStickers(boolean z) {
        RLottieDrawable lottieAnimation;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                VideoEditedInfo.MediaEntity mediaEntity = this.editState.mediaEntities.get(i);
                if (mediaEntity.type == 0 && (mediaEntity.subType & 1) != 0) {
                    View view = mediaEntity.view;
                    if ((view instanceof BackupImageView) && (lottieAnimation = ((BackupImageView) view).getImageReceiver().getLottieAnimation()) != null) {
                        if (z) {
                            lottieAnimation.start();
                        } else {
                            lottieAnimation.stop();
                        }
                    }
                }
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:36:0x0024, code lost:
        if ((r4 & 4) == 0) goto L19;
     */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0036 A[EDGE_INSN: B:45:0x0036->B:43:0x0036 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0033 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int getAnimatedMediaEntitiesCount(boolean z) {
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                VideoEditedInfo.MediaEntity mediaEntity = this.editState.mediaEntities.get(i2);
                if (mediaEntity.type == 0) {
                    byte b = mediaEntity.subType;
                    if ((b & 1) == 0) {
                    }
                    i++;
                    if (!z) {
                        break;
                    }
                }
                if (mediaEntity.entities.isEmpty()) {
                    continue;
                }
                i++;
                if (!z) {
                }
            }
            return i;
        }
        return 0;
    }

    private boolean hasAnimatedMediaEntities() {
        return getAnimatedMediaEntitiesCount(true) != 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:66:0x0067 A[Catch: all -> 0x009e, TryCatch #0 {all -> 0x009e, blocks: (B:41:0x0004, B:43:0x0009, B:45:0x000d, B:47:0x0013, B:49:0x0016, B:50:0x0018, B:56:0x002e, B:58:0x0055, B:63:0x005e, B:64:0x0062, B:66:0x0067, B:69:0x0070, B:68:0x006d), top: B:74:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x006b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private Bitmap createCroppedBitmap(Bitmap bitmap, MediaController.CropState cropState, int[] iArr, boolean z) {
        int i;
        int i2;
        int i3;
        int i4;
        Matrix matrix;
        try {
            int i5 = 0;
            int i6 = (cropState.transformRotation + (iArr != null ? iArr[0] : 0)) % 360;
            if (iArr != null && iArr.length > 1) {
                i5 = iArr[1];
            }
            int width = bitmap.getWidth();
            int height = bitmap.getHeight();
            if (i6 != 90 && i6 != 270) {
                i2 = width;
                i = height;
                float f = i2;
                float f2 = i;
                Bitmap createBitmap = Bitmap.createBitmap((int) (cropState.cropPw * f), (int) (cropState.cropPh * f2), Bitmap.Config.ARGB_8888);
                matrix = new Matrix();
                matrix.postTranslate((-width) / 2, (-height) / 2);
                if (z && cropState.mirrored) {
                    if (i6 != 90 && i6 != 270) {
                        matrix.postScale(-1.0f, 1.0f);
                    }
                    matrix.postScale(1.0f, -1.0f);
                }
                if (i5 != 1) {
                    matrix.postScale(-1.0f, 1.0f);
                } else if (i5 == 2) {
                    matrix.postScale(1.0f, -1.0f);
                }
                matrix.postRotate(cropState.cropRotate + i6);
                matrix.postTranslate(cropState.cropPx * f, cropState.cropPy * f2);
                float f3 = cropState.cropScale;
                matrix.postScale(f3, f3);
                matrix.postTranslate(i3 / 2, i4 / 2);
                new Canvas(createBitmap).drawBitmap(bitmap, matrix, new Paint(2));
                return createBitmap;
            }
            i = width;
            i2 = height;
            float f4 = i2;
            float f22 = i;
            Bitmap createBitmap2 = Bitmap.createBitmap((int) (cropState.cropPw * f4), (int) (cropState.cropPh * f22), Bitmap.Config.ARGB_8888);
            matrix = new Matrix();
            matrix.postTranslate((-width) / 2, (-height) / 2);
            if (z) {
                if (i6 != 90) {
                    matrix.postScale(-1.0f, 1.0f);
                }
                matrix.postScale(1.0f, -1.0f);
            }
            if (i5 != 1) {
            }
            matrix.postRotate(cropState.cropRotate + i6);
            matrix.postTranslate(cropState.cropPx * f4, cropState.cropPy * f22);
            float f32 = cropState.cropScale;
            matrix.postScale(f32, f32);
            matrix.postTranslate(i3 / 2, i4 / 2);
            new Canvas(createBitmap2).drawBitmap(bitmap, matrix, new Paint(2));
            return createBitmap2;
        } catch (Throwable th) {
            FileLog.e(th);
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:74:0x0072  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0126  */
    /* renamed from: applyCurrentEditMode */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$setParentActivity$17(Bitmap bitmap) {
        boolean z;
        int i;
        MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        int[] iArr = {this.centerImage.getOrientation(), this.centerImage.getInvert()};
        MediaController.CropState cropState = mediaEditState.cropState;
        if (cropState != null) {
            bitmap = createCroppedBitmap(bitmap, cropState, iArr, true);
        } else if (iArr[0] != 0) {
            Matrix matrix = new Matrix();
            matrix.postRotate(iArr[0]);
            if (iArr[1] == 1) {
                matrix.postScale(-1.0f, 1.0f);
            } else if (iArr[1] == 2) {
                matrix.postScale(1.0f, -1.0f);
            }
            bitmap = Bitmaps.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
        } else {
            z = false;
            i = this.currentEditMode;
            if ((i != 0 || i == 4) && this.sendPhotoType == 11 && !this.isCurrentVideo) {
                if (mediaEditState.cropState == null) {
                    if (mediaEditState.paintPath != null) {
                        Bitmap createCroppedBitmap = createCroppedBitmap(BitmapFactory.decodeFile(mediaEditState.fullPaintPath), mediaEditState.cropState, null, false);
                        if (hasAnimatedMediaEntities()) {
                            String file = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file;
                            mediaEditState.imagePath = file;
                        } else {
                            String tempFileAbsolutePath = getTempFileAbsolutePath();
                            mediaEditState.imagePath = tempFileAbsolutePath;
                            mergeImages(tempFileAbsolutePath, null, createCroppedBitmap, bitmap, AndroidUtilities.getPhotoSize(), true);
                        }
                        String tempFileAbsolutePath2 = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath2;
                        mergeImages(tempFileAbsolutePath2, null, createCroppedBitmap, bitmap, 512.0f, true);
                    } else {
                        Bitmap bitmap2 = bitmap;
                        String file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap2, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                        this.currentImagePath = file2;
                        mediaEditState.imagePath = file2;
                        mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap2, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                    }
                } else if (mediaEditState.paintPath != null) {
                    Bitmap decodeFile = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                    if (hasAnimatedMediaEntities()) {
                        String file3 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                        this.currentImagePath = file3;
                        mediaEditState.imagePath = file3;
                    } else {
                        String tempFileAbsolutePath3 = getTempFileAbsolutePath();
                        mediaEditState.imagePath = tempFileAbsolutePath3;
                        mergeImages(tempFileAbsolutePath3, null, bitmap, decodeFile, AndroidUtilities.getPhotoSize(), false);
                    }
                    String tempFileAbsolutePath4 = getTempFileAbsolutePath();
                    mediaEditState.thumbPath = tempFileAbsolutePath4;
                    mergeImages(tempFileAbsolutePath4, null, bitmap, decodeFile, 512.0f, false);
                } else {
                    Bitmap bitmap3 = bitmap;
                    String file4 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap3, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                    this.currentImagePath = file4;
                    mediaEditState.imagePath = file4;
                    mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap3, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                }
            }
            if (z || bitmap == null) {
            }
            bitmap.recycle();
            return;
        }
        z = true;
        i = this.currentEditMode;
        if (i != 0) {
        }
        if (mediaEditState.cropState == null) {
        }
        if (z) {
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:370:0x0185 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:371:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:417:0x0306  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x058e  */
    /* JADX WARN: Removed duplicated region for block: B:523:0x0600  */
    /* JADX WARN: Type inference failed for: r10v27 */
    /* JADX WARN: Type inference failed for: r10v5 */
    /* JADX WARN: Type inference failed for: r10v6, types: [int[], android.net.Uri] */
    /* JADX WARN: Type inference failed for: r15v1 */
    /* JADX WARN: Type inference failed for: r15v10 */
    /* JADX WARN: Type inference failed for: r15v11 */
    /* JADX WARN: Type inference failed for: r15v12 */
    /* JADX WARN: Type inference failed for: r15v13 */
    /* JADX WARN: Type inference failed for: r15v14 */
    /* JADX WARN: Type inference failed for: r15v15 */
    /* JADX WARN: Type inference failed for: r15v16 */
    /* JADX WARN: Type inference failed for: r15v17 */
    /* JADX WARN: Type inference failed for: r15v18 */
    /* JADX WARN: Type inference failed for: r15v19 */
    /* JADX WARN: Type inference failed for: r15v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r15v24 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void applyCurrentEditMode() {
        Bitmap bitmap;
        int[] iArr;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList;
        MediaController.SavedFilterState savedFilterState;
        Bitmap createVideoThumbnailAtTime;
        boolean z;
        List<TLRPC$InputDocument> list;
        MediaController.SavedFilterState savedFilterState2;
        ?? r15;
        View view;
        PhotoViewerProvider photoViewerProvider;
        boolean z2;
        int i;
        boolean z3;
        ?? r10;
        Bitmap bitmap2;
        boolean z4;
        Bitmap bitmap3;
        boolean z5;
        Bitmap createBitmap;
        boolean z6;
        Bitmap loadBitmap;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList2;
        int bitmapWidth;
        int bitmapHeight;
        Bitmap bitmap4;
        boolean z7;
        boolean z8;
        Bitmap createCroppedBitmap;
        boolean z9;
        MediaController.SavedFilterState savedFilterState3;
        int i2;
        int i3;
        int i4 = this.currentIndex;
        if (i4 < 0 || i4 >= this.imagesArrLocals.size() || !(this.imagesArrLocals.get(this.currentIndex) instanceof MediaController.MediaEditState)) {
            return;
        }
        Bitmap[] bitmapArr = new Bitmap[1];
        MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        int i5 = this.currentEditMode;
        if (i5 == 1 || (i5 == 0 && this.sendPhotoType == 1)) {
            this.photoCropView.makeCrop(mediaEditState);
            if (mediaEditState.cropState == null && this.currentEditMode != 1) {
                return;
            }
            if (this.isCurrentVideo) {
                if (!TextUtils.isEmpty(mediaEditState.filterPath)) {
                    createVideoThumbnailAtTime = ImageLoader.loadBitmap(mediaEditState.filterPath, null, 512.0f, 512.0f, true);
                } else if (this.sendPhotoType == 1) {
                    iArr = new int[1];
                    bitmap = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.avatarStartTime / 1000, iArr, true);
                } else {
                    createVideoThumbnailAtTime = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.videoTimelineView.getLeftProgress() * ((float) this.videoPlayer.getDuration()) * 1000.0f);
                }
                bitmap = createVideoThumbnailAtTime;
                iArr = null;
                arrayList = null;
                MediaController.SavedFilterState savedFilterState4 = arrayList;
                savedFilterState = savedFilterState4;
                savedFilterState3 = savedFilterState4;
            } else {
                bitmap = this.centerImage.getBitmap();
                iArr = new int[]{this.centerImage.getOrientation(), this.centerImage.getInvert()};
            }
            arrayList = null;
            MediaController.SavedFilterState savedFilterState42 = arrayList;
            savedFilterState = savedFilterState42;
            savedFilterState3 = savedFilterState42;
        } else if (i5 == 2) {
            bitmap = this.stickerMakerView.cutSegmentInFilteredBitmap(this.photoFilterView.getBitmap(), this.centerImage.getOrientation());
            savedFilterState = this.photoFilterView.getSavedFilterState();
            iArr = null;
            arrayList = null;
            savedFilterState3 = null;
        } else if (i5 == 3) {
            int i6 = this.sendPhotoType;
            ArrayList<VideoEditedInfo.MediaEntity> arrayList3 = (i6 == 0 || i6 == 1 || i6 == 11 || i6 == 2) ? new ArrayList<>() : null;
            boolean hasChanges = this.photoPaintView.hasChanges();
            Bitmap bitmap5 = this.photoPaintView.getBitmap(arrayList3, bitmapArr);
            List<TLRPC$InputDocument> masks = this.photoPaintView.getMasks();
            this.photoPaintView.onCleanupEntities();
            z = hasChanges;
            list = masks;
            arrayList = arrayList3;
            bitmap = bitmap5;
            iArr = null;
            savedFilterState = null;
            if (bitmap != null) {
                return;
            }
            if (mediaEditState.thumbPath != null) {
                new File(mediaEditState.thumbPath).delete();
                mediaEditState.thumbPath = null;
            }
            if (mediaEditState.imagePath != null) {
                new File(mediaEditState.imagePath).delete();
                mediaEditState.imagePath = null;
            }
            int i7 = this.currentEditMode;
            if (i7 == 1 || (i7 == 0 && this.sendPhotoType == 1)) {
                savedFilterState2 = savedFilterState;
                View view2 = null;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                EditState editState = this.editState;
                MediaController.CropState cropState = mediaEditState.cropState;
                editState.cropState = cropState;
                editState.croppedPaintPath = mediaEditState.croppedPaintPath;
                editState.croppedMediaEntities = mediaEditState.croppedMediaEntities;
                view = view2;
                if (cropState != null) {
                    Bitmap createCroppedBitmap2 = createCroppedBitmap(bitmap, cropState, iArr, true);
                    if (mediaEditState.paintPath != null) {
                        Bitmap decodeFile = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                        Bitmap createCroppedBitmap3 = createCroppedBitmap(decodeFile, mediaEditState.cropState, null, false);
                        if (!this.isCurrentVideo) {
                            if (hasAnimatedMediaEntities()) {
                                String file = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                                this.currentImagePath = file;
                                mediaEditState.imagePath = file;
                            } else {
                                String tempFileAbsolutePath = getTempFileAbsolutePath();
                                mediaEditState.imagePath = tempFileAbsolutePath;
                                mergeImages(tempFileAbsolutePath, null, createCroppedBitmap3, createCroppedBitmap2, AndroidUtilities.getPhotoSize(), true);
                            }
                        }
                        String tempFileAbsolutePath2 = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath2;
                        mergeImages(tempFileAbsolutePath2, null, createCroppedBitmap3, createCroppedBitmap2, 512.0f, true);
                        if (createCroppedBitmap3 != null) {
                            createCroppedBitmap3.recycle();
                        }
                        if (decodeFile != null) {
                            decodeFile.recycle();
                        }
                    } else {
                        if (!this.isCurrentVideo) {
                            String file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file2;
                            mediaEditState.imagePath = file2;
                        }
                        mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                    }
                    view = view2;
                    if (this.currentEditMode == 0) {
                        view = view2;
                        if (this.isCurrentVideo) {
                            bitmap.recycle();
                            bitmap = createCroppedBitmap2;
                            view = view2;
                        }
                    }
                }
            } else {
                if (i7 == 2) {
                    if (mediaEditState.filterPath != null) {
                        new File(mediaEditState.filterPath).delete();
                    }
                    mediaEditState.filterPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                    MediaController.CropState cropState2 = mediaEditState.cropState;
                    Bitmap createCroppedBitmap4 = cropState2 != null ? createCroppedBitmap(bitmap, cropState2, null, true) : bitmap;
                    String str = mediaEditState.paintPath;
                    if (str == null) {
                        if (!this.isCurrentVideo) {
                            String file3 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file3;
                            mediaEditState.imagePath = file3;
                        }
                        mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), 512.0f, 512.0f, 83, false, 101, 101), true).toString();
                        savedFilterState2 = savedFilterState;
                        z9 = false;
                    } else {
                        String str2 = mediaEditState.fullPaintPath;
                        Bitmap thumb = str.equals(str2) ? this.paintingOverlay.getThumb() : null;
                        MediaController.CropState cropState3 = mediaEditState.cropState;
                        if (cropState3 != null) {
                            if (thumb == null) {
                                Bitmap decodeFile2 = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                                Bitmap createCroppedBitmap5 = createCroppedBitmap(decodeFile2, mediaEditState.cropState, null, false);
                                decodeFile2.recycle();
                                createCroppedBitmap = createCroppedBitmap5;
                            } else {
                                createCroppedBitmap = createCroppedBitmap(thumb, cropState3, null, false);
                            }
                            bitmap4 = createCroppedBitmap;
                            z7 = true;
                        } else {
                            bitmap4 = thumb;
                            z7 = false;
                        }
                        if (!this.isCurrentVideo) {
                            if (hasAnimatedMediaEntities()) {
                                String file4 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                                this.currentImagePath = file4;
                                mediaEditState.imagePath = file4;
                            } else {
                                String tempFileAbsolutePath3 = getTempFileAbsolutePath();
                                mediaEditState.imagePath = tempFileAbsolutePath3;
                                savedFilterState2 = savedFilterState;
                                z8 = false;
                                mergeImages(tempFileAbsolutePath3, str2, bitmap4, createCroppedBitmap4, AndroidUtilities.getPhotoSize(), true);
                                String tempFileAbsolutePath4 = getTempFileAbsolutePath();
                                mediaEditState.thumbPath = tempFileAbsolutePath4;
                                mergeImages(tempFileAbsolutePath4, str2, bitmap4, createCroppedBitmap4, 512.0f, true);
                                z9 = z8;
                                if (z7) {
                                    bitmap4.recycle();
                                    z9 = z8;
                                }
                            }
                        }
                        savedFilterState2 = savedFilterState;
                        z8 = false;
                        String tempFileAbsolutePath42 = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath42;
                        mergeImages(tempFileAbsolutePath42, str2, bitmap4, createCroppedBitmap4, 512.0f, true);
                        z9 = z8;
                        if (z7) {
                        }
                    }
                    z3 = z9;
                    if (mediaEditState.cropState != null) {
                        createCroppedBitmap4.recycle();
                        z3 = z9;
                    }
                } else {
                    savedFilterState2 = savedFilterState;
                    z3 = false;
                    r15 = 0;
                    r15 = 0;
                    r15 = 0;
                    r15 = 0;
                    r15 = 0;
                    r15 = 0;
                    r15 = 0;
                    if (i7 == 3) {
                        if (mediaEditState.paintPath != null) {
                            new File(mediaEditState.paintPath).delete();
                            if (!mediaEditState.paintPath.equals(mediaEditState.fullPaintPath)) {
                                new File(mediaEditState.fullPaintPath).delete();
                            }
                        }
                        TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(bitmap, Bitmap.CompressFormat.PNG, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101);
                        mediaEditState.stickers = list != null ? new ArrayList<>(list) : null;
                        EditState editState2 = this.editState;
                        String file5 = FileLoader.getInstance(this.currentAccount).getPathToAttach(scaleAndSaveImage, true).toString();
                        editState2.paintPath = file5;
                        mediaEditState.paintPath = file5;
                        PaintingOverlay paintingOverlay = this.paintingOverlay;
                        EditState editState3 = this.editState;
                        ArrayList<VideoEditedInfo.MediaEntity> arrayList4 = (arrayList == null || arrayList.isEmpty()) ? null : arrayList;
                        editState3.mediaEntities = arrayList4;
                        mediaEditState.mediaEntities = arrayList4;
                        paintingOverlay.setEntities(arrayList4, this.isCurrentVideo, true, this.sendPhotoType != 11);
                        EditState editState4 = this.editState;
                        long lcm = this.photoPaintView.getLcm();
                        editState4.averageDuration = lcm;
                        mediaEditState.averageDuration = lcm;
                        if (mediaEditState.mediaEntities != null && bitmapArr[0] != null) {
                            mediaEditState.fullPaintPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmapArr[0], Bitmap.CompressFormat.PNG, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                        } else {
                            mediaEditState.fullPaintPath = mediaEditState.paintPath;
                        }
                        this.paintingOverlay.setBitmap(bitmap);
                        MediaController.CropState cropState4 = mediaEditState.cropState;
                        if (cropState4 == null || !cropState4.initied) {
                            r10 = 0;
                        } else {
                            String copy = CropView.getCopy(this.editState.paintPath);
                            if (this.editState.croppedPaintPath != null) {
                                new File(this.editState.croppedPaintPath).delete();
                                arrayList2 = null;
                                this.editState.croppedPaintPath = null;
                            } else {
                                arrayList2 = null;
                            }
                            EditState editState5 = this.editState;
                            editState5.croppedPaintPath = copy;
                            ArrayList<VideoEditedInfo.MediaEntity> arrayList5 = editState5.mediaEntities;
                            if (arrayList5 != null && !arrayList5.isEmpty()) {
                                this.editState.croppedMediaEntities = new ArrayList<>(this.editState.mediaEntities.size());
                                int size = this.editState.mediaEntities.size();
                                for (int i8 = 0; i8 < size; i8++) {
                                    EditState editState6 = this.editState;
                                    editState6.croppedMediaEntities.add(editState6.mediaEntities.get(i8).copy());
                                }
                            } else {
                                this.editState.croppedMediaEntities = arrayList2;
                            }
                            MediaController.CropState cropState5 = mediaEditState.cropState;
                            Bitmap createBitmap2 = Bitmap.createBitmap(cropState5.width, cropState5.height, Bitmap.Config.ARGB_8888);
                            Canvas canvas = new Canvas(createBitmap2);
                            if (this.isCurrentVideo) {
                                VideoEditTextureView videoEditTextureView = (VideoEditTextureView) this.videoTextureView;
                                int videoWidth = videoEditTextureView.getVideoWidth();
                                bitmapHeight = videoEditTextureView.getVideoHeight();
                                bitmapWidth = videoWidth;
                            } else {
                                bitmapWidth = this.centerImage.getBitmapWidth();
                                bitmapHeight = this.centerImage.getBitmapHeight();
                            }
                            Activity activity = this.parentActivity;
                            Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.PNG;
                            MediaController.CropState cropState6 = mediaEditState.cropState;
                            CropView.editBitmap(activity, copy, null, canvas, createBitmap2, compressFormat, cropState6.matrix, bitmapWidth, bitmapHeight, cropState6.stateScale, cropState6.cropRotate, cropState6.transformRotation, cropState6.scale, false, this.editState.croppedMediaEntities, false);
                            createBitmap2.recycle();
                            EditState editState7 = this.editState;
                            mediaEditState.croppedPaintPath = editState7.croppedPaintPath;
                            mediaEditState.croppedMediaEntities = editState7.croppedMediaEntities;
                            r10 = arrayList2;
                        }
                        Bitmap bitmap6 = bitmapArr[0] != null ? bitmapArr[0] : bitmap;
                        MediaController.CropState cropState7 = mediaEditState.cropState;
                        if (cropState7 == null || !cropState7.initied) {
                            bitmap2 = bitmap6;
                            z4 = false;
                        } else {
                            bitmap2 = createCroppedBitmap(bitmap6, cropState7, r10, false);
                            z4 = true;
                        }
                        if (this.isCurrentVideo) {
                            String str3 = mediaEditState.filterPath;
                            if (str3 == null) {
                                loadBitmap = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.videoTimelineView.getLeftProgress() * ((float) this.videoPlayer.getDuration()) * 1000.0f);
                                z6 = true;
                            } else {
                                z6 = true;
                                loadBitmap = ImageLoader.loadBitmap(str3, r10, 512.0f, 512.0f, true);
                            }
                            MediaController.CropState cropState8 = mediaEditState.cropState;
                            createBitmap = cropState8 != null ? createCroppedBitmap(loadBitmap, cropState8, r10, z6) : loadBitmap;
                            if (mediaEditState.cropState != null) {
                                loadBitmap.recycle();
                            }
                        } else {
                            int[] iArr2 = {this.centerImage.getOrientation(), this.centerImage.getInvert()};
                            if (mediaEditState.cropState != null) {
                                createBitmap = createCroppedBitmap(this.centerImage.getBitmap(), mediaEditState.cropState, iArr2, true);
                            } else {
                                Bitmap bitmap7 = this.centerImage.getBitmap();
                                if (iArr2[0] != 0) {
                                    Matrix matrix = new Matrix();
                                    matrix.postRotate(iArr2[0]);
                                    if (iArr2[1] == 1) {
                                        matrix.postScale(-1.0f, 1.0f);
                                    } else if (iArr2[1] == 2) {
                                        matrix.postScale(1.0f, -1.0f);
                                    }
                                    createBitmap = Bitmaps.createBitmap(bitmap7, 0, 0, bitmap7.getWidth(), bitmap7.getHeight(), matrix, true);
                                } else {
                                    bitmap3 = bitmap7;
                                    z5 = false;
                                    if (!this.isCurrentVideo) {
                                        if (hasAnimatedMediaEntities()) {
                                            String file6 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap3, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                                            this.currentImagePath = file6;
                                            mediaEditState.imagePath = file6;
                                        } else {
                                            String tempFileAbsolutePath5 = getTempFileAbsolutePath();
                                            mediaEditState.imagePath = tempFileAbsolutePath5;
                                            mergeImages(tempFileAbsolutePath5, null, bitmap3, bitmap2, AndroidUtilities.getPhotoSize(), false);
                                        }
                                    }
                                    String tempFileAbsolutePath6 = getTempFileAbsolutePath();
                                    mediaEditState.thumbPath = tempFileAbsolutePath6;
                                    mergeImages(tempFileAbsolutePath6, null, bitmap3, bitmap2, 512.0f, false);
                                    if (z4 && bitmap2 != null) {
                                        bitmap2.recycle();
                                    }
                                    if (z5 && bitmap3 != null) {
                                        bitmap3.recycle();
                                    }
                                    view = r10;
                                    if (this.sendPhotoType == 1) {
                                        view = r10;
                                        if (this.videoPlayer != null) {
                                            view = r10;
                                            if (this.isCurrentVideo) {
                                                view = r10;
                                                if (getAnimatedMediaEntitiesCount(false) == 1) {
                                                    view = r10;
                                                    if (this.videoTimelineView.getLeftProgress() <= 0.0f) {
                                                        view = r10;
                                                        if (this.videoTimelineView.getRightProgress() >= 1.0f) {
                                                            long j = mediaEditState.averageDuration;
                                                            long duration = this.videoPlayer.getDuration();
                                                            while (j < 3000 && j < duration) {
                                                                j += mediaEditState.averageDuration;
                                                            }
                                                            this.videoTimelineView.setRightProgress(Math.min(1.0f, ((float) j) / ((float) duration)));
                                                            view = r10;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        bitmap3 = createBitmap;
                        z5 = true;
                        if (!this.isCurrentVideo) {
                        }
                        String tempFileAbsolutePath62 = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath62;
                        mergeImages(tempFileAbsolutePath62, null, bitmap3, bitmap2, 512.0f, false);
                        if (z4) {
                            bitmap2.recycle();
                        }
                        if (z5) {
                            bitmap3.recycle();
                        }
                        view = r10;
                        if (this.sendPhotoType == 1) {
                        }
                    }
                }
                view = null;
                r15 = z3;
            }
            SharedConfig.saveConfig();
            MediaController.SavedFilterState savedFilterState5 = savedFilterState2;
            if (savedFilterState5 != null) {
                this.editState.savedFilterState = savedFilterState5;
                mediaEditState.savedFilterState = savedFilterState5;
            }
            int i9 = this.currentEditMode;
            if (i9 == 1) {
                mediaEditState.isCropped = true;
                this.cropItem.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY));
            } else if (i9 == 2) {
                mediaEditState.isFiltered = true;
                this.tuneItem.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY));
            } else if (i9 == 3) {
                if (z) {
                    mediaEditState.isPainted = true;
                    this.paintItem.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY));
                } else if (this.sendPhotoType == 11) {
                    mediaEditState.isPainted = true;
                }
            }
            int i10 = this.sendPhotoType;
            if ((i10 == 0 || i10 == 4) && (photoViewerProvider = this.placeProvider) != null) {
                photoViewerProvider.updatePhotoAtIndex(this.currentIndex);
                if (!this.placeProvider.isPhotoChecked(this.currentIndex)) {
                    setPhotoChecked();
                }
            }
            if (this.currentEditMode == 1) {
                this.scale = Math.max(this.photoCropView.getRectSizeX() / getContainerViewWidth(), this.photoCropView.getRectSizeY() / getContainerViewHeight());
                this.translationX = (this.photoCropView.getRectX() + (this.photoCropView.getRectSizeX() / 2.0f)) - (getContainerViewWidth() / 2);
                this.translationY = (this.photoCropView.getRectY() + (this.photoCropView.getRectSizeY() / 2.0f)) - (getContainerViewHeight() / 2);
                z2 = true;
                this.zoomAnimation = true;
                this.photoCropView.onDisappear();
            } else {
                z2 = true;
            }
            this.centerImage.setParentView(view);
            this.ignoreDidSetImage = z2;
            if (!this.isCurrentVideo ? this.currentEditMode != 2 : !((i = this.currentEditMode) == z2 || (i == 0 && this.sendPhotoType == z2))) {
                this.centerImage.setImageBitmap(bitmap);
                this.centerImage.setOrientation(r15, true);
                this.centerBlur.destroy();
                this.containerView.requestLayout();
            }
            this.ignoreDidSetImage = r15;
            this.centerImage.setParentView(this.containerView);
            return;
        } else if (i5 == 4) {
            Bitmap bitmap8 = this.maskPaintView.getBitmap();
            this.centerImage.setImageBitmap(bitmap8);
            lambda$setParentActivity$17(bitmap8);
            this.eraseBtn.setActive(false, true);
            this.restoreBtn.setActive(false, true);
            if (this.stickerMakerView != null) {
                int orientation = this.centerImage.getOrientation();
                StickerMakerView stickerMakerView = this.stickerMakerView;
                int i11 = orientation - stickerMakerView.orientation;
                if (i11 != 0) {
                    int width = bitmap8.getWidth();
                    int height = bitmap8.getHeight();
                    if ((i11 / 90) % 2 != 0) {
                        i3 = width;
                        i2 = height;
                    } else {
                        i2 = width;
                        i3 = height;
                    }
                    Bitmap createBitmap3 = Bitmap.createBitmap(i2, i3, Bitmap.Config.ARGB_8888);
                    Canvas canvas2 = new Canvas(createBitmap3);
                    canvas2.translate((-width) / 2.0f, (-height) / 2.0f);
                    canvas2.rotate(i11);
                    canvas2.translate(i2 / 2.0f, i3 / 2.0f);
                    canvas2.drawBitmap(bitmap8, 0.0f, 0.0f, new Paint(3));
                    this.stickerMakerView.updateOutlinePath(createBitmap3);
                    return;
                }
                stickerMakerView.updateOutlinePath(bitmap8);
                return;
            }
            return;
        } else {
            iArr = null;
            arrayList = null;
            savedFilterState3 = null;
            savedFilterState = null;
            bitmap = null;
        }
        z = false;
        list = savedFilterState3;
        if (bitmap != null) {
        }
    }

    private void setPhotoChecked() {
        ChatActivity chatActivity;
        TLRPC$Chat currentChat;
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
            if (photoViewerProvider.getSelectedPhotos() != null && this.maxSelectedPhotos > 0 && this.placeProvider.getSelectedPhotos().size() >= this.maxSelectedPhotos && !this.placeProvider.isPhotoChecked(this.currentIndex)) {
                if (!this.allowOrder || (chatActivity = this.parentChatActivity) == null || (currentChat = chatActivity.getCurrentChat()) == null || ChatObject.hasAdminRights(currentChat) || !currentChat.slowmode_enabled) {
                    return;
                }
                AlertsCreator.createSimpleAlert(this.parentActivity, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSelectSendError", R.string.SlowmodeSelectSendError)).show();
                return;
            }
            int photoChecked = this.placeProvider.setPhotoChecked(this.currentIndex, getCurrentVideoEditedInfo());
            boolean isPhotoChecked = this.placeProvider.isPhotoChecked(this.currentIndex);
            this.checkImageView.setChecked(isPhotoChecked, true);
            if (photoChecked >= 0) {
                if (isPhotoChecked) {
                    this.selectedPhotosAdapter.notifyItemInserted(photoChecked);
                    this.selectedPhotosListView.smoothScrollToPosition(photoChecked);
                } else {
                    this.selectedPhotosAdapter.notifyItemRemoved(photoChecked);
                    if (photoChecked == 0) {
                        this.selectedPhotosAdapter.notifyItemChanged(0);
                    }
                }
            }
            updateSelectedCount();
        }
    }

    public void updateResetButtonVisibility(final boolean z) {
        if (this.resetButton.isClickable() != z) {
            this.resetButton.setClickable(z);
            this.resetButton.setVisibility(0);
            this.resetButton.clearAnimation();
            this.resetButton.animate().alpha(z ? 1.0f : 0.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).setDuration(150L).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda102
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$updateResetButtonVisibility$63(z);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateResetButtonVisibility$63(boolean z) {
        if (z) {
            return;
        }
        this.resetButton.setVisibility(8);
    }

    private void createCropView() {
        if (this.photoCropView != null) {
            return;
        }
        PhotoCropView photoCropView = new PhotoCropView(this.activityContext, this.resourcesProvider);
        this.photoCropView = photoCropView;
        photoCropView.setVisibility(8);
        this.photoCropView.onDisappear();
        this.containerView.addView(this.photoCropView, this.containerView.indexOfChild(this.videoTimelineViewContainer) - 1, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
        this.photoCropView.setDelegate(new 54());
    }

    /* loaded from: classes4.dex */
    public class 54 implements PhotoCropView.PhotoCropViewDelegate {
        54() {
            PhotoViewer.this = r1;
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onChange(boolean z) {
            PhotoViewer.this.updateResetButtonVisibility(!z);
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onUpdate() {
            PhotoViewer.this.containerView.invalidate();
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onTapUp() {
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.manuallyPaused = true;
                PhotoViewer.this.toggleVideoPlayer();
            }
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onVideoThumbClick() {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            PhotoViewer.this.videoPlayer.seekTo(((float) PhotoViewer.this.videoPlayer.getDuration()) * PhotoViewer.this.avatarStartProgress);
            PhotoViewer.this.videoPlayer.pause();
            PhotoViewer.this.videoTimelineView.setProgress(PhotoViewer.this.avatarStartProgress);
            PhotoViewer.this.cancelVideoPlayRunnable();
            AndroidUtilities.runOnUIThread(PhotoViewer.this.videoPlayRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$54$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.54.this.lambda$onVideoThumbClick$0();
                }
            }, 860L);
        }

        public /* synthetic */ void lambda$onVideoThumbClick$0() {
            PhotoViewer.this.manuallyPaused = false;
            if (PhotoViewer.this.videoPlayer != null) {
                PhotoViewer.this.videoPlayer.play();
            }
            PhotoViewer.this.videoPlayRunnable = null;
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public boolean rotate() {
            return PhotoViewer.this.cropRotate(-90.0f);
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public boolean mirror() {
            return PhotoViewer.this.cropMirror();
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public int getVideoThumbX() {
            return (int) (AndroidUtilities.dp(16.0f) + ((PhotoViewer.this.videoTimelineView.getMeasuredWidth() - AndroidUtilities.dp(32.0f)) * PhotoViewer.this.avatarStartProgress));
        }
    }

    private void startVideoPlayer() {
        VideoPlayer videoPlayer;
        if (!this.isCurrentVideo || (videoPlayer = this.videoPlayer) == null || videoPlayer.isPlaying()) {
            return;
        }
        if (!this.muteVideo || this.sendPhotoType == 1) {
            this.videoPlayer.setVolume(0.0f);
        }
        this.manuallyPaused = false;
        toggleVideoPlayer();
    }

    private void detectFaces() {
        if (this.centerImage.getAnimation() != null || this.imagesArrLocals.isEmpty() || this.sendPhotoType == 1) {
            return;
        }
        String imageKey = this.centerImage.getImageKey();
        String str = this.currentImageFaceKey;
        if (str == null || !str.equals(imageKey)) {
            this.currentImageHasFace = 0;
            detectFaces(imageKey, this.centerImage.getBitmapSafe(), this.centerImage.getOrientation());
        }
    }

    private void detectFaces(final String str, final ImageReceiver.BitmapHolder bitmapHolder, final int i) {
        if (str == null || bitmapHolder == null || bitmapHolder.bitmap == null) {
            return;
        }
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$detectFaces$66(bitmapHolder, i, str);
            }
        });
    }

    public /* synthetic */ void lambda$detectFaces$66(final ImageReceiver.BitmapHolder bitmapHolder, int i, final String str) {
        FaceDetector faceDetector = null;
        try {
            try {
                final boolean z = false;
                faceDetector = new FaceDetector.Builder(ApplicationLoader.applicationContext).setMode(0).setLandmarkType(0).setTrackingEnabled(false).build();
                if (faceDetector.isOperational()) {
                    SparseArray<Face> detect = faceDetector.detect(new Frame.Builder().setBitmap(bitmapHolder.bitmap).setRotation(i).build());
                    if (detect != null && detect.size() != 0) {
                        z = true;
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda93
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$detectFaces$64(str, z);
                        }
                    });
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.e("face detection is not operational");
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda95
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$detectFaces$65(bitmapHolder, str);
                        }
                    });
                }
            } catch (Exception e) {
                FileLog.e(e);
                if (0 == 0) {
                    return;
                }
            }
            faceDetector.release();
        } catch (Throwable th) {
            if (0 != 0) {
                faceDetector.release();
            }
            throw th;
        }
    }

    public /* synthetic */ void lambda$detectFaces$64(String str, boolean z) {
        if (str.equals(this.centerImage.getImageKey())) {
            this.currentImageHasFace = z ? 1 : 0;
            this.currentImageFaceKey = str;
        }
    }

    public /* synthetic */ void lambda$detectFaces$65(ImageReceiver.BitmapHolder bitmapHolder, String str) {
        bitmapHolder.release();
        if (str.equals(this.centerImage.getImageKey())) {
            this.currentImageHasFace = 2;
            this.currentImageFaceKey = str;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:625:0x02b3  */
    /* JADX WARN: Removed duplicated region for block: B:650:0x0361  */
    /* JADX WARN: Removed duplicated region for block: B:658:0x0388  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void switchToEditMode(final int i) {
        ActionBar actionBar;
        int i2;
        ActionBar actionBar2;
        int i3;
        char c;
        ActionBar actionBar3;
        int i4;
        String str;
        MediaController.SavedFilterState savedFilterState;
        int i5;
        Bitmap decodeFile;
        Bitmap bitmap;
        int i6;
        int i7;
        MediaController.CropState cropState;
        ActionBar actionBar4;
        int i8;
        int i9;
        float min;
        boolean z;
        float min2;
        MediaController.CropState cropState2;
        int i10;
        LPhotoPaintView lPhotoPaintView;
        LPhotoPaintView lPhotoPaintView2;
        int i11;
        LPhotoPaintView lPhotoPaintView3;
        int i12;
        char c2;
        if (this.currentEditMode != i) {
            if ((!this.isCurrentVideo || this.photoProgressViews[0].backgroundState == 3 || this.isCurrentVideo || (this.centerImage.getBitmap() != null && this.photoProgressViews[0].backgroundState == -1)) && this.changeModeAnimation == null && this.imageMoveAnimation == null && !isCaptionOpen()) {
                PhotoViewerProvider photoViewerProvider = this.placeProvider;
                if (photoViewerProvider != null && (this.currentEditMode == 0 || i == 0)) {
                    photoViewerProvider.onEditModeChanged(i != 0);
                }
                this.windowView.setClipChildren(i == 2);
                int color = this.navigationBar.getBackground() instanceof ColorDrawable ? ((ColorDrawable) this.navigationBar.getBackground()).getColor() : 2130706432;
                int i13 = -16777216;
                if (i == 1) {
                    i13 = -872415232;
                } else if (i != 3) {
                    if (i == 0 && this.fancyShadows && this.savedState == null) {
                        i13 = this.sendPhotoType == 11 ? 1711276032 : 0;
                    } else {
                        i13 = this.sendPhotoType == 11 ? -16777216 : 2130706432;
                    }
                }
                showEditCaption(this.editing && this.savedState == null && i == 0, true);
                showStickerMode((i == 0 || i == 4 || (i == 3 && this.stickerEmpty)) && this.sendPhotoType == 11, true);
                this.navigationBar.setVisibility(i != 2 ? 0 : 4);
                this.switchingToMode = i;
                if (this.currentEditMode == 0) {
                    PhotoCountView photoCountView = this.countView;
                    this.wasCountViewShown = photoCountView != null && photoCountView.isShown();
                }
                PhotoCountView photoCountView2 = this.countView;
                if (photoCountView2 != null) {
                    photoCountView2.updateShow(i == 0 && this.wasCountViewShown, true);
                }
                float f = 1.0f;
                if (i == 0) {
                    Bitmap bitmap2 = this.centerImage.getBitmap();
                    LPhotoPaintView lPhotoPaintView4 = this.photoPaintView;
                    if (lPhotoPaintView4 != null) {
                        lPhotoPaintView4.setDrawShadow(false);
                    }
                    if (this.currentEditMode == 4) {
                        this.animationStartTime = System.currentTimeMillis();
                        float f2 = this.translationY;
                        this.savedTy = f2;
                        this.animateToY = f2;
                        float f3 = this.translationX;
                        this.savedTx = f3;
                        this.animateToX = f3;
                        float f4 = this.rotate;
                        this.savedRotation = f4;
                        this.animateToRotate = f4;
                        this.animateToMirror = this.mirror;
                        float f5 = this.scale;
                        this.savedScale = f5;
                        this.animateToScale = f5;
                    } else if (bitmap2 != null) {
                        int bitmapWidth = this.centerImage.getBitmapWidth();
                        int bitmapHeight = this.centerImage.getBitmapHeight();
                        int i14 = this.currentEditMode;
                        if (i14 == 3) {
                            if (this.sendPhotoType == 1) {
                                if (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270) {
                                    i12 = bitmapWidth;
                                    bitmapWidth = bitmapHeight;
                                    float f6 = bitmapWidth;
                                    float f7 = i12;
                                    min2 = Math.min(getContainerViewWidth(0) / f6, getContainerViewHeight(0) / f7);
                                    min = Math.min(getContainerViewWidth(3) / f6, getContainerViewHeight(3) / f7);
                                }
                                i12 = bitmapHeight;
                                float f62 = bitmapWidth;
                                float f72 = i12;
                                min2 = Math.min(getContainerViewWidth(0) / f62, getContainerViewHeight(0) / f72);
                                min = Math.min(getContainerViewWidth(3) / f62, getContainerViewHeight(3) / f72);
                            } else {
                                MediaController.CropState cropState3 = this.editState.cropState;
                                if (cropState3 != null) {
                                    int i15 = cropState3.transformRotation;
                                    if (i15 == 90 || i15 == 270) {
                                        bitmapHeight = bitmapWidth;
                                        bitmapWidth = bitmapHeight;
                                    }
                                    bitmapWidth = (int) (bitmapWidth * cropState3.cropPw);
                                    i12 = (int) (bitmapHeight * cropState3.cropPh);
                                    float f622 = bitmapWidth;
                                    float f722 = i12;
                                    min2 = Math.min(getContainerViewWidth(0) / f622, getContainerViewHeight(0) / f722);
                                    min = Math.min(getContainerViewWidth(3) / f622, getContainerViewHeight(3) / f722);
                                }
                                i12 = bitmapHeight;
                                float f6222 = bitmapWidth;
                                float f7222 = i12;
                                min2 = Math.min(getContainerViewWidth(0) / f6222, getContainerViewHeight(0) / f7222);
                                min = Math.min(getContainerViewWidth(3) / f6222, getContainerViewHeight(3) / f7222);
                            }
                        } else {
                            if (i14 != 1 && (cropState2 = this.editState.cropState) != null && ((i10 = cropState2.transformRotation) == 90 || i10 == 270)) {
                                float f8 = bitmapHeight;
                                float containerViewWidth = getContainerViewWidth() / f8;
                                float f9 = bitmapWidth;
                                if (containerViewWidth * f9 > getContainerViewHeight()) {
                                    containerViewWidth = getContainerViewHeight() / f9;
                                }
                                this.scale = 1.0f / (containerViewWidth / Math.min(getContainerViewWidth() / f9, getContainerViewHeight() / f8));
                            } else if (this.sendPhotoType == 1 && (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270)) {
                                float f10 = bitmapHeight;
                                float containerViewWidth2 = getContainerViewWidth() / f10;
                                float f11 = bitmapWidth;
                                if (containerViewWidth2 * f11 > getContainerViewHeight()) {
                                    containerViewWidth2 = getContainerViewHeight() / f11;
                                }
                                this.scale = 1.0f / ((((this.cropTransform.getScale() / this.cropTransform.getTrueCropScale()) * containerViewWidth2) / Math.min(getContainerViewWidth() / f11, getContainerViewHeight() / f10)) / this.cropTransform.getMinScale());
                            }
                            MediaController.CropState cropState4 = this.editState.cropState;
                            if (cropState4 != null) {
                                int i16 = cropState4.transformRotation;
                                if (i16 == 90 || i16 == 270) {
                                    bitmapHeight = bitmapWidth;
                                    bitmapWidth = bitmapHeight;
                                }
                                bitmapWidth = (int) (bitmapWidth * cropState4.cropPw);
                                i9 = (int) (bitmapHeight * cropState4.cropPh);
                            } else if (this.sendPhotoType == 1 && (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270)) {
                                i9 = bitmapWidth;
                                bitmapWidth = bitmapHeight;
                            } else {
                                i9 = bitmapHeight;
                            }
                            float f12 = bitmapWidth;
                            float f13 = i9;
                            min = Math.min(getContainerViewWidth() / f12, getContainerViewHeight() / f13);
                            if (this.sendPhotoType == 1) {
                                min2 = getCropFillScale(this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270);
                            } else {
                                z = false;
                                min2 = Math.min(getContainerViewWidth(0) / f12, getContainerViewHeight(0) / f13);
                                if (this.currentEditMode == 4) {
                                    this.eraseBtn.setActive(z, true);
                                    this.restoreBtn.setActive(z, true);
                                }
                                if (this.sendPhotoType != 11 && ((i11 = this.currentEditMode) == 3 || i11 == 2 || i11 == 1)) {
                                    this.animationStartTime = System.currentTimeMillis();
                                    this.animateToX = this.savedTx;
                                    int i17 = this.currentEditMode;
                                    if (i17 == 1) {
                                        this.animateToY = this.savedTy + AndroidUtilities.dp(56.0f);
                                    } else if (i17 == 3) {
                                        float dp = this.savedTy + AndroidUtilities.dp(44.0f);
                                        this.animateToY = dp;
                                        if (this.photoPaintView != null) {
                                            float additionalTop = dp - (lPhotoPaintView3.getAdditionalTop() / 2.0f);
                                            this.animateToY = additionalTop;
                                            this.animateToY = additionalTop + (this.photoPaintView.getAdditionalBottom() / 2.0f);
                                        }
                                    } else if (i17 == 2) {
                                        this.animateToY = this.savedTy + AndroidUtilities.dp(93.0f);
                                    }
                                    if (isStatusBarVisible()) {
                                        this.animateToY -= AndroidUtilities.statusBarHeight / 2;
                                    }
                                    this.animateToScale = (min2 / min) * this.savedScale;
                                    this.animateToRotate = this.savedRotation;
                                    this.animateToMirror = this.mirror;
                                } else {
                                    this.animateToScale = (min2 / min) * scale1();
                                    this.animateToX = 0.0f;
                                    this.translationX = (getLeftInset() / 2) - (getRightInset() / 2);
                                    if (this.sendPhotoType != 1) {
                                        int i18 = this.currentEditMode;
                                        if (i18 == 2) {
                                            this.animateToY = AndroidUtilities.dp(36.0f);
                                        } else if (i18 == 3) {
                                            float f14 = -AndroidUtilities.dp(12.0f);
                                            this.animateToY = f14;
                                            if (this.photoPaintView != null) {
                                                this.animateToY = f14 - (lPhotoPaintView2.getAdditionalTop() / 2.0f);
                                            }
                                        }
                                    } else {
                                        int i19 = this.currentEditMode;
                                        if (i19 == 1) {
                                            this.animateToY = AndroidUtilities.dp(56.0f);
                                        } else if (i19 == 2) {
                                            this.animateToY = AndroidUtilities.dp(93.0f);
                                        } else if (i19 == 3) {
                                            float dp2 = AndroidUtilities.dp(44.0f);
                                            this.animateToY = dp2;
                                            if (this.photoPaintView != null) {
                                                float additionalTop2 = dp2 - (lPhotoPaintView.getAdditionalTop() / 2.0f);
                                                this.animateToY = additionalTop2;
                                                this.animateToY = additionalTop2 + (this.photoPaintView.getAdditionalBottom() / 2.0f);
                                            }
                                        }
                                        if (isStatusBarVisible()) {
                                            this.animateToY -= AndroidUtilities.statusBarHeight / 2;
                                        }
                                    }
                                }
                                this.animationStartTime = System.currentTimeMillis();
                                this.zoomAnimation = true;
                            }
                        }
                        z = false;
                        if (this.currentEditMode == 4) {
                        }
                        if (this.sendPhotoType != 11) {
                        }
                        this.animateToScale = (min2 / min) * scale1();
                        this.animateToX = 0.0f;
                        this.translationX = (getLeftInset() / 2) - (getRightInset() / 2);
                        if (this.sendPhotoType != 1) {
                        }
                        this.animationStartTime = System.currentTimeMillis();
                        this.zoomAnimation = true;
                    }
                    this.padImageForHorizontalInsets = false;
                    this.imageMoveAnimation = new AnimatorSet();
                    ArrayList arrayList = new ArrayList(4);
                    int i20 = this.currentEditMode;
                    if (i20 == 1) {
                        arrayList.add(ObjectAnimator.ofFloat(this.editorDoneLayout, View.TRANSLATION_Y, AndroidUtilities.dp(48.0f)));
                        arrayList.add(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
                        arrayList.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 0.0f));
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda10
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.this.lambda$switchToEditMode$67(valueAnimator);
                            }
                        });
                        arrayList.add(ofFloat);
                    } else if (i20 == 2) {
                        this.photoFilterView.shutdown();
                        arrayList.add(ObjectAnimator.ofFloat(this.photoFilterView.getToolsView(), View.TRANSLATION_Y, AndroidUtilities.dp(186.0f)));
                        arrayList.add(ObjectAnimator.ofFloat(this.photoFilterView.getCurveControl(), View.ALPHA, 0.0f));
                        arrayList.add(ObjectAnimator.ofFloat(this.photoFilterView.getBlurControl(), View.ALPHA, 0.0f));
                        arrayList.add(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
                    } else if (i20 == 3) {
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.photoPaintView.getOffsetTranslationY(), AndroidUtilities.dp(126.0f));
                        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(0.0f, -AndroidUtilities.dp(12.0f));
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda14
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.this.lambda$switchToEditMode$68(valueAnimator);
                            }
                        });
                        ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda12
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.this.lambda$switchToEditMode$69(valueAnimator);
                            }
                        });
                        this.paintingOverlay.showAll();
                        this.containerView.invalidate();
                        this.photoPaintView.shutdown();
                        arrayList.add(ofFloat2);
                        arrayList.add(ofFloat3);
                        arrayList.add(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
                        this.photoPaintView.onAnimationStateChanged(true);
                    } else if (i20 == 4) {
                        c2 = 0;
                        arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.buttonsLayout, View.TRANSLATION_Y, AndroidUtilities.dp(18.0f)));
                        arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.buttonsLayout, View.ALPHA, 0.0f));
                        arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.weightChooserView, View.TRANSLATION_X, AndroidUtilities.dp(-18.0f)));
                        arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.weightChooserView, View.ALPHA, 0.0f));
                        View view = this.navigationBar;
                        ArgbEvaluator argbEvaluator = new ArgbEvaluator();
                        Object[] objArr = new Object[2];
                        objArr[c2] = Integer.valueOf(color);
                        objArr[1] = Integer.valueOf(i13);
                        arrayList.add(ObjectAnimator.ofObject(view, "backgroundColor", argbEvaluator, objArr));
                        this.imageMoveAnimation.playTogether(arrayList);
                        this.imageMoveAnimation.setDuration(200L);
                        this.imageMoveAnimation.addListener(new 55(i));
                        this.imageMoveAnimation.start();
                    }
                    c2 = 0;
                    View view2 = this.navigationBar;
                    ArgbEvaluator argbEvaluator2 = new ArgbEvaluator();
                    Object[] objArr2 = new Object[2];
                    objArr2[c2] = Integer.valueOf(color);
                    objArr2[1] = Integer.valueOf(i13);
                    arrayList.add(ObjectAnimator.ofObject(view2, "backgroundColor", argbEvaluator2, objArr2));
                    this.imageMoveAnimation.playTogether(arrayList);
                    this.imageMoveAnimation.setDuration(200L);
                    this.imageMoveAnimation.addListener(new 55(i));
                    this.imageMoveAnimation.start();
                } else {
                    if (i == 1) {
                        startVideoPlayer();
                        createCropView();
                        this.previousHasTransform = this.cropTransform.hasViewTransform();
                        this.previousCropPx = this.cropTransform.getCropPx();
                        this.previousCropPy = this.cropTransform.getCropPy();
                        this.previousCropScale = this.cropTransform.getScale();
                        this.previousCropRotation = this.cropTransform.getRotation();
                        this.previousCropOrientation = this.cropTransform.getOrientation();
                        this.previousCropPw = this.cropTransform.getCropPw();
                        this.previousCropPh = this.cropTransform.getCropPh();
                        this.previousCropMirrored = this.cropTransform.isMirrored();
                        this.photoCropView.onAppear();
                        this.editorDoneLayout.doneButton.setText(LocaleController.getString("Crop", R.string.Crop));
                        this.editorDoneLayout.doneButton.setTextColor(getThemedColor(Theme.key_chat_editMediaButton));
                        this.changeModeAnimation = new AnimatorSet();
                        ArrayList arrayList2 = new ArrayList();
                        FrameLayout frameLayout = this.pickerView;
                        Property property = View.TRANSLATION_Y;
                        float[] fArr = new float[2];
                        fArr[0] = 0.0f;
                        fArr[1] = frameLayout.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0);
                        arrayList2.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
                        arrayList2.add(ObjectAnimator.ofFloat(this.pickerView, View.ALPHA, 0.0f));
                        StickerMakerView stickerMakerView = this.stickerMakerView;
                        if (stickerMakerView != null) {
                            arrayList2.add(ObjectAnimator.ofFloat(stickerMakerView, View.ALPHA, 0.0f));
                        }
                        StickerMakerBackgroundView stickerMakerBackgroundView = this.stickerMakerBackgroundView;
                        if (stickerMakerBackgroundView != null) {
                            arrayList2.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView, View.ALPHA, 0.0f));
                        }
                        ImageView imageView = this.pickerViewSendButton;
                        Property property2 = View.TRANSLATION_Y;
                        float[] fArr2 = new float[2];
                        fArr2[0] = 0.0f;
                        fArr2[1] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                        arrayList2.add(ObjectAnimator.ofFloat(imageView, property2, fArr2));
                        arrayList2.add(ObjectAnimator.ofFloat(this.actionBar, View.TRANSLATION_Y, 0.0f, -actionBar4.getHeight()));
                        arrayList2.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i13)));
                        if (this.needCaptionLayout) {
                            CaptionTextViewSwitcher captionTextViewSwitcher = this.captionTextViewSwitcher;
                            Property property3 = View.TRANSLATION_Y;
                            float[] fArr3 = new float[2];
                            fArr3[0] = 0.0f;
                            fArr3[1] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                            arrayList2.add(ObjectAnimator.ofFloat(captionTextViewSwitcher, property3, fArr3));
                        }
                        int i21 = this.sendPhotoType;
                        if (i21 == 0 || i21 == 4) {
                            i8 = 2;
                            arrayList2.add(ObjectAnimator.ofFloat(this.checkImageView, View.ALPHA, 1.0f, 0.0f));
                            arrayList2.add(ObjectAnimator.ofFloat(this.photosCounterView, View.ALPHA, 1.0f, 0.0f));
                        } else {
                            i8 = 2;
                        }
                        if (this.selectedPhotosListView.getVisibility() == 0) {
                            float[] fArr4 = new float[i8];
                            // fill-array-data instruction
                            fArr4[0] = 1.0f;
                            fArr4[1] = 0.0f;
                            arrayList2.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.ALPHA, fArr4));
                        }
                        if (this.muteItem.getTag() != null) {
                            float[] fArr5 = new float[i8];
                            // fill-array-data instruction
                            fArr5[0] = 1.0f;
                            fArr5[1] = 0.0f;
                            arrayList2.add(ObjectAnimator.ofFloat(this.muteItem, View.ALPHA, fArr5));
                        }
                        View view3 = this.navigationBar;
                        if (view3 != null) {
                            arrayList2.add(ObjectAnimator.ofFloat(view3, View.ALPHA, 1.0f));
                        }
                        this.changeModeAnimation.playTogether(arrayList2);
                        this.changeModeAnimation.setDuration(200L);
                        this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                PhotoViewer photoViewer;
                                PhotoViewer.this.changeModeAnimation = null;
                                PhotoViewer.this.pickerView.setVisibility(8);
                                PhotoViewer.this.pickerViewSendButton.setVisibility(8);
                                PhotoViewer.this.doneButtonFullWidth.setVisibility(8);
                                PhotoViewer.this.muteItem.setVisibility(8);
                                PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                                PhotoViewer.this.selectedPhotosListView.setAlpha(0.0f);
                                PhotoViewer.this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
                                PhotoViewer.this.photosCounterView.setRotationX(0.0f);
                                PhotoViewer.this.selectedPhotosListView.setEnabled(false);
                                PhotoViewer.this.isPhotosListViewVisible = false;
                                if (PhotoViewer.this.needCaptionLayout) {
                                    PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                                }
                                if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                                    PhotoViewer.this.checkImageView.setVisibility(8);
                                    PhotoViewer.this.photosCounterView.setVisibility(8);
                                    PhotoViewer.this.updateActionBarTitlePadding();
                                }
                                if (PhotoViewer.this.sendPhotoType == 11) {
                                    PhotoViewer photoViewer2 = PhotoViewer.this;
                                    photoViewer2.savedTy = photoViewer2.translationY;
                                    PhotoViewer photoViewer3 = PhotoViewer.this;
                                    photoViewer3.savedTx = photoViewer3.translationX;
                                    PhotoViewer photoViewer4 = PhotoViewer.this;
                                    photoViewer4.savedScale = photoViewer4.scale;
                                    PhotoViewer photoViewer5 = PhotoViewer.this;
                                    photoViewer5.savedRotation = photoViewer5.rotate;
                                    PhotoViewer.this.animateToRotate = 0.0f;
                                }
                                Bitmap bitmap3 = PhotoViewer.this.centerImage.getBitmap();
                                if (bitmap3 != null || PhotoViewer.this.isCurrentVideo) {
                                    PhotoViewer.this.photoCropView.setBitmap(bitmap3, PhotoViewer.this.centerImage.getOrientation(), PhotoViewer.this.sendPhotoType != 1, false, PhotoViewer.this.paintingOverlay, PhotoViewer.this.cropTransform, PhotoViewer.this.isCurrentVideo ? (VideoEditTextureView) PhotoViewer.this.videoTextureView : null, PhotoViewer.this.editState.cropState);
                                    PhotoViewer.this.photoCropView.onDisappear();
                                    int bitmapWidth2 = PhotoViewer.this.centerImage.getBitmapWidth();
                                    int bitmapHeight2 = PhotoViewer.this.centerImage.getBitmapHeight();
                                    if (PhotoViewer.this.editState.cropState != null) {
                                        if (PhotoViewer.this.editState.cropState.transformRotation == 90 || PhotoViewer.this.editState.cropState.transformRotation == 270) {
                                            bitmapHeight2 = bitmapWidth2;
                                            bitmapWidth2 = bitmapHeight2;
                                        }
                                        bitmapWidth2 = (int) (bitmapWidth2 * PhotoViewer.this.editState.cropState.cropPw);
                                        bitmapHeight2 = (int) (bitmapHeight2 * PhotoViewer.this.editState.cropState.cropPh);
                                    }
                                    float f15 = bitmapWidth2;
                                    float f16 = bitmapHeight2;
                                    float min3 = Math.min(PhotoViewer.this.getContainerViewWidth() / f15, PhotoViewer.this.getContainerViewHeight() / f16);
                                    float min4 = Math.min(PhotoViewer.this.getContainerViewWidth(1) / f15, PhotoViewer.this.getContainerViewHeight(1) / f16);
                                    if (PhotoViewer.this.sendPhotoType == 1) {
                                        float min5 = Math.min(PhotoViewer.this.getContainerViewWidth(1), PhotoViewer.this.getContainerViewHeight(1));
                                        min4 = Math.max(min5 / f15, min5 / f16);
                                    }
                                    PhotoViewer.this.animateToScale = min4 / min3;
                                    PhotoViewer.this.animateToX = (photoViewer.getLeftInset() / 2) - (PhotoViewer.this.getRightInset() / 2);
                                    PhotoViewer.this.animateToY = (-AndroidUtilities.dp(56.0f)) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                                    PhotoViewer.this.animationStartTime = System.currentTimeMillis();
                                    PhotoViewer.this.zoomAnimation = true;
                                }
                                PhotoViewer.this.imageMoveAnimation = new AnimatorSet();
                                PhotoViewer.this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.editorDoneLayout, View.TRANSLATION_Y, AndroidUtilities.dp(48.0f), 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, View.ALPHA, 0.0f, 1.0f));
                                PhotoViewer.this.imageMoveAnimation.setDuration(200L);
                                PhotoViewer.this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56.1
                                    {
                                        56.this = this;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationStart(Animator animator2) {
                                        PhotoViewer.this.editorDoneLayout.setVisibility(0);
                                        PhotoViewer.this.photoCropView.setVisibility(0);
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator2) {
                                        PhotoViewer.this.photoCropView.onAppeared();
                                        PhotoViewer.this.photoCropView.onShow();
                                        PhotoViewer.this.imageMoveAnimation = null;
                                        56 r5 = 56.this;
                                        PhotoViewer.this.currentEditMode = i;
                                        PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                                        if (PhotoViewer.this.paintKeyboardNotifier != null) {
                                            PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                                        }
                                        if (PhotoViewer.this.currentEditMode != 3) {
                                            PhotoViewer.this.translateY = 0.0f;
                                        }
                                        PhotoViewer.this.switchingToMode = -1;
                                        PhotoViewer photoViewer6 = PhotoViewer.this;
                                        photoViewer6.scale = photoViewer6.animateToScale = 1.0f;
                                        PhotoViewer.this.animateToX = 0.0f;
                                        PhotoViewer.this.animateToY = 0.0f;
                                        PhotoViewer photoViewer7 = PhotoViewer.this;
                                        photoViewer7.updateMinMax(photoViewer7.scale);
                                        PhotoViewer.this.padImageForHorizontalInsets = true;
                                        PhotoViewer.this.containerView.invalidate();
                                    }
                                });
                                PhotoViewer.this.imageMoveAnimation.start();
                            }
                        });
                        this.changeModeAnimation.start();
                    } else if (i == 2) {
                        startVideoPlayer();
                        if (this.photoFilterView == null) {
                            if (this.imagesArrLocals.isEmpty()) {
                                str = null;
                                savedFilterState = null;
                                i5 = 0;
                            } else {
                                Object obj = this.imagesArrLocals.get(this.currentIndex);
                                i5 = obj instanceof MediaController.PhotoEntry ? ((MediaController.PhotoEntry) obj).orientation : 0;
                                MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                                MediaController.SavedFilterState savedFilterState2 = mediaEditState.savedFilterState;
                                str = mediaEditState.getPath();
                                savedFilterState = savedFilterState2;
                            }
                            if (this.videoTextureView != null) {
                                bitmap = null;
                            } else {
                                if (savedFilterState == null) {
                                    decodeFile = this.stickerMakerView.isSegmentedState() ? this.stickerMakerView.getSourceBitmap() : this.centerImage.getBitmap();
                                    i5 = this.centerImage.getOrientation();
                                } else {
                                    decodeFile = BitmapFactory.decodeFile(str);
                                }
                                bitmap = decodeFile;
                            }
                            int i22 = i5;
                            if (this.sendPhotoType == 1) {
                                i6 = 1;
                            } else if (this.isCurrentVideo || (i7 = this.currentImageHasFace) == 2) {
                                i6 = 2;
                            } else {
                                i6 = i7 == 1 ? 1 : 0;
                            }
                            Bitmap segmentedDarkMaskImage = this.stickerMakerView.getSegmentedDarkMaskImage();
                            Activity activity = this.parentActivity;
                            TextureView textureView = this.videoTextureView;
                            PhotoFilterView photoFilterView = new PhotoFilterView(activity, textureView != null ? (VideoEditTextureView) textureView : null, bitmap, segmentedDarkMaskImage, i22, savedFilterState, this.isCurrentVideo ? null : this.paintingOverlay, i6, textureView == null && (((cropState = this.editState.cropState) != null && cropState.mirrored) || this.cropTransform.isMirrored()), true, null, this.resourcesProvider);
                            this.photoFilterView = photoFilterView;
                            this.containerView.addView(photoFilterView, LayoutHelper.createFrame(-1, -1.0f));
                            this.photoFilterView.getDoneTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda40
                                @Override // android.view.View.OnClickListener
                                public final void onClick(View view4) {
                                    PhotoViewer.this.lambda$switchToEditMode$70(view4);
                                }
                            });
                            this.photoFilterView.getCancelTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda47
                                @Override // android.view.View.OnClickListener
                                public final void onClick(View view4) {
                                    PhotoViewer.this.lambda$switchToEditMode$72(view4);
                                }
                            });
                            this.photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(186.0f));
                        }
                        this.changeModeAnimation = new AnimatorSet();
                        ArrayList arrayList3 = new ArrayList();
                        FrameLayout frameLayout2 = this.pickerView;
                        Property property4 = View.TRANSLATION_Y;
                        float[] fArr6 = new float[2];
                        fArr6[0] = 0.0f;
                        fArr6[1] = frameLayout2.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0);
                        arrayList3.add(ObjectAnimator.ofFloat(frameLayout2, property4, fArr6));
                        arrayList3.add(ObjectAnimator.ofFloat(this.pickerView, View.ALPHA, 0.0f));
                        StickerMakerView stickerMakerView2 = this.stickerMakerView;
                        if (stickerMakerView2 != null) {
                            arrayList3.add(ObjectAnimator.ofFloat(stickerMakerView2, View.ALPHA, 0.0f));
                        }
                        StickerMakerBackgroundView stickerMakerBackgroundView2 = this.stickerMakerBackgroundView;
                        if (stickerMakerBackgroundView2 != null) {
                            arrayList3.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView2, View.ALPHA, 0.0f));
                        }
                        ImageView imageView2 = this.pickerViewSendButton;
                        Property property5 = View.TRANSLATION_Y;
                        float[] fArr7 = new float[2];
                        fArr7[0] = 0.0f;
                        fArr7[1] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                        arrayList3.add(ObjectAnimator.ofFloat(imageView2, property5, fArr7));
                        arrayList3.add(ObjectAnimator.ofFloat(this.actionBar, View.TRANSLATION_Y, 0.0f, -actionBar3.getHeight()));
                        int i23 = this.sendPhotoType;
                        if (i23 == 0 || i23 == 4) {
                            i4 = 2;
                            arrayList3.add(ObjectAnimator.ofFloat(this.checkImageView, View.ALPHA, 1.0f, 0.0f));
                            arrayList3.add(ObjectAnimator.ofFloat(this.photosCounterView, View.ALPHA, 1.0f, 0.0f));
                        } else if (i23 == 1) {
                            i4 = 2;
                            arrayList3.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 1.0f, 0.0f));
                        } else {
                            i4 = 2;
                        }
                        if (this.selectedPhotosListView.getVisibility() == 0) {
                            float[] fArr8 = new float[i4];
                            // fill-array-data instruction
                            fArr8[0] = 1.0f;
                            fArr8[1] = 0.0f;
                            arrayList3.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.ALPHA, fArr8));
                        }
                        if (this.muteItem.getTag() != null) {
                            float[] fArr9 = new float[i4];
                            // fill-array-data instruction
                            fArr9[0] = 1.0f;
                            fArr9[1] = 0.0f;
                            arrayList3.add(ObjectAnimator.ofFloat(this.muteItem, View.ALPHA, fArr9));
                        }
                        View view4 = this.navigationBar;
                        ArgbEvaluator argbEvaluator3 = new ArgbEvaluator();
                        Object[] objArr3 = new Object[i4];
                        objArr3[0] = Integer.valueOf(color);
                        objArr3[1] = Integer.valueOf(i13);
                        arrayList3.add(ObjectAnimator.ofObject(view4, "backgroundColor", argbEvaluator3, objArr3));
                        this.changeModeAnimation.playTogether(arrayList3);
                        this.changeModeAnimation.setDuration(200L);
                        this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.57
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                float min3;
                                PhotoViewer photoViewer;
                                PhotoViewer.this.changeModeAnimation = null;
                                PhotoViewer.this.pickerView.setVisibility(8);
                                PhotoViewer.this.pickerViewSendButton.setVisibility(8);
                                PhotoViewer.this.doneButtonFullWidth.setVisibility(8);
                                PhotoViewer.this.actionBar.setVisibility(8);
                                PhotoViewer.this.muteItem.setVisibility(8);
                                if (PhotoViewer.this.photoCropView != null) {
                                    PhotoViewer.this.photoCropView.setVisibility(4);
                                }
                                PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                                PhotoViewer.this.selectedPhotosListView.setAlpha(0.0f);
                                PhotoViewer.this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
                                PhotoViewer.this.photosCounterView.setRotationX(0.0f);
                                PhotoViewer.this.selectedPhotosListView.setEnabled(false);
                                PhotoViewer.this.isPhotosListViewVisible = false;
                                if (PhotoViewer.this.needCaptionLayout) {
                                    PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                                }
                                if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                                    PhotoViewer.this.checkImageView.setVisibility(8);
                                    PhotoViewer.this.photosCounterView.setVisibility(8);
                                    PhotoViewer.this.updateActionBarTitlePadding();
                                }
                                Bitmap bitmap3 = PhotoViewer.this.centerImage.getBitmap();
                                if (PhotoViewer.this.sendPhotoType == 11) {
                                    PhotoViewer photoViewer2 = PhotoViewer.this;
                                    photoViewer2.savedTy = photoViewer2.translationY;
                                    PhotoViewer photoViewer3 = PhotoViewer.this;
                                    photoViewer3.savedTx = photoViewer3.translationX;
                                    PhotoViewer photoViewer4 = PhotoViewer.this;
                                    photoViewer4.savedScale = photoViewer4.scale;
                                    PhotoViewer photoViewer5 = PhotoViewer.this;
                                    photoViewer5.savedRotation = photoViewer5.rotate;
                                    PhotoViewer.this.animateToRotate = 0.0f;
                                }
                                if (bitmap3 != null) {
                                    float bitmapWidth2 = PhotoViewer.this.centerImage.getBitmapWidth();
                                    float bitmapHeight2 = PhotoViewer.this.centerImage.getBitmapHeight();
                                    float min4 = Math.min(PhotoViewer.this.getContainerViewWidth(2) / bitmapWidth2, PhotoViewer.this.getContainerViewHeight(2) / bitmapHeight2);
                                    if (PhotoViewer.this.sendPhotoType == 1) {
                                        PhotoViewer.this.animateToY = -AndroidUtilities.dp(36.0f);
                                        min3 = PhotoViewer.this.getCropFillScale(false);
                                    } else {
                                        PhotoViewer.this.animateToY = (-AndroidUtilities.dp(93.0f)) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                                        min3 = (PhotoViewer.this.editState.cropState == null || !(PhotoViewer.this.editState.cropState.transformRotation == 90 || PhotoViewer.this.editState.cropState.transformRotation == 270)) ? Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapWidth2, PhotoViewer.this.getContainerViewHeight() / bitmapHeight2) : Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapHeight2, PhotoViewer.this.getContainerViewHeight() / bitmapWidth2);
                                    }
                                    PhotoViewer.this.animateToScale = min4 / min3;
                                    PhotoViewer.this.animateToX = (photoViewer.getLeftInset() / 2) - (PhotoViewer.this.getRightInset() / 2);
                                    PhotoViewer.this.animationStartTime = System.currentTimeMillis();
                                    PhotoViewer.this.zoomAnimation = true;
                                }
                                PhotoViewer.this.imageMoveAnimation = new AnimatorSet();
                                PhotoViewer.this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.photoFilterView.getToolsView(), View.TRANSLATION_Y, AndroidUtilities.dp(186.0f), 0.0f));
                                PhotoViewer.this.imageMoveAnimation.setDuration(200L);
                                PhotoViewer.this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.57.1
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationStart(Animator animator2) {
                                    }

                                    {
                                        57.this = this;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator2) {
                                        PhotoViewer.this.photoFilterView.init();
                                        PhotoViewer.this.imageMoveAnimation = null;
                                        57 r5 = 57.this;
                                        PhotoViewer.this.currentEditMode = i;
                                        PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                                        if (PhotoViewer.this.paintKeyboardNotifier != null) {
                                            PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                                        }
                                        if (PhotoViewer.this.currentEditMode != 3) {
                                            PhotoViewer.this.translateY = 0.0f;
                                        }
                                        PhotoViewer.this.switchingToMode = -1;
                                        PhotoViewer photoViewer6 = PhotoViewer.this;
                                        photoViewer6.scale = photoViewer6.animateToScale = 1.0f;
                                        PhotoViewer.this.animateToX = 0.0f;
                                        PhotoViewer.this.animateToY = 0.0f;
                                        PhotoViewer photoViewer7 = PhotoViewer.this;
                                        photoViewer7.updateMinMax(photoViewer7.scale);
                                        PhotoViewer.this.padImageForHorizontalInsets = true;
                                        PhotoViewer.this.containerView.invalidate();
                                    }
                                });
                                PhotoViewer.this.imageMoveAnimation.start();
                            }
                        });
                        this.changeModeAnimation.start();
                    } else if (i == 3) {
                        startVideoPlayer();
                        createPaintView();
                        this.changeModeAnimation = new AnimatorSet();
                        ArrayList arrayList4 = new ArrayList();
                        FrameLayout frameLayout3 = this.pickerView;
                        Property property6 = View.TRANSLATION_Y;
                        float[] fArr10 = new float[1];
                        fArr10[0] = frameLayout3.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0);
                        arrayList4.add(ObjectAnimator.ofFloat(frameLayout3, property6, fArr10));
                        arrayList4.add(ObjectAnimator.ofFloat(this.pickerView, View.ALPHA, 0.0f));
                        StickerMakerView stickerMakerView3 = this.stickerMakerView;
                        if (stickerMakerView3 != null) {
                            Property property7 = View.ALPHA;
                            float[] fArr11 = new float[1];
                            fArr11[0] = this.stickerEmpty ? 1.0f : 0.0f;
                            arrayList4.add(ObjectAnimator.ofFloat(stickerMakerView3, property7, fArr11));
                        }
                        StickerMakerBackgroundView stickerMakerBackgroundView3 = this.stickerMakerBackgroundView;
                        if (stickerMakerBackgroundView3 != null) {
                            Property property8 = View.ALPHA;
                            float[] fArr12 = new float[1];
                            if (this.stickerEmpty) {
                                c = 0;
                            } else {
                                c = 0;
                                f = 0.0f;
                            }
                            fArr12[c] = f;
                            arrayList4.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView3, property8, fArr12));
                        }
                        ImageView imageView3 = this.pickerViewSendButton;
                        Property property9 = View.TRANSLATION_Y;
                        float[] fArr13 = new float[1];
                        fArr13[0] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                        arrayList4.add(ObjectAnimator.ofFloat(imageView3, property9, fArr13));
                        arrayList4.add(ObjectAnimator.ofFloat(this.actionBar, View.TRANSLATION_Y, -actionBar2.getHeight()));
                        arrayList4.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i13)));
                        if (this.needCaptionLayout) {
                            CaptionTextViewSwitcher captionTextViewSwitcher2 = this.captionTextViewSwitcher;
                            Property property10 = View.TRANSLATION_Y;
                            float[] fArr14 = new float[1];
                            fArr14[0] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                            arrayList4.add(ObjectAnimator.ofFloat(captionTextViewSwitcher2, property10, fArr14));
                        }
                        int i24 = this.sendPhotoType;
                        if (i24 == 0 || i24 == 4) {
                            i3 = 2;
                            arrayList4.add(ObjectAnimator.ofFloat(this.checkImageView, View.ALPHA, 1.0f, 0.0f));
                            arrayList4.add(ObjectAnimator.ofFloat(this.photosCounterView, View.ALPHA, 1.0f, 0.0f));
                        } else if (i24 == 1) {
                            i3 = 2;
                            arrayList4.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 1.0f, 0.0f));
                        } else {
                            i3 = 2;
                        }
                        if (this.selectedPhotosListView.getVisibility() == 0) {
                            float[] fArr15 = new float[i3];
                            // fill-array-data instruction
                            fArr15[0] = 1.0f;
                            fArr15[1] = 0.0f;
                            arrayList4.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.ALPHA, fArr15));
                        }
                        if (this.muteItem.getTag() != null) {
                            float[] fArr16 = new float[i3];
                            // fill-array-data instruction
                            fArr16[0] = 1.0f;
                            fArr16[1] = 0.0f;
                            arrayList4.add(ObjectAnimator.ofFloat(this.muteItem, View.ALPHA, fArr16));
                        }
                        this.changeModeAnimation.playTogether(arrayList4);
                        this.changeModeAnimation.setDuration(200L);
                        this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.58
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                PhotoViewer.this.switchToPaintMode();
                            }
                        });
                        this.changeModeAnimation.start();
                    } else if (i == 4) {
                        createMaskPaintView();
                        this.changeModeAnimation = new AnimatorSet();
                        ArrayList arrayList5 = new ArrayList();
                        FrameLayout frameLayout4 = this.pickerView;
                        Property property11 = View.TRANSLATION_Y;
                        float[] fArr17 = new float[1];
                        fArr17[0] = frameLayout4.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0);
                        arrayList5.add(ObjectAnimator.ofFloat(frameLayout4, property11, fArr17));
                        arrayList5.add(ObjectAnimator.ofFloat(this.pickerView, View.ALPHA, 0.0f));
                        StickerMakerView stickerMakerView4 = this.stickerMakerView;
                        if (stickerMakerView4 != null) {
                            arrayList5.add(ObjectAnimator.ofFloat(stickerMakerView4, View.ALPHA, 1.0f));
                        }
                        StickerMakerBackgroundView stickerMakerBackgroundView4 = this.stickerMakerBackgroundView;
                        if (stickerMakerBackgroundView4 != null) {
                            arrayList5.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView4, View.ALPHA, 1.0f));
                        }
                        ImageView imageView4 = this.pickerViewSendButton;
                        Property property12 = View.TRANSLATION_Y;
                        float[] fArr18 = new float[1];
                        fArr18[0] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                        arrayList5.add(ObjectAnimator.ofFloat(imageView4, property12, fArr18));
                        arrayList5.add(ObjectAnimator.ofFloat(this.actionBar, View.TRANSLATION_Y, -actionBar.getHeight()));
                        arrayList5.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i13)));
                        if (this.needCaptionLayout) {
                            CaptionTextViewSwitcher captionTextViewSwitcher3 = this.captionTextViewSwitcher;
                            Property property13 = View.TRANSLATION_Y;
                            float[] fArr19 = new float[1];
                            fArr19[0] = AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f);
                            arrayList5.add(ObjectAnimator.ofFloat(captionTextViewSwitcher3, property13, fArr19));
                        }
                        int i25 = this.sendPhotoType;
                        if (i25 == 0 || i25 == 4) {
                            i2 = 2;
                            arrayList5.add(ObjectAnimator.ofFloat(this.checkImageView, View.ALPHA, 1.0f, 0.0f));
                            arrayList5.add(ObjectAnimator.ofFloat(this.photosCounterView, View.ALPHA, 1.0f, 0.0f));
                        } else if (i25 == 1) {
                            i2 = 2;
                            arrayList5.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 1.0f, 0.0f));
                        } else {
                            i2 = 2;
                        }
                        if (this.selectedPhotosListView.getVisibility() == 0) {
                            float[] fArr20 = new float[i2];
                            // fill-array-data instruction
                            fArr20[0] = 1.0f;
                            fArr20[1] = 0.0f;
                            arrayList5.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.ALPHA, fArr20));
                        }
                        if (this.muteItem.getTag() != null) {
                            float[] fArr21 = new float[i2];
                            // fill-array-data instruction
                            fArr21[0] = 1.0f;
                            fArr21[1] = 0.0f;
                            arrayList5.add(ObjectAnimator.ofFloat(this.muteItem, View.ALPHA, fArr21));
                        }
                        this.changeModeAnimation.playTogether(arrayList5);
                        this.changeModeAnimation.setDuration(200L);
                        this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.59
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                PhotoViewer.this.maskPaintView.init();
                                PhotoViewer.this.currentEditMode = i;
                                PhotoViewer.this.changeModeAnimation = null;
                                PhotoViewer.this.switchingToMode = -1;
                            }
                        });
                        this.changeModeAnimation.start();
                    }
                }
                FrameLayoutDrawer frameLayoutDrawer = this.containerView;
                if (frameLayoutDrawer != null) {
                    frameLayoutDrawer.updateExclusionRects();
                }
            }
        }
    }

    public /* synthetic */ void lambda$switchToEditMode$67(ValueAnimator valueAnimator) {
        this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue), AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue), AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue));
    }

    public /* synthetic */ void lambda$switchToEditMode$68(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationY(((Float) valueAnimator.getAnimatedValue()).floatValue(), 0.0f, 0, false);
    }

    public /* synthetic */ void lambda$switchToEditMode$69(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationX(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    /* loaded from: classes4.dex */
    public class 55 extends AnimatorListenerAdapter {
        final /* synthetic */ int val$mode;

        55(int i) {
            PhotoViewer.this = r1;
            this.val$mode = i;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            if (PhotoViewer.this.currentEditMode == 1) {
                PhotoViewer.this.photoCropView.onDisappear();
                PhotoViewer.this.photoCropView.onHide();
                PhotoViewer.this.editorDoneLayout.setVisibility(8);
                PhotoViewer.this.photoCropView.setVisibility(8);
                PhotoViewer.this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, 1.0f, 0.0f, 0.0f);
            } else if (PhotoViewer.this.currentEditMode == 2) {
                try {
                    PhotoViewer.this.containerView.removeView(PhotoViewer.this.photoFilterView);
                } catch (Exception e) {
                    FileLog.e(e);
                }
                PhotoViewer.this.photoFilterView = null;
            } else if (PhotoViewer.this.currentEditMode == 3) {
                PhotoViewer.this.photoPaintView.onAnimationStateChanged(false);
                try {
                    PhotoViewer.this.containerView.removeView(PhotoViewer.this.photoPaintView.getView());
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
                PhotoViewer.this.photoPaintView = null;
            } else if (PhotoViewer.this.currentEditMode == 4) {
                PhotoViewer.this.maskPaintViewShuttingDown = true;
                PhotoViewer.this.containerView.invalidate();
                final MaskPaintView maskPaintView = PhotoViewer.this.maskPaintView;
                PhotoViewer.this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$55$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.55.this.lambda$onAnimationEnd$0(maskPaintView);
                    }
                });
                PhotoViewer.this.maskPaintView = null;
                PhotoViewer.this.eraseBtn.setActive(false, true);
                PhotoViewer.this.restoreBtn.setActive(false, true);
            }
            PhotoViewer.this.imageMoveAnimation = null;
            int i = PhotoViewer.this.currentEditMode;
            PhotoViewer.this.currentEditMode = this.val$mode;
            PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
            if (PhotoViewer.this.paintKeyboardNotifier != null) {
                PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
            }
            if (PhotoViewer.this.currentEditMode != 3) {
                PhotoViewer.this.translateY = 0.0f;
            }
            PhotoViewer.this.applying = false;
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.photoCropView.setVisibility(0);
            }
            if (PhotoViewer.this.sendPhotoType == 11 && (i == 3 || i == 2 || i == 1 || i == 4)) {
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.animateToX = photoViewer.savedTx;
                PhotoViewer photoViewer2 = PhotoViewer.this;
                photoViewer2.animateToY = photoViewer2.savedTy;
                PhotoViewer photoViewer3 = PhotoViewer.this;
                photoViewer3.animateToScale = photoViewer3.savedScale;
                PhotoViewer photoViewer4 = PhotoViewer.this;
                photoViewer4.animateToRotate = photoViewer4.savedRotation;
            } else {
                PhotoViewer photoViewer5 = PhotoViewer.this;
                photoViewer5.scale = photoViewer5.animateToScale = photoViewer5.scale1(false);
                PhotoViewer photoViewer6 = PhotoViewer.this;
                photoViewer6.updateMinMax(photoViewer6.scale);
                PhotoViewer.this.animateToX = 0.0f;
                PhotoViewer.this.animateToY = 0.0f;
            }
            PhotoViewer.this.switchingToMode = -1;
            PhotoViewer.this.containerView.invalidate();
            if (PhotoViewer.this.savedState != null) {
                PhotoViewer.this.savedState.restore();
                PhotoViewer.this.savedState = null;
                ActionBarToggleParams enableStatusBarAnimation = new ActionBarToggleParams().enableStatusBarAnimation(false);
                PhotoViewer.this.toggleActionBar(false, false, enableStatusBarAnimation);
                PhotoViewer.this.toggleActionBar(true, true, enableStatusBarAnimation);
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            ArrayList arrayList = new ArrayList();
            arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.TRANSLATION_Y, 0.0f));
            arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.ALPHA, 1.0f));
            StickerMakerView stickerMakerView = PhotoViewer.this.stickerMakerView;
            if (stickerMakerView != null) {
                arrayList.add(ObjectAnimator.ofFloat(stickerMakerView, View.ALPHA, 1.0f));
            }
            if (PhotoViewer.this.stickerMakerBackgroundView != null) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.stickerMakerBackgroundView, View.ALPHA, 1.0f));
            }
            arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.pickerViewSendButton, View.TRANSLATION_Y, 0.0f));
            if (PhotoViewer.this.sendPhotoType != 1) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.actionBar, View.TRANSLATION_Y, 0.0f));
            }
            if (PhotoViewer.this.needCaptionLayout) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.captionTextViewSwitcher, View.TRANSLATION_Y, 0.0f));
            }
            if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.checkImageView, View.ALPHA, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.photosCounterView, View.ALPHA, 1.0f));
            } else if (PhotoViewer.this.sendPhotoType == 1) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, View.ALPHA, 1.0f));
            }
            if (PhotoViewer.this.muteItem.getTag() != null) {
                PhotoViewer.this.muteItem.setVisibility(0);
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.muteItem, View.ALPHA, 1.0f));
            }
            if (PhotoViewer.this.navigationBar != null) {
                PhotoViewer.this.navigationBar.setVisibility(0);
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, View.ALPHA, 1.0f));
            }
            animatorSet.playTogether(arrayList);
            animatorSet.setDuration(200L);
            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.55.1
                {
                    55.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationStart(Animator animator2) {
                    PhotoViewer.this.pickerView.setVisibility(0);
                    if (PhotoViewer.this.useFullWidthSendButton()) {
                        PhotoViewer.this.doneButtonFullWidth.setVisibility(0);
                    } else {
                        PhotoViewer.this.pickerViewSendButton.setVisibility(0);
                    }
                    PhotoViewer.this.actionBar.setVisibility(0);
                    if (PhotoViewer.this.needCaptionLayout) {
                        PhotoViewer.this.captionTextViewSwitcher.setVisibility(PhotoViewer.this.captionTextViewSwitcher.getTag() != null ? 0 : 4);
                    }
                    if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                        PhotoViewer.this.checkImageView.setVisibility(0);
                        PhotoViewer.this.photosCounterView.setVisibility(0);
                        PhotoViewer.this.updateActionBarTitlePadding();
                    }
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator2) {
                    if (PhotoViewer.this.videoConvertSupported && PhotoViewer.this.isCurrentVideo) {
                        PhotoViewer.this.updateVideoInfo();
                    }
                }
            });
            animatorSet.start();
        }

        public /* synthetic */ void lambda$onAnimationEnd$0(MaskPaintView maskPaintView) {
            maskPaintView.shutdown();
            try {
                PhotoViewer.this.containerView.removeView(maskPaintView);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public /* synthetic */ void lambda$switchToEditMode$70(View view) {
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$switchToEditMode$72(View view) {
        if (this.photoFilterView.hasChanges()) {
            Activity activity = this.parentActivity;
            if (activity == null) {
                return;
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(activity, this.resourcesProvider);
            builder.setMessage(LocaleController.getString("DiscardChanges", R.string.DiscardChanges));
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda19
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    PhotoViewer.this.lambda$switchToEditMode$71(dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showAlertDialog(builder);
            return;
        }
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$switchToEditMode$71(DialogInterface dialogInterface, int i) {
        switchToEditMode(0);
    }

    private void createMaskPaintView() {
        MediaController.CropState cropState;
        if (this.maskPaintView != null) {
            return;
        }
        if (this.sendPhotoType == 1) {
            cropState = new MediaController.CropState();
            cropState.transformRotation = this.cropTransform.getOrientation();
        } else {
            cropState = this.editState.cropState;
        }
        MediaController.CropState cropState2 = cropState;
        Bitmap createBitmap = Bitmap.createBitmap(this.centerImage.getBitmapWidth(), this.centerImage.getBitmapHeight(), Bitmap.Config.ARGB_8888);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null && stickerMakerView.getSourceBitmap() != null) {
            Bitmap sourceBitmap = this.stickerMakerView.getSourceBitmap();
            Canvas canvas = new Canvas(createBitmap);
            canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
            canvas.rotate(this.stickerMakerView.orientation);
            float width = createBitmap.getWidth() / ((this.stickerMakerView.orientation / 90) % 2 != 0 ? sourceBitmap.getHeight() : sourceBitmap.getWidth());
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(((-sourceBitmap.getWidth()) / 2.0f) * width, ((-sourceBitmap.getHeight()) / 2.0f) * width, (sourceBitmap.getWidth() / 2.0f) * width, (sourceBitmap.getHeight() / 2.0f) * width);
            canvas.drawBitmap(sourceBitmap, (Rect) null, rectF, new Paint(3));
        }
        Bitmap createBitmap2 = Bitmap.createBitmap(this.centerImage.getBitmapWidth(), this.centerImage.getBitmapHeight(), Bitmap.Config.ARGB_8888);
        if (this.centerImage.getBitmap() != null) {
            Bitmap bitmap = this.centerImage.getBitmap();
            Canvas canvas2 = new Canvas(createBitmap2);
            canvas2.translate(createBitmap2.getWidth() / 2.0f, createBitmap2.getHeight() / 2.0f);
            canvas2.rotate(this.centerImage.getOrientation());
            float width2 = createBitmap2.getWidth() / ((this.centerImage.getOrientation() / 90) % 2 != 0 ? bitmap.getHeight() : bitmap.getWidth());
            RectF rectF2 = AndroidUtilities.rectTmp;
            rectF2.set(((-bitmap.getWidth()) / 2.0f) * width2, ((-bitmap.getHeight()) / 2.0f) * width2, (bitmap.getWidth() / 2.0f) * width2, (bitmap.getHeight() / 2.0f) * width2);
            canvas2.drawBitmap(bitmap, (Rect) null, rectF2, new Paint(3));
        }
        MaskPaintView maskPaintView = new MaskPaintView(this.parentActivity, this.currentAccount, createBitmap2, createBitmap, this.centerImage.getOrientation(), cropState2) { // from class: org.telegram.ui.PhotoViewer.60
            {
                PhotoViewer.this = this;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.Paint.Views.MaskPaintView
            public void onRenderViewAlphaUpdate(ValueAnimator valueAnimator) {
                super.onRenderViewAlphaUpdate(valueAnimator);
                PhotoViewer.this.containerView.invalidate();
            }

            @Override // org.telegram.ui.Components.Paint.Views.MaskPaintView
            protected void onDrawn() {
                PhotoViewer.this.showEditStickerMode(true, true);
            }
        };
        this.maskPaintView = maskPaintView;
        maskPaintView.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda54
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createMaskPaintView$73(view);
            }
        });
        this.maskPaintView.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda27
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createMaskPaintView$74(view);
            }
        });
        this.maskPaintView.setEraser(this.maskPaintViewEraser);
        int indexOfChild = this.containerView.indexOfChild(this.btnLayout) - 1;
        if (indexOfChild < 0) {
            indexOfChild = this.containerView.getChildCount();
        }
        this.containerView.addView(this.maskPaintView, indexOfChild, LayoutHelper.createFrame(-1, -1.0f));
        this.maskPaintViewShuttingDown = false;
    }

    public /* synthetic */ void lambda$createMaskPaintView$73(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(false, true);
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$createMaskPaintView$74(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(false, true);
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    private void createPaintView() {
        int bitmapWidth;
        int bitmapHeight;
        MediaController.CropState cropState;
        if (this.photoPaintView == null) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
                bitmapWidth = videoEditTextureView.getVideoWidth();
                bitmapHeight = videoEditTextureView.getVideoHeight();
                while (true) {
                    if (bitmapWidth <= 1280 && bitmapHeight <= 1280) {
                        break;
                    }
                    bitmapWidth /= 2;
                    bitmapHeight /= 2;
                }
            } else {
                bitmapWidth = this.centerImage.getBitmapWidth();
                bitmapHeight = this.centerImage.getBitmapHeight();
            }
            Bitmap bitmap = this.paintingOverlay.getBitmap();
            Bitmap createBitmap = bitmap == null ? Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888) : bitmap;
            if (this.sendPhotoType == 1) {
                cropState = new MediaController.CropState();
                cropState.transformRotation = this.cropTransform.getOrientation();
            } else {
                cropState = this.editState.cropState;
            }
            MediaController.CropState cropState2 = cropState;
            KeyboardNotifier keyboardNotifier = new KeyboardNotifier(this.windowView, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda114
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$createPaintView$76((Integer) obj);
                }
            });
            this.paintKeyboardNotifier = keyboardNotifier;
            keyboardNotifier.ignore(this.currentEditMode != 3);
            Activity activity = this.parentActivity;
            LPhotoPaintView lPhotoPaintView = new LPhotoPaintView(activity, activity, this.currentAccount, createBitmap, this.isCurrentVideo ? null : this.centerImage.getBitmap(), this.centerImage.getOrientation(), this.editState.mediaEntities, cropState2, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda80
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$createPaintView$77();
                }
            }, this.resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.61
                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onOpenCloseStickersAlert(boolean z) {
                    if (PhotoViewer.this.videoPlayer == null) {
                        return;
                    }
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.cancelVideoPlayRunnable();
                    if (z) {
                        PhotoViewer.this.videoPlayer.pause();
                    } else {
                        PhotoViewer.this.videoPlayer.play();
                    }
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected int getPKeyboardHeight() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        return PhotoViewer.this.paintKeyboardNotifier.getKeyboardHeight();
                    }
                    return 0;
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onEmojiViewCloseByClick() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        PhotoViewer.this.paintKeyboardNotifier.awaitKeyboard();
                    }
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void updateKeyboard() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        PhotoViewer.this.paintKeyboardNotifier.fire();
                    }
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void didSetAnimatedSticker(RLottieDrawable rLottieDrawable) {
                    if (PhotoViewer.this.videoPlayer == null) {
                        return;
                    }
                    rLottieDrawable.setProgressMs(PhotoViewer.this.videoPlayer.getCurrentPosition() - (PhotoViewer.this.startTime > 0 ? PhotoViewer.this.startTime / 1000 : 0L));
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onTextAdd() {
                    PhotoViewer.this.windowView.isFocusable();
                }
            };
            this.photoPaintView = lPhotoPaintView;
            this.containerView.addView(lPhotoPaintView.getView(), LayoutHelper.createFrame(-1, -1.0f));
            this.photoPaintView.setOnDoneButtonClickedListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda78
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$createPaintView$78();
                }
            });
            this.photoPaintView.getCancelView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda43
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$createPaintView$79(view);
                }
            });
            this.photoPaintView.setOffsetTranslationY(AndroidUtilities.dp(126.0f), 0.0f, 0, false);
            this.photoPaintView.setOffsetTranslationX(-AndroidUtilities.dp(12.0f));
        }
    }

    public /* synthetic */ void lambda$createPaintView$76(Integer num) {
        this.photoPaintView.keyboardVisible = this.paintKeyboardNotifier.keyboardVisible();
        this.containerView.invalidate();
        Integer valueOf = Integer.valueOf(Math.max(num.intValue(), this.photoPaintView.getEmojiPadding(false)));
        translateY((!this.photoPaintView.isCurrentText() || valueOf.intValue() <= 0) ? 0.0f : ((AndroidUtilities.displaySize.y - valueOf.intValue()) - AndroidUtilities.dp(80.0f)) - this.photoPaintView.getSelectedEntityBottom());
        AnimatorSet animatorSet = this.paintKeyboardAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda2
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$createPaintView$75(valueAnimator);
            }
        });
        AnimatorSet animatorSet2 = new AnimatorSet();
        this.paintKeyboardAnimator = animatorSet2;
        Animator[] animatorArr = new Animator[6];
        animatorArr[0] = ObjectAnimator.ofFloat(this.photoPaintView.weightChooserView, View.TRANSLATION_Y, (-valueOf.intValue()) / 2.5f);
        animatorArr[1] = ObjectAnimator.ofFloat(this.photoPaintView.bottomLayout, View.TRANSLATION_Y, Math.min(0, (-valueOf.intValue()) + AndroidUtilities.dp(40.0f)));
        LinearLayout linearLayout = this.photoPaintView.tabsLayout;
        Property property = View.ALPHA;
        float[] fArr = new float[1];
        fArr[0] = valueOf.intValue() > AndroidUtilities.dp(20.0f) ? 0.0f : 1.0f;
        animatorArr[2] = ObjectAnimator.ofFloat(linearLayout, property, fArr);
        PaintCancelView paintCancelView = this.photoPaintView.cancelButton;
        Property property2 = View.ALPHA;
        float[] fArr2 = new float[1];
        fArr2[0] = valueOf.intValue() > AndroidUtilities.dp(20.0f) ? 0.0f : 1.0f;
        animatorArr[3] = ObjectAnimator.ofFloat(paintCancelView, property2, fArr2);
        PaintDoneView paintDoneView = this.photoPaintView.doneButton;
        Property property3 = View.ALPHA;
        float[] fArr3 = new float[1];
        fArr3[0] = valueOf.intValue() <= AndroidUtilities.dp(20.0f) ? 1.0f : 0.0f;
        animatorArr[4] = ObjectAnimator.ofFloat(paintDoneView, property3, fArr3);
        animatorArr[5] = ofFloat;
        animatorSet2.playTogether(animatorArr);
        animatorSet2.setDuration(320L);
        animatorSet2.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        animatorSet2.start();
        this.photoPaintView.updatePlusEmojiKeyboardButton();
    }

    public /* synthetic */ void lambda$createPaintView$75(ValueAnimator valueAnimator) {
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.overlayLayout.invalidate();
        }
    }

    public /* synthetic */ void lambda$createPaintView$77() {
        this.paintingOverlay.hideBitmap();
    }

    public /* synthetic */ void lambda$createPaintView$78() {
        this.savedState = null;
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$createPaintView$79(View view) {
        closePaintMode();
    }

    private void translateY(float f) {
        ValueAnimator valueAnimator = this.translateYAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
            this.translateYAnimator = null;
        }
        if (this.currentEditMode != 3) {
            f = 0.0f;
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(this.translateY, f);
        this.translateYAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda5
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                PhotoViewer.this.lambda$translateY$80(valueAnimator2);
            }
        });
        this.translateYAnimator.setDuration(320L);
        this.translateYAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        this.translateYAnimator.start();
    }

    public /* synthetic */ void lambda$translateY$80(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.translateY = floatValue;
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.translateY(floatValue);
        }
        this.containerView.invalidate();
    }

    private void closePaintMode() {
        this.photoPaintView.maybeShowDismissalAlert(this, this.parentActivity, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda83
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$closePaintMode$81();
            }
        });
    }

    public /* synthetic */ void lambda$closePaintMode$81() {
        switchToEditMode(0);
    }

    public void switchToPaintMode() {
        EditState editState;
        LPhotoPaintView lPhotoPaintView;
        LPhotoPaintView lPhotoPaintView2;
        this.changeModeAnimation = null;
        this.pickerView.setVisibility(8);
        this.pickerViewSendButton.setVisibility(8);
        this.doneButtonFullWidth.setVisibility(8);
        this.muteItem.setVisibility(8);
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.setVisibility(4);
        }
        this.selectedPhotosListView.setVisibility(8);
        this.selectedPhotosListView.setAlpha(0.0f);
        this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
        this.photosCounterView.setRotationX(0.0f);
        this.selectedPhotosListView.setEnabled(false);
        this.isPhotosListViewVisible = false;
        if (this.needCaptionLayout) {
            this.captionTextViewSwitcher.setVisibility(4);
        }
        int i = this.sendPhotoType;
        if (i == 0 || i == 4 || ((i == 2 || i == 5) && this.imagesArrLocals.size() > 1)) {
            this.checkImageView.setVisibility(8);
            this.photosCounterView.setVisibility(8);
            updateActionBarTitlePadding();
        }
        showEditCaption(false, true);
        showStickerMode(false, false, true);
        Bitmap bitmap = this.centerImage.getBitmap();
        float f = this.scale;
        if (this.sendPhotoType == 11) {
            this.savedTy = this.translationY;
            this.savedTx = this.translationX;
            this.savedScale = f;
            this.savedRotation = this.rotate;
            this.animateToRotate = 0.0f;
        }
        if (bitmap != null) {
            int bitmapWidth = this.centerImage.getBitmapWidth();
            int bitmapHeight = this.centerImage.getBitmapHeight();
            if (this.sendPhotoType == 1) {
                float dp = AndroidUtilities.dp(12.0f);
                this.animateToY = dp;
                if (this.photoPaintView != null) {
                    this.animateToY = dp + (lPhotoPaintView2.getAdditionalTop() / 2.0f);
                }
                if (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270) {
                    bitmapHeight = bitmapWidth;
                    bitmapWidth = bitmapHeight;
                }
            } else {
                float f2 = (-AndroidUtilities.dp(44.0f)) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                this.animateToY = f2;
                if (this.photoPaintView != null) {
                    float additionalTop = f2 + (lPhotoPaintView.getAdditionalTop() / 2.0f);
                    this.animateToY = additionalTop;
                    this.animateToY = additionalTop - (this.photoPaintView.getAdditionalBottom() / 2.0f);
                }
                MediaController.CropState cropState = this.editState.cropState;
                if (cropState != null) {
                    int i2 = cropState.transformRotation;
                    if (i2 == 90 || i2 == 270) {
                        bitmapHeight = bitmapWidth;
                        bitmapWidth = bitmapHeight;
                    }
                    bitmapWidth = (int) (bitmapWidth * cropState.cropPw);
                    bitmapHeight = (int) (bitmapHeight * cropState.cropPh);
                }
            }
            float f3 = bitmapWidth;
            float f4 = bitmapHeight;
            this.animateToScale = (Math.min(getContainerViewWidth(3) / f3, getContainerViewHeight(3) / f4) / Math.min(getContainerViewWidth() / f3, getContainerViewHeight() / f4)) * scale1(false);
            this.animateToX = (getLeftInset() / 2) - (getRightInset() / 2);
            this.animationStartTime = System.currentTimeMillis();
            this.zoomAnimation = true;
        }
        LPhotoPaintView lPhotoPaintView3 = this.photoPaintView;
        if (lPhotoPaintView3 != null) {
            lPhotoPaintView3.setDrawShadow(this.sendPhotoType == 11 && ((editState = this.editState) == null || editState.cropState == null));
        }
        this.windowView.setClipChildren(true);
        this.navigationBar.setVisibility(4);
        this.imageMoveAnimation = new AnimatorSet();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.dp(126.0f), 0.0f);
        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(-AndroidUtilities.dp(12.0f), 0.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda1
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$switchToPaintMode$82(valueAnimator);
            }
        });
        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda6
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$switchToPaintMode$83(valueAnimator);
            }
        });
        this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ofFloat, ofFloat2);
        this.photoPaintView.onAnimationStateChanged(true);
        this.imageMoveAnimation.setDuration(200L);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.62
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.photoPaintView.onAnimationStateChanged(false);
                PhotoViewer.this.photoPaintView.init();
                PhotoViewer.this.paintingOverlay.hideEntities();
                PhotoViewer.this.imageMoveAnimation = null;
                PhotoViewer.this.currentEditMode = 3;
                PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                if (PhotoViewer.this.paintKeyboardNotifier != null) {
                    PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                }
                PhotoViewer.this.switchingToMode = -1;
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.animateToScale = photoViewer.scale = photoViewer.scale1(false);
                PhotoViewer.this.animateToX = 0.0f;
                PhotoViewer.this.animateToY = 0.0f;
                PhotoViewer photoViewer2 = PhotoViewer.this;
                photoViewer2.updateMinMax(photoViewer2.scale);
                PhotoViewer.this.padImageForHorizontalInsets = true;
                PhotoViewer.this.containerView.invalidate();
                if (PhotoViewer.this.placeProvider == null || !PhotoViewer.this.placeProvider.closeKeyboard()) {
                    PhotoViewer.this.makeFocusable();
                }
            }
        });
        this.imageMoveAnimation.start();
    }

    public /* synthetic */ void lambda$switchToPaintMode$82(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationY(((Float) valueAnimator.getAnimatedValue()).floatValue(), 0.0f, 0, false);
    }

    public /* synthetic */ void lambda$switchToPaintMode$83(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationX(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    private void toggleCheckImageView(boolean z) {
        AnimatorSet animatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        float dpf2 = AndroidUtilities.dpf2(24.0f);
        FrameLayout frameLayout = this.pickerView;
        Property property = View.ALPHA;
        float[] fArr = new float[1];
        fArr[0] = z ? 1.0f : 0.0f;
        arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
        FrameLayout frameLayout2 = this.pickerView;
        Property property2 = View.TRANSLATION_Y;
        float[] fArr2 = new float[1];
        fArr2[0] = z ? 0.0f : dpf2;
        arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, fArr2));
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            Property property3 = View.ALPHA;
            float[] fArr3 = new float[1];
            fArr3[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(stickerMakerView, property3, fArr3));
        }
        if (this.stickerMakerView != null) {
            StickerMakerBackgroundView stickerMakerBackgroundView = this.stickerMakerBackgroundView;
            Property property4 = View.ALPHA;
            float[] fArr4 = new float[1];
            fArr4[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView, property4, fArr4));
        }
        ImageView imageView = this.pickerViewSendButton;
        Property property5 = View.ALPHA;
        float[] fArr5 = new float[1];
        fArr5[0] = z ? 1.0f : 0.0f;
        arrayList.add(ObjectAnimator.ofFloat(imageView, property5, fArr5));
        ImageView imageView2 = this.pickerViewSendButton;
        Property property6 = View.TRANSLATION_Y;
        float[] fArr6 = new float[1];
        fArr6[0] = z ? 0.0f : dpf2;
        arrayList.add(ObjectAnimator.ofFloat(imageView2, property6, fArr6));
        int i = this.sendPhotoType;
        if (i == 0 || i == 4) {
            CheckBox checkBox = this.checkImageView;
            Property property7 = View.ALPHA;
            float[] fArr7 = new float[1];
            fArr7[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(checkBox, property7, fArr7));
            CheckBox checkBox2 = this.checkImageView;
            Property property8 = View.TRANSLATION_Y;
            float[] fArr8 = new float[1];
            fArr8[0] = z ? 0.0f : -dpf2;
            arrayList.add(ObjectAnimator.ofFloat(checkBox2, property8, fArr8));
            CounterView counterView = this.photosCounterView;
            Property property9 = View.ALPHA;
            float[] fArr9 = new float[1];
            fArr9[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(counterView, property9, fArr9));
            CounterView counterView2 = this.photosCounterView;
            Property property10 = View.TRANSLATION_Y;
            float[] fArr10 = new float[1];
            fArr10[0] = z ? 0.0f : -dpf2;
            arrayList.add(ObjectAnimator.ofFloat(counterView2, property10, fArr10));
        }
        animatorSet.playTogether(arrayList);
        animatorSet.setDuration(200L);
        animatorSet.start();
        if (z || !isCaptionOpen()) {
            return;
        }
        if (this.captionEdit.editText.isPopupShowing()) {
            this.captionEdit.editText.hidePopup(true);
        }
        this.captionEdit.editText.closeKeyboard();
    }

    private void toggleMiniProgressInternal(final boolean z) {
        if (z) {
            this.miniProgressView.setVisibility(0);
        }
        AnimatorSet animatorSet = new AnimatorSet();
        this.miniProgressAnimator = animatorSet;
        Animator[] animatorArr = new Animator[1];
        RadialProgressView radialProgressView = this.miniProgressView;
        Property property = View.ALPHA;
        float[] fArr = new float[1];
        fArr[0] = z ? 1.0f : 0.0f;
        animatorArr[0] = ObjectAnimator.ofFloat(radialProgressView, property, fArr);
        animatorSet.playTogether(animatorArr);
        this.miniProgressAnimator.setDuration(200L);
        this.miniProgressAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.63
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (animator.equals(PhotoViewer.this.miniProgressAnimator)) {
                    if (!z) {
                        PhotoViewer.this.miniProgressView.setVisibility(4);
                    }
                    PhotoViewer.this.miniProgressAnimator = null;
                }
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                if (animator.equals(PhotoViewer.this.miniProgressAnimator)) {
                    PhotoViewer.this.miniProgressAnimator = null;
                }
            }
        });
        this.miniProgressAnimator.start();
    }

    private void toggleMiniProgress(boolean z, boolean z2) {
        AndroidUtilities.cancelRunOnUIThread(this.miniProgressShowRunnable);
        if (z2) {
            toggleMiniProgressInternal(z);
            if (z) {
                AnimatorSet animatorSet = this.miniProgressAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.miniProgressAnimator = null;
                }
                if (this.firstAnimationDelay) {
                    this.firstAnimationDelay = false;
                    toggleMiniProgressInternal(true);
                    return;
                }
                AndroidUtilities.runOnUIThread(this.miniProgressShowRunnable, 500L);
                return;
            }
            AnimatorSet animatorSet2 = this.miniProgressAnimator;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                toggleMiniProgressInternal(false);
                return;
            }
            return;
        }
        AnimatorSet animatorSet3 = this.miniProgressAnimator;
        if (animatorSet3 != null) {
            animatorSet3.cancel();
            this.miniProgressAnimator = null;
        }
        this.miniProgressView.setAlpha(z ? 1.0f : 0.0f);
        this.miniProgressView.setVisibility(z ? 0 : 4);
    }

    private void updateContainerFlags(boolean z) {
        FrameLayoutDrawer frameLayoutDrawer;
        if (Build.VERSION.SDK_INT < 21 || this.sendPhotoType == 1 || (frameLayoutDrawer = this.containerView) == null) {
            return;
        }
        int i = 1792;
        if (!z) {
            i = 1796;
            if (frameLayoutDrawer.getPaddingLeft() > 0 || this.containerView.getPaddingRight() > 0) {
                i = 5894;
            }
        }
        this.containerView.setSystemUiVisibility(i);
    }

    /* loaded from: classes4.dex */
    public static class ActionBarToggleParams {
        public static final ActionBarToggleParams DEFAULT = new ActionBarToggleParams();
        public Interpolator animationInterpolator;
        public int animationDuration = 200;
        public boolean enableStatusBarAnimation = true;
        public boolean enableTranslationAnimation = true;

        public ActionBarToggleParams enableStatusBarAnimation(boolean z) {
            this.enableStatusBarAnimation = z;
            return this;
        }

        public ActionBarToggleParams enableTranslationAnimation(boolean z) {
            this.enableTranslationAnimation = z;
            return this;
        }

        public ActionBarToggleParams animationDuration(int i) {
            this.animationDuration = i;
            return this;
        }

        public ActionBarToggleParams animationInterpolator(Interpolator interpolator) {
            this.animationInterpolator = interpolator;
            return this;
        }
    }

    public void toggleActionBar(boolean z, boolean z2) {
        toggleActionBar(z, z2, ActionBarToggleParams.DEFAULT);
    }

    public void toggleActionBar(final boolean z, boolean z2, ActionBarToggleParams actionBarToggleParams) {
        CaptionScrollView captionScrollView;
        CaptionScrollView captionScrollView2;
        if (this.currentEditMode == 0) {
            int i = this.switchingToMode;
            if (i == 0 || i == -1) {
                AnimatorSet animatorSet = this.actionBarAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                if (z) {
                    this.actionBar.setVisibility(0);
                    if (this.bottomLayout.getTag() != null) {
                        this.bottomLayout.setVisibility(0);
                    }
                    if (this.captionTextViewSwitcher.getTag() != null) {
                        this.captionTextViewSwitcher.setVisibility(0);
                        VideoSeekPreviewImage videoSeekPreviewImage = this.videoPreviewFrame;
                        if (videoSeekPreviewImage != null) {
                            videoSeekPreviewImage.requestLayout();
                        }
                    }
                }
                this.isActionBarVisible = z;
                PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
                if (photoViewerWebView != null) {
                    photoViewerWebView.setTouchDisabled(z);
                }
                if (actionBarToggleParams.enableStatusBarAnimation) {
                    updateContainerFlags(z);
                }
                if (this.videoPlayerControlVisible && this.isPlaying && z) {
                    scheduleActionBarHide();
                } else {
                    AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
                }
                if (!z) {
                    Bulletin.hide(this.containerView);
                }
                float dpf2 = AndroidUtilities.dpf2(24.0f);
                this.videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(actionBarToggleParams.enableTranslationAnimation && this.playerLooping);
                this.videoPlayerControlFrameLayout.setTranslationYAnimationEnabled(actionBarToggleParams.enableTranslationAnimation);
                if (z2) {
                    ArrayList arrayList = new ArrayList();
                    ActionBar actionBar = this.actionBar;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z ? 1.0f : 0.0f;
                    arrayList.add(ObjectAnimator.ofFloat(actionBar, property, fArr));
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        ActionBar actionBar2 = this.actionBar;
                        Property property2 = View.TRANSLATION_Y;
                        float[] fArr2 = new float[1];
                        fArr2[0] = z ? 0.0f : -dpf2;
                        arrayList.add(ObjectAnimator.ofFloat(actionBar2, property2, fArr2));
                    } else {
                        this.actionBar.setTranslationY(0.0f);
                    }
                    if (this.allowShowFullscreenButton) {
                        ImageView imageView = this.fullscreenButton[0];
                        Property property3 = View.ALPHA;
                        float[] fArr3 = new float[1];
                        fArr3[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(imageView, property3, fArr3));
                    }
                    for (int i2 = 1; i2 < 3; i2++) {
                        this.fullscreenButton[i2].setTranslationY(z ? 0.0f : dpf2);
                    }
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        ImageView imageView2 = this.fullscreenButton[0];
                        Property property4 = View.TRANSLATION_Y;
                        float[] fArr4 = new float[1];
                        fArr4[0] = z ? 0.0f : dpf2;
                        arrayList.add(ObjectAnimator.ofFloat(imageView2, property4, fArr4));
                    } else {
                        this.fullscreenButton[0].setTranslationY(0.0f);
                    }
                    FrameLayout frameLayout = this.bottomLayout;
                    if (frameLayout != null) {
                        Property property5 = View.ALPHA;
                        float[] fArr5 = new float[1];
                        fArr5[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(frameLayout, property5, fArr5));
                        if (actionBarToggleParams.enableTranslationAnimation) {
                            FrameLayout frameLayout2 = this.bottomLayout;
                            Property property6 = View.TRANSLATION_Y;
                            float[] fArr6 = new float[1];
                            fArr6[0] = z ? 0.0f : dpf2;
                            arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property6, fArr6));
                        } else {
                            this.bottomLayout.setTranslationY(0.0f);
                        }
                    }
                    PhotoCountView photoCountView = this.countView;
                    if (photoCountView != null) {
                        Property property7 = View.ALPHA;
                        float[] fArr7 = new float[1];
                        fArr7[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(photoCountView, property7, fArr7));
                        if (actionBarToggleParams.enableTranslationAnimation) {
                            PhotoCountView photoCountView2 = this.countView;
                            Property property8 = View.TRANSLATION_Y;
                            float[] fArr8 = new float[1];
                            fArr8[0] = z ? 0.0f : -dpf2;
                            arrayList.add(ObjectAnimator.ofFloat(photoCountView2, property8, fArr8));
                        } else {
                            this.countView.setTranslationY(0.0f);
                        }
                    }
                    View view = this.navigationBar;
                    if (view != null) {
                        Property property9 = View.ALPHA;
                        float[] fArr9 = new float[1];
                        fArr9[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(view, property9, fArr9));
                    }
                    if (this.videoPlayerControlVisible) {
                        VideoPlayerControlFrameLayout videoPlayerControlFrameLayout = this.videoPlayerControlFrameLayout;
                        Property<VideoPlayerControlFrameLayout, Float> property10 = VPC_PROGRESS;
                        float[] fArr10 = new float[1];
                        fArr10[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(videoPlayerControlFrameLayout, property10, fArr10));
                    } else {
                        this.videoPlayerControlFrameLayout.setProgress(z ? 1.0f : 0.0f);
                    }
                    GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
                    Property property11 = View.ALPHA;
                    float[] fArr11 = new float[1];
                    fArr11[0] = z ? 1.0f : 0.0f;
                    arrayList.add(ObjectAnimator.ofFloat(groupedPhotosListView, property11, fArr11));
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        GroupedPhotosListView groupedPhotosListView2 = this.groupedPhotosListView;
                        Property property12 = View.TRANSLATION_Y;
                        float[] fArr12 = new float[1];
                        fArr12[0] = z ? 0.0f : dpf2;
                        arrayList.add(ObjectAnimator.ofFloat(groupedPhotosListView2, property12, fArr12));
                    } else {
                        this.groupedPhotosListView.setTranslationY(0.0f);
                    }
                    if (!this.needCaptionLayout && (captionScrollView2 = this.captionScrollView) != null) {
                        Property property13 = View.ALPHA;
                        float[] fArr13 = new float[1];
                        fArr13[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(captionScrollView2, property13, fArr13));
                        if (actionBarToggleParams.enableTranslationAnimation) {
                            CaptionScrollView captionScrollView3 = this.captionScrollView;
                            Property property14 = View.TRANSLATION_Y;
                            float[] fArr14 = new float[1];
                            if (z) {
                                dpf2 = 0.0f;
                            }
                            fArr14[0] = dpf2;
                            arrayList.add(ObjectAnimator.ofFloat(captionScrollView3, property14, fArr14));
                        } else {
                            this.captionScrollView.setTranslationY(0.0f);
                        }
                    }
                    if (this.videoPlayerControlVisible && this.isPlaying) {
                        float[] fArr15 = new float[2];
                        fArr15[0] = this.photoProgressViews[0].animAlphas[1];
                        fArr15[1] = z ? 1.0f : 0.0f;
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(fArr15);
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda4
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.this.lambda$toggleActionBar$84(valueAnimator);
                            }
                        });
                        arrayList.add(ofFloat);
                    }
                    if (this.muteItem.getTag() != null) {
                        ImageView imageView3 = this.muteItem;
                        Property property15 = View.ALPHA;
                        float[] fArr16 = new float[1];
                        fArr16[0] = z ? 1.0f : 0.0f;
                        arrayList.add(ObjectAnimator.ofFloat(imageView3, property15, fArr16));
                    }
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.actionBarAnimator = animatorSet2;
                    animatorSet2.playTogether(arrayList);
                    this.actionBarAnimator.setDuration(actionBarToggleParams.animationDuration);
                    this.actionBarAnimator.setInterpolator(actionBarToggleParams.animationInterpolator);
                    this.actionBarAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.64
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (animator.equals(PhotoViewer.this.actionBarAnimator)) {
                                if (!z) {
                                    PhotoViewer.this.actionBar.setVisibility(4);
                                    if (PhotoViewer.this.bottomLayout.getTag() != null) {
                                        PhotoViewer.this.bottomLayout.setVisibility(4);
                                    }
                                    if (PhotoViewer.this.captionTextViewSwitcher.getTag() != null) {
                                        PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                                    }
                                }
                                PhotoViewer.this.actionBarAnimator = null;
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (animator.equals(PhotoViewer.this.actionBarAnimator)) {
                                PhotoViewer.this.actionBarAnimator = null;
                            }
                        }
                    });
                    this.actionBarAnimator.start();
                    return;
                }
                this.actionBar.setAlpha(z ? 1.0f : 0.0f);
                if (this.fullscreenButton[0].getTranslationX() != 0.0f && this.allowShowFullscreenButton) {
                    this.fullscreenButton[0].setAlpha(z ? 1.0f : 0.0f);
                }
                for (int i3 = 0; i3 < 3; i3++) {
                    this.fullscreenButton[i3].setTranslationY(z ? 0.0f : dpf2);
                }
                this.actionBar.setTranslationY(z ? 0.0f : -dpf2);
                PhotoCountView photoCountView3 = this.countView;
                if (photoCountView3 != null) {
                    photoCountView3.setAlpha(z ? 1.0f : 0.0f);
                    this.countView.setTranslationY(z ? 0.0f : -dpf2);
                }
                this.bottomLayout.setAlpha(z ? 1.0f : 0.0f);
                this.bottomLayout.setTranslationY(z ? 0.0f : dpf2);
                this.navigationBar.setAlpha(z ? 1.0f : 0.0f);
                this.groupedPhotosListView.setAlpha((!z || this.aboutToSwitchTo == 3) ? 0.0f : 1.0f);
                this.groupedPhotosListView.setTranslationY((!z || this.aboutToSwitchTo == 3) ? dpf2 : 0.0f);
                if (!this.needCaptionLayout && (captionScrollView = this.captionScrollView) != null) {
                    captionScrollView.setAlpha(z ? 1.0f : 0.0f);
                    CaptionScrollView captionScrollView4 = this.captionScrollView;
                    if (z) {
                        dpf2 = 0.0f;
                    }
                    captionScrollView4.setTranslationY(dpf2);
                }
                this.videoPlayerControlFrameLayout.setProgress(z ? 1.0f : 0.0f);
                if (this.muteItem.getTag() != null) {
                    this.muteItem.setAlpha(z ? 1.0f : 0.0f);
                }
                if (this.videoPlayerControlVisible && this.isPlaying) {
                    this.photoProgressViews[0].setIndexedAlpha(1, z ? 1.0f : 0.0f, false);
                }
            }
        }
    }

    public /* synthetic */ void lambda$toggleActionBar$84(ValueAnimator valueAnimator) {
        this.photoProgressViews[0].setIndexedAlpha(1, ((Float) valueAnimator.getAnimatedValue()).floatValue(), false);
    }

    private void togglePhotosListView(boolean z, boolean z2) {
        if (z == this.isPhotosListViewVisible) {
            return;
        }
        if (z) {
            this.selectedPhotosListView.setVisibility(0);
        }
        this.isPhotosListViewVisible = z;
        this.selectedPhotosListView.setEnabled(z);
        if (z2) {
            ArrayList arrayList = new ArrayList();
            SelectedPhotosListView selectedPhotosListView = this.selectedPhotosListView;
            Property property = View.ALPHA;
            float[] fArr = new float[1];
            fArr[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(selectedPhotosListView, property, fArr));
            SelectedPhotosListView selectedPhotosListView2 = this.selectedPhotosListView;
            Property property2 = View.TRANSLATION_Y;
            float[] fArr2 = new float[1];
            fArr2[0] = z ? 0.0f : -AndroidUtilities.dp(10.0f);
            arrayList.add(ObjectAnimator.ofFloat(selectedPhotosListView2, property2, fArr2));
            CounterView counterView = this.photosCounterView;
            Property property3 = View.ROTATION_X;
            float[] fArr3 = new float[1];
            fArr3[0] = z ? 1.0f : 0.0f;
            arrayList.add(ObjectAnimator.ofFloat(counterView, property3, fArr3));
            AnimatorSet animatorSet = new AnimatorSet();
            this.currentListViewAnimation = animatorSet;
            animatorSet.playTogether(arrayList);
            if (!z) {
                this.currentListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.65
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (PhotoViewer.this.currentListViewAnimation == null || !PhotoViewer.this.currentListViewAnimation.equals(animator)) {
                            return;
                        }
                        PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                        PhotoViewer.this.currentListViewAnimation = null;
                    }
                });
            }
            this.currentListViewAnimation.setDuration(200L);
            this.currentListViewAnimation.start();
            return;
        }
        this.selectedPhotosListView.setAlpha(z ? 1.0f : 0.0f);
        this.selectedPhotosListView.setTranslationY(z ? 0.0f : -AndroidUtilities.dp(10.0f));
        this.photosCounterView.setRotationX(z ? 1.0f : 0.0f);
        if (z) {
            return;
        }
        this.selectedPhotosListView.setVisibility(8);
    }

    public void toggleVideoPlayer() {
        VideoPlayer videoPlayer;
        VideoPlayer videoPlayer2;
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            boolean isPlaying = this.videoPlayer != null ? this.isPlaying : this.photoViewerWebView.isPlaying();
            cancelVideoPlayRunnable();
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (isPlaying) {
                pauseVideoOrWeb();
            } else {
                if (this.isCurrentVideo) {
                    if (Math.abs(this.videoTimelineView.getProgress() - this.videoTimelineView.getRightProgress()) < 0.01f || ((videoPlayer2 = this.videoPlayer) != null && videoPlayer2.getCurrentPosition() == this.videoPlayer.getDuration())) {
                        seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                    }
                } else {
                    if (Math.abs(this.videoPlayerSeekbar.getProgress() - this.videoTimelineView.getRightProgress()) < 0.01f || ((videoPlayer = this.videoPlayer) != null && videoPlayer.getCurrentPosition() == this.videoPlayer.getDuration())) {
                        seekVideoOrWebToProgress(0.0f);
                    }
                    scheduleActionBarHide();
                }
                playVideoOrWeb();
            }
            this.containerView.invalidate();
        }
    }

    private String getFileName(int i) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            SecureDocument secureDocument = this.secureDocuments.get(i);
            return secureDocument.secureFile.dc_id + "_" + secureDocument.secureFile.id + ".jpg";
        } else if (!this.imagesArrLocations.isEmpty() || !this.imagesArr.isEmpty()) {
            if (!this.imagesArrLocations.isEmpty()) {
                if (i >= this.imagesArrLocations.size()) {
                    return null;
                }
                ImageLocation imageLocation = this.imagesArrLocations.get(i);
                ImageLocation imageLocation2 = this.imagesArrLocationsVideo.get(i);
                if (imageLocation == null) {
                    return null;
                }
                if (imageLocation2 != null && imageLocation2 != imageLocation) {
                    return imageLocation2.location.volume_id + "_" + imageLocation2.location.local_id + ".mp4";
                }
                return imageLocation.location.volume_id + "_" + imageLocation.location.local_id + ".jpg";
            } else if (i >= this.imagesArr.size()) {
                return null;
            } else {
                return FileLoader.getMessageFileName(this.imagesArr.get(i).messageOwner);
            }
        } else {
            if (!this.imagesArrLocals.isEmpty()) {
                if (i >= this.imagesArrLocals.size()) {
                    return null;
                }
                Object obj = this.imagesArrLocals.get(i);
                if (obj instanceof MediaController.SearchImage) {
                    return ((MediaController.SearchImage) obj).getAttachName();
                }
                if (obj instanceof TLRPC$BotInlineResult) {
                    TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) obj;
                    TLRPC$Document tLRPC$Document = tLRPC$BotInlineResult.document;
                    if (tLRPC$Document != null) {
                        return FileLoader.getAttachFileName(tLRPC$Document);
                    }
                    TLRPC$Photo tLRPC$Photo = tLRPC$BotInlineResult.photo;
                    if (tLRPC$Photo != null) {
                        return FileLoader.getAttachFileName(FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, AndroidUtilities.getPhotoSize()));
                    }
                    if (tLRPC$BotInlineResult.content instanceof TLRPC$TL_webDocument) {
                        StringBuilder sb = new StringBuilder();
                        sb.append(Utilities.MD5(tLRPC$BotInlineResult.content.url));
                        sb.append(".");
                        TLRPC$WebDocument tLRPC$WebDocument = tLRPC$BotInlineResult.content;
                        sb.append(ImageLoader.getHttpUrlExtension(tLRPC$WebDocument.url, FileLoader.getMimeTypePart(tLRPC$WebDocument.mime_type)));
                        return sb.toString();
                    }
                }
            } else {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    return pageBlocksAdapter.getFileName(i);
                }
            }
            return null;
        }
    }

    private ImageLocation getImageLocation(int i, long[] jArr) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            if (jArr != null) {
                jArr[0] = this.secureDocuments.get(i).secureFile.size;
            }
            return ImageLocation.getForSecureDocument(this.secureDocuments.get(i));
        } else if (!this.imagesArrLocations.isEmpty()) {
            if (i >= this.imagesArrLocations.size()) {
                return null;
            }
            if (jArr != null && this.imagesArrLocationsSizes.get(i) != null) {
                jArr[0] = this.imagesArrLocationsSizes.get(i).longValue();
            }
            return this.imagesArrLocationsVideo.get(i);
        } else if (this.imagesArr.isEmpty() || i >= this.imagesArr.size()) {
            return null;
        } else {
            MessageObject messageObject = this.imagesArr.get(i);
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            if (tLRPC$Message instanceof TLRPC$TL_messageService) {
                if (tLRPC$Message.action instanceof TLRPC$TL_messageActionUserUpdatedPhoto) {
                    return null;
                }
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                if (closestPhotoSizeWithSize != null) {
                    if (jArr != null) {
                        jArr[0] = closestPhotoSizeWithSize.size;
                        if (jArr[0] == 0) {
                            jArr[0] = -1;
                        }
                    }
                    return ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.photoThumbsObject);
                } else if (jArr != null) {
                    jArr[0] = -1;
                }
            } else {
                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.sponsoredMedia;
                if (tLRPC$MessageMedia != null) {
                    TLRPC$Document tLRPC$Document = tLRPC$MessageMedia.document;
                    if (tLRPC$Document != null) {
                        return ImageLocation.getForDocument(tLRPC$Document);
                    }
                    TLRPC$Photo tLRPC$Photo = tLRPC$MessageMedia.photo;
                    if (tLRPC$Photo != null) {
                        TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, AndroidUtilities.getPhotoSize(), false, null, true);
                        if (closestPhotoSizeWithSize2 != null) {
                            if (jArr != null) {
                                jArr[0] = closestPhotoSizeWithSize2.size;
                                if (jArr[0] == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return ImageLocation.getForObject(closestPhotoSizeWithSize2, messageObject.sponsoredMedia.photo);
                        } else if (jArr != null) {
                            jArr[0] = -1;
                        }
                    }
                } else if (((MessageObject.getMedia(tLRPC$Message) instanceof TLRPC$TL_messageMediaPhoto) && MessageObject.getMedia(messageObject.messageOwner).photo != null) || ((MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null)) {
                    if (messageObject.isGif()) {
                        return ImageLocation.getForDocument(messageObject.getDocument());
                    }
                    TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize(), false, null, true);
                    if (closestPhotoSizeWithSize3 != null) {
                        if (jArr != null) {
                            jArr[0] = closestPhotoSizeWithSize3.size;
                            if (jArr[0] == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return ImageLocation.getForObject(closestPhotoSizeWithSize3, messageObject.photoThumbsObject);
                    } else if (jArr != null) {
                        jArr[0] = -1;
                    }
                } else if (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaInvoice) {
                    return ImageLocation.getForWebFile(WebFile.createWithWebDocument(((TLRPC$TL_messageMediaInvoice) MessageObject.getMedia(messageObject.messageOwner)).webPhoto));
                } else {
                    if (messageObject.getDocument() != null) {
                        TLRPC$Document document = messageObject.getDocument();
                        if (this.sharedMediaType == 5) {
                            return ImageLocation.getForDocument(document);
                        }
                        if (MessageObject.isDocumentHasThumb(messageObject.getDocument())) {
                            TLRPC$PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(document.thumbs, 90);
                            if (jArr != null) {
                                jArr[0] = closestPhotoSizeWithSize4.size;
                                if (jArr[0] == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return ImageLocation.getForDocument(closestPhotoSizeWithSize4, document);
                        }
                    }
                }
            }
            return null;
        }
    }

    public TLObject getFileLocation(int i, long[] jArr) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            if (jArr != null) {
                jArr[0] = this.secureDocuments.get(i).secureFile.size;
            }
            return this.secureDocuments.get(i);
        } else if (!this.imagesArrLocations.isEmpty()) {
            if (i >= this.imagesArrLocations.size()) {
                return null;
            }
            if (jArr != null && this.imagesArrLocationsSizes.get(i) != null) {
                jArr[0] = this.imagesArrLocationsSizes.get(i).longValue();
            }
            if (this.imagesArrLocationsVideo.get(i) != null) {
                return this.imagesArrLocationsVideo.get(i).location;
            }
            return null;
        } else if (this.imagesArr.isEmpty() || i >= this.imagesArr.size()) {
            return null;
        } else {
            MessageObject messageObject = this.imagesArr.get(i);
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            if (tLRPC$Message instanceof TLRPC$TL_messageService) {
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionUserUpdatedPhoto) {
                    return tLRPC$MessageAction.newUserPhoto.photo_big;
                }
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                if (closestPhotoSizeWithSize != null) {
                    if (jArr != null) {
                        jArr[0] = closestPhotoSizeWithSize.size;
                        if (jArr[0] == 0) {
                            jArr[0] = -1;
                        }
                    }
                    return closestPhotoSizeWithSize;
                } else if (jArr != null) {
                    jArr[0] = -1;
                }
            } else {
                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.sponsoredMedia;
                if (tLRPC$MessageMedia != null) {
                    TLRPC$Document tLRPC$Document = tLRPC$MessageMedia.document;
                    if (tLRPC$Document != null) {
                        TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 90);
                        if (jArr != null) {
                            jArr[0] = closestPhotoSizeWithSize2.size;
                            if (jArr[0] == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize2;
                    }
                    TLRPC$Photo tLRPC$Photo = tLRPC$MessageMedia.photo;
                    if (tLRPC$Photo != null) {
                        TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, AndroidUtilities.getPhotoSize(), false, null, true);
                        if (closestPhotoSizeWithSize3 != null) {
                            if (jArr != null) {
                                jArr[0] = closestPhotoSizeWithSize3.size;
                                if (jArr[0] == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return closestPhotoSizeWithSize3;
                        } else if (jArr != null) {
                            jArr[0] = -1;
                        }
                    }
                } else if (((MessageObject.getMedia(tLRPC$Message) instanceof TLRPC$TL_messageMediaPhoto) && MessageObject.getMedia(messageObject.messageOwner).photo != null) || ((MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null)) {
                    TLRPC$PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize(), false, null, true);
                    if (closestPhotoSizeWithSize4 != null) {
                        if (jArr != null) {
                            jArr[0] = closestPhotoSizeWithSize4.size;
                            if (jArr[0] == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize4;
                    } else if (jArr != null) {
                        jArr[0] = -1;
                    }
                } else if (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaInvoice) {
                    return ((TLRPC$TL_messageMediaInvoice) MessageObject.getMedia(messageObject.messageOwner)).photo;
                } else {
                    if (messageObject.getDocument() != null && MessageObject.isDocumentHasThumb(messageObject.getDocument())) {
                        TLRPC$PhotoSize closestPhotoSizeWithSize5 = FileLoader.getClosestPhotoSizeWithSize(messageObject.getDocument().thumbs, 90);
                        if (jArr != null) {
                            jArr[0] = closestPhotoSizeWithSize5.size;
                            if (jArr[0] == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize5;
                    }
                }
            }
            return null;
        }
    }

    public void updateSelectedCount() {
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider == null) {
            return;
        }
        int selectedCount = photoViewerProvider.getSelectedCount();
        this.photosCounterView.setCount(selectedCount);
        if (selectedCount == 0) {
            togglePhotosListView(false, true);
        }
    }

    public boolean isCurrentAvatarSet() {
        int i;
        if (this.currentAvatarLocation != null && (i = this.currentIndex) >= 0 && i < this.avatarsArr.size()) {
            TLRPC$Photo tLRPC$Photo = this.avatarsArr.get(this.currentIndex);
            ImageLocation imageLocation = this.imagesArrLocations.get(this.currentIndex);
            if (tLRPC$Photo instanceof TLRPC$TL_photoEmpty) {
                tLRPC$Photo = null;
            }
            if (tLRPC$Photo != null) {
                int size = tLRPC$Photo.sizes.size();
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$FileLocation tLRPC$FileLocation = tLRPC$Photo.sizes.get(i2).location;
                    if (tLRPC$FileLocation != null) {
                        int i3 = tLRPC$FileLocation.local_id;
                        TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated = this.currentAvatarLocation.location;
                        if (i3 == tLRPC$TL_fileLocationToBeDeprecated.local_id && tLRPC$FileLocation.volume_id == tLRPC$TL_fileLocationToBeDeprecated.volume_id) {
                            return true;
                        }
                    }
                }
            } else if (imageLocation != null) {
                TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated2 = imageLocation.location;
                int i4 = tLRPC$TL_fileLocationToBeDeprecated2.local_id;
                TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated3 = this.currentAvatarLocation.location;
                if (i4 == tLRPC$TL_fileLocationToBeDeprecated3.local_id && tLRPC$TL_fileLocationToBeDeprecated2.volume_id == tLRPC$TL_fileLocationToBeDeprecated3.volume_id) {
                    return true;
                }
            }
        }
        return false;
    }

    private void setItemVisible(View view, boolean z, boolean z2) {
        setItemVisible(view, z, z2, 1.0f);
    }

    private void setItemVisible(final View view, final boolean z, boolean z2, float f) {
        Boolean bool = this.actionBarItemsVisibility.get(view);
        if (bool == null || bool.booleanValue() != z) {
            this.actionBarItemsVisibility.put(view, Boolean.valueOf(z));
            view.animate().cancel();
            float f2 = (z ? 1.0f : 0.0f) * f;
            if (z2 && bool != null) {
                if (z) {
                    view.setVisibility(0);
                }
                view.animate().alpha(f2).setDuration(100L).setUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda13
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$setItemVisible$85(valueAnimator);
                    }
                }).setInterpolator(new LinearInterpolator()).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda103
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$setItemVisible$86(z, view);
                    }
                }).start();
                return;
            }
            view.setVisibility(z ? 0 : 8);
            view.setAlpha(f2);
            updateActionBarTitlePadding();
        }
    }

    public /* synthetic */ void lambda$setItemVisible$85(ValueAnimator valueAnimator) {
        updateActionBarTitlePadding();
    }

    public /* synthetic */ void lambda$setItemVisible$86(boolean z, View view) {
        if (!z) {
            view.setVisibility(8);
        }
        updateActionBarTitlePadding();
    }

    /* JADX WARN: Removed duplicated region for block: B:1018:0x0acc  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x0408  */
    /* JADX WARN: Removed duplicated region for block: B:670:0x0416  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x0446  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x090f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onPhotoShow(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, ImageLocation imageLocation, ImageLocation imageLocation2, ArrayList<MessageObject> arrayList, ArrayList<SecureDocument> arrayList2, List<Object> list, int i, PlaceProviderObject placeProviderObject) {
        int i2;
        AnimatorSet animatorSet;
        boolean z;
        boolean z2;
        boolean z3;
        int i3;
        MentionsContainerView mentionsContainerView;
        PhotoViewerProvider photoViewerProvider;
        ChatActivity chatActivity;
        ImageLocation imageLocation3;
        ImageView imageView;
        MessageObject messageObject2;
        TLRPC$BotInlineResult tLRPC$BotInlineResult;
        PageBlocksAdapter pageBlocksAdapter;
        boolean z4;
        ChatActivity chatActivity2;
        MessageObject messageObject3;
        PhotoViewerProvider photoViewerProvider2;
        ChatActivity chatActivity3;
        boolean z5;
        int i4;
        int i5;
        TLRPC$MessageAction tLRPC$MessageAction;
        PhotoViewerWebView photoViewerWebView;
        TLRPC$WebPage tLRPC$WebPage;
        String str;
        TLRPC$Message tLRPC$Message;
        this.classGuid = ConnectionsManager.generateClassGuid();
        this.customTitle = null;
        this.currentMessageObject = null;
        this.currentFileLocation = null;
        this.currentFileLocationVideo = null;
        this.currentSecureDocument = null;
        this.currentPathObject = null;
        this.currentPageBlock = null;
        this.fromCamera = false;
        this.currentBotInlineResult = null;
        this.avatarStartProgress = 0.0f;
        this.avatarStartTime = 0L;
        this.currentIndex = -1;
        String[] strArr = this.currentFileNames;
        strArr[0] = null;
        strArr[1] = null;
        strArr[2] = null;
        this.avatarsDialogId = 0L;
        this.canEditAvatar = false;
        this.totalImagesCount = 0;
        this.totalImagesCountMerge = 0;
        this.currentEditMode = 0;
        this.captionEdit.keyboardNotifier.ignore(false);
        KeyboardNotifier keyboardNotifier = this.paintKeyboardNotifier;
        if (keyboardNotifier != null) {
            keyboardNotifier.ignore(this.currentEditMode != 3);
        }
        this.isFirstLoading = true;
        this.needSearchImageInArr = false;
        this.loadingMoreImages = false;
        boolean[] zArr = this.endReached;
        zArr[0] = false;
        zArr[1] = this.mergeDialogId == 0;
        this.opennedFromMedia = false;
        this.openedFromProfile = false;
        this.needCaptionLayout = false;
        this.containerView.setTag(1);
        this.playerAutoStarted = false;
        this.isCurrentVideo = false;
        this.shownControlsByEnd = false;
        this.imagesArr.clear();
        this.imagesArrLocations.clear();
        this.imagesArrLocationsSizes.clear();
        this.imagesArrLocationsVideo.clear();
        this.imagesArrMessages.clear();
        this.avatarsArr.clear();
        this.secureDocuments.clear();
        this.imagesArrLocals.clear();
        BlurringShader.BlurManager blurManager = this.blurManager;
        if (blurManager != null) {
            blurManager.resetBitmap();
        }
        if (Build.VERSION.SDK_INT > 21) {
            this.actionBar.setElevation(0.0f);
        }
        for (int i6 = 0; i6 < 2; i6++) {
            this.imagesByIds[i6].clear();
            this.imagesByIdsTemp[i6].clear();
        }
        this.imagesArrTemp.clear();
        this.currentAvatarLocation = null;
        this.containerView.setPadding(0, 0, 0, 0);
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
        }
        this.currentThumb = placeProviderObject != null ? placeProviderObject.thumb : null;
        this.isEvent = placeProviderObject != null && placeProviderObject.isEvent;
        this.sharedMediaType = 0;
        this.allMediaItem.setText(LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia));
        setItemVisible(this.sendItem, false, false);
        setItemVisible(this.pipItem, false, true);
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.setSubtitle(null);
        }
        this.actionBar.setBackgroundColor(2130706432);
        this.bottomLayout.setVisibility(8);
        this.bottomLayout.setTag(0);
        PhotoCountView photoCountView = this.countView;
        if (photoCountView != null) {
            photoCountView.updateShow(false, false);
        }
        if (this.sendPhotoType == 11 || this.stickerMakerView == null) {
            i2 = 11;
        } else {
            this.stickerEmpty = false;
            ImageView imageView2 = this.tuneItem;
            if (imageView2 != null) {
                imageView2.setAlpha(1.0f);
            }
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            i2 = 11;
            this.stickerMakerView.clean();
            ArrayList<String> arrayList3 = this.selectedEmojis;
            if (arrayList3 != null) {
                arrayList3.clear();
            }
        }
        this.bottomLayout.setTranslationY(0.0f);
        this.captionTextViewSwitcher.setTranslationY(0.0f);
        setItemVisible(this.editItem, false, false);
        QualityChooseView qualityChooseView = this.qualityChooseView;
        if (qualityChooseView != null) {
            qualityChooseView.setVisibility(4);
            this.qualityPicker.setVisibility(4);
            animatorSet = null;
            this.qualityChooseView.setTag(null);
        } else {
            animatorSet = null;
        }
        AnimatorSet animatorSet2 = this.qualityChooseViewAnimation;
        if (animatorSet2 != null) {
            animatorSet2.cancel();
            this.qualityChooseViewAnimation = animatorSet;
        }
        setDoubleTapEnabled(true);
        this.allowShare = false;
        this.slideshowMessageId = 0;
        this.menuItem.hideSubItem(2);
        this.menuItem.hideSubItem(4);
        this.menuItem.hideSubItem(23);
        this.menuItem.hideSubItem(10);
        this.menuItem.hideSubItem(i2);
        this.menuItem.hideSubItem(14);
        this.menuItem.hideSubItem(15);
        this.menuItem.hideSubItem(17);
        this.menuItem.hideSubItem(16);
        this.menuItem.hideSubItem(6);
        this.speedItem.setVisibility(8);
        this.speedGap.setVisibility(8);
        this.actionBar.setTranslationY(0.0f);
        this.dialogPhotos = null;
        this.checkImageView.setAlpha(1.0f);
        this.checkImageView.setTranslationY(0.0f);
        this.checkImageView.setVisibility(8);
        this.actionBar.setTitleRightMargin(0);
        this.photosCounterView.setAlpha(1.0f);
        this.photosCounterView.setTranslationY(0.0f);
        this.photosCounterView.setVisibility(8);
        updateActionBarTitlePadding();
        this.pickerView.setVisibility(8);
        this.pickerViewSendButton.setVisibility(8);
        this.doneButtonFullWidth.setVisibility(8);
        this.pickerViewSendButton.setTranslationY(0.0f);
        this.pickerView.setAlpha(1.0f);
        this.pickerViewSendButton.setAlpha(1.0f);
        this.pickerView.setTranslationY(0.0f);
        this.paintItem.setVisibility(8);
        this.paintItem.setTag(null);
        this.cropItem.setVisibility(8);
        this.tuneItem.setVisibility(8);
        this.tuneItem.setTag(null);
        this.captionEdit.setTimerVisible(false, false);
        this.rotateItem.setVisibility(8);
        this.mirrorItem.setVisibility(8);
        this.pickerView.getLayoutParams().height = -2;
        this.docInfoTextView.setVisibility(8);
        this.docNameTextView.setVisibility(8);
        showVideoTimeline(false, false);
        showEditCaption(false, false);
        showStickerMode(false, false);
        this.videoAvatarTooltip.setVisibility(8);
        this.compressItem.setVisibility(8);
        AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, false);
        this.actionBarContainer.setSubtitle(null);
        setItemVisible(this.masksItem, false, true);
        this.muteVideo = false;
        this.muteItem.setImageResource(R.drawable.video_send_unmute);
        this.editorDoneLayout.setVisibility(8);
        this.captionTextViewSwitcher.setTag(null);
        this.captionTextViewSwitcher.setVisibility(4);
        PhotoCropView photoCropView2 = this.photoCropView;
        if (photoCropView2 != null) {
            photoCropView2.setVisibility(8);
        }
        PhotoFilterView photoFilterView = this.photoFilterView;
        if (photoFilterView != null) {
            photoFilterView.setVisibility(8);
        }
        int i7 = 0;
        for (int i8 = 3; i7 < i8; i8 = 3) {
            PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
            if (photoProgressViewArr[i7] != null) {
                photoProgressViewArr[i7].setBackgroundState(-1, false, true);
            }
            i7++;
        }
        GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
        if (groupedPhotosListView != null) {
            groupedPhotosListView.reset();
            this.groupedPhotosListView.setAnimateBackground(!ApplicationLoader.isNetworkOnline());
        }
        PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
        if (photoViewerProvider3 != null && photoViewerProvider3.getTotalImageCount() > 0) {
            this.totalImagesCount = this.placeProvider.getTotalImageCount();
        }
        if (messageObject != null) {
            this.currentVideoSpeed = ApplicationLoader.applicationContext.getSharedPreferences("playback_speed", 0).getFloat("speed" + messageObject.getDialogId() + "_" + messageObject.getId(), 1.0f);
        } else {
            this.currentVideoSpeed = 1.0f;
        }
        setMenuItemIcon(false, true);
        boolean z6 = messageObject != null && (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || (((tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards) || messageObject.hasRevealedExtendedMedia()));
        String str2 = "ShowAllGIFs";
        if (messageObject != null && arrayList == null) {
            TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
            if (tLRPC$Message2 != null && (MessageObject.getMedia(tLRPC$Message2) instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null && (str = (tLRPC$WebPage = MessageObject.getMedia(messageObject.messageOwner).webpage).site_name) != null) {
                String lowerCase = str.toLowerCase();
                if (lowerCase.equals("instagram") || lowerCase.equals("twitter") || "telegram_album".equals(tLRPC$WebPage.type)) {
                    TextUtils.isEmpty(tLRPC$WebPage.author);
                    if (tLRPC$WebPage.cached_page instanceof TLRPC$TL_page) {
                        int i9 = 0;
                        while (true) {
                            if (i9 >= tLRPC$WebPage.cached_page.blocks.size()) {
                                break;
                            }
                            TLRPC$PageBlock tLRPC$PageBlock = tLRPC$WebPage.cached_page.blocks.get(i9);
                            if (tLRPC$PageBlock instanceof TLRPC$TL_pageBlockAuthorDate) {
                                int i10 = ((TLRPC$TL_pageBlockAuthorDate) tLRPC$PageBlock).published_date;
                                break;
                            }
                            i9++;
                        }
                    }
                    ArrayList<MessageObject> webPagePhotos = messageObject.getWebPagePhotos(null, null);
                    if (!webPagePhotos.isEmpty()) {
                        this.slideshowMessageId = messageObject.getId();
                        this.needSearchImageInArr = false;
                        i4 = 5;
                        this.imagesArr.addAll(webPagePhotos);
                        this.totalImagesCount = this.imagesArr.size();
                        int indexOf = this.imagesArr.indexOf(messageObject);
                        if (indexOf < 0) {
                            indexOf = 0;
                        }
                        setImageIndex(indexOf);
                        if (!messageObject.canPreviewDocument()) {
                            this.sharedMediaType = 1;
                            this.allMediaItem.setText(LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles));
                        } else if (messageObject.isGif()) {
                            this.sharedMediaType = i4;
                            this.allMediaItem.setText(LocaleController.getString("ShowAllGIFs", R.string.ShowAllGIFs));
                        }
                        if (this.isEmbedVideo && ((photoViewerWebView = this.photoViewerWebView) == null || !photoViewerWebView.isControllable())) {
                            this.bottomLayout.setTag(null);
                            this.bottomLayout.setVisibility(8);
                        }
                        if (this.slideshowMessageId == 0) {
                            this.imagesArr.add(messageObject);
                            if (messageObject.eventId != 0) {
                                i5 = 0;
                                this.needSearchImageInArr = false;
                            } else {
                                i5 = 0;
                                if (this.currentAnimation != null) {
                                    this.needSearchImageInArr = false;
                                    if (messageObject.canForwardMessage() && !z6) {
                                        setItemVisible(this.sendItem, true, false);
                                    }
                                } else {
                                    if (!messageObject.scheduled && !messageObject.isQuickReply() && !messageObject.isSponsored() && !(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaInvoice) && !(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && ((tLRPC$MessageAction = messageObject.messageOwner.action) == null || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionEmpty))) {
                                        this.needSearchImageInArr = true;
                                        this.imagesByIds[0].put(messageObject.getId(), messageObject);
                                        ChatActivity chatActivity4 = this.parentChatActivity;
                                        if (chatActivity4 == null || (!chatActivity4.isThreadChat() && this.parentChatActivity.getChatMode() != 3 && this.parentChatActivity.getChatMode() != i4)) {
                                            this.menuItem.showSubItem(4);
                                            long dialogId = messageObject.getDialogId();
                                            if (dialogId < 0 ? ChatObject.canWriteToChat(MessagesController.getInstance(messageObject.currentAccount).getChat(Long.valueOf(-dialogId))) : true) {
                                                this.menuItem.showSubItem(23);
                                            } else {
                                                this.menuItem.hideSubItem(23);
                                            }
                                            this.menuItem.showSubItem(2);
                                        }
                                        setItemVisible(this.sendItem, !z6, false);
                                    } else if (this.isEmbedVideo && messageObject.eventId == 0) {
                                        i5 = 0;
                                        setItemVisible(this.sendItem, true, false);
                                    }
                                    i5 = 0;
                                }
                            }
                            setImageIndex(i5);
                        }
                    }
                }
            }
            i4 = 5;
            if (!messageObject.canPreviewDocument()) {
            }
            if (this.isEmbedVideo) {
                this.bottomLayout.setTag(null);
                this.bottomLayout.setVisibility(8);
            }
            if (this.slideshowMessageId == 0) {
            }
        } else if (arrayList2 != null) {
            this.secureDocuments.addAll(arrayList2);
            setImageIndex(i);
        } else if (tLRPC$FileLocation != null) {
            long j = placeProviderObject != null ? placeProviderObject.dialogId : 0L;
            this.avatarsDialogId = j;
            this.canEditAvatar = placeProviderObject != null && placeProviderObject.canEdit;
            if (imageLocation != null || j == 0) {
                imageLocation3 = imageLocation;
            } else if (j > 0) {
                imageLocation3 = ImageLocation.getForUserOrChat(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId)), 0);
            } else {
                imageLocation3 = ImageLocation.getForUserOrChat(MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId)), 0);
            }
            if (imageLocation3 == null) {
                return;
            }
            this.imagesArrLocations.add(imageLocation3);
            this.imagesArrLocationsVideo.add(imageLocation2 != null ? imageLocation2 : imageLocation3);
            this.currentAvatarLocation = imageLocation3;
            this.imagesArrLocationsSizes.add(Long.valueOf(placeProviderObject != null ? placeProviderObject.size : 0L));
            this.imagesArrMessages.add(null);
            this.avatarsArr.add(new TLRPC$TL_photoEmpty());
            this.allowShare = true;
            this.menuItem.hideSubItem(2);
            this.menuItem.showSubItem(10);
            setImageIndex(0);
            if (this.sendPhotoType == 1) {
                if (useFullWidthSendButton()) {
                    this.doneButtonFullWidth.setVisibility(0);
                } else {
                    this.pickerViewSendButton.setVisibility(0);
                }
                this.pickerViewSendButton.setTranslationY(0.0f);
                this.pickerViewSendButton.setAlpha(1.0f);
                View view = this.navigationBar;
                if (view != null) {
                    view.setVisibility(0);
                    this.navigationBar.setAlpha(1.0f);
                }
                this.bottomLayout.setVisibility(8);
                this.bottomLayout.setTag(null);
                this.containerView.setTag(null);
            }
        } else if (arrayList != null) {
            this.imagesArr.addAll(arrayList);
            int i11 = 0;
            while (i11 < this.imagesArr.size()) {
                MessageObject messageObject4 = this.imagesArr.get(i11);
                String str3 = str2;
                this.imagesByIds[messageObject4.getDialogId() == this.currentDialogId ? (char) 0 : (char) 1].put(messageObject4.getId(), messageObject4);
                i11++;
                str2 = str3;
            }
            String str4 = str2;
            MessageObject messageObject5 = this.imagesArr.get(i);
            if (!messageObject5.scheduled && !messageObject5.isQuickReply() && !messageObject5.isSponsored() && ((chatActivity = this.parentChatActivity) == null || !chatActivity.isThreadChat())) {
                this.opennedFromMedia = this.parentChatActivity == null;
                if (this.parentFragment instanceof ProfileActivity) {
                    this.openedFromProfile = true;
                }
                if (placeProviderObject != null) {
                    this.startOffset = placeProviderObject.starOffset;
                }
                this.menuItem.showSubItem(4);
                long dialogId2 = messageObject5.getDialogId();
                if (dialogId2 < 0 ? ChatObject.canWriteToChat(MessagesController.getInstance(messageObject5.currentAccount).getChat(Long.valueOf(-dialogId2))) : true) {
                    this.menuItem.showSubItem(23);
                } else {
                    this.menuItem.hideSubItem(23);
                }
                if (messageObject5.canForwardMessage() && !z6) {
                    setItemVisible(this.sendItem, true, false);
                }
                if (messageObject5.canPreviewDocument()) {
                    this.sharedMediaType = 1;
                    this.allMediaItem.setText(LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles));
                } else if (messageObject5.isGif()) {
                    this.sharedMediaType = 5;
                    this.allMediaItem.setText(LocaleController.getString(str4, R.string.ShowAllGIFs));
                }
            } else {
                this.totalImagesCount = this.imagesArr.size();
            }
            setImageIndex(i);
        } else {
            if (list != null) {
                int i12 = this.sendPhotoType;
                if (i12 != -1 && (i12 == 0 || i12 == 4 || ((i12 == 2 || i12 == 5) && list.size() > 1))) {
                    this.checkImageView.setVisibility(0);
                    this.photosCounterView.setVisibility(0);
                    updateActionBarTitlePadding();
                }
                CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
                int i13 = this.sendPhotoType;
                if (i13 == -1 || !((i13 == 2 || i13 == 5) && this.placeProvider.canCaptureMorePhotos())) {
                    z = false;
                    z2 = false;
                } else {
                    z = false;
                    z2 = true;
                }
                captionPhotoViewer.setAddPhotoVisible(z2, z);
                this.menuItem.setVisibility(8);
                this.imagesArrLocals.addAll(list);
                Object obj = this.imagesArrLocals.get(i);
                int i14 = this.sendPhotoType;
                if (i14 != -1 && (obj instanceof MediaController.PhotoEntry)) {
                    if (i14 == 10) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                    } else if (this.isDocumentsPicker) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        this.docInfoTextView.setVisibility(0);
                        this.docNameTextView.setVisibility(0);
                        this.pickerView.getLayoutParams().height = AndroidUtilities.dp(84.0f);
                    } else if (((MediaController.PhotoEntry) obj).isVideo) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        this.bottomLayout.setVisibility(0);
                        this.bottomLayout.setTag(1);
                        this.bottomLayout.setTranslationY(-AndroidUtilities.dp(48.0f));
                    } else {
                        this.cropItem.setVisibility(i14 != 1 ? 0 : 8);
                        this.rotateItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                        this.mirrorItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                    }
                    z3 = !this.isDocumentsPicker;
                } else {
                    if (obj instanceof TLRPC$BotInlineResult) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                    } else {
                        this.cropItem.setVisibility(((obj instanceof MediaController.SearchImage) && ((MediaController.SearchImage) obj).type == 0) ? 0 : 8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        if (this.cropItem.getVisibility() == 0) {
                            z3 = true;
                        }
                    }
                    z3 = false;
                }
                this.needCaptionLayout = z3 && ((photoViewerProvider = this.placeProvider) == null || photoViewerProvider.allowCaption());
                if (this.parentChatActivity == null || (mentionsContainerView = this.captionEdit.mentionContainer) == null) {
                    i3 = 0;
                } else {
                    mentionsContainerView.getAdapter().setChatInfo(this.parentChatActivity.chatInfo);
                    this.captionEdit.mentionContainer.getAdapter().setNeedUsernames(this.parentChatActivity.currentChat != null);
                    i3 = 0;
                    this.captionEdit.mentionContainer.getAdapter().setNeedBotContext(false);
                }
                if (this.sendPhotoType != -1) {
                    this.pickerView.setVisibility(i3);
                    if (useFullWidthSendButton()) {
                        this.doneButtonFullWidth.setVisibility(i3);
                    } else {
                        this.pickerViewSendButton.setVisibility(i3);
                        this.pickerViewSendButton.setTranslationY(0.0f);
                        this.pickerViewSendButton.setAlpha(1.0f);
                    }
                    View view2 = this.navigationBar;
                    if (view2 != null && (!this.fancyShadows || this.sendPhotoType == 11)) {
                        view2.setVisibility(0);
                        this.navigationBar.setAlpha(1.0f);
                    }
                    this.bottomLayout.setVisibility(8);
                    this.bottomLayout.setTag(null);
                    this.containerView.setTag(null);
                }
                setImageIndex(i);
                int i15 = this.sendPhotoType;
                if (i15 == 1) {
                    this.paintItem.setVisibility(0);
                    this.tuneItem.setVisibility(0);
                } else if (i15 != 4 && i15 != 5) {
                    ImageView imageView3 = this.paintItem;
                    imageView3.setVisibility(imageView3.getTag() != null ? 0 : 8);
                    ImageView imageView4 = this.tuneItem;
                    imageView4.setVisibility(imageView4.getTag() != null ? 0 : 8);
                } else {
                    this.paintItem.setVisibility(8);
                    this.tuneItem.setVisibility(8);
                }
                updateSelectedCount();
            } else {
                setImageIndex(i);
            }
            imageView = this.tuneItem;
            if (imageView != null) {
                imageView.setAlpha(this.stickerEmpty ? 0.4f : 1.0f);
            }
            this.dialogPhotos = null;
            if (this.currentAnimation == null && !this.isEvent) {
                if (this.currentDialogId == 0 && this.totalImagesCount == 0 && (messageObject3 = this.currentMessageObject) != null && !messageObject3.scheduled) {
                    if (this.currentFiltered && (chatActivity3 = this.parentChatActivity) != null) {
                        ArrayList<MessageObject> filteredMessages = chatActivity3.getFilteredMessages();
                        if (filteredMessages != null) {
                            this.imagesArr.clear();
                            for (int i16 = 0; i16 < filteredMessages.size(); i16++) {
                                MessageObject messageObject6 = filteredMessages.get(i16);
                                if (MediaDataController.getMediaType(messageObject6.messageOwner) == this.sharedMediaType) {
                                    this.imagesArr.add(messageObject6);
                                    this.imagesByIds[0].put(messageObject6.getId(), messageObject6);
                                }
                            }
                            Collections.sort(this.imagesArr, new Comparator() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda106
                                @Override // java.util.Comparator
                                public final int compare(Object obj2, Object obj3) {
                                    int lambda$onPhotoShow$87;
                                    lambda$onPhotoShow$87 = PhotoViewer.lambda$onPhotoShow$87((MessageObject) obj2, (MessageObject) obj3);
                                    return lambda$onPhotoShow$87;
                                }
                            });
                            this.currentIndex = -1;
                            for (int i17 = 0; i17 < this.imagesArr.size(); i17++) {
                                if (this.imagesArr.get(i17) == this.currentMessageObject || this.imagesArr.get(i17).getId() == this.currentMessageObject.getId()) {
                                    this.currentIndex = i17;
                                }
                            }
                            if (this.currentIndex < 0) {
                                this.currentIndex = this.imagesArr.size();
                                this.imagesArr.add(this.currentMessageObject);
                                z5 = false;
                                this.imagesByIds[0].put(this.currentMessageObject.getId(), this.currentMessageObject);
                            } else {
                                z5 = false;
                            }
                            setImages();
                            PhotoCountView photoCountView2 = this.countView;
                            if (photoCountView2 != null) {
                                photoCountView2.updateShow(true, z5);
                                this.countView.set(this.currentIndex + 1, this.imagesArr.size(), z5);
                            }
                        } else {
                            z5 = false;
                        }
                        this.isFirstLoading = z5;
                    } else if (MediaDataController.getMediaType(messageObject3.messageOwner) == this.sharedMediaType && ((photoViewerProvider2 = this.placeProvider) == null || !photoViewerProvider2.forceAllInGroup())) {
                        MediaDataController.getInstance(this.currentAccount).getMediaCount(this.currentDialogId, this.topicId, this.sharedMediaType, this.classGuid, true);
                        if (this.mergeDialogId != 0) {
                            MediaDataController.getInstance(this.currentAccount).getMediaCount(this.mergeDialogId, this.topicId, this.sharedMediaType, this.classGuid, true);
                        }
                    }
                } else if (this.avatarsDialogId != 0 && this.placeProvider.canLoadMoreAvatars()) {
                    this.dialogPhotos = MessagesController.getInstance(this.currentAccount).getDialogPhotos(this.avatarsDialogId);
                    NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this.dialogPhotos);
                }
            }
            messageObject2 = this.currentMessageObject;
            if ((messageObject2 == null && messageObject2.isVideo()) || (((tLRPC$BotInlineResult = this.currentBotInlineResult) != null && (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) || (((pageBlocksAdapter = this.pageBlocksAdapter) != null && (pageBlocksAdapter.isVideo(i) || this.pageBlocksAdapter.isHardwarePlayer(i))) || (this.sendPhotoType == -1 && ((MediaController.PhotoEntry) this.imagesArrLocals.get(i)).isVideo)))) {
                this.playerAutoStarted = true;
                onActionClick(false);
            } else if (!this.imagesArrLocals.isEmpty()) {
                Object obj2 = this.imagesArrLocals.get(i);
                ChatActivity chatActivity5 = this.parentChatActivity;
                TLRPC$User currentUser = chatActivity5 != null ? chatActivity5.getCurrentUser() : null;
                boolean z7 = (this.isDocumentsPicker || (chatActivity2 = this.parentChatActivity) == null || chatActivity2.isSecretChat() || this.parentChatActivity.isInScheduleMode() || currentUser == null || currentUser.bot || UserObject.isUserSelf(currentUser) || this.parentChatActivity.isEditingMessageMedia()) ? false : true;
                PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
                if (photoViewerProvider4 != null && photoViewerProvider4.getEditingMessageObject() != null) {
                    z7 = false;
                }
                if (!(obj2 instanceof TLRPC$BotInlineResult)) {
                    if ((obj2 instanceof MediaController.PhotoEntry) || !z7 || !(obj2 instanceof MediaController.SearchImage)) {
                        z4 = z7;
                    } else if (((MediaController.SearchImage) obj2).type == 0) {
                        z4 = true;
                    }
                    this.captionEdit.setTimerVisible(z4, true);
                }
                z4 = false;
                this.captionEdit.setTimerVisible(z4, true);
            }
            checkFullscreenButton();
        }
        imageView = this.tuneItem;
        if (imageView != null) {
        }
        this.dialogPhotos = null;
        if (this.currentAnimation == null) {
            if (this.currentDialogId == 0) {
            }
            if (this.avatarsDialogId != 0) {
                this.dialogPhotos = MessagesController.getInstance(this.currentAccount).getDialogPhotos(this.avatarsDialogId);
                NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this.dialogPhotos);
            }
        }
        messageObject2 = this.currentMessageObject;
        if (messageObject2 == null) {
        }
        if (!this.imagesArrLocals.isEmpty()) {
        }
        checkFullscreenButton();
    }

    public static /* synthetic */ int lambda$onPhotoShow$87(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject.getId() - messageObject2.getId();
    }

    private boolean canSendMediaToParentChatActivity() {
        TLRPC$Chat tLRPC$Chat;
        ChatActivity chatActivity = this.parentChatActivity;
        return (chatActivity == null || (chatActivity.currentUser == null && ((tLRPC$Chat = chatActivity.currentChat) == null || ChatObject.isNotInChat(tLRPC$Chat) || (!ChatObject.canSendPhoto(this.parentChatActivity.currentChat) && !ChatObject.canSendVideo(this.parentChatActivity.currentChat))))) ? false : true;
    }

    private void setDoubleTapEnabled(boolean z) {
        this.doubleTapEnabled = z;
        this.gestureDetector.setOnDoubleTapListener(z ? this : null);
    }

    public void setImages() {
        if (this.animationInProgress == 0) {
            setIndexToImage(this.centerImage, this.currentIndex, null);
            setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
            setIndexToImage(this.rightImage, this.currentIndex + 1, this.rightCropTransform);
            setIndexToPaintingOverlay(this.currentIndex + 1, this.rightPaintingOverlay);
            setIndexToImage(this.leftImage, this.currentIndex - 1, this.leftCropTransform);
            setIndexToPaintingOverlay(this.currentIndex - 1, this.leftPaintingOverlay);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1118:0x0673  */
    /* JADX WARN: Removed duplicated region for block: B:1124:0x0682  */
    /* JADX WARN: Removed duplicated region for block: B:1171:0x079e  */
    /* JADX WARN: Removed duplicated region for block: B:1172:0x07a5  */
    /* JADX WARN: Removed duplicated region for block: B:1335:0x0b87  */
    /* JADX WARN: Removed duplicated region for block: B:1338:0x0b96  */
    /* JADX WARN: Removed duplicated region for block: B:1341:0x0b9e  */
    /* JADX WARN: Removed duplicated region for block: B:1344:0x0bae  */
    /* JADX WARN: Removed duplicated region for block: B:1347:0x0bb3  */
    /* JADX WARN: Removed duplicated region for block: B:1380:0x0c65  */
    /* JADX WARN: Removed duplicated region for block: B:1381:0x0c67  */
    /* JADX WARN: Removed duplicated region for block: B:1384:0x0c6f  */
    /* JADX WARN: Removed duplicated region for block: B:1385:0x0c71  */
    /* JADX WARN: Removed duplicated region for block: B:1388:0x0c79  */
    /* JADX WARN: Removed duplicated region for block: B:1389:0x0c7b  */
    /* JADX WARN: Removed duplicated region for block: B:1392:0x0c83  */
    /* JADX WARN: Removed duplicated region for block: B:1404:0x0c9c  */
    /* JADX WARN: Removed duplicated region for block: B:1488:0x0e1d  */
    /* JADX WARN: Removed duplicated region for block: B:1496:0x0e2e  */
    /* JADX WARN: Removed duplicated region for block: B:1503:0x0e47  */
    /* JADX WARN: Removed duplicated region for block: B:1509:0x0e56  */
    /* JADX WARN: Removed duplicated region for block: B:1521:0x0e73  */
    /* JADX WARN: Removed duplicated region for block: B:964:0x0377  */
    /* JADX WARN: Removed duplicated region for block: B:976:0x03ad  */
    /* JADX WARN: Removed duplicated region for block: B:979:0x03b6  */
    /* JADX WARN: Type inference failed for: r2v124 */
    /* JADX WARN: Type inference failed for: r2v125, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r2v142 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setIsAboutToSwitchToIndex(final int i, boolean z, boolean z2) {
        int i2;
        CharSequence charSequence;
        boolean z3;
        final MessageObject messageObject;
        CharSequence charSequence2;
        boolean z4;
        CharSequence string;
        MessageObject messageObject2;
        boolean z5;
        boolean z6;
        MediaController.CropState cropState;
        boolean z7;
        Object obj;
        int i3;
        boolean z8;
        int i4;
        boolean z9;
        MediaController.CropState cropState2;
        int i5;
        boolean z10;
        boolean z11;
        boolean z12;
        CharSequence charSequence3;
        boolean z13;
        float f;
        float f2;
        int i6;
        int i7;
        VideoEditedInfo videoEditedInfo;
        PhotoCountView photoCountView;
        CharSequence charSequence4;
        ChatActivity chatActivity;
        int i8;
        int i9;
        boolean z14;
        TLRPC$User currentUser;
        TLRPC$Chat currentChat;
        CharSequence charSequence5;
        CharSequence charSequence6;
        CharSequence charSequence7;
        boolean z15;
        int i10;
        TLRPC$Photo tLRPC$Photo;
        boolean z16;
        int i11;
        CharSequence restrictionReason;
        TLRPC$Message tLRPC$Message;
        CharSequence string2;
        ?? r2;
        int i12;
        boolean z17;
        int id;
        int i13;
        boolean z18;
        int i14;
        TLRPC$Message tLRPC$Message2;
        TLRPC$Message tLRPC$Message3;
        if (z || this.switchingToIndex != i) {
            int i15 = this.switchingToIndex;
            boolean z19 = true;
            boolean z20 = i >= i15;
            this.switchingToIndex = i;
            getFileName(i);
            if (z2 && Build.VERSION.SDK_INT >= 19) {
                TransitionSet transitionSet = new TransitionSet();
                transitionSet.addTransition(new Fade());
                transitionSet.addTransition(new ChangeBounds());
                transitionSet.setOrdering(0);
                transitionSet.setDuration(220L);
                transitionSet.setInterpolator((TimeInterpolator) CubicBezierInterpolator.DEFAULT);
                TransitionManager.beginDelayedTransition(this.itemsLayout, transitionSet);
            }
            this.editing = false;
            if (!this.imagesArr.isEmpty()) {
                int i16 = this.switchingToIndex;
                if (i16 < 0 || i16 >= this.imagesArr.size()) {
                    return;
                }
                messageObject = this.imagesArr.get(this.switchingToIndex);
                messageObject.updateTranslation();
                boolean isVideo = messageObject.isVideo();
                CharSequence createFromInfoString = FilteredSearchView.createFromInfoString(messageObject, this.opennedFromMedia && !this.openedFromProfile, 0);
                this.actionBarContainer.setSubtitle((messageObject.isQuickReply() || messageObject.isSponsored() || (tLRPC$Message3 = messageObject.messageOwner) == null) ? null : LocaleController.formatDateAudio(tLRPC$Message3.date, false), z2);
                boolean isInvoice = messageObject.isInvoice();
                boolean z21 = MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || ((tLRPC$Message2 = messageObject.messageOwner) != null && tLRPC$Message2.noforwards) || messageObject.hasRevealedExtendedMedia();
                if (isVideo) {
                    this.bottomLayout.setVisibility(0);
                    this.bottomLayout.setTag(1);
                } else {
                    this.bottomLayout.setVisibility(8);
                    this.bottomLayout.setTag(null);
                }
                if (isInvoice) {
                    setItemVisible(this.masksItem, false, z2);
                    setItemVisible(this.editItem, false, z2);
                    this.menuItem.hideSubItem(6);
                    this.menuItem.hideSubItem(11);
                    restrictionReason = MessageObject.getMedia(messageObject.messageOwner).description;
                    this.allowShare = false;
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                } else {
                    final TranslateController translateController = MessagesController.getInstance(this.currentAccount).getTranslateController();
                    if (i15 != this.switchingToIndex) {
                        this.captionTranslated = false;
                        this.captionDetectedLanguage = null;
                    }
                    if (translateController.isContextTranslateEnabled()) {
                        translateController.detectPhotoLanguage(messageObject, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda117
                            @Override // org.telegram.messenger.Utilities.Callback
                            public final void run(Object obj2) {
                                PhotoViewer.this.lambda$setIsAboutToSwitchToIndex$88(i, translateController, messageObject, (String) obj2);
                            }
                        });
                    }
                    if (translateController.isContextTranslateEnabled() && translateController.canTranslatePhoto(messageObject, this.captionDetectedLanguage)) {
                        if (this.captionTranslated) {
                            this.menuItem.showSubItem(22);
                            this.menuItem.hideSubItem(21);
                        } else {
                            this.menuItem.showSubItem(21);
                            this.menuItem.hideSubItem(22);
                        }
                    } else {
                        this.menuItem.hideSubItem(21);
                        this.menuItem.hideSubItem(22);
                    }
                    this.allowShare = !z21;
                    if (messageObject.isNewGif() && this.allowShare && !DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                        this.menuItem.showSubItem(14);
                    }
                    ChatActivity chatActivity2 = this.parentChatActivity;
                    if (messageObject.canDeleteMessage(chatActivity2 != null && chatActivity2.isInScheduleMode(), null) && this.slideshowMessageId == 0) {
                        this.menuItem.showSubItem(6);
                    } else {
                        this.menuItem.hideSubItem(6);
                    }
                    this.menuItem.checkHideMenuItem();
                    boolean z22 = (messageObject.getDocument() == null || messageObject.canPreviewDocument() || messageObject.getMimeType().startsWith("video/")) && !this.isEmbedVideo && ((i11 = messageObject.messageOwner.ttl) == 0 || i11 >= 3600) && !z21 && canSendMediaToParentChatActivity() && !this.opennedFromMedia;
                    if (this.isEmbedVideo) {
                        this.menuItem.showSubItem(11);
                        setItemVisible(this.editItem, false, false);
                        setItemVisible(this.pipItem, true, false);
                    } else if (isVideo) {
                        if (!z21 || (this.slideshowMessageId != 0 ? !(MessageObject.getMedia(this.imagesArr.get(0).messageOwner).webpage == null || MessageObject.getMedia(this.imagesArr.get(0).messageOwner).webpage.url == null) : !(MessageObject.getMedia(messageObject.messageOwner).webpage == null || MessageObject.getMedia(messageObject.messageOwner).webpage.url == null))) {
                            this.menuItem.showSubItem(11);
                        } else {
                            this.menuItem.hideSubItem(11);
                        }
                        boolean z23 = this.masksItem.getVisibility() == 0;
                        if (z23) {
                            setItemVisible(this.masksItem, false, false);
                        }
                        if (z21) {
                            setItemVisible(this.pipItem, false, true);
                        } else if (!this.pipAvailable) {
                            this.pipItem.setEnabled(false);
                            setItemVisible(this.pipItem, true, !z23 && this.editItem.getAlpha() <= 0.0f, 0.5f);
                        } else {
                            setItemVisible(this.pipItem, true, !z23 && this.editItem.getAlpha() <= 0.0f);
                        }
                        setItemVisible(this.editItem, false, false);
                        if (messageObject.hasAttachedStickers() && !DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                            this.menuItem.showSubItem(15);
                        } else {
                            this.menuItem.hideSubItem(15);
                        }
                        this.menuItem.checkHideMenuItem();
                    } else {
                        this.speedItem.setVisibility(8);
                        this.speedGap.setVisibility(8);
                        this.menuItem.hideSubItem(11);
                        this.menuItem.checkHideMenuItem();
                        boolean z24 = this.pipItem.getVisibility() == 0;
                        boolean z25 = messageObject.hasAttachedStickers() && !DialogObject.isEncryptedDialog(messageObject.getDialogId());
                        if (z24) {
                            setItemVisible(this.pipItem, false, (z25 || z22) ? false : false);
                        }
                        setItemVisible(this.editItem, z22, (!z2 || z24 || z25) ? false : true);
                        setItemVisible(this.masksItem, z25, !z24);
                    }
                    restrictionReason = MessagesController.getInstance(messageObject.currentAccount).getRestrictionReason(messageObject.messageOwner.restriction_reason);
                    if (TextUtils.isEmpty(restrictionReason)) {
                        if (this.captionTranslated && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.translatedText != null && TextUtils.equals(tLRPC$Message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
                            restrictionReason = postProcessTranslated(messageObject);
                        } else {
                            restrictionReason = messageObject.caption;
                            z4 = this.captionTranslated;
                            if (this.currentAnimation != null) {
                                this.menuItem.hideSubItem(1);
                                this.menuItem.hideSubItem(10);
                                setItemVisible(this.editItem, false, z2);
                                ChatActivity chatActivity3 = this.parentChatActivity;
                                if (!messageObject.canDeleteMessage(chatActivity3 != null && chatActivity3.isInScheduleMode(), null)) {
                                    this.menuItem.hideSubItem(6);
                                }
                                this.allowShare = !z21;
                            }
                            if (!messageObject.isSponsored()) {
                                PhotoCountView photoCountView2 = this.countView;
                                if (photoCountView2 != null) {
                                    photoCountView2.updateShow(false, z2);
                                }
                            } else {
                                ChatActivity chatActivity4 = this.parentChatActivity;
                                if (chatActivity4 != null && chatActivity4.getChatMode() == 5) {
                                    PhotoCountView photoCountView3 = this.countView;
                                    if (photoCountView3 != null) {
                                        photoCountView3.updateShow(false, z2);
                                    }
                                } else if (this.currentFiltered && (this.currentFilterTag != null || !TextUtils.isEmpty(this.currentFilterQuery))) {
                                    PhotoCountView photoCountView4 = this.countView;
                                    if (photoCountView4 != null) {
                                        photoCountView4.updateShow(true, z2);
                                        this.countView.set(this.switchingToIndex + 1, this.imagesArr.size());
                                    }
                                } else if (this.totalImagesCount + this.totalImagesCountMerge != 0 && !this.needSearchImageInArr) {
                                    if (this.opennedFromMedia) {
                                        if (this.startOffset + this.imagesArr.size() < this.totalImagesCount + this.totalImagesCountMerge && !this.loadingMoreImages && this.switchingToIndex > this.imagesArr.size() - 5) {
                                            if (this.imagesArr.isEmpty()) {
                                                id = 0;
                                            } else {
                                                ArrayList<MessageObject> arrayList = this.imagesArr;
                                                id = arrayList.get(arrayList.size() - 1).getId();
                                            }
                                            if (!this.endReached[0] || this.mergeDialogId == 0) {
                                                i13 = id;
                                                z18 = false;
                                            } else {
                                                if (!this.imagesArr.isEmpty()) {
                                                    ArrayList<MessageObject> arrayList2 = this.imagesArr;
                                                    if (arrayList2.get(arrayList2.size() - 1).getDialogId() != this.mergeDialogId) {
                                                        z18 = true;
                                                        i13 = 0;
                                                    }
                                                }
                                                i13 = id;
                                                z18 = true;
                                            }
                                            if (!this.placeProvider.loadMore()) {
                                                MediaDataController.getInstance(this.currentAccount).loadMedia(!z18 ? this.currentDialogId : this.mergeDialogId, 40, i13, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                                this.loadingMoreImages = true;
                                            }
                                        }
                                        if (this.startOffset > 0 && this.switchingToIndex < 5 && !this.imagesArr.isEmpty()) {
                                            int id2 = this.imagesArr.get(0).getId();
                                            if (!this.placeProvider.loadMore()) {
                                                MediaDataController.getInstance(this.currentAccount).loadMedia(this.currentDialogId, 40, 0, id2, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                                this.loadingMoreImages = true;
                                            }
                                        }
                                        PhotoCountView photoCountView5 = this.countView;
                                        if (photoCountView5 != null) {
                                            photoCountView5.updateShow(this.openedFromProfile, z2);
                                            PhotoCountView photoCountView6 = this.countView;
                                            int i17 = this.totalImagesCount;
                                            int i18 = this.totalImagesCountMerge;
                                            photoCountView6.set((i17 + i18) - (this.startOffset + this.switchingToIndex), i17 + i18);
                                        }
                                    } else {
                                        if (this.imagesArr.size() >= this.totalImagesCount + this.totalImagesCountMerge || this.loadingMoreImages || this.switchingToIndex >= 5) {
                                            r2 = 1;
                                        } else {
                                            int id3 = this.imagesArr.isEmpty() ? 0 : this.imagesArr.get(0).getId();
                                            if (!this.endReached[0] || this.mergeDialogId == 0) {
                                                i12 = id3;
                                                z17 = false;
                                            } else if (this.imagesArr.isEmpty() || this.imagesArr.get(0).getDialogId() == this.mergeDialogId) {
                                                i12 = id3;
                                                z17 = true;
                                            } else {
                                                z17 = true;
                                                i12 = 0;
                                            }
                                            MediaDataController.getInstance(this.currentAccount).loadMedia(!z17 ? this.currentDialogId : this.mergeDialogId, 80, i12, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                            r2 = 1;
                                            this.loadingMoreImages = true;
                                        }
                                        PhotoCountView photoCountView7 = this.countView;
                                        if (photoCountView7 != 0) {
                                            photoCountView7.updateShow(r2, z2);
                                            this.countView.set(((this.totalImagesCount + this.totalImagesCountMerge) - this.imagesArr.size()) + this.switchingToIndex + r2, this.totalImagesCount + this.totalImagesCountMerge);
                                        }
                                    }
                                } else {
                                    if (this.slideshowMessageId == 0 && (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC$TL_messageMediaWebPage)) {
                                        PhotoCountView photoCountView8 = this.countView;
                                        if (photoCountView8 != null) {
                                            photoCountView8.updateShow(false, z2);
                                        }
                                        if (this.isEmbedVideo) {
                                            string2 = "YouTube";
                                        } else if (messageObject.canPreviewDocument()) {
                                            string2 = LocaleController.getString("AttachDocument", R.string.AttachDocument);
                                        } else if (messageObject.isVideo()) {
                                            string2 = LocaleController.getString("AttachVideo", R.string.AttachVideo);
                                        } else if (messageObject.isGif()) {
                                            string2 = LocaleController.getString("AttachGif", R.string.AttachGif);
                                        } else {
                                            string2 = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                                        }
                                    } else if (isInvoice) {
                                        PhotoCountView photoCountView9 = this.countView;
                                        if (photoCountView9 != null) {
                                            photoCountView9.updateShow(false, z2);
                                        }
                                        string2 = MessageObject.getMedia(messageObject.messageOwner).title;
                                    } else if (messageObject.isVideo()) {
                                        PhotoCountView photoCountView10 = this.countView;
                                        if (photoCountView10 != null) {
                                            photoCountView10.updateShow(false, z2);
                                        }
                                        string2 = LocaleController.getString("AttachVideo", R.string.AttachVideo);
                                    } else if (messageObject.isGif()) {
                                        PhotoCountView photoCountView11 = this.countView;
                                        if (photoCountView11 != null) {
                                            photoCountView11.updateShow(false, z2);
                                        }
                                        string2 = LocaleController.getString("AttachGif", R.string.AttachGif);
                                    } else if (messageObject.getDocument() != null) {
                                        PhotoCountView photoCountView12 = this.countView;
                                        if (photoCountView12 != null) {
                                            photoCountView12.updateShow(false, z2);
                                        }
                                        string2 = LocaleController.getString("AttachDocument", R.string.AttachDocument);
                                    }
                                    charSequence = string2;
                                    if ((DialogObject.isEncryptedDialog(this.currentDialogId) && !this.isEmbedVideo) || z21) {
                                        setItemVisible(this.sendItem, false, false);
                                    }
                                    if (!this.isEmbedVideo || (((i14 = messageObject.messageOwner.ttl) != 0 && i14 < 3600) || z21)) {
                                        this.allowShare = false;
                                        this.menuItem.hideSubItem(1);
                                        this.menuItem.hideSubItem(10);
                                        setItemVisible(this.editItem, false, z2);
                                    } else {
                                        this.allowShare = true;
                                        this.menuItem.showSubItem(1);
                                        this.menuItem.showSubItem(10);
                                    }
                                    this.groupedPhotosListView.fillList();
                                    charSequence2 = restrictionReason;
                                    z3 = z2;
                                }
                            }
                            charSequence = createFromInfoString;
                            if (DialogObject.isEncryptedDialog(this.currentDialogId)) {
                                setItemVisible(this.sendItem, false, false);
                                if (!this.isEmbedVideo) {
                                }
                                this.allowShare = false;
                                this.menuItem.hideSubItem(1);
                                this.menuItem.hideSubItem(10);
                                setItemVisible(this.editItem, false, z2);
                                this.groupedPhotosListView.fillList();
                                charSequence2 = restrictionReason;
                                z3 = z2;
                            }
                            setItemVisible(this.sendItem, false, false);
                            if (!this.isEmbedVideo) {
                            }
                            this.allowShare = false;
                            this.menuItem.hideSubItem(1);
                            this.menuItem.hideSubItem(10);
                            setItemVisible(this.editItem, false, z2);
                            this.groupedPhotosListView.fillList();
                            charSequence2 = restrictionReason;
                            z3 = z2;
                        }
                    }
                }
                z4 = false;
                if (this.currentAnimation != null) {
                }
                if (!messageObject.isSponsored()) {
                }
                charSequence = createFromInfoString;
                if (DialogObject.isEncryptedDialog(this.currentDialogId)) {
                }
                setItemVisible(this.sendItem, false, false);
                if (!this.isEmbedVideo) {
                }
                this.allowShare = false;
                this.menuItem.hideSubItem(1);
                this.menuItem.hideSubItem(10);
                setItemVisible(this.editItem, false, z2);
                this.groupedPhotosListView.fillList();
                charSequence2 = restrictionReason;
                z3 = z2;
            } else {
                if (!this.secureDocuments.isEmpty()) {
                    this.allowShare = false;
                    this.menuItem.showSubItem(6);
                    this.menuItem.hideSubItem(1);
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                    PhotoCountView photoCountView13 = this.countView;
                    if (photoCountView13 != null) {
                        photoCountView13.updateShow(this.secureDocuments.size() > 1, true);
                        this.countView.set(this.switchingToIndex + 1, this.secureDocuments.size());
                    }
                    this.actionBarContainer.setTitle("");
                    this.actionBarContainer.setSubtitle("", z2);
                    z3 = z2;
                    messageObject = null;
                    z4 = false;
                    i2 = 11;
                    charSequence = null;
                } else if (!this.imagesArrLocations.isEmpty()) {
                    if (i < 0 || i >= this.imagesArrLocations.size()) {
                        return;
                    }
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                    if (this.canEditAvatar && !this.avatarsArr.isEmpty()) {
                        this.menuItem.showSubItem(17);
                        if (isCurrentAvatarSet()) {
                            this.menuItem.hideSubItem(16);
                        } else {
                            this.menuItem.showSubItem(16);
                        }
                        if (this.avatarsDialogId > 0) {
                            charSequence5 = "";
                        } else {
                            charSequence5 = "";
                            TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                            if (!isCurrentAvatarSet() && !MessageObject.canDeleteMessage(this.currentAccount, false, this.imagesArrMessages.get(i), chat)) {
                                z16 = false;
                                if (!z16) {
                                    this.menuItem.showSubItem(6);
                                } else {
                                    this.menuItem.hideSubItem(6);
                                }
                            }
                        }
                        z16 = true;
                        if (!z16) {
                        }
                    } else {
                        charSequence5 = "";
                        this.menuItem.hideSubItem(17);
                        this.menuItem.hideSubItem(16);
                        this.menuItem.hideSubItem(6);
                    }
                    long j = this.avatarsDialogId;
                    if (j != 0) {
                        if (j >= 0) {
                            charSequence6 = UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId)));
                        } else {
                            TLRPC$Chat chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                            charSequence6 = chat2 != null ? chat2.title : charSequence5;
                        }
                        ImageLocation imageLocation = this.imagesArrLocations.get(i);
                        if (imageLocation != null && (tLRPC$Photo = imageLocation.photo) != null) {
                            this.actionBarContainer.setSubtitle(LocaleController.formatDateTime(tLRPC$Photo.date, true), z2);
                        } else {
                            this.actionBarContainer.setSubtitle(charSequence5, z2);
                        }
                    } else {
                        charSequence6 = null;
                    }
                    MessagesController.DialogPhotos dialogPhotos = this.dialogPhotos;
                    if (dialogPhotos != null) {
                        dialogPhotos.loadAfter(i, z20);
                    }
                    PhotoCountView photoCountView14 = this.countView;
                    if (photoCountView14 != null) {
                        photoCountView14.updateShow(this.imagesArrLocations.size() > 1, true);
                        this.countView.set(this.switchingToIndex + 1, this.imagesArrLocations.size());
                    }
                    CharSequence charSequence8 = this.customTitle;
                    if (charSequence8 != null) {
                        charSequence7 = charSequence8;
                    } else {
                        charSequence7 = charSequence6;
                        if (this.isEvent) {
                            charSequence7 = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                        }
                    }
                    boolean z26 = this.avatarsDialogId != 0 && MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.avatarsDialogId);
                    if (z26) {
                        z15 = true;
                        this.menuItem.hideSubItem(1);
                    } else {
                        z15 = true;
                        this.menuItem.showSubItem(1);
                    }
                    this.allowShare = z26 ^ z15;
                    this.menuItem.showSubItem(10);
                    this.menuItem.checkHideMenuItem();
                    this.groupedPhotosListView.fillList();
                    this.editing = this.needCaptionLayout && ((i10 = this.sendPhotoType) == 0 || i10 == 2 || i10 == -1);
                    charSequence = charSequence7;
                    z3 = z2;
                    messageObject = null;
                    z4 = false;
                    i2 = 11;
                } else if (!this.imagesArrLocals.isEmpty()) {
                    if (i < 0 || i >= this.imagesArrLocals.size()) {
                        return;
                    }
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                    Object obj2 = this.imagesArrLocals.get(i);
                    if (obj2 instanceof TLRPC$BotInlineResult) {
                        TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) obj2;
                        this.currentBotInlineResult = tLRPC$BotInlineResult;
                        TLRPC$Document tLRPC$Document = tLRPC$BotInlineResult.document;
                        if (tLRPC$Document != null) {
                            z9 = MessageObject.isVideoDocument(tLRPC$Document);
                        } else {
                            z9 = tLRPC$BotInlineResult.content instanceof TLRPC$TL_webDocument ? tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) : false;
                        }
                        obj = obj2;
                        z8 = z2;
                        i5 = 0;
                        z10 = false;
                        z11 = false;
                        z12 = false;
                        cropState2 = null;
                        i3 = 8;
                    } else {
                        boolean z27 = obj2 instanceof MediaController.PhotoEntry;
                        if (z27) {
                            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj2;
                            this.currentPathObject = photoEntry.path;
                            boolean z28 = photoEntry.isVideo;
                            cropState = photoEntry.cropState;
                            z6 = z28;
                            z5 = false;
                        } else if (obj2 instanceof MediaController.SearchImage) {
                            MediaController.SearchImage searchImage = (MediaController.SearchImage) obj2;
                            this.currentPathObject = searchImage.getPathToAttach();
                            cropState = searchImage.cropState;
                            z5 = searchImage.type == 1;
                            z6 = false;
                        } else {
                            z5 = false;
                            z6 = false;
                            cropState = null;
                        }
                        if (z6) {
                            z8 = !this.isCurrentVideo ? false : z2;
                            int i19 = this.sendPhotoType;
                            if (i19 != -1) {
                                this.isCurrentVideo = true;
                            }
                            if (!z27 || (videoEditedInfo = ((MediaController.PhotoEntry) obj2).editedInfo) == null) {
                                z13 = false;
                                f = 0.0f;
                                f2 = 1.0f;
                                i6 = -1;
                            } else {
                                boolean z29 = videoEditedInfo.muted;
                                float f3 = videoEditedInfo.start;
                                float f4 = videoEditedInfo.end;
                                i6 = videoEditedInfo.compressQuality;
                                f2 = f4;
                                z13 = z29;
                                f = f3;
                            }
                            if (i19 != -1) {
                                z7 = z27;
                                i3 = 8;
                                float f5 = f2;
                                obj = obj2;
                                processOpenVideo(this.currentPathObject, z13, f, f5, i6);
                                if (this.isDocumentsPicker || Build.VERSION.SDK_INT < 18) {
                                    showVideoTimeline(false, z2);
                                    this.videoAvatarTooltip.setVisibility(8);
                                    this.cropItem.setVisibility(8);
                                    this.cropItem.setTag(null);
                                    this.tuneItem.setVisibility(8);
                                    this.tuneItem.setTag(null);
                                    this.paintItem.setVisibility(8);
                                    this.paintItem.setTag(null);
                                    this.rotateItem.setVisibility(8);
                                    this.rotateItem.setTag(null);
                                    this.mirrorItem.setVisibility(8);
                                    this.mirrorItem.setTag(null);
                                    AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                                    this.compressItem.setVisibility(8);
                                } else {
                                    showVideoTimeline(true, z2);
                                    if (this.sendPhotoType != 1) {
                                        this.videoAvatarTooltip.setVisibility(8);
                                        this.cropItem.setVisibility(0);
                                        this.cropItem.setTag(1);
                                        this.rotateItem.setVisibility(8);
                                        this.rotateItem.setTag(null);
                                        this.mirrorItem.setVisibility(8);
                                        this.mirrorItem.setTag(null);
                                        AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, true, 1.0f, z2);
                                        this.compressItem.setVisibility(0);
                                        i7 = 1;
                                    } else {
                                        this.videoAvatarTooltip.setVisibility(0);
                                        this.cropItem.setVisibility(8);
                                        this.cropItem.setTag(null);
                                        this.rotateItem.setVisibility(0);
                                        i7 = 1;
                                        this.rotateItem.setTag(1);
                                        this.mirrorItem.setVisibility(0);
                                        this.mirrorItem.setTag(1);
                                        AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                                        this.compressItem.setVisibility(8);
                                    }
                                    this.tuneItem.setVisibility(0);
                                    this.tuneItem.setTag(Integer.valueOf(i7));
                                    this.paintItem.setVisibility(0);
                                    this.paintItem.setTag(Integer.valueOf(i7));
                                }
                            } else {
                                z7 = z27;
                                obj = obj2;
                                i3 = 8;
                            }
                        } else {
                            z7 = z27;
                            obj = obj2;
                            i3 = 8;
                            showVideoTimeline(false, z2);
                            this.videoAvatarTooltip.setVisibility(8);
                            AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                            boolean z30 = this.isCurrentVideo ? false : z2;
                            this.isCurrentVideo = false;
                            this.compressItem.setVisibility(8);
                            if (z5 || (i4 = this.sendPhotoType) == 10 || this.isDocumentsPicker) {
                                this.paintItem.setVisibility(8);
                                this.paintItem.setTag(null);
                                this.cropItem.setVisibility(8);
                                this.rotateItem.setVisibility(8);
                                this.mirrorItem.setVisibility(8);
                                this.tuneItem.setVisibility(8);
                                this.tuneItem.setTag(null);
                            } else {
                                if (i4 == 4 || i4 == 5) {
                                    this.paintItem.setVisibility(8);
                                    this.paintItem.setTag(null);
                                    this.tuneItem.setVisibility(8);
                                    this.tuneItem.setTag(null);
                                } else {
                                    this.paintItem.setVisibility(0);
                                    this.paintItem.setTag(1);
                                    this.tuneItem.setVisibility(0);
                                    this.tuneItem.setTag(1);
                                }
                                this.cropItem.setVisibility(this.sendPhotoType != 1 ? 0 : 8);
                                this.rotateItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                                this.mirrorItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                            }
                            if (z2) {
                                this.actionBar.beginDelayedTransition();
                            }
                            this.actionBarContainer.setSubtitle("");
                            z8 = z30;
                        }
                        if (z7) {
                            MediaController.PhotoEntry photoEntry2 = (MediaController.PhotoEntry) obj;
                            this.fromCamera = photoEntry2.bucketId == 0 && photoEntry2.dateTaken == 0 && this.imagesArrLocals.size() == 1;
                            if (this.hasCaptionForAllMedia) {
                                charSequence3 = this.captionForAllMedia;
                            } else {
                                charSequence3 = photoEntry2.caption;
                            }
                            i5 = photoEntry2.ttl;
                            z10 = photoEntry2.isFiltered;
                            z11 = photoEntry2.isPainted;
                            z12 = photoEntry2.isCropped;
                        } else if (obj instanceof MediaController.SearchImage) {
                            MediaController.SearchImage searchImage2 = (MediaController.SearchImage) obj;
                            charSequence3 = searchImage2.caption;
                            i5 = searchImage2.ttl;
                            z10 = searchImage2.isFiltered;
                            z11 = searchImage2.isPainted;
                            z12 = searchImage2.isCropped;
                        } else {
                            z9 = z6;
                            cropState2 = cropState;
                            i5 = 0;
                            z10 = false;
                            z11 = false;
                            z12 = false;
                        }
                        charSequence2 = charSequence3;
                        z9 = z6;
                        cropState2 = cropState;
                        if (this.bottomLayout.getVisibility() != i3) {
                            this.bottomLayout.setVisibility(i3);
                        }
                        this.bottomLayout.setTag(null);
                        photoCountView = this.countView;
                        if (photoCountView != null) {
                            photoCountView.updateShow(false, z2);
                        }
                        if (this.fromCamera) {
                            charSequence4 = null;
                        } else if (z9) {
                            charSequence4 = LocaleController.getString("AttachVideo", R.string.AttachVideo);
                        } else {
                            charSequence4 = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                        }
                        chatActivity = this.parentChatActivity;
                        if (chatActivity != null) {
                            if (chatActivity.getChatMode() == 3) {
                                long savedDialogId = this.parentChatActivity.getSavedDialogId();
                                if (savedDialogId >= 0) {
                                    currentUser = this.parentChatActivity.getMessagesController().getUser(Long.valueOf(savedDialogId));
                                    currentChat = null;
                                } else {
                                    currentChat = this.parentChatActivity.getMessagesController().getChat(Long.valueOf(-savedDialogId));
                                    currentUser = null;
                                }
                            } else {
                                currentUser = this.parentChatActivity.getCurrentUser();
                                currentChat = this.parentChatActivity.getCurrentChat();
                            }
                            if (currentChat != null) {
                                charSequence4 = currentChat.title;
                            } else if (UserObject.isUserSelf(currentUser)) {
                                charSequence4 = LocaleController.getString(this.parentChatActivity.getChatMode() == 3 ? R.string.MyNotes : R.string.SavedMessages);
                            } else if (UserObject.isAnonymous(currentUser)) {
                                charSequence4 = LocaleController.getString(R.string.AnonymousForward);
                            } else {
                                charSequence4 = UserObject.getUserName(currentUser);
                            }
                        }
                        i8 = this.sendPhotoType;
                        if (i8 != 0 || i8 == 4 || ((i8 == 2 || i8 == 5) && this.imagesArrLocals.size() > 1)) {
                            this.checkImageView.setChecked(this.placeProvider.isPhotoChecked(this.switchingToIndex), false);
                        }
                        updateCaptionTextForCurrentPhoto(obj);
                        PorterDuffColorFilter porterDuffColorFilter = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                        this.captionEdit.setIsVideo(z9);
                        this.captionEdit.setTimer(i5);
                        this.paintItem.setColorFilter(!z11 ? porterDuffColorFilter : null);
                        this.cropItem.setColorFilter(!z12 ? porterDuffColorFilter : null);
                        this.tuneItem.setColorFilter(!z10 ? porterDuffColorFilter : null);
                        if (!this.fromCamera) {
                            this.mirrorItem.setColorFilter((cropState2 == null || ((!(z14 = this.isCurrentVideo) || cropState2.mirrored) && (z14 || !cropState2.mirrored))) ? null : porterDuffColorFilter);
                        } else {
                            this.mirrorItem.setColorFilter((cropState2 == null || !cropState2.mirrored) ? null : porterDuffColorFilter);
                        }
                        this.rotateItem.setColorFilter((cropState2 != null || cropState2.transformRotation == 0) ? null : null);
                        this.editing = !this.needCaptionLayout && ((i9 = this.sendPhotoType) == 0 || i9 == 2 || i9 == -1);
                        charSequence = charSequence4;
                        z3 = z8;
                        messageObject = null;
                        z4 = false;
                    }
                    charSequence2 = null;
                    if (this.bottomLayout.getVisibility() != i3) {
                    }
                    this.bottomLayout.setTag(null);
                    photoCountView = this.countView;
                    if (photoCountView != null) {
                    }
                    if (this.fromCamera) {
                    }
                    chatActivity = this.parentChatActivity;
                    if (chatActivity != null) {
                    }
                    i8 = this.sendPhotoType;
                    if (i8 != 0) {
                    }
                    this.checkImageView.setChecked(this.placeProvider.isPhotoChecked(this.switchingToIndex), false);
                    updateCaptionTextForCurrentPhoto(obj);
                    PorterDuffColorFilter porterDuffColorFilter2 = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                    this.captionEdit.setIsVideo(z9);
                    this.captionEdit.setTimer(i5);
                    this.paintItem.setColorFilter(!z11 ? porterDuffColorFilter2 : null);
                    this.cropItem.setColorFilter(!z12 ? porterDuffColorFilter2 : null);
                    this.tuneItem.setColorFilter(!z10 ? porterDuffColorFilter2 : null);
                    if (!this.fromCamera) {
                    }
                    this.rotateItem.setColorFilter((cropState2 != null || cropState2.transformRotation == 0) ? null : null);
                    this.editing = !this.needCaptionLayout && ((i9 = this.sendPhotoType) == 0 || i9 == 2 || i9 == -1);
                    charSequence = charSequence4;
                    z3 = z8;
                    messageObject = null;
                    z4 = false;
                } else {
                    PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                    if (pageBlocksAdapter != null) {
                        int itemsCount = pageBlocksAdapter.getItemsCount();
                        int i20 = this.switchingToIndex;
                        if (i20 < 0 || i20 >= itemsCount) {
                            return;
                        }
                        this.menuItem.hideSubItem(21);
                        this.menuItem.hideSubItem(22);
                        this.allowShare = !MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.currentDialogId) && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.hasRevealedExtendedMedia());
                        TLRPC$PageBlock tLRPC$PageBlock = this.pageBlocksAdapter.get(this.switchingToIndex);
                        CharSequence caption = this.pageBlocksAdapter.getCaption(this.switchingToIndex);
                        boolean isVideo2 = this.pageBlocksAdapter.isVideo(this.switchingToIndex);
                        if (isVideo2) {
                            if (this.allowShare) {
                                i2 = 11;
                                this.menuItem.showSubItem(11);
                            } else {
                                i2 = 11;
                                this.menuItem.hideSubItem(11);
                            }
                            this.menuItem.checkHideMenuItem();
                            if (!this.pipAvailable) {
                                this.pipItem.setEnabled(false);
                                setItemVisible(this.pipItem, true, true, 0.5f);
                            } else {
                                setItemVisible(this.pipItem, true, true);
                            }
                        } else {
                            i2 = 11;
                            this.menuItem.hideSubItem(11);
                            setItemVisible(this.pipItem, false, true);
                        }
                        if (this.bottomLayout.getVisibility() != 8) {
                            this.bottomLayout.setVisibility(8);
                        }
                        this.bottomLayout.setTag(null);
                        PhotoCountView photoCountView15 = this.countView;
                        if (photoCountView15 != null) {
                            photoCountView15.updateShow(itemsCount > 1, true);
                            this.countView.set(this.switchingToIndex + 1, itemsCount);
                        }
                        if (this.currentAnimation != null || (!this.pageBlocksAdapter.isVideo(i) && this.pageBlocksAdapter.isHardwarePlayer(i))) {
                            this.menuItem.hideSubItem(1);
                            if (this.allowShare) {
                                this.menuItem.showSubItem(14);
                            } else {
                                this.menuItem.hideSubItem(14);
                            }
                            this.menuItem.checkHideMenuItem();
                            string = LocaleController.getString("AttachGif", R.string.AttachGif);
                        } else {
                            if (itemsCount != 1) {
                                string = null;
                            } else if (isVideo2) {
                                string = LocaleController.getString("AttachVideo", R.string.AttachVideo);
                            } else {
                                string = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                            }
                            this.menuItem.showSubItem(1);
                            this.menuItem.hideSubItem(14);
                            this.menuItem.checkHideMenuItem();
                        }
                        this.groupedPhotosListView.fillList();
                        this.pageBlocksAdapter.updateSlideshowCell(tLRPC$PageBlock);
                        charSequence2 = caption;
                        z3 = z2;
                        z4 = false;
                        charSequence = string;
                        messageObject = null;
                    } else {
                        i2 = 11;
                        charSequence = null;
                        this.menuItem.hideSubItem(21);
                        this.menuItem.hideSubItem(22);
                        z3 = z2;
                        messageObject = null;
                        charSequence2 = null;
                        z4 = false;
                    }
                    boolean z31 = (!this.editing && this.setAvatarFor == null) || this.sendPhotoType == i2;
                    this.fancyShadows = z31;
                    this.actionBar.setBackgroundColor((z31 && this.setAvatarFor == null) ? 2130706432 : 0);
                    this.actionBarContainer.setTextShadows(this.fancyShadows);
                    this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 8);
                    if (this.currentEditMode == 0) {
                        this.navigationBar.setBackgroundColor(this.fancyShadows ? this.sendPhotoType == i2 ? 1711276032 : 0 : this.sendPhotoType == i2 ? -16777216 : 2130706432);
                    }
                    if (charSequence != null) {
                        if (!z2) {
                            this.actionBarContainer.setTitle(charSequence);
                        } else if (i15 == i) {
                            this.actionBarContainer.setTitleAnimated(charSequence, true, true);
                        } else {
                            this.actionBarContainer.setTitleAnimated(charSequence, false, i15 > i);
                        }
                    }
                    setCurrentCaption(messageObject, charSequence2, z4, z3);
                }
                charSequence2 = null;
                if (this.editing) {
                }
                this.fancyShadows = z31;
                this.actionBar.setBackgroundColor((z31 && this.setAvatarFor == null) ? 2130706432 : 0);
                this.actionBarContainer.setTextShadows(this.fancyShadows);
                this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 8);
                if (this.currentEditMode == 0) {
                }
                if (charSequence != null) {
                }
                setCurrentCaption(messageObject, charSequence2, z4, z3);
            }
            i2 = 11;
            if (this.editing) {
            }
            this.fancyShadows = z31;
            this.actionBar.setBackgroundColor((z31 && this.setAvatarFor == null) ? 2130706432 : 0);
            this.actionBarContainer.setTextShadows(this.fancyShadows);
            this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 8);
            if (this.currentEditMode == 0) {
            }
            if (charSequence != null) {
            }
            setCurrentCaption(messageObject, charSequence2, z4, z3);
        }
    }

    public /* synthetic */ void lambda$setIsAboutToSwitchToIndex$88(int i, TranslateController translateController, MessageObject messageObject, String str) {
        if (i != this.switchingToIndex) {
            return;
        }
        this.captionDetectedLanguage = str;
        if (translateController.isContextTranslateEnabled() && translateController.canTranslatePhoto(messageObject, this.captionDetectedLanguage)) {
            if (this.captionTranslated) {
                this.menuItem.showSubItem(22);
                this.menuItem.hideSubItem(21);
                return;
            }
            this.menuItem.showSubItem(21);
            this.menuItem.hideSubItem(22);
            return;
        }
        this.menuItem.hideSubItem(21);
        this.menuItem.hideSubItem(22);
    }

    public void updateCaptionTranslated() {
        int i;
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        if (this.imagesArr.isEmpty() || (i = this.switchingToIndex) < 0 || i >= this.imagesArr.size() || (messageObject = this.imagesArr.get(this.switchingToIndex)) == null) {
            return;
        }
        if (this.captionTranslated && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.translatedText != null && TextUtils.equals(tLRPC$Message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
            setCurrentCaption(messageObject, postProcessTranslated(messageObject), false, true);
        } else {
            setCurrentCaption(messageObject, messageObject.caption, this.captionTranslated, true);
        }
    }

    private CharSequence postProcessTranslated(MessageObject messageObject) {
        if (messageObject == null || messageObject.messageOwner == null) {
            return "";
        }
        Spannable replaceAnimatedEmoji = MessageObject.replaceAnimatedEmoji(Emoji.replaceEmoji((CharSequence) new SpannableStringBuilder(messageObject.messageOwner.translatedText.text), Theme.chat_msgTextPaint.getFontMetricsInt(), AndroidUtilities.dp(20.0f), false), messageObject.messageOwner.translatedText.entities, Theme.chat_msgTextPaint.getFontMetricsInt(), false);
        if (MessageObject.containsUrls(replaceAnimatedEmoji)) {
            try {
                AndroidUtilities.addLinksSafe(replaceAnimatedEmoji, 5, false, true);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        MessageObject.addUrlsByPattern(messageObject.isOutOwner(), replaceAnimatedEmoji, true, 0, 0, true);
        MessageObject.addEntitiesToText(replaceAnimatedEmoji, messageObject.messageOwner.translatedText.entities, messageObject.isOutOwner(), true, true, true);
        if (messageObject.isVideo()) {
            MessageObject.addUrlsByPattern(messageObject.isOutOwner(), replaceAnimatedEmoji, true, 3, (int) messageObject.getDuration(), false);
        } else if (messageObject.isMusic() || messageObject.isVoice()) {
            MessageObject.addUrlsByPattern(messageObject.isOutOwner(), replaceAnimatedEmoji, true, 4, (int) messageObject.getDuration(), false);
        }
        return replaceAnimatedEmoji;
    }

    public void enableStickerMode(TLRPC$Document tLRPC$Document, boolean z, Utilities.Callback2<String, TLRPC$InputDocument> callback2) {
        this.replacedSticker = tLRPC$Document;
        this.stickerEmpty = z;
        this.stickerEmptySent = false;
        this.customStickerHandler = callback2;
        this.rotate = 0.0f;
        this.animateToRotate = 0.0f;
        if (this.stickerMakerView != null) {
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            this.stickerMakerView.clean();
            ArrayList<String> arrayList = this.selectedEmojis;
            if (arrayList != null) {
                arrayList.clear();
            }
        }
        if (this.replacedSticker != null) {
            ArrayList<String> arrayList2 = this.selectedEmojis;
            if (arrayList2 == null) {
                this.selectedEmojis = new ArrayList<>();
            } else {
                arrayList2.clear();
            }
            ArrayList<String> findStickerEmoticons = MessageObject.findStickerEmoticons(tLRPC$Document, Integer.valueOf(this.currentAccount));
            if (findStickerEmoticons != null) {
                this.selectedEmojis.addAll(findStickerEmoticons);
            }
        }
        BlurButton blurButton2 = this.cutOutBtn;
        if (blurButton2 != null) {
            blurButton2.clean();
        }
        showStickerMode(true, false);
        ImageView imageView = this.tuneItem;
        if (imageView != null) {
            imageView.setAlpha(this.stickerEmpty ? 0.4f : 1.0f);
        }
    }

    public void prepareSegmentImage() {
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView == null || this.sendPhotoType != 11) {
            return;
        }
        if (this.stickerEmpty) {
            stickerMakerView.clean();
        } else {
            stickerMakerView.segmentImage(this.centerImage.getBitmap(), this.centerImage.getOrientation(), getContainerViewWidth(), getContainerViewHeight(), new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda116
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$prepareSegmentImage$89((StickerMakerView.SegmentedObject) obj);
                }
            });
        }
    }

    public /* synthetic */ void lambda$prepareSegmentImage$89(StickerMakerView.SegmentedObject segmentedObject) {
        try {
            boolean z = !TextUtils.isEmpty(((MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex)).filterPath);
            this.stickerMakerView.setSegmentedState(true, segmentedObject);
            this.centerImage.setImageBitmap(this.stickerMakerView.getSegmentedImage(this.centerImage.getBitmap(), z, this.centerImage.getOrientation()));
            this.cutOutBtn.setUndoCutState(true);
            showStickerMode(true, true, true);
            this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda84(this));
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void showStickerMode(boolean z, boolean z2) {
        showStickerMode(z, z, z2);
    }

    private void showStickerMode(boolean z, boolean z2, boolean z3) {
        if (!z3) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerView.setVisibility(z ? 0 : 8);
            this.stickerMakerView.setAlpha(this.pickerView.getAlpha());
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            this.stickerMakerBackgroundView.setVisibility(z ? 0 : 8);
            this.stickerMakerBackgroundView.setAlpha(z ? 1.0f : 0.0f);
        } else if (z && this.stickerMakerView.getTag() == null) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            if (this.stickerMakerView.getVisibility() != 0) {
                this.stickerMakerView.setVisibility(0);
                this.stickerMakerView.animate().alpha(1.0f).start();
                this.stickerMakerBackgroundView.setVisibility(0);
                this.stickerMakerBackgroundView.animate().alpha(1.0f).start();
            }
        } else if (!z && this.stickerMakerView.getTag() != null) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerView.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.stickerMakerView)).start();
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            this.stickerMakerBackgroundView.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.stickerMakerBackgroundView)).start();
        }
        this.stickerMakerView.setTag(z ? 1 : null);
        boolean z4 = (!z || this.cutOutBtn.isUndoCutState() || this.stickerEmpty) ? false : true;
        if (!z3) {
            this.cutOutBtn.animate().setListener(null).cancel();
            this.cutOutBtn.setVisibility(z4 ? 0 : 8);
            this.cutOutBtn.setAlpha(z4 ? 1.0f : 0.0f);
        } else if (z4 && this.cutOutBtn.getTag() == null) {
            this.cutOutBtn.animate().setListener(null).cancel();
            if (this.cutOutBtn.getVisibility() != 0) {
                this.cutOutBtn.setVisibility(0);
            }
            this.cutOutBtn.animate().alpha(1.0f).start();
        } else if (!z4 && this.cutOutBtn.getTag() != null) {
            this.cutOutBtn.animate().setListener(null).cancel();
            this.cutOutBtn.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.cutOutBtn)).start();
        }
        this.cutOutBtn.setTag(z4 ? 1 : null);
        showEditStickerMode(z && this.cutOutBtn.isUndoCutState() && !this.stickerEmpty, z3);
        this.stickerMakerView.setOutlineVisible(z && this.cutOutBtn.isUndoCutState() && this.outlineBtn.isActive() && !this.eraseBtn.isActive() && !this.restoreBtn.isActive());
        boolean z5 = z && this.cutOutBtn.isUndoCutState() && !this.eraseBtn.isActive() && !this.restoreBtn.isActive();
        if (!z3) {
            this.outlineBtn.animate().setListener(null).cancel();
            this.outlineBtn.setVisibility(z5 ? 0 : 8);
            this.outlineBtn.setAlpha(z5 ? 1.0f : 0.0f);
            this.outlineBtn.setScaleX(z5 ? 1.0f : 0.8f);
            this.outlineBtn.setScaleY(z5 ? 1.0f : 0.8f);
        } else if (z5 && this.outlineBtn.getTag() == null) {
            this.outlineBtn.animate().setListener(null).cancel();
            if (this.outlineBtn.getVisibility() != 0) {
                this.outlineBtn.setVisibility(0);
            }
            this.outlineBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
        } else if (!z5 && this.outlineBtn.getTag() != null) {
            this.outlineBtn.animate().setListener(null).cancel();
            this.outlineBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.outlineBtn)).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
        }
        this.outlineBtn.setTag(z5 ? 1 : null);
    }

    public void showEditStickerMode(boolean z, boolean z2) {
        StickerMakerView stickerMakerView;
        MaskPaintView maskPaintView;
        boolean z3 = true;
        if (!z || (stickerMakerView = this.stickerMakerView) == null || (stickerMakerView.empty && !stickerMakerView.overriddenPaths() && ((maskPaintView = this.maskPaintView) == null || !maskPaintView.canUndo()))) {
            z3 = false;
        }
        if (!z2) {
            this.undoBtn.animate().setListener(null).cancel();
            this.undoBtn.setVisibility(z3 ? 0 : 8);
            this.undoBtn.setAlpha(z3 ? 1.0f : 0.0f);
            this.undoBtn.setScaleX(z3 ? 1.0f : 0.8f);
            this.undoBtn.setScaleY(z3 ? 1.0f : 0.8f);
        } else if (z3 && this.undoBtn.getTag() == null) {
            this.undoBtn.animate().setListener(null).cancel();
            if (this.undoBtn.getVisibility() != 0) {
                this.undoBtn.setVisibility(0);
                this.undoBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
            }
        } else if (!z3 && this.undoBtn.getTag() != null) {
            this.undoBtn.animate().setListener(null).cancel();
            this.undoBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.undoBtn)).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
        }
        this.undoBtn.setTag(z3 ? r1 : null);
        if (!z2) {
            this.eraseBtn.animate().setListener(null).cancel();
            this.eraseBtn.setVisibility(z ? 0 : 8);
            this.eraseBtn.setAlpha(z ? 1.0f : 0.0f);
            this.eraseBtn.setScaleX(z ? 1.0f : 0.8f);
            this.eraseBtn.setScaleY(z ? 1.0f : 0.8f);
            this.restoreBtn.animate().setListener(null).cancel();
            this.restoreBtn.setVisibility(z ? 0 : 8);
            this.restoreBtn.setAlpha(z ? 1.0f : 0.0f);
            this.restoreBtn.setScaleX(z ? 1.0f : 0.8f);
            this.restoreBtn.setScaleY(z ? 1.0f : 0.8f);
        } else if (z && this.eraseBtn.getTag() == null) {
            this.eraseBtn.animate().setListener(null).cancel();
            this.restoreBtn.animate().setListener(null).cancel();
            if (this.eraseBtn.getVisibility() != 0) {
                this.eraseBtn.setVisibility(0);
                ViewPropertyAnimator scaleY = this.eraseBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
                CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
                scaleY.setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
                this.restoreBtn.setVisibility(0);
                this.restoreBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
            }
        } else if (!z && this.eraseBtn.getTag() != null) {
            this.eraseBtn.animate().setListener(null).cancel();
            ViewPropertyAnimator listener = this.eraseBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.eraseBtn));
            CubicBezierInterpolator cubicBezierInterpolator2 = CubicBezierInterpolator.EASE_OUT_QUINT;
            listener.setInterpolator(cubicBezierInterpolator2).setDuration(400L).start();
            this.restoreBtn.animate().setListener(null).cancel();
            this.restoreBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.restoreBtn)).setInterpolator(cubicBezierInterpolator2).setDuration(400L).start();
        }
        this.eraseBtn.setTag(z ? 1 : null);
    }

    private void showEditCaption(boolean z, boolean z2) {
        if (!z2) {
            this.captionEdit.animate().setListener(null).cancel();
            this.captionEdit.setVisibility(z ? 0 : 8);
            this.captionEdit.setTranslationY(0.0f);
            this.captionEdit.setAlpha(this.pickerView.getAlpha());
        } else if (z && this.captionEdit.getTag() == null) {
            if (this.captionEdit.getVisibility() != 0) {
                this.captionEdit.setVisibility(0);
                this.captionEdit.setAlpha(this.pickerView.getAlpha());
                this.captionEdit.setTranslationY(AndroidUtilities.dp(58.0f));
            }
            ObjectAnimator objectAnimator = this.captionAnimator;
            if (objectAnimator != null) {
                objectAnimator.removeAllListeners();
                this.captionAnimator.cancel();
            }
            CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
            ObjectAnimator ofFloat = ObjectAnimator.ofFloat(captionPhotoViewer, View.TRANSLATION_Y, captionPhotoViewer.getTranslationY(), 0.0f);
            this.captionAnimator = ofFloat;
            ofFloat.setDuration(220L);
            this.captionAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.captionAnimator.start();
        } else if (!z && this.captionEdit.getTag() != null) {
            ObjectAnimator objectAnimator2 = this.captionAnimator;
            if (objectAnimator2 != null) {
                objectAnimator2.removeAllListeners();
                this.captionAnimator.cancel();
            }
            CaptionPhotoViewer captionPhotoViewer2 = this.captionEdit;
            ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(captionPhotoViewer2, View.TRANSLATION_Y, captionPhotoViewer2.getTranslationY(), AndroidUtilities.dp(58.0f));
            this.captionAnimator = ofFloat2;
            ofFloat2.addListener(new HideViewAfterAnimation(this.captionEdit));
            this.captionAnimator.setDuration(220L);
            this.captionAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.captionAnimator.start();
        }
        this.captionEdit.setTag(z ? 1 : null);
    }

    private void showVideoTimeline(boolean z, boolean z2) {
        if (!z2) {
            this.videoTimelineViewContainer.animate().setListener(null).cancel();
            this.videoTimelineViewContainer.setVisibility(z ? 0 : 8);
            this.videoTimelineView.setTranslationY(0.0f);
            this.videoTimelineViewContainer.setAlpha(this.pickerView.getAlpha());
        } else if (z && this.videoTimelineViewContainer.getTag() == null) {
            if (this.videoTimelineViewContainer.getVisibility() != 0) {
                this.videoTimelineViewContainer.setVisibility(0);
                this.videoTimelineViewContainer.setAlpha(this.pickerView.getAlpha());
                this.videoTimelineView.setTranslationY(AndroidUtilities.dp(58.0f));
            }
            ObjectAnimator objectAnimator = this.videoTimelineAnimator;
            if (objectAnimator != null) {
                objectAnimator.removeAllListeners();
                this.videoTimelineAnimator.cancel();
            }
            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
            ObjectAnimator ofFloat = ObjectAnimator.ofFloat(videoTimelinePlayView, View.TRANSLATION_Y, videoTimelinePlayView.getTranslationY(), 0.0f);
            this.videoTimelineAnimator = ofFloat;
            ofFloat.setDuration(220L);
            this.videoTimelineAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.videoTimelineAnimator.start();
        } else if (!z && this.videoTimelineViewContainer.getTag() != null) {
            ObjectAnimator objectAnimator2 = this.videoTimelineAnimator;
            if (objectAnimator2 != null) {
                objectAnimator2.removeAllListeners();
                this.videoTimelineAnimator.cancel();
            }
            VideoTimelinePlayView videoTimelinePlayView2 = this.videoTimelineView;
            ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(videoTimelinePlayView2, View.TRANSLATION_Y, videoTimelinePlayView2.getTranslationY(), AndroidUtilities.dp(58.0f));
            this.videoTimelineAnimator = ofFloat2;
            ofFloat2.addListener(new HideViewAfterAnimation(this.videoTimelineViewContainer));
            this.videoTimelineAnimator.setDuration(220L);
            this.videoTimelineAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.videoTimelineAnimator.start();
        }
        FrameLayout frameLayout = this.videoTimelineViewContainer;
        if (frameLayout != null && frameLayout.getVisibility() != 8) {
            this.videoTimelineViewContainer.setTranslationY(this.pickerView.getTranslationY() - Math.max(0, this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
        }
        this.videoTimelineViewContainer.setTag(z ? 1 : null);
    }

    public static TLRPC$FileLocation getFileLocation(ImageLocation imageLocation) {
        if (imageLocation == null) {
            return null;
        }
        return imageLocation.location;
    }

    public static String getFileLocationExt(ImageLocation imageLocation) {
        if (imageLocation == null || imageLocation.imageType != 2) {
            return null;
        }
        return "mp4";
    }

    public void setImageIndex(int i) {
        setImageIndex(i, true, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:447:0x03f0  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x0411  */
    /* JADX WARN: Removed duplicated region for block: B:458:0x0420  */
    /* JADX WARN: Removed duplicated region for block: B:475:0x04a1  */
    /* JADX WARN: Removed duplicated region for block: B:477:0x04a4 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:480:0x04ad  */
    /* JADX WARN: Removed duplicated region for block: B:481:0x04af  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x04c0  */
    /* JADX WARN: Removed duplicated region for block: B:489:0x04cc  */
    /* JADX WARN: Removed duplicated region for block: B:493:0x04da  */
    /* JADX WARN: Type inference failed for: r5v5 */
    /* JADX WARN: Type inference failed for: r5v6, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r5v7 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setImageIndex(int i, boolean z, boolean z2) {
        int i2;
        boolean z3;
        boolean z4;
        boolean z5;
        boolean z6;
        boolean z7;
        Uri uri;
        Uri uri2;
        boolean equals;
        boolean z8;
        boolean z9;
        PlaceProviderObject placeProviderObject;
        PlaceProviderObject placeForPhoto;
        boolean z10;
        int i3;
        char c;
        ?? r5;
        char c2;
        MessageObject messageObject;
        MediaController.CropState cropState;
        ImageReceiver.BitmapHolder bitmapHolder;
        if (this.currentIndex == i || this.placeProvider == null) {
            return;
        }
        Uri uri3 = null;
        if (!z && (bitmapHolder = this.currentThumb) != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.currentFileNames[0] = getFileName(i);
        this.currentFileNames[1] = getFileName(i + 1);
        this.currentFileNames[2] = getFileName(i - 1);
        this.placeProvider.willSwitchFromPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex);
        this.lastPhotoSetTime = SystemClock.elapsedRealtime();
        int i4 = this.currentIndex;
        this.currentIndex = i;
        setIsAboutToSwitchToIndex(i, z, z2);
        CropTransform clone = this.cropTransform.clone();
        EditState editState = this.editState;
        MediaController.CropState clone2 = (editState == null || (cropState = editState.cropState) == null) ? null : cropState.clone();
        boolean z11 = this.centerImageIsVideo;
        this.editState.reset();
        if (!this.imagesArr.isEmpty()) {
            int i5 = this.currentIndex;
            if (i5 < 0 || i5 >= this.imagesArr.size()) {
                closePhoto(false, false);
                return;
            }
            MessageObject messageObject2 = this.imagesArr.get(this.currentIndex);
            z3 = z && (messageObject = this.currentMessageObject) != null && messageObject.getId() == messageObject2.getId();
            if (z3) {
                messageObject2.putInDownloadsStore = this.currentMessageObject.putInDownloadsStore;
            }
            this.currentMessageObject = messageObject2;
            z4 = messageObject2.isVideo();
            if (this.sharedMediaType == 1) {
                boolean canPreviewDocument = messageObject2.canPreviewDocument();
                this.canZoom = canPreviewDocument;
                if (canPreviewDocument) {
                    if (this.allowShare) {
                        this.menuItem.showSubItem(1);
                    } else {
                        this.menuItem.hideSubItem(1);
                    }
                    setDoubleTapEnabled(true);
                } else {
                    this.menuItem.hideSubItem(1);
                    setDoubleTapEnabled(false);
                }
            }
            if (z4 || this.isEmbedVideo) {
                this.speedItem.setVisibility(0);
                this.menuItem.showSubItem(19);
                this.speedGap.setVisibility(this.menuItem.getVisibleSubItemsCount() > 1 ? 0 : 8);
            } else {
                this.speedItem.setVisibility(8);
                this.speedGap.setVisibility(8);
                this.menuItem.checkHideMenuItem();
            }
            i2 = i4;
        } else {
            if (!this.secureDocuments.isEmpty()) {
                if (i < 0 || i >= this.secureDocuments.size()) {
                    closePhoto(false, false);
                    return;
                } else {
                    this.currentSecureDocument = this.secureDocuments.get(i);
                    i2 = i4;
                }
            } else if (!this.imagesArrLocations.isEmpty()) {
                if (i < 0 || i >= this.imagesArrLocations.size()) {
                    closePhoto(false, false);
                    return;
                }
                ImageLocation imageLocation = this.currentFileLocation;
                ImageLocation imageLocation2 = this.imagesArrLocations.get(i);
                if (z && imageLocation != null && imageLocation2 != null) {
                    TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated = imageLocation.location;
                    int i6 = tLRPC$TL_fileLocationToBeDeprecated.local_id;
                    TLRPC$TL_fileLocationToBeDeprecated tLRPC$TL_fileLocationToBeDeprecated2 = imageLocation2.location;
                    if (i6 == tLRPC$TL_fileLocationToBeDeprecated2.local_id) {
                        i2 = i4;
                        if (tLRPC$TL_fileLocationToBeDeprecated.volume_id == tLRPC$TL_fileLocationToBeDeprecated2.volume_id) {
                            z8 = true;
                            this.currentFileLocation = this.imagesArrLocations.get(i);
                            this.currentFileLocationVideo = this.imagesArrLocationsVideo.get(i);
                            z3 = z8;
                            z5 = false;
                            uri3 = null;
                            z9 = true;
                            z4 = false;
                            setMenuItemIcon(z5, z9);
                            placeProviderObject = this.currentPlaceObject;
                            if (placeProviderObject != null) {
                                if (this.animationInProgress == 0) {
                                    placeProviderObject.imageReceiver.setVisible(z9, z9);
                                } else {
                                    this.showAfterAnimation = placeProviderObject;
                                }
                            }
                            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                            this.currentPlaceObject = placeForPhoto;
                            if (placeForPhoto != null) {
                                if (this.animationInProgress == 0) {
                                    placeForPhoto.imageReceiver.setVisible(false, true);
                                } else {
                                    this.hideAfterAnimation = placeForPhoto;
                                }
                            }
                            if (z3) {
                                this.draggingDown = false;
                                this.translationX = 0.0f;
                                this.translationY = 0.0f;
                                this.animateToX = 0.0f;
                                this.animateToY = 0.0f;
                                float scale1 = scale1();
                                this.animateToScale = scale1;
                                this.scale = scale1;
                                this.animateToRotate = 0.0f;
                                this.animationStartTime = 0L;
                                this.zoomAnimation = false;
                                this.imageMoveAnimation = null;
                                this.changeModeAnimation = null;
                                AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
                                if (aspectRatioFrameLayout != null) {
                                    aspectRatioFrameLayout.setVisibility(4);
                                }
                                this.pinchStartDistance = 0.0f;
                                this.pinchStartAngle = 0.0f;
                                this.pinchStartScale = 1.0f;
                                this.pinchStartRotate = 0.0f;
                                this.pinchCenterX = 0.0f;
                                this.pinchCenterY = 0.0f;
                                this.pinchStartX = 0.0f;
                                this.pinchStartY = 0.0f;
                                this.moveStartX = 0.0f;
                                this.moveStartY = 0.0f;
                                this.zooming = false;
                                this.moving = false;
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                this.doubleTap = false;
                                this.invalidCoords = false;
                                this.canDragDown = true;
                                this.changingPage = false;
                                this.switchImageAfterAnimation = 0;
                                if (this.sharedMediaType != 1) {
                                    this.canZoom = (this.isEmbedVideo || (this.imagesArrLocals.isEmpty() && (this.currentFileNames[0] == null || this.photoProgressViews[0].backgroundState == 0))) ? false : true;
                                }
                                updateMinMax(this.scale);
                                z10 = false;
                                releasePlayer(false);
                            } else {
                                z10 = false;
                            }
                            if (z4 && uri3 != null) {
                                this.isStreaming = z10;
                                preparePlayer(uri3, this.sendPhotoType != 1, z10, this.editState.savedFilterState);
                            }
                            if (this.imagesArrLocals.isEmpty()) {
                                this.editState.reset();
                            }
                            this.centerImageIsVideo = z4;
                            i3 = i2;
                            if (i3 != -1) {
                                setImages();
                                for (int i7 = 0; i7 < 3; i7++) {
                                    checkProgress(i7, false, false);
                                }
                            } else {
                                checkProgress(0, true, false);
                                int i8 = this.currentIndex;
                                if (i3 > i8) {
                                    ImageReceiver imageReceiver = this.rightImage;
                                    this.rightImage = this.centerImage;
                                    this.centerImage = this.leftImage;
                                    this.leftImage = imageReceiver;
                                    BlurringShader.ThumbBlurer thumbBlurer = this.rightBlur;
                                    this.rightBlur = this.centerBlur;
                                    this.centerBlur = this.leftBlur;
                                    this.leftBlur = thumbBlurer;
                                    AnimatedFloat[] animatedFloatArr = this.centerImageInsideBlur;
                                    if (animatedFloatArr != null) {
                                        AnimatedFloat animatedFloat = animatedFloatArr[0];
                                        animatedFloatArr[0] = animatedFloatArr[1];
                                        c2 = 2;
                                        animatedFloatArr[1] = animatedFloatArr[2];
                                        animatedFloatArr[2] = animatedFloat;
                                    } else {
                                        c2 = 2;
                                    }
                                    this.rightImageIsVideo = z11;
                                    this.rightCropTransform = clone;
                                    this.rightCropState = clone2;
                                    PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
                                    PhotoProgressView photoProgressView = photoProgressViewArr[0];
                                    photoProgressViewArr[0] = photoProgressViewArr[c2];
                                    photoProgressViewArr[c2] = photoProgressView;
                                    ImageView[] imageViewArr = this.fullscreenButton;
                                    ImageView imageView = imageViewArr[0];
                                    imageViewArr[0] = imageViewArr[c2];
                                    imageViewArr[c2] = imageView;
                                    imageViewArr[0].setTranslationY(imageView.getTranslationY());
                                    this.leftCropState = null;
                                    setIndexToPaintingOverlay(this.currentIndex - 1, this.leftPaintingOverlay);
                                    setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
                                    setIndexToPaintingOverlay(this.currentIndex + 1, this.rightPaintingOverlay);
                                    setIndexToImage(this.leftImage, this.currentIndex - 1, this.leftCropTransform);
                                    resetIndexForDeferredImageLoading();
                                    updateAccessibilityOverlayVisibility();
                                    checkProgress(1, true, false);
                                    checkProgress(2, true, false);
                                } else if (i3 < i8) {
                                    ImageReceiver imageReceiver2 = this.leftImage;
                                    this.leftImage = this.centerImage;
                                    this.centerImage = this.rightImage;
                                    this.rightImage = imageReceiver2;
                                    BlurringShader.ThumbBlurer thumbBlurer2 = this.leftBlur;
                                    this.leftBlur = this.centerBlur;
                                    this.centerBlur = this.rightBlur;
                                    this.rightBlur = thumbBlurer2;
                                    AnimatedFloat[] animatedFloatArr2 = this.centerImageInsideBlur;
                                    if (animatedFloatArr2 != null) {
                                        AnimatedFloat animatedFloat2 = animatedFloatArr2[2];
                                        r5 = 1;
                                        animatedFloatArr2[2] = animatedFloatArr2[1];
                                        c = 0;
                                        animatedFloatArr2[1] = animatedFloatArr2[0];
                                        animatedFloatArr2[0] = animatedFloat2;
                                    } else {
                                        c = 0;
                                        r5 = 1;
                                    }
                                    this.leftImageIsVideo = z11;
                                    this.leftCropTransform = clone;
                                    this.leftCropState = clone2;
                                    PhotoProgressView[] photoProgressViewArr2 = this.photoProgressViews;
                                    PhotoProgressView photoProgressView2 = photoProgressViewArr2[c];
                                    photoProgressViewArr2[c] = photoProgressViewArr2[r5];
                                    photoProgressViewArr2[r5] = photoProgressView2;
                                    ImageView[] imageViewArr2 = this.fullscreenButton;
                                    ImageView imageView2 = imageViewArr2[c];
                                    imageViewArr2[c] = imageViewArr2[r5];
                                    imageViewArr2[r5] = imageView2;
                                    imageViewArr2[c].setTranslationY(imageView2.getTranslationY());
                                    this.rightCropState = null;
                                    setIndexToPaintingOverlay(this.currentIndex - r5, this.leftPaintingOverlay);
                                    setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
                                    setIndexToPaintingOverlay(this.currentIndex + r5, this.rightPaintingOverlay);
                                    setIndexToImage(this.rightImage, this.currentIndex + r5, this.rightCropTransform);
                                    resetIndexForDeferredImageLoading();
                                    updateAccessibilityOverlayVisibility();
                                    checkProgress(r5, r5, false);
                                    checkProgress(2, r5, false);
                                }
                                Bitmap bitmap = this.videoFrameBitmap;
                                if (bitmap != null) {
                                    bitmap.recycle();
                                    this.videoFrameBitmap = null;
                                }
                            }
                            detectFaces();
                        }
                        z8 = false;
                        this.currentFileLocation = this.imagesArrLocations.get(i);
                        this.currentFileLocationVideo = this.imagesArrLocationsVideo.get(i);
                        z3 = z8;
                        z5 = false;
                        uri3 = null;
                        z9 = true;
                        z4 = false;
                        setMenuItemIcon(z5, z9);
                        placeProviderObject = this.currentPlaceObject;
                        if (placeProviderObject != null) {
                        }
                        placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                        this.currentPlaceObject = placeForPhoto;
                        if (placeForPhoto != null) {
                        }
                        if (z3) {
                        }
                        if (z4) {
                            this.isStreaming = z10;
                            preparePlayer(uri3, this.sendPhotoType != 1, z10, this.editState.savedFilterState);
                        }
                        if (this.imagesArrLocals.isEmpty()) {
                        }
                        this.centerImageIsVideo = z4;
                        i3 = i2;
                        if (i3 != -1) {
                        }
                        detectFaces();
                    }
                }
                i2 = i4;
                z8 = false;
                this.currentFileLocation = this.imagesArrLocations.get(i);
                this.currentFileLocationVideo = this.imagesArrLocationsVideo.get(i);
                z3 = z8;
                z5 = false;
                uri3 = null;
                z9 = true;
                z4 = false;
                setMenuItemIcon(z5, z9);
                placeProviderObject = this.currentPlaceObject;
                if (placeProviderObject != null) {
                }
                placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                this.currentPlaceObject = placeForPhoto;
                if (placeForPhoto != null) {
                }
                if (z3) {
                }
                if (z4) {
                }
                if (this.imagesArrLocals.isEmpty()) {
                }
                this.centerImageIsVideo = z4;
                i3 = i2;
                if (i3 != -1) {
                }
                detectFaces();
            } else {
                i2 = i4;
                if (!this.imagesArrLocals.isEmpty()) {
                    if (i < 0 || i >= this.imagesArrLocals.size()) {
                        closePhoto(false, false);
                        return;
                    }
                    Object obj = this.imagesArrLocals.get(i);
                    if (obj instanceof TLRPC$BotInlineResult) {
                        TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) obj;
                        this.currentBotInlineResult = tLRPC$BotInlineResult;
                        if (tLRPC$BotInlineResult.document != null) {
                            this.currentPathObject = FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$BotInlineResult.document).getAbsolutePath();
                            equals = MessageObject.isVideoDocument(tLRPC$BotInlineResult.document);
                        } else {
                            if (tLRPC$BotInlineResult.photo != null) {
                                this.currentPathObject = FileLoader.getInstance(this.currentAccount).getPathToAttach(FileLoader.getClosestPhotoSizeWithSize(tLRPC$BotInlineResult.photo.sizes, AndroidUtilities.getPhotoSize())).getAbsolutePath();
                            } else {
                                TLRPC$WebDocument tLRPC$WebDocument = tLRPC$BotInlineResult.content;
                                if (tLRPC$WebDocument instanceof TLRPC$TL_webDocument) {
                                    this.currentPathObject = tLRPC$WebDocument.url;
                                    equals = tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND);
                                }
                            }
                            equals = false;
                        }
                        z4 = equals;
                        uri2 = null;
                        z3 = false;
                    } else {
                        if (obj instanceof MediaController.PhotoEntry) {
                            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                            String str = photoEntry.path;
                            this.currentPathObject = str;
                            if (str == null) {
                                closePhoto(false, false);
                                return;
                            }
                            z7 = photoEntry.isVideo;
                            EditState editState2 = this.editState;
                            editState2.savedFilterState = photoEntry.savedFilterState;
                            editState2.paintPath = photoEntry.paintPath;
                            editState2.croppedPaintPath = photoEntry.croppedPaintPath;
                            editState2.croppedMediaEntities = photoEntry.croppedMediaEntities;
                            editState2.averageDuration = photoEntry.averageDuration;
                            editState2.mediaEntities = photoEntry.mediaEntities;
                            editState2.cropState = photoEntry.cropState;
                            File file = new File(photoEntry.path);
                            Uri fromFile = Uri.fromFile(file);
                            if (this.isDocumentsPicker) {
                                StringBuilder sb = new StringBuilder();
                                if (photoEntry.width != 0 && photoEntry.height != 0) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    sb.append(String.format(Locale.US, "%dx%d", Integer.valueOf(photoEntry.width), Integer.valueOf(photoEntry.height)));
                                }
                                if (photoEntry.isVideo) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    sb.append(AndroidUtilities.formatShortDuration(photoEntry.duration));
                                }
                                if (photoEntry.size != 0) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    sb.append(AndroidUtilities.formatFileSize(photoEntry.size));
                                }
                                this.docNameTextView.setText(file.getName());
                                this.docInfoTextView.setText(sb);
                            }
                            z6 = this.savedState != null;
                            uri = fromFile;
                        } else {
                            if (obj instanceof MediaController.SearchImage) {
                                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                                this.currentPathObject = searchImage.getPathToAttach();
                                EditState editState3 = this.editState;
                                editState3.savedFilterState = searchImage.savedFilterState;
                                editState3.paintPath = searchImage.paintPath;
                                editState3.croppedPaintPath = searchImage.croppedPaintPath;
                                editState3.croppedMediaEntities = searchImage.croppedMediaEntities;
                                editState3.averageDuration = searchImage.averageDuration;
                                editState3.mediaEntities = searchImage.mediaEntities;
                                editState3.cropState = searchImage.cropState;
                            }
                            z6 = false;
                            z7 = false;
                            uri = null;
                        }
                        if (obj instanceof MediaController.MediaEditState) {
                            MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                            if (hasAnimatedMediaEntities()) {
                                this.currentImagePath = mediaEditState.imagePath;
                            } else {
                                String str2 = mediaEditState.filterPath;
                                if (str2 != null) {
                                    this.currentImagePath = str2;
                                } else {
                                    this.currentImagePath = this.currentPathObject;
                                }
                            }
                        }
                        z4 = z7;
                        uri2 = uri;
                        z3 = z6;
                    }
                    MediaController.CropState cropState2 = this.editState.cropState;
                    if (cropState2 != null) {
                        this.previousHasTransform = true;
                        float f = cropState2.cropPx;
                        this.previousCropPx = f;
                        float f2 = cropState2.cropPy;
                        this.previousCropPy = f2;
                        float f3 = cropState2.cropScale;
                        this.previousCropScale = f3;
                        float f4 = cropState2.cropRotate;
                        this.previousCropRotation = f4;
                        int i9 = cropState2.transformRotation;
                        this.previousCropOrientation = i9;
                        float f5 = cropState2.cropPw;
                        this.previousCropPw = f5;
                        float f6 = cropState2.cropPh;
                        this.previousCropPh = f6;
                        boolean z12 = cropState2.mirrored;
                        this.previousCropMirrored = z12;
                        this.cropTransform.setViewTransform(true, f, f2, f4, i9, f3, 1.0f, 1.0f, f5, f6, 0.0f, 0.0f, z12);
                    } else {
                        this.previousHasTransform = false;
                        this.cropTransform.setViewTransform(false, this.previousCropPx, this.previousCropPy, this.previousCropRotation, this.previousCropOrientation, this.previousCropScale, 1.0f, 1.0f, this.previousCropPw, this.previousCropPh, 0.0f, 0.0f, this.previousCropMirrored);
                    }
                    uri3 = uri2;
                } else {
                    PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                    if (pageBlocksAdapter != null) {
                        int i10 = this.currentIndex;
                        if (i10 < 0 || i10 >= pageBlocksAdapter.getItemsCount()) {
                            closePhoto(false, false);
                            return;
                        }
                        TLRPC$PageBlock tLRPC$PageBlock = this.pageBlocksAdapter.get(this.currentIndex);
                        TLRPC$PageBlock tLRPC$PageBlock2 = this.currentPageBlock;
                        z3 = tLRPC$PageBlock2 != null && tLRPC$PageBlock2 == tLRPC$PageBlock;
                        this.currentPageBlock = tLRPC$PageBlock;
                        z4 = this.pageBlocksAdapter.isVideo(this.currentIndex) || this.pageBlocksAdapter.isHardwarePlayer(this.currentIndex);
                        z5 = false;
                        uri3 = null;
                        z9 = true;
                        setMenuItemIcon(z5, z9);
                        placeProviderObject = this.currentPlaceObject;
                        if (placeProviderObject != null) {
                        }
                        placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                        this.currentPlaceObject = placeForPhoto;
                        if (placeForPhoto != null) {
                        }
                        if (z3) {
                        }
                        if (z4) {
                        }
                        if (this.imagesArrLocals.isEmpty()) {
                        }
                        this.centerImageIsVideo = z4;
                        i3 = i2;
                        if (i3 != -1) {
                        }
                        detectFaces();
                    }
                }
            }
            z5 = false;
            uri3 = null;
            z9 = true;
            z3 = false;
            z4 = false;
            setMenuItemIcon(z5, z9);
            placeProviderObject = this.currentPlaceObject;
            if (placeProviderObject != null) {
            }
            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
            this.currentPlaceObject = placeForPhoto;
            if (placeForPhoto != null) {
            }
            if (z3) {
            }
            if (z4) {
            }
            if (this.imagesArrLocals.isEmpty()) {
            }
            this.centerImageIsVideo = z4;
            i3 = i2;
            if (i3 != -1) {
            }
            detectFaces();
        }
        z5 = false;
        z9 = true;
        setMenuItemIcon(z5, z9);
        placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null) {
        }
        placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
        this.currentPlaceObject = placeForPhoto;
        if (placeForPhoto != null) {
        }
        if (z3) {
        }
        if (z4) {
        }
        if (this.imagesArrLocals.isEmpty()) {
        }
        this.centerImageIsVideo = z4;
        i3 = i2;
        if (i3 != -1) {
        }
        detectFaces();
    }

    private void resetIndexForDeferredImageLoading() {
        Object mark = this.centerImage.getMark();
        if (mark == null || !mark.equals(1)) {
            return;
        }
        setIndexToImage(this.centerImage, this.currentIndex, null);
    }

    private void setCurrentCaption(MessageObject messageObject, CharSequence charSequence, boolean z, boolean z2) {
        int i;
        boolean z3;
        boolean z4;
        TLRPC$Message tLRPC$Message;
        int i2;
        CharSequence cloneSpans = AnimatedEmojiSpan.cloneSpans(charSequence, 3);
        showEditCaption(this.editing, z2);
        if (this.editing || this.sendPhotoType == 1) {
            this.captionEdit.setText(cloneSpans);
            this.captionTextViewSwitcher.setVisibility(8);
            return;
        }
        this.captionEdit.setVisibility(8);
        if (this.needCaptionLayout) {
            if (this.captionTextViewSwitcher.getParent() != this.pickerView) {
                FrameLayout frameLayout = this.captionContainer;
                if (frameLayout != null) {
                    frameLayout.removeView(this.captionTextViewSwitcher);
                }
                this.captionTextViewSwitcher.setMeasureAllChildren(false);
                this.pickerView.addView(this.captionTextViewSwitcher, LayoutHelper.createFrame(-1, -2.0f, 83, 0.0f, 0.0f, 76.0f, 48.0f));
            }
        } else {
            if (this.captionScrollView == null) {
                FrameLayout frameLayout2 = new FrameLayout(this.containerView.getContext());
                this.captionContainer = frameLayout2;
                this.captionTextViewSwitcher.setContainer(frameLayout2);
                CaptionScrollView captionScrollView = new CaptionScrollView(this.containerView.getContext(), this.captionTextViewSwitcher, this.captionContainer) { // from class: org.telegram.ui.PhotoViewer.66
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // org.telegram.ui.PhotoViewer.CaptionScrollView
                    protected boolean isStatusBarVisible() {
                        return Build.VERSION.SDK_INT >= 21 && !PhotoViewer.this.inBubbleMode;
                    }

                    @Override // android.view.View
                    public void invalidate() {
                        super.invalidate();
                        if (PhotoViewer.this.isActionBarVisible) {
                            int scrollY = getScrollY();
                            float translationY = PhotoViewer.this.captionTextViewSwitcher.getTranslationY();
                            boolean z5 = scrollY == 0 && translationY == 0.0f;
                            boolean z6 = scrollY == 0 && translationY == 0.0f;
                            if (!z5) {
                                int y = PhotoViewer.this.photoProgressViews[0].getY() + PhotoViewer.this.photoProgressViews[0].size;
                                int top = (((PhotoViewer.this.captionContainer.getTop() + ((int) translationY)) - scrollY) + ((isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - AndroidUtilities.dp(12.0f);
                                z6 = top > ((int) PhotoViewer.this.fullscreenButton[0].getY()) + AndroidUtilities.dp(32.0f);
                                z5 = top > y;
                            }
                            if (PhotoViewer.this.allowShowFullscreenButton) {
                                if (PhotoViewer.this.fullscreenButton[0].getTag() == null || ((Integer) PhotoViewer.this.fullscreenButton[0].getTag()).intValue() != 3 || !z6) {
                                    if (PhotoViewer.this.fullscreenButton[0].getTag() == null && !z6) {
                                        PhotoViewer.this.fullscreenButton[0].setTag(3);
                                        PhotoViewer.this.fullscreenButton[0].animate().alpha(0.0f).setListener(null).setDuration(150L).start();
                                    }
                                } else {
                                    PhotoViewer.this.fullscreenButton[0].setTag(2);
                                    PhotoViewer.this.fullscreenButton[0].animate().alpha(1.0f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.66.1
                                        {
                                            66.this = this;
                                        }

                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationEnd(Animator animator) {
                                            PhotoViewer.this.fullscreenButton[0].setTag(null);
                                        }
                                    }).start();
                                }
                            }
                            PhotoViewer.this.photoProgressViews[0].setIndexedAlpha(2, z5 ? 1.0f : 0.0f, true);
                        }
                    }
                };
                this.captionScrollView = captionScrollView;
                this.captionTextViewSwitcher.setScrollView(captionScrollView);
                this.captionContainer.setClipChildren(false);
                this.captionScrollView.addView(this.captionContainer, new ViewGroup.LayoutParams(-1, -2));
                this.containerView.addView(this.captionScrollView, LayoutHelper.createFrame(-1, -1, 80));
            }
            if (this.captionTextViewSwitcher.getParent() != this.captionContainer) {
                this.pickerView.removeView(this.captionTextViewSwitcher);
                this.captionTextViewSwitcher.setMeasureAllChildren(true);
                this.captionContainer.addView(this.captionTextViewSwitcher, -1, -2);
                this.videoPreviewFrame.bringToFront();
            }
            if (messageObject != null && messageObject.isSponsored()) {
                createAdButtonView();
                AndroidUtilities.removeFromParent(this.adButtonView);
                this.adButtonTextView.setText(messageObject.sponsoredButtonText);
                this.captionContainer.addView(this.adButtonView, LayoutHelper.createFrame(-1, 44.0f, 87, 16.0f, 0.0f, 16.0f, 12.0f));
                this.captionTextViewSwitcher.setPadding(0, 0, 0, AndroidUtilities.dp(64.0f));
                this.adButtonView.bringToFront();
            } else {
                FrameLayout frameLayout3 = this.adButtonView;
                if (frameLayout3 != null) {
                    AndroidUtilities.removeFromParent(frameLayout3);
                    this.captionTextViewSwitcher.setPadding(0, 0, 0, 0);
                }
            }
        }
        boolean isEmpty = TextUtils.isEmpty(cloneSpans);
        boolean isEmpty2 = TextUtils.isEmpty(this.captionTextViewSwitcher.getCurrentView().getText());
        CaptionTextViewSwitcher captionTextViewSwitcher = this.captionTextViewSwitcher;
        TextView nextView = z2 ? captionTextViewSwitcher.getNextView() : captionTextViewSwitcher.getCurrentView();
        if (this.isCurrentVideo) {
            if (nextView.getMaxLines() != 1) {
                this.captionTextViewSwitcher.getCurrentView().setMaxLines(1);
                this.captionTextViewSwitcher.getNextView().setMaxLines(1);
                this.captionTextViewSwitcher.getCurrentView().setSingleLine(true);
                this.captionTextViewSwitcher.getNextView().setSingleLine(true);
                this.captionTextViewSwitcher.getCurrentView().setEllipsize(TextUtils.TruncateAt.END);
                this.captionTextViewSwitcher.getNextView().setEllipsize(TextUtils.TruncateAt.END);
            }
        } else {
            int maxLines = nextView.getMaxLines();
            if (maxLines == 1) {
                this.captionTextViewSwitcher.getCurrentView().setSingleLine(false);
                this.captionTextViewSwitcher.getNextView().setSingleLine(false);
            }
            if (this.needCaptionLayout) {
                Point point = AndroidUtilities.displaySize;
                i = point.x > point.y ? 5 : 10;
            } else {
                i = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            if (maxLines != i) {
                this.captionTextViewSwitcher.getCurrentView().setMaxLines(i);
                this.captionTextViewSwitcher.getNextView().setMaxLines(i);
                this.captionTextViewSwitcher.getCurrentView().setEllipsize(null);
                this.captionTextViewSwitcher.getNextView().setEllipsize(null);
            }
        }
        nextView.setScrollX(0);
        boolean z5 = this.needCaptionLayout;
        this.dontChangeCaptionPosition = !z5 && z2 && isEmpty;
        if (!z5) {
            this.captionScrollView.dontChangeTopMargin = false;
        }
        if (z2 && (i2 = Build.VERSION.SDK_INT) >= 19) {
            if (i2 >= 23) {
                TransitionManager.endTransitions(z5 ? this.pickerView : this.captionScrollView);
            }
            if (this.needCaptionLayout) {
                TransitionSet transitionSet = new TransitionSet();
                transitionSet.setOrdering(0);
                transitionSet.addTransition(new ChangeBounds());
                transitionSet.addTransition(new Fade(2));
                transitionSet.addTransition(new Fade(1));
                transitionSet.setDuration(200L);
                TransitionManager.beginDelayedTransition(this.pickerView, transitionSet);
            } else {
                TransitionSet duration = new TransitionSet().addTransition(new 68(2, isEmpty2, isEmpty)).addTransition(new 67(1, isEmpty2, isEmpty)).setDuration(200L);
                if (!isEmpty2) {
                    this.captionScrollView.dontChangeTopMargin = true;
                    duration.addTransition(new 69());
                }
                if (isEmpty2 && !isEmpty) {
                    duration.addTarget((View) this.captionTextViewSwitcher);
                }
                TransitionManager.beginDelayedTransition(this.captionScrollView, duration);
            }
            z3 = true;
        } else {
            this.captionTextViewSwitcher.getCurrentView().setText((CharSequence) null);
            CaptionScrollView captionScrollView2 = this.captionScrollView;
            if (captionScrollView2 != null) {
                captionScrollView2.scrollTo(0, 0);
            }
            z3 = false;
        }
        if (!isEmpty) {
            Theme.createChatResources(null, true);
            if (messageObject == null || !this.captionTranslated || (tLRPC$Message = messageObject.messageOwner) == null || tLRPC$Message.translatedText == null || !TextUtils.equals(tLRPC$Message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
                if (messageObject != null && !messageObject.messageOwner.entities.isEmpty()) {
                    SpannableString spannableString = new SpannableString(cloneSpans);
                    messageObject.addEntitiesToText(spannableString, true, false);
                    if (messageObject.isVideo()) {
                        MessageObject.addUrlsByPattern(messageObject.isOutOwner(), spannableString, false, 3, (int) messageObject.getDuration(), false);
                    }
                    cloneSpans = Emoji.replaceEmoji((CharSequence) spannableString, nextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
                } else {
                    cloneSpans = Emoji.replaceEmoji((CharSequence) new SpannableStringBuilder(cloneSpans), nextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
                }
            }
            if (messageObject != null && messageObject.isSponsored()) {
                cloneSpans = sponsoredCaption(messageObject, cloneSpans);
            }
            this.captionTextViewSwitcher.setTag(cloneSpans);
            try {
                this.captionTextViewSwitcher.setText(cloneSpans, z2, this.lastCaptionTranslating != z);
                CaptionScrollView captionScrollView3 = this.captionScrollView;
                if (captionScrollView3 != null) {
                    captionScrollView3.updateTopMargin();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            nextView.setScrollY(0);
            nextView.setTextColor(-1);
            this.captionTextViewSwitcher.setVisibility(this.isActionBarVisible && (!this.isCurrentVideo || this.pickerView.getVisibility() == 0 || this.pageBlocksAdapter != null) ? 0 : 4);
            z4 = false;
        } else if (this.needCaptionLayout) {
            this.captionTextViewSwitcher.setText(LocaleController.getString("AddCaption", R.string.AddCaption), z2);
            this.captionTextViewSwitcher.getCurrentView().setTextColor(-1291845633);
            this.captionTextViewSwitcher.setTag("empty");
            z4 = false;
            this.captionTextViewSwitcher.setVisibility(0);
        } else {
            z4 = false;
            this.captionTextViewSwitcher.setText(null, z2);
            this.captionTextViewSwitcher.getCurrentView().setTextColor(-1);
            this.captionTextViewSwitcher.setVisibility(4, !z3 || isEmpty2);
            this.captionTextViewSwitcher.setTag(null);
        }
        if (this.captionTextViewSwitcher.getCurrentView() instanceof CaptionTextView) {
            ((CaptionTextView) this.captionTextViewSwitcher.getCurrentView()).setLoading(z);
        }
        if (!isEmpty && z) {
            z4 = true;
        }
        this.lastCaptionTranslating = z4;
    }

    /* loaded from: classes4.dex */
    public class 68 extends Fade {
        final /* synthetic */ boolean val$isCaptionEmpty;
        final /* synthetic */ boolean val$isCurrentCaptionEmpty;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        68(int i, boolean z, boolean z2) {
            super(i);
            PhotoViewer.this = r1;
            this.val$isCurrentCaptionEmpty = z;
            this.val$isCaptionEmpty = z2;
        }

        @Override // android.transition.Fade, android.transition.Visibility
        public Animator onDisappear(ViewGroup viewGroup, View view, TransitionValues transitionValues, TransitionValues transitionValues2) {
            Animator onDisappear = super.onDisappear(viewGroup, view, transitionValues, transitionValues2);
            if (!this.val$isCurrentCaptionEmpty && this.val$isCaptionEmpty && view == PhotoViewer.this.captionTextViewSwitcher) {
                onDisappear.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.68.1
                    {
                        68.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionScrollView.setVisibility(4);
                        PhotoViewer.this.captionScrollView.backgroundAlpha = 1.0f;
                    }
                });
                ((ObjectAnimator) onDisappear).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$68$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.68.this.lambda$onDisappear$0(valueAnimator);
                    }
                });
            }
            return onDisappear;
        }

        public /* synthetic */ void lambda$onDisappear$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.backgroundAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.captionScrollView.invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public class 67 extends Fade {
        final /* synthetic */ boolean val$isCaptionEmpty;
        final /* synthetic */ boolean val$isCurrentCaptionEmpty;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        67(int i, boolean z, boolean z2) {
            super(i);
            PhotoViewer.this = r1;
            this.val$isCurrentCaptionEmpty = z;
            this.val$isCaptionEmpty = z2;
        }

        @Override // android.transition.Fade, android.transition.Visibility
        public Animator onAppear(ViewGroup viewGroup, View view, TransitionValues transitionValues, TransitionValues transitionValues2) {
            Animator onAppear = super.onAppear(viewGroup, view, transitionValues, transitionValues2);
            if (this.val$isCurrentCaptionEmpty && !this.val$isCaptionEmpty && view == PhotoViewer.this.captionTextViewSwitcher) {
                onAppear.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.67.1
                    {
                        67.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionScrollView.backgroundAlpha = 1.0f;
                    }
                });
                ((ObjectAnimator) onAppear).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$67$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.67.this.lambda$onAppear$0(valueAnimator);
                    }
                });
            }
            return onAppear;
        }

        public /* synthetic */ void lambda$onAppear$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.backgroundAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.captionScrollView.invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public class 69 extends Transition {
        69() {
            PhotoViewer.this = r1;
        }

        @Override // android.transition.Transition
        public void captureStartValues(TransitionValues transitionValues) {
            if (transitionValues.view == PhotoViewer.this.captionScrollView) {
                transitionValues.values.put("scrollY", Integer.valueOf(PhotoViewer.this.captionScrollView.getScrollY()));
            }
        }

        @Override // android.transition.Transition
        public void captureEndValues(TransitionValues transitionValues) {
            if (transitionValues.view == PhotoViewer.this.captionTextViewSwitcher) {
                transitionValues.values.put("translationY", Integer.valueOf(PhotoViewer.this.captionScrollView.getPendingMarginTopDiff()));
            }
        }

        @Override // android.transition.Transition
        public Animator createAnimator(ViewGroup viewGroup, TransitionValues transitionValues, TransitionValues transitionValues2) {
            int intValue;
            if (transitionValues.view != PhotoViewer.this.captionScrollView) {
                if (transitionValues2.view != PhotoViewer.this.captionTextViewSwitcher || (intValue = ((Integer) transitionValues2.values.get("translationY")).intValue()) == 0) {
                    return null;
                }
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(PhotoViewer.this.captionTextViewSwitcher, View.TRANSLATION_Y, 0.0f, intValue);
                ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.69.2
                    {
                        69.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionTextViewSwitcher.setTranslationY(0.0f);
                    }
                });
                return ofFloat;
            }
            ValueAnimator ofInt = ValueAnimator.ofInt(((Integer) transitionValues.values.get("scrollY")).intValue(), 0);
            ofInt.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.69.1
                {
                    69.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    PhotoViewer.this.captionTextViewSwitcher.getNextView().setText((CharSequence) null);
                    PhotoViewer.this.captionScrollView.applyPendingTopMargin();
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationStart(Animator animator) {
                    PhotoViewer.this.captionScrollView.stopScrolling();
                }
            });
            ofInt.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$69$$ExternalSyntheticLambda0
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.69.this.lambda$createAnimator$0(valueAnimator);
                }
            });
            return ofInt;
        }

        public /* synthetic */ void lambda$createAnimator$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.scrollTo(0, ((Integer) valueAnimator.getAnimatedValue()).intValue());
        }
    }

    public void setCaptionHwLayerEnabled(boolean z) {
        if (this.captionHwLayerEnabled != z) {
            this.captionHwLayerEnabled = z;
            this.captionTextViewSwitcher.setLayerType(2, null);
            this.captionTextViewSwitcher.getCurrentView().setLayerType(2, null);
            this.captionTextViewSwitcher.getNextView().setLayerType(2, null);
        }
    }

    public void checkProgress(final int i, boolean z, final boolean z2) {
        final File file;
        File file2;
        MessageObject messageObject;
        boolean shouldIndexAutoPlayed;
        boolean z3;
        File pathToAttach;
        File pathToAttach2;
        boolean z4;
        File file3;
        boolean z5;
        FileLoader.FileResolver fileResolver;
        AnimatedFileDrawable animatedFileDrawable;
        int i2 = this.currentIndex;
        int i3 = i == 1 ? i2 + 1 : i == 2 ? i2 - 1 : i2;
        boolean z6 = false;
        if (this.currentFileNames[i] != null) {
            boolean hasBitmap = (i == 0 && i2 == 0 && (animatedFileDrawable = this.currentAnimation) != null) ? animatedFileDrawable.hasBitmap() : false;
            FileLoader.FileResolver fileResolver2 = null;
            if (this.currentMessageObject != null) {
                if (i3 < 0 || i3 >= this.imagesArr.size()) {
                    this.photoProgressViews[i].setBackgroundState(-1, z2, true);
                    return;
                }
                MessageObject messageObject2 = this.imagesArr.get(i3);
                boolean shouldMessageObjectAutoPlayed = shouldMessageObjectAutoPlayed(messageObject2);
                if (this.sharedMediaType == 1 && !messageObject2.canPreviewDocument()) {
                    this.photoProgressViews[i].setBackgroundState(-1, z2, true);
                    return;
                }
                file2 = !TextUtils.isEmpty(messageObject2.messageOwner.attachPath) ? new File(messageObject2.messageOwner.attachPath) : null;
                if ((MessageObject.getMedia(messageObject2.messageOwner) instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.getMedia(messageObject2.messageOwner).webpage != null && MessageObject.getMedia(messageObject2.messageOwner).webpage.document == null) {
                    final TLObject fileLocation = getFileLocation(i3, null);
                    fileResolver = new FileLoader.FileResolver() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda107
                        @Override // org.telegram.messenger.FileLoader.FileResolver
                        public final File getFile() {
                            File lambda$checkProgress$90;
                            lambda$checkProgress$90 = PhotoViewer.this.lambda$checkProgress$90(fileLocation);
                            return lambda$checkProgress$90;
                        }
                    };
                } else {
                    final TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
                    fileResolver = new FileLoader.FileResolver() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda108
                        @Override // org.telegram.messenger.FileLoader.FileResolver
                        public final File getFile() {
                            File lambda$checkProgress$91;
                            lambda$checkProgress$91 = PhotoViewer.this.lambda$checkProgress$91(tLRPC$Message);
                            return lambda$checkProgress$91;
                        }
                    };
                }
                if (messageObject2.isVideo()) {
                    z4 = SharedConfig.streamMedia && messageObject2.canStreamVideo() && !DialogObject.isEncryptedDialog(messageObject2.getDialogId());
                    shouldIndexAutoPlayed = shouldMessageObjectAutoPlayed;
                    file = null;
                    fileResolver2 = fileResolver;
                    z3 = true;
                } else {
                    shouldIndexAutoPlayed = shouldMessageObjectAutoPlayed;
                    file = null;
                    fileResolver2 = fileResolver;
                    z4 = false;
                    z3 = false;
                }
                messageObject = messageObject2;
            } else {
                if (this.currentBotInlineResult != null) {
                    if (i3 < 0 || i3 >= this.imagesArrLocals.size()) {
                        this.photoProgressViews[i].setBackgroundState(-1, z2, true);
                        return;
                    }
                    TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) this.imagesArrLocals.get(i3);
                    if (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(tLRPC$BotInlineResult.document)) {
                        if (tLRPC$BotInlineResult.document != null) {
                            file3 = FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$BotInlineResult.document);
                        } else if (tLRPC$BotInlineResult.content instanceof TLRPC$TL_webDocument) {
                            file3 = new File(FileLoader.getDirectory(4), Utilities.MD5(tLRPC$BotInlineResult.content.url) + "." + ImageLoader.getHttpUrlExtension(tLRPC$BotInlineResult.content.url, "mp4"));
                        } else {
                            file3 = null;
                        }
                        z5 = true;
                    } else {
                        if (tLRPC$BotInlineResult.document != null) {
                            file3 = new File(FileLoader.getDirectory(3), this.currentFileNames[i]);
                        } else {
                            file3 = tLRPC$BotInlineResult.photo != null ? new File(FileLoader.getDirectory(0), this.currentFileNames[i]) : null;
                        }
                        z5 = false;
                    }
                    file = new File(FileLoader.getDirectory(4), this.currentFileNames[i]);
                    file2 = file3;
                    z3 = z5;
                    messageObject = null;
                    shouldIndexAutoPlayed = false;
                } else {
                    if (this.currentFileLocation != null) {
                        if (i3 < 0 || i3 >= this.imagesArrLocationsVideo.size()) {
                            this.photoProgressViews[i].setBackgroundState(-1, z2, true);
                            return;
                        }
                        ImageLocation imageLocation = this.imagesArrLocationsVideo.get(i3);
                        if (imageLocation != null) {
                            pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(imageLocation.location, getFileLocationExt(imageLocation), false);
                            pathToAttach2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(imageLocation.location, getFileLocationExt(imageLocation), true);
                        } else {
                            pathToAttach2 = null;
                            pathToAttach = null;
                        }
                    } else if (this.currentSecureDocument != null) {
                        if (i3 < 0 || i3 >= this.secureDocuments.size()) {
                            this.photoProgressViews[i].setBackgroundState(-1, z2, true);
                            return;
                        }
                        SecureDocument secureDocument = this.secureDocuments.get(i3);
                        pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(secureDocument, true);
                        pathToAttach2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(secureDocument, false);
                    } else if (this.currentPathObject != null) {
                        file2 = new File(FileLoader.getDirectory(3), this.currentFileNames[i]);
                        file = new File(FileLoader.getDirectory(4), this.currentFileNames[i]);
                        messageObject = null;
                        shouldIndexAutoPlayed = false;
                        z4 = false;
                        z3 = false;
                    } else {
                        PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                        if (pageBlocksAdapter != null) {
                            File file4 = pageBlocksAdapter.getFile(i3);
                            boolean z7 = this.pageBlocksAdapter.isVideo(i3) || this.pageBlocksAdapter.isHardwarePlayer(i3);
                            shouldIndexAutoPlayed = shouldIndexAutoPlayed(i3);
                            file2 = file4;
                            z3 = z7;
                            file = null;
                            messageObject = null;
                        } else {
                            file = null;
                            file2 = null;
                            messageObject = null;
                            shouldIndexAutoPlayed = false;
                            z4 = false;
                            z3 = false;
                        }
                    }
                    file = pathToAttach2;
                    file2 = pathToAttach;
                    messageObject = null;
                    shouldIndexAutoPlayed = false;
                    z4 = false;
                    z3 = false;
                }
                z4 = false;
            }
            boolean z8 = !(i == 0 && this.dontAutoPlay) && shouldIndexAutoPlayed;
            final boolean z9 = hasBitmap;
            final File file5 = file2;
            final FileLoader.FileResolver fileResolver3 = fileResolver2;
            final MessageObject messageObject3 = messageObject;
            final boolean z10 = z4;
            final boolean z11 = z3;
            final boolean z12 = z8;
            Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda104
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$checkProgress$93(z9, file5, file, fileResolver3, i, messageObject3, z10, z11, z12, z2);
                }
            });
            return;
        }
        if (!this.imagesArrLocals.isEmpty() && i3 >= 0 && i3 < this.imagesArrLocals.size()) {
            Object obj = this.imagesArrLocals.get(i3);
            if (obj instanceof MediaController.PhotoEntry) {
                z6 = ((MediaController.PhotoEntry) obj).isVideo;
            }
        }
        if (z6) {
            this.photoProgressViews[i].setBackgroundState(3, z2, true);
        } else {
            this.photoProgressViews[i].setBackgroundState(-1, z2, true);
        }
    }

    public /* synthetic */ File lambda$checkProgress$90(TLObject tLObject) {
        return FileLoader.getInstance(this.currentAccount).getPathToAttach(tLObject, true);
    }

    public /* synthetic */ File lambda$checkProgress$91(TLRPC$Message tLRPC$Message) {
        return FileLoader.getInstance(this.currentAccount).getPathToMessage(tLRPC$Message);
    }

    public /* synthetic */ void lambda$checkProgress$93(boolean z, final File file, File file2, FileLoader.FileResolver fileResolver, final int i, MessageObject messageObject, final boolean z2, final boolean z3, final boolean z4, final boolean z5) {
        final File file3;
        ChatActivity chatActivity;
        TLRPC$Document document;
        boolean exists = (z || file == null) ? z : file.exists();
        if (file2 == null && fileResolver != null) {
            file3 = fileResolver.getFile();
        } else {
            r2 = fileResolver != null ? fileResolver.getFile() : null;
            file3 = file2;
        }
        if (!exists && file3 != null) {
            exists = file3.exists();
        }
        if (!exists && r2 != null) {
            exists = r2.exists();
        }
        final boolean z6 = exists;
        if (!z6 && i != 0 && messageObject != null && z2 && DownloadController.getInstance(this.currentAccount).canDownloadMedia(messageObject.messageOwner) != 0 && (((chatActivity = this.parentChatActivity) == null || chatActivity.getCurrentEncryptedChat() == null) && !messageObject.shouldEncryptPhotoOrVideo() && (document = messageObject.getDocument()) != null)) {
            FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 0, 10);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda87
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$checkProgress$92(i, file, file3, z6, z2, z3, z4, z5);
            }
        });
    }

    public /* synthetic */ void lambda$checkProgress$92(int i, File file, File file2, boolean z, boolean z2, boolean z3, boolean z4, boolean z5) {
        boolean z6 = false;
        if (this.shownControlsByEnd && !this.actionBarWasShownBeforeByEnd && this.isPlaying) {
            this.photoProgressViews[i].setBackgroundState(3, false, false);
            return;
        }
        if ((file != null || file2 != null) && (z || z2)) {
            if (i != 0 || !this.isPlaying) {
                if (z3 && (!z4 || (i == 0 && this.playerWasPlaying))) {
                    this.photoProgressViews[i].setBackgroundState(3, z5, true);
                } else {
                    this.photoProgressViews[i].setBackgroundState(-1, z5, true);
                }
            }
            if (i == 0 && !this.menuItem.isSubMenuShowing()) {
                if (!z) {
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[i])) {
                        this.menuItem.hideSubItem(7);
                    } else {
                        this.menuItem.showSubItem(7);
                    }
                } else {
                    this.menuItem.hideSubItem(7);
                }
            }
        } else {
            if (z3) {
                if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[i])) {
                    this.photoProgressViews[i].setBackgroundState(2, false, true);
                } else {
                    this.photoProgressViews[i].setBackgroundState(1, false, true);
                }
            } else {
                this.photoProgressViews[i].setBackgroundState(0, z5, true);
            }
            Float fileProgress = ImageLoader.getInstance().getFileProgress(this.currentFileNames[i]);
            if (fileProgress == null) {
                fileProgress = Float.valueOf(0.0f);
            }
            this.photoProgressViews[i].setProgress(fileProgress.floatValue(), false);
        }
        if (i == 0) {
            if (!this.isEmbedVideo && (!this.imagesArrLocals.isEmpty() || (this.currentFileNames[0] != null && this.photoProgressViews[0].backgroundState != 0))) {
                z6 = true;
            }
            this.canZoom = z6;
        }
    }

    public int getSelectionLength() {
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer.editText != null) {
            return captionPhotoViewer.getSelectionLength();
        }
        return 0;
    }

    private void setIndexToPaintingOverlay(int i, PaintingOverlay paintingOverlay) {
        String str;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList;
        boolean z;
        if (paintingOverlay == null) {
            return;
        }
        paintingOverlay.reset();
        paintingOverlay.setVisibility(8);
        if (this.imagesArrLocals.isEmpty() || i < 0 || i >= this.imagesArrLocals.size()) {
            return;
        }
        Object obj = this.imagesArrLocals.get(i);
        if (obj instanceof MediaController.PhotoEntry) {
            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
            boolean z2 = photoEntry.isVideo;
            String str2 = photoEntry.paintPath;
            arrayList = photoEntry.mediaEntities;
            z = z2;
            str = str2;
        } else {
            if (obj instanceof MediaController.SearchImage) {
                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                String str3 = searchImage.paintPath;
                arrayList = searchImage.mediaEntities;
                str = str3;
            } else {
                str = null;
                arrayList = null;
            }
            z = false;
        }
        paintingOverlay.setVisibility(0);
        paintingOverlay.setData(str, arrayList, z, false, this.sendPhotoType != 11);
    }

    /* JADX WARN: Code restructure failed: missing block: B:886:0x07e9, code lost:
        if (r4.imageType == 2) goto L397;
     */
    /* JADX WARN: Removed duplicated region for block: B:636:0x03b5  */
    /* JADX WARN: Removed duplicated region for block: B:641:0x03f0  */
    /* JADX WARN: Removed duplicated region for block: B:642:0x03f6  */
    /* JADX WARN: Removed duplicated region for block: B:846:0x0738  */
    /* JADX WARN: Removed duplicated region for block: B:855:0x0753  */
    /* JADX WARN: Removed duplicated region for block: B:871:0x07a1  */
    /* JADX WARN: Removed duplicated region for block: B:883:0x07dc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setIndexToImage(ImageReceiver imageReceiver, int i, CropTransform cropTransform) {
        MessageObject messageObject;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLObject tLObject;
        ImageLocation imageLocation;
        int i2;
        ImageLocation imageLocation2;
        TLObject tLObject2;
        TLObject chat;
        ImageLocation imageLocation3;
        TLRPC$Photo tLRPC$Photo;
        AnimatedFileDrawable animatedFileDrawable;
        AnimatedFileDrawable animatedFileDrawable2;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        TLRPC$Document tLRPC$Document;
        WebFile webFile;
        MediaController.CropState cropState;
        boolean z;
        String str;
        int i3;
        long j;
        TLObject tLObject3;
        long j2;
        TLRPC$Document tLRPC$Document2;
        TLRPC$PhotoSize tLRPC$PhotoSize3;
        TLObject tLObject4;
        WebFile createWithWebDocument;
        TLObject tLObject5;
        TLRPC$PhotoSize tLRPC$PhotoSize4;
        ImageLocation imageLocation4;
        long j3;
        ImageLocation imageLocation5;
        MediaController.CropState cropState2;
        boolean z2;
        boolean z3;
        boolean z4;
        Drawable drawable;
        Activity activity;
        Drawable drawable2;
        BitmapDrawable drawable3;
        Activity activity2;
        String str2;
        String format;
        imageReceiver.setOrientation(0, false);
        ImageLocation imageLocation6 = null;
        if (!this.secureDocuments.isEmpty()) {
            if (i < 0 || i >= this.secureDocuments.size()) {
                return;
            }
            this.secureDocuments.get(i);
            AndroidUtilities.getPhotoSize();
            float f = AndroidUtilities.density;
            ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
            if (bitmapHolder == null || imageReceiver != this.centerImage) {
                bitmapHolder = null;
            }
            if (bitmapHolder == null) {
                bitmapHolder = this.placeProvider.getThumbForPhoto(null, null, i);
            }
            SecureDocument secureDocument = this.secureDocuments.get(i);
            imageReceiver.setImage(ImageLocation.getForSecureDocument(secureDocument), "d", null, null, bitmapHolder != null ? new BitmapDrawable(bitmapHolder.bitmap) : null, secureDocument.secureFile.size, null, null, 0);
        } else if (!this.imagesArrLocals.isEmpty()) {
            if (i >= 0 && i < this.imagesArrLocals.size()) {
                Object obj = this.imagesArrLocals.get(i);
                int photoSize = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
                ImageReceiver.BitmapHolder bitmapHolder2 = this.currentThumb;
                if (bitmapHolder2 == null || imageReceiver != this.centerImage) {
                    bitmapHolder2 = null;
                }
                if (bitmapHolder2 == null) {
                    bitmapHolder2 = this.placeProvider.getThumbForPhoto(null, null, i);
                }
                String str3 = "d";
                if (obj instanceof MediaController.PhotoEntry) {
                    MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                    MediaController.CropState cropState3 = photoEntry.cropState;
                    boolean z5 = photoEntry.isVideo;
                    if (z5) {
                        str2 = photoEntry.thumbPath;
                        if (str2 != null) {
                            if (this.fromCamera) {
                                Bitmap decodeFile = BitmapFactory.decodeFile(str2);
                                if (decodeFile != null) {
                                    bitmapHolder2 = new ImageReceiver.BitmapHolder(decodeFile);
                                    photoEntry.thumbPath = null;
                                }
                                format = null;
                                str2 = null;
                            }
                        } else {
                            str2 = "vthumb://" + photoEntry.imageId + ":" + photoEntry.path;
                        }
                        format = null;
                    } else {
                        str2 = photoEntry.filterPath;
                        if (str2 == null) {
                            imageReceiver.setOrientation(photoEntry.orientation, photoEntry.invert, false);
                            str2 = photoEntry.path;
                        }
                        format = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize), Integer.valueOf(photoSize));
                    }
                    z = z5;
                    str = str2;
                    cropState = cropState3;
                    tLRPC$Document = null;
                    webFile = null;
                    tLObject3 = null;
                    i3 = 0;
                    j = 0;
                    str3 = format;
                    tLRPC$PhotoSize2 = null;
                } else if (obj instanceof TLRPC$BotInlineResult) {
                    TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) obj;
                    if (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(tLRPC$BotInlineResult.document)) {
                        TLRPC$Document tLRPC$Document3 = tLRPC$BotInlineResult.document;
                        if (tLRPC$Document3 != null) {
                            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document3.thumbs, 90);
                            tLObject5 = tLRPC$BotInlineResult.document;
                            tLRPC$PhotoSize4 = closestPhotoSizeWithSize;
                            createWithWebDocument = null;
                            tLRPC$Document = null;
                            imageLocation4 = null;
                            str3 = null;
                            j3 = 0;
                            imageLocation6 = imageLocation4;
                            tLObject3 = tLObject5;
                            j = j3;
                            z = false;
                            str = null;
                            i3 = 1;
                            webFile = createWithWebDocument;
                            tLRPC$PhotoSize2 = tLRPC$PhotoSize4;
                            cropState = null;
                        } else {
                            TLRPC$WebDocument tLRPC$WebDocument = tLRPC$BotInlineResult.thumb;
                            if (tLRPC$WebDocument instanceof TLRPC$TL_webDocument) {
                                createWithWebDocument = WebFile.createWithWebDocument(tLRPC$WebDocument);
                                tLRPC$Document = null;
                                imageLocation4 = null;
                                tLRPC$PhotoSize4 = null;
                                str3 = null;
                                tLObject5 = null;
                                j3 = 0;
                                imageLocation6 = imageLocation4;
                                tLObject3 = tLObject5;
                                j = j3;
                                z = false;
                                str = null;
                                i3 = 1;
                                webFile = createWithWebDocument;
                                tLRPC$PhotoSize2 = tLRPC$PhotoSize4;
                                cropState = null;
                            }
                        }
                    } else {
                        if (tLRPC$BotInlineResult.type.equals("gif") && (tLRPC$Document = tLRPC$BotInlineResult.document) != null) {
                            long j4 = tLRPC$Document.size;
                            TLRPC$VideoSize documentVideoThumb = MessageObject.getDocumentVideoThumb(tLRPC$Document);
                            imageLocation4 = documentVideoThumb != null ? ImageLocation.getForDocument(documentVideoThumb, tLRPC$Document) : null;
                            j3 = j4;
                            createWithWebDocument = null;
                            tLRPC$PhotoSize4 = null;
                            tLObject5 = null;
                        } else {
                            TLRPC$Photo tLRPC$Photo2 = tLRPC$BotInlineResult.photo;
                            if (tLRPC$Photo2 != null) {
                                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo2.sizes, AndroidUtilities.getPhotoSize());
                                TLObject tLObject6 = tLRPC$BotInlineResult.photo;
                                tLRPC$PhotoSize4 = closestPhotoSizeWithSize2;
                                j3 = closestPhotoSizeWithSize2.size;
                                tLRPC$Document = null;
                                tLObject5 = tLObject6;
                                str3 = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize), Integer.valueOf(photoSize));
                                createWithWebDocument = null;
                                imageLocation4 = null;
                            } else if (tLRPC$BotInlineResult.content instanceof TLRPC$TL_webDocument) {
                                if (tLRPC$BotInlineResult.type.equals("gif")) {
                                    TLRPC$WebDocument tLRPC$WebDocument2 = tLRPC$BotInlineResult.thumb;
                                    if ((tLRPC$WebDocument2 instanceof TLRPC$TL_webDocument) && "video/mp4".equals(tLRPC$WebDocument2.mime_type)) {
                                        imageLocation5 = ImageLocation.getForWebFile(WebFile.createWithWebDocument(tLRPC$BotInlineResult.thumb));
                                        createWithWebDocument = WebFile.createWithWebDocument(tLRPC$BotInlineResult.content);
                                        imageLocation4 = imageLocation5;
                                        tLRPC$Document = null;
                                        tLRPC$PhotoSize4 = null;
                                        tLObject5 = null;
                                        j3 = 0;
                                    }
                                } else {
                                    str3 = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize), Integer.valueOf(photoSize));
                                }
                                imageLocation5 = null;
                                createWithWebDocument = WebFile.createWithWebDocument(tLRPC$BotInlineResult.content);
                                imageLocation4 = imageLocation5;
                                tLRPC$Document = null;
                                tLRPC$PhotoSize4 = null;
                                tLObject5 = null;
                                j3 = 0;
                            }
                        }
                        imageLocation6 = imageLocation4;
                        tLObject3 = tLObject5;
                        j = j3;
                        z = false;
                        str = null;
                        i3 = 1;
                        webFile = createWithWebDocument;
                        tLRPC$PhotoSize2 = tLRPC$PhotoSize4;
                        cropState = null;
                    }
                    createWithWebDocument = null;
                    tLRPC$Document = null;
                    imageLocation4 = null;
                    tLRPC$PhotoSize4 = null;
                    str3 = null;
                    tLObject5 = null;
                    j3 = 0;
                    imageLocation6 = imageLocation4;
                    tLObject3 = tLObject5;
                    j = j3;
                    z = false;
                    str = null;
                    i3 = 1;
                    webFile = createWithWebDocument;
                    tLRPC$PhotoSize2 = tLRPC$PhotoSize4;
                    cropState = null;
                } else if (obj instanceof MediaController.SearchImage) {
                    MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                    TLRPC$PhotoSize tLRPC$PhotoSize5 = searchImage.photoSize;
                    if (tLRPC$PhotoSize5 != null) {
                        tLRPC$Document2 = null;
                        str = null;
                        tLRPC$PhotoSize3 = tLRPC$PhotoSize5;
                        tLObject4 = searchImage.photo;
                        j2 = tLRPC$PhotoSize5.size;
                    } else {
                        String str4 = searchImage.filterPath;
                        if (str4 != null) {
                            str = str4;
                            j2 = 0;
                        } else {
                            TLRPC$Document tLRPC$Document4 = searchImage.document;
                            if (tLRPC$Document4 != null) {
                                tLRPC$Document2 = tLRPC$Document4;
                                j2 = tLRPC$Document4.size;
                                tLRPC$PhotoSize3 = null;
                                tLObject4 = null;
                                str = null;
                            } else {
                                str = searchImage.imageUrl;
                                j2 = searchImage.size;
                            }
                        }
                        tLRPC$Document2 = null;
                        tLRPC$PhotoSize3 = null;
                        tLObject4 = null;
                    }
                    j = j2;
                    tLRPC$Document = tLRPC$Document2;
                    tLObject3 = tLObject4;
                    webFile = null;
                    imageLocation6 = null;
                    i3 = 1;
                    cropState = searchImage.cropState;
                    tLRPC$PhotoSize2 = tLRPC$PhotoSize3;
                    z = false;
                } else {
                    tLRPC$PhotoSize2 = null;
                    tLRPC$Document = null;
                    webFile = null;
                    cropState = null;
                    str3 = null;
                    z = false;
                    imageLocation6 = null;
                    str = null;
                    i3 = 0;
                    j = 0;
                    tLObject3 = null;
                }
                if (tLRPC$Document != null) {
                    TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 90);
                    if (imageLocation6 != null) {
                        z2 = z;
                        cropState2 = cropState;
                        z3 = false;
                        imageReceiver.setImage(ImageLocation.getForDocument(tLRPC$Document), "d", imageLocation6, null, bitmapHolder2 == null ? ImageLocation.getForDocument(closestPhotoSizeWithSize3, tLRPC$Document) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize), Integer.valueOf(photoSize)), bitmapHolder2 != null ? new BitmapDrawable(bitmapHolder2.bitmap) : null, j, null, obj, i3);
                    } else {
                        cropState2 = cropState;
                        z2 = z;
                        z3 = false;
                        imageReceiver.setImage(ImageLocation.getForDocument(tLRPC$Document), "d", bitmapHolder2 == null ? ImageLocation.getForDocument(closestPhotoSizeWithSize3, tLRPC$Document) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize), Integer.valueOf(photoSize)), bitmapHolder2 != null ? new BitmapDrawable(bitmapHolder2.bitmap) : null, j, null, obj, i3);
                    }
                } else {
                    cropState2 = cropState;
                    z2 = z;
                    z3 = false;
                    if (tLRPC$PhotoSize2 != null) {
                        imageReceiver.setImage(ImageLocation.getForObject(tLRPC$PhotoSize2, tLObject3), str3, bitmapHolder2 != null ? new BitmapDrawable(bitmapHolder2.bitmap) : null, j, (String) null, obj, i3);
                    } else {
                        if (webFile == null) {
                            z4 = z2;
                            if (bitmapHolder2 != null) {
                                drawable2 = new BitmapDrawable(bitmapHolder2.bitmap);
                            } else if (!z4 || (activity = this.parentActivity) == null) {
                                drawable = null;
                                imageReceiver.setImage(str, str3, drawable, null, j);
                            } else {
                                drawable2 = activity.getResources().getDrawable(R.drawable.nophotos);
                            }
                            drawable = drawable2;
                            imageReceiver.setImage(str, str3, drawable, null, j);
                        } else if (imageLocation6 != null) {
                            imageReceiver.setImage(ImageLocation.getForWebFile(webFile), str3, imageLocation6, (String) null, (Drawable) null, obj, i3);
                        } else {
                            ImageLocation forWebFile = ImageLocation.getForWebFile(webFile);
                            if (bitmapHolder2 != null) {
                                drawable3 = new BitmapDrawable(bitmapHolder2.bitmap);
                                z4 = z2;
                            } else {
                                z4 = z2;
                                drawable3 = (!z4 || (activity2 = this.parentActivity) == null) ? null : activity2.getResources().getDrawable(R.drawable.nophotos);
                            }
                            imageReceiver.setImage(forWebFile, str3, drawable3, null, obj, i3);
                        }
                        MediaController.CropState cropState4 = cropState2;
                        if (cropTransform != null) {
                            if (cropState4 != null) {
                                cropTransform.setViewTransform(true, cropState4.cropPx, cropState4.cropPy, cropState4.cropRotate, cropState4.transformRotation, cropState4.cropScale, 1.0f, 1.0f, cropState4.cropPw, cropState4.cropPh, 0.0f, 0.0f, cropState4.mirrored);
                            } else {
                                cropTransform.setViewTransform(z3);
                            }
                        }
                        if (imageReceiver != this.leftImage) {
                            this.leftCropState = cropState4;
                            this.leftImageIsVideo = z4;
                            return;
                        } else if (imageReceiver == this.rightImage) {
                            this.rightCropState = cropState4;
                            this.rightImageIsVideo = z4;
                            return;
                        } else {
                            return;
                        }
                    }
                }
                z4 = z2;
                MediaController.CropState cropState42 = cropState2;
                if (cropTransform != null) {
                }
                if (imageReceiver != this.leftImage) {
                }
            } else {
                imageReceiver.setImageBitmap((Bitmap) null);
            }
        } else {
            PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
            if (pageBlocksAdapter != null) {
                int[] iArr = new int[1];
                TLObject media = pageBlocksAdapter.getMedia(i);
                TLRPC$PhotoSize fileLocation = this.pageBlocksAdapter.getFileLocation(media, iArr);
                if (fileLocation != null) {
                    if (media instanceof TLRPC$Photo) {
                        TLRPC$Photo tLRPC$Photo3 = (TLRPC$Photo) media;
                        ImageReceiver.BitmapHolder bitmapHolder3 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                        if (iArr[0] == 0) {
                            iArr[0] = -1;
                        }
                        boolean z6 = ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) != 0) || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(fileLocation, true).exists();
                        imageReceiver.setImage(z6 ? ImageLocation.getForPhoto(fileLocation, tLRPC$Photo3) : null, null, ImageLocation.getForPhoto(FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, 80), tLRPC$Photo3), "b", bitmapHolder3 != null ? new BitmapDrawable(bitmapHolder3.bitmap) : null, iArr[0], null, this.pageBlocksAdapter.getParentObject(), 1);
                        imageReceiver.setMark(z6 ? null : 1);
                        return;
                    } else if (this.pageBlocksAdapter.isVideo(i) || this.pageBlocksAdapter.isHardwarePlayer(i)) {
                        if (!(fileLocation.location instanceof TLRPC$TL_fileLocationUnavailable)) {
                            ImageReceiver.BitmapHolder bitmapHolder4 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                            imageReceiver.setImage(null, null, bitmapHolder4 == null ? ImageLocation.getForDocument(fileLocation, (TLRPC$Document) media) : null, "b", bitmapHolder4 != null ? new BitmapDrawable(bitmapHolder4.bitmap) : null, 0L, null, this.pageBlocksAdapter.getParentObject(), 1);
                            return;
                        }
                        imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                        return;
                    } else if (imageReceiver != this.centerImage || (animatedFileDrawable2 = this.currentAnimation) == null) {
                        return;
                    } else {
                        imageReceiver.setImageBitmap(animatedFileDrawable2);
                        this.currentAnimation.addSecondParentView(this.containerView);
                        return;
                    }
                } else if (iArr[0] == 0) {
                    imageReceiver.setImageBitmap((Bitmap) null);
                    return;
                } else {
                    imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                    return;
                }
            }
            if (this.imagesArr.isEmpty() || i < 0 || i >= this.imagesArr.size()) {
                messageObject = null;
            } else {
                imageReceiver.setShouldGenerateQualityThumb(true);
                messageObject = this.imagesArr.get(i);
            }
            if (messageObject != null) {
                if (!TextUtils.isEmpty(MessagesController.getInstance(messageObject.currentAccount).getRestrictionReason(messageObject.messageOwner.restriction_reason))) {
                    imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                    return;
                } else if (messageObject.isVideo()) {
                    ArrayList<TLRPC$PhotoSize> arrayList = messageObject.photoThumbs;
                    if (arrayList != null && !arrayList.isEmpty()) {
                        ImageReceiver.BitmapHolder bitmapHolder5 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                        TLRPC$PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
                        imageReceiver.setNeedsQualityThumb(closestPhotoSizeWithSize4.w < 100 && closestPhotoSizeWithSize4.h < 100);
                        imageReceiver.setImage(null, null, bitmapHolder5 == null ? ImageLocation.getForObject(closestPhotoSizeWithSize4, messageObject.photoThumbsObject) : null, "b", bitmapHolder5 != null ? new BitmapDrawable(bitmapHolder5.bitmap) : null, 0L, null, messageObject, 1);
                        ImageReceiver.BitmapHolder bitmapHolder6 = this.currentThumb;
                        if (bitmapHolder6 != null) {
                            imageReceiver.setOrientation(bitmapHolder6.orientation, false);
                            return;
                        }
                        return;
                    }
                    imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                    return;
                } else if (imageReceiver == this.centerImage && (animatedFileDrawable = this.currentAnimation) != null) {
                    animatedFileDrawable.addSecondParentView(this.containerView);
                    imageReceiver.setImageBitmap(this.currentAnimation);
                    return;
                } else if (this.sharedMediaType == 1) {
                    if (messageObject.canPreviewDocument()) {
                        TLRPC$Document document = messageObject.getDocument();
                        imageReceiver.setNeedsQualityThumb(true);
                        ImageReceiver.BitmapHolder bitmapHolder7 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                        int i4 = (int) (2048.0f / AndroidUtilities.density);
                        boolean z7 = ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 8) != 0) || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(document).exists();
                        imageReceiver.setImage(z7 ? ImageLocation.getForDocument(document) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(i4), Integer.valueOf(i4)), bitmapHolder7 == null ? ImageLocation.getForDocument(FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100), document) : null, "b", bitmapHolder7 != null ? new BitmapDrawable(bitmapHolder7.bitmap) : null, document.size, null, messageObject, 0);
                        imageReceiver.setMark(z7 ? null : 1);
                        return;
                    }
                    imageReceiver.setImageBitmap(new OtherDocumentPlaceholderDrawable(this.parentActivity, this.containerView, messageObject));
                    return;
                }
            }
            long[] jArr = new long[1];
            ImageLocation imageLocation7 = getImageLocation(i, jArr);
            TLObject fileLocation2 = getFileLocation(i, jArr);
            imageReceiver.setNeedsQualityThumb(true);
            if (imageLocation7 != null) {
                ImageReceiver.BitmapHolder bitmapHolder8 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                if (jArr[0] == 0) {
                    jArr[0] = -1;
                }
                if (messageObject != null) {
                    tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
                    tLObject = messageObject.photoThumbsObject;
                } else {
                    tLRPC$PhotoSize = null;
                    tLObject = null;
                }
                if (tLRPC$PhotoSize != null && tLRPC$PhotoSize == fileLocation2) {
                    tLRPC$PhotoSize = null;
                }
                if (tLRPC$PhotoSize == null && (tLRPC$Photo = imageLocation7.photo) != null && tLRPC$Photo.sizes != null) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= imageLocation7.photo.sizes.size()) {
                            break;
                        } else if (imageLocation7.photo.sizes.get(i5) instanceof TLRPC$TL_photoStrippedSize) {
                            tLRPC$PhotoSize = imageLocation7.photo.sizes.get(i5);
                            tLObject = imageLocation7.photo;
                            break;
                        } else {
                            i5++;
                        }
                    }
                }
                if (messageObject == null || !messageObject.isWebpage()) {
                    imageLocation = imageLocation7;
                    if (this.avatarsDialogId == 0 && !this.isEvent) {
                        i2 = 0;
                        if (messageObject == null) {
                            if (this.sharedMediaType == 5) {
                                TLRPC$Document document2 = messageObject.getDocument();
                                TLRPC$VideoSize documentVideoThumb2 = MessageObject.getDocumentVideoThumb(document2);
                                imageLocation2 = documentVideoThumb2 != null ? ImageLocation.getForDocument(documentVideoThumb2, document2) : null;
                                tLObject2 = messageObject;
                            } else {
                                tLObject2 = messageObject;
                                imageLocation2 = null;
                            }
                        } else {
                            long j5 = this.avatarsDialogId;
                            if (j5 != 0) {
                                if (j5 > 0) {
                                    chat = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId));
                                } else {
                                    chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                                }
                                if (tLObject != null) {
                                    chat = tLObject;
                                }
                                if (bitmapHolder8 == null && (tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize)) {
                                    bitmapHolder8 = new ImageReceiver.BitmapHolder(ImageLoader.getStrippedPhotoBitmap(tLRPC$PhotoSize.bytes, "b"));
                                }
                                tLObject2 = chat;
                                imageLocation2 = null;
                            } else {
                                imageLocation2 = null;
                                tLObject2 = null;
                            }
                        }
                        String str5 = ImageLoader.AUTOPLAY_FILTER;
                        if (imageLocation2 == null) {
                            if (this.sharedMediaType != 5) {
                                str5 = null;
                            }
                            imageReceiver.setImage(imageLocation, str5, imageLocation2, null, bitmapHolder8 == null ? ImageLocation.getForObject(tLRPC$PhotoSize, tLObject) : null, "b", bitmapHolder8 != null ? new BitmapDrawable(bitmapHolder8.bitmap) : null, jArr[0], null, tLObject2, i2);
                            imageReceiver.setAllowStartAnimation(true);
                            return;
                        }
                        if (this.avatarsDialogId != 0) {
                            imageLocation3 = imageLocation;
                        } else {
                            imageLocation3 = imageLocation;
                        }
                        str5 = null;
                        boolean z8 = ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) != 0) || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(fileLocation2).exists();
                        imageReceiver.setImage(z8 ? imageLocation3 : null, str5, bitmapHolder8 == null ? ImageLocation.getForObject(tLRPC$PhotoSize, tLObject) : null, "b", bitmapHolder8 != null ? new BitmapDrawable(bitmapHolder8.bitmap) : null, jArr[0], null, tLObject2, i2);
                        imageReceiver.setMark(z8 ? null : 1);
                        return;
                    }
                } else {
                    imageLocation = imageLocation7;
                }
                i2 = 1;
                if (messageObject == null) {
                }
                String str52 = ImageLoader.AUTOPLAY_FILTER;
                if (imageLocation2 == null) {
                }
            } else if (jArr[0] == 0) {
                imageReceiver.setImageBitmap((Bitmap) null);
            } else {
                imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
            }
        }
    }

    public static boolean isShowingImage(MessageObject messageObject) {
        boolean z;
        boolean z2 = true;
        if (Instance != null && !Instance.pipAnimationInProgress && Instance.isVisible && !Instance.disableShowCheck && messageObject != null) {
            MessageObject messageObject2 = Instance.currentMessageObject;
            if (messageObject2 == null && Instance.placeProvider != null) {
                messageObject2 = Instance.placeProvider.getEditingMessageObject();
            }
            if (messageObject2 != null && messageObject2.getId() == messageObject.getId() && messageObject2.getDialogId() == messageObject.getDialogId()) {
                z = true;
                if (z && PipInstance != null) {
                    return (!PipInstance.isVisible || PipInstance.disableShowCheck || messageObject == null || PipInstance.currentMessageObject == null || PipInstance.currentMessageObject.getId() != messageObject.getId() || PipInstance.currentMessageObject.getDialogId() != messageObject.getDialogId()) ? false : false;
                }
            }
        }
        z = false;
        return z ? z : z;
    }

    public static boolean isPlayingMessageInPip(MessageObject messageObject) {
        return (PipInstance == null || messageObject == null || PipInstance.currentMessageObject == null || PipInstance.currentMessageObject.getId() != messageObject.getId() || PipInstance.currentMessageObject.getDialogId() != messageObject.getDialogId()) ? false : true;
    }

    public static boolean isPlayingMessage(MessageObject messageObject) {
        return (Instance == null || Instance.pipAnimationInProgress || !Instance.isVisible || messageObject == null || Instance.currentMessageObject == null || Instance.currentMessageObject.getId() != messageObject.getId() || Instance.currentMessageObject.getDialogId() != messageObject.getDialogId()) ? false : true;
    }

    public static boolean isShowingImage(TLRPC$FileLocation tLRPC$FileLocation) {
        if (Instance == null || !Instance.isVisible || Instance.disableShowCheck || tLRPC$FileLocation == null) {
            return false;
        }
        return (Instance.currentFileLocation != null && tLRPC$FileLocation.local_id == Instance.currentFileLocation.location.local_id && tLRPC$FileLocation.volume_id == Instance.currentFileLocation.location.volume_id && tLRPC$FileLocation.dc_id == Instance.currentFileLocation.dc_id) || (Instance.currentFileLocationVideo != null && tLRPC$FileLocation.local_id == Instance.currentFileLocationVideo.location.local_id && tLRPC$FileLocation.volume_id == Instance.currentFileLocationVideo.location.volume_id && tLRPC$FileLocation.dc_id == Instance.currentFileLocationVideo.dc_id);
    }

    public static boolean isShowingImage(TLRPC$BotInlineResult tLRPC$BotInlineResult) {
        return (Instance == null || !Instance.isVisible || Instance.disableShowCheck || tLRPC$BotInlineResult == null || Instance.currentBotInlineResult == null || tLRPC$BotInlineResult.id != Instance.currentBotInlineResult.id) ? false : true;
    }

    public static boolean isShowingImage(String str) {
        return (Instance == null || !Instance.isVisible || Instance.disableShowCheck || str == null || !str.equals(Instance.currentPathObject)) ? false : true;
    }

    public void setParentChatActivity(ChatActivity chatActivity) {
        this.parentChatActivity = chatActivity;
    }

    public void setMaxSelectedPhotos(int i, boolean z) {
        this.maxSelectedPhotos = i;
        this.allowOrder = z;
    }

    public void checkCurrentImageVisibility() {
        PlaceProviderObject placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null) {
            placeProviderObject.imageReceiver.setVisible(true, true);
        }
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        PlaceProviderObject placeForPhoto = photoViewerProvider == null ? null : photoViewerProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
        this.currentPlaceObject = placeForPhoto;
        if (placeForPhoto != null) {
            placeForPhoto.imageReceiver.setVisible(false, true);
        }
    }

    public boolean openPhoto(MessageObject messageObject, ChatActivity chatActivity, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, chatActivity, j, j2, j3, true, null, null);
    }

    public boolean openPhoto(MessageObject messageObject, int i, ChatActivity chatActivity, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, chatActivity, j, j2, j3, true, null, Integer.valueOf(i));
    }

    public boolean openPhoto(MessageObject messageObject, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider, boolean z) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, null, j, j2, j3, z, null, null);
    }

    public boolean openPhoto(TLRPC$FileLocation tLRPC$FileLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, tLRPC$FileLocation, null, null, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhotoWithVideo(TLRPC$FileLocation tLRPC$FileLocation, ImageLocation imageLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, tLRPC$FileLocation, null, imageLocation, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhoto(TLRPC$FileLocation tLRPC$FileLocation, ImageLocation imageLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, tLRPC$FileLocation, imageLocation, null, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhoto(ArrayList<MessageObject> arrayList, int i, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(arrayList.get(i), null, null, null, arrayList, null, null, i, photoViewerProvider, null, j, j2, j3, true, null, null);
    }

    public boolean openPhoto(ArrayList<SecureDocument> arrayList, int i, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, null, null, null, null, arrayList, null, i, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhoto(int i, PageBlocksAdapter pageBlocksAdapter, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, null, null, null, null, null, null, i, photoViewerProvider, null, 0L, 0L, 0L, true, pageBlocksAdapter, null);
    }

    public boolean openPhotoForSelect(ArrayList<Object> arrayList, int i, int i2, boolean z, PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity) {
        return openPhotoForSelect(null, null, arrayList, i, i2, z, photoViewerProvider, chatActivity);
    }

    public boolean openPhotoForSelect(TLRPC$FileLocation tLRPC$FileLocation, ImageLocation imageLocation, ArrayList<Object> arrayList, int i, int i2, boolean z, PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity) {
        this.isDocumentsPicker = z;
        ImageView imageView = this.pickerViewSendButton;
        if (imageView != null) {
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) imageView.getLayoutParams();
            if (i2 == 4 || i2 == 5) {
                this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
                layoutParams.bottomMargin = AndroidUtilities.dp(7.33f);
            } else if (i2 == 1 || i2 == 3 || i2 == 10 || i2 == 11) {
                this.pickerViewSendButton.setImageResource(R.drawable.floating_check);
                this.pickerViewSendButton.setPadding(0, AndroidUtilities.dp(1.0f), 0, 0);
                layoutParams.bottomMargin = AndroidUtilities.dp(7.33f);
            } else {
                this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
                layoutParams.bottomMargin = AndroidUtilities.dp(2.33f);
            }
            this.pickerViewSendButton.setLayoutParams(layoutParams);
        }
        if (i2 != 11 && this.stickerMakerView != null) {
            this.stickerEmpty = false;
            ImageView imageView2 = this.tuneItem;
            if (imageView2 != null) {
                imageView2.setAlpha(1.0f);
            }
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            this.stickerMakerView.clean();
            ArrayList<String> arrayList2 = this.selectedEmojis;
            if (arrayList2 != null) {
                arrayList2.clear();
            }
        }
        if (this.sendPhotoType != 1 && i2 == 1 && this.isVisible) {
            this.sendPhotoType = i2;
            this.doneButtonPressed = false;
            this.actionBarContainer.setTitle("");
            this.actionBarContainer.setSubtitle("", false);
            this.placeProvider = photoViewerProvider;
            this.mergeDialogId = 0L;
            this.currentDialogId = 0L;
            this.selectedPhotosAdapter.notifyDataSetChanged();
            this.pageBlocksAdapter = null;
            if (this.velocityTracker == null) {
                this.velocityTracker = VelocityTracker.obtain();
            }
            this.isVisible = true;
            this.isVisibleOrAnimating = true;
            togglePhotosListView(false, false);
            this.openedFullScreenVideo = false;
            createCropView();
            toggleActionBar(false, false);
            this.seekToProgressPending2 = 0.0f;
            this.skipFirstBufferingProgress = false;
            this.playerInjected = false;
            makeFocusable();
            this.backgroundDrawable.setAlpha(255);
            this.containerView.setAlpha(1.0f);
            onPhotoShow(null, tLRPC$FileLocation, imageLocation, null, null, null, arrayList, i, null);
            initCropView();
            setCropBitmap();
            return true;
        }
        this.sendPhotoType = i2;
        if (i2 == 11) {
            this.navigationBar.setBackgroundColor(-16777216);
        }
        return openPhoto(null, tLRPC$FileLocation, imageLocation, null, null, null, arrayList, i, photoViewerProvider, chatActivity, 0L, 0L, 0L, true, null, null);
    }

    public void setTitle(CharSequence charSequence) {
        PhotoViewerActionBarContainer photoViewerActionBarContainer = this.actionBarContainer;
        this.customTitle = charSequence;
        photoViewerActionBarContainer.setTitle(charSequence);
        toggleActionBar(true, false);
    }

    public void openCurrentPhotoInPaintModeForSelect() {
        final File file;
        final MessageObject messageObject;
        final boolean z;
        final boolean z2;
        final boolean z3;
        ActionBarToggleParams enableStatusBarAnimation;
        if (canSendMediaToParentChatActivity()) {
            MessageObject messageObject2 = this.currentMessageObject;
            File file2 = null;
            if (messageObject2 != null) {
                boolean z4 = messageObject2.canEditMedia() && !this.currentMessageObject.isDocument();
                boolean z5 = z4 && this.currentMessageObject.isOutOwner();
                boolean isVideo = this.currentMessageObject.isVideo();
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    File file3 = new File(this.currentMessageObject.messageOwner.attachPath);
                    if (file3.exists()) {
                        file2 = file3;
                    }
                }
                if (file2 == null) {
                    file2 = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                }
                messageObject = messageObject2;
                file = file2;
                z2 = z4;
                z3 = z5;
                z = isVideo;
            } else {
                file = null;
                messageObject = null;
                z = false;
                z2 = false;
                z3 = false;
            }
            if (file != null && file.exists()) {
                this.savedState = new SavedState(this.currentIndex, new ArrayList(this.imagesArr), this.placeProvider);
                toggleActionBar(false, true, new ActionBarToggleParams().enableStatusBarAnimation(false));
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda92
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$openCurrentPhotoInPaintModeForSelect$94(file, z, messageObject, z2, z3);
                    }
                }, enableStatusBarAnimation.animationDuration);
                return;
            }
            showDownloadAlert();
        }
    }

    public /* synthetic */ void lambda$openCurrentPhotoInPaintModeForSelect$94(File file, boolean z, final MessageObject messageObject, final boolean z2, final boolean z3) {
        Pair<Integer, Integer> imageOrientation = AndroidUtilities.getImageOrientation(file);
        int i = this.lastImageId;
        this.lastImageId = i - 1;
        final MediaController.PhotoEntry orientation = new MediaController.PhotoEntry(0, i, 0L, file.getAbsolutePath(), z ? 0 : ((Integer) imageOrientation.first).intValue(), z, 0, 0, 0L).setOrientation(imageOrientation);
        this.sendPhotoType = 2;
        this.doneButtonPressed = false;
        final PhotoViewerProvider photoViewerProvider = this.placeProvider;
        this.placeProvider = new EmptyPhotoViewerProvider() { // from class: org.telegram.ui.PhotoViewer.70
            private final ImageReceiver.BitmapHolder thumbHolder;

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canCaptureMorePhotos() {
                return false;
            }

            {
                PhotoViewer.this = this;
                this.thumbHolder = this.centerImage.getBitmapSafe();
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject2, TLRPC$FileLocation tLRPC$FileLocation, int i2, boolean z4) {
                PhotoViewerProvider photoViewerProvider2 = photoViewerProvider;
                if (photoViewerProvider2 != null) {
                    return photoViewerProvider2.getPlaceForPhoto(messageObject, null, 0, z4);
                }
                return null;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject2, TLRPC$FileLocation tLRPC$FileLocation, int i2) {
                return this.thumbHolder;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i2, VideoEditedInfo videoEditedInfo, boolean z4, int i3, boolean z5) {
                sendMedia(videoEditedInfo, z4, i3, false, z5);
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void replaceButtonPressed(int i2, VideoEditedInfo videoEditedInfo) {
                MediaController.PhotoEntry photoEntry = orientation;
                if (photoEntry.isCropped || photoEntry.isPainted || photoEntry.isFiltered || videoEditedInfo != null || !TextUtils.isEmpty(photoEntry.caption)) {
                    sendMedia(videoEditedInfo, false, 0, true, false);
                }
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canEdit(int i2) {
                return photoViewerProvider != null && z2;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canReplace(int i2) {
                return photoViewerProvider != null && z3;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public MessageObject getEditingMessageObject() {
                return messageObject;
            }

            private void sendMedia(VideoEditedInfo videoEditedInfo, boolean z4, int i2, boolean z5, boolean z6) {
                if (PhotoViewer.this.parentChatActivity != null) {
                    MessageObject messageObject2 = z5 ? messageObject : null;
                    if (messageObject2 != null && !TextUtils.isEmpty(orientation.caption)) {
                        MediaController.PhotoEntry photoEntry = orientation;
                        messageObject2.editingMessage = photoEntry.caption;
                        messageObject2.editingMessageEntities = photoEntry.entities;
                    }
                    MediaController.PhotoEntry photoEntry2 = orientation;
                    if (photoEntry2.isVideo) {
                        if (videoEditedInfo != null) {
                            AccountInstance accountInstance = PhotoViewer.this.parentChatActivity.getAccountInstance();
                            String str = orientation.path;
                            long dialogId = PhotoViewer.this.parentChatActivity.getDialogId();
                            MessageObject replyMessage = PhotoViewer.this.parentChatActivity.getReplyMessage();
                            MessageObject threadMessage = PhotoViewer.this.parentChatActivity.getThreadMessage();
                            ChatActivity.ReplyQuote replyQuote = PhotoViewer.this.parentChatActivity.getReplyQuote();
                            MediaController.PhotoEntry photoEntry3 = orientation;
                            SendMessagesHelper.prepareSendingVideo(accountInstance, str, videoEditedInfo, dialogId, replyMessage, threadMessage, null, replyQuote, photoEntry3.entities, photoEntry3.ttl, messageObject2, z4, i2, z6, photoEntry3.hasSpoiler, photoEntry3.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                            return;
                        }
                        AccountInstance accountInstance2 = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        String str2 = orientation.path;
                        long dialogId2 = PhotoViewer.this.parentChatActivity.getDialogId();
                        MessageObject replyMessage2 = PhotoViewer.this.parentChatActivity.getReplyMessage();
                        MessageObject threadMessage2 = PhotoViewer.this.parentChatActivity.getThreadMessage();
                        ChatActivity.ReplyQuote replyQuote2 = PhotoViewer.this.parentChatActivity.getReplyQuote();
                        MediaController.PhotoEntry photoEntry4 = orientation;
                        SendMessagesHelper.prepareSendingVideo(accountInstance2, str2, null, dialogId2, replyMessage2, threadMessage2, null, replyQuote2, photoEntry4.entities, photoEntry4.ttl, messageObject2, z4, i2, z6, photoEntry4.hasSpoiler, photoEntry4.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                    } else if (photoEntry2.imagePath != null) {
                        AccountInstance accountInstance3 = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        MediaController.PhotoEntry photoEntry5 = orientation;
                        String str3 = photoEntry5.imagePath;
                        String str4 = photoEntry5.thumbPath;
                        long dialogId3 = PhotoViewer.this.parentChatActivity.getDialogId();
                        MessageObject replyMessage3 = PhotoViewer.this.parentChatActivity.getReplyMessage();
                        MessageObject threadMessage3 = PhotoViewer.this.parentChatActivity.getThreadMessage();
                        ChatActivity.ReplyQuote replyQuote3 = PhotoViewer.this.parentChatActivity.getReplyQuote();
                        MediaController.PhotoEntry photoEntry6 = orientation;
                        SendMessagesHelper.prepareSendingPhoto(accountInstance3, str3, str4, null, dialogId3, replyMessage3, threadMessage3, null, replyQuote3, photoEntry6.entities, photoEntry6.stickers, null, photoEntry6.ttl, messageObject2, videoEditedInfo, z4, i2, 0, z6, photoEntry6.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                    } else if (photoEntry2.path != null) {
                        AccountInstance accountInstance4 = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        MediaController.PhotoEntry photoEntry7 = orientation;
                        String str5 = photoEntry7.path;
                        String str6 = photoEntry7.thumbPath;
                        long dialogId4 = PhotoViewer.this.parentChatActivity.getDialogId();
                        MessageObject replyMessage4 = PhotoViewer.this.parentChatActivity.getReplyMessage();
                        MessageObject threadMessage4 = PhotoViewer.this.parentChatActivity.getThreadMessage();
                        ChatActivity.ReplyQuote replyQuote4 = PhotoViewer.this.parentChatActivity.getReplyQuote();
                        MediaController.PhotoEntry photoEntry8 = orientation;
                        SendMessagesHelper.prepareSendingPhoto(accountInstance4, str5, str6, null, dialogId4, replyMessage4, threadMessage4, null, replyQuote4, photoEntry8.entities, photoEntry8.stickers, null, photoEntry8.ttl, messageObject2, videoEditedInfo, z4, i2, 0, z6, photoEntry8.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                    }
                }
            }
        };
        this.selectedPhotosAdapter.notifyDataSetChanged();
        if (this.velocityTracker == null) {
            this.velocityTracker = VelocityTracker.obtain();
        }
        this.aboutToSwitchTo = 3;
        togglePhotosListView(false, false);
        toggleActionBar(true, false);
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity != null && chatActivity.getChatActivityEnterView() != null && this.parentChatActivity.isKeyboardVisible()) {
            this.parentChatActivity.getChatActivityEnterView().closeKeyboard();
        } else {
            makeFocusable();
        }
        this.backgroundDrawable.setAlpha(255);
        this.containerView.setAlpha(1.0f);
        onPhotoShow(null, null, null, null, null, null, Collections.singletonList(orientation), 0, null);
        this.pickerView.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        this.pickerViewSendButton.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        ActionBar actionBar = this.actionBar;
        actionBar.setTranslationY(-actionBar.getHeight());
        this.captionTextViewSwitcher.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        createPaintView();
        switchToPaintMode();
        this.aboutToSwitchTo = 0;
    }

    private boolean checkAnimation() {
        if (this.animationInProgress != 0) {
            invalidateBlur();
            if (Math.abs(this.transitionAnimationStartTime - System.currentTimeMillis()) >= 500) {
                Runnable runnable = this.animationEndRunnable;
                if (runnable != null) {
                    runnable.run();
                    this.animationEndRunnable = null;
                }
                this.animationInProgress = 0;
            }
        }
        return this.animationInProgress != 0;
    }

    public void setCropBitmap() {
        VideoEditTextureView videoEditTextureView;
        if (this.cropInitied || this.sendPhotoType != 1) {
            return;
        }
        if (!this.isCurrentVideo || ((videoEditTextureView = (VideoEditTextureView) this.videoTextureView) != null && videoEditTextureView.getVideoWidth() > 0 && videoEditTextureView.getVideoHeight() > 0)) {
            this.cropInitied = true;
            Bitmap bitmap = this.centerImage.getBitmap();
            int orientation = this.centerImage.getOrientation();
            if (bitmap == null) {
                bitmap = this.animatingImageView.getBitmap();
                orientation = this.animatingImageView.getOrientation();
            }
            Bitmap bitmap2 = bitmap;
            int i = orientation;
            if (bitmap2 == null && this.videoTextureView == null) {
                return;
            }
            this.photoCropView.setBitmap(bitmap2, i, false, false, this.paintingOverlay, this.cropTransform, this.isCurrentVideo ? (VideoEditTextureView) this.videoTextureView : null, this.editState.cropState);
        }
    }

    private void initCropView() {
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView == null) {
            return;
        }
        photoCropView.setBitmap(null, 0, false, false, null, null, null, null);
        if (this.sendPhotoType != 1) {
            return;
        }
        this.photoCropView.onAppear();
        this.photoCropView.setVisibility(0);
        this.photoCropView.setAlpha(1.0f);
        this.photoCropView.onAppeared();
        this.padImageForHorizontalInsets = true;
    }

    public boolean openPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, ImageLocation imageLocation, ImageLocation imageLocation2, ArrayList<MessageObject> arrayList, ArrayList<SecureDocument> arrayList2, ArrayList<Object> arrayList3, int i, final PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity, long j, long j2, long j3, boolean z, PageBlocksAdapter pageBlocksAdapter, final Integer num) {
        TLRPC$Message tLRPC$Message;
        PhotoViewerProvider photoViewerProvider2;
        int i2 = 0;
        if (this.parentActivity != null && !this.isVisible && ((photoViewerProvider != null || !checkAnimation()) && (messageObject != null || tLRPC$FileLocation != null || arrayList != null || arrayList3 != null || arrayList2 != null || imageLocation != null || pageBlocksAdapter != null))) {
            PlaceProviderObject placeForPhoto = photoViewerProvider.getPlaceForPhoto(messageObject, tLRPC$FileLocation, i, true);
            if (Build.VERSION.SDK_INT < 21) {
                Rect rect = this.insets;
                rect.top = AndroidUtilities.statusBarHeight;
                rect.bottom = AndroidUtilities.navigationBarHeight;
            }
            WindowManager windowManager = (WindowManager) this.parentActivity.getSystemService("window");
            if (this.attachedToWindow) {
                try {
                    windowManager.removeView(this.windowView);
                    onHideView();
                } catch (Exception unused) {
                }
            }
            try {
                WindowManager.LayoutParams layoutParams = this.windowLayoutParams;
                layoutParams.type = 99;
                if (Build.VERSION.SDK_INT >= 21) {
                    layoutParams.flags = -2147286784;
                } else {
                    layoutParams.flags = 131072;
                }
                if (!(chatActivity == null || chatActivity.getCurrentEncryptedChat() == null) || ((this.avatarsDialogId != 0 && MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.avatarsDialogId)) || ((messageObject != null && (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || ((tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards))) || (messageObject != null && messageObject.hasRevealedExtendedMedia())))) {
                    this.windowLayoutParams.flags |= LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM;
                } else {
                    this.windowLayoutParams.flags &= -8193;
                }
                this.windowLayoutParams.softInputMode = 272;
                this.windowView.setFocusable(false);
                this.containerView.setFocusable(false);
                windowManager.addView(this.windowView, this.windowLayoutParams);
                onShowView();
                this.hasCaptionForAllMedia = false;
                this.doneButtonPressed = false;
                this.closePhotoAfterSelect = true;
                this.allowShowFullscreenButton = true;
                this.usedSurfaceView = false;
                this.parentChatActivity = chatActivity;
                this.lastTitle = null;
                this.isEmbedVideo = num != null;
                this.actionBarContainer.setTitle("");
                this.actionBarContainer.setSubtitle("", false);
                PhotoCountView photoCountView = this.countView;
                if (photoCountView != null) {
                    photoCountView.set(0, 0, false);
                    this.countView.updateShow(false, false);
                }
                this.actionBar.setTitleScrollNonFitText(false);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoadFailed);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoaded);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.customStickerCreated);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoadProgressChanged);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.mediaCountDidLoad);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.mediaDidLoad);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.dialogPhotosUpdate);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.messagesDeleted);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.filePreparingFailed);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileNewChunkAvailable);
                this.placeProvider = photoViewerProvider;
                this.mergeDialogId = j2;
                this.currentDialogId = j;
                this.currentFilterTag = chatActivity != null ? chatActivity.getFilterTag() : null;
                this.currentFilterQuery = chatActivity != null ? chatActivity.getFilterQuery() : null;
                this.currentFiltered = chatActivity != null && chatActivity.isFiltered();
                this.topicId = j3;
                this.selectedPhotosAdapter.notifyDataSetChanged();
                this.pageBlocksAdapter = pageBlocksAdapter;
                this.setAvatarFor = null;
                if (this.velocityTracker == null) {
                    this.velocityTracker = VelocityTracker.obtain();
                }
                this.isVisible = true;
                this.isVisibleOrAnimating = true;
                togglePhotosListView(false, false);
                boolean z2 = !z;
                this.openedFullScreenVideo = z2;
                if (z2) {
                    toggleActionBar(false, false);
                } else if (this.sendPhotoType == 1) {
                    createCropView();
                    toggleActionBar(false, false);
                } else {
                    toggleActionBar(true, false);
                }
                this.windowView.setClipChildren(false);
                this.navigationBar.setVisibility(0);
                this.seekToProgressPending2 = 0.0f;
                this.skipFirstBufferingProgress = false;
                this.playerInjected = false;
                if (placeForPhoto != null) {
                    this.disableShowCheck = true;
                    this.animationInProgress = 1;
                    if (messageObject != null) {
                        AnimatedFileDrawable animation = placeForPhoto.allowTakeAnimation ? placeForPhoto.imageReceiver.getAnimation() : null;
                        this.currentAnimation = animation;
                        if (animation != null) {
                            if (messageObject.isVideo()) {
                                placeForPhoto.imageReceiver.setAllowStartAnimation(false);
                                placeForPhoto.imageReceiver.stopAnimation();
                                if (MediaController.getInstance().isPlayingMessage(messageObject)) {
                                    this.seekToProgressPending2 = messageObject.audioProgress;
                                }
                                this.skipFirstBufferingProgress = this.injectingVideoPlayer == null && !FileLoader.getInstance(messageObject.currentAccount).isLoadingVideo(messageObject.getDocument(), true) && (this.currentAnimation.hasBitmap() || !FileLoader.getInstance(messageObject.currentAccount).isLoadingVideo(messageObject.getDocument(), false));
                                this.currentAnimation = null;
                            } else if (messageObject.getWebPagePhotos(null, null).size() > 1) {
                                this.currentAnimation = null;
                            }
                        }
                    } else if (pageBlocksAdapter != null) {
                        this.currentAnimation = placeForPhoto.imageReceiver.getAnimation();
                    }
                    float f = 0.0f;
                    onPhotoShow(messageObject, tLRPC$FileLocation, imageLocation, imageLocation2, arrayList, arrayList2, arrayList3, i, placeForPhoto);
                    if (this.sendPhotoType == 1) {
                        this.photoCropView.setVisibility(0);
                        this.photoCropView.setAlpha(0.0f);
                        this.photoCropView.setFreeform(false);
                    }
                    RectF drawRegion = placeForPhoto.imageReceiver.getDrawRegion();
                    float f2 = drawRegion.left;
                    float f3 = drawRegion.top;
                    int orientation = placeForPhoto.imageReceiver.getOrientation();
                    int animatedOrientation = placeForPhoto.imageReceiver.getAnimatedOrientation();
                    if (animatedOrientation != 0) {
                        orientation = animatedOrientation;
                    }
                    ClippingImageView[] animatingImageViews = getAnimatingImageViews(placeForPhoto);
                    this.clippingImageProgress = 1.0f;
                    for (int i3 = 0; i3 < animatingImageViews.length; i3++) {
                        animatingImageViews[i3].setAnimationValues(this.animationValues);
                        animatingImageViews[i3].setVisibility(0);
                        animatingImageViews[i3].setRadius(placeForPhoto.radius);
                        animatingImageViews[i3].setOrientation(orientation, placeForPhoto.imageReceiver.getInvert());
                        animatingImageViews[i3].setImageBitmap(placeForPhoto.thumb);
                    }
                    initCropView();
                    if (this.sendPhotoType == 1) {
                        this.photoCropView.setAspectRatio(1.0f);
                    }
                    ViewGroup.LayoutParams layoutParams2 = this.animatingImageView.getLayoutParams();
                    layoutParams2.width = (int) drawRegion.width();
                    int height = (int) drawRegion.height();
                    layoutParams2.height = height;
                    if (layoutParams2.width <= 0) {
                        layoutParams2.width = 100;
                    }
                    if (height <= 0) {
                        layoutParams2.height = 100;
                    }
                    while (i2 < animatingImageViews.length) {
                        if (animatingImageViews.length > 1) {
                            animatingImageViews[i2].setAlpha(f);
                        } else {
                            animatingImageViews[i2].setAlpha(1.0f);
                        }
                        animatingImageViews[i2].setPivotX(f);
                        animatingImageViews[i2].setPivotY(f);
                        animatingImageViews[i2].setScaleX(placeForPhoto.scale);
                        animatingImageViews[i2].setScaleY(placeForPhoto.scale);
                        animatingImageViews[i2].setTranslationX(placeForPhoto.viewX + (drawRegion.left * placeForPhoto.scale));
                        animatingImageViews[i2].setTranslationY(placeForPhoto.viewY + (drawRegion.top * placeForPhoto.scale));
                        animatingImageViews[i2].setLayoutParams(layoutParams2);
                        i2++;
                        f = 0.0f;
                    }
                    this.windowView.getViewTreeObserver().addOnPreDrawListener(new 71(animatingImageViews, layoutParams2, f2, placeForPhoto, f3, photoViewerProvider, arrayList3, num));
                } else {
                    if (arrayList3 != null && this.sendPhotoType != 3 && ((photoViewerProvider2 = this.placeProvider) == null || !photoViewerProvider2.closeKeyboard())) {
                        makeFocusable();
                    }
                    this.containerView.setAlpha(1.0f);
                    onPhotoShow(messageObject, tLRPC$FileLocation, imageLocation, imageLocation2, arrayList, arrayList2, arrayList3, i, placeForPhoto);
                    initCropView();
                    setCropBitmap();
                    ChatActivity chatActivity2 = this.parentChatActivity;
                    if (chatActivity2 != null) {
                        UndoView undoView = chatActivity2.getUndoView();
                        if (undoView != null) {
                            undoView.hide(false, 1);
                        }
                        this.parentChatActivity.getFragmentView().invalidate();
                    }
                    this.windowView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.PhotoViewer.72
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.view.ViewTreeObserver.OnPreDrawListener
                        public boolean onPreDraw() {
                            PhotoViewer.this.windowView.getViewTreeObserver().removeOnPreDrawListener(this);
                            PhotoViewer.this.actionBar.setTranslationY(-AndroidUtilities.dp(32.0f));
                            ViewPropertyAnimator duration = PhotoViewer.this.actionBar.animate().alpha(1.0f).translationY(0.0f).setDuration(150L);
                            CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.DEFAULT;
                            duration.setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.checkImageView.setTranslationY(-AndroidUtilities.dp(32.0f));
                            PhotoViewer.this.checkImageView.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.photosCounterView.setTranslationY(-AndroidUtilities.dp(32.0f));
                            PhotoViewer.this.photosCounterView.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.pickerView.setTranslationY(AndroidUtilities.dp(32.0f));
                            PhotoViewer.this.pickerView.animate().alpha(1.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.pickerViewSendButton.setTranslationY(AndroidUtilities.dp(32.0f));
                            PhotoViewer.this.pickerViewSendButton.setAlpha(0.0f);
                            PhotoViewer.this.pickerViewSendButton.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.videoPreviewFrame.setTranslationY(AndroidUtilities.dp(32.0f));
                            PhotoViewer.this.videoPreviewFrame.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                            PhotoViewer.this.containerView.setAlpha(0.0f);
                            PhotoViewer.this.backgroundDrawable.setAlpha(0);
                            PhotoViewer.this.animationInProgress = 4;
                            PhotoViewer.this.containerView.invalidate();
                            AnimatorSet animatorSet = new AnimatorSet();
                            ObjectAnimator duration2 = ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.TRANSLATION_Y, PhotoViewer.this.pickerView.getTranslationY(), 0.0f).setDuration(220L);
                            duration2.setInterpolator(cubicBezierInterpolator);
                            ObjectAnimator duration3 = ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.ALPHA, 1.0f).setDuration(220L);
                            duration3.setInterpolator(cubicBezierInterpolator);
                            animatorSet.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.containerView, View.ALPHA, 0.0f, 1.0f).setDuration(220L), ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, View.ALPHA, 0.0f, 1.0f).setDuration(220L), duration2, duration3);
                            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.72.1
                                {
                                    72.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationStart(Animator animator) {
                                    super.onAnimationStart(animator);
                                    PhotoViewerProvider photoViewerProvider3 = photoViewerProvider;
                                    if (photoViewerProvider3 != null) {
                                        photoViewerProvider3.onPreOpen();
                                    }
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    super.onAnimationEnd(animator);
                                    PhotoViewer.this.animationInProgress = 0;
                                    PhotoViewer.this.invalidateBlur();
                                    PhotoViewer.this.backgroundDrawable.setAlpha(255);
                                    PhotoViewer.this.containerView.invalidate();
                                    PhotoViewer.this.pickerView.setTranslationY(0.0f);
                                    if (PhotoViewer.this.isEmbedVideo) {
                                        72 r2 = 72.this;
                                        PhotoViewer.this.initEmbedVideo(num.intValue());
                                    }
                                    PhotoViewerProvider photoViewerProvider3 = photoViewerProvider;
                                    if (photoViewerProvider3 != null) {
                                        photoViewerProvider3.onOpen();
                                    }
                                }
                            });
                            animatorSet.start();
                            return true;
                        }
                    });
                }
                AccessibilityManager accessibilityManager = (AccessibilityManager) this.parentActivity.getSystemService("accessibility");
                if (accessibilityManager.isTouchExplorationEnabled()) {
                    AccessibilityEvent obtain = AccessibilityEvent.obtain();
                    obtain.setEventType(LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM);
                    obtain.getText().add(LocaleController.getString("AccDescrPhotoViewer", R.string.AccDescrPhotoViewer));
                    accessibilityManager.sendAccessibilityEvent(obtain);
                }
                return true;
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        return false;
    }

    /* loaded from: classes4.dex */
    public class 71 implements ViewTreeObserver.OnPreDrawListener {
        final /* synthetic */ ClippingImageView[] val$animatingImageViews;
        final /* synthetic */ Integer val$embedSeekTime;
        final /* synthetic */ ViewGroup.LayoutParams val$layoutParams;
        final /* synthetic */ float val$left;
        final /* synthetic */ PlaceProviderObject val$object;
        final /* synthetic */ ArrayList val$photos;
        final /* synthetic */ PhotoViewerProvider val$provider;
        final /* synthetic */ float val$top;

        71(ClippingImageView[] clippingImageViewArr, ViewGroup.LayoutParams layoutParams, float f, PlaceProviderObject placeProviderObject, float f2, PhotoViewerProvider photoViewerProvider, ArrayList arrayList, Integer num) {
            PhotoViewer.this = r1;
            this.val$animatingImageViews = clippingImageViewArr;
            this.val$layoutParams = layoutParams;
            this.val$left = f;
            this.val$object = placeProviderObject;
            this.val$top = f2;
            this.val$provider = photoViewerProvider;
            this.val$photos = arrayList;
            this.val$embedSeekTime = num;
        }

        @Override // android.view.ViewTreeObserver.OnPreDrawListener
        public boolean onPreDraw() {
            float f;
            float f2;
            float measuredWidth;
            PlaceProviderObject placeProviderObject;
            ClippingImageView[] clippingImageViewArr;
            int i;
            ClippingImageView[] clippingImageViewArr2 = this.val$animatingImageViews;
            if (clippingImageViewArr2.length > 1) {
                clippingImageViewArr2[1].setAlpha(1.0f);
                this.val$animatingImageViews[1].setAdditionalTranslationX(-PhotoViewer.this.getLeftInset());
            }
            ClippingImageView[] clippingImageViewArr3 = this.val$animatingImageViews;
            clippingImageViewArr3[0].setTranslationX(clippingImageViewArr3[0].getTranslationX() + PhotoViewer.this.getLeftInset());
            PhotoViewer.this.windowView.getViewTreeObserver().removeOnPreDrawListener(this);
            if (PhotoViewer.this.sendPhotoType == 1) {
                float f3 = PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0;
                float measuredHeight = (PhotoViewer.this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - f3;
                float measuredWidth2 = PhotoViewer.this.photoCropView.getMeasuredWidth() / 2.0f;
                float f4 = f3 + (measuredHeight / 2.0f);
                float min = (Math.min(PhotoViewer.this.photoCropView.getMeasuredWidth(), measuredHeight) - (AndroidUtilities.dp(16.0f) * 2)) / 2.0f;
                float f5 = f4 - min;
                ViewGroup.LayoutParams layoutParams = this.val$layoutParams;
                float f6 = (f4 + min) - f5;
                f = Math.max(((measuredWidth2 + min) - (measuredWidth2 - min)) / layoutParams.width, f6 / layoutParams.height);
                f2 = f5 + ((f6 - (this.val$layoutParams.height * f)) / 2.0f);
                measuredWidth = ((((PhotoViewer.this.windowView.getMeasuredWidth() - PhotoViewer.this.getLeftInset()) - PhotoViewer.this.getRightInset()) - (this.val$layoutParams.width * f)) / 2.0f) + PhotoViewer.this.getLeftInset();
            } else {
                float min2 = Math.min(PhotoViewer.this.windowView.getMeasuredWidth() / this.val$layoutParams.width, (AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) / this.val$layoutParams.height);
                if (PhotoViewer.this.sendPhotoType == 11) {
                    min2 *= PhotoViewer.this.scale1();
                }
                f = min2;
                f2 = ((AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (this.val$layoutParams.height * f)) / 2.0f;
                measuredWidth = (PhotoViewer.this.windowView.getMeasuredWidth() - (this.val$layoutParams.width * f)) / 2.0f;
                PhotoViewer.this.rotate = 0.0f;
                PhotoViewer.this.animateToRotate = 0.0f;
            }
            int abs = (int) Math.abs(this.val$left - this.val$object.imageReceiver.getImageX());
            int abs2 = (int) Math.abs(this.val$top - this.val$object.imageReceiver.getImageY());
            if (this.val$object.imageReceiver.isAspectFit()) {
                abs = 0;
            }
            int[] iArr = new int[2];
            this.val$object.parentView.getLocationInWindow(iArr);
            int i2 = iArr[1];
            int i3 = Build.VERSION.SDK_INT;
            float f7 = i2 - ((i3 >= 21 || PhotoViewer.this.inBubbleMode) ? 0 : AndroidUtilities.statusBarHeight);
            int i4 = this.val$object.viewY;
            float f8 = this.val$top;
            int i5 = (int) ((f7 - (i4 + f8)) + placeProviderObject.clipTopAddition);
            if (i5 < 0) {
                i5 = 0;
            }
            int height = (int) ((((i4 + f8) + this.val$layoutParams.height) - ((iArr[1] + placeProviderObject.parentView.getHeight()) - ((i3 >= 21 || PhotoViewer.this.inBubbleMode) ? 0 : AndroidUtilities.statusBarHeight))) + this.val$object.clipBottomAddition);
            if (height < 0) {
                height = 0;
            }
            int max = Math.max(i5, abs2);
            int max2 = Math.max(height, abs2);
            PhotoViewer.this.animationValues[0][0] = PhotoViewer.this.animatingImageView.getScaleX();
            PhotoViewer.this.animationValues[0][1] = PhotoViewer.this.animatingImageView.getScaleY();
            PhotoViewer.this.animationValues[0][2] = PhotoViewer.this.animatingImageView.getTranslationX();
            PhotoViewer.this.animationValues[0][3] = PhotoViewer.this.animatingImageView.getTranslationY();
            float f9 = abs;
            PhotoViewer.this.animationValues[0][4] = this.val$object.scale * f9;
            PhotoViewer.this.animationValues[0][5] = max * this.val$object.scale;
            PhotoViewer.this.animationValues[0][6] = max2 * this.val$object.scale;
            int[] radius = PhotoViewer.this.animatingImageView.getRadius();
            for (int i6 = 0; i6 < 4; i6++) {
                PhotoViewer.this.animationValues[0][i6 + 7] = radius != null ? radius[i6] : 0.0f;
            }
            PhotoViewer.this.animationValues[0][11] = abs2 * this.val$object.scale;
            PhotoViewer.this.animationValues[0][12] = f9 * this.val$object.scale;
            PhotoViewer.this.animationValues[1][0] = f;
            PhotoViewer.this.animationValues[1][1] = f;
            PhotoViewer.this.animationValues[1][2] = measuredWidth;
            PhotoViewer.this.animationValues[1][3] = f2;
            PhotoViewer.this.animationValues[1][4] = 0.0f;
            PhotoViewer.this.animationValues[1][5] = 0.0f;
            PhotoViewer.this.animationValues[1][6] = 0.0f;
            PhotoViewer.this.animationValues[1][7] = 0.0f;
            PhotoViewer.this.animationValues[1][8] = 0.0f;
            PhotoViewer.this.animationValues[1][9] = 0.0f;
            PhotoViewer.this.animationValues[1][10] = 0.0f;
            PhotoViewer.this.animationValues[1][11] = 0.0f;
            PhotoViewer.this.animationValues[1][12] = 0.0f;
            int i7 = 0;
            while (true) {
                ClippingImageView[] clippingImageViewArr4 = this.val$animatingImageViews;
                if (i7 >= clippingImageViewArr4.length) {
                    break;
                }
                clippingImageViewArr4[i7].setAnimationProgress(0.0f);
                i7++;
            }
            PhotoViewer.this.backgroundDrawable.setAlpha(0);
            PhotoViewer.this.containerView.setAlpha(0.0f);
            PhotoViewer.this.navigationBar.setAlpha(0.0f);
            PhotoViewerProvider photoViewerProvider = this.val$provider;
            if (photoViewerProvider != null) {
                photoViewerProvider.onPreOpen();
            }
            PhotoViewer photoViewer = PhotoViewer.this;
            final ClippingImageView[] clippingImageViewArr5 = this.val$animatingImageViews;
            final ArrayList arrayList = this.val$photos;
            final Integer num = this.val$embedSeekTime;
            final PhotoViewerProvider photoViewerProvider2 = this.val$provider;
            photoViewer.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$71$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.71.this.lambda$onPreDraw$0(clippingImageViewArr5, arrayList, num, photoViewerProvider2);
                }
            };
            if (PhotoViewer.this.openedFullScreenVideo) {
                if (PhotoViewer.this.animationEndRunnable != null) {
                    PhotoViewer.this.animationEndRunnable.run();
                    PhotoViewer.this.animationEndRunnable = null;
                }
                PhotoViewer.this.containerView.setAlpha(1.0f);
                PhotoViewer.this.backgroundDrawable.setAlpha(255);
                int i8 = 0;
                while (true) {
                    ClippingImageView[] clippingImageViewArr6 = this.val$animatingImageViews;
                    if (i8 >= clippingImageViewArr6.length) {
                        break;
                    }
                    clippingImageViewArr6[i8].setAnimationProgress(1.0f);
                    i8++;
                }
                if (PhotoViewer.this.sendPhotoType == 1) {
                    PhotoViewer.this.photoCropView.setAlpha(1.0f);
                }
            } else {
                final AnimatorSet animatorSet = new AnimatorSet();
                int i9 = PhotoViewer.this.sendPhotoType != 1 ? 2 : 3;
                ClippingImageView[] clippingImageViewArr7 = this.val$animatingImageViews;
                ArrayList arrayList2 = new ArrayList(i9 + clippingImageViewArr7.length + (clippingImageViewArr7.length > 1 ? 1 : 0));
                int i10 = 0;
                while (true) {
                    clippingImageViewArr = this.val$animatingImageViews;
                    if (i10 >= clippingImageViewArr.length) {
                        break;
                    }
                    ObjectAnimator ofFloat = ObjectAnimator.ofFloat(clippingImageViewArr[i10], AnimationProperties.CLIPPING_IMAGE_VIEW_PROGRESS, 0.0f, 1.0f);
                    if (i10 == 0) {
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$71$$ExternalSyntheticLambda0
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.71.this.lambda$onPreDraw$1(valueAnimator);
                            }
                        });
                    }
                    arrayList2.add(ofFloat);
                    i10++;
                }
                if (clippingImageViewArr.length > 1) {
                    i = 2;
                    arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.animatingImageView, View.ALPHA, 0.0f, 1.0f));
                } else {
                    i = 2;
                }
                int[] iArr2 = new int[i];
                // fill-array-data instruction
                iArr2[0] = 0;
                iArr2[1] = 255;
                arrayList2.add(ObjectAnimator.ofInt(PhotoViewer.this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, iArr2));
                float[] fArr = new float[i];
                // fill-array-data instruction
                fArr[0] = 0.0f;
                fArr[1] = 1.0f;
                arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.containerView, View.ALPHA, fArr));
                float[] fArr2 = new float[i];
                // fill-array-data instruction
                fArr2[0] = 0.0f;
                fArr2[1] = 1.0f;
                arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, View.ALPHA, fArr2));
                if (PhotoViewer.this.sendPhotoType == 1) {
                    float[] fArr3 = new float[i];
                    // fill-array-data instruction
                    fArr3[0] = 0.0f;
                    fArr3[1] = 1.0f;
                    arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, View.ALPHA, fArr3));
                }
                animatorSet.playTogether(arrayList2);
                animatorSet.setDuration(200L);
                animatorSet.addListener(new 1());
                PhotoViewer.this.containerView.setLayerType(2, null);
                PhotoViewer.this.setCaptionHwLayerEnabled(false);
                PhotoViewer.this.transitionAnimationStartTime = System.currentTimeMillis();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$71$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.71.this.lambda$onPreDraw$2(animatorSet);
                    }
                });
            }
            BackgroundDrawable backgroundDrawable = PhotoViewer.this.backgroundDrawable;
            final PlaceProviderObject placeProviderObject2 = this.val$object;
            backgroundDrawable.drawRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$71$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.71.this.lambda$onPreDraw$3(placeProviderObject2);
                }
            };
            if (PhotoViewer.this.parentChatActivity != null && PhotoViewer.this.parentChatActivity.getFragmentView() != null) {
                UndoView undoView = PhotoViewer.this.parentChatActivity.getUndoView();
                if (undoView != null) {
                    undoView.hide(false, 1);
                }
                PhotoViewer.this.parentChatActivity.getFragmentView().invalidate();
            }
            return true;
        }

        public /* synthetic */ void lambda$onPreDraw$0(ClippingImageView[] clippingImageViewArr, ArrayList arrayList, Integer num, PhotoViewerProvider photoViewerProvider) {
            PhotoViewer.this.animationEndRunnable = null;
            if (PhotoViewer.this.containerView == null || PhotoViewer.this.windowView == null) {
                return;
            }
            PhotoViewer.this.containerView.setLayerType(0, null);
            PhotoViewer.this.animationInProgress = 0;
            PhotoViewer.this.invalidateBlur();
            PhotoViewer.this.transitionAnimationStartTime = 0L;
            PhotoViewer.this.leftCropState = null;
            PhotoViewer.this.leftCropTransform.setViewTransform(false);
            PhotoViewer.this.rightCropState = null;
            PhotoViewer.this.rightCropTransform.setViewTransform(false);
            PhotoViewer.this.setImages();
            PhotoViewer.this.setCropBitmap();
            PhotoViewer.this.containerView.invalidate();
            for (ClippingImageView clippingImageView : clippingImageViewArr) {
                clippingImageView.setVisibility(8);
            }
            if (PhotoViewer.this.showAfterAnimation != null) {
                PhotoViewer.this.showAfterAnimation.imageReceiver.setVisible(true, true);
            }
            if (PhotoViewer.this.hideAfterAnimation != null) {
                PhotoViewer.this.hideAfterAnimation.imageReceiver.setVisible(false, true);
            }
            if (arrayList != null && PhotoViewer.this.sendPhotoType != 3 && PhotoViewer.this.sendPhotoType != 1 && (PhotoViewer.this.placeProvider == null || !PhotoViewer.this.placeProvider.closeKeyboard())) {
                PhotoViewer.this.makeFocusable();
            }
            if (PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPlayer.isPlaying() && PhotoViewer.this.isCurrentVideo && !PhotoViewer.this.imagesArrLocals.isEmpty()) {
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.seekAnimatedStickersTo(photoViewer.videoPlayer.getCurrentPosition());
                PhotoViewer.this.playOrStopAnimatedStickers(true);
            }
            if (PhotoViewer.this.isEmbedVideo) {
                PhotoViewer.this.initEmbedVideo(num.intValue());
            }
            if (photoViewerProvider != null) {
                photoViewerProvider.onOpen();
            }
        }

        public /* synthetic */ void lambda$onPreDraw$1(ValueAnimator valueAnimator) {
            PhotoViewer.this.clippingImageProgress = 1.0f - ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.invalidateBlur();
        }

        /* loaded from: classes4.dex */
        public class 1 extends AnimatorListenerAdapter {
            1() {
                71.this = r1;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$71$1$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.71.1.this.lambda$onAnimationEnd$0();
                    }
                });
            }

            public /* synthetic */ void lambda$onAnimationEnd$0() {
                PhotoViewer.this.transitionNotificationLocker.unlock();
                if (PhotoViewer.this.animationEndRunnable != null) {
                    PhotoViewer.this.animationEndRunnable.run();
                    PhotoViewer.this.animationEndRunnable = null;
                }
                PhotoViewer.this.setCaptionHwLayerEnabled(true);
            }
        }

        public /* synthetic */ void lambda$onPreDraw$2(AnimatorSet animatorSet) {
            PhotoViewer.this.transitionNotificationLocker.lock();
            animatorSet.start();
        }

        public /* synthetic */ void lambda$onPreDraw$3(PlaceProviderObject placeProviderObject) {
            PhotoViewer.this.disableShowCheck = false;
            placeProviderObject.imageReceiver.setVisible(false, true);
        }
    }

    public void initEmbedVideo(int i) {
        if (this.isEmbedVideo) {
            PhotoViewerWebView photoViewerWebView = new PhotoViewerWebView(this, this.parentActivity, this.pipItem) { // from class: org.telegram.ui.PhotoViewer.73
                Rect rect = new Rect();

                @Override // org.telegram.ui.Components.PhotoViewerWebView
                protected void processTouch(MotionEvent motionEvent) {
                }

                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.Components.PhotoViewerWebView
                protected void drawBlackBackground(Canvas canvas, int i2, int i3) {
                    Bitmap bitmap = PhotoViewer.this.centerImage.getBitmap();
                    if (bitmap != null) {
                        float min = Math.min(i2 / bitmap.getWidth(), i3 / bitmap.getHeight());
                        int width = (int) (bitmap.getWidth() * min);
                        int height = (int) (bitmap.getHeight() * min);
                        int i4 = (i3 - height) / 2;
                        int i5 = (i2 - width) / 2;
                        this.rect.set(i5, i4, width + i5, height + i4);
                        canvas.drawBitmap(bitmap, (Rect) null, this.rect, (Paint) null);
                    }
                }
            };
            this.photoViewerWebView = photoViewerWebView;
            photoViewerWebView.init(i, MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage);
            this.photoViewerWebView.setPlaybackSpeed(this.currentVideoSpeed);
            this.containerView.addView(this.photoViewerWebView, 0, LayoutHelper.createFrame(-1, -1.0f));
            if (this.photoViewerWebView.isControllable()) {
                setVideoPlayerControlVisible(true, true);
            }
            this.videoPlayerSeekbar.clearTimestamps();
            updateVideoPlayerTime();
            this.shouldSavePositionForCurrentVideo = null;
            this.shouldSavePositionForCurrentVideoShortTerm = null;
            this.lastSaveTime = 0L;
            this.seekToProgressPending = this.seekToProgressPending2;
            this.videoPlayerSeekbar.setProgress(0.0f);
            this.videoTimelineView.setProgress(0.0f);
            this.videoPlayerSeekbar.setBufferedProgress(0.0f);
        }
    }

    public void makeFocusable() {
        if (Build.VERSION.SDK_INT >= 21) {
            this.windowLayoutParams.flags = -2147417856;
        } else {
            this.windowLayoutParams.flags = 0;
        }
        this.windowLayoutParams.softInputMode = 272;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
        this.windowView.setFocusable(true);
        this.containerView.setFocusable(true);
    }

    private void requestAdjustToNothing() {
        this.windowLayoutParams.softInputMode = 48;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void requestAdjust() {
        this.windowLayoutParams.softInputMode = 272;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public void injectVideoPlayerToMediaController() {
        if (this.videoPlayer.isPlaying()) {
            if (this.playerLooping) {
                this.videoPlayer.setLooping(false);
            }
            MediaController.getInstance().injectVideoPlayer(this.videoPlayer, this.currentMessageObject);
            this.videoPlayer = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:414:0x01be  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x01f0  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0218  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0251  */
    /* JADX WARN: Removed duplicated region for block: B:444:0x0258  */
    /* JADX WARN: Removed duplicated region for block: B:452:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:455:0x028b  */
    /* JADX WARN: Removed duplicated region for block: B:456:0x02a2  */
    /* JADX WARN: Removed duplicated region for block: B:591:0x01f6 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closePhoto(boolean z, boolean z2) {
        float f;
        float f2;
        float f3;
        float f4;
        PhotoViewerProvider photoViewerProvider;
        final PlaceProviderObject placeForPhoto;
        PhotoViewerWebView photoViewerWebView;
        ChatActivity chatActivity;
        VelocityTracker velocityTracker;
        float f5;
        float f6;
        AnimatedFileDrawable animatedFileDrawable;
        RectF rectF;
        float min;
        float f7;
        int[] iArr;
        BaseFragment baseFragment;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        int i;
        int i2;
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.isThanosInProgress = false;
            if (this.cutOutBtn.isCancelState()) {
                this.cutOutBtn.setCutOutState(true);
                showEditStickerMode(false, true);
                this.stickerMakerView.disableClippingMode();
                this.containerView.invalidate();
            }
        }
        if (!z2 && (i2 = this.currentEditMode) != 0) {
            if (i2 == 3 && this.photoPaintView != null) {
                closePaintMode();
                return;
            }
            if (i2 == 1) {
                this.cropTransform.setViewTransform(this.previousHasTransform, this.previousCropPx, this.previousCropPy, this.previousCropRotation, this.previousCropOrientation, this.previousCropScale, 1.0f, 1.0f, this.previousCropPw, this.previousCropPh, 0.0f, 0.0f, this.previousCropMirrored);
            }
            if (this.currentEditMode == 4) {
                applyCurrentEditMode();
            }
            switchToEditMode(0);
            return;
        }
        QualityChooseView qualityChooseView = this.qualityChooseView;
        if (qualityChooseView != null && qualityChooseView.getTag() != null) {
            this.qualityPicker.cancelButton.callOnClick();
            return;
        }
        this.isVisibleOrAnimating = false;
        this.openedFullScreenVideo = false;
        try {
            AlertDialog alertDialog = this.visibleDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
                this.visibleDialog = null;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (Build.VERSION.SDK_INT >= 21 && this.containerView != null) {
            AndroidUtilities.cancelRunOnUIThread(this.updateContainerFlagsRunnable);
            updateContainerFlags(true);
        }
        int i3 = this.currentEditMode;
        if (i3 != 0) {
            if (i3 == 2) {
                this.photoFilterView.shutdown();
                this.containerView.removeView(this.photoFilterView);
                this.photoFilterView = null;
            } else if (i3 == 1) {
                this.editorDoneLayout.setVisibility(8);
                this.photoCropView.setVisibility(8);
            } else if (i3 == 3) {
                this.photoPaintView.shutdown();
                this.containerView.removeView(this.photoPaintView.getView());
                this.photoPaintView = null;
                this.savedState = null;
            } else if (i3 == 4) {
                this.maskPaintViewShuttingDown = true;
                FrameLayoutDrawer frameLayoutDrawer = this.containerView;
                if (frameLayoutDrawer != null) {
                    frameLayoutDrawer.invalidate();
                    final MaskPaintView maskPaintView = this.maskPaintView;
                    this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda97
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$closePhoto$95(maskPaintView);
                        }
                    });
                } else {
                    this.maskPaintView.shutdown();
                }
                this.maskPaintView = null;
            }
            this.currentEditMode = 0;
            this.captionEdit.keyboardNotifier.ignore(false);
            KeyboardNotifier keyboardNotifier = this.paintKeyboardNotifier;
            if (keyboardNotifier != null) {
                keyboardNotifier.ignore(this.currentEditMode != 3);
            }
        }
        View view = this.navigationBar;
        if (view != null) {
            view.setVisibility(0);
        }
        FrameLayout frameLayout = this.windowView;
        if (frameLayout != null) {
            frameLayout.setClipChildren(false);
        }
        if (this.parentActivity != null) {
            if ((!this.isInline && !this.isVisible) || checkAnimation() || this.placeProvider == null) {
                return;
            }
            Activity activity = this.parentActivity;
            if (activity != null && this.fullscreenedByButton != 0) {
                activity.setRequestedOrientation(this.prevOrientation);
                this.fullscreenedByButton = 0;
                this.wasRotated = false;
            }
            if (!this.doneButtonPressed && !this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                Object obj = this.imagesArrLocals.get(this.currentIndex);
                if (obj instanceof MediaController.MediaEditState) {
                    MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                    mediaEditState.editedInfo = getCurrentVideoEditedInfo();
                    if (this.sendPhotoType == 11) {
                        mediaEditState.reset();
                    }
                }
            }
            BaseFragment baseFragment2 = this.parentFragment;
            if (baseFragment2 == null || baseFragment2.getFragmentView() == null) {
                f = 1.0f;
                f2 = 1.0f;
            } else {
                View fragmentView = this.parentFragment.getFragmentView();
                f = fragmentView.getScaleX();
                f2 = fragmentView.getScaleY();
                fragmentView.setScaleX(1.0f);
                fragmentView.setScaleY(1.0f);
                ChatAttachAlert chatAttachAlert = this.parentAlert;
                if (chatAttachAlert != null) {
                    BottomSheet.ContainerView container = chatAttachAlert.getContainer();
                    f3 = container.getScaleX();
                    f4 = container.getScaleY();
                    container.setScaleX(1.0f);
                    container.setScaleY(1.0f);
                    photoViewerProvider = this.placeProvider;
                    if (photoViewerProvider != null) {
                        photoViewerProvider.onReleasePlayerBeforeClose(this.currentIndex);
                    }
                    placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, true);
                    if (this.videoPlayer != null && placeForPhoto != null && (animation = placeForPhoto.imageReceiver.getAnimation()) != null) {
                        if (this.textureUploaded && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                            if (!this.usedSurfaceView) {
                                AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, animatedBitmap);
                            } else {
                                try {
                                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                                    bitmap.recycle();
                                } catch (Throwable th) {
                                    FileLog.e(th);
                                }
                            }
                        }
                        if (this.currentMessageObject != null) {
                            long startTime = animation.getStartTime();
                            long currentPosition = this.videoPlayer.getCurrentPosition();
                            if (startTime <= 0) {
                                startTime = 0;
                            }
                            animation.seekTo(currentPosition + startTime, !FileLoader.getInstance(this.currentMessageObject.currentAccount).isLoadingVideo(this.currentMessageObject.getDocument(), true));
                        }
                        placeForPhoto.imageReceiver.setAllowStartAnimation(true);
                        placeForPhoto.imageReceiver.startAnimation();
                    }
                    if (!this.doneButtonPressed) {
                        releasePlayer(true);
                    }
                    photoViewerWebView = this.photoViewerWebView;
                    if (photoViewerWebView != null) {
                        photoViewerWebView.release();
                        this.containerView.removeView(this.photoViewerWebView);
                        this.photoViewerWebView = null;
                    }
                    chatActivity = this.parentChatActivity;
                    if (chatActivity != null && chatActivity.getFragmentView() != null) {
                        this.parentChatActivity.getFragmentView().invalidate();
                    }
                    this.parentChatActivity = null;
                    removeObservers();
                    this.isActionBarVisible = false;
                    velocityTracker = this.velocityTracker;
                    if (velocityTracker != null) {
                        velocityTracker.recycle();
                        this.velocityTracker = null;
                    }
                    if (!this.isInline) {
                        this.isInline = false;
                        this.animationInProgress = 0;
                        onPhotoClosed(placeForPhoto);
                        this.containerView.setScaleX(1.0f);
                        this.containerView.setScaleY(1.0f);
                        f5 = f3;
                        f6 = f4;
                    } else {
                        if (z) {
                            ClippingImageView[] animatingImageViews = getAnimatingImageViews(placeForPhoto);
                            for (int i4 = 0; i4 < animatingImageViews.length; i4++) {
                                animatingImageViews[i4].setAnimationValues(this.animationValues);
                                animatingImageViews[i4].setVisibility(0);
                            }
                            this.animationInProgress = 3;
                            this.containerView.invalidate();
                            AnimatorSet animatorSet = new AnimatorSet();
                            ViewGroup.LayoutParams layoutParams = this.animatingImageView.getLayoutParams();
                            if (placeForPhoto != null) {
                                rectF = placeForPhoto.imageReceiver.getDrawRegion();
                                layoutParams.width = (int) rectF.width();
                                layoutParams.height = (int) rectF.height();
                                int orientation = placeForPhoto.imageReceiver.getOrientation();
                                int animatedOrientation = placeForPhoto.imageReceiver.getAnimatedOrientation();
                                if (animatedOrientation != 0) {
                                    orientation = animatedOrientation;
                                }
                                for (int i5 = 0; i5 < animatingImageViews.length; i5++) {
                                    animatingImageViews[i5].setOrientation(orientation, placeForPhoto.imageReceiver.getInvert());
                                    animatingImageViews[i5].setImageBitmap(placeForPhoto.thumb);
                                }
                            } else {
                                layoutParams.width = (int) this.centerImage.getImageWidth();
                                layoutParams.height = (int) this.centerImage.getImageHeight();
                                for (int i6 = 0; i6 < animatingImageViews.length; i6++) {
                                    animatingImageViews[i6].setOrientation(this.centerImage.getOrientation(), this.centerImage.getInvert());
                                    animatingImageViews[i6].setImageBitmap(this.centerImage.getBitmapSafe());
                                }
                                rectF = null;
                            }
                            if (layoutParams.width <= 0) {
                                layoutParams.width = 100;
                            }
                            if (layoutParams.height <= 0) {
                                layoutParams.height = 100;
                            }
                            if (this.sendPhotoType == 1) {
                                float min2 = Math.min(this.photoCropView.getMeasuredWidth(), (this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (AndroidUtilities.dp(16.0f) * 2);
                                min = Math.max(min2 / layoutParams.width, min2 / layoutParams.height);
                            } else {
                                min = Math.min(this.windowView.getMeasuredWidth() / layoutParams.width, (AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) / layoutParams.height);
                            }
                            float f8 = this.scale;
                            float f9 = layoutParams.height * f8 * min;
                            float measuredWidth = (this.windowView.getMeasuredWidth() - ((layoutParams.width * f8) * min)) / 2.0f;
                            if (this.sendPhotoType == 1) {
                                f7 = this.photoCropView.getMeasuredHeight() - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
                            } else {
                                f7 = AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
                            }
                            float f10 = (f7 - f9) / 2.0f;
                            for (int i7 = 0; i7 < animatingImageViews.length; i7++) {
                                animatingImageViews[i7].setLayoutParams(layoutParams);
                                animatingImageViews[i7].setTranslationX(this.translationX + measuredWidth);
                                animatingImageViews[i7].setTranslationY(this.translationY + f10);
                                animatingImageViews[i7].setScaleX(this.scale * min);
                                animatingImageViews[i7].setScaleY(this.scale * min);
                            }
                            if (placeForPhoto != null) {
                                placeForPhoto.imageReceiver.setVisible(false, true);
                                int abs = (int) Math.abs(rectF.left - placeForPhoto.imageReceiver.getImageX());
                                int abs2 = (int) Math.abs(rectF.top - placeForPhoto.imageReceiver.getImageY());
                                if (placeForPhoto.imageReceiver.isAspectFit()) {
                                    abs = 0;
                                }
                                int[] iArr2 = new int[2];
                                placeForPhoto.parentView.getLocationInWindow(iArr2);
                                int i8 = iArr2[1];
                                int i9 = Build.VERSION.SDK_INT;
                                int i10 = i9 >= 21 ? 0 : AndroidUtilities.statusBarHeight;
                                int i11 = placeForPhoto.viewY;
                                f6 = f4;
                                float f11 = rectF.top;
                                int i12 = (int) (((i8 - i10) - (i11 + f11)) + placeForPhoto.clipTopAddition);
                                if (i12 < 0) {
                                    i12 = 0;
                                }
                                int height = (int) ((((i11 + f11) + (rectF.bottom - f11)) - ((iArr2[1] + placeForPhoto.parentView.getHeight()) - (i9 >= 21 ? 0 : AndroidUtilities.statusBarHeight))) + placeForPhoto.clipBottomAddition);
                                if (height < 0) {
                                    height = 0;
                                }
                                int max = Math.max(i12, abs2);
                                int max2 = Math.max(height, abs2);
                                this.animationValues[0][0] = this.animatingImageView.getScaleX();
                                this.animationValues[0][1] = this.animatingImageView.getScaleY();
                                this.animationValues[0][2] = this.animatingImageView.getTranslationX();
                                this.animationValues[0][3] = this.animatingImageView.getTranslationY();
                                float[][] fArr = this.animationValues;
                                fArr[0][4] = 0.0f;
                                fArr[0][5] = 0.0f;
                                fArr[0][6] = 0.0f;
                                fArr[0][7] = 0.0f;
                                fArr[0][8] = 0.0f;
                                fArr[0][9] = 0.0f;
                                fArr[0][10] = 0.0f;
                                fArr[0][11] = 0.0f;
                                fArr[0][12] = 0.0f;
                                char c = 1;
                                float[] fArr2 = fArr[1];
                                float f12 = placeForPhoto.scale;
                                fArr2[0] = f12;
                                fArr[1][1] = f12;
                                f5 = f3;
                                fArr[1][2] = placeForPhoto.viewX + (rectF.left * f12);
                                fArr[1][3] = placeForPhoto.viewY + (rectF.top * f12);
                                float f13 = abs;
                                int i13 = 4;
                                fArr[1][4] = f13 * f12;
                                fArr[1][5] = max * f12;
                                fArr[1][6] = max2 * f12;
                                int i14 = 0;
                                while (i14 < i13) {
                                    this.animationValues[c][i14 + 7] = placeForPhoto.radius != null ? iArr[i14] : 0.0f;
                                    i14++;
                                    i13 = 4;
                                    c = 1;
                                }
                                float[][] fArr3 = this.animationValues;
                                float[] fArr4 = fArr3[1];
                                float f14 = placeForPhoto.scale;
                                fArr4[11] = abs2 * f14;
                                fArr3[1][12] = f13 * f14;
                                ArrayList arrayList = new ArrayList((this.sendPhotoType == 1 ? 3 : 2) + animatingImageViews.length + (animatingImageViews.length > 1 ? 1 : 0));
                                for (int i15 = 0; i15 < animatingImageViews.length; i15++) {
                                    ObjectAnimator ofFloat = ObjectAnimator.ofFloat(animatingImageViews[i15], AnimationProperties.CLIPPING_IMAGE_VIEW_PROGRESS, 0.0f, 1.0f);
                                    if (i15 == 0) {
                                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda15
                                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                                PhotoViewer.this.lambda$closePhoto$96(valueAnimator);
                                            }
                                        });
                                    }
                                    arrayList.add(ofFloat);
                                }
                                if (animatingImageViews.length > 1) {
                                    arrayList.add(ObjectAnimator.ofFloat(this.animatingImageView, View.ALPHA, 0.0f));
                                    animatingImageViews[1].setAdditionalTranslationX(-getLeftInset());
                                }
                                arrayList.add(ObjectAnimator.ofInt(this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, 0));
                                arrayList.add(ObjectAnimator.ofFloat(this.containerView, View.ALPHA, 0.0f));
                                arrayList.add(ObjectAnimator.ofFloat(this.navigationBar, View.ALPHA, 0.0f));
                                if (this.sendPhotoType == 1) {
                                    arrayList.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 0.0f));
                                }
                                animatorSet.playTogether(arrayList);
                            } else {
                                f5 = f3;
                                f6 = f4;
                                int i16 = AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
                                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda3
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        PhotoViewer.this.lambda$closePhoto$97(valueAnimator);
                                    }
                                });
                                Animator[] animatorArr = new Animator[6];
                                animatorArr[0] = ofFloat2;
                                animatorArr[1] = ObjectAnimator.ofInt(this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, 0);
                                animatorArr[2] = ObjectAnimator.ofFloat(this.animatingImageView, View.ALPHA, 0.0f);
                                ClippingImageView clippingImageView = this.animatingImageView;
                                Property property = View.TRANSLATION_Y;
                                float[] fArr5 = new float[1];
                                if (this.translationY < 0.0f) {
                                    i16 = -i16;
                                }
                                fArr5[0] = i16;
                                animatorArr[3] = ObjectAnimator.ofFloat(clippingImageView, property, fArr5);
                                animatorArr[4] = ObjectAnimator.ofFloat(this.containerView, View.ALPHA, 0.0f);
                                animatorArr[5] = ObjectAnimator.ofFloat(this.navigationBar, View.ALPHA, 0.0f);
                                animatorSet.playTogether(animatorArr);
                            }
                            PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
                            if (photoViewerProvider2 != null) {
                                photoViewerProvider2.onPreClose();
                            }
                            this.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda100
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.this.lambda$closePhoto$98(placeForPhoto);
                                }
                            };
                            animatorSet.setDuration(200L);
                            animatorSet.addListener(new 74());
                            this.transitionAnimationStartTime = System.currentTimeMillis();
                            this.containerView.setLayerType(2, null);
                            animatorSet.start();
                            animatedFileDrawable = null;
                        } else {
                            f5 = f3;
                            f6 = f4;
                            AnimatorSet animatorSet2 = new AnimatorSet();
                            ValueAnimator ofFloat3 = ValueAnimator.ofFloat(0.0f, 1.0f);
                            ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda7
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    PhotoViewer.this.lambda$closePhoto$99(valueAnimator);
                                }
                            });
                            animatorSet2.playTogether(ofFloat3, ObjectAnimator.ofFloat(this.containerView, View.SCALE_X, 0.9f), ObjectAnimator.ofFloat(this.containerView, View.SCALE_Y, 0.9f), ObjectAnimator.ofInt(this.backgroundDrawable, (Property<BackgroundDrawable, Integer>) AnimationProperties.COLOR_DRAWABLE_ALPHA, 0), ObjectAnimator.ofFloat(this.containerView, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.navigationBar, View.ALPHA, 0.0f));
                            PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
                            if (photoViewerProvider3 != null) {
                                photoViewerProvider3.onPreClose();
                            }
                            this.animationInProgress = 2;
                            this.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda99
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.this.lambda$closePhoto$100(placeForPhoto);
                                }
                            };
                            animatorSet2.setDuration(200L);
                            animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.75
                                {
                                    PhotoViewer.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    PhotoViewer.this.clippingImageProgress = 1.0f;
                                    if (PhotoViewer.this.animationEndRunnable != null) {
                                        ChatActivity chatActivity2 = PhotoViewer.this.parentChatActivity;
                                        if (chatActivity2 == null && PhotoViewer.this.parentAlert != null) {
                                            BaseFragment baseFragment3 = PhotoViewer.this.parentAlert.getBaseFragment();
                                            if (baseFragment3 instanceof ChatActivity) {
                                                chatActivity2 = (ChatActivity) baseFragment3;
                                            }
                                        }
                                        if (chatActivity2 != null) {
                                            chatActivity2.lambda$openDiscussionMessageChat$324(PhotoViewer.this.animationEndRunnable);
                                            return;
                                        }
                                        PhotoViewer.this.animationEndRunnable.run();
                                        PhotoViewer.this.animationEndRunnable = null;
                                    }
                                }
                            });
                            this.transitionAnimationStartTime = System.currentTimeMillis();
                            animatedFileDrawable = null;
                            this.containerView.setLayerType(2, null);
                            animatorSet2.start();
                            if (placeForPhoto != null) {
                                placeForPhoto.imageReceiver.setVisible(true, true);
                            }
                        }
                        AnimatedFileDrawable animatedFileDrawable2 = this.currentAnimation;
                        if (animatedFileDrawable2 != null) {
                            animatedFileDrawable2.removeSecondParentView(this.containerView);
                            this.currentAnimation = animatedFileDrawable;
                            this.centerImage.setImageBitmap(animatedFileDrawable);
                            this.centerBlur.destroy();
                        }
                        PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
                        if (photoViewerProvider4 != null && !photoViewerProvider4.canScrollAway()) {
                            this.placeProvider.cancelButtonPressed();
                        }
                    }
                    baseFragment = this.parentFragment;
                    if (baseFragment != null || baseFragment.getFragmentView() == null) {
                    }
                    View fragmentView2 = this.parentFragment.getFragmentView();
                    fragmentView2.setScaleX(f);
                    fragmentView2.setScaleY(f2);
                    ChatAttachAlert chatAttachAlert2 = this.parentAlert;
                    if (chatAttachAlert2 != null) {
                        BottomSheet.ContainerView container2 = chatAttachAlert2.getContainer();
                        container2.setScaleX(f5);
                        container2.setScaleY(f6);
                        return;
                    }
                    return;
                }
            }
            f3 = 1.0f;
            f4 = 1.0f;
            photoViewerProvider = this.placeProvider;
            if (photoViewerProvider != null) {
            }
            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, true);
            if (this.videoPlayer != null) {
                if (this.textureUploaded) {
                    if (!this.usedSurfaceView) {
                    }
                }
                if (this.currentMessageObject != null) {
                }
                placeForPhoto.imageReceiver.setAllowStartAnimation(true);
                placeForPhoto.imageReceiver.startAnimation();
            }
            if (!this.doneButtonPressed) {
            }
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
            }
            chatActivity = this.parentChatActivity;
            if (chatActivity != null) {
                this.parentChatActivity.getFragmentView().invalidate();
            }
            this.parentChatActivity = null;
            removeObservers();
            this.isActionBarVisible = false;
            velocityTracker = this.velocityTracker;
            if (velocityTracker != null) {
            }
            if (!this.isInline) {
            }
            baseFragment = this.parentFragment;
            if (baseFragment != null) {
            }
        }
    }

    public /* synthetic */ void lambda$closePhoto$95(MaskPaintView maskPaintView) {
        maskPaintView.shutdown();
        this.containerView.removeView(this.maskPaintView);
    }

    public /* synthetic */ void lambda$closePhoto$96(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateBlur();
    }

    public /* synthetic */ void lambda$closePhoto$97(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$closePhoto$98(PlaceProviderObject placeProviderObject) {
        ArrayList<Object> arrayList;
        this.animationEndRunnable = null;
        this.containerView.setLayerType(0, null);
        this.animationInProgress = 0;
        invalidateBlur();
        onPhotoClosed(placeProviderObject);
        MediaController.getInstance().tryResumePausedAudio();
        if (!this.stickerEmpty || this.stickerEmptySent || (arrayList = this.imagesArrLocals) == null) {
            return;
        }
        Iterator<Object> it = arrayList.iterator();
        while (it.hasNext()) {
            Object next = it.next();
            if (next instanceof MediaController.PhotoEntry) {
                ((MediaController.PhotoEntry) next).deleteAll();
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 74 extends AnimatorListenerAdapter {
        74() {
            PhotoViewer.this = r1;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$74$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.74.this.lambda$onAnimationEnd$0();
                }
            });
        }

        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (PhotoViewer.this.animationEndRunnable != null) {
                PhotoViewer.this.animationEndRunnable.run();
                PhotoViewer.this.animationEndRunnable = null;
            }
        }
    }

    public /* synthetic */ void lambda$closePhoto$99(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$closePhoto$100(PlaceProviderObject placeProviderObject) {
        ArrayList<Object> arrayList;
        this.animationEndRunnable = null;
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        if (frameLayoutDrawer == null) {
            return;
        }
        frameLayoutDrawer.setLayerType(0, null);
        this.animationInProgress = 0;
        onPhotoClosed(placeProviderObject);
        this.containerView.setScaleX(1.0f);
        this.containerView.setScaleY(1.0f);
        MediaController.getInstance().tryResumePausedAudio();
        if (!this.stickerEmpty || this.stickerEmptySent || (arrayList = this.imagesArrLocals) == null) {
            return;
        }
        Iterator<Object> it = arrayList.iterator();
        while (it.hasNext()) {
            Object next = it.next();
            if (next instanceof MediaController.PhotoEntry) {
                ((MediaController.PhotoEntry) next).deleteAll();
            }
        }
    }

    private ClippingImageView[] getAnimatingImageViews(PlaceProviderObject placeProviderObject) {
        int i = (AndroidUtilities.isTablet() || placeProviderObject == null || placeProviderObject.animatingImageView == null) ? 0 : 1;
        ClippingImageView[] clippingImageViewArr = new ClippingImageView[i + 1];
        clippingImageViewArr[0] = this.animatingImageView;
        if (i != 0) {
            ClippingImageView clippingImageView = placeProviderObject.animatingImageView;
            clippingImageViewArr[1] = clippingImageView;
            clippingImageView.setAdditionalTranslationY(placeProviderObject.animatingImageViewYOffset);
        }
        return clippingImageViewArr;
    }

    private void removeObservers() {
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoadFailed);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.customStickerCreated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoadProgressChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.mediaCountDidLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.mediaDidLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.dialogPhotosUpdate);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.filePreparingFailed);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        ConnectionsManager.getInstance(this.currentAccount).cancelRequestsForGuid(this.classGuid);
    }

    public void destroyPhotoViewer() {
        if (this.parentActivity == null || this.windowView == null) {
            return;
        }
        if (PipVideoOverlay.isVisible()) {
            PipVideoOverlay.dismiss();
        }
        removeObservers();
        releasePlayer(false);
        try {
            if (this.windowView.getParent() != null) {
                ((WindowManager) this.parentActivity.getSystemService("window")).removeViewImmediate(this.windowView);
                onHideView();
            }
            this.windowView = null;
        } catch (Exception e) {
            FileLog.e(e);
        }
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.animatingImageView.setImageBitmap(null);
        if (this == PipInstance) {
            PipInstance = null;
        } else {
            Instance = null;
        }
        onHideView();
    }

    private void onPhotoClosed(final PlaceProviderObject placeProviderObject) {
        if (this.doneButtonPressed) {
            releasePlayer(true);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.putInDownloadsStore) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
        }
        this.isVisible = false;
        this.isVisibleOrAnimating = false;
        this.cropInitied = false;
        this.disableShowCheck = true;
        this.currentMessageObject = null;
        this.currentBotInlineResult = null;
        this.currentFileLocation = null;
        this.currentFileLocationVideo = null;
        this.currentSecureDocument = null;
        this.currentPageBlock = null;
        this.currentPathObject = null;
        this.dialogPhotos = null;
        if (this.videoPlayerControlFrameLayout != null) {
            setVideoPlayerControlVisible(false, false);
        }
        CaptionScrollView captionScrollView = this.captionScrollView;
        if (captionScrollView != null) {
            captionScrollView.reset();
        }
        this.sendPhotoType = 0;
        this.isDocumentsPicker = false;
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.parentAlert = null;
        AnimatedFileDrawable animatedFileDrawable = this.currentAnimation;
        if (animatedFileDrawable != null) {
            animatedFileDrawable.removeSecondParentView(this.containerView);
            this.currentAnimation = null;
        }
        for (int i = 0; i < 3; i++) {
            PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
            if (photoProgressViewArr[i] != null) {
                photoProgressViewArr[i].setBackgroundState(-1, false, true);
            }
        }
        requestVideoPreview(0);
        VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
        if (videoTimelinePlayView != null) {
            videoTimelinePlayView.destroy();
        }
        this.hintView.hide(false, 0);
        this.centerImage.setImageBitmap((Bitmap) null);
        this.centerBlur.destroy();
        this.leftImage.setImageBitmap((Bitmap) null);
        this.leftBlur.destroy();
        this.rightImage.setImageBitmap((Bitmap) null);
        this.rightBlur.destroy();
        this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda101
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$onPhotoClosed$101(placeProviderObject);
            }
        });
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
            photoViewerProvider.willHidePhotoViewer();
        }
        this.groupedPhotosListView.clear();
        PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
        if (photoViewerProvider2 != null) {
            photoViewerProvider2.onClose();
        }
        this.placeProvider = null;
        this.selectedPhotosAdapter.notifyDataSetChanged();
        this.pageBlocksAdapter = null;
        this.disableShowCheck = false;
        this.shownControlsByEnd = false;
        this.videoCutStart = 0.0f;
        this.videoCutEnd = 1.0f;
        if (placeProviderObject != null) {
            placeProviderObject.imageReceiver.setVisible(true, true);
        }
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity != null) {
            chatActivity.getFragmentView().invalidate();
        }
        Bitmap bitmap = this.videoFrameBitmap;
        if (bitmap != null) {
            bitmap.recycle();
            this.videoFrameBitmap = null;
        }
    }

    public /* synthetic */ void lambda$onPhotoClosed$101(PlaceProviderObject placeProviderObject) {
        ClippingImageView clippingImageView;
        this.animatingImageView.setImageBitmap(null);
        if (placeProviderObject != null && !AndroidUtilities.isTablet() && (clippingImageView = placeProviderObject.animatingImageView) != null) {
            clippingImageView.setImageBitmap(null);
        }
        try {
            if (this.windowView.getParent() != null) {
                ((WindowManager) this.parentActivity.getSystemService("window")).removeView(this.windowView);
                onHideView();
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void redraw(final int i) {
        FrameLayoutDrawer frameLayoutDrawer;
        if (i >= 6 || (frameLayoutDrawer = this.containerView) == null) {
            return;
        }
        frameLayoutDrawer.invalidate();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda86
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$redraw$102(i);
            }
        }, 100L);
    }

    public /* synthetic */ void lambda$redraw$102(int i) {
        redraw(i + 1);
    }

    public void onResume() {
        redraw(0);
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.seekTo(videoPlayer.getCurrentPosition() + 1);
            if (this.playerLooping) {
                this.videoPlayer.setLooping(true);
            }
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.onResume();
        }
    }

    public void onPause() {
        if (this.currentAnimation != null) {
            closePhoto(false, false);
            return;
        }
        if (this.lastTitle != null) {
            closeCaptionEnter(true);
        }
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null || !this.playerLooping) {
            return;
        }
        videoPlayer.setLooping(false);
    }

    public boolean isVisible() {
        return this.isVisible && this.placeProvider != null;
    }

    public void updateMinMax(float f) {
        AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
        if (aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == 0 && this.textureUploaded) {
            View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            f *= Math.min(getContainerViewWidth() / view.getMeasuredWidth(), getContainerViewHeight() / view.getMeasuredHeight());
        }
        float imageWidth = this.centerImage.getImageWidth();
        float imageHeight = this.centerImage.getImageHeight();
        MediaController.CropState cropState = this.editState.cropState;
        if (cropState != null) {
            imageWidth *= cropState.cropPw;
            imageHeight *= cropState.cropPh;
        }
        int containerViewWidth = this.sendPhotoType == 11 ? (int) (imageWidth * f) : ((int) ((imageWidth * f) - getContainerViewWidth())) / 2;
        int containerViewHeight = this.sendPhotoType == 11 ? (int) (imageHeight * f) : ((int) ((imageHeight * f) - getContainerViewHeight())) / 2;
        if (containerViewWidth > 0) {
            this.minX = -containerViewWidth;
            this.maxX = containerViewWidth;
        } else {
            this.maxX = 0.0f;
            this.minX = 0.0f;
        }
        if (containerViewHeight > 0) {
            this.minY = -containerViewHeight;
            this.maxY = containerViewHeight;
        } else {
            this.maxY = 0.0f;
            this.minY = 0.0f;
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.updateZoom(f <= 1.1f);
        }
    }

    private int getAdditionX(int i) {
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            return AndroidUtilities.dp(16.0f);
        }
        if (i == 0 || i == 4 || i == 3) {
            return 0;
        }
        return AndroidUtilities.dp(14.0f);
    }

    private int getAdditionY(int i) {
        if (i < 0) {
            return 0;
        }
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            return AndroidUtilities.dp(16.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
        } else if (i == 3 && this.photoPaintView != null) {
            return AndroidUtilities.dp(8.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + this.photoPaintView.getAdditionalTop();
        } else if (i == 0 || i == 4) {
            return 0;
        } else {
            return AndroidUtilities.dp(14.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
        }
    }

    public int getContainerViewWidth() {
        return getContainerViewWidth(this.currentEditMode);
    }

    public int getContainerViewWidth(int i) {
        int dp;
        int width = this.containerView.getWidth();
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            dp = AndroidUtilities.dp(32.0f);
        } else if (i == 0 || i == 4 || i == 3) {
            return width;
        } else {
            dp = AndroidUtilities.dp(28.0f);
        }
        return width - dp;
    }

    public int getContainerViewHeight() {
        return getContainerViewHeight(this.currentEditMode);
    }

    public int getContainerViewHeight(int i) {
        return getContainerViewHeight(false, i);
    }

    private int getContainerViewHeight(boolean z, int i) {
        int measuredHeight;
        int dp;
        if (z || this.inBubbleMode) {
            measuredHeight = this.containerView.getMeasuredHeight();
        } else {
            measuredHeight = AndroidUtilities.displaySize.y;
            if ((i == 0 || i == 4) && this.sendPhotoType != 1 && isStatusBarVisible()) {
                measuredHeight += AndroidUtilities.statusBarHeight;
            }
        }
        if ((i == 0 && this.sendPhotoType == 1) || i == 1) {
            dp = AndroidUtilities.dp(144.0f);
        } else if (i == 2) {
            dp = AndroidUtilities.dp(214.0f);
        } else if (i != 3) {
            return measuredHeight;
        } else {
            dp = AndroidUtilities.dp(48.0f) + this.photoPaintView.getAdditionalBottom() + ActionBar.getCurrentActionBarHeight() + this.photoPaintView.getAdditionalTop();
        }
        return measuredHeight - dp;
    }

    /* JADX WARN: Code restructure failed: missing block: B:635:0x04dd, code lost:
        if (r1 > r4) goto L244;
     */
    /* JADX WARN: Code restructure failed: missing block: B:641:0x04ec, code lost:
        if (r2 > r4) goto L247;
     */
    /* JADX WARN: Code restructure failed: missing block: B:650:0x0511, code lost:
        if (r3 > r4) goto L257;
     */
    /* JADX WARN: Code restructure failed: missing block: B:656:0x0522, code lost:
        if (r3 > r4) goto L260;
     */
    /* JADX WARN: Code restructure failed: missing block: B:707:0x0603, code lost:
        if (r3 > r4) goto L311;
     */
    /* JADX WARN: Code restructure failed: missing block: B:713:0x0614, code lost:
        if (r3 > r4) goto L314;
     */
    /* JADX WARN: Removed duplicated region for block: B:592:0x03dd  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        int i;
        int i2;
        int i3;
        MaskPaintView maskPaintView;
        LPhotoPaintView lPhotoPaintView;
        if (this.currentEditMode == 3 && this.animationStartTime != 0 && (motionEvent.getActionMasked() == 0 || motionEvent.getActionMasked() == 5)) {
            if (motionEvent.getPointerCount() < 2) {
                return true;
            }
            cancelMoveZoomAnimation();
        }
        if (this.animationInProgress == 0 && this.animationStartTime == 0) {
            if (this.videoPlayerRewinder.rewindCount > 0) {
                if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
                    this.videoPlayerRewinder.cancelRewind();
                    return false;
                }
                return true;
            }
            int i4 = this.currentEditMode;
            if (i4 == 2) {
                this.photoFilterView.onTouch(motionEvent);
                return true;
            }
            if (i4 != 1 && (i4 == 3 || this.sendPhotoType != 1)) {
                if (this.captionEdit.editText.isPopupShowing() || this.captionEdit.editText.isKeyboardVisible()) {
                    if (motionEvent.getAction() == 1) {
                        closeCaptionEnter(true);
                    }
                } else if (this.currentEditMode == 0 && this.sendPhotoType != 1 && motionEvent.getPointerCount() == 1 && this.gestureDetector.onTouchEvent(motionEvent) && this.doubleTap) {
                    this.doubleTap = false;
                    this.moving = false;
                    this.zooming = false;
                    checkMinMax(false);
                    return true;
                } else {
                    Tooltip tooltip = this.tooltip;
                    if (tooltip != null) {
                        tooltip.hide();
                    }
                    if (motionEvent.getActionMasked() == 0 || motionEvent.getActionMasked() == 5) {
                        this.discardTap = false;
                        if (!this.scroller.isFinished()) {
                            this.scroller.abortAnimation();
                        }
                        if (!this.draggingDown && !this.changingPage) {
                            if (this.canZoom && motionEvent.getPointerCount() == 2) {
                                if (this.paintViewTouched == 1) {
                                    MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                                    this.photoPaintView.onTouch(obtain);
                                    obtain.recycle();
                                    this.paintViewTouched = 2;
                                } else if (this.maskPaintViewTouched == 1) {
                                    MotionEvent obtain2 = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                                    this.maskPaintView.onTouch(obtain2);
                                    obtain2.recycle();
                                    this.maskPaintViewTouched = 2;
                                }
                                this.pinchStartDistance = (float) Math.hypot(motionEvent.getX(1) - motionEvent.getX(0), motionEvent.getY(1) - motionEvent.getY(0));
                                this.pinchStartAngle = (float) Math.atan2(motionEvent.getY(1) - motionEvent.getY(0), motionEvent.getX(1) - motionEvent.getX(0));
                                this.pinchStartScale = this.scale;
                                this.pinchStartRotate = this.rotate;
                                this.pinchCenterX = (motionEvent.getX(0) + motionEvent.getX(1)) / 2.0f;
                                float y = (motionEvent.getY(0) + motionEvent.getY(1)) / 2.0f;
                                this.pinchCenterY = y;
                                this.pinchStartX = this.translationX;
                                this.pinchStartY = this.translationY;
                                this.zooming = true;
                                this.moving = false;
                                if (this.currentEditMode == 3 || this.sendPhotoType == 11) {
                                    this.moveStartX = this.pinchCenterX;
                                    this.moveStartY = y;
                                    this.draggingDown = false;
                                    this.canDragDown = false;
                                }
                                hidePressedDrawables();
                                VelocityTracker velocityTracker = this.velocityTracker;
                                if (velocityTracker != null) {
                                    velocityTracker.clear();
                                }
                            } else if (motionEvent.getPointerCount() == 1) {
                                int i5 = this.currentEditMode;
                                if (i5 == 3) {
                                    if (this.paintViewTouched == 0) {
                                        View view = this.photoPaintView.getView();
                                        view.getHitRect(this.hitRect);
                                        if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                            MotionEvent obtain3 = MotionEvent.obtain(motionEvent);
                                            obtain3.offsetLocation(-view.getX(), -view.getY());
                                            this.photoPaintView.onTouch(obtain3);
                                            obtain3.recycle();
                                            this.paintViewTouched = 1;
                                        }
                                    }
                                } else if (i5 == 4) {
                                    if (this.maskPaintViewTouched == 0) {
                                        MaskPaintView maskPaintView2 = this.maskPaintView;
                                        maskPaintView2.getHitRect(this.hitRect);
                                        if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                            MotionEvent obtain4 = MotionEvent.obtain(motionEvent);
                                            obtain4.offsetLocation(-maskPaintView2.getX(), -maskPaintView2.getY());
                                            this.maskPaintView.onTouch(obtain4);
                                            obtain4.recycle();
                                            this.maskPaintViewTouched = 1;
                                        }
                                    }
                                } else {
                                    this.moveStartX = motionEvent.getX();
                                    float y2 = motionEvent.getY();
                                    this.moveStartY = y2;
                                    this.dragY = y2;
                                    this.draggingDown = false;
                                    this.canDragDown = true;
                                    VelocityTracker velocityTracker2 = this.velocityTracker;
                                    if (velocityTracker2 != null) {
                                        velocityTracker2.clear();
                                    }
                                }
                            }
                        }
                        if (motionEvent.getActionMasked() == 0) {
                            this.longPressX = motionEvent.getX();
                            AndroidUtilities.runOnUIThread(this.longPressRunnable, 300L);
                        } else {
                            AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                        }
                    } else {
                        float f = 0.0f;
                        if (motionEvent.getActionMasked() == 2) {
                            if (this.canZoom && motionEvent.getPointerCount() == 2 && !this.draggingDown && this.zooming && !this.changingPage) {
                                this.discardTap = true;
                                if (this.currentEditMode == 3 || this.sendPhotoType == 11) {
                                    float x = (motionEvent.getX(0) + motionEvent.getX(1)) / 2.0f;
                                    float y3 = (motionEvent.getY(0) + motionEvent.getY(1)) / 2.0f;
                                    float f2 = this.moveStartX - x;
                                    float f3 = this.moveStartY - y3;
                                    this.moveStartX = x;
                                    this.moveStartY = y3;
                                    float f4 = this.translationX;
                                    if (f4 < this.minX || f4 > this.maxX) {
                                        f2 /= 3.0f;
                                    }
                                    float f5 = this.translationY;
                                    if (f5 < this.minY || f5 > this.maxY) {
                                        f3 /= 3.0f;
                                    }
                                    this.pinchStartX = ((this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.translationX) / (this.scale / this.pinchStartScale))) - f2;
                                    this.pinchStartY = ((this.pinchCenterY - (getContainerViewHeight() / 2)) - (((this.pinchCenterY - (getContainerViewHeight() / 2)) - this.translationY) / (this.scale / this.pinchStartScale))) - f3;
                                    this.pinchCenterX = x;
                                    this.pinchCenterY = y3;
                                }
                                if (this.sendPhotoType == 11 && this.currentEditMode == 0) {
                                    double atan2 = Math.atan2(motionEvent.getY(1) - motionEvent.getY(0), motionEvent.getX(1) - motionEvent.getX(0));
                                    double d = this.pinchStartAngle;
                                    Double.isNaN(d);
                                    double d2 = this.pinchStartRotate;
                                    Double.isNaN(d2);
                                    this.rotate = (float) ((((atan2 - d) / 3.141592653589793d) * 180.0d) + d2);
                                }
                                this.scale = (((float) Math.hypot(motionEvent.getX(1) - motionEvent.getX(0), motionEvent.getY(1) - motionEvent.getY(0))) / this.pinchStartDistance) * this.pinchStartScale;
                                this.translationX = (this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.pinchStartX) * (this.scale / this.pinchStartScale));
                                float containerViewHeight = this.pinchCenterY - (getContainerViewHeight() / 2);
                                float containerViewHeight2 = (this.pinchCenterY - (getContainerViewHeight() / 2)) - this.pinchStartY;
                                float f6 = this.scale;
                                this.translationY = containerViewHeight - (containerViewHeight2 * (f6 / this.pinchStartScale));
                                updateMinMax(f6);
                                invalidateBlur();
                                this.containerView.invalidate();
                            } else if (motionEvent.getPointerCount() == 1) {
                                if (this.paintViewTouched == 1 && (lPhotoPaintView = this.photoPaintView) != null) {
                                    View view2 = lPhotoPaintView.getView();
                                    MotionEvent obtain5 = MotionEvent.obtain(motionEvent);
                                    obtain5.offsetLocation(-view2.getX(), -view2.getY());
                                    this.photoPaintView.onTouch(obtain5);
                                    obtain5.recycle();
                                    return true;
                                } else if (this.maskPaintViewTouched == 1 && (maskPaintView = this.maskPaintView) != null) {
                                    MotionEvent obtain6 = MotionEvent.obtain(motionEvent);
                                    obtain6.offsetLocation(-maskPaintView.getX(), -maskPaintView.getY());
                                    this.maskPaintView.onTouch(obtain6);
                                    obtain6.recycle();
                                    return true;
                                } else {
                                    VelocityTracker velocityTracker3 = this.velocityTracker;
                                    if (velocityTracker3 != null) {
                                        velocityTracker3.addMovement(motionEvent);
                                    }
                                    float abs = Math.abs(motionEvent.getX() - this.moveStartX);
                                    float abs2 = Math.abs(motionEvent.getY() - this.dragY);
                                    int i6 = this.touchSlop;
                                    if (abs > i6 || abs2 > i6) {
                                        this.discardTap = true;
                                        hidePressedDrawables();
                                        AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                                        QualityChooseView qualityChooseView = this.qualityChooseView;
                                        if (qualityChooseView != null && qualityChooseView.getVisibility() == 0) {
                                            return true;
                                        }
                                    }
                                    if (this.placeProvider.canScrollAway() && this.currentEditMode == 0 && (i3 = this.sendPhotoType) != 1 && i3 != 11 && this.canDragDown && !this.draggingDown && this.scale == 1.0f && abs2 >= AndroidUtilities.dp(30.0f) && abs2 / 2.0f > abs) {
                                        this.draggingDown = true;
                                        hidePressedDrawables();
                                        this.moving = false;
                                        this.dragY = motionEvent.getY();
                                        if (this.isActionBarVisible && this.containerView.getTag() != null) {
                                            toggleActionBar(false, true);
                                        } else if (this.pickerView.getVisibility() == 0) {
                                            toggleActionBar(false, true);
                                            togglePhotosListView(false, true);
                                            toggleCheckImageView(false);
                                        }
                                        return true;
                                    } else if (this.draggingDown) {
                                        this.translationY = motionEvent.getY() - this.dragY;
                                        this.containerView.invalidate();
                                    } else if (!this.invalidCoords && this.animationStartTime == 0) {
                                        float x2 = this.moveStartX - motionEvent.getX();
                                        float y4 = this.moveStartY - motionEvent.getY();
                                        if (this.moving || this.currentEditMode != 0 || this.sendPhotoType == 11 || ((this.scale == 1.0f && Math.abs(y4) + AndroidUtilities.dp(12.0f) < Math.abs(x2)) || this.scale != 1.0f)) {
                                            if (!this.moving) {
                                                this.moving = true;
                                                this.canDragDown = false;
                                                hidePressedDrawables();
                                                x2 = 0.0f;
                                                y4 = 0.0f;
                                            }
                                            this.moveStartX = motionEvent.getX();
                                            this.moveStartY = motionEvent.getY();
                                            updateMinMax(this.scale);
                                            if ((this.translationX < this.minX && (this.currentEditMode != 0 || !this.rightImage.hasImageSet())) || (this.translationX > this.maxX && (this.currentEditMode != 0 || !this.leftImage.hasImageSet()))) {
                                                x2 /= 3.0f;
                                            }
                                            float f7 = this.maxY;
                                            if (f7 == 0.0f) {
                                                float f8 = this.minY;
                                                if (f8 == 0.0f && this.currentEditMode == 0 && (i2 = this.sendPhotoType) != 1 && i2 != 11) {
                                                    float f9 = this.translationY;
                                                    if (f9 - y4 < f8) {
                                                        this.translationY = f8;
                                                    } else {
                                                        if (f9 - y4 > f7) {
                                                            this.translationY = f7;
                                                        }
                                                        f = y4;
                                                    }
                                                    this.translationX -= x2;
                                                    if (this.scale == 1.0f || this.currentEditMode != 0 || this.sendPhotoType == 11) {
                                                        this.translationY -= f;
                                                    }
                                                    invalidateBlur();
                                                    this.containerView.invalidate();
                                                }
                                            }
                                            float f10 = this.translationY;
                                            if (f10 < this.minY || f10 > f7) {
                                                f = y4 / 3.0f;
                                                this.translationX -= x2;
                                                if (this.scale == 1.0f) {
                                                }
                                                this.translationY -= f;
                                                invalidateBlur();
                                                this.containerView.invalidate();
                                            }
                                            f = y4;
                                            this.translationX -= x2;
                                            if (this.scale == 1.0f) {
                                            }
                                            this.translationY -= f;
                                            invalidateBlur();
                                            this.containerView.invalidate();
                                        }
                                    } else {
                                        this.invalidCoords = false;
                                        this.moveStartX = motionEvent.getX();
                                        this.moveStartY = motionEvent.getY();
                                    }
                                }
                            }
                        } else if (motionEvent.getActionMasked() == 3 || motionEvent.getActionMasked() == 1 || motionEvent.getActionMasked() == 6) {
                            hidePressedDrawables();
                            AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                            if (this.paintViewTouched == 1) {
                                LPhotoPaintView lPhotoPaintView2 = this.photoPaintView;
                                if (lPhotoPaintView2 != null) {
                                    View view3 = lPhotoPaintView2.getView();
                                    MotionEvent obtain7 = MotionEvent.obtain(motionEvent);
                                    obtain7.offsetLocation(-view3.getX(), -view3.getY());
                                    this.photoPaintView.onTouch(obtain7);
                                    obtain7.recycle();
                                }
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                return true;
                            } else if (this.maskPaintViewTouched == 1) {
                                MaskPaintView maskPaintView3 = this.maskPaintView;
                                if (maskPaintView3 != null) {
                                    MotionEvent obtain8 = MotionEvent.obtain(motionEvent);
                                    obtain8.offsetLocation(-maskPaintView3.getX(), -maskPaintView3.getY());
                                    this.maskPaintView.onTouch(obtain8);
                                    obtain8.recycle();
                                }
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                return true;
                            } else {
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                if (this.zooming) {
                                    this.invalidCoords = true;
                                    int i7 = this.sendPhotoType;
                                    float f11 = i7 == 11 ? 10.0f : 3.0f;
                                    float f12 = i7 == 11 ? 0.33f : 1.0f;
                                    float f13 = this.scale;
                                    if (f13 < f12) {
                                        updateMinMax(f12);
                                        animateTo(f12, 0.0f, 0.0f, true);
                                    } else if (f13 > f11) {
                                        float containerViewWidth = (this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.pinchStartX) * (f11 / this.pinchStartScale));
                                        float containerViewHeight3 = (this.pinchCenterY - (getContainerViewHeight() / 2)) - (((this.pinchCenterY - (getContainerViewHeight() / 2)) - this.pinchStartY) * (f11 / this.pinchStartScale));
                                        updateMinMax(f11);
                                        float f14 = this.minX;
                                        if (containerViewWidth >= f14) {
                                            f14 = this.maxX;
                                        }
                                        containerViewWidth = f14;
                                        float f15 = this.minY;
                                        if (containerViewHeight3 >= f15) {
                                            f15 = this.maxY;
                                        }
                                        containerViewHeight3 = f15;
                                        animateTo(f11, containerViewWidth, containerViewHeight3, true);
                                    } else {
                                        checkMinMax(true);
                                        if (this.currentEditMode == 3) {
                                            float f16 = this.translationX;
                                            float f17 = this.translationY;
                                            updateMinMax(this.scale);
                                            float f18 = this.translationX;
                                            float f19 = this.minX;
                                            if (f18 >= f19) {
                                                f19 = this.maxX;
                                            }
                                            f16 = f19;
                                            float f20 = this.translationY;
                                            float f21 = this.minY;
                                            if (f20 >= f21) {
                                                f21 = this.maxY;
                                            }
                                            f17 = f21;
                                            animateTo(this.scale, f16, f17, false);
                                        }
                                    }
                                    this.zooming = false;
                                    this.moving = false;
                                } else if (this.draggingDown) {
                                    if (Math.abs(this.dragY - motionEvent.getY()) > getContainerViewHeight() / 6.0f) {
                                        if (enableSwipeToPiP() && this.dragY - motionEvent.getY() > 0.0f) {
                                            switchToPip(true);
                                        } else {
                                            closePhoto(true, false);
                                        }
                                    } else {
                                        if (this.pickerView.getVisibility() == 0) {
                                            toggleActionBar(true, true);
                                            toggleCheckImageView(true);
                                        }
                                        animateTo(1.0f, 0.0f, 0.0f, false);
                                    }
                                    this.draggingDown = false;
                                } else if (this.moving) {
                                    float f22 = this.translationX;
                                    float f23 = this.translationY;
                                    updateMinMax(this.scale);
                                    this.moving = false;
                                    this.canDragDown = true;
                                    VelocityTracker velocityTracker4 = this.velocityTracker;
                                    if (velocityTracker4 != null && this.scale == 1.0f) {
                                        velocityTracker4.computeCurrentVelocity(1000);
                                        f = this.velocityTracker.getXVelocity();
                                    }
                                    if (this.currentEditMode == 0 && (i = this.sendPhotoType) != 1 && i != 11) {
                                        if ((this.translationX < this.minX - (getContainerViewWidth() / 3) || f < (-AndroidUtilities.dp(650.0f))) && this.rightImage.hasImageSet()) {
                                            goToNext();
                                            return true;
                                        } else if ((this.translationX > this.maxX + (getContainerViewWidth() / 3) || f > AndroidUtilities.dp(650.0f)) && this.leftImage.hasImageSet()) {
                                            goToPrev();
                                            return true;
                                        }
                                    }
                                    float f24 = this.translationX;
                                    float f25 = this.minX;
                                    if (f24 >= f25) {
                                        f25 = this.maxX;
                                    }
                                    f22 = f25;
                                    float f26 = this.translationY;
                                    float f27 = this.minY;
                                    if (f26 >= f27) {
                                        f27 = this.maxY;
                                    }
                                    f23 = f27;
                                    animateTo(this.scale, f22, f23, false);
                                }
                            }
                        }
                    }
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x0017, code lost:
        if (r2 > r3) goto L3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x0028, code lost:
        if (r2 > r3) goto L6;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void checkMinMax(boolean z) {
        float f = this.translationX;
        float f2 = this.translationY;
        updateMinMax(this.scale);
        float f3 = this.translationX;
        float f4 = this.minX;
        if (f3 >= f4) {
            f4 = this.maxX;
        }
        f = f4;
        float f5 = this.translationY;
        float f6 = this.minY;
        if (f5 >= f6) {
            f6 = this.maxY;
        }
        f2 = f6;
        animateTo(this.scale, f, f2, z);
    }

    private void goToNext() {
        float containerViewWidth = this.scale != 1.0f ? ((getContainerViewWidth() - this.centerImage.getImageWidth()) / 2.0f) * this.scale : 0.0f;
        this.switchImageAfterAnimation = 1;
        animateTo(this.scale, ((this.minX - getContainerViewWidth()) - containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2), this.translationY, false);
    }

    private void goToPrev() {
        float containerViewWidth = this.scale != 1.0f ? ((getContainerViewWidth() - this.centerImage.getImageWidth()) / 2.0f) * this.scale : 0.0f;
        this.switchImageAfterAnimation = 2;
        animateTo(this.scale, this.maxX + getContainerViewWidth() + containerViewWidth + (AndroidUtilities.dp(30.0f) / 2), this.translationY, false);
    }

    private void cancelMoveZoomAnimation() {
        AnimatorSet animatorSet = this.imageMoveAnimation;
        if (animatorSet == null) {
            return;
        }
        float f = this.scale;
        float f2 = this.animationValue;
        float f3 = f + ((this.animateToScale - f) * f2);
        float f4 = this.translationX;
        float f5 = f4 + ((this.animateToX - f4) * f2);
        float f6 = this.translationY;
        float f7 = f6 + ((this.animateToY - f6) * f2);
        float f8 = this.rotate;
        animatorSet.cancel();
        this.scale = f3;
        this.translationX = f5;
        this.translationY = f7;
        this.animationStartTime = 0L;
        this.rotate = f8 + ((this.animateToRotate - f8) * f2);
        updateMinMax(f3);
        this.zoomAnimation = false;
        this.containerView.invalidate();
    }

    public void zoomOut() {
        animateTo(1.0f, 0.0f, 0.0f, false);
    }

    private void animateTo(float f, float f2, float f3, boolean z) {
        animateTo(f, f2, f3, z, 250);
    }

    private void animateTo(float f, float f2, float f3, boolean z, int i) {
        if (this.scale == f && this.translationX == f2 && this.translationY == f3) {
            return;
        }
        this.zoomAnimation = z;
        this.animateToScale = f;
        this.animateToX = f2;
        this.animateToY = f3;
        this.animationStartTime = System.currentTimeMillis();
        AnimatorSet animatorSet = new AnimatorSet();
        this.imageMoveAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
        this.imageMoveAnimation.setInterpolator(this.interpolator);
        this.imageMoveAnimation.setDuration(i);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.76
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.imageMoveAnimation = null;
                PhotoViewer.this.containerView.invalidate();
            }
        });
        this.imageMoveAnimation.start();
    }

    public int getCurrentIndex() {
        return this.currentIndex;
    }

    public List<Object> getImagesArrLocals() {
        return this.imagesArrLocals;
    }

    @Keep
    public void setAnimationValue(float f) {
        this.animationValue = f;
        this.containerView.invalidate();
        invalidateBlur();
    }

    @Keep
    public float getAnimationValue() {
        return this.animationValue;
    }

    private void switchToNextIndex(int i, boolean z) {
        if (this.currentMessageObject != null) {
            releasePlayer(false);
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
        } else if (this.currentPageBlock != null) {
            TLObject media = this.pageBlocksAdapter.getMedia(this.currentIndex);
            if (media instanceof TLRPC$Document) {
                releasePlayer(false);
                FileLoader.getInstance(this.currentAccount).cancelLoadFile((TLRPC$Document) media);
            }
        }
        GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
        if (groupedPhotosListView != null) {
            groupedPhotosListView.setAnimateBackground(true);
        }
        this.playerAutoStarted = false;
        setImageIndex(this.currentIndex + i, z, true);
        if (shouldMessageObjectAutoPlayed(this.currentMessageObject) || shouldIndexAutoPlayed(this.currentIndex)) {
            this.playerAutoStarted = true;
            onActionClick(true);
            checkProgress(0, false, true);
        }
        checkFullscreenButton();
    }

    public boolean shouldMessageObjectAutoPlayed(MessageObject messageObject) {
        return messageObject != null && messageObject.isVideo() && (messageObject.mediaExists || messageObject.attachPathExists || (messageObject.canStreamVideo() && SharedConfig.streamMedia)) && SharedConfig.isAutoplayVideo();
    }

    private boolean shouldIndexAutoPlayed(int i) {
        File file;
        PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
        if (pageBlocksAdapter != null) {
            return (pageBlocksAdapter.isVideo(i) || this.pageBlocksAdapter.isHardwarePlayer(i)) && SharedConfig.isAutoplayVideo() && (file = this.pageBlocksAdapter.getFile(i)) != null && file.exists();
        }
        return false;
    }

    public float getCropFillScale(boolean z) {
        ImageReceiver imageReceiver = this.centerImage;
        int bitmapHeight = z ? imageReceiver.getBitmapHeight() : imageReceiver.getBitmapWidth();
        int bitmapWidth = z ? this.centerImage.getBitmapWidth() : this.centerImage.getBitmapHeight();
        float min = Math.min(this.photoCropView.getMeasuredWidth(), (this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (AndroidUtilities.dp(16.0f) * 2);
        return Math.max(min / bitmapHeight, min / bitmapWidth);
    }

    public boolean isStatusBarVisible() {
        return Build.VERSION.SDK_INT >= 21 && !this.inBubbleMode;
    }

    /* JADX WARN: Code restructure failed: missing block: B:1218:0x0a11, code lost:
        if (r6 == 2) goto L684;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1223:0x0a19, code lost:
        if (r15 == (-1)) goto L689;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1231:0x0a25, code lost:
        if (r15 == r0) goto L684;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1463:0x0e5b, code lost:
        if (r45.switchingToMode == (-1)) goto L540;
     */
    /* JADX WARN: Removed duplicated region for block: B:1026:0x04be  */
    /* JADX WARN: Removed duplicated region for block: B:1038:0x050d  */
    /* JADX WARN: Removed duplicated region for block: B:1046:0x0542  */
    /* JADX WARN: Removed duplicated region for block: B:1083:0x0684  */
    /* JADX WARN: Removed duplicated region for block: B:1086:0x06dd  */
    /* JADX WARN: Removed duplicated region for block: B:1088:0x06e8  */
    /* JADX WARN: Removed duplicated region for block: B:1094:0x0707  */
    /* JADX WARN: Removed duplicated region for block: B:1106:0x0735  */
    /* JADX WARN: Removed duplicated region for block: B:1114:0x074f  */
    /* JADX WARN: Removed duplicated region for block: B:1126:0x0779 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1133:0x0792  */
    /* JADX WARN: Removed duplicated region for block: B:1139:0x07a6  */
    /* JADX WARN: Removed duplicated region for block: B:1140:0x07ad  */
    /* JADX WARN: Removed duplicated region for block: B:1144:0x083a  */
    /* JADX WARN: Removed duplicated region for block: B:1145:0x083d  */
    /* JADX WARN: Removed duplicated region for block: B:1148:0x0849  */
    /* JADX WARN: Removed duplicated region for block: B:1149:0x084c  */
    /* JADX WARN: Removed duplicated region for block: B:1152:0x0869  */
    /* JADX WARN: Removed duplicated region for block: B:1162:0x08c5 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1197:0x09b3  */
    /* JADX WARN: Removed duplicated region for block: B:1209:0x09f9  */
    /* JADX WARN: Removed duplicated region for block: B:1235:0x0a2e  */
    /* JADX WARN: Removed duplicated region for block: B:1238:0x0a35  */
    /* JADX WARN: Removed duplicated region for block: B:1271:0x0abe  */
    /* JADX WARN: Removed duplicated region for block: B:1274:0x0ac9  */
    /* JADX WARN: Removed duplicated region for block: B:1282:0x0ae1  */
    /* JADX WARN: Removed duplicated region for block: B:1286:0x0b01  */
    /* JADX WARN: Removed duplicated region for block: B:1296:0x0b2b  */
    /* JADX WARN: Removed duplicated region for block: B:1317:0x0b6f  */
    /* JADX WARN: Removed duplicated region for block: B:1326:0x0ba7  */
    /* JADX WARN: Removed duplicated region for block: B:1329:0x0bb1  */
    /* JADX WARN: Removed duplicated region for block: B:1341:0x0be9  */
    /* JADX WARN: Removed duplicated region for block: B:1344:0x0c05  */
    /* JADX WARN: Removed duplicated region for block: B:1347:0x0c29  */
    /* JADX WARN: Removed duplicated region for block: B:1350:0x0c54  */
    /* JADX WARN: Removed duplicated region for block: B:1353:0x0c5c  */
    /* JADX WARN: Removed duplicated region for block: B:1362:0x0c7b  */
    /* JADX WARN: Removed duplicated region for block: B:1364:0x0c87  */
    /* JADX WARN: Removed duplicated region for block: B:1367:0x0c9a  */
    /* JADX WARN: Removed duplicated region for block: B:1372:0x0cc6  */
    /* JADX WARN: Removed duplicated region for block: B:1376:0x0cde  */
    /* JADX WARN: Removed duplicated region for block: B:1382:0x0cf6  */
    /* JADX WARN: Removed duplicated region for block: B:1383:0x0d15  */
    /* JADX WARN: Removed duplicated region for block: B:1386:0x0d26  */
    /* JADX WARN: Removed duplicated region for block: B:1390:0x0d33  */
    /* JADX WARN: Removed duplicated region for block: B:1449:0x0e30  */
    /* JADX WARN: Removed duplicated region for block: B:1451:0x0e34  */
    /* JADX WARN: Removed duplicated region for block: B:1458:0x0e4f  */
    /* JADX WARN: Removed duplicated region for block: B:1470:0x0e7b  */
    /* JADX WARN: Removed duplicated region for block: B:1473:0x0e81  */
    /* JADX WARN: Removed duplicated region for block: B:1477:0x0e8d  */
    /* JADX WARN: Removed duplicated region for block: B:1481:0x0e9d  */
    /* JADX WARN: Removed duplicated region for block: B:1508:0x0f5a  */
    /* JADX WARN: Removed duplicated region for block: B:1554:0x10e2  */
    /* JADX WARN: Removed duplicated region for block: B:1559:0x10f5  */
    /* JADX WARN: Removed duplicated region for block: B:1584:0x114d  */
    /* JADX WARN: Removed duplicated region for block: B:1587:0x1154  */
    /* JADX WARN: Removed duplicated region for block: B:1592:0x119c  */
    /* JADX WARN: Removed duplicated region for block: B:1593:0x11a9  */
    /* JADX WARN: Removed duplicated region for block: B:1608:0x0f48 A[EDGE_INSN: B:1608:0x0f48->B:1506:0x0f48 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:958:0x036e  */
    /* JADX WARN: Removed duplicated region for block: B:961:0x037f  */
    /* JADX WARN: Removed duplicated region for block: B:964:0x0386  */
    /* JADX WARN: Removed duplicated region for block: B:998:0x045f  */
    @SuppressLint({"NewApi", "DrawAllocation"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onDraw(Canvas canvas) {
        RecordingCanvas recordingCanvas;
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        int i;
        PhotoViewerWebView photoViewerWebView;
        int i2;
        int i3;
        int i4;
        long j;
        int i5;
        int i6;
        float f9;
        float f10;
        float f11;
        float f12;
        float f13;
        float f14;
        float f15;
        boolean z;
        boolean z2;
        MaskPaintView maskPaintView;
        float f16;
        StickerMakerView stickerMakerView;
        float f17;
        float f18;
        float f19;
        int i7;
        float f20;
        float f21;
        float f22;
        float f23;
        float f24;
        boolean z3;
        int bitmapWidth;
        int bitmapHeight;
        int i8;
        int i9;
        boolean z4;
        boolean z5;
        int i10;
        boolean z6;
        float f25;
        float f26;
        int i11;
        int i12;
        float f27;
        int i13;
        float f28;
        float f29;
        int i14;
        boolean z7;
        long j2;
        int i15;
        GradientDrawable[] gradientDrawableArr;
        float f30;
        int i16;
        int i17;
        float f31;
        int i18;
        float f32;
        float f33;
        float f34;
        float f35;
        float f36;
        float f37;
        TextureView textureView;
        float f38;
        float f39;
        float minScale;
        int i19;
        float rotation;
        float min;
        int i20;
        int i21;
        int height;
        int i22;
        int i23;
        int containerViewHeight;
        boolean z8;
        ImageReceiver imageReceiver;
        float f40;
        int i24;
        Canvas canvas2;
        Drawable drawable;
        float f41;
        float f42;
        int i25;
        float f43;
        char c;
        int i26;
        int i27;
        int i28;
        boolean z9;
        float f44;
        AspectRatioFrameLayout aspectRatioFrameLayout;
        float f45;
        float f46;
        float f47;
        float f48;
        float f49;
        float f50;
        int i29;
        float f51;
        int i30;
        int i31;
        int i32;
        int i33;
        boolean z10;
        float f52;
        int i34;
        int i35;
        Canvas canvas3 = canvas;
        if (BLUR_RENDERNODE()) {
            if (this.renderNode == null) {
                this.renderNode = new RenderNode("photo viewer");
            }
            this.renderNode.setPosition(0, 0, canvas.getWidth(), canvas.getHeight() + AndroidUtilities.navigationBarHeight);
            recordingCanvas = this.renderNode.beginRecording();
        } else {
            recordingCanvas = canvas3;
        }
        BaseFragment baseFragment = this.parentFragment;
        float f53 = 1.0f;
        if (baseFragment != null && baseFragment.getFragmentView() != null) {
            if (!this.scroller.isFinished() && this.scroller.computeScrollOffset()) {
                if (this.scroller.getStartX() < this.maxX && this.scroller.getStartX() > this.minX) {
                    this.translationX = this.scroller.getCurrX();
                }
                if (this.scroller.getStartY() < this.maxY && this.scroller.getStartY() > this.minY) {
                    this.translationY = this.scroller.getCurrY();
                }
                invalidateBlur();
                this.containerView.invalidate();
            }
            float abs = Math.abs(this.translationY) / (getContainerViewHeight() / 2.0f);
            float f54 = this.clippingImageProgress;
            if (f54 != 0.0f) {
                abs += (1.0f - abs) * f54;
            }
            float clamp = ((1.0f - Utilities.clamp(abs, 1.0f, 0.0f)) * 0.1f) + 1.0f;
            if (!LiteMode.isEnabled(LiteMode.FLAG_CHAT_SCALE)) {
                clamp = 1.0f;
            }
            View fragmentView = this.parentFragment.getFragmentView();
            if (fragmentView.getScaleX() != clamp || fragmentView.getScaleY() != clamp) {
                fragmentView.setPivotX(fragmentView.getWidth() / 2.0f);
                fragmentView.setPivotY(fragmentView.getHeight() / 2.0f);
                fragmentView.setScaleX(clamp);
                fragmentView.setScaleY(clamp);
            }
            ChatAttachAlert chatAttachAlert = this.parentAlert;
            if (chatAttachAlert != null) {
                BottomSheet.ContainerView container = chatAttachAlert.getContainer();
                if (container.getScaleX() != clamp || container.getScaleY() != clamp) {
                    container.setPivotX(container.getWidth() / 2.0f);
                    container.setPivotY(container.getHeight() / 2.0f);
                    container.setScaleX(clamp);
                    container.setScaleY(clamp);
                }
            }
            int i36 = this.animationInProgress;
            if (i36 == 1 || i36 == 2 || i36 == 3 || this.pipAnimationInProgress) {
                this.containerView.invalidate();
            }
        }
        int i37 = this.animationInProgress;
        if (i37 == 1) {
            if (this.padImageForHorizontalInsets) {
                canvas.save();
                canvas3.translate((getLeftInset() / 2.0f) - (getRightInset() / 2.0f), 0.0f);
            }
            if (this.animatingImageView != null) {
                canvas.save();
                canvas3.translate(this.animatingImageView.getCenterX() - (canvas.getWidth() / 2.0f), this.animatingImageView.getCenterY() - (canvas.getHeight() / 2.0f));
                float animationProgress = this.animatingImageView.getAnimationProgress();
                if (this.animationInProgress != 1) {
                    animationProgress = 1.0f - animationProgress;
                }
                canvas3.scale(animationProgress, animationProgress, canvas.getWidth() / 2.0f, canvas.getHeight() / 2.0f);
                f53 = animationProgress;
            }
            drawProgress(canvas, 0.0f, 1.0f, 0.0f, f53);
            if (this.animatingImageView != null) {
                canvas.restore();
            }
            if (this.padImageForHorizontalInsets) {
                canvas.restore();
            }
            if (this.animatingImageView != null && recordingCanvas != canvas3) {
                recordingCanvas.save();
                recordingCanvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                recordingCanvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY());
                this.animatingImageView.draw(recordingCanvas);
                recordingCanvas.restore();
            }
            if (BLUR_RENDERNODE()) {
                this.renderNode.endRecording();
            } else {
                canvas3 = recordingCanvas;
            }
            drawFancyShadows(canvas3);
        } else if (i37 == 3 || (!this.isVisible && i37 != 2 && !this.pipAnimationInProgress)) {
            if (BLUR_RENDERNODE()) {
                this.renderNode.endRecording();
                canvas3.drawRenderNode(this.renderNode);
            }
        } else {
            if (this.padImageForHorizontalInsets) {
                recordingCanvas.save();
                recordingCanvas.translate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            }
            long currentTimeMillis = System.currentTimeMillis();
            long j3 = currentTimeMillis - this.videoCrossfadeAlphaLastTime;
            if (j3 > 20) {
                j3 = 17;
            }
            long j4 = j3;
            this.videoCrossfadeAlphaLastTime = currentTimeMillis;
            if (this.imageMoveAnimation != null) {
                if (!this.scroller.isFinished()) {
                    this.scroller.abortAnimation();
                }
                float f55 = this.scale;
                float f56 = this.animateToScale;
                float f57 = this.animationValue;
                f = ((f56 - f55) * f57) + f55;
                float f58 = this.rotate;
                f3 = f58 + ((this.animateToRotate - f58) * f57);
                float f59 = this.translationX;
                f5 = ((this.animateToX - f59) * f57) + f59;
                float f60 = this.translationY;
                f4 = f60 + ((this.animateToY - f60) * f57);
                float f61 = this.mirror;
                f2 = f61 + ((this.animateToMirror - f61) * f57);
                f8 = (f56 == 1.0f && f55 == 1.0f && f59 == 0.0f) ? f4 : -1.0f;
                updateMinMax(f);
                this.containerView.invalidate();
            } else {
                if (this.animationStartTime != 0) {
                    this.translationX = this.animateToX;
                    this.translationY = this.animateToY;
                    float f62 = this.animateToScale;
                    this.scale = f62;
                    this.rotate = this.animateToRotate;
                    this.animationStartTime = 0L;
                    updateMinMax(f62);
                    this.zoomAnimation = false;
                }
                if (!this.scroller.isFinished() && this.scroller.computeScrollOffset()) {
                    if (this.scroller.getStartX() < this.maxX && this.scroller.getStartX() > this.minX) {
                        this.translationX = this.scroller.getCurrX();
                    }
                    if (this.scroller.getStartY() < this.maxY && this.scroller.getStartY() > this.minY) {
                        this.translationY = this.scroller.getCurrY();
                    }
                    invalidateBlur();
                    this.containerView.invalidate();
                }
                if (this.switchImageAfterAnimation != 0) {
                    this.openedFullScreenVideo = false;
                    if (!this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                        Object obj = this.imagesArrLocals.get(this.currentIndex);
                        if (obj instanceof MediaController.MediaEditState) {
                            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
                        }
                    }
                    int i38 = this.switchImageAfterAnimation;
                    if (i38 == 1) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda71
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.this.lambda$onDraw$103();
                            }
                        });
                    } else if (i38 == 2) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda81
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.this.lambda$onDraw$104();
                            }
                        });
                    }
                    this.switchImageAfterAnimation = 0;
                }
                f = this.scale;
                f2 = this.mirror;
                f3 = this.rotate;
                f4 = this.translationY;
                f5 = this.translationX;
                if (this.moving) {
                    f6 = f5;
                    f7 = f3;
                    f8 = -1.0f;
                    float f63 = f2;
                    float f64 = f;
                    float f65 = f4 + this.translateY;
                    if (this.currentEditMode == 3) {
                        f65 += this.photoPaintView.getEmojiPadding(false) / 2.0f;
                    }
                    float f66 = f65;
                    photoViewerWebView = this.photoViewerWebView;
                    if (photoViewerWebView != null) {
                        photoViewerWebView.setTranslationY(f66);
                    }
                    if (this.isActionBarVisible) {
                        if (f64 <= 1.0001f) {
                            if (!this.allowShowFullscreenButton && this.fullscreenButton[0].getTag() == null) {
                                this.fullscreenButton[0].animate().alpha(1.0f).setDuration(120L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.77
                                    {
                                        PhotoViewer.this = this;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        PhotoViewer.this.fullscreenButton[0].setTag(null);
                                    }
                                }).start();
                                this.fullscreenButton[0].setTag(1);
                                this.allowShowFullscreenButton = true;
                            }
                        } else if (this.allowShowFullscreenButton) {
                            this.fullscreenButton[0].animate().alpha(0.0f).setDuration(120L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.78
                                {
                                    PhotoViewer.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    PhotoViewer.this.fullscreenButton[0].setTag(null);
                                }
                            }).start();
                            this.fullscreenButton[0].setTag(1);
                            this.allowShowFullscreenButton = false;
                        }
                    }
                    int containerViewWidth = getContainerViewWidth();
                    int containerViewHeight2 = getContainerViewHeight();
                    i2 = this.animationInProgress;
                    if (i2 != 2 || i2 == 4 || this.pipAnimationInProgress || this.isInline) {
                        if (i2 == 4) {
                            recordingCanvas.drawColor(-16777216);
                        }
                    } else if (this.currentEditMode == 0 && (i35 = this.sendPhotoType) != 1 && i35 != 11 && this.scale == 1.0f && f8 != -1.0f && !this.zoomAnimation) {
                        float f67 = containerViewWidth / 4.0f;
                        this.backgroundDrawable.setAlpha((int) Math.max(127.0f, (1.0f - (Math.min(Math.abs(f8), f67) / f67)) * 255.0f));
                    } else {
                        this.backgroundDrawable.setAlpha(255);
                    }
                    this.sideImage = null;
                    if (this.currentEditMode != 0 && (i34 = this.sendPhotoType) != 1) {
                        if (i34 != 11) {
                            if (this.scale >= 1.0f && !this.zoomAnimation && !this.zooming) {
                                if (f6 > this.maxX + AndroidUtilities.dp(5.0f)) {
                                    this.sideImage = this.leftImage;
                                } else if (f6 < this.minX - AndroidUtilities.dp(5.0f)) {
                                    this.sideImage = this.rightImage;
                                } else {
                                    this.groupedPhotosListView.setMoveProgress(0.0f);
                                }
                            }
                            this.changingPage = this.sideImage != null;
                        }
                    }
                    i3 = 0;
                    for (i4 = 3; i3 < i4; i4 = 3) {
                        if (i3 != 1) {
                            if (i3 == 2) {
                                f52 = ((-this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(15.0f)) + (f6 - this.maxX);
                            } else {
                                float f68 = this.minX;
                                if (f6 < f68) {
                                    f52 = f6 - f68;
                                }
                            }
                            this.fullscreenButton[i3].setTranslationX((f52 + this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(48.0f));
                            i3++;
                        }
                        f52 = 0.0f;
                        this.fullscreenButton[i3].setTranslationX((f52 + this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(48.0f));
                        i3++;
                    }
                    if (this.sideImage != this.rightImage) {
                        if (!this.zoomAnimation) {
                            float f69 = this.minX;
                            if (f6 < f69) {
                                float min2 = Math.min(1.0f, (f69 - f6) / containerViewWidth);
                                f45 = (-containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2);
                                f47 = min2;
                                f46 = (1.0f - min2) * 0.3f;
                                if (this.sideImage.hasBitmapImage()) {
                                    f48 = f46;
                                    f49 = f47;
                                    f50 = f45;
                                    j = j4;
                                    i5 = containerViewHeight2;
                                    i29 = containerViewWidth;
                                    f51 = f66;
                                    f9 = f7;
                                    f10 = f6;
                                    f11 = f63;
                                } else {
                                    recordingCanvas.save();
                                    float f70 = f47;
                                    recordingCanvas.translate(containerViewWidth / 2, containerViewHeight2 / 2);
                                    recordingCanvas.translate((AndroidUtilities.dp(30.0f) / 2) + containerViewWidth + f45, 0.0f);
                                    float f71 = 1.0f - f46;
                                    recordingCanvas.scale(f71, f71);
                                    int bitmapWidth2 = this.sideImage.getBitmapWidth();
                                    int bitmapHeight2 = this.sideImage.getBitmapHeight();
                                    if (this.rightImageIsVideo || this.rightCropState == null || !this.rightCropTransform.hasViewTransform()) {
                                        f50 = f45;
                                        i30 = bitmapHeight2;
                                        j = j4;
                                        f51 = f66;
                                        f9 = f7;
                                        f10 = f6;
                                        f49 = f70;
                                        i31 = bitmapWidth2;
                                        i32 = containerViewHeight2;
                                        f11 = f63;
                                        i33 = containerViewWidth;
                                    } else {
                                        f49 = f70;
                                        i31 = bitmapWidth2;
                                        f11 = f63;
                                        i30 = bitmapHeight2;
                                        f10 = f6;
                                        j = j4;
                                        i32 = containerViewHeight2;
                                        f50 = f45;
                                        i33 = containerViewWidth;
                                        f51 = f66;
                                        f9 = f7;
                                        applyCrop(recordingCanvas, containerViewWidth, containerViewHeight2, i31, i30, 1.0f, this.rightCropTransform, this.rightCropState);
                                    }
                                    int i39 = i31;
                                    float f72 = i39;
                                    int i40 = i30;
                                    float f73 = i40;
                                    float min3 = Math.min(i33 / f72, i32 / f73);
                                    int i41 = (int) (f72 * min3);
                                    int i42 = (int) (f73 * min3);
                                    if (this.imagesArrLocals.isEmpty()) {
                                        z10 = false;
                                    } else if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                        z10 = this.rightCropTransform.isMirrored();
                                    } else {
                                        MediaController.CropState cropState = this.rightCropState;
                                        z10 = cropState != null && cropState.mirrored;
                                    }
                                    if (z10) {
                                        recordingCanvas.scale(-1.0f, 1.0f);
                                    }
                                    this.sideImage.setAlpha(f49);
                                    int i43 = (-i41) / 2;
                                    i5 = i32;
                                    int i44 = (-i42) / 2;
                                    f48 = f46;
                                    i29 = i33;
                                    this.sideImage.setImageCoords(i43, i44, i41, i42);
                                    this.sideImage.draw(recordingCanvas);
                                    PaintingOverlay paintingOverlay = this.rightPaintingOverlay;
                                    if (paintingOverlay != null && paintingOverlay.getVisibility() == 0) {
                                        recordingCanvas.clipRect(i43, i44, i41 / 2, i42 / 2);
                                        if (this.rightPaintingOverlay.getMeasuredWidth() != i39 || this.rightPaintingOverlay.getMeasuredHeight() != i40) {
                                            this.rightPaintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(i39, 1073741824), View.MeasureSpec.makeMeasureSpec(i40, 1073741824));
                                            this.rightPaintingOverlay.layout(0, 0, i39, i40);
                                        }
                                        recordingCanvas.scale(min3, min3);
                                        recordingCanvas.translate((-i39) / 2, (-i40) / 2);
                                        this.rightPaintingOverlay.setAlpha(1.0f);
                                        this.rightPaintingOverlay.draw(recordingCanvas);
                                    }
                                    recordingCanvas.restore();
                                }
                                this.groupedPhotosListView.setMoveProgress(-f49);
                                recordingCanvas.save();
                                f12 = f51;
                                recordingCanvas.translate(f50, f12 / f64);
                                i6 = i29;
                                recordingCanvas.translate(((i6 * (this.scale + 1.0f)) + AndroidUtilities.dp(30.0f)) / 2.0f, (-f12) / f64);
                                this.photoProgressViews[1].setScale(1.0f - f48);
                                this.photoProgressViews[1].setAlpha(f49);
                                this.photoProgressViews[1].onDraw(recordingCanvas);
                                if (this.isActionBarVisible) {
                                    this.fullscreenButton[1].setAlpha(f49);
                                }
                                recordingCanvas.restore();
                            }
                        }
                        f45 = f6;
                        f46 = 0.0f;
                        f47 = 1.0f;
                        if (this.sideImage.hasBitmapImage()) {
                        }
                        this.groupedPhotosListView.setMoveProgress(-f49);
                        recordingCanvas.save();
                        f12 = f51;
                        recordingCanvas.translate(f50, f12 / f64);
                        i6 = i29;
                        recordingCanvas.translate(((i6 * (this.scale + 1.0f)) + AndroidUtilities.dp(30.0f)) / 2.0f, (-f12) / f64);
                        this.photoProgressViews[1].setScale(1.0f - f48);
                        this.photoProgressViews[1].setAlpha(f49);
                        this.photoProgressViews[1].onDraw(recordingCanvas);
                        if (this.isActionBarVisible) {
                        }
                        recordingCanvas.restore();
                    } else {
                        j = j4;
                        i5 = containerViewHeight2;
                        i6 = containerViewWidth;
                        f9 = f7;
                        f10 = f6;
                        f11 = f63;
                        f12 = f66;
                        if (this.isActionBarVisible) {
                            this.fullscreenButton[1].setAlpha(0.0f);
                            if (!this.zoomAnimation) {
                                float f74 = this.maxX;
                                if (f10 > f74) {
                                    int i45 = this.currentEditMode;
                                    if ((i45 == 0 || i45 == 4) && this.sendPhotoType != 1) {
                                        float min4 = Math.min(1.0f, (f10 - f74) / i6);
                                        f15 = min4 * 0.3f;
                                        f14 = 1.0f - min4;
                                        f13 = this.maxX;
                                        if (this.videoSizeSet || (aspectRatioFrameLayout = this.aspectRatioFrameLayout) == null || aspectRatioFrameLayout.getVisibility() != 0) {
                                            z = false;
                                            z2 = false;
                                        } else {
                                            z = false;
                                            z2 = true;
                                        }
                                        this.centerImageTransformLocked = z;
                                        this.centerImageTransform.reset();
                                        maskPaintView = this.maskPaintView;
                                        if (maskPaintView != null || this.maskPaintViewShuttingDown || maskPaintView.getRenderView() == null) {
                                            f16 = f14;
                                        } else {
                                            f16 = this.maskPaintView.getRenderView().getAlpha() > 0.99f ? 0.0f : 1.0f;
                                        }
                                        if (!this.centerImage.hasBitmapImage() || (z2 && this.textureUploaded)) {
                                            stickerMakerView = this.stickerMakerView;
                                            if (stickerMakerView != null && stickerMakerView.outlineVisible) {
                                                try {
                                                    z8 = ((MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex)).isCropped;
                                                } catch (Exception unused) {
                                                    z8 = false;
                                                }
                                                if (!z8) {
                                                    this.stickerMakerView.updateOutlineBounds(false);
                                                } else {
                                                    this.stickerMakerView.outlineMatrix.reset();
                                                    this.stickerMakerView.outlineMatrix.postTranslate(-0.5f, -0.5f);
                                                    float dp = i6 - AndroidUtilities.dp(20.0f);
                                                    this.stickerMakerView.outlineMatrix.postScale(dp, dp);
                                                    float f75 = 1.0f / f64;
                                                    this.stickerMakerView.outlineMatrix.postScale(f75, f75);
                                                    f17 = f10;
                                                    this.stickerMakerView.outlineMatrix.postTranslate((-f17) / f64, (-f12) / f64);
                                                    f18 = f9;
                                                    this.stickerMakerView.outlineMatrix.postRotate(-f18);
                                                    this.stickerMakerView.updateOutlineBounds(true);
                                                    recordingCanvas.save();
                                                    f19 = i6;
                                                    float f76 = f19 / 2.0f;
                                                    i7 = i5;
                                                    float f77 = i7;
                                                    float f78 = f77 / 2.0f;
                                                    recordingCanvas.translate(f76 + getAdditionX(this.currentEditMode), f78 + getAdditionY(this.currentEditMode));
                                                    this.centerImageTransform.preTranslate(f76 + getAdditionX(this.currentEditMode), f78 + getAdditionY(this.currentEditMode));
                                                    recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                                    this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                                    float f79 = f64 - f15;
                                                    recordingCanvas.scale(f79, f79);
                                                    this.centerImageTransform.preScale(f79, f79);
                                                    recordingCanvas.rotate(f18);
                                                    this.centerImageTransform.preRotate(f18);
                                                    if (this.currentEditMode == 3 || this.photoPaintView == null) {
                                                        f20 = f19;
                                                    } else {
                                                        f20 = f19;
                                                        float emojiPadding = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) < AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                                        recordingCanvas.translate(0.0f, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding);
                                                        this.centerImageTransform.preTranslate(0.0f, emojiPadding * (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()));
                                                    }
                                                    if (!this.pipAnimationInProgress || (z2 && ((this.textureUploaded || this.videoSizeSet) && this.videoCrossfadeStarted && this.videoCrossfadeAlpha == 1.0f))) {
                                                        f21 = f18;
                                                        f22 = f17;
                                                        i5 = i7;
                                                        f23 = f13;
                                                        f24 = f16;
                                                    } else {
                                                        Bitmap bitmap = this.videoFrameBitmap;
                                                        if (bitmap != null && this.isCurrentVideo) {
                                                            int width = bitmap.getWidth();
                                                            int i46 = (-width) / 2;
                                                            float f80 = f18;
                                                            int i47 = (-this.videoFrameBitmap.getHeight()) / 2;
                                                            if (f16 < 1.0f) {
                                                                i22 = i47;
                                                                f21 = f80;
                                                                f22 = f17;
                                                                i5 = i7;
                                                                i23 = i46;
                                                                f23 = f13;
                                                                f24 = f16;
                                                                recordingCanvas.saveLayerAlpha(i46, i47, width + i46, height + i47, (int) (f16 * 255.0f), 31);
                                                            } else {
                                                                i22 = i47;
                                                                f22 = f17;
                                                                i5 = i7;
                                                                f23 = f13;
                                                                f21 = f80;
                                                                i23 = i46;
                                                                f24 = f16;
                                                            }
                                                            recordingCanvas.drawBitmap(this.videoFrameBitmap, i23, i22, this.videoFrameBitmapPaint);
                                                            if (f24 < 1.0f) {
                                                                recordingCanvas.restore();
                                                            }
                                                        } else {
                                                            f21 = f18;
                                                            f22 = f17;
                                                            i5 = i7;
                                                            f23 = f13;
                                                            f24 = f16;
                                                            this.centerImage.setAlpha(f24);
                                                            int bitmapWidth3 = this.centerImage.getBitmapWidth();
                                                            int bitmapHeight3 = this.centerImage.getBitmapHeight();
                                                            if (this.isCurrentVideo && this.currentEditMode == 0 && this.sendPhotoType == 1) {
                                                                min = getCropFillScale(false);
                                                            } else {
                                                                min = Math.min(f20 / bitmapWidth3, f77 / bitmapHeight3);
                                                            }
                                                            this.centerImage.setImageCoords((-i20) / 2, (-i21) / 2, (int) (bitmapWidth3 * min), (int) (bitmapHeight3 * min));
                                                            if (this.isCurrentVideo) {
                                                                this.centerImage.draw(recordingCanvas);
                                                                this.centerImageTransformLocked = true;
                                                            } else {
                                                                z3 = true;
                                                                if (!z2 && this.textureUploaded && this.videoSizeSet) {
                                                                    View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                                                                    bitmapWidth = view.getMeasuredWidth();
                                                                    bitmapHeight = view.getMeasuredHeight();
                                                                } else {
                                                                    bitmapWidth = this.centerImage.getBitmapWidth();
                                                                    bitmapHeight = this.centerImage.getBitmapHeight();
                                                                }
                                                                float f81 = bitmapWidth;
                                                                float f82 = f20 / f81;
                                                                float f83 = bitmapHeight;
                                                                float f84 = f77 / f83;
                                                                float min5 = Math.min(f82, f84);
                                                                int i48 = bitmapHeight;
                                                                int i49 = (int) (f81 * min5);
                                                                int i50 = bitmapWidth;
                                                                int i51 = (int) (f83 * min5);
                                                                i8 = i6;
                                                                if (this.imagesArrLocals.isEmpty()) {
                                                                    i9 = i51;
                                                                    z4 = z2;
                                                                } else {
                                                                    int i52 = this.currentEditMode;
                                                                    if (i52 != 3) {
                                                                        z4 = z2;
                                                                        int i53 = this.switchingToMode;
                                                                        if (i53 != 3) {
                                                                            i9 = i51;
                                                                            if (this.sendPhotoType != 1) {
                                                                                int i54 = this.imageMoveAnimation != null ? -1 : -1;
                                                                                if (i52 != 0) {
                                                                                    if (i52 != 4) {
                                                                                        if (i52 != 1) {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } else if (i53 != 0) {
                                                                            }
                                                                            if (z5) {
                                                                                int orientation = this.cropTransform.getOrientation();
                                                                                if (orientation == 90 || orientation == 270) {
                                                                                    i16 = i48;
                                                                                    i17 = i50;
                                                                                } else {
                                                                                    i17 = i48;
                                                                                    i16 = i50;
                                                                                }
                                                                                i10 = i49;
                                                                                if (this.sendPhotoType != 1 && (this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                    f25 = f24;
                                                                                } else if (this.imageMoveAnimation != null && (i18 = this.switchingToMode) != -1) {
                                                                                    f25 = f24;
                                                                                    if (this.currentEditMode != 1 && i18 != 1) {
                                                                                        if (i18 == 0) {
                                                                                            f31 = this.animationValue;
                                                                                        } else {
                                                                                            f31 = 1.0f - this.animationValue;
                                                                                        }
                                                                                        float cropPw = this.cropTransform.getCropPw();
                                                                                        float cropPh = this.cropTransform.getCropPh();
                                                                                        f32 = i16;
                                                                                        f33 = 1.0f - f31;
                                                                                        int i55 = (int) ((cropPw + ((1.0f - cropPw) * f33)) * f32);
                                                                                        f34 = i17;
                                                                                        int i56 = (int) ((cropPh + ((1.0f - cropPh) * f33)) * f34);
                                                                                        z6 = z3;
                                                                                        f35 = i55;
                                                                                        f36 = f20 / f35;
                                                                                        f37 = i56;
                                                                                        if (f36 * f37 > f77) {
                                                                                        }
                                                                                        f26 = f64;
                                                                                        if (this.sendPhotoType != 1) {
                                                                                            float f85 = f35 * f36;
                                                                                            float f86 = f37 * f36;
                                                                                            if (f82 * f83 > f77) {
                                                                                            }
                                                                                            float f87 = f85 + ((((f81 * f82) / f79) - f85) * f33);
                                                                                            float f88 = f86 + ((((f83 * f82) / f79) - f86) * f33);
                                                                                            recordingCanvas.clipRect((-f87) / 2.0f, (-f88) / 2.0f, f87 / 2.0f, f88 / 2.0f);
                                                                                        }
                                                                                        if (this.sendPhotoType != 1) {
                                                                                        }
                                                                                        if (this.currentEditMode != 1) {
                                                                                        }
                                                                                        textureView = this.videoTextureView;
                                                                                        if (textureView != null) {
                                                                                        }
                                                                                        float scale = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                        f38 = f20 / f32;
                                                                                        if (f38 * f34 > f77) {
                                                                                        }
                                                                                        float f89 = scale * (f38 / min5);
                                                                                        if (this.sendPhotoType == 1) {
                                                                                        }
                                                                                        f39 = f89;
                                                                                        recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                        }
                                                                                        recordingCanvas.scale(f39, f39);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                        }
                                                                                        recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                        }
                                                                                        rotation = this.cropTransform.getRotation() + orientation;
                                                                                        if (rotation > 180.0f) {
                                                                                        }
                                                                                        if (this.sendPhotoType != 1) {
                                                                                        }
                                                                                        float f90 = rotation * f31;
                                                                                        recordingCanvas.rotate(f90);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                        }
                                                                                        f27 = f36;
                                                                                        i12 = i55;
                                                                                        i11 = i56;
                                                                                    }
                                                                                } else {
                                                                                    f25 = f24;
                                                                                    int i57 = this.currentEditMode;
                                                                                    if (i57 == 2 || i57 == 3) {
                                                                                        f31 = 0.0f;
                                                                                        float cropPw2 = this.cropTransform.getCropPw();
                                                                                        float cropPh2 = this.cropTransform.getCropPh();
                                                                                        f32 = i16;
                                                                                        f33 = 1.0f - f31;
                                                                                        int i552 = (int) ((cropPw2 + ((1.0f - cropPw2) * f33)) * f32);
                                                                                        f34 = i17;
                                                                                        int i562 = (int) ((cropPh2 + ((1.0f - cropPh2) * f33)) * f34);
                                                                                        z6 = z3;
                                                                                        f35 = i552;
                                                                                        f36 = f20 / f35;
                                                                                        f37 = i562;
                                                                                        if (f36 * f37 > f77) {
                                                                                            f36 = f77 / f37;
                                                                                        }
                                                                                        f26 = f64;
                                                                                        if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
                                                                                            float f852 = f35 * f36;
                                                                                            float f862 = f37 * f36;
                                                                                            if (f82 * f83 > f77) {
                                                                                                f82 = f84;
                                                                                            }
                                                                                            float f872 = f852 + ((((f81 * f82) / f79) - f852) * f33);
                                                                                            float f882 = f862 + ((((f83 * f82) / f79) - f862) * f33);
                                                                                            recordingCanvas.clipRect((-f872) / 2.0f, (-f882) / 2.0f, f872 / 2.0f, f882 / 2.0f);
                                                                                        }
                                                                                        if (this.sendPhotoType != 1 || this.cropTransform.hasViewTransform()) {
                                                                                            if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                                                                                                textureView = this.videoTextureView;
                                                                                                if (textureView != null) {
                                                                                                    textureView.setScaleX(this.cropTransform.isMirrored() ? -1.0f : 1.0f);
                                                                                                    FirstFrameView firstFrameView = this.firstFrameView;
                                                                                                    if (firstFrameView != null) {
                                                                                                        firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                                                                                                    }
                                                                                                }
                                                                                                float scale2 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                                f38 = f20 / f32;
                                                                                                if (f38 * f34 > f77) {
                                                                                                    f38 = f77 / f34;
                                                                                                }
                                                                                                float f892 = scale2 * (f38 / min5);
                                                                                                if (this.sendPhotoType == 1) {
                                                                                                    if (this.currentEditMode == 3 || (i19 = this.switchingToMode) == 3) {
                                                                                                        minScale = ((this.cropTransform.getMinScale() - 1.0f) * f33) + 1.0f;
                                                                                                    } else if (i19 == 0) {
                                                                                                        minScale = this.cropTransform.getMinScale();
                                                                                                    }
                                                                                                    f892 /= minScale;
                                                                                                }
                                                                                                f39 = f892;
                                                                                            } else {
                                                                                                TextureView textureView2 = this.videoTextureView;
                                                                                                if (textureView2 != null) {
                                                                                                    MediaController.CropState cropState2 = this.editState.cropState;
                                                                                                    textureView2.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                                                                                                    FirstFrameView firstFrameView2 = this.firstFrameView;
                                                                                                    if (firstFrameView2 != null) {
                                                                                                        firstFrameView2.setScaleX(this.videoTextureView.getScaleX());
                                                                                                    }
                                                                                                }
                                                                                                MediaController.CropState cropState3 = this.editState.cropState;
                                                                                                float f91 = cropState3 != null ? cropState3.cropScale : 1.0f;
                                                                                                f39 = f91 * ((f36 / min5) / (((f91 - 1.0f) * f33) + 1.0f));
                                                                                            }
                                                                                            recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                            if (!this.centerImageTransformLocked) {
                                                                                                this.centerImageTransform.preTranslate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                            }
                                                                                            recordingCanvas.scale(f39, f39);
                                                                                            if (!this.centerImageTransformLocked) {
                                                                                                this.centerImageTransform.preScale(f39, f39);
                                                                                            }
                                                                                            recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                            if (!this.centerImageTransformLocked) {
                                                                                                this.centerImageTransform.preTranslate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                            }
                                                                                            rotation = this.cropTransform.getRotation() + orientation;
                                                                                            if (rotation > 180.0f) {
                                                                                                rotation -= 360.0f;
                                                                                            }
                                                                                            if (this.sendPhotoType != 1 && (this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                                recordingCanvas.rotate(rotation);
                                                                                                if (!this.centerImageTransformLocked) {
                                                                                                    this.centerImageTransform.preRotate(rotation);
                                                                                                }
                                                                                            } else {
                                                                                                float f902 = rotation * f31;
                                                                                                recordingCanvas.rotate(f902);
                                                                                                if (!this.centerImageTransformLocked) {
                                                                                                    this.centerImageTransform.preRotate(f902);
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            TextureView textureView3 = this.videoTextureView;
                                                                                            if (textureView3 != null) {
                                                                                                textureView3.setScaleX(1.0f);
                                                                                                this.videoTextureView.setScaleY(1.0f);
                                                                                                FirstFrameView firstFrameView3 = this.firstFrameView;
                                                                                                if (firstFrameView3 != null) {
                                                                                                    firstFrameView3.setScaleX(1.0f);
                                                                                                    this.firstFrameView.setScaleY(1.0f);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        f27 = f36;
                                                                                        i12 = i552;
                                                                                        i11 = i562;
                                                                                    }
                                                                                }
                                                                                f31 = 1.0f;
                                                                                float cropPw22 = this.cropTransform.getCropPw();
                                                                                float cropPh22 = this.cropTransform.getCropPh();
                                                                                f32 = i16;
                                                                                f33 = 1.0f - f31;
                                                                                int i5522 = (int) ((cropPw22 + ((1.0f - cropPw22) * f33)) * f32);
                                                                                f34 = i17;
                                                                                int i5622 = (int) ((cropPh22 + ((1.0f - cropPh22) * f33)) * f34);
                                                                                z6 = z3;
                                                                                f35 = i5522;
                                                                                f36 = f20 / f35;
                                                                                f37 = i5622;
                                                                                if (f36 * f37 > f77) {
                                                                                }
                                                                                f26 = f64;
                                                                                if (this.sendPhotoType != 1) {
                                                                                }
                                                                                if (this.sendPhotoType != 1) {
                                                                                }
                                                                                if (this.currentEditMode != 1) {
                                                                                }
                                                                                textureView = this.videoTextureView;
                                                                                if (textureView != null) {
                                                                                }
                                                                                float scale22 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                f38 = f20 / f32;
                                                                                if (f38 * f34 > f77) {
                                                                                }
                                                                                float f8922 = scale22 * (f38 / min5);
                                                                                if (this.sendPhotoType == 1) {
                                                                                }
                                                                                f39 = f8922;
                                                                                recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                if (!this.centerImageTransformLocked) {
                                                                                }
                                                                                recordingCanvas.scale(f39, f39);
                                                                                if (!this.centerImageTransformLocked) {
                                                                                }
                                                                                recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                if (!this.centerImageTransformLocked) {
                                                                                }
                                                                                rotation = this.cropTransform.getRotation() + orientation;
                                                                                if (rotation > 180.0f) {
                                                                                }
                                                                                if (this.sendPhotoType != 1) {
                                                                                }
                                                                                float f9022 = rotation * f31;
                                                                                recordingCanvas.rotate(f9022);
                                                                                if (!this.centerImageTransformLocked) {
                                                                                }
                                                                                f27 = f36;
                                                                                i12 = i5522;
                                                                                i11 = i5622;
                                                                            } else {
                                                                                i10 = i49;
                                                                                z6 = z3;
                                                                                f25 = f24;
                                                                                f26 = f64;
                                                                                i11 = i48;
                                                                                i12 = i50;
                                                                                f27 = 1.0f;
                                                                            }
                                                                            i13 = this.currentEditMode;
                                                                            if (i13 == 3) {
                                                                                LPhotoPaintView lPhotoPaintView = this.photoPaintView;
                                                                                lPhotoPaintView.setTransform(f26, f22, f12 + ((this.sendPhotoType == 1 ? AndroidUtilities.statusBarHeight / 2.0f : 0.0f) * lPhotoPaintView.getRenderView().getScaleX()), i12 * f27, i11 * f27);
                                                                            } else if (i13 == 4) {
                                                                                this.maskPaintView.setTransform(f26, f22, f12, f21, i12 * f27, i11 * f27);
                                                                            }
                                                                            if (z6 || this.usedSurfaceView) {
                                                                                f28 = f11;
                                                                                f29 = f25;
                                                                            } else {
                                                                                f28 = f11;
                                                                                f29 = f25;
                                                                                drawCenterImageInternal(recordingCanvas, f28, f29);
                                                                            }
                                                                            recordingCanvas.save();
                                                                            if (f28 > 0.0f) {
                                                                                recordingCanvas.save();
                                                                                recordingCanvas.scale(1.0f - (f28 * 2.0f), 1.0f);
                                                                                recordingCanvas.skew(0.0f, f28 * 4.0f * (1.0f - f28) * 0.25f);
                                                                                i14 = i10;
                                                                                z7 = true;
                                                                            } else {
                                                                                i14 = i10;
                                                                                z7 = false;
                                                                            }
                                                                            float f92 = (-i14) / 2;
                                                                            int i58 = i9;
                                                                            float f93 = (-i58) / 2;
                                                                            recordingCanvas.translate(f92, f93);
                                                                            if (!z4 || this.paintingOverlay.getVisibility() == 0) {
                                                                                recordingCanvas.scale(min5, min5);
                                                                            }
                                                                            if (z4) {
                                                                                if (!this.videoCrossfadeStarted && ((this.usedSurfaceView && this.firstFrameRendered) || (this.textureUploaded && this.videoSizeSet))) {
                                                                                    this.videoCrossfadeStarted = true;
                                                                                    this.videoCrossfadeAlpha = 0.0f;
                                                                                    this.videoCrossfadeAlphaLastTime = System.currentTimeMillis();
                                                                                    this.containerView.getMeasuredHeight();
                                                                                }
                                                                                TextureView textureView4 = this.videoTextureView;
                                                                                if (textureView4 != null) {
                                                                                    textureView4.setAlpha(this.videoCrossfadeAlpha * f29);
                                                                                }
                                                                                TextureView textureView5 = this.videoTextureView;
                                                                                if (textureView5 instanceof VideoEditTextureView) {
                                                                                    ((VideoEditTextureView) textureView5).setViewRect(((i8 - i14) / 2.0f) + getAdditionX(this.currentEditMode) + f23, ((i5 - i58) / 2.0f) + getAdditionY(this.currentEditMode) + f12 + this.currentPanTranslationY, i14, i58);
                                                                                }
                                                                                SurfaceView surfaceView = this.videoSurfaceView;
                                                                                if (surfaceView != null && this.waitingForDraw == 0 && !this.changingTextureView && !this.switchingInlineMode && !this.pipAnimationInProgress && surfaceView.getVisibility() != 0) {
                                                                                    this.videoSurfaceView.setVisibility(0);
                                                                                }
                                                                                if (!this.usedSurfaceView || this.firstFrameRendered) {
                                                                                    this.aspectRatioFrameLayout.draw(recordingCanvas);
                                                                                }
                                                                                if (this.usedSurfaceView && f29 != 1.0f) {
                                                                                    if (this.surfaceBlackoutPaint == null) {
                                                                                        this.surfaceBlackoutPaint = new Paint();
                                                                                    }
                                                                                    this.surfaceBlackoutPaint.setAlpha((int) ((1.0f - f29) * 255.0f));
                                                                                    recordingCanvas.drawRect(-1.0f, -1.0f, this.aspectRatioFrameLayout.getWidth() + 1.0f, this.aspectRatioFrameLayout.getHeight() + 1.0f, this.surfaceBlackoutPaint);
                                                                                }
                                                                                if (this.videoCrossfadeStarted) {
                                                                                    float f94 = this.videoCrossfadeAlpha;
                                                                                    if (f94 < 1.0f) {
                                                                                        j2 = j;
                                                                                        this.videoCrossfadeAlpha = f94 + (((float) j2) / (this.playerInjected ? 100.0f : 200.0f));
                                                                                        this.containerView.invalidate();
                                                                                        invalidateBlur();
                                                                                        if (this.videoCrossfadeAlpha > 1.0f) {
                                                                                            this.videoCrossfadeAlpha = 1.0f;
                                                                                        }
                                                                                        this.paintingOverlay.setAlpha(f29);
                                                                                    }
                                                                                }
                                                                                j2 = j;
                                                                                this.paintingOverlay.setAlpha(f29);
                                                                            } else {
                                                                                j2 = j;
                                                                            }
                                                                            if (z7) {
                                                                                recordingCanvas.restore();
                                                                                recordingCanvas.translate(f92, f93);
                                                                                if (z4 || this.paintingOverlay.getVisibility() == 0) {
                                                                                    recordingCanvas.scale(min5, min5);
                                                                                }
                                                                            }
                                                                            if (this.paintingOverlay.getVisibility() == 0) {
                                                                                if (!this.isCurrentVideo) {
                                                                                    if (this.currentEditMode == 2) {
                                                                                    }
                                                                                }
                                                                                if (this.sendPhotoType != 11) {
                                                                                    recordingCanvas.clipRect(0, 0, this.paintingOverlay.getMeasuredWidth(), this.paintingOverlay.getMeasuredHeight());
                                                                                }
                                                                                this.paintingOverlay.draw(recordingCanvas);
                                                                            }
                                                                            recordingCanvas.restore();
                                                                            if (z6 && this.usedSurfaceView) {
                                                                                f30 = this.videoCrossfadeAlpha;
                                                                                if (f30 != 1.0f) {
                                                                                    drawCenterImageInternal(recordingCanvas, f28, (1.0f - f30) * f29);
                                                                                }
                                                                            }
                                                                            recordingCanvas.restore();
                                                                            i15 = 0;
                                                                            while (true) {
                                                                                gradientDrawableArr = this.pressedDrawable;
                                                                                if (i15 >= gradientDrawableArr.length) {
                                                                                    break;
                                                                                }
                                                                                if (this.drawPressedDrawable[i15] || this.pressedDrawableAlpha[i15] != 0.0f) {
                                                                                    gradientDrawableArr[i15].setAlpha((int) (this.pressedDrawableAlpha[i15] * 255.0f));
                                                                                    if (i15 == 0) {
                                                                                        this.pressedDrawable[i15].setBounds(0, 0, this.containerView.getMeasuredWidth() / 5, this.containerView.getMeasuredHeight());
                                                                                    } else {
                                                                                        this.pressedDrawable[i15].setBounds(this.containerView.getMeasuredWidth() - (this.containerView.getMeasuredWidth() / 5), 0, this.containerView.getMeasuredWidth(), this.containerView.getMeasuredHeight());
                                                                                    }
                                                                                    this.pressedDrawable[i15].draw(recordingCanvas);
                                                                                }
                                                                                if (this.drawPressedDrawable[i15]) {
                                                                                    float[] fArr = this.pressedDrawableAlpha;
                                                                                    if (fArr[i15] < 1.0f) {
                                                                                        fArr[i15] = fArr[i15] + (((float) j2) / 180.0f);
                                                                                        if (fArr[i15] > 1.0f) {
                                                                                            fArr[i15] = 1.0f;
                                                                                        }
                                                                                        this.containerView.invalidate();
                                                                                    }
                                                                                } else {
                                                                                    float[] fArr2 = this.pressedDrawableAlpha;
                                                                                    if (fArr2[i15] > 0.0f) {
                                                                                        fArr2[i15] = fArr2[i15] - (((float) j2) / 180.0f);
                                                                                        if (fArr2[i15] < 0.0f) {
                                                                                            fArr2[i15] = 0.0f;
                                                                                        }
                                                                                        this.containerView.invalidate();
                                                                                        i15++;
                                                                                    }
                                                                                }
                                                                                i15++;
                                                                            }
                                                                        } else {
                                                                            i9 = i51;
                                                                        }
                                                                    } else {
                                                                        i9 = i51;
                                                                        z4 = z2;
                                                                    }
                                                                    z5 = true;
                                                                    if (z5) {
                                                                    }
                                                                    i13 = this.currentEditMode;
                                                                    if (i13 == 3) {
                                                                    }
                                                                    if (z6) {
                                                                    }
                                                                    f28 = f11;
                                                                    f29 = f25;
                                                                    recordingCanvas.save();
                                                                    if (f28 > 0.0f) {
                                                                    }
                                                                    float f922 = (-i14) / 2;
                                                                    int i582 = i9;
                                                                    float f932 = (-i582) / 2;
                                                                    recordingCanvas.translate(f922, f932);
                                                                    if (!z4) {
                                                                    }
                                                                    recordingCanvas.scale(min5, min5);
                                                                    if (z4) {
                                                                    }
                                                                    if (z7) {
                                                                    }
                                                                    if (this.paintingOverlay.getVisibility() == 0) {
                                                                    }
                                                                    recordingCanvas.restore();
                                                                    if (z6) {
                                                                        f30 = this.videoCrossfadeAlpha;
                                                                        if (f30 != 1.0f) {
                                                                        }
                                                                    }
                                                                    recordingCanvas.restore();
                                                                    i15 = 0;
                                                                    while (true) {
                                                                        gradientDrawableArr = this.pressedDrawable;
                                                                        if (i15 >= gradientDrawableArr.length) {
                                                                        }
                                                                        i15++;
                                                                    }
                                                                }
                                                                z5 = false;
                                                                if (z5) {
                                                                }
                                                                i13 = this.currentEditMode;
                                                                if (i13 == 3) {
                                                                }
                                                                if (z6) {
                                                                }
                                                                f28 = f11;
                                                                f29 = f25;
                                                                recordingCanvas.save();
                                                                if (f28 > 0.0f) {
                                                                }
                                                                float f9222 = (-i14) / 2;
                                                                int i5822 = i9;
                                                                float f9322 = (-i5822) / 2;
                                                                recordingCanvas.translate(f9222, f9322);
                                                                if (!z4) {
                                                                }
                                                                recordingCanvas.scale(min5, min5);
                                                                if (z4) {
                                                                }
                                                                if (z7) {
                                                                }
                                                                if (this.paintingOverlay.getVisibility() == 0) {
                                                                }
                                                                recordingCanvas.restore();
                                                                if (z6) {
                                                                }
                                                                recordingCanvas.restore();
                                                                i15 = 0;
                                                                while (true) {
                                                                    gradientDrawableArr = this.pressedDrawable;
                                                                    if (i15 >= gradientDrawableArr.length) {
                                                                    }
                                                                    i15++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    z3 = false;
                                                    if (!z2) {
                                                    }
                                                    bitmapWidth = this.centerImage.getBitmapWidth();
                                                    bitmapHeight = this.centerImage.getBitmapHeight();
                                                    float f812 = bitmapWidth;
                                                    float f822 = f20 / f812;
                                                    float f832 = bitmapHeight;
                                                    float f842 = f77 / f832;
                                                    float min52 = Math.min(f822, f842);
                                                    int i482 = bitmapHeight;
                                                    int i492 = (int) (f812 * min52);
                                                    int i502 = bitmapWidth;
                                                    int i512 = (int) (f832 * min52);
                                                    i8 = i6;
                                                    if (this.imagesArrLocals.isEmpty()) {
                                                    }
                                                    z5 = false;
                                                    if (z5) {
                                                    }
                                                    i13 = this.currentEditMode;
                                                    if (i13 == 3) {
                                                    }
                                                    if (z6) {
                                                    }
                                                    f28 = f11;
                                                    f29 = f25;
                                                    recordingCanvas.save();
                                                    if (f28 > 0.0f) {
                                                    }
                                                    float f92222 = (-i14) / 2;
                                                    int i58222 = i9;
                                                    float f93222 = (-i58222) / 2;
                                                    recordingCanvas.translate(f92222, f93222);
                                                    if (!z4) {
                                                    }
                                                    recordingCanvas.scale(min52, min52);
                                                    if (z4) {
                                                    }
                                                    if (z7) {
                                                    }
                                                    if (this.paintingOverlay.getVisibility() == 0) {
                                                    }
                                                    recordingCanvas.restore();
                                                    if (z6) {
                                                    }
                                                    recordingCanvas.restore();
                                                    i15 = 0;
                                                    while (true) {
                                                        gradientDrawableArr = this.pressedDrawable;
                                                        if (i15 >= gradientDrawableArr.length) {
                                                        }
                                                        i15++;
                                                    }
                                                }
                                            }
                                            f17 = f10;
                                            f18 = f9;
                                            recordingCanvas.save();
                                            f19 = i6;
                                            float f762 = f19 / 2.0f;
                                            i7 = i5;
                                            float f772 = i7;
                                            float f782 = f772 / 2.0f;
                                            recordingCanvas.translate(f762 + getAdditionX(this.currentEditMode), f782 + getAdditionY(this.currentEditMode));
                                            this.centerImageTransform.preTranslate(f762 + getAdditionX(this.currentEditMode), f782 + getAdditionY(this.currentEditMode));
                                            recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                            this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                            float f792 = f64 - f15;
                                            recordingCanvas.scale(f792, f792);
                                            this.centerImageTransform.preScale(f792, f792);
                                            recordingCanvas.rotate(f18);
                                            this.centerImageTransform.preRotate(f18);
                                            if (this.currentEditMode == 3) {
                                            }
                                            f20 = f19;
                                            if (this.pipAnimationInProgress) {
                                            }
                                            f21 = f18;
                                            f22 = f17;
                                            i5 = i7;
                                            f23 = f13;
                                            f24 = f16;
                                            z3 = false;
                                            if (!z2) {
                                            }
                                            bitmapWidth = this.centerImage.getBitmapWidth();
                                            bitmapHeight = this.centerImage.getBitmapHeight();
                                            float f8122 = bitmapWidth;
                                            float f8222 = f20 / f8122;
                                            float f8322 = bitmapHeight;
                                            float f8422 = f772 / f8322;
                                            float min522 = Math.min(f8222, f8422);
                                            int i4822 = bitmapHeight;
                                            int i4922 = (int) (f8122 * min522);
                                            int i5022 = bitmapWidth;
                                            int i5122 = (int) (f8322 * min522);
                                            i8 = i6;
                                            if (this.imagesArrLocals.isEmpty()) {
                                            }
                                            z5 = false;
                                            if (z5) {
                                            }
                                            i13 = this.currentEditMode;
                                            if (i13 == 3) {
                                            }
                                            if (z6) {
                                            }
                                            f28 = f11;
                                            f29 = f25;
                                            recordingCanvas.save();
                                            if (f28 > 0.0f) {
                                            }
                                            float f922222 = (-i14) / 2;
                                            int i582222 = i9;
                                            float f932222 = (-i582222) / 2;
                                            recordingCanvas.translate(f922222, f932222);
                                            if (!z4) {
                                            }
                                            recordingCanvas.scale(min522, min522);
                                            if (z4) {
                                            }
                                            if (z7) {
                                            }
                                            if (this.paintingOverlay.getVisibility() == 0) {
                                            }
                                            recordingCanvas.restore();
                                            if (z6) {
                                            }
                                            recordingCanvas.restore();
                                            i15 = 0;
                                            while (true) {
                                                gradientDrawableArr = this.pressedDrawable;
                                                if (i15 >= gradientDrawableArr.length) {
                                                }
                                                i15++;
                                            }
                                        } else {
                                            i8 = i6;
                                            f29 = f16;
                                            f23 = f13;
                                            f26 = f64;
                                            f22 = f10;
                                        }
                                        drawProgress(recordingCanvas, f23, f26, f12, f29);
                                        imageReceiver = this.sideImage;
                                        if (imageReceiver == this.leftImage) {
                                            if (imageReceiver.hasBitmapImage()) {
                                                recordingCanvas.save();
                                                recordingCanvas.translate(i8 / 2, i5 / 2);
                                                int i59 = i8;
                                                float f95 = i59;
                                                float f96 = f22;
                                                recordingCanvas.translate(((-(((this.scale + 1.0f) * f95) + AndroidUtilities.dp(30.0f))) / 2.0f) + f96, 0.0f);
                                                int bitmapWidth4 = this.sideImage.getBitmapWidth();
                                                int bitmapHeight4 = this.sideImage.getBitmapHeight();
                                                if (this.leftImageIsVideo || this.leftCropState == null || !this.leftCropTransform.hasViewTransform()) {
                                                    i25 = i59;
                                                    f41 = f12;
                                                    f42 = f96;
                                                    i26 = i5;
                                                    c = 2;
                                                    i27 = bitmapHeight4;
                                                    i28 = bitmapWidth4;
                                                } else {
                                                    i25 = i59;
                                                    i27 = bitmapHeight4;
                                                    f41 = f12;
                                                    f42 = f96;
                                                    i26 = i5;
                                                    i28 = bitmapWidth4;
                                                    c = 2;
                                                    applyCrop(recordingCanvas, i59, i5, bitmapWidth4, bitmapHeight4, f26, this.leftCropTransform, this.leftCropState);
                                                }
                                                float f97 = i28;
                                                float f98 = i27;
                                                float min6 = Math.min(f95 / f97, i26 / f98);
                                                int i60 = (int) (f97 * min6);
                                                int i61 = (int) (f98 * min6);
                                                if (this.imagesArrLocals.isEmpty()) {
                                                    z9 = false;
                                                } else if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                    z9 = this.leftCropTransform.isMirrored();
                                                } else {
                                                    MediaController.CropState cropState4 = this.leftCropState;
                                                    z9 = cropState4 != null && cropState4.mirrored;
                                                }
                                                if (z9) {
                                                    f44 = 1.0f;
                                                    recordingCanvas.scale(-1.0f, 1.0f);
                                                } else {
                                                    f44 = 1.0f;
                                                }
                                                this.sideImage.setAlpha(f44);
                                                int i62 = (-i60) / 2;
                                                int i63 = (-i61) / 2;
                                                this.sideImage.setImageCoords(i62, i63, i60, i61);
                                                this.sideImage.draw(recordingCanvas);
                                                PaintingOverlay paintingOverlay2 = this.leftPaintingOverlay;
                                                if (paintingOverlay2 == null || paintingOverlay2.getVisibility() != 0) {
                                                    f43 = 1.0f;
                                                } else {
                                                    recordingCanvas.clipRect(i62, i63, i60 / 2, i61 / 2);
                                                    if (this.leftPaintingOverlay.getMeasuredWidth() != i28 || this.leftPaintingOverlay.getMeasuredHeight() != i27) {
                                                        this.leftPaintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(i28, 1073741824), View.MeasureSpec.makeMeasureSpec(i27, 1073741824));
                                                        this.leftPaintingOverlay.layout(0, 0, i28, i27);
                                                    }
                                                    recordingCanvas.scale(min6, min6);
                                                    recordingCanvas.translate((-i28) / 2, (-i27) / 2);
                                                    f43 = 1.0f;
                                                    this.leftPaintingOverlay.setAlpha(1.0f);
                                                    this.leftPaintingOverlay.draw(recordingCanvas);
                                                }
                                                recordingCanvas.restore();
                                            } else {
                                                f41 = f12;
                                                f42 = f22;
                                                i25 = i8;
                                                f43 = 1.0f;
                                                c = 2;
                                            }
                                            this.groupedPhotosListView.setMoveProgress(f43 - f29);
                                            recordingCanvas.save();
                                            recordingCanvas.translate(f42, f41 / f26);
                                            f40 = f41;
                                            recordingCanvas.translate((-((i25 * (this.scale + f43)) + AndroidUtilities.dp(30.0f))) / 2.0f, (-f40) / f26);
                                            this.photoProgressViews[c].setScale(1.0f);
                                            this.photoProgressViews[c].setAlpha(1.0f);
                                            this.photoProgressViews[c].onDraw(recordingCanvas);
                                            if (this.isActionBarVisible) {
                                                this.fullscreenButton[c].setAlpha(1.0f);
                                            }
                                            recordingCanvas.restore();
                                        } else {
                                            f40 = f12;
                                            if (this.isActionBarVisible) {
                                                this.fullscreenButton[2].setAlpha(0.0f);
                                            }
                                        }
                                        i24 = this.waitingForDraw;
                                        if (i24 != 0) {
                                            int i64 = i24 - 1;
                                            this.waitingForDraw = i64;
                                            if (i64 == 0) {
                                                TextureView textureView6 = this.changedTextureView;
                                                if (textureView6 != null && !this.usedSurfaceView) {
                                                    try {
                                                        this.currentBitmap = textureView6.getBitmap();
                                                        drawable = null;
                                                    } catch (Throwable th) {
                                                        Bitmap bitmap2 = this.currentBitmap;
                                                        if (bitmap2 != null) {
                                                            bitmap2.recycle();
                                                            drawable = null;
                                                            this.currentBitmap = null;
                                                        } else {
                                                            drawable = null;
                                                        }
                                                        FileLog.e(th);
                                                    }
                                                    if (this.currentBitmap != null) {
                                                        this.textureImageView.setVisibility(0);
                                                        this.textureImageView.setImageBitmap(this.currentBitmap);
                                                    } else {
                                                        this.textureImageView.setImageDrawable(drawable);
                                                    }
                                                }
                                                if (this.usedSurfaceView) {
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda77
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            PhotoViewer.this.lambda$onDraw$105();
                                                        }
                                                    });
                                                } else {
                                                    PipVideoOverlay.dismiss(true);
                                                }
                                            } else {
                                                this.containerView.invalidate();
                                            }
                                        }
                                        if (this.padImageForHorizontalInsets) {
                                            recordingCanvas.restore();
                                        }
                                        if (this.aspectRatioFrameLayout != null && this.videoForwardDrawable.isAnimating()) {
                                            int measuredHeight = ((int) (this.aspectRatioFrameLayout.getMeasuredHeight() * (this.scale - 1.0f))) / 2;
                                            int i65 = (int) (f40 / f26);
                                            this.videoForwardDrawable.setBounds(this.aspectRatioFrameLayout.getLeft(), (this.aspectRatioFrameLayout.getTop() - measuredHeight) + i65, this.aspectRatioFrameLayout.getRight(), this.aspectRatioFrameLayout.getBottom() + measuredHeight + i65);
                                            this.videoForwardDrawable.draw(recordingCanvas);
                                        }
                                        if (BLUR_RENDERNODE()) {
                                            this.renderNode.endRecording();
                                            canvas2 = canvas;
                                            canvas2.drawRenderNode(this.renderNode);
                                        } else {
                                            canvas2 = recordingCanvas;
                                        }
                                        drawFancyShadows(canvas2);
                                    }
                                    f13 = f10;
                                    f15 = 0.0f;
                                    f14 = 1.0f;
                                    if (this.videoSizeSet) {
                                    }
                                    z = false;
                                    z2 = false;
                                    this.centerImageTransformLocked = z;
                                    this.centerImageTransform.reset();
                                    maskPaintView = this.maskPaintView;
                                    if (maskPaintView != null) {
                                    }
                                    f16 = f14;
                                    if (this.centerImage.hasBitmapImage()) {
                                    }
                                    stickerMakerView = this.stickerMakerView;
                                    if (stickerMakerView != null) {
                                        z8 = ((MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex)).isCropped;
                                        if (!z8) {
                                        }
                                    }
                                    f17 = f10;
                                    f18 = f9;
                                    recordingCanvas.save();
                                    f19 = i6;
                                    float f7622 = f19 / 2.0f;
                                    i7 = i5;
                                    float f7722 = i7;
                                    float f7822 = f7722 / 2.0f;
                                    recordingCanvas.translate(f7622 + getAdditionX(this.currentEditMode), f7822 + getAdditionY(this.currentEditMode));
                                    this.centerImageTransform.preTranslate(f7622 + getAdditionX(this.currentEditMode), f7822 + getAdditionY(this.currentEditMode));
                                    recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                    this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                                    float f7922 = f64 - f15;
                                    recordingCanvas.scale(f7922, f7922);
                                    this.centerImageTransform.preScale(f7922, f7922);
                                    recordingCanvas.rotate(f18);
                                    this.centerImageTransform.preRotate(f18);
                                    if (this.currentEditMode == 3) {
                                    }
                                    f20 = f19;
                                    if (this.pipAnimationInProgress) {
                                    }
                                    f21 = f18;
                                    f22 = f17;
                                    i5 = i7;
                                    f23 = f13;
                                    f24 = f16;
                                    z3 = false;
                                    if (!z2) {
                                    }
                                    bitmapWidth = this.centerImage.getBitmapWidth();
                                    bitmapHeight = this.centerImage.getBitmapHeight();
                                    float f81222 = bitmapWidth;
                                    float f82222 = f20 / f81222;
                                    float f83222 = bitmapHeight;
                                    float f84222 = f7722 / f83222;
                                    float min5222 = Math.min(f82222, f84222);
                                    int i48222 = bitmapHeight;
                                    int i49222 = (int) (f81222 * min5222);
                                    int i50222 = bitmapWidth;
                                    int i51222 = (int) (f83222 * min5222);
                                    i8 = i6;
                                    if (this.imagesArrLocals.isEmpty()) {
                                    }
                                    z5 = false;
                                    if (z5) {
                                    }
                                    i13 = this.currentEditMode;
                                    if (i13 == 3) {
                                    }
                                    if (z6) {
                                    }
                                    f28 = f11;
                                    f29 = f25;
                                    recordingCanvas.save();
                                    if (f28 > 0.0f) {
                                    }
                                    float f9222222 = (-i14) / 2;
                                    int i5822222 = i9;
                                    float f9322222 = (-i5822222) / 2;
                                    recordingCanvas.translate(f9222222, f9322222);
                                    if (!z4) {
                                    }
                                    recordingCanvas.scale(min5222, min5222);
                                    if (z4) {
                                    }
                                    if (z7) {
                                    }
                                    if (this.paintingOverlay.getVisibility() == 0) {
                                    }
                                    recordingCanvas.restore();
                                    if (z6) {
                                    }
                                    recordingCanvas.restore();
                                    i15 = 0;
                                    while (true) {
                                        gradientDrawableArr = this.pressedDrawable;
                                        if (i15 >= gradientDrawableArr.length) {
                                        }
                                        i15++;
                                    }
                                    drawProgress(recordingCanvas, f23, f26, f12, f29);
                                    imageReceiver = this.sideImage;
                                    if (imageReceiver == this.leftImage) {
                                    }
                                    i24 = this.waitingForDraw;
                                    if (i24 != 0) {
                                    }
                                    if (this.padImageForHorizontalInsets) {
                                    }
                                    if (this.aspectRatioFrameLayout != null) {
                                        int measuredHeight2 = ((int) (this.aspectRatioFrameLayout.getMeasuredHeight() * (this.scale - 1.0f))) / 2;
                                        int i652 = (int) (f40 / f26);
                                        this.videoForwardDrawable.setBounds(this.aspectRatioFrameLayout.getLeft(), (this.aspectRatioFrameLayout.getTop() - measuredHeight2) + i652, this.aspectRatioFrameLayout.getRight(), this.aspectRatioFrameLayout.getBottom() + measuredHeight2 + i652);
                                        this.videoForwardDrawable.draw(recordingCanvas);
                                    }
                                    if (BLUR_RENDERNODE()) {
                                    }
                                    drawFancyShadows(canvas2);
                                }
                            }
                            f13 = f10;
                            f15 = 0.0f;
                            f14 = 1.0f;
                            if (this.videoSizeSet) {
                            }
                            z = false;
                            z2 = false;
                            this.centerImageTransformLocked = z;
                            this.centerImageTransform.reset();
                            maskPaintView = this.maskPaintView;
                            if (maskPaintView != null) {
                            }
                            f16 = f14;
                            if (this.centerImage.hasBitmapImage()) {
                            }
                            stickerMakerView = this.stickerMakerView;
                            if (stickerMakerView != null) {
                            }
                            f17 = f10;
                            f18 = f9;
                            recordingCanvas.save();
                            f19 = i6;
                            float f76222 = f19 / 2.0f;
                            i7 = i5;
                            float f77222 = i7;
                            float f78222 = f77222 / 2.0f;
                            recordingCanvas.translate(f76222 + getAdditionX(this.currentEditMode), f78222 + getAdditionY(this.currentEditMode));
                            this.centerImageTransform.preTranslate(f76222 + getAdditionX(this.currentEditMode), f78222 + getAdditionY(this.currentEditMode));
                            recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                            this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                            float f79222 = f64 - f15;
                            recordingCanvas.scale(f79222, f79222);
                            this.centerImageTransform.preScale(f79222, f79222);
                            recordingCanvas.rotate(f18);
                            this.centerImageTransform.preRotate(f18);
                            if (this.currentEditMode == 3) {
                            }
                            f20 = f19;
                            if (this.pipAnimationInProgress) {
                            }
                            f21 = f18;
                            f22 = f17;
                            i5 = i7;
                            f23 = f13;
                            f24 = f16;
                            z3 = false;
                            if (!z2) {
                            }
                            bitmapWidth = this.centerImage.getBitmapWidth();
                            bitmapHeight = this.centerImage.getBitmapHeight();
                            float f812222 = bitmapWidth;
                            float f822222 = f20 / f812222;
                            float f832222 = bitmapHeight;
                            float f842222 = f77222 / f832222;
                            float min52222 = Math.min(f822222, f842222);
                            int i482222 = bitmapHeight;
                            int i492222 = (int) (f812222 * min52222);
                            int i502222 = bitmapWidth;
                            int i512222 = (int) (f832222 * min52222);
                            i8 = i6;
                            if (this.imagesArrLocals.isEmpty()) {
                            }
                            z5 = false;
                            if (z5) {
                            }
                            i13 = this.currentEditMode;
                            if (i13 == 3) {
                            }
                            if (z6) {
                            }
                            f28 = f11;
                            f29 = f25;
                            recordingCanvas.save();
                            if (f28 > 0.0f) {
                            }
                            float f92222222 = (-i14) / 2;
                            int i58222222 = i9;
                            float f93222222 = (-i58222222) / 2;
                            recordingCanvas.translate(f92222222, f93222222);
                            if (!z4) {
                            }
                            recordingCanvas.scale(min52222, min52222);
                            if (z4) {
                            }
                            if (z7) {
                            }
                            if (this.paintingOverlay.getVisibility() == 0) {
                            }
                            recordingCanvas.restore();
                            if (z6) {
                            }
                            recordingCanvas.restore();
                            i15 = 0;
                            while (true) {
                                gradientDrawableArr = this.pressedDrawable;
                                if (i15 >= gradientDrawableArr.length) {
                                }
                                i15++;
                            }
                            drawProgress(recordingCanvas, f23, f26, f12, f29);
                            imageReceiver = this.sideImage;
                            if (imageReceiver == this.leftImage) {
                            }
                            i24 = this.waitingForDraw;
                            if (i24 != 0) {
                            }
                            if (this.padImageForHorizontalInsets) {
                            }
                            if (this.aspectRatioFrameLayout != null) {
                            }
                            if (BLUR_RENDERNODE()) {
                            }
                            drawFancyShadows(canvas2);
                        }
                    }
                    if (!this.zoomAnimation) {
                    }
                    f13 = f10;
                    f15 = 0.0f;
                    f14 = 1.0f;
                    if (this.videoSizeSet) {
                    }
                    z = false;
                    z2 = false;
                    this.centerImageTransformLocked = z;
                    this.centerImageTransform.reset();
                    maskPaintView = this.maskPaintView;
                    if (maskPaintView != null) {
                    }
                    f16 = f14;
                    if (this.centerImage.hasBitmapImage()) {
                    }
                    stickerMakerView = this.stickerMakerView;
                    if (stickerMakerView != null) {
                    }
                    f17 = f10;
                    f18 = f9;
                    recordingCanvas.save();
                    f19 = i6;
                    float f762222 = f19 / 2.0f;
                    i7 = i5;
                    float f772222 = i7;
                    float f782222 = f772222 / 2.0f;
                    recordingCanvas.translate(f762222 + getAdditionX(this.currentEditMode), f782222 + getAdditionY(this.currentEditMode));
                    this.centerImageTransform.preTranslate(f762222 + getAdditionX(this.currentEditMode), f782222 + getAdditionY(this.currentEditMode));
                    recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                    this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
                    float f792222 = f64 - f15;
                    recordingCanvas.scale(f792222, f792222);
                    this.centerImageTransform.preScale(f792222, f792222);
                    recordingCanvas.rotate(f18);
                    this.centerImageTransform.preRotate(f18);
                    if (this.currentEditMode == 3) {
                    }
                    f20 = f19;
                    if (this.pipAnimationInProgress) {
                    }
                    f21 = f18;
                    f22 = f17;
                    i5 = i7;
                    f23 = f13;
                    f24 = f16;
                    z3 = false;
                    if (!z2) {
                    }
                    bitmapWidth = this.centerImage.getBitmapWidth();
                    bitmapHeight = this.centerImage.getBitmapHeight();
                    float f8122222 = bitmapWidth;
                    float f8222222 = f20 / f8122222;
                    float f8322222 = bitmapHeight;
                    float f8422222 = f772222 / f8322222;
                    float min522222 = Math.min(f8222222, f8422222);
                    int i4822222 = bitmapHeight;
                    int i4922222 = (int) (f8122222 * min522222);
                    int i5022222 = bitmapWidth;
                    int i5122222 = (int) (f8322222 * min522222);
                    i8 = i6;
                    if (this.imagesArrLocals.isEmpty()) {
                    }
                    z5 = false;
                    if (z5) {
                    }
                    i13 = this.currentEditMode;
                    if (i13 == 3) {
                    }
                    if (z6) {
                    }
                    f28 = f11;
                    f29 = f25;
                    recordingCanvas.save();
                    if (f28 > 0.0f) {
                    }
                    float f922222222 = (-i14) / 2;
                    int i582222222 = i9;
                    float f932222222 = (-i582222222) / 2;
                    recordingCanvas.translate(f922222222, f932222222);
                    if (!z4) {
                    }
                    recordingCanvas.scale(min522222, min522222);
                    if (z4) {
                    }
                    if (z7) {
                    }
                    if (this.paintingOverlay.getVisibility() == 0) {
                    }
                    recordingCanvas.restore();
                    if (z6) {
                    }
                    recordingCanvas.restore();
                    i15 = 0;
                    while (true) {
                        gradientDrawableArr = this.pressedDrawable;
                        if (i15 >= gradientDrawableArr.length) {
                        }
                        i15++;
                    }
                    drawProgress(recordingCanvas, f23, f26, f12, f29);
                    imageReceiver = this.sideImage;
                    if (imageReceiver == this.leftImage) {
                    }
                    i24 = this.waitingForDraw;
                    if (i24 != 0) {
                    }
                    if (this.padImageForHorizontalInsets) {
                    }
                    if (this.aspectRatioFrameLayout != null) {
                    }
                    if (BLUR_RENDERNODE()) {
                    }
                    drawFancyShadows(canvas2);
                }
                f8 = f4;
            }
            f6 = f5;
            f7 = f3;
            float f632 = f2;
            float f642 = f;
            float f652 = f4 + this.translateY;
            if (this.currentEditMode == 3) {
            }
            float f662 = f652;
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
            }
            if (this.isActionBarVisible) {
            }
            int containerViewWidth2 = getContainerViewWidth();
            int containerViewHeight22 = getContainerViewHeight();
            i2 = this.animationInProgress;
            if (i2 != 2) {
            }
            if (i2 == 4) {
            }
            this.sideImage = null;
            if (this.currentEditMode != 0) {
            }
            i3 = 0;
            while (i3 < i4) {
            }
            if (this.sideImage != this.rightImage) {
            }
            if (!this.zoomAnimation) {
            }
            f13 = f10;
            f15 = 0.0f;
            f14 = 1.0f;
            if (this.videoSizeSet) {
            }
            z = false;
            z2 = false;
            this.centerImageTransformLocked = z;
            this.centerImageTransform.reset();
            maskPaintView = this.maskPaintView;
            if (maskPaintView != null) {
            }
            f16 = f14;
            if (this.centerImage.hasBitmapImage()) {
            }
            stickerMakerView = this.stickerMakerView;
            if (stickerMakerView != null) {
            }
            f17 = f10;
            f18 = f9;
            recordingCanvas.save();
            f19 = i6;
            float f7622222 = f19 / 2.0f;
            i7 = i5;
            float f7722222 = i7;
            float f7822222 = f7722222 / 2.0f;
            recordingCanvas.translate(f7622222 + getAdditionX(this.currentEditMode), f7822222 + getAdditionY(this.currentEditMode));
            this.centerImageTransform.preTranslate(f7622222 + getAdditionX(this.currentEditMode), f7822222 + getAdditionY(this.currentEditMode));
            recordingCanvas.translate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
            this.centerImageTransform.preTranslate(f13, f12 + (this.currentEditMode == 3 ? this.currentPanTranslationY : 0.0f));
            float f7922222 = f642 - f15;
            recordingCanvas.scale(f7922222, f7922222);
            this.centerImageTransform.preScale(f7922222, f7922222);
            recordingCanvas.rotate(f18);
            this.centerImageTransform.preRotate(f18);
            if (this.currentEditMode == 3) {
            }
            f20 = f19;
            if (this.pipAnimationInProgress) {
            }
            f21 = f18;
            f22 = f17;
            i5 = i7;
            f23 = f13;
            f24 = f16;
            z3 = false;
            if (!z2) {
            }
            bitmapWidth = this.centerImage.getBitmapWidth();
            bitmapHeight = this.centerImage.getBitmapHeight();
            float f81222222 = bitmapWidth;
            float f82222222 = f20 / f81222222;
            float f83222222 = bitmapHeight;
            float f84222222 = f7722222 / f83222222;
            float min5222222 = Math.min(f82222222, f84222222);
            int i48222222 = bitmapHeight;
            int i49222222 = (int) (f81222222 * min5222222);
            int i50222222 = bitmapWidth;
            int i51222222 = (int) (f83222222 * min5222222);
            i8 = i6;
            if (this.imagesArrLocals.isEmpty()) {
            }
            z5 = false;
            if (z5) {
            }
            i13 = this.currentEditMode;
            if (i13 == 3) {
            }
            if (z6) {
            }
            f28 = f11;
            f29 = f25;
            recordingCanvas.save();
            if (f28 > 0.0f) {
            }
            float f9222222222 = (-i14) / 2;
            int i5822222222 = i9;
            float f9322222222 = (-i5822222222) / 2;
            recordingCanvas.translate(f9222222222, f9322222222);
            if (!z4) {
            }
            recordingCanvas.scale(min5222222, min5222222);
            if (z4) {
            }
            if (z7) {
            }
            if (this.paintingOverlay.getVisibility() == 0) {
            }
            recordingCanvas.restore();
            if (z6) {
            }
            recordingCanvas.restore();
            i15 = 0;
            while (true) {
                gradientDrawableArr = this.pressedDrawable;
                if (i15 >= gradientDrawableArr.length) {
                }
                i15++;
            }
            drawProgress(recordingCanvas, f23, f26, f12, f29);
            imageReceiver = this.sideImage;
            if (imageReceiver == this.leftImage) {
            }
            i24 = this.waitingForDraw;
            if (i24 != 0) {
            }
            if (this.padImageForHorizontalInsets) {
            }
            if (this.aspectRatioFrameLayout != null) {
            }
            if (BLUR_RENDERNODE()) {
            }
            drawFancyShadows(canvas2);
        }
    }

    public /* synthetic */ void lambda$onDraw$103() {
        switchToNextIndex(1, false);
    }

    public /* synthetic */ void lambda$onDraw$104() {
        switchToNextIndex(-1, false);
    }

    public /* synthetic */ void lambda$onDraw$105() {
        checkChangedTextureView(false);
        PipVideoOverlay.dismiss(true, true);
    }

    private void drawFancyShadows(Canvas canvas) {
        float f;
        if (this.fancyShadows) {
            if (SharedConfig.photoViewerBlur) {
                AnimatedFloat animatedFloat = this.blurAlpha;
                int i = this.animationInProgress;
                f = animatedFloat.set(i == 0 || i == 2 || i == 3);
            } else {
                f = 1.0f;
            }
            if (f <= 0.0f) {
                return;
            }
            int currentActionBarHeight = ((int) (AndroidUtilities.statusBarHeight * 1.5f)) + ActionBar.getCurrentActionBarHeight();
            int height = AndroidUtilities.navigationBarHeight + this.pickerView.getHeight() + (this.captionEdit.getVisibility() == 0 ? (this.captionEdit.getEditTextHeightClosedKeyboard() / 2) + AndroidUtilities.dp(20.0f) : 0);
            if (this.clipFancyShadows == null) {
                this.clipFancyShadows = new Path();
                Paint paint = new Paint(1);
                this.topFancyShadowPaint = paint;
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
                Paint paint2 = new Paint(1);
                this.bottomFancyShadowPaint = paint2;
                paint2.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
                this.topFancyShadow = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{-16777216, 0}, new float[]{0.0f, 1.0f}, Shader.TileMode.CLAMP);
                this.bottomFancyShadow = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{0, -16777216}, new float[]{0.0f, 1.0f}, Shader.TileMode.CLAMP);
                this.topFancyShadowMatrix = new Matrix();
                this.bottomFancyShadowMatrix = new Matrix();
                this.topFancyShadowPaint.setShader(this.topFancyShadow);
                this.bottomFancyShadowPaint.setShader(this.bottomFancyShadow);
            }
            canvas.saveLayerAlpha(0.0f, 0.0f, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, (int) (f * (this.backgroundDrawable.getAlpha() - 127) * 2.007874f), 31);
            this.clipFancyShadows.rewind();
            float f2 = currentActionBarHeight;
            this.clipFancyShadows.addRect(0.0f, 0.0f, this.containerView.getWidth(), f2, Path.Direction.CW);
            this.clipFancyShadows.addRect(0.0f, (this.containerView.getHeight() + AndroidUtilities.navigationBarHeight) - height, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, Path.Direction.CW);
            canvas.clipPath(this.clipFancyShadows);
            canvas.drawColor(-16777216);
            drawCaptionBlur(canvas, this.shadowBlurer, 0, 0, true, true, false);
            canvas.save();
            this.topFancyShadowMatrix.reset();
            this.topFancyShadowMatrix.postScale(1.0f, f2 / 16.0f);
            this.topFancyShadow.setLocalMatrix(this.topFancyShadowMatrix);
            this.topFancyShadowPaint.setAlpha(208);
            canvas.drawRect(0.0f, 0.0f, this.containerView.getWidth(), f2, this.topFancyShadowPaint);
            this.bottomFancyShadowMatrix.reset();
            this.bottomFancyShadowMatrix.postScale(1.0f, height / 16.0f);
            this.bottomFancyShadowMatrix.postTranslate(0.0f, (this.containerView.getHeight() - height) + AndroidUtilities.navigationBarHeight);
            this.bottomFancyShadow.setLocalMatrix(this.bottomFancyShadowMatrix);
            this.bottomFancyShadowPaint.setAlpha(187);
            canvas.drawRect(0.0f, (this.containerView.getHeight() + AndroidUtilities.navigationBarHeight) - height, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, this.bottomFancyShadowPaint);
            canvas.restore();
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:62:0x002b  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0035  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x003b  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0080  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0082  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x00ab  */
    /* JADX WARN: Removed duplicated region for block: B:87:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCenterImageInternal(Canvas canvas, float f, float f2) {
        boolean z;
        boolean z2;
        PhotoViewerWebView photoViewerWebView;
        if (!this.imagesArrLocals.isEmpty()) {
            if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                z = this.cropTransform.isMirrored();
            } else {
                MediaController.CropState cropState = this.editState.cropState;
                if (cropState != null && cropState.mirrored) {
                    z = true;
                }
            }
            if (z) {
                z2 = false;
            } else {
                canvas.save();
                canvas.scale(-1.0f, 1.0f);
                z2 = true;
            }
            if (f > 0.0f) {
                if (!z2) {
                    canvas.save();
                    z2 = true;
                }
                canvas.scale(1.0f - (2.0f * f), 1.0f);
                canvas.skew(0.0f, 4.0f * f * (1.0f - f) * 0.25f);
            }
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null || !photoViewerWebView.isLoaded()) {
                if (!this.centerImageTransformLocked) {
                    this.centerImageTransform.preTranslate(this.centerImage.getImageX(), this.centerImage.getImageY());
                }
                this.stickerMakerView.drawOutline(canvas, false, this.containerView, this.switchingToMode == -1);
                this.centerImage.setAlpha(f2);
                this.centerImage.draw(canvas);
                this.stickerMakerView.drawOutline(canvas, true, this.containerView, this.switchingToMode != -1);
                this.stickerMakerView.drawSegmentBorderPath(canvas, this.centerImage, this.centerImageTransform, this.containerView);
                this.centerImageTransformLocked = true;
            }
            if (z2) {
                return;
            }
            canvas.restore();
            return;
        }
        z = false;
        if (z) {
        }
        if (f > 0.0f) {
        }
        photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
        }
        if (!this.centerImageTransformLocked) {
        }
        this.stickerMakerView.drawOutline(canvas, false, this.containerView, this.switchingToMode == -1);
        this.centerImage.setAlpha(f2);
        this.centerImage.draw(canvas);
        this.stickerMakerView.drawOutline(canvas, true, this.containerView, this.switchingToMode != -1);
        this.stickerMakerView.drawSegmentBorderPath(canvas, this.centerImage, this.centerImageTransform, this.containerView);
        this.centerImageTransformLocked = true;
        if (z2) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x0067  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x004b  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x004e  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0059  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x005e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawProgress(Canvas canvas, float f, float f2, float f3, float f4) {
        float f5;
        VideoTimelinePlayView videoTimelinePlayView;
        VideoPlayer videoPlayer;
        boolean z = true;
        boolean z2 = !this.isCurrentVideo || (((videoTimelinePlayView = this.videoTimelineView) == null || !videoTimelinePlayView.isDragging()) && ((this.sendPhotoType != 1 || this.manuallyPaused) && ((videoPlayer = this.videoPlayer) == null || !videoPlayer.isPlaying())));
        if (this.miniProgressView.getVisibility() != 0 && this.miniProgressAnimator == null) {
            z = false;
        }
        if (z2) {
            if (!this.zoomAnimation) {
                float f6 = this.maxX;
                if ((-f) > f6) {
                    f5 = f6 + f;
                    float f7 = f2 == 1.0f ? f3 : 0.0f;
                    float alpha = !z ? (1.0f - this.miniProgressView.getAlpha()) * f4 : f4;
                    if (this.pipAnimationInProgress) {
                        if (this.photoProgressViews[0].backgroundState == 4) {
                            f7 += AndroidUtilities.dpf2(8.0f) * (1.0f - this.actionBar.getAlpha());
                        }
                    } else {
                        alpha *= this.actionBar.getAlpha();
                    }
                    canvas.save();
                    canvas.translate(f5, f7);
                    this.photoProgressViews[0].setScale(1.0f);
                    this.photoProgressViews[0].setAlpha(alpha);
                    this.photoProgressViews[0].onDraw(canvas);
                    if (this.isActionBarVisible && this.allowShowFullscreenButton && this.fullscreenButton[0].getTag() == null) {
                        ImageView[] imageViewArr = this.fullscreenButton;
                        imageViewArr[0].setAlpha(Math.min(imageViewArr[0].getAlpha(), f4));
                    }
                    canvas.restore();
                }
            }
            f5 = 0.0f;
            if (f2 == 1.0f) {
            }
            if (!z) {
            }
            if (this.pipAnimationInProgress) {
            }
            canvas.save();
            canvas.translate(f5, f7);
            this.photoProgressViews[0].setScale(1.0f);
            this.photoProgressViews[0].setAlpha(alpha);
            this.photoProgressViews[0].onDraw(canvas);
            if (this.isActionBarVisible) {
                ImageView[] imageViewArr2 = this.fullscreenButton;
                imageViewArr2[0].setAlpha(Math.min(imageViewArr2[0].getAlpha(), f4));
            }
            canvas.restore();
        }
        if (!z || this.pipAnimationInProgress) {
            return;
        }
        canvas.save();
        canvas.translate(this.miniProgressView.getLeft() + f, this.miniProgressView.getTop() + (f3 / f2));
        this.miniProgressView.draw(canvas);
        canvas.restore();
    }

    /* JADX WARN: Removed duplicated region for block: B:131:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0111  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x011b  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x016f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int[] applyCrop(Canvas canvas, int i, int i2, int i3, int i4, float f, CropTransform cropTransform, MediaController.CropState cropState) {
        float f2;
        int i5;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        float f9;
        float minScale;
        int i6;
        float rotation;
        float f10 = i;
        int i7 = i3;
        float f11 = i7;
        float f12 = f10 / f11;
        float f13 = i2;
        int i8 = i4;
        float f14 = i8;
        float f15 = f13 / f14;
        float min = Math.min(f12, f15);
        int orientation = cropTransform.getOrientation();
        if (orientation != 90 && orientation != 270) {
            i8 = i7;
            i7 = i8;
        }
        if (this.sendPhotoType == 1 || (this.currentEditMode != 3 && this.switchingToMode != 3)) {
            if (this.imageMoveAnimation != null && (i5 = this.switchingToMode) != -1) {
                int i9 = this.currentEditMode;
                if (i9 != 1 && i5 != 1 && ((i9 != 2 && i9 != 3) || i5 != -1)) {
                    if (i5 == 0) {
                        f2 = this.animationValue;
                    } else {
                        f2 = 1.0f - this.animationValue;
                    }
                }
            } else {
                int i10 = this.currentEditMode;
                if (i10 == 2 || i10 == 3) {
                    f2 = 0.0f;
                }
            }
            float cropPw = cropTransform.getCropPw();
            float cropPh = cropTransform.getCropPh();
            float f16 = i8;
            f3 = 1.0f - f2;
            int i11 = (int) ((cropPw + ((1.0f - cropPw) * f3)) * f16);
            f4 = i7;
            int i12 = (int) ((cropPh + ((1.0f - cropPh) * f3)) * f4);
            f5 = i11;
            f6 = f10 / f5;
            f7 = i12;
            if (f6 * f7 > f13) {
                f6 = f13 / f7;
            }
            if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && cropState != null)) {
                float f17 = f5 * f6;
                float f18 = f7 * f6;
                if (f12 * f14 > f13) {
                    f12 = f15;
                }
                float f19 = f17 + ((((f11 * f12) / f) - f17) * f3);
                float f20 = f18 + ((((f14 * f12) / f) - f18) * f3);
                canvas.clipRect((-f19) / 2.0f, (-f20) / 2.0f, f19 / 2.0f, f20 / 2.0f);
            }
            if (this.sendPhotoType != 1 || cropTransform.hasViewTransform()) {
                if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                    float scale = cropTransform.getScale() / (((cropTransform.getTrueCropScale() - 1.0f) * f3) + 1.0f);
                    f8 = f10 / f16;
                    if (f8 * f4 > f13) {
                        f8 = f13 / f4;
                    }
                    float f21 = scale * (f8 / min);
                    if (this.sendPhotoType == 1) {
                        if (this.currentEditMode == 3 || (i6 = this.switchingToMode) == 3) {
                            minScale = ((cropTransform.getMinScale() - 1.0f) * f3) + 1.0f;
                        } else if (i6 == 0) {
                            minScale = cropTransform.getMinScale();
                        }
                        f21 /= minScale;
                    }
                    f9 = f21;
                } else {
                    float f22 = cropState != null ? cropState.cropScale : 1.0f;
                    f9 = f22 * ((f6 / min) / (((f22 - 1.0f) * f3) + 1.0f));
                }
                canvas.translate(cropTransform.getCropAreaX() * f2, cropTransform.getCropAreaY() * f2);
                canvas.scale(f9, f9);
                canvas.translate(cropTransform.getCropPx() * f16 * min * f2, cropTransform.getCropPy() * f4 * min * f2);
                rotation = cropTransform.getRotation() + orientation;
                if (rotation > 180.0f) {
                    rotation -= 360.0f;
                }
                if (this.sendPhotoType != 1 && (this.currentEditMode == 3 || this.switchingToMode == 3)) {
                    canvas.rotate(rotation);
                } else {
                    canvas.rotate(rotation * f2);
                }
            }
            int[] iArr = this.tempInt;
            iArr[0] = i11;
            iArr[1] = i12;
            return iArr;
        }
        f2 = 1.0f;
        float cropPw2 = cropTransform.getCropPw();
        float cropPh2 = cropTransform.getCropPh();
        float f162 = i8;
        f3 = 1.0f - f2;
        int i112 = (int) ((cropPw2 + ((1.0f - cropPw2) * f3)) * f162);
        f4 = i7;
        int i122 = (int) ((cropPh2 + ((1.0f - cropPh2) * f3)) * f4);
        f5 = i112;
        f6 = f10 / f5;
        f7 = i122;
        if (f6 * f7 > f13) {
        }
        if (this.sendPhotoType != 1) {
            float f172 = f5 * f6;
            float f182 = f7 * f6;
            if (f12 * f14 > f13) {
            }
            float f192 = f172 + ((((f11 * f12) / f) - f172) * f3);
            float f202 = f182 + ((((f14 * f12) / f) - f182) * f3);
            canvas.clipRect((-f192) / 2.0f, (-f202) / 2.0f, f192 / 2.0f, f202 / 2.0f);
        }
        if (this.sendPhotoType != 1) {
        }
        if (this.currentEditMode != 1) {
        }
        float scale2 = cropTransform.getScale() / (((cropTransform.getTrueCropScale() - 1.0f) * f3) + 1.0f);
        f8 = f10 / f162;
        if (f8 * f4 > f13) {
        }
        float f212 = scale2 * (f8 / min);
        if (this.sendPhotoType == 1) {
        }
        f9 = f212;
        canvas.translate(cropTransform.getCropAreaX() * f2, cropTransform.getCropAreaY() * f2);
        canvas.scale(f9, f9);
        canvas.translate(cropTransform.getCropPx() * f162 * min * f2, cropTransform.getCropPy() * f4 * min * f2);
        rotation = cropTransform.getRotation() + orientation;
        if (rotation > 180.0f) {
        }
        if (this.sendPhotoType != 1) {
        }
        canvas.rotate(rotation * f2);
        int[] iArr2 = this.tempInt;
        iArr2[0] = i112;
        iArr2[1] = i122;
        return iArr2;
    }

    /* JADX WARN: Code restructure failed: missing block: B:147:0x003e, code lost:
        if (r1.exists() == false) goto L92;
     */
    /* JADX WARN: Code restructure failed: missing block: B:175:0x0157, code lost:
        if (r1.exists() == false) goto L90;
     */
    /* JADX WARN: Code restructure failed: missing block: B:180:0x0197, code lost:
        if (r1.exists() == false) goto L90;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onActionClick(boolean z) {
        int i;
        File file;
        Uri prepareUri;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null && this.currentBotInlineResult == null && ((this.pageBlocksAdapter == null || this.currentFileNames[0] == null) && this.sendPhotoType != -1)) {
            return;
        }
        this.isStreaming = false;
        if (messageObject != null) {
            String str = messageObject.messageOwner.attachPath;
            if (str != null && str.length() != 0) {
                file = new File(this.currentMessageObject.messageOwner.attachPath);
            }
            file = null;
            if (file == null) {
                file = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                if (!file.exists()) {
                    if (SharedConfig.streamMedia && !DialogObject.isEncryptedDialog(this.currentMessageObject.getDialogId()) && this.currentMessageObject.isVideo() && this.currentMessageObject.canStreamVideo()) {
                        try {
                            int fileReference = FileLoader.getInstance(this.currentMessageObject.currentAccount).getFileReference(this.currentMessageObject);
                            FileLoader.getInstance(this.currentAccount).loadFile(this.currentMessageObject.getDocument(), this.currentMessageObject, 1, 0);
                            TLRPC$Document document = this.currentMessageObject.getDocument();
                            StringBuilder sb = new StringBuilder();
                            sb.append("?account=");
                            sb.append(this.currentMessageObject.currentAccount);
                            sb.append("&id=");
                            sb.append(document.id);
                            sb.append("&hash=");
                            sb.append(document.access_hash);
                            sb.append("&dc=");
                            sb.append(document.dc_id);
                            sb.append("&size=");
                            sb.append(document.size);
                            sb.append("&mime=");
                            sb.append(URLEncoder.encode(document.mime_type, "UTF-8"));
                            sb.append("&rid=");
                            sb.append(fileReference);
                            sb.append("&name=");
                            sb.append(URLEncoder.encode(FileLoader.getDocumentFileName(document), "UTF-8"));
                            sb.append("&reference=");
                            byte[] bArr = document.file_reference;
                            if (bArr == null) {
                                bArr = new byte[0];
                            }
                            sb.append(Utilities.bytesToHex(bArr));
                            prepareUri = Uri.parse("tg://" + this.currentMessageObject.getFileName() + sb.toString());
                            try {
                                this.isStreaming = true;
                                checkProgress(0, false, false);
                            } catch (Exception unused) {
                            }
                        } catch (Exception unused2) {
                            prepareUri = null;
                        }
                        file = null;
                    }
                    prepareUri = null;
                    file = null;
                }
            }
            prepareUri = null;
        } else {
            TLRPC$BotInlineResult tLRPC$BotInlineResult = this.currentBotInlineResult;
            if (tLRPC$BotInlineResult != null) {
                if (tLRPC$BotInlineResult.document != null) {
                    file = FileLoader.getInstance(this.currentAccount).getPathToAttach(this.currentBotInlineResult.document);
                } else {
                    if (tLRPC$BotInlineResult.content instanceof TLRPC$TL_webDocument) {
                        file = new File(FileLoader.getDirectory(4), Utilities.MD5(this.currentBotInlineResult.content.url) + "." + ImageLoader.getHttpUrlExtension(this.currentBotInlineResult.content.url, "mp4"));
                    }
                    prepareUri = null;
                    file = null;
                }
            } else {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    TLObject media = pageBlocksAdapter.getMedia(this.currentIndex);
                    if (!(media instanceof TLRPC$Document)) {
                        return;
                    }
                    file = this.pageBlocksAdapter.getFile(this.currentIndex);
                    if (file != null && !file.exists()) {
                        prepareUri = FileStreamLoadOperation.prepareUri(this.currentAccount, (TLRPC$Document) media, this.pageBlocksAdapter.getParentObject());
                        this.isStreaming = true;
                    }
                } else {
                    if (this.sendPhotoType == -1 && !this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                        Object obj = this.imagesArrLocals.get(this.currentIndex);
                        if (obj instanceof MediaController.PhotoEntry) {
                            file = new File(((MediaController.PhotoEntry) obj).path);
                        }
                    }
                    prepareUri = null;
                    file = null;
                }
                prepareUri = null;
            }
        }
        if (file != null && prepareUri == null) {
            prepareUri = Uri.fromFile(file);
        }
        if (prepareUri != null) {
            if (this.sharedMediaType == 1 && !this.currentMessageObject.canPreviewDocument()) {
                AndroidUtilities.openDocument(this.currentMessageObject, this.parentActivity, null);
                return;
            }
            preparePlayer(prepareUri, true, false);
            this.videoSizeSet = true;
        } else if (z) {
            if (this.currentMessageObject != null) {
                if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.currentMessageObject.getDocument(), this.currentMessageObject, 1, 0);
                } else {
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
                }
            } else {
                TLRPC$BotInlineResult tLRPC$BotInlineResult2 = this.currentBotInlineResult;
                if (tLRPC$BotInlineResult2 != null) {
                    if (tLRPC$BotInlineResult2.document != null) {
                        if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                            FileLoader.getInstance(this.currentAccount).loadFile(this.currentBotInlineResult.document, this.currentMessageObject, 1, 0);
                        } else {
                            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentBotInlineResult.document);
                        }
                    } else if (tLRPC$BotInlineResult2.content instanceof TLRPC$TL_webDocument) {
                        if (!ImageLoader.getInstance().isLoadingHttpFile(this.currentBotInlineResult.content.url)) {
                            ImageLoader.getInstance().loadHttpFile(this.currentBotInlineResult.content.url, "mp4", this.currentAccount);
                        } else {
                            ImageLoader.getInstance().cancelLoadHttpFile(this.currentBotInlineResult.content.url);
                        }
                    }
                } else if (this.pageBlocksAdapter != null) {
                    if (!FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                        FileLoader.getInstance(this.currentAccount).loadFile((TLRPC$Document) this.pageBlocksAdapter.getMedia(this.currentIndex), this.pageBlocksAdapter.getParentObject(), 1, 1);
                    } else {
                        FileLoader.getInstance(this.currentAccount).cancelLoadFile((TLRPC$Document) this.pageBlocksAdapter.getMedia(this.currentIndex));
                    }
                }
            }
            Drawable staticThumb = this.centerImage.getStaticThumb();
            if (staticThumb instanceof OtherDocumentPlaceholderDrawable) {
                ((OtherDocumentPlaceholderDrawable) staticThumb).checkFileExist();
            }
        }
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onDown(MotionEvent motionEvent) {
        if (!this.doubleTap && this.checkImageView.getVisibility() != 0) {
            boolean[] zArr = this.drawPressedDrawable;
            if (!zArr[0] && !zArr[1]) {
                float x = motionEvent.getX();
                int min = Math.min(135, this.containerView.getMeasuredWidth() / 8);
                if (x < min) {
                    if (this.leftImage.hasImageSet()) {
                        this.drawPressedDrawable[0] = true;
                        this.containerView.invalidate();
                    }
                } else if (x > this.containerView.getMeasuredWidth() - min && this.rightImage.hasImageSet()) {
                    this.drawPressedDrawable[1] = true;
                    this.containerView.invalidate();
                }
            }
        }
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    public boolean canDoubleTap(MotionEvent motionEvent) {
        MessageObject messageObject;
        PhotoViewerWebView photoViewerWebView;
        if (this.checkImageView.getVisibility() != 0) {
            boolean[] zArr = this.drawPressedDrawable;
            if (zArr[0] || zArr[1]) {
                return true;
            }
            float x = motionEvent.getX();
            int min = Math.min(135, this.containerView.getMeasuredWidth() / 8);
            if ((x < min || x > this.containerView.getMeasuredWidth() - min) && (messageObject = this.currentMessageObject) != null) {
                return (messageObject.isVideo() || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) && SystemClock.elapsedRealtime() - this.lastPhotoSetTime >= 500 && canDoubleTapSeekVideo(motionEvent);
            }
            return true;
        }
        return true;
    }

    private void hidePressedDrawables() {
        boolean[] zArr = this.drawPressedDrawable;
        zArr[1] = false;
        zArr[0] = false;
        this.containerView.invalidate();
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onUp(MotionEvent motionEvent) {
        hidePressedDrawables();
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onSingleTapUp(MotionEvent motionEvent) {
        if (!this.canZoom && !this.doubleTapEnabled) {
            return onSingleTapConfirmed(motionEvent);
        }
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        if (frameLayoutDrawer != null && frameLayoutDrawer.getTag() != null && this.photoProgressViews[0] != null) {
            float x = motionEvent.getX();
            float y = motionEvent.getY();
            if ((x < ((float) (getContainerViewWidth() - AndroidUtilities.dp(100.0f))) / 2.0f || x > ((float) (getContainerViewWidth() + AndroidUtilities.dp(100.0f))) / 2.0f || y < ((float) (getContainerViewHeight() - AndroidUtilities.dp(100.0f))) / 2.0f || y > ((float) (getContainerViewHeight() + AndroidUtilities.dp(100.0f))) / 2.0f) ? false : onSingleTapConfirmed(motionEvent)) {
                this.discardTap = true;
                return true;
            }
        }
        return false;
    }

    public void onLongPress() {
        boolean z;
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null || !this.videoPlayerControlVisible || this.scale > 1.1f) {
            return;
        }
        long currentPosition = videoPlayer.getCurrentPosition();
        long duration = this.videoPlayer.getDuration();
        if (currentPosition == -9223372036854775807L || duration < 15000) {
            return;
        }
        float f = this.longPressX;
        int containerViewWidth = getContainerViewWidth() / 3;
        if (f >= containerViewWidth * 2) {
            z = true;
        } else if (f >= containerViewWidth) {
            return;
        } else {
            z = false;
        }
        this.videoPlayerRewinder.startRewind(this.videoPlayer, z, this.currentVideoSpeed);
    }

    public VideoPlayerRewinder getVideoPlayerRewinder() {
        return this.videoPlayerRewinder;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
        if (this.scale == 1.0f || this.sendPhotoType == 11) {
            return false;
        }
        this.scroller.abortAnimation();
        this.scroller.fling(Math.round(this.translationX), Math.round(this.translationY), Math.round(f), Math.round(f2), (int) this.minX, (int) this.maxX, (int) this.minY, (int) this.maxY);
        this.containerView.postInvalidate();
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
        PhotoViewerWebView photoViewerWebView;
        MessageObject messageObject;
        if (this.discardTap) {
            return false;
        }
        float x = motionEvent.getX();
        float y = motionEvent.getY();
        if (this.checkImageView.getVisibility() != 0 && SharedConfig.nextMediaTap && this.sendPhotoType != 11 && y > ActionBar.getCurrentActionBarHeight() + AndroidUtilities.statusBarHeight + AndroidUtilities.dp(40.0f)) {
            int min = Math.min(135, this.containerView.getMeasuredWidth() / 8);
            if (x < min) {
                if (this.leftImage.hasImageSet()) {
                    switchToNextIndex(-1, true);
                    return true;
                }
            } else if (x > this.containerView.getMeasuredWidth() - min && this.rightImage.hasImageSet()) {
                switchToNextIndex(1, true);
                return true;
            }
        }
        PhotoViewerWebView photoViewerWebView2 = this.photoViewerWebView;
        if (photoViewerWebView2 != null && photoViewerWebView2.isControllable() && this.isActionBarVisible) {
            WebView webView = this.photoViewerWebView.getWebView();
            if (x >= webView.getX() && x <= webView.getX() + webView.getWidth() && y >= webView.getY() && y <= webView.getY() + webView.getHeight()) {
                MotionEvent obtain = MotionEvent.obtain(motionEvent);
                obtain.setAction(0);
                obtain.offsetLocation(-webView.getX(), -webView.getY());
                webView.dispatchTouchEvent(obtain);
                obtain.setAction(1);
                webView.dispatchTouchEvent(obtain);
                obtain.recycle();
                scheduleActionBarHide();
                return true;
            }
        }
        if (this.containerView.getTag() != null) {
            AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            boolean z = (aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == 0) || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable());
            if (this.sharedMediaType == 1 && (messageObject = this.currentMessageObject) != null) {
                if (!messageObject.canPreviewDocument()) {
                    float containerViewHeight = (getContainerViewHeight() - AndroidUtilities.dp(360.0f)) / 2.0f;
                    if (y >= containerViewHeight && y <= containerViewHeight + AndroidUtilities.dp(360.0f)) {
                        onActionClick(true);
                        return true;
                    }
                }
            } else {
                PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
                if (photoProgressViewArr[0] != null && this.containerView != null) {
                    int i = photoProgressViewArr[0].backgroundState;
                    if (x >= (getContainerViewWidth() - AndroidUtilities.dp(100.0f)) / 2.0f && x <= (getContainerViewWidth() + AndroidUtilities.dp(100.0f)) / 2.0f && y >= (getContainerViewHeight() - AndroidUtilities.dp(100.0f)) / 2.0f && y <= (getContainerViewHeight() + AndroidUtilities.dp(100.0f)) / 2.0f) {
                        if (z) {
                            if ((i == 3 || i == 4) && this.photoProgressViews[0].isVisible()) {
                                this.manuallyPaused = true;
                                toggleVideoPlayer();
                                return true;
                            }
                        } else if (i > 0 && i <= 3) {
                            onActionClick(true);
                            checkProgress(0, false, true);
                            return true;
                        }
                    }
                }
            }
            PhotoViewerWebView photoViewerWebView3 = this.photoViewerWebView;
            if (photoViewerWebView3 == null || !photoViewerWebView3.isControllable() || this.photoViewerWebView.isPlaying() || !this.isActionBarVisible) {
                toggleActionBar(!this.isActionBarVisible, true);
            }
        } else {
            int i2 = this.sendPhotoType;
            if (i2 == 0 || i2 == 4) {
                if (this.isCurrentVideo) {
                    VideoPlayer videoPlayer = this.videoPlayer;
                    if (videoPlayer != null && !this.muteVideo && i2 != 1) {
                        videoPlayer.setVolume(1.0f);
                    }
                    this.manuallyPaused = true;
                    toggleVideoPlayer();
                } else {
                    this.checkImageView.performClick();
                }
            } else {
                TLRPC$BotInlineResult tLRPC$BotInlineResult = this.currentBotInlineResult;
                if (tLRPC$BotInlineResult != null && (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) {
                    int i3 = this.photoProgressViews[0].backgroundState;
                    if (i3 > 0 && i3 <= 3 && x >= (getContainerViewWidth() - AndroidUtilities.dp(100.0f)) / 2.0f && x <= (getContainerViewWidth() + AndroidUtilities.dp(100.0f)) / 2.0f && y >= (getContainerViewHeight() - AndroidUtilities.dp(100.0f)) / 2.0f && y <= (getContainerViewHeight() + AndroidUtilities.dp(100.0f)) / 2.0f) {
                        onActionClick(true);
                        checkProgress(0, false, true);
                        return true;
                    }
                } else if (this.sendPhotoType == 2 && this.isCurrentVideo) {
                    this.manuallyPaused = true;
                    toggleVideoPlayer();
                }
            }
        }
        return true;
    }

    private boolean canDoubleTapSeekVideo(MotionEvent motionEvent) {
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            boolean z = motionEvent.getX() >= ((float) ((getContainerViewWidth() / 3) * 2));
            long currentVideoPosition = getCurrentVideoPosition();
            long videoDuration = getVideoDuration();
            if (currentVideoPosition == -9223372036854775807L || videoDuration <= 15000) {
                return false;
            }
            return !z || videoDuration - currentVideoPosition > 10000;
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:145:0x015d, code lost:
        if (r1 > r3) goto L33;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x016c, code lost:
        if (r2 > r3) goto L36;
     */
    /* JADX WARN: Removed duplicated region for block: B:111:0x005f  */
    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onDoubleTap(MotionEvent motionEvent) {
        boolean z;
        PhotoViewerWebView photoViewerWebView;
        long j = 0;
        if ((this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) && this.videoPlayerControlVisible) {
            long currentVideoPosition = getCurrentVideoPosition();
            long videoDuration = getVideoDuration();
            float x = motionEvent.getX();
            int containerViewWidth = getContainerViewWidth() / 3;
            float f = containerViewWidth * 2;
            if (canDoubleTapSeekVideo(motionEvent)) {
                long j2 = x >= f ? currentVideoPosition + 10000 : x < ((float) containerViewWidth) ? currentVideoPosition - 10000 : currentVideoPosition;
                if (currentVideoPosition != j2) {
                    if (j2 > videoDuration) {
                        j = videoDuration;
                    } else if (j2 >= 0) {
                        j = j2;
                    } else if (j2 < -9000) {
                        z = false;
                        if (z) {
                            this.videoForwardDrawable.setOneShootAnimation(true);
                            this.videoForwardDrawable.setLeftSide(x < ((float) containerViewWidth));
                            this.videoForwardDrawable.addTime(10000L);
                            seekVideoOrWebTo(j);
                            this.containerView.invalidate();
                            this.videoPlayerSeekbar.setProgress(((float) j) / ((float) videoDuration), true);
                            this.videoPlayerSeekbarView.invalidate();
                        }
                        return true;
                    }
                    z = true;
                    if (z) {
                    }
                    return true;
                }
            }
        }
        if (this.canZoom && ((this.scale != 1.0f || (this.translationY == 0.0f && this.translationX == 0.0f)) && this.animationStartTime == 0 && this.animationInProgress == 0)) {
            PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
            if (photoProgressViewArr[0] == null || !photoProgressViewArr[0].isVisible() || this.photoProgressViews[0].backgroundState == -1 || Math.sqrt(Math.pow((AndroidUtilities.displaySize.x / 2.0f) - motionEvent.getX(), 2.0d) + Math.pow(((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) / 2.0f) - motionEvent.getY(), 2.0d)) >= AndroidUtilities.dp(40.0f)) {
                if (this.scale == 1.0f) {
                    float x2 = (motionEvent.getX() - (getContainerViewWidth() / 2)) - (((motionEvent.getX() - (getContainerViewWidth() / 2)) - this.translationX) * (3.0f / this.scale));
                    float y = (motionEvent.getY() - (getContainerViewHeight() / 2)) - (((motionEvent.getY() - (getContainerViewHeight() / 2)) - this.translationY) * (3.0f / this.scale));
                    updateMinMax(3.0f);
                    float f2 = this.minX;
                    if (x2 >= f2) {
                        f2 = this.maxX;
                    }
                    x2 = f2;
                    float f3 = this.minY;
                    if (y >= f3) {
                        f3 = this.maxY;
                    }
                    y = f3;
                    animateTo(3.0f, x2, y, true);
                } else {
                    animateTo(1.0f, 0.0f, 0.0f, true);
                }
                this.doubleTap = true;
                hidePressedDrawables();
                return true;
            }
            return false;
        }
        return false;
    }

    /* loaded from: classes4.dex */
    public class QualityChooseView extends View {
        private int circleSize;
        private int gapSize;
        private String hightQualityDescription;
        private int lineSize;
        private String lowQualityDescription;
        private Paint paint;
        private int sideSide;
        private int startMovingQuality;
        private TextPaint textPaint;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public QualityChooseView(Context context) {
            super(context);
            PhotoViewer.this = r1;
            this.paint = new Paint(1);
            TextPaint textPaint = new TextPaint(1);
            this.textPaint = textPaint;
            textPaint.setTextSize(AndroidUtilities.dp(14.0f));
            this.textPaint.setColor(-3289651);
            this.lowQualityDescription = LocaleController.getString("AccDescrVideoCompressLow", R.string.AccDescrVideoCompressLow);
            this.hightQualityDescription = LocaleController.getString("AccDescrVideoCompressHigh", R.string.AccDescrVideoCompressHigh);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            float x = motionEvent.getX();
            if (motionEvent.getAction() == 0) {
                this.startMovingQuality = PhotoViewer.this.selectedCompression;
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            if (motionEvent.getAction() == 0 || motionEvent.getAction() == 2) {
                int i = 0;
                while (true) {
                    if (i >= PhotoViewer.this.compressionsCount) {
                        break;
                    }
                    int i2 = this.sideSide;
                    int i3 = this.lineSize;
                    int i4 = this.gapSize;
                    int i5 = this.circleSize;
                    int i6 = i2 + (((i4 * 2) + i3 + i5) * i) + (i5 / 2);
                    int i7 = (i3 / 2) + (i5 / 2) + i4;
                    if (x <= i6 - i7 || x >= i6 + i7) {
                        i++;
                    } else if (PhotoViewer.this.selectedCompression != i) {
                        PhotoViewer.this.selectedCompression = i;
                        PhotoViewer.this.didChangedCompressionLevel(false);
                        invalidate();
                    }
                }
            } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
                if (PhotoViewer.this.selectedCompression != this.startMovingQuality) {
                    PhotoViewer.this.requestVideoPreview(1);
                }
                PhotoViewer.this.moving = false;
            }
            return true;
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            this.circleSize = AndroidUtilities.dp(8.0f);
            this.gapSize = AndroidUtilities.dp(2.0f);
            this.sideSide = AndroidUtilities.dp(18.0f);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (PhotoViewer.this.compressionsCount != 1) {
                this.lineSize = (((getMeasuredWidth() - (this.circleSize * PhotoViewer.this.compressionsCount)) - (this.gapSize * ((PhotoViewer.this.compressionsCount * 2) - 2))) - (this.sideSide * 2)) / (PhotoViewer.this.compressionsCount - 1);
            } else {
                this.lineSize = ((getMeasuredWidth() - (this.circleSize * PhotoViewer.this.compressionsCount)) - (this.gapSize * 2)) - (this.sideSide * 2);
            }
            int measuredHeight = (getMeasuredHeight() / 2) + AndroidUtilities.dp(6.0f);
            int i = 0;
            while (i < PhotoViewer.this.compressionsCount) {
                int i2 = this.sideSide;
                int i3 = this.lineSize + (this.gapSize * 2);
                int i4 = this.circleSize;
                int i5 = i2 + ((i3 + i4) * i) + (i4 / 2);
                if (i <= PhotoViewer.this.selectedCompression) {
                    this.paint.setColor(-11292945);
                } else {
                    this.paint.setColor(1728053247);
                }
                canvas.drawCircle(i5, measuredHeight, i == PhotoViewer.this.selectedCompression ? AndroidUtilities.dp(6.0f) : this.circleSize / 2, this.paint);
                if (i != 0) {
                    int i6 = ((i5 - (this.circleSize / 2)) - this.gapSize) - this.lineSize;
                    canvas.drawRect((i == PhotoViewer.this.selectedCompression + 1 ? AndroidUtilities.dpf2(2.0f) : 0.0f) + i6, measuredHeight - AndroidUtilities.dp(1.0f), (i6 + this.lineSize) - (i == PhotoViewer.this.selectedCompression ? AndroidUtilities.dpf2(2.0f) : 0.0f), AndroidUtilities.dp(2.0f) + measuredHeight, this.paint);
                }
                i++;
            }
            canvas.drawText(this.lowQualityDescription, this.sideSide, measuredHeight - AndroidUtilities.dp(16.0f), this.textPaint);
            canvas.drawText(this.hightQualityDescription, (getMeasuredWidth() - this.sideSide) - this.textPaint.measureText(this.hightQualityDescription), measuredHeight - AndroidUtilities.dp(16.0f), this.textPaint);
        }
    }

    public void updateMuteButton() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.setMute(this.muteVideo);
        }
        if (!this.videoConvertSupported) {
            this.muteItem.setEnabled(false);
            this.muteItem.setClickable(false);
            this.muteItem.animate().alpha(0.5f).setDuration(180L).start();
            this.videoTimelineView.setMode(0);
            return;
        }
        this.muteItem.setEnabled(true);
        this.muteItem.setClickable(true);
        this.muteItem.animate().alpha(1.0f).setDuration(180L).start();
        if (this.muteVideo) {
            if (this.customTitle == null) {
                this.actionBarContainer.setSubtitle(LocaleController.getString("SoundMuted", R.string.SoundMuted));
            }
            this.muteItem.setImageResource(R.drawable.video_send_mute);
            if (this.compressItem.getTag() != null) {
                this.compressItem.setAlpha(0.5f);
                this.compressItem.setEnabled(false);
            }
            if (this.sendPhotoType == 1) {
                this.videoTimelineView.setMaxProgressDiff(9600.0f / this.videoDuration);
                this.videoTimelineView.setMode(1);
                updateVideoInfo();
            } else {
                this.videoTimelineView.setMaxProgressDiff(1.0f);
                this.videoTimelineView.setMode(0);
            }
            this.muteItem.setContentDescription(LocaleController.getString("NoSound", R.string.NoSound));
            return;
        }
        this.actionBarContainer.setSubtitle(this.currentSubtitle);
        this.muteItem.setImageResource(R.drawable.video_send_unmute);
        this.muteItem.setContentDescription(LocaleController.getString("Sound", R.string.Sound));
        if (this.compressItem.getTag() != null) {
            this.compressItem.setAlpha(1.0f);
            this.compressItem.setEnabled(true);
        }
        this.videoTimelineView.setMaxProgressDiff(1.0f);
        this.videoTimelineView.setMode(0);
    }

    public void didChangedCompressionLevel(boolean z) {
        SharedPreferences.Editor edit = MessagesController.getGlobalMainSettings().edit();
        edit.putInt(String.format("compress_video_%d", Integer.valueOf(this.compressionsCount)), this.selectedCompression);
        edit.commit();
        updateWidthHeightBitrateForCompression();
        updateVideoInfo();
        if (z) {
            requestVideoPreview(1);
        }
    }

    private void calculateEstimatedVideoSize(boolean z, boolean z2) {
        float f;
        if (z) {
            long j = ((float) ((z2 ? 0L : this.audioFramesSize) + this.videoFramesSize)) * (((float) this.estimatedDuration) / this.videoDuration);
            this.estimatedSize = j;
            this.estimatedSize = j + ((j / 32768) * 16);
            return;
        }
        float f2 = (float) this.originalSize;
        long j2 = this.estimatedDuration;
        long j3 = f2 * (((float) j2) / this.videoDuration);
        this.estimatedSize = j3;
        if (z2) {
            this.estimatedSize = j3 - (((float) this.audioFramesSize) * (((float) j2) / f));
        }
    }

    private boolean needEncoding() {
        EditState editState = this.editState;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = null;
        if (editState.croppedPaintPath != null) {
            ArrayList<VideoEditedInfo.MediaEntity> arrayList2 = editState.croppedMediaEntities;
            if (arrayList2 != null && !arrayList2.isEmpty()) {
                arrayList = this.editState.croppedMediaEntities;
            }
        } else {
            ArrayList<VideoEditedInfo.MediaEntity> arrayList3 = editState.mediaEntities;
            if (arrayList3 != null && !arrayList3.isEmpty()) {
                arrayList = this.editState.mediaEntities;
            }
        }
        EditState editState2 = this.editState;
        String str = editState2.croppedPaintPath;
        if (str == null) {
            str = editState2.paintPath;
        }
        if (this.isH264Video && this.videoCutStart == 0.0f && this.rotationValue == 0 && this.resultWidth == this.originalWidth && this.resultHeight == this.originalHeight) {
            EditState editState3 = this.editState;
            return (editState3.cropState == null && arrayList == null && str == null && editState3.savedFilterState == null && this.sendPhotoType != 1) ? false : true;
        }
        return true;
    }

    public void updateVideoInfo() {
        float f;
        float f2;
        int i;
        if (this.actionBar == null) {
            return;
        }
        if (this.compressionsCount == 0) {
            this.actionBarContainer.setSubtitle(null);
            return;
        }
        this.compressItem.setState(this.videoConvertSupported && this.compressionsCount > 1, this.muteVideo, Math.min(this.resultWidth, this.resultHeight));
        this.itemsLayout.requestLayout();
        this.estimatedDuration = (long) Math.ceil((this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress()) * this.videoDuration);
        this.videoCutStart = this.videoTimelineView.getLeftProgress();
        this.videoCutEnd = this.videoTimelineView.getRightProgress();
        int i2 = this.rotationValue;
        int i3 = (i2 == 90 || i2 == 270) ? this.resultHeight : this.resultWidth;
        int i4 = this.rotationValue;
        int i5 = (i4 == 90 || i4 == 270) ? this.resultWidth : this.resultHeight;
        boolean needEncoding = needEncoding();
        if (this.muteVideo) {
            if (this.sendPhotoType == 1) {
                long j = this.estimatedDuration;
                i = j <= 2000 ? 2600000 : j <= 5000 ? 2200000 : 1560000;
            } else {
                i = 921600;
            }
            long j2 = (i / 8) * (((float) this.estimatedDuration) / 1000.0f);
            this.estimatedSize = j2;
            this.estimatedSize = j2 + ((j2 / 32768) * 16);
        } else {
            calculateEstimatedVideoSize(needEncoding, this.sendPhotoType == 1);
        }
        if (this.videoCutStart == 0.0f) {
            this.startTime = -1L;
        } else {
            this.startTime = f * this.videoDuration * 1000;
        }
        if (this.videoCutEnd == 1.0f) {
            this.endTime = -1L;
        } else {
            this.endTime = f2 * this.videoDuration * 1000;
        }
        this.currentSubtitle = String.format("%s, %s", String.format("%dx%d", Integer.valueOf(i3), Integer.valueOf(i5)), String.format("%s, ~%s", AndroidUtilities.formatShortDuration((int) (this.estimatedDuration / 1000)), AndroidUtilities.formatFileSize(this.estimatedSize)));
        this.actionBar.beginDelayedTransition();
        if (this.customTitle == null) {
            this.actionBarContainer.setSubtitle(this.muteVideo ? LocaleController.getString("SoundMuted", R.string.SoundMuted) : this.currentSubtitle);
        }
    }

    public void requestVideoPreview(int i) {
        if (this.videoPreviewMessageObject != null) {
            MediaController.getInstance().cancelVideoConvert(this.videoPreviewMessageObject);
        }
        boolean z = this.requestingPreview && !this.tryStartRequestPreviewOnFinish;
        this.requestingPreview = false;
        this.loadInitialVideo = false;
        this.progressView.setVisibility(4);
        if (i == 1) {
            if (this.resultHeight == this.originalHeight && this.resultWidth == this.originalWidth) {
                this.tryStartRequestPreviewOnFinish = false;
                PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
                photoProgressViewArr[0].setProgress(0.0f, photoProgressViewArr[0].backgroundState == 0 || this.photoProgressViews[0].previousBackgroundState == 0);
                this.photoProgressViews[0].setBackgroundState(3, false, true);
                if (!z) {
                    preparePlayer(this.currentPlayingVideoFile, false, false, this.editState.savedFilterState);
                    this.videoPlayer.seekTo(this.videoTimelineView.getLeftProgress() * this.videoDuration);
                } else {
                    this.loadInitialVideo = true;
                }
            } else {
                releasePlayer(false);
                if (this.videoPreviewMessageObject == null) {
                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                    tLRPC$TL_message.id = 0;
                    tLRPC$TL_message.message = "";
                    tLRPC$TL_message.media = new TLRPC$TL_messageMediaEmpty();
                    tLRPC$TL_message.action = new TLRPC$TL_messageActionEmpty();
                    tLRPC$TL_message.dialog_id = this.currentDialogId;
                    MessageObject messageObject = new MessageObject(UserConfig.selectedAccount, tLRPC$TL_message, false, false);
                    this.videoPreviewMessageObject = messageObject;
                    messageObject.messageOwner.attachPath = new File(FileLoader.getDirectory(4), "video_preview.mp4").getAbsolutePath();
                    this.videoPreviewMessageObject.videoEditedInfo = new VideoEditedInfo();
                    VideoEditedInfo videoEditedInfo = this.videoPreviewMessageObject.videoEditedInfo;
                    videoEditedInfo.rotationValue = this.rotationValue;
                    videoEditedInfo.originalWidth = this.originalWidth;
                    this.videoPreviewMessageObject.videoEditedInfo.originalHeight = this.originalHeight;
                    VideoEditedInfo videoEditedInfo2 = this.videoPreviewMessageObject.videoEditedInfo;
                    videoEditedInfo2.framerate = this.videoFramerate;
                    videoEditedInfo2.originalPath = this.currentPlayingVideoFile.getPath();
                }
                VideoEditedInfo videoEditedInfo3 = this.videoPreviewMessageObject.videoEditedInfo;
                long j = this.startTime;
                videoEditedInfo3.startTime = j;
                long j2 = this.endTime;
                videoEditedInfo3.endTime = j2;
                if (j == -1) {
                    j = 0;
                }
                if (j2 == -1) {
                    j2 = this.videoDuration * 1000.0f;
                }
                if (j2 - j > 5000000) {
                    videoEditedInfo3.endTime = j + 5000000;
                }
                videoEditedInfo3.bitrate = this.bitrate;
                this.videoPreviewMessageObject.videoEditedInfo.resultWidth = this.resultWidth;
                this.videoPreviewMessageObject.videoEditedInfo.resultHeight = this.resultHeight;
                VideoEditedInfo videoEditedInfo4 = this.videoPreviewMessageObject.videoEditedInfo;
                videoEditedInfo4.needUpdateProgress = true;
                videoEditedInfo4.originalDuration = this.videoDuration * 1000.0f;
                if (!MediaController.getInstance().scheduleVideoConvert(this.videoPreviewMessageObject, true, true)) {
                    this.tryStartRequestPreviewOnFinish = true;
                }
                this.requestingPreview = true;
                PhotoProgressView[] photoProgressViewArr2 = this.photoProgressViews;
                photoProgressViewArr2[0].setProgress(0.0f, photoProgressViewArr2[0].backgroundState == 0 || this.photoProgressViews[0].previousBackgroundState == 0);
                this.photoProgressViews[0].setBackgroundState(0, false, true);
            }
        } else {
            this.tryStartRequestPreviewOnFinish = false;
            this.photoProgressViews[0].setBackgroundState(3, false, true);
            if (i == 2) {
                preparePlayer(this.currentPlayingVideoFile, false, false, this.editState.savedFilterState);
                this.videoPlayer.seekTo(this.videoTimelineView.getLeftProgress() * this.videoDuration);
            }
        }
        this.containerView.invalidate();
    }

    private Size calculateResultVideoSize() {
        int round;
        int i;
        if (this.compressionsCount == 1) {
            return new Size(this.originalWidth, this.originalHeight);
        }
        int i2 = this.selectedCompression;
        float f = (i2 != 0 ? i2 != 1 ? i2 != 2 ? 1920.0f : 1280.0f : 854.0f : 480.0f) / (this.originalWidth > this.originalHeight ? this.originalWidth : this.originalHeight);
        if (this.selectedCompression == this.compressionsCount - 1 && f >= 1.0f) {
            i = this.originalWidth;
            round = this.originalHeight;
        } else {
            int round2 = Math.round((this.originalWidth * f) / 2.0f) * 2;
            round = Math.round((this.originalHeight * f) / 2.0f) * 2;
            i = round2;
        }
        return new Size(i, round);
    }

    public void prepareRealEncoderBitrate() {
        if (this.bitrate == 0 || this.sendPhotoType == 1) {
            return;
        }
        Size calculateResultVideoSize = calculateResultVideoSize();
        if (calculateResultVideoSize.getWidth() == this.originalWidth && calculateResultVideoSize.getHeight() == this.originalHeight) {
            MediaController.extractRealEncoderBitrate(calculateResultVideoSize.getWidth(), calculateResultVideoSize.getHeight(), this.originalBitrate, false);
            return;
        }
        MediaController.extractRealEncoderBitrate(calculateResultVideoSize.getWidth(), calculateResultVideoSize.getHeight(), MediaController.makeVideoBitrate(this.originalHeight, this.originalWidth, this.originalBitrate, calculateResultVideoSize.getHeight(), calculateResultVideoSize.getWidth()), false);
    }

    public void updateWidthHeightBitrateForCompression() {
        int extractRealEncoderBitrate;
        if (this.compressionsCount <= 0) {
            return;
        }
        if (this.selectedCompression >= this.compressionsCount) {
            this.selectedCompression = this.compressionsCount - 1;
        }
        if (this.sendPhotoType == 1) {
            float max = Math.max(800.0f / this.originalWidth, 800.0f / this.originalHeight);
            this.resultWidth = Math.round((this.originalWidth * max) / 2.0f) * 2;
            this.resultHeight = Math.round((this.originalHeight * max) / 2.0f) * 2;
        } else {
            Size calculateResultVideoSize = calculateResultVideoSize();
            this.resultWidth = calculateResultVideoSize.getWidth();
            this.resultHeight = calculateResultVideoSize.getHeight();
        }
        if (this.bitrate != 0) {
            if (this.sendPhotoType == 1) {
                this.bitrate = 1560000;
                extractRealEncoderBitrate = this.bitrate;
            } else if (this.resultWidth == this.originalWidth && this.resultHeight == this.originalHeight) {
                this.bitrate = this.originalBitrate;
                extractRealEncoderBitrate = MediaController.extractRealEncoderBitrate(this.resultWidth, this.resultHeight, this.bitrate, false);
            } else {
                this.bitrate = MediaController.makeVideoBitrate(this.originalHeight, this.originalWidth, this.originalBitrate, this.resultHeight, this.resultWidth);
                extractRealEncoderBitrate = MediaController.extractRealEncoderBitrate(this.resultWidth, this.resultHeight, this.bitrate, false);
            }
            this.videoFramesSize = ((extractRealEncoderBitrate / 8) * this.videoDuration) / 1000.0f;
        }
    }

    private void showQualityView(final boolean z) {
        TextureView textureView;
        if (z && this.textureUploaded && this.videoSizeSet && !this.changingTextureView && (textureView = this.videoTextureView) != null) {
            this.videoFrameBitmap = textureView.getBitmap();
        }
        if (z) {
            this.previousCompression = this.selectedCompression;
        }
        AnimatorSet animatorSet = this.qualityChooseViewAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
        }
        this.qualityChooseViewAnimation = new AnimatorSet();
        if (z) {
            if (this.fancyShadows) {
                this.navigationBar.setVisibility(0);
                this.navigationBar.setAlpha(this.sendPhotoType == 11 ? 1.0f : 0.0f);
                this.navigationBar.setBackgroundColor(this.sendPhotoType == 11 ? 1711276032 : 2130706432);
            }
            this.qualityChooseView.setTag(1);
            AnimatorSet animatorSet2 = this.qualityChooseViewAnimation;
            Animator[] animatorArr = new Animator[4];
            FrameLayout frameLayout = this.pickerView;
            Property property = View.TRANSLATION_Y;
            float[] fArr = new float[2];
            fArr[0] = 0.0f;
            fArr[1] = frameLayout.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0);
            animatorArr[0] = ObjectAnimator.ofFloat(frameLayout, property, fArr);
            animatorArr[1] = ObjectAnimator.ofFloat(this.pickerView, View.ALPHA, 0.0f);
            animatorArr[2] = ObjectAnimator.ofFloat(this.pickerViewSendButton, View.TRANSLATION_Y, 0.0f, AndroidUtilities.dp(158.0f));
            View view = this.navigationBar;
            Property property2 = View.ALPHA;
            float[] fArr2 = new float[2];
            fArr2[0] = this.fancyShadows ? 0.0f : 1.0f;
            fArr2[1] = 1.0f;
            animatorArr[3] = ObjectAnimator.ofFloat(view, property2, fArr2);
            animatorSet2.playTogether(animatorArr);
        } else {
            this.qualityChooseView.setTag(null);
            AnimatorSet animatorSet3 = this.qualityChooseViewAnimation;
            Animator[] animatorArr2 = new Animator[3];
            animatorArr2[0] = ObjectAnimator.ofFloat(this.qualityChooseView, View.TRANSLATION_Y, 0.0f, AndroidUtilities.dp(166.0f));
            animatorArr2[1] = ObjectAnimator.ofFloat(this.qualityPicker, View.TRANSLATION_Y, 0.0f, AndroidUtilities.dp(166.0f));
            View view2 = this.navigationBar;
            Property property3 = View.ALPHA;
            float[] fArr3 = new float[2];
            fArr3[0] = 1.0f;
            fArr3[1] = this.fancyShadows ? 0.0f : 1.0f;
            animatorArr2[2] = ObjectAnimator.ofFloat(view2, property3, fArr3);
            animatorSet3.playTogether(animatorArr2);
        }
        this.qualityChooseViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.79
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (animator.equals(PhotoViewer.this.qualityChooseViewAnimation)) {
                    PhotoViewer.this.qualityChooseViewAnimation = new AnimatorSet();
                    if (z) {
                        PhotoViewer.this.qualityChooseView.setVisibility(0);
                        PhotoViewer.this.qualityPicker.setVisibility(0);
                        PhotoViewer.this.qualityChooseViewAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.qualityChooseView, View.TRANSLATION_Y, 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this.qualityPicker, View.TRANSLATION_Y, 0.0f));
                    } else {
                        if (PhotoViewer.this.fancyShadows) {
                            PhotoViewer.this.navigationBar.setVisibility(8);
                            PhotoViewer.this.navigationBar.setAlpha(0.0f);
                            PhotoViewer.this.navigationBar.setBackgroundColor(PhotoViewer.this.sendPhotoType == 11 ? -16777216 : 2130706432);
                        }
                        PhotoViewer.this.qualityChooseView.setVisibility(4);
                        PhotoViewer.this.qualityPicker.setVisibility(4);
                        PhotoViewer.this.qualityChooseViewAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.TRANSLATION_Y, 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.pickerViewSendButton, View.TRANSLATION_Y, 0.0f));
                    }
                    PhotoViewer.this.qualityChooseViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.79.1
                        {
                            79.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator2) {
                            if (animator2.equals(PhotoViewer.this.qualityChooseViewAnimation)) {
                                PhotoViewer.this.qualityChooseViewAnimation = null;
                            }
                        }
                    });
                    PhotoViewer.this.qualityChooseViewAnimation.setDuration(200L);
                    PhotoViewer.this.qualityChooseViewAnimation.setInterpolator(AndroidUtilities.decelerateInterpolator);
                    PhotoViewer.this.qualityChooseViewAnimation.start();
                }
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                PhotoViewer.this.qualityChooseViewAnimation = null;
            }
        });
        this.qualityChooseViewAnimation.setDuration(200L);
        this.qualityChooseViewAnimation.setInterpolator(AndroidUtilities.accelerateInterpolator);
        this.qualityChooseViewAnimation.start();
        if (this.muteItem.getVisibility() == 0) {
            this.muteItem.animate().scaleX(z ? 0.25f : 1.0f).scaleY(z ? 0.25f : 1.0f).alpha(z ? 0.0f : 1.0f).setDuration(200L);
        }
    }

    private void processOpenVideo(String str, boolean z, float f, float f2, int i) {
        if (this.currentLoadingVideoRunnable != null) {
            Utilities.globalQueue.cancelRunnable(this.currentLoadingVideoRunnable);
            this.currentLoadingVideoRunnable = null;
        }
        this.videoTimelineView.setVideoPath(str, f, f2);
        this.videoPreviewMessageObject = null;
        boolean z2 = true;
        if (!z && this.sendPhotoType != 1) {
            z2 = false;
        }
        this.muteVideo = z2;
        this.compressionsCount = -1;
        this.rotationValue = 0;
        this.videoFramerate = 25;
        this.originalSize = new File(str).length();
        DispatchQueue dispatchQueue = Utilities.globalQueue;
        80 r6 = new 80(str, i);
        this.currentLoadingVideoRunnable = r6;
        dispatchQueue.postRunnable(r6);
    }

    /* loaded from: classes4.dex */
    public class 80 implements Runnable {
        final /* synthetic */ int val$compressQuality;
        final /* synthetic */ String val$videoPath;

        80(String str, int i) {
            PhotoViewer.this = r1;
            this.val$videoPath = str;
            this.val$compressQuality = i;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (PhotoViewer.this.currentLoadingVideoRunnable != this) {
                return;
            }
            int videoBitrate = MediaController.getVideoBitrate(this.val$videoPath);
            final int[] iArr = new int[11];
            AnimatedFileDrawable.getVideoInfo(this.val$videoPath, iArr);
            boolean z = false;
            boolean z2 = iArr[10] != 0;
            PhotoViewer photoViewer = PhotoViewer.this;
            if (iArr[0] != 0 && (!z2 || iArr[9] != 0)) {
                z = true;
            }
            photoViewer.videoConvertSupported = z;
            PhotoViewer photoViewer2 = PhotoViewer.this;
            if (videoBitrate == -1) {
                videoBitrate = iArr[3];
            }
            photoViewer2.originalBitrate = photoViewer2.bitrate = videoBitrate;
            if (PhotoViewer.this.videoConvertSupported) {
                PhotoViewer photoViewer3 = PhotoViewer.this;
                photoViewer3.resultWidth = photoViewer3.originalWidth = iArr[1];
                PhotoViewer photoViewer4 = PhotoViewer.this;
                photoViewer4.resultHeight = photoViewer4.originalHeight = iArr[2];
                PhotoViewer photoViewer5 = PhotoViewer.this;
                photoViewer5.updateCompressionsCount(photoViewer5.originalWidth, PhotoViewer.this.originalHeight);
                PhotoViewer photoViewer6 = PhotoViewer.this;
                int i = this.val$compressQuality;
                if (i == -1) {
                    i = photoViewer6.selectCompression();
                }
                photoViewer6.selectedCompression = i;
                PhotoViewer.this.prepareRealEncoderBitrate();
                PhotoViewer.this.isH264Video = MediaController.isH264Video(this.val$videoPath);
            }
            if (PhotoViewer.this.currentLoadingVideoRunnable != this) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$80$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.80.this.lambda$run$0(this, iArr);
                }
            });
        }

        public /* synthetic */ void lambda$run$0(Runnable runnable, int[] iArr) {
            if (PhotoViewer.this.parentActivity == null || runnable != PhotoViewer.this.currentLoadingVideoRunnable) {
                return;
            }
            PhotoViewer.this.currentLoadingVideoRunnable = null;
            PhotoViewer.this.audioFramesSize = iArr[5];
            PhotoViewer.this.videoDuration = iArr[4];
            PhotoViewer.this.videoFramerate = iArr[7];
            PhotoViewer photoViewer = PhotoViewer.this;
            photoViewer.videoFramesSize = ((photoViewer.bitrate / 8) * PhotoViewer.this.videoDuration) / 1000.0f;
            if (PhotoViewer.this.videoConvertSupported) {
                PhotoViewer.this.rotationValue = iArr[8];
                PhotoViewer.this.updateWidthHeightBitrateForCompression();
                if (PhotoViewer.this.selectedCompression > PhotoViewer.this.compressionsCount - 1) {
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.selectedCompression = photoViewer2.compressionsCount - 1;
                }
                PhotoViewer.this.compressItem.setState(PhotoViewer.this.compressionsCount > 1, PhotoViewer.this.muteVideo, Math.min(PhotoViewer.this.resultWidth, PhotoViewer.this.resultHeight));
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("compressionsCount = " + PhotoViewer.this.compressionsCount + " w = " + PhotoViewer.this.originalWidth + " h = " + PhotoViewer.this.originalHeight + " r = " + PhotoViewer.this.rotationValue);
                }
                PhotoViewer.this.qualityChooseView.invalidate();
            } else {
                PhotoViewer.this.compressItem.setState(false, PhotoViewer.this.muteVideo, Math.min(PhotoViewer.this.resultWidth, PhotoViewer.this.resultHeight));
                PhotoViewer.this.compressionsCount = 0;
            }
            PhotoViewer.this.updateVideoInfo();
            PhotoViewer.this.updateMuteButton();
        }
    }

    public int selectCompression() {
        if (this.originalSize > 1048576000) {
            return this.compressionsCount - 1;
        }
        SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
        int i = this.compressionsCount;
        while (i < 5) {
            int i2 = globalMainSettings.getInt(String.format(Locale.US, "compress_video_%d", Integer.valueOf(i)), -1);
            if (i2 >= 0) {
                return Math.min(i2, 2);
            }
            i++;
        }
        return Math.min(2, Math.round(DownloadController.getInstance(this.currentAccount).getMaxVideoBitrate() / (100.0f / i)) - 1);
    }

    public void updateCompressionsCount(int i, int i2) {
        int max = Math.max(i, i2);
        if (max > 1280) {
            this.compressionsCount = 4;
        } else if (max > 854) {
            this.compressionsCount = 3;
        } else if (max > 640) {
            this.compressionsCount = 2;
        } else {
            this.compressionsCount = 1;
        }
    }

    public void updateAccessibilityOverlayVisibility() {
        if (this.playButtonAccessibilityOverlay != null) {
            int i = this.photoProgressViews[0].backgroundState;
            if (this.photoProgressViews[0].isVisible() && (i == 3 || i == 4 || i == 2 || i == 1)) {
                if (i == 3) {
                    this.playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
                } else if (i == 2) {
                    this.playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionDownload", R.string.AccActionDownload));
                } else if (i == 1) {
                    this.playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionCancelDownload", R.string.AccActionCancelDownload));
                } else {
                    this.playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionPause", R.string.AccActionPause));
                }
                this.playButtonAccessibilityOverlay.setVisibility(0);
                return;
            }
            this.playButtonAccessibilityOverlay.setVisibility(4);
        }
    }

    /* loaded from: classes4.dex */
    public class ListAdapter extends RecyclerListView.SelectionAdapter {
        private Context mContext;

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            return 0;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        public ListAdapter(Context context) {
            PhotoViewer.this = r1;
            this.mContext = context;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            if (PhotoViewer.this.placeProvider == null || PhotoViewer.this.placeProvider.getSelectedPhotosOrder() == null) {
                return 0;
            }
            return PhotoViewer.this.placeProvider.getSelectedPhotosOrder().size();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            PhotoPickerPhotoCell photoPickerPhotoCell = new PhotoPickerPhotoCell(this.mContext);
            photoPickerPhotoCell.checkFrame.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$ListAdapter$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.ListAdapter.this.lambda$onCreateViewHolder$0(view);
                }
            });
            return new RecyclerListView.Holder(photoPickerPhotoCell);
        }

        public /* synthetic */ void lambda$onCreateViewHolder$0(View view) {
            Object tag = ((View) view.getParent()).getTag();
            int indexOf = PhotoViewer.this.imagesArrLocals.indexOf(tag);
            if (indexOf >= 0) {
                int photoChecked = PhotoViewer.this.placeProvider.setPhotoChecked(indexOf, PhotoViewer.this.getCurrentVideoEditedInfo());
                boolean isPhotoChecked = PhotoViewer.this.placeProvider.isPhotoChecked(indexOf);
                if (indexOf == PhotoViewer.this.currentIndex) {
                    PhotoViewer.this.checkImageView.setChecked(-1, isPhotoChecked, true);
                }
                if (photoChecked >= 0) {
                    PhotoViewer.this.selectedPhotosAdapter.notifyItemRemoved(photoChecked);
                    if (photoChecked == 0) {
                        PhotoViewer.this.selectedPhotosAdapter.notifyItemChanged(0);
                    }
                }
                PhotoViewer.this.updateSelectedCount();
                return;
            }
            int photoUnchecked = PhotoViewer.this.placeProvider.setPhotoUnchecked(tag);
            if (photoUnchecked >= 0) {
                PhotoViewer.this.selectedPhotosAdapter.notifyItemRemoved(photoUnchecked);
                if (photoUnchecked == 0) {
                    PhotoViewer.this.selectedPhotosAdapter.notifyItemChanged(0);
                }
                PhotoViewer.this.updateSelectedCount();
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
            PhotoPickerPhotoCell photoPickerPhotoCell = (PhotoPickerPhotoCell) viewHolder.itemView;
            photoPickerPhotoCell.setItemWidth(AndroidUtilities.dp(85.0f), i != 0 ? AndroidUtilities.dp(6.0f) : 0);
            BackupImageView backupImageView = photoPickerPhotoCell.imageView;
            backupImageView.setOrientation(0, true);
            Object obj = PhotoViewer.this.placeProvider.getSelectedPhotos().get(PhotoViewer.this.placeProvider.getSelectedPhotosOrder().get(i));
            if (obj instanceof MediaController.PhotoEntry) {
                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                photoPickerPhotoCell.setTag(photoEntry);
                photoPickerPhotoCell.videoInfoContainer.setVisibility(4);
                String str = photoEntry.thumbPath;
                if (str != null) {
                    backupImageView.setImage(str, null, this.mContext.getResources().getDrawable(R.drawable.nophotos));
                } else if (photoEntry.path != null) {
                    backupImageView.setOrientation(photoEntry.orientation, photoEntry.invert, true);
                    if (photoEntry.isVideo) {
                        photoPickerPhotoCell.videoInfoContainer.setVisibility(0);
                        photoPickerPhotoCell.videoTextView.setText(AndroidUtilities.formatShortDuration(photoEntry.duration));
                        backupImageView.setImage("vthumb://" + photoEntry.imageId + ":" + photoEntry.path, null, this.mContext.getResources().getDrawable(R.drawable.nophotos));
                    } else {
                        backupImageView.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, this.mContext.getResources().getDrawable(R.drawable.nophotos));
                    }
                } else {
                    backupImageView.setImageResource(R.drawable.nophotos);
                }
                photoPickerPhotoCell.setChecked(-1, true, false);
                photoPickerPhotoCell.checkBox.setVisibility(0);
            } else if (obj instanceof MediaController.SearchImage) {
                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                photoPickerPhotoCell.setTag(searchImage);
                photoPickerPhotoCell.setImage(searchImage);
                photoPickerPhotoCell.videoInfoContainer.setVisibility(4);
                photoPickerPhotoCell.setChecked(-1, true, false);
                photoPickerPhotoCell.checkBox.setVisibility(0);
            }
        }
    }

    /* loaded from: classes4.dex */
    public class FirstFrameView extends ImageView {
        private VideoPlayer currentVideoPlayer;
        private ValueAnimator fadeAnimator;
        private final TimeInterpolator fadeInterpolator;
        private boolean gettingFrame;
        private int gettingFrameIndex;
        private boolean gotError;
        private boolean hasFrame;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public FirstFrameView(Context context) {
            super(context);
            PhotoViewer.this = r1;
            this.gettingFrameIndex = 0;
            this.gettingFrame = false;
            this.hasFrame = false;
            this.gotError = false;
            this.fadeInterpolator = CubicBezierInterpolator.EASE_IN;
            setAlpha(0.0f);
        }

        public void clear() {
            this.hasFrame = false;
            this.gotError = false;
            if (this.gettingFrame) {
                this.gettingFrameIndex++;
                this.gettingFrame = false;
            }
            setImageResource(17170445);
        }

        public void checkFromPlayer(VideoPlayer videoPlayer) {
            if (this.currentVideoPlayer != videoPlayer) {
                this.gotError = false;
                clear();
            }
            if (videoPlayer != null && !videoPlayer.isHDR()) {
                long duration = videoPlayer.getDuration() - videoPlayer.getCurrentPosition();
                if (!this.hasFrame && !this.gotError && !this.gettingFrame && ((float) duration) < 5250.0f) {
                    final Uri currentUri = videoPlayer.getCurrentUri();
                    final int i = this.gettingFrameIndex + 1;
                    this.gettingFrameIndex = i;
                    Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda3
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$2(currentUri, i);
                        }
                    });
                    this.gettingFrame = true;
                }
            }
            this.currentVideoPlayer = videoPlayer;
        }

        public /* synthetic */ void lambda$checkFromPlayer$2(Uri uri, final int i) {
            try {
                File file = new File(uri.getPath());
                int i2 = UserConfig.selectedAccount;
                Point point = AndroidUtilities.displaySize;
                AnimatedFileDrawable animatedFileDrawable = new AnimatedFileDrawable(file, true, 0L, 0, null, null, null, 0L, i2, false, point.x, point.y, null);
                final Bitmap frameAtTime = animatedFileDrawable.getFrameAtTime(0L);
                animatedFileDrawable.recycle();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$0(i, frameAtTime);
                    }
                });
            } catch (Throwable th) {
                FileLog.e(th);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$1();
                    }
                });
            }
        }

        public /* synthetic */ void lambda$checkFromPlayer$0(int i, Bitmap bitmap) {
            if (i == this.gettingFrameIndex) {
                setImageBitmap(bitmap);
                this.hasFrame = true;
                this.gettingFrame = false;
            }
        }

        public /* synthetic */ void lambda$checkFromPlayer$1() {
            this.gotError = true;
        }

        public void updateAlpha() {
            if (PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPlayer.getDuration() != -9223372036854775807L) {
                long max = Math.max(0L, PhotoViewer.this.videoPlayer.getDuration() - PhotoViewer.this.videoPlayer.getCurrentPosition());
                float max2 = 1.0f - Math.max(Math.min(((float) max) / 250.0f, 1.0f), 0.0f);
                if (max2 > 0.0f) {
                    if (PhotoViewer.this.videoPlayer.isPlaying()) {
                        if (this.fadeAnimator == null) {
                            ValueAnimator ofFloat = ValueAnimator.ofFloat(max2, 1.0f);
                            this.fadeAnimator = ofFloat;
                            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda0
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    PhotoViewer.FirstFrameView.this.lambda$updateAlpha$3(valueAnimator);
                                }
                            });
                            this.fadeAnimator.setDuration(max);
                            this.fadeAnimator.setInterpolator(this.fadeInterpolator);
                            this.fadeAnimator.start();
                            setAlpha(max2);
                            return;
                        }
                        return;
                    }
                    ValueAnimator valueAnimator = this.fadeAnimator;
                    if (valueAnimator != null) {
                        valueAnimator.cancel();
                        this.fadeAnimator = null;
                    }
                    setAlpha(max2);
                    return;
                }
                ValueAnimator valueAnimator2 = this.fadeAnimator;
                if (valueAnimator2 != null) {
                    valueAnimator2.cancel();
                    this.fadeAnimator = null;
                }
                setAlpha(0.0f);
                return;
            }
            ValueAnimator valueAnimator3 = this.fadeAnimator;
            if (valueAnimator3 != null) {
                valueAnimator3.cancel();
                this.fadeAnimator = null;
            }
            setAlpha(0.0f);
        }

        public /* synthetic */ void lambda$updateAlpha$3(ValueAnimator valueAnimator) {
            setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }
    }

    public int getThemedColor(int i) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider != null) {
            return resourcesProvider.getColor(i);
        }
        return Theme.getColor(i);
    }

    public static boolean BLUR_RENDERNODE() {
        return Build.VERSION.SDK_INT >= 31 && SharedConfig.useNewBlur && SharedConfig.getDevicePerformanceClass() >= 2;
    }

    /* JADX WARN: Removed duplicated region for block: B:590:0x0253  */
    /* JADX WARN: Removed duplicated region for block: B:601:0x0291  */
    /* JADX WARN: Removed duplicated region for block: B:624:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:627:0x034e  */
    /* JADX WARN: Removed duplicated region for block: B:631:0x03b7  */
    /* JADX WARN: Removed duplicated region for block: B:636:0x03cd  */
    /* JADX WARN: Removed duplicated region for block: B:646:0x03f5  */
    /* JADX WARN: Removed duplicated region for block: B:654:0x040a A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:661:0x043c  */
    /* JADX WARN: Removed duplicated region for block: B:662:0x043f  */
    /* JADX WARN: Removed duplicated region for block: B:665:0x044f  */
    /* JADX WARN: Removed duplicated region for block: B:672:0x0484  */
    /* JADX WARN: Removed duplicated region for block: B:676:0x04a4  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x04a6  */
    /* JADX WARN: Removed duplicated region for block: B:680:0x04c7  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x04d8  */
    /* JADX WARN: Removed duplicated region for block: B:694:0x0528 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:718:0x057b  */
    /* JADX WARN: Removed duplicated region for block: B:739:0x073f  */
    /* JADX WARN: Removed duplicated region for block: B:744:0x0762  */
    /* JADX WARN: Removed duplicated region for block: B:766:0x078b  */
    /* JADX WARN: Removed duplicated region for block: B:804:0x0810  */
    /* JADX WARN: Removed duplicated region for block: B:807:0x081b  */
    /* JADX WARN: Removed duplicated region for block: B:816:0x0834  */
    /* JADX WARN: Removed duplicated region for block: B:820:0x0856  */
    /* JADX WARN: Removed duplicated region for block: B:824:0x0862  */
    /* JADX WARN: Removed duplicated region for block: B:845:0x08a9  */
    /* JADX WARN: Removed duplicated region for block: B:854:0x08e0  */
    /* JADX WARN: Removed duplicated region for block: B:857:0x08eb  */
    /* JADX WARN: Removed duplicated region for block: B:868:0x093e  */
    /* JADX WARN: Removed duplicated region for block: B:871:0x0983  */
    /* JADX WARN: Removed duplicated region for block: B:874:0x098b  */
    /* JADX WARN: Removed duplicated region for block: B:883:0x09a6  */
    /* JADX WARN: Removed duplicated region for block: B:884:0x09ac  */
    /* JADX WARN: Removed duplicated region for block: B:886:0x09b2  */
    /* JADX WARN: Removed duplicated region for block: B:901:0x09db  */
    /* JADX WARN: Removed duplicated region for block: B:902:0x09e8  */
    /* JADX WARN: Removed duplicated region for block: B:905:0x09f0  */
    /* JADX WARN: Removed duplicated region for block: B:916:0x0a23  */
    /* JADX WARN: Removed duplicated region for block: B:917:0x0ac7  */
    /* JADX WARN: Removed duplicated region for block: B:920:0x0ad1  */
    /* JADX WARN: Removed duplicated region for block: B:922:0x0adb  */
    /* JADX WARN: Removed duplicated region for block: B:927:0x0b42  */
    /* JADX WARN: Removed duplicated region for block: B:929:0x0b47  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x0b4f  */
    /* JADX WARN: Removed duplicated region for block: B:936:0x0b5e  */
    /* JADX WARN: Removed duplicated region for block: B:939:0x0ba7  */
    /* JADX WARN: Removed duplicated region for block: B:946:0x0c28  */
    /* JADX WARN: Removed duplicated region for block: B:975:0x0ce1  */
    /* JADX WARN: Removed duplicated region for block: B:978:0x0cf0  */
    /* JADX WARN: Removed duplicated region for block: B:986:0x0d63  */
    /* JADX WARN: Removed duplicated region for block: B:996:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawCaptionBlur(Canvas canvas, BlurringShader.StoryBlurDrawer storyBlurDrawer, int i, int i2, boolean z, boolean z2, boolean z3) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        ImageReceiver imageReceiver;
        ImageReceiver imageReceiver2;
        int i3;
        int i4;
        int i5;
        float f8;
        float f9;
        float f10;
        int i6;
        float f11;
        float f12;
        float f13;
        boolean z4;
        float f14;
        int bitmapWidth;
        int bitmapHeight;
        float f15;
        float f16;
        float f17;
        int i7;
        float f18;
        float f19;
        ImageReceiver imageReceiver3;
        int i8;
        float f20;
        float f21;
        float f22;
        boolean z5;
        float f23;
        float f24;
        boolean z6;
        boolean z7;
        float f25;
        float f26;
        boolean z8;
        PhotoViewerWebView photoViewerWebView;
        float f27;
        Bitmap bitmap;
        float f28;
        int i9;
        int i10;
        float f29;
        int i11;
        float f30;
        float f31;
        float f32;
        float f33;
        float f34;
        float f35;
        TextureView textureView;
        float f36;
        float f37;
        float minScale;
        int i12;
        float rotation;
        float f38;
        float f39;
        int i13;
        int i14;
        float min;
        float f40;
        float f41;
        Bitmap bitmap2;
        Bitmap bitmap3;
        int containerViewHeight;
        ImageReceiver imageReceiver4;
        float f42;
        Paint paint;
        ImageReceiver imageReceiver5;
        float f43;
        int i15;
        boolean z9;
        Bitmap bitmap4;
        Bitmap bitmap5;
        AspectRatioFrameLayout aspectRatioFrameLayout;
        float f44;
        float f45;
        float f46;
        int i16;
        int i17;
        ImageReceiver imageReceiver6;
        float f47;
        boolean z10;
        Bitmap bitmap6;
        ImageReceiver imageReceiver7;
        Paint paint2;
        BlurringShader.StoryBlurDrawer storyBlurDrawer2 = storyBlurDrawer;
        if (BLUR_RENDERNODE()) {
            if (this.renderNode != null) {
                if (storyBlurDrawer2.renderNode == null) {
                    RenderNode renderNode = new RenderNode("photoviewer blur");
                    storyBlurDrawer2.renderNode = renderNode;
                    renderNode.setRenderEffect(RenderEffect.createChainEffect(RenderEffect.createColorFilterEffect(new ColorMatrixColorFilter(storyBlurDrawer2.colorMatrix)), RenderEffect.createBlurEffect(AndroidUtilities.dp(35.0f), AndroidUtilities.dp(35.0f), Shader.TileMode.DECAL)));
                }
                storyBlurDrawer2.renderNode.setPosition(0, 0, this.renderNode.getWidth(), this.renderNode.getHeight());
                RecordingCanvas beginRecording = storyBlurDrawer2.renderNode.beginRecording();
                beginRecording.drawColor(i);
                beginRecording.drawRenderNode(this.renderNode);
                storyBlurDrawer2.renderNode.endRecording();
            }
            RenderNode renderNode2 = storyBlurDrawer2.renderNode;
            if (renderNode2 != null && renderNode2.hasDisplayList()) {
                canvas.drawColor(i);
                canvas.drawRenderNode(storyBlurDrawer2.renderNode);
            }
            canvas.drawColor(i2);
            return;
        }
        if (SharedConfig.photoViewerBlur) {
            AnimatedFloat animatedFloat = this.blurAlpha;
            int i18 = this.animationInProgress;
            f = animatedFloat.set(i18 == 0 || i18 == 2 || i18 == 3);
        } else {
            f = 1.0f;
        }
        storyBlurDrawer2.paint.setShader(null);
        if (i != 0) {
            storyBlurDrawer2.paint.setColor(i);
            storyBlurDrawer2.paint.setAlpha((int) (paint2.getAlpha() * AndroidUtilities.lerp(0.7f, 1.0f, z2 ? f : 1.0f)));
            canvas.drawPaint(storyBlurDrawer2.paint);
        }
        if (!SharedConfig.photoViewerBlur || this.animationInProgress != 0) {
            float f48 = f;
            this.blurAlpha.set(0.0f, true);
            if (i2 != 0) {
                storyBlurDrawer2.paint.setColor(i2);
                Paint paint3 = storyBlurDrawer2.paint;
                float alpha = paint3.getAlpha();
                if (!z2) {
                    f48 = 1.0f;
                }
                paint3.setAlpha((int) (alpha * AndroidUtilities.lerp(0.7f, 1.0f, f48)));
                canvas.drawPaint(storyBlurDrawer2.paint);
                return;
            }
            return;
        }
        if (z3) {
            if (this.centerImageInsideBlur == null) {
                AnimatedFloat[] animatedFloatArr = new AnimatedFloat[3];
                this.centerImageInsideBlur = animatedFloatArr;
                PhotoViewer$$ExternalSyntheticLambda79 photoViewer$$ExternalSyntheticLambda79 = new PhotoViewer$$ExternalSyntheticLambda79(this);
                CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT;
                f2 = f;
                animatedFloatArr[0] = new AnimatedFloat(photoViewer$$ExternalSyntheticLambda79, 180L, cubicBezierInterpolator);
                this.centerImageInsideBlur[1] = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda79(this), 180L, cubicBezierInterpolator);
                this.centerImageInsideBlur[2] = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda79(this), 180L, cubicBezierInterpolator);
            } else {
                f2 = f;
            }
            this.centerImageInsideBlur[0].set(1.0f, true);
            this.centerImageInsideBlur[2].set(1.0f, true);
            if (this.blurBounds == null) {
                this.blurBounds = new RectF();
            }
            if (this.imageBounds == null) {
                this.imageBounds = new RectF();
            }
            if (this.imageBoundsMatrix == null) {
                this.imageBoundsMatrix = new Matrix();
            }
            if (this.imageBoundsPoints == null) {
                this.imageBoundsPoints = new float[8];
            }
            this.blurBounds.set(this.captionEdit.getBounds());
            this.blurBounds.offset(this.captionEditContainer.getX(), this.captionEditContainer.getY());
            this.blurBounds.offset(this.captionEdit.getX(), this.captionEdit.getY());
            this.imageBoundsMatrix.reset();
        } else {
            f2 = f;
        }
        int saveCount = canvas.getSaveCount();
        if (this.padImageForHorizontalInsets) {
            canvas.save();
            canvas.translate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            if (z3) {
                this.imageBoundsMatrix.preTranslate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            }
        }
        if (this.imageMoveAnimation != null) {
            float lerp = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            float lerp2 = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
            f7 = lerp;
            f6 = lerp2;
        } else {
            float f49 = this.scale;
            float f50 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f49 = this.animateToScale;
            }
            f6 = f49;
            f7 = f50;
        }
        float f51 = f3;
        float f52 = f5;
        float f53 = f4;
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight2 = getContainerViewHeight();
        if (this.currentEditMode == 0 && this.sendPhotoType != 1 && this.scale >= 1.0f && !this.zoomAnimation && !this.zooming) {
            if (f52 > this.maxX + AndroidUtilities.dp(5.0f)) {
                imageReceiver7 = this.leftImage;
            } else if (f52 < this.minX - AndroidUtilities.dp(5.0f)) {
                imageReceiver7 = this.rightImage;
            }
            imageReceiver = imageReceiver7;
            if (imageReceiver == this.rightImage) {
                float f54 = z3 ? this.centerImageInsideBlur[0].set(1.0f, true) : 1.0f;
                if (!this.zoomAnimation) {
                    float f55 = this.minX;
                    if (f52 < f55) {
                        float min2 = Math.min(1.0f, (f55 - f52) / containerViewWidth);
                        f45 = (1.0f - min2) * 0.3f;
                        f44 = (-containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2);
                        f46 = min2;
                        if (imageReceiver.hasBitmapImage()) {
                            canvas.save();
                            canvas.translate(containerViewWidth / 2, containerViewHeight2 / 2);
                            canvas.translate((AndroidUtilities.dp(30.0f) / 2) + containerViewWidth + f44, 0.0f);
                            float f56 = 1.0f - f45;
                            canvas.scale(f56, f56);
                            int bitmapWidth2 = imageReceiver.getBitmapWidth();
                            int bitmapHeight2 = imageReceiver.getBitmapHeight();
                            if (this.rightImageIsVideo || this.rightCropState == null || !this.rightCropTransform.hasViewTransform()) {
                                i16 = bitmapHeight2;
                                i17 = bitmapWidth2;
                                imageReceiver6 = imageReceiver;
                                i3 = containerViewHeight2;
                                i4 = containerViewWidth;
                                i5 = saveCount;
                                f8 = f7;
                                f47 = f2;
                                i6 = 1;
                            } else {
                                i16 = bitmapHeight2;
                                i17 = bitmapWidth2;
                                imageReceiver6 = imageReceiver;
                                i3 = containerViewHeight2;
                                i4 = containerViewWidth;
                                f8 = f7;
                                i5 = saveCount;
                                f47 = f2;
                                i6 = 1;
                                applyCrop(canvas, containerViewWidth, containerViewHeight2, i17, i16, 1.0f, this.rightCropTransform, this.rightCropState);
                            }
                            float f57 = i17;
                            float f58 = i16;
                            float min3 = Math.min(i4 / f57, i3 / f58);
                            int i19 = (int) (f57 * min3);
                            int i20 = (int) (f58 * min3);
                            if (!this.imagesArrLocals.isEmpty()) {
                                if (this.currentEditMode == i6 || this.sendPhotoType == i6) {
                                    z10 = this.rightCropTransform.isMirrored();
                                } else {
                                    MediaController.CropState cropState = this.rightCropState;
                                    if (cropState != null && cropState.mirrored) {
                                        z10 = true;
                                    }
                                }
                                if (z10) {
                                    canvas.scale(-1.0f, 1.0f);
                                }
                                imageReceiver2 = imageReceiver6;
                                bitmap6 = this.rightBlur.getBitmap(imageReceiver2);
                                if (bitmap6 == null) {
                                    storyBlurDrawer2.paint.setShader(null);
                                    f9 = f47;
                                    storyBlurDrawer2.paint.setAlpha((int) (f46 * 255.0f * f9 * f54));
                                    canvas.scale(bitmap6.getWidth() / (bitmap6.getWidth() - 3.0f), bitmap6.getHeight() / (bitmap6.getHeight() - 3.0f));
                                    canvas.translate((-i19) / 2, (-i20) / 2);
                                    canvas.scale((i19 * 1.0f) / bitmap6.getWidth(), (i20 * 1.0f) / bitmap6.getHeight());
                                    f10 = 0.0f;
                                    if (z) {
                                        int i21 = (int) 0.0f;
                                        canvas.clipRect(i21, i21, bitmap6.getWidth() - i21, bitmap6.getHeight() - i21);
                                    }
                                    canvas.drawBitmap(bitmap6, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                } else {
                                    f9 = f47;
                                    f10 = 0.0f;
                                }
                                canvas.restore();
                                if (!this.zoomAnimation) {
                                    float f59 = this.maxX;
                                    if (f52 > f59 && this.currentEditMode == 0 && this.sendPhotoType != i6) {
                                        float min4 = Math.min(1.0f, (f52 - f59) / i4);
                                        f13 = min4 * 0.3f;
                                        f12 = 1.0f - min4;
                                        f11 = this.maxX;
                                        z4 = (this.videoSizeSet || (aspectRatioFrameLayout = this.aspectRatioFrameLayout) == null || aspectRatioFrameLayout.getVisibility() != 0) ? false : true;
                                        if (!this.centerImage.hasBitmapImage() || (z4 && this.textureUploaded)) {
                                            canvas.save();
                                            int i22 = i4 / 2;
                                            int i23 = i3 / 2;
                                            canvas.translate(getAdditionX(this.currentEditMode) + i22, i23 + getAdditionY(this.currentEditMode));
                                            canvas.translate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                            f14 = f6 - f13;
                                            canvas.scale(f14, f14);
                                            canvas.rotate(f51);
                                            if (z3) {
                                                this.imageBoundsMatrix.preTranslate(i22 + getAdditionX(this.currentEditMode), i23 + getAdditionY(this.currentEditMode));
                                                this.imageBoundsMatrix.preTranslate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                                this.imageBoundsMatrix.preScale(f14, f14, f10, f10);
                                                this.imageBoundsMatrix.preRotate(f51);
                                            }
                                            if (this.currentEditMode == 3 && this.photoPaintView != null) {
                                                float emojiPadding = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) >= AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                                canvas.translate(f10, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding);
                                                if (z3) {
                                                    this.imageBoundsMatrix.preTranslate(f10, emojiPadding * (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()));
                                                }
                                            }
                                            if (!z4 && this.textureUploaded && this.videoSizeSet) {
                                                View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                                                bitmapWidth = view.getMeasuredWidth();
                                                bitmapHeight = view.getMeasuredHeight();
                                            } else {
                                                bitmapWidth = this.centerImage.getBitmapWidth();
                                                bitmapHeight = this.centerImage.getBitmapHeight();
                                            }
                                            float f60 = i4;
                                            f15 = bitmapWidth;
                                            f16 = f60 / f15;
                                            float f61 = i3;
                                            int i24 = bitmapWidth;
                                            f17 = bitmapHeight;
                                            int i25 = bitmapHeight;
                                            float f62 = f61 / f17;
                                            float min5 = Math.min(f16, f62);
                                            float f63 = f62;
                                            i7 = i3;
                                            float f64 = (int) (f15 * min5);
                                            float f65 = (int) (f17 * min5);
                                            if (!this.pipAnimationInProgress || ((z4 && ((this.textureUploaded || this.videoSizeSet) && this.videoCrossfadeStarted && this.videoCrossfadeAlpha == 1.0f)) || (this.videoFrameBitmap != null && this.isCurrentVideo))) {
                                                f18 = f14;
                                                f19 = f17;
                                                imageReceiver3 = imageReceiver2;
                                                i8 = i4;
                                                f20 = f15;
                                                f21 = f16;
                                                f22 = f64;
                                            } else {
                                                float bitmapWidth3 = this.centerImage.getBitmapWidth();
                                                float bitmapHeight3 = this.centerImage.getBitmapHeight();
                                                if (this.isCurrentVideo && this.currentEditMode == 0) {
                                                    i8 = i4;
                                                    if (this.sendPhotoType == 1) {
                                                        min = getCropFillScale(false);
                                                        f22 = bitmapWidth3 * min;
                                                        f65 = min * bitmapHeight3;
                                                        if (this.isCurrentVideo) {
                                                            f18 = f14;
                                                            f19 = f17;
                                                            imageReceiver3 = imageReceiver2;
                                                            f20 = f15;
                                                            f21 = f16;
                                                        } else {
                                                            if (z3) {
                                                                imageReceiver3 = imageReceiver2;
                                                                this.imageBoundsMatrix.preTranslate((-f22) / 2.0f, (-f65) / 2.0f);
                                                                float[] fArr = this.imageBoundsPoints;
                                                                fArr[0] = 0.0f;
                                                                fArr[1] = 0.0f;
                                                                fArr[2] = f22;
                                                                fArr[3] = 0.0f;
                                                                fArr[4] = f22;
                                                                fArr[5] = f65;
                                                                fArr[6] = 0.0f;
                                                                fArr[7] = f65;
                                                                this.imageBoundsMatrix.mapPoints(fArr);
                                                                RectF rectF = this.imageBounds;
                                                                float[] fArr2 = this.imageBoundsPoints;
                                                                f18 = f14;
                                                                float min6 = Math.min(fArr2[0], fArr2[2]);
                                                                float[] fArr3 = this.imageBoundsPoints;
                                                                float min7 = Math.min(min6, Math.min(fArr3[4], fArr3[6]));
                                                                float[] fArr4 = this.imageBoundsPoints;
                                                                f20 = f15;
                                                                float min8 = Math.min(fArr4[1], fArr4[3]);
                                                                float[] fArr5 = this.imageBoundsPoints;
                                                                float min9 = Math.min(min8, Math.min(fArr5[5], fArr5[7]));
                                                                float[] fArr6 = this.imageBoundsPoints;
                                                                f19 = f17;
                                                                float max = Math.max(fArr6[0], fArr6[2]);
                                                                float[] fArr7 = this.imageBoundsPoints;
                                                                float max2 = Math.max(max, Math.max(fArr7[4], fArr7[6]));
                                                                float[] fArr8 = this.imageBoundsPoints;
                                                                f21 = f16;
                                                                float max3 = Math.max(fArr8[1], fArr8[3]);
                                                                float[] fArr9 = this.imageBoundsPoints;
                                                                rectF.set(min7, min9, max2, Math.max(max3, Math.max(fArr9[5], fArr9[7])));
                                                                f40 = this.centerImageInsideBlur[1].set(this.blurBounds.intersect(this.imageBounds));
                                                            } else {
                                                                f18 = f14;
                                                                f19 = f17;
                                                                imageReceiver3 = imageReceiver2;
                                                                f20 = f15;
                                                                f21 = f16;
                                                                f40 = 1.0f;
                                                            }
                                                            if (this.videoCrossfadeAlpha >= 1.0f || (bitmap3 = this.centerBlur.getBitmap(this.centerImage)) == null) {
                                                                f41 = 0.0f;
                                                            } else {
                                                                canvas.save();
                                                                storyBlurDrawer2.paint.setShader(null);
                                                                storyBlurDrawer2.paint.setAlpha((int) (f40 * 255.0f * f12 * (1.0f - this.videoCrossfadeAlpha) * f9));
                                                                canvas.scale(bitmap3.getWidth() / (bitmap3.getWidth() - 3.0f), bitmap3.getHeight() / (bitmap3.getHeight() - 3.0f));
                                                                canvas.translate((-f22) / 2.0f, (-f65) / 2.0f);
                                                                canvas.scale((f22 * 1.0f) / bitmap3.getWidth(), (f65 * 1.0f) / bitmap3.getHeight());
                                                                f41 = 0.0f;
                                                                if (z) {
                                                                    int i26 = (int) 0.0f;
                                                                    canvas.clipRect(i26, i26, bitmap3.getWidth() - i26, bitmap3.getHeight() - i26);
                                                                }
                                                                canvas.drawBitmap(bitmap3, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                canvas.restore();
                                                            }
                                                            if (this.videoCrossfadeAlpha > f41 && (bitmap2 = this.blurManager.getBitmap()) != null) {
                                                                canvas.save();
                                                                storyBlurDrawer2.paint.setShader(null);
                                                                storyBlurDrawer2.paint.setAlpha((int) (f40 * 255.0f * f12 * this.videoCrossfadeAlpha * f9));
                                                                canvas.scale(bitmap2.getWidth() / (bitmap2.getWidth() - 3.0f), bitmap2.getHeight() / (bitmap2.getHeight() - 3.0f));
                                                                canvas.translate((-f22) / 2.0f, (-f65) / 2.0f);
                                                                canvas.scale((f22 * 1.0f) / bitmap2.getWidth(), (f65 * 1.0f) / bitmap2.getHeight());
                                                                if (z) {
                                                                    int i27 = (int) 0.0f;
                                                                    canvas.clipRect(i27, i27, bitmap2.getWidth() - i27, bitmap2.getHeight() - i27);
                                                                }
                                                                canvas.drawBitmap(bitmap2, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                canvas.restore();
                                                            }
                                                            z5 = true;
                                                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                                                f23 = f12;
                                                                f24 = f9;
                                                            } else {
                                                                int orientation = this.cropTransform.getOrientation();
                                                                if (orientation == 90 || orientation == 270) {
                                                                    i9 = i24;
                                                                    i10 = i25;
                                                                } else {
                                                                    i10 = i24;
                                                                    i9 = i25;
                                                                }
                                                                if (this.sendPhotoType == 1 || (this.currentEditMode != 3 && this.switchingToMode != 3)) {
                                                                    if (this.imageMoveAnimation != null && (i11 = this.switchingToMode) != -1) {
                                                                        int i28 = this.currentEditMode;
                                                                        if (i28 != 1 && i11 != 1 && ((i28 != 2 && i28 != 3) || i11 != -1)) {
                                                                            if (i11 == 0) {
                                                                                f29 = this.animationValue;
                                                                            } else {
                                                                                f29 = 1.0f - this.animationValue;
                                                                            }
                                                                            float cropPw = this.cropTransform.getCropPw();
                                                                            float cropPh = this.cropTransform.getCropPh();
                                                                            f30 = i10;
                                                                            f31 = 1.0f - f29;
                                                                            f32 = i9;
                                                                            f33 = (int) ((cropPw + ((1.0f - cropPw) * f31)) * f30);
                                                                            f34 = f60 / f33;
                                                                            f35 = (int) ((cropPh + ((1.0f - cropPh) * f31)) * f32);
                                                                            if (f34 * f35 > f61) {
                                                                            }
                                                                            f24 = f9;
                                                                            f23 = f12;
                                                                            if (this.sendPhotoType != 1) {
                                                                                float f66 = f33 * f34;
                                                                                float f67 = f35 * f34;
                                                                                if (f21 * f19 <= f61) {
                                                                                }
                                                                                float f68 = f66 + ((((f20 * f63) / f18) - f66) * f31);
                                                                                float f69 = f67 + ((((f19 * f63) / f18) - f67) * f31);
                                                                                canvas.clipRect((-f68) / 2.0f, (-f69) / 2.0f, f68 / 2.0f, f69 / 2.0f);
                                                                            }
                                                                            if (this.sendPhotoType != 1) {
                                                                            }
                                                                            if (this.currentEditMode != 1) {
                                                                            }
                                                                            textureView = this.videoTextureView;
                                                                            if (textureView != null) {
                                                                            }
                                                                            float scale = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f31) + 1.0f);
                                                                            f36 = f60 / f30;
                                                                            if (f36 * f32 > f61) {
                                                                            }
                                                                            f37 = scale * (f36 / min5);
                                                                            if (this.sendPhotoType == 1) {
                                                                            }
                                                                            canvas.translate(this.cropTransform.getCropAreaX() * f29, this.cropTransform.getCropAreaY() * f29);
                                                                            canvas.scale(f37, f37);
                                                                            canvas.translate(this.cropTransform.getCropPx() * f30 * min5 * f29, this.cropTransform.getCropPy() * f32 * min5 * f29);
                                                                            if (z3) {
                                                                            }
                                                                            rotation = this.cropTransform.getRotation() + orientation;
                                                                            if (rotation > 180.0f) {
                                                                            }
                                                                            if (this.sendPhotoType != 1) {
                                                                            }
                                                                            float f70 = rotation * f29;
                                                                            canvas.rotate(f70);
                                                                            if (z3) {
                                                                            }
                                                                        }
                                                                    } else {
                                                                        int i29 = this.currentEditMode;
                                                                        if (i29 == 2 || i29 == 3) {
                                                                            f29 = 0.0f;
                                                                            float cropPw2 = this.cropTransform.getCropPw();
                                                                            float cropPh2 = this.cropTransform.getCropPh();
                                                                            f30 = i10;
                                                                            f31 = 1.0f - f29;
                                                                            f32 = i9;
                                                                            f33 = (int) ((cropPw2 + ((1.0f - cropPw2) * f31)) * f30);
                                                                            f34 = f60 / f33;
                                                                            f35 = (int) ((cropPh2 + ((1.0f - cropPh2) * f31)) * f32);
                                                                            if (f34 * f35 > f61) {
                                                                                f34 = f61 / f35;
                                                                            }
                                                                            f24 = f9;
                                                                            f23 = f12;
                                                                            if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
                                                                                float f662 = f33 * f34;
                                                                                float f672 = f35 * f34;
                                                                                if (f21 * f19 <= f61) {
                                                                                    f63 = f21;
                                                                                }
                                                                                float f682 = f662 + ((((f20 * f63) / f18) - f662) * f31);
                                                                                float f692 = f672 + ((((f19 * f63) / f18) - f672) * f31);
                                                                                canvas.clipRect((-f682) / 2.0f, (-f692) / 2.0f, f682 / 2.0f, f692 / 2.0f);
                                                                            }
                                                                            if (this.sendPhotoType != 1 || this.cropTransform.hasViewTransform()) {
                                                                                if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                                                                                    textureView = this.videoTextureView;
                                                                                    if (textureView != null) {
                                                                                        textureView.setScaleX(this.cropTransform.isMirrored() ? -1.0f : 1.0f);
                                                                                        FirstFrameView firstFrameView = this.firstFrameView;
                                                                                        if (firstFrameView != null) {
                                                                                            firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                                                                                        }
                                                                                    }
                                                                                    float scale2 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f31) + 1.0f);
                                                                                    f36 = f60 / f30;
                                                                                    if (f36 * f32 > f61) {
                                                                                        f36 = f61 / f32;
                                                                                    }
                                                                                    f37 = scale2 * (f36 / min5);
                                                                                    if (this.sendPhotoType == 1) {
                                                                                        if (this.currentEditMode == 3 || (i12 = this.switchingToMode) == 3) {
                                                                                            minScale = ((this.cropTransform.getMinScale() - 1.0f) * f31) + 1.0f;
                                                                                        } else if (i12 == 0) {
                                                                                            minScale = this.cropTransform.getMinScale();
                                                                                        }
                                                                                        f37 /= minScale;
                                                                                    }
                                                                                } else {
                                                                                    TextureView textureView2 = this.videoTextureView;
                                                                                    if (textureView2 != null) {
                                                                                        MediaController.CropState cropState2 = this.editState.cropState;
                                                                                        textureView2.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                                                                                        FirstFrameView firstFrameView2 = this.firstFrameView;
                                                                                        if (firstFrameView2 != null) {
                                                                                            firstFrameView2.setScaleX(this.videoTextureView.getScaleX());
                                                                                        }
                                                                                    }
                                                                                    MediaController.CropState cropState3 = this.editState.cropState;
                                                                                    if (cropState3 != null) {
                                                                                        f39 = cropState3.cropScale;
                                                                                        f38 = 1.0f;
                                                                                    } else {
                                                                                        f38 = 1.0f;
                                                                                        f39 = 1.0f;
                                                                                    }
                                                                                    f37 = f39 * ((f34 / min5) / (((f39 - f38) * f31) + f38));
                                                                                }
                                                                                canvas.translate(this.cropTransform.getCropAreaX() * f29, this.cropTransform.getCropAreaY() * f29);
                                                                                canvas.scale(f37, f37);
                                                                                canvas.translate(this.cropTransform.getCropPx() * f30 * min5 * f29, this.cropTransform.getCropPy() * f32 * min5 * f29);
                                                                                if (z3) {
                                                                                    this.imageBoundsMatrix.preTranslate(this.cropTransform.getCropAreaX() * f29, this.cropTransform.getCropAreaY() * f29);
                                                                                    this.imageBoundsMatrix.preScale(f37, f37);
                                                                                    this.imageBoundsMatrix.preTranslate(this.cropTransform.getCropPx() * f30 * min5 * f29, this.cropTransform.getCropPy() * f32 * min5 * f29);
                                                                                }
                                                                                rotation = this.cropTransform.getRotation() + orientation;
                                                                                if (rotation > 180.0f) {
                                                                                    rotation -= 360.0f;
                                                                                }
                                                                                if (this.sendPhotoType != 1 && (this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                    canvas.rotate(rotation);
                                                                                    if (z3) {
                                                                                        this.imageBoundsMatrix.preRotate(rotation);
                                                                                    }
                                                                                } else {
                                                                                    float f702 = rotation * f29;
                                                                                    canvas.rotate(f702);
                                                                                    if (z3) {
                                                                                        this.imageBoundsMatrix.preRotate(f702);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                f29 = 1.0f;
                                                                float cropPw22 = this.cropTransform.getCropPw();
                                                                float cropPh22 = this.cropTransform.getCropPh();
                                                                f30 = i10;
                                                                f31 = 1.0f - f29;
                                                                f32 = i9;
                                                                f33 = (int) ((cropPw22 + ((1.0f - cropPw22) * f31)) * f30);
                                                                f34 = f60 / f33;
                                                                f35 = (int) ((cropPh22 + ((1.0f - cropPh22) * f31)) * f32);
                                                                if (f34 * f35 > f61) {
                                                                }
                                                                f24 = f9;
                                                                f23 = f12;
                                                                if (this.sendPhotoType != 1) {
                                                                }
                                                                if (this.sendPhotoType != 1) {
                                                                }
                                                                if (this.currentEditMode != 1) {
                                                                }
                                                                textureView = this.videoTextureView;
                                                                if (textureView != null) {
                                                                }
                                                                float scale22 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f31) + 1.0f);
                                                                f36 = f60 / f30;
                                                                if (f36 * f32 > f61) {
                                                                }
                                                                f37 = scale22 * (f36 / min5);
                                                                if (this.sendPhotoType == 1) {
                                                                }
                                                                canvas.translate(this.cropTransform.getCropAreaX() * f29, this.cropTransform.getCropAreaY() * f29);
                                                                canvas.scale(f37, f37);
                                                                canvas.translate(this.cropTransform.getCropPx() * f30 * min5 * f29, this.cropTransform.getCropPy() * f32 * min5 * f29);
                                                                if (z3) {
                                                                }
                                                                rotation = this.cropTransform.getRotation() + orientation;
                                                                if (rotation > 180.0f) {
                                                                }
                                                                if (this.sendPhotoType != 1) {
                                                                }
                                                                float f7022 = rotation * f29;
                                                                canvas.rotate(f7022);
                                                                if (z3) {
                                                                }
                                                            }
                                                            if (z5) {
                                                                if (!this.imagesArrLocals.isEmpty()) {
                                                                    if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                                        z7 = this.cropTransform.isMirrored();
                                                                    } else {
                                                                        MediaController.CropState cropState4 = this.editState.cropState;
                                                                        if (cropState4 != null && cropState4.mirrored) {
                                                                            z7 = true;
                                                                        }
                                                                    }
                                                                    if (z7) {
                                                                        f25 = 1.0f;
                                                                        f26 = 0.0f;
                                                                        z8 = false;
                                                                    } else {
                                                                        canvas.save();
                                                                        f25 = 1.0f;
                                                                        canvas.scale(-1.0f, 1.0f);
                                                                        f26 = 0.0f;
                                                                        z8 = true;
                                                                    }
                                                                    if (f8 > f26) {
                                                                        if (z8) {
                                                                            f28 = 2.0f;
                                                                        } else {
                                                                            canvas.save();
                                                                            f28 = 2.0f;
                                                                            z8 = true;
                                                                        }
                                                                        canvas.scale(f25 - (f8 * f28), f25);
                                                                        canvas.skew(0.0f, f8 * 4.0f * (f25 - f8) * 0.25f);
                                                                    }
                                                                    photoViewerWebView = this.photoViewerWebView;
                                                                    if (photoViewerWebView != null || !photoViewerWebView.isLoaded()) {
                                                                        if (z3) {
                                                                            f27 = 1.0f;
                                                                        } else {
                                                                            this.imageBoundsMatrix.preTranslate((-f22) / 2.0f, (-f65) / 2.0f);
                                                                            float[] fArr10 = this.imageBoundsPoints;
                                                                            fArr10[0] = 0.0f;
                                                                            fArr10[1] = 0.0f;
                                                                            fArr10[2] = f22;
                                                                            fArr10[3] = 0.0f;
                                                                            fArr10[4] = f22;
                                                                            fArr10[5] = f65;
                                                                            fArr10[6] = 0.0f;
                                                                            fArr10[7] = f65;
                                                                            this.imageBoundsMatrix.mapPoints(fArr10);
                                                                            RectF rectF2 = this.imageBounds;
                                                                            float[] fArr11 = this.imageBoundsPoints;
                                                                            float min10 = Math.min(fArr11[0], fArr11[2]);
                                                                            float[] fArr12 = this.imageBoundsPoints;
                                                                            float min11 = Math.min(min10, Math.min(fArr12[4], fArr12[6]));
                                                                            float[] fArr13 = this.imageBoundsPoints;
                                                                            float min12 = Math.min(fArr13[1], fArr13[3]);
                                                                            float[] fArr14 = this.imageBoundsPoints;
                                                                            float min13 = Math.min(min12, Math.min(fArr14[5], fArr14[7]));
                                                                            float[] fArr15 = this.imageBoundsPoints;
                                                                            float max4 = Math.max(fArr15[0], fArr15[2]);
                                                                            float[] fArr16 = this.imageBoundsPoints;
                                                                            float max5 = Math.max(max4, Math.max(fArr16[4], fArr16[6]));
                                                                            float[] fArr17 = this.imageBoundsPoints;
                                                                            float max6 = Math.max(fArr17[1], fArr17[3]);
                                                                            float[] fArr18 = this.imageBoundsPoints;
                                                                            rectF2.set(min11, min13, max5, Math.max(max6, Math.max(fArr18[5], fArr18[7])));
                                                                            f27 = this.centerImageInsideBlur[1].set(this.blurBounds.intersect(this.imageBounds));
                                                                        }
                                                                        bitmap = this.blurManager.getBitmap();
                                                                        if (bitmap == null) {
                                                                            bitmap = this.centerBlur.getBitmap(this.centerImage);
                                                                        }
                                                                        if (bitmap != null) {
                                                                            storyBlurDrawer2 = storyBlurDrawer;
                                                                            storyBlurDrawer2.paint.setShader(null);
                                                                            storyBlurDrawer2.paint.setAlpha((int) (f23 * 255.0f * f27 * f24));
                                                                            canvas.scale(bitmap.getWidth() / (bitmap.getWidth() - 3.0f), bitmap.getHeight() / (bitmap.getHeight() - 3.0f));
                                                                            canvas.translate((-f22) / 2.0f, (-f65) / 2.0f);
                                                                            canvas.scale((f22 * 1.0f) / bitmap.getWidth(), (f65 * 1.0f) / bitmap.getHeight());
                                                                            if (z) {
                                                                                int i30 = (int) 0.0f;
                                                                                canvas.clipRect(i30, i30, bitmap.getWidth() - i30, bitmap.getHeight() - i30);
                                                                            }
                                                                            canvas.drawBitmap(bitmap, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                            if (z8) {
                                                                                canvas.restore();
                                                                            }
                                                                            z5 = true;
                                                                        }
                                                                    }
                                                                    storyBlurDrawer2 = storyBlurDrawer;
                                                                    if (z8) {
                                                                    }
                                                                    z5 = true;
                                                                }
                                                                z7 = false;
                                                                if (z7) {
                                                                }
                                                                if (f8 > f26) {
                                                                }
                                                                photoViewerWebView = this.photoViewerWebView;
                                                                if (photoViewerWebView != null) {
                                                                }
                                                                if (z3) {
                                                                }
                                                                bitmap = this.blurManager.getBitmap();
                                                                if (bitmap == null) {
                                                                }
                                                                if (bitmap != null) {
                                                                }
                                                                storyBlurDrawer2 = storyBlurDrawer;
                                                                if (z8) {
                                                                }
                                                                z5 = true;
                                                            } else {
                                                                storyBlurDrawer2 = storyBlurDrawer;
                                                            }
                                                            canvas.restore();
                                                            z6 = z5;
                                                        }
                                                    }
                                                } else {
                                                    i8 = i4;
                                                }
                                                min = Math.min(f60 / bitmapWidth3, f61 / bitmapHeight3);
                                                f22 = bitmapWidth3 * min;
                                                f65 = min * bitmapHeight3;
                                                if (this.isCurrentVideo) {
                                                }
                                            }
                                            z5 = false;
                                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                            }
                                            if (z5) {
                                            }
                                            canvas.restore();
                                            z6 = z5;
                                        } else {
                                            f24 = f9;
                                            imageReceiver3 = imageReceiver2;
                                            i8 = i4;
                                            i7 = i3;
                                            z6 = false;
                                        }
                                        if (!z6 && this.animatingImageView.getVisibility() == 0) {
                                            canvas.save();
                                            if (this.padImageForHorizontalInsets) {
                                                canvas.translate((getRightInset() / 2) - (getLeftInset() / 2), 0.0f);
                                            }
                                            canvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                                            canvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY(), this.animatingImageView.getPivotX(), this.animatingImageView.getPivotY());
                                            bitmap5 = this.centerBlur.getBitmap(this.animatingImageView.getBitmapHolder());
                                            if (bitmap5 != null) {
                                                canvas.save();
                                                storyBlurDrawer2.paint.setShader(null);
                                                storyBlurDrawer2.paint.setAlpha((int) (f24 * 255.0f));
                                                canvas.scale((this.animatingImageView.getWidth() * 1.0f) / bitmap5.getWidth(), (this.animatingImageView.getHeight() * 1.0f) / bitmap5.getHeight());
                                                canvas.scale(bitmap5.getWidth() / (bitmap5.getWidth() - 3.0f), bitmap5.getHeight() / (bitmap5.getHeight() - 3.0f), bitmap5.getWidth() / 2.0f, bitmap5.getHeight() / 2.0f);
                                                canvas.drawBitmap(bitmap5, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                if (z) {
                                                    int i31 = (int) 0.0f;
                                                    canvas.clipRect(i31, i31, bitmap5.getWidth() - i31, bitmap5.getHeight() - i31);
                                                }
                                                canvas.restore();
                                            }
                                            canvas.restore();
                                        }
                                        imageReceiver4 = imageReceiver3;
                                        if (imageReceiver4 == this.leftImage) {
                                            float f71 = z3 ? this.centerImageInsideBlur[0].set(1.0f, true) : 1.0f;
                                            if (imageReceiver4 != null && imageReceiver4.hasBitmapImage()) {
                                                canvas.save();
                                                canvas.translate(i8 / 2, i7 / 2);
                                                int i32 = i8;
                                                float f72 = i32;
                                                canvas.translate(((-(((this.scale + 1.0f) * f72) + AndroidUtilities.dp(30.0f))) / 2.0f) + f52, 0.0f);
                                                int bitmapWidth4 = imageReceiver4.getBitmapWidth();
                                                int bitmapHeight4 = imageReceiver4.getBitmapHeight();
                                                if (this.leftImageIsVideo || this.leftCropState == null || !this.leftCropTransform.hasViewTransform()) {
                                                    imageReceiver5 = imageReceiver4;
                                                    f43 = f71;
                                                    f42 = f24;
                                                    i15 = bitmapHeight4;
                                                } else {
                                                    f43 = f71;
                                                    i15 = bitmapHeight4;
                                                    f42 = f24;
                                                    imageReceiver5 = imageReceiver4;
                                                    applyCrop(canvas, i32, i7, bitmapWidth4, bitmapHeight4, f6, this.leftCropTransform, this.leftCropState);
                                                }
                                                float f73 = bitmapWidth4;
                                                float f74 = i15;
                                                float min14 = Math.min(f72 / f73, i7 / f74);
                                                int i33 = (int) (f73 * min14);
                                                int i34 = (int) (f74 * min14);
                                                if (!this.imagesArrLocals.isEmpty()) {
                                                    if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                        z9 = this.leftCropTransform.isMirrored();
                                                    } else {
                                                        MediaController.CropState cropState5 = this.leftCropState;
                                                        if (cropState5 != null && cropState5.mirrored) {
                                                            z9 = true;
                                                        }
                                                    }
                                                    if (z9) {
                                                        canvas.scale(-1.0f, 1.0f);
                                                    }
                                                    bitmap4 = this.leftBlur.getBitmap(imageReceiver5);
                                                    if (bitmap4 != null) {
                                                        storyBlurDrawer2.paint.setShader(null);
                                                        storyBlurDrawer2.paint.setAlpha((int) (f42 * 255.0f * f43));
                                                        canvas.scale(bitmap4.getWidth() / (bitmap4.getWidth() - 3.0f), bitmap4.getHeight() / (bitmap4.getHeight() - 3.0f));
                                                        canvas.translate((-i33) / 2, (-i34) / 2);
                                                        canvas.scale((i33 * 1.0f) / bitmap4.getWidth(), (i34 * 1.0f) / bitmap4.getHeight());
                                                        if (z) {
                                                            int i35 = (int) 0.0f;
                                                            canvas.clipRect(i35, i35, bitmap4.getWidth() - i35, bitmap4.getHeight() - i35);
                                                        }
                                                        canvas.drawBitmap(bitmap4, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                    }
                                                    canvas.restore();
                                                    canvas.restoreToCount(i5);
                                                    if (i2 != 0) {
                                                        storyBlurDrawer2.paint.setColor(i2);
                                                        storyBlurDrawer2.paint.setAlpha((int) (paint.getAlpha() * AndroidUtilities.lerp(0.7f, 1.0f, f42)));
                                                        canvas.drawPaint(storyBlurDrawer2.paint);
                                                        return;
                                                    }
                                                    return;
                                                }
                                                z9 = false;
                                                if (z9) {
                                                }
                                                bitmap4 = this.leftBlur.getBitmap(imageReceiver5);
                                                if (bitmap4 != null) {
                                                }
                                                canvas.restore();
                                                canvas.restoreToCount(i5);
                                                if (i2 != 0) {
                                                }
                                            }
                                        }
                                        f42 = f24;
                                        canvas.restoreToCount(i5);
                                        if (i2 != 0) {
                                        }
                                    }
                                }
                                f11 = f52;
                                f12 = 1.0f;
                                f13 = 0.0f;
                                if (this.videoSizeSet) {
                                }
                                if (this.centerImage.hasBitmapImage()) {
                                }
                                canvas.save();
                                int i222 = i4 / 2;
                                int i232 = i3 / 2;
                                canvas.translate(getAdditionX(this.currentEditMode) + i222, i232 + getAdditionY(this.currentEditMode));
                                canvas.translate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                f14 = f6 - f13;
                                canvas.scale(f14, f14);
                                canvas.rotate(f51);
                                if (z3) {
                                }
                                if (this.currentEditMode == 3) {
                                    float emojiPadding2 = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) >= AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                    canvas.translate(f10, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding2);
                                    if (z3) {
                                    }
                                }
                                if (!z4) {
                                }
                                bitmapWidth = this.centerImage.getBitmapWidth();
                                bitmapHeight = this.centerImage.getBitmapHeight();
                                float f602 = i4;
                                f15 = bitmapWidth;
                                f16 = f602 / f15;
                                float f612 = i3;
                                int i242 = bitmapWidth;
                                f17 = bitmapHeight;
                                int i252 = bitmapHeight;
                                float f622 = f612 / f17;
                                float min52 = Math.min(f16, f622);
                                float f632 = f622;
                                i7 = i3;
                                float f642 = (int) (f15 * min52);
                                float f652 = (int) (f17 * min52);
                                if (this.pipAnimationInProgress) {
                                }
                                f18 = f14;
                                f19 = f17;
                                imageReceiver3 = imageReceiver2;
                                i8 = i4;
                                f20 = f15;
                                f21 = f16;
                                f22 = f642;
                                z5 = false;
                                if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                }
                                if (z5) {
                                }
                                canvas.restore();
                                z6 = z5;
                                if (!z6) {
                                    canvas.save();
                                    if (this.padImageForHorizontalInsets) {
                                    }
                                    canvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                                    canvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY(), this.animatingImageView.getPivotX(), this.animatingImageView.getPivotY());
                                    bitmap5 = this.centerBlur.getBitmap(this.animatingImageView.getBitmapHolder());
                                    if (bitmap5 != null) {
                                    }
                                    canvas.restore();
                                }
                                imageReceiver4 = imageReceiver3;
                                if (imageReceiver4 == this.leftImage) {
                                }
                                f42 = f24;
                                canvas.restoreToCount(i5);
                                if (i2 != 0) {
                                }
                            }
                            z10 = false;
                            if (z10) {
                            }
                            imageReceiver2 = imageReceiver6;
                            bitmap6 = this.rightBlur.getBitmap(imageReceiver2);
                            if (bitmap6 == null) {
                            }
                            canvas.restore();
                            if (!this.zoomAnimation) {
                            }
                            f11 = f52;
                            f12 = 1.0f;
                            f13 = 0.0f;
                            if (this.videoSizeSet) {
                            }
                            if (this.centerImage.hasBitmapImage()) {
                            }
                            canvas.save();
                            int i2222 = i4 / 2;
                            int i2322 = i3 / 2;
                            canvas.translate(getAdditionX(this.currentEditMode) + i2222, i2322 + getAdditionY(this.currentEditMode));
                            canvas.translate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                            f14 = f6 - f13;
                            canvas.scale(f14, f14);
                            canvas.rotate(f51);
                            if (z3) {
                            }
                            if (this.currentEditMode == 3) {
                            }
                            if (!z4) {
                            }
                            bitmapWidth = this.centerImage.getBitmapWidth();
                            bitmapHeight = this.centerImage.getBitmapHeight();
                            float f6022 = i4;
                            f15 = bitmapWidth;
                            f16 = f6022 / f15;
                            float f6122 = i3;
                            int i2422 = bitmapWidth;
                            f17 = bitmapHeight;
                            int i2522 = bitmapHeight;
                            float f6222 = f6122 / f17;
                            float min522 = Math.min(f16, f6222);
                            float f6322 = f6222;
                            i7 = i3;
                            float f6422 = (int) (f15 * min522);
                            float f6522 = (int) (f17 * min522);
                            if (this.pipAnimationInProgress) {
                            }
                            f18 = f14;
                            f19 = f17;
                            imageReceiver3 = imageReceiver2;
                            i8 = i4;
                            f20 = f15;
                            f21 = f16;
                            f22 = f6422;
                            z5 = false;
                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                            }
                            if (z5) {
                            }
                            canvas.restore();
                            z6 = z5;
                            if (!z6) {
                            }
                            imageReceiver4 = imageReceiver3;
                            if (imageReceiver4 == this.leftImage) {
                            }
                            f42 = f24;
                            canvas.restoreToCount(i5);
                            if (i2 != 0) {
                            }
                        }
                    }
                }
                f44 = f52;
                f45 = 0.0f;
                f46 = 1.0f;
                if (imageReceiver.hasBitmapImage()) {
                }
            }
            imageReceiver2 = imageReceiver;
            i3 = containerViewHeight2;
            i4 = containerViewWidth;
            i5 = saveCount;
            f8 = f7;
            f9 = f2;
            f10 = 0.0f;
            i6 = 1;
            if (!this.zoomAnimation) {
            }
            f11 = f52;
            f12 = 1.0f;
            f13 = 0.0f;
            if (this.videoSizeSet) {
            }
            if (this.centerImage.hasBitmapImage()) {
            }
            canvas.save();
            int i22222 = i4 / 2;
            int i23222 = i3 / 2;
            canvas.translate(getAdditionX(this.currentEditMode) + i22222, i23222 + getAdditionY(this.currentEditMode));
            canvas.translate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
            f14 = f6 - f13;
            canvas.scale(f14, f14);
            canvas.rotate(f51);
            if (z3) {
            }
            if (this.currentEditMode == 3) {
            }
            if (!z4) {
            }
            bitmapWidth = this.centerImage.getBitmapWidth();
            bitmapHeight = this.centerImage.getBitmapHeight();
            float f60222 = i4;
            f15 = bitmapWidth;
            f16 = f60222 / f15;
            float f61222 = i3;
            int i24222 = bitmapWidth;
            f17 = bitmapHeight;
            int i25222 = bitmapHeight;
            float f62222 = f61222 / f17;
            float min5222 = Math.min(f16, f62222);
            float f63222 = f62222;
            i7 = i3;
            float f64222 = (int) (f15 * min5222);
            float f65222 = (int) (f17 * min5222);
            if (this.pipAnimationInProgress) {
            }
            f18 = f14;
            f19 = f17;
            imageReceiver3 = imageReceiver2;
            i8 = i4;
            f20 = f15;
            f21 = f16;
            f22 = f64222;
            z5 = false;
            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
            }
            if (z5) {
            }
            canvas.restore();
            z6 = z5;
            if (!z6) {
            }
            imageReceiver4 = imageReceiver3;
            if (imageReceiver4 == this.leftImage) {
            }
            f42 = f24;
            canvas.restoreToCount(i5);
            if (i2 != 0) {
            }
        }
        imageReceiver = null;
        if (imageReceiver == this.rightImage) {
        }
        imageReceiver2 = imageReceiver;
        i3 = containerViewHeight2;
        i4 = containerViewWidth;
        i5 = saveCount;
        f8 = f7;
        f9 = f2;
        f10 = 0.0f;
        i6 = 1;
        if (!this.zoomAnimation) {
        }
        f11 = f52;
        f12 = 1.0f;
        f13 = 0.0f;
        if (this.videoSizeSet) {
        }
        if (this.centerImage.hasBitmapImage()) {
        }
        canvas.save();
        int i222222 = i4 / 2;
        int i232222 = i3 / 2;
        canvas.translate(getAdditionX(this.currentEditMode) + i222222, i232222 + getAdditionY(this.currentEditMode));
        canvas.translate(f11, f53 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        f14 = f6 - f13;
        canvas.scale(f14, f14);
        canvas.rotate(f51);
        if (z3) {
        }
        if (this.currentEditMode == 3) {
        }
        if (!z4) {
        }
        bitmapWidth = this.centerImage.getBitmapWidth();
        bitmapHeight = this.centerImage.getBitmapHeight();
        float f602222 = i4;
        f15 = bitmapWidth;
        f16 = f602222 / f15;
        float f612222 = i3;
        int i242222 = bitmapWidth;
        f17 = bitmapHeight;
        int i252222 = bitmapHeight;
        float f622222 = f612222 / f17;
        float min52222 = Math.min(f16, f622222);
        float f632222 = f622222;
        i7 = i3;
        float f642222 = (int) (f15 * min52222);
        float f652222 = (int) (f17 * min52222);
        if (this.pipAnimationInProgress) {
        }
        f18 = f14;
        f19 = f17;
        imageReceiver3 = imageReceiver2;
        i8 = i4;
        f20 = f15;
        f21 = f16;
        f22 = f642222;
        z5 = false;
        if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
        }
        if (z5) {
        }
        canvas.restore();
        z6 = z5;
        if (!z6) {
        }
        imageReceiver4 = imageReceiver3;
        if (imageReceiver4 == this.leftImage) {
        }
        f42 = f24;
        canvas.restoreToCount(i5);
        if (i2 != 0) {
        }
    }

    private void cancelStickerClippingMode() {
        if (this.sendPhotoType == 11 && this.cutOutBtn.isCancelState()) {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(true, true);
            this.stickerMakerView.disableClippingMode();
            this.containerView.invalidate();
        }
    }

    public void invalidateBlur() {
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView == null || !stickerMakerView.isThanosInProgress) {
            CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
            if (captionPhotoViewer != null) {
                captionPhotoViewer.invalidateBlur();
            }
            BlurButton blurButton = this.cutOutBtn;
            if (blurButton != null) {
                blurButton.invalidateBlur();
            }
            BlurButton blurButton2 = this.eraseBtn;
            if (blurButton2 != null) {
                blurButton2.invalidateBlur();
            }
            BlurButton blurButton3 = this.restoreBtn;
            if (blurButton3 != null) {
                blurButton3.invalidateBlur();
            }
            BlurButton blurButton4 = this.undoBtn;
            if (blurButton4 != null) {
                blurButton4.invalidateBlur();
            }
            BlurButton blurButton5 = this.outlineBtn;
            if (blurButton5 != null) {
                blurButton5.invalidateBlur();
            }
            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
            if (videoTimelinePlayView != null) {
                videoTimelinePlayView.invalidateBlur();
            }
            FrameLayoutDrawer frameLayoutDrawer = this.containerView;
            if (frameLayoutDrawer != null) {
                frameLayoutDrawer.invalidate();
            }
        }
    }

    /* loaded from: classes4.dex */
    public class BlurButton extends StickerCutOutBtn {
        private boolean active;
        private final AnimatedFloat activeFloat;
        private final Path path;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public BlurButton() {
            super(r8.stickerMakerView, r8.activityContext, r8.resourcesProvider, r8.blurManager);
            PhotoViewer.this = r8;
            this.path = new Path();
            this.activeFloat = new AnimatedFloat(this, 0L, 420L, CubicBezierInterpolator.EASE_OUT_QUINT);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.Paint.Views.StickerCutOutBtn, org.telegram.ui.Stories.recorder.ButtonWithCounterView, android.view.View
        public void onDraw(Canvas canvas) {
            canvas.save();
            this.path.rewind();
            this.path.addRoundRect(this.bounds, AndroidUtilities.dp(this.rad), AndroidUtilities.dp(this.rad), Path.Direction.CW);
            canvas.clipPath(this.path);
            canvas.translate(-getX(), -getY());
            if (this == PhotoViewer.this.eraseBtn || this == PhotoViewer.this.restoreBtn) {
                canvas.translate(-PhotoViewer.this.btnLayout.getX(), -PhotoViewer.this.btnLayout.getY());
            }
            PhotoViewer.this.drawCaptionBlur(canvas, this.blurDrawer, -13948117, AndroidUtilities.DARK_STATUS_BAR_OVERLAY, false, true, false);
            float f = this.activeFloat.set(this.active);
            if (f > 0.0f) {
                canvas.drawColor(Theme.multAlpha(-1, f));
            }
            setTextColor(ColorUtils.blendARGB(-1, -16777216, f));
            canvas.restore();
            super.onDraw(canvas);
        }

        @Override // android.view.View
        public void onDrawForeground(Canvas canvas) {
            canvas.save();
            canvas.clipPath(this.path);
            super.onDrawForeground(canvas);
            canvas.restore();
        }

        public void setActive(boolean z, boolean z2) {
            this.active = z;
            if (!z2) {
                this.activeFloat.set(z, true);
            }
            invalidate();
        }

        public boolean isActive() {
            return this.active;
        }
    }

    private void applyTransformToOutline(Canvas canvas) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        if (this.imageMoveAnimation != null) {
            f2 = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            f = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
        } else {
            f = this.scale;
            f2 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f = this.animateToScale;
            }
        }
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight = getContainerViewHeight();
        canvas.translate(getAdditionX(this.currentEditMode), getAdditionY(this.currentEditMode));
        canvas.translate(f5, f4 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        canvas.scale(f, f);
        canvas.rotate(f3);
        int bitmapWidth = this.centerImage.getBitmapWidth();
        int bitmapHeight = this.centerImage.getBitmapHeight();
        float f8 = containerViewWidth;
        float f9 = bitmapWidth;
        float f10 = f8 / f9;
        float f11 = containerViewHeight;
        float f12 = bitmapHeight;
        float f13 = f11 / f12;
        float min = Math.min(f10, f13);
        int orientation = this.cropTransform.getOrientation();
        if (orientation == 90 || orientation == 270) {
            bitmapHeight = bitmapWidth;
            bitmapWidth = bitmapHeight;
        }
        float cropPw = this.cropTransform.getCropPw();
        float cropPh = this.cropTransform.getCropPh();
        float f14 = bitmapWidth;
        float f15 = bitmapHeight;
        float f16 = (int) ((cropPw + ((1.0f - cropPw) * 0.0f)) * f14);
        float f17 = f8 / f16;
        float f18 = (int) ((cropPh + ((1.0f - cropPh) * 0.0f)) * f15);
        if (f17 * f18 > f11) {
            f17 = f11 / f18;
        }
        float f19 = f2;
        boolean z = true;
        if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
            float f20 = f16 * f17;
            float f21 = f18 * f17;
            if (f10 * f12 > f11) {
                f10 = f13;
            }
            float f22 = f20 + ((((f9 * f10) / f) - f20) * 0.0f);
            float f23 = f21 + ((((f12 * f10) / f) - f21) * 0.0f);
            canvas.clipRect((-f22) / 2.0f, (-f23) / 2.0f, f22 / 2.0f, f23 / 2.0f);
        }
        if (this.sendPhotoType == 1 || this.cropTransform.hasViewTransform()) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                MediaController.CropState cropState = this.editState.cropState;
                textureView.setScaleX((cropState == null || !cropState.mirrored) ? 1.0f : -1.0f);
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                }
            }
            MediaController.CropState cropState2 = this.editState.cropState;
            if (cropState2 != null) {
                f7 = cropState2.cropScale;
                f6 = 1.0f;
            } else {
                f6 = 1.0f;
                f7 = 1.0f;
            }
            float f24 = ((f17 / min) / (((f7 - f6) * 0.0f) + f6)) * f7;
            canvas.translate(this.cropTransform.getCropAreaX() * f6, this.cropTransform.getCropAreaY() * f6);
            canvas.scale(f24, f24);
            canvas.translate(this.cropTransform.getCropPx() * f14 * min * f6, this.cropTransform.getCropPy() * f15 * min * f6);
            float rotation = this.cropTransform.getRotation() + orientation;
            if (rotation > 180.0f) {
                rotation -= 360.0f;
            }
            canvas.rotate(rotation);
        }
        boolean z2 = false;
        if (!this.imagesArrLocals.isEmpty()) {
            MediaController.CropState cropState3 = this.editState.cropState;
            z2 = (cropState3 == null || !cropState3.mirrored) ? false : false;
        }
        if (z2) {
            canvas.scale(-1.0f, 1.0f);
        }
        if (f19 > 0.0f) {
            canvas.scale(1.0f - (f19 * 2.0f), 1.0f);
            canvas.skew(0.0f, 4.0f * f19 * (1.0f - f19) * 0.25f);
        }
    }

    private void applyTransformToMatrix(Matrix matrix) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        if (this.imageMoveAnimation != null) {
            f2 = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            f = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
        } else {
            f = this.scale;
            f2 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f = this.animateToScale;
            }
        }
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight = getContainerViewHeight();
        matrix.preTranslate(f5, f4 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        matrix.preScale(f, f);
        matrix.preRotate(f3);
        int bitmapWidth = this.centerImage.getBitmapWidth();
        int bitmapHeight = this.centerImage.getBitmapHeight();
        float f6 = containerViewWidth;
        float f7 = containerViewHeight;
        float min = Math.min(f6 / bitmapWidth, f7 / bitmapHeight);
        int orientation = this.cropTransform.getOrientation();
        if (orientation == 90 || orientation == 270) {
            bitmapHeight = bitmapWidth;
            bitmapWidth = bitmapHeight;
        }
        float cropPw = this.cropTransform.getCropPw();
        float cropPh = this.cropTransform.getCropPh();
        float f8 = bitmapWidth;
        float f9 = bitmapHeight;
        float f10 = f6 / ((int) ((cropPw + ((1.0f - cropPw) * 0.0f)) * f8));
        float f11 = (int) ((cropPh + ((1.0f - cropPh) * 0.0f)) * f9);
        if (f10 * f11 > f7) {
            f10 = f7 / f11;
        }
        boolean z = true;
        if (this.sendPhotoType == 1 || this.cropTransform.hasViewTransform()) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                MediaController.CropState cropState = this.editState.cropState;
                textureView.setScaleX((cropState == null || !cropState.mirrored) ? 1.0f : -1.0f);
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                }
            }
            MediaController.CropState cropState2 = this.editState.cropState;
            float f12 = cropState2 != null ? cropState2.cropScale : 1.0f;
            float f13 = f12 * ((f10 / min) / (((f12 - 1.0f) * 0.0f) + 1.0f));
            matrix.preTranslate(this.cropTransform.getCropAreaX() * 1.0f, this.cropTransform.getCropAreaY() * 1.0f);
            matrix.preScale(f13, f13);
            matrix.preTranslate(this.cropTransform.getCropPx() * f8 * min * 1.0f, this.cropTransform.getCropPy() * f9 * min * 1.0f);
            float rotation = this.cropTransform.getRotation() + orientation;
            if (rotation > 180.0f) {
                rotation -= 360.0f;
            }
            matrix.preRotate(rotation);
        }
        boolean z2 = false;
        if (!this.imagesArrLocals.isEmpty()) {
            MediaController.CropState cropState3 = this.editState.cropState;
            z2 = (cropState3 == null || !cropState3.mirrored) ? false : false;
        }
        if (z2) {
            matrix.preScale(-1.0f, 1.0f);
        }
        if (f2 > 0.0f) {
            matrix.preScale(1.0f - (2.0f * f2), 1.0f);
            matrix.preSkew(0.0f, 4.0f * f2 * (1.0f - f2) * 0.25f);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:92:0x0067, code lost:
        if (r4.startsWith("https://" + org.telegram.messenger.MessagesController.getInstance(r16.currentAccount).linkPrefix) == false) goto L33;
     */
    /* JADX WARN: Removed duplicated region for block: B:142:0x02b6 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x02b7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openAdsMenu() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored() || this.menuItem.getAlpha() <= 0.5f) {
            return;
        }
        final int i2 = this.currentMessageObject.currentAccount;
        final DarkThemeResourceProvider darkThemeResourceProvider = new DarkThemeResourceProvider();
        final ItemOptions makeOptions = ItemOptions.makeOptions(this.containerView, darkThemeResourceProvider, this.menuItem, true);
        makeOptions.translate(0.0f, -AndroidUtilities.dp(46.0f));
        makeOptions.setGravity(5);
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.sponsoredInfo == null && messageObject2.sponsoredAdditionalInfo == null) {
            String str = messageObject2.sponsoredUrl;
            if (str != null) {
            }
            if (!UserConfig.getInstance(i2).isPremium() && !MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked() && !this.currentMessageObject.sponsoredCanReport) {
                makeOptions.add(R.drawable.msg_block2, LocaleController.getString(R.string.HideAd), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda88
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$openAdsMenu$112(i2, darkThemeResourceProvider);
                    }
                });
            }
            boolean z = this.currentMessageObject.sponsoredCanReport;
            makeOptions.add(R.drawable.msg_info, LocaleController.getString(R.string.AboutRevenueSharingAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda96
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$113(darkThemeResourceProvider);
                }
            });
            if ((this.parentFragment instanceof ChatActivity) && !MessagesController.getInstance(i2).premiumFeaturesBlocked()) {
                makeOptions.addGap();
                makeOptions.add(R.drawable.msg_cancel, LocaleController.getString(R.string.RemoveAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda89
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$openAdsMenu$114(i2, darkThemeResourceProvider);
                    }
                });
            }
            if (makeOptions.getItemsCount() > 0) {
                return;
            }
            makeOptions.show();
            return;
        }
        final ItemOptions makeSwipeback = makeOptions.makeSwipeback();
        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.activityContext, true, false, (Theme.ResourcesProvider) darkThemeResourceProvider);
        actionBarMenuSubItem.setItemHeight(44);
        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
        actionBarMenuSubItem.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda26
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ItemOptions.this.closeSwipeback();
            }
        });
        makeSwipeback.addView(actionBarMenuSubItem, LayoutHelper.createLinear(-1, -2));
        makeSwipeback.addView(new ActionBarPopupWindow.GapView(this.activityContext, darkThemeResourceProvider), LayoutHelper.createLinear(-1, 8));
        ArrayList arrayList = new ArrayList();
        String str2 = this.currentMessageObject.sponsoredUrl;
        if (str2 != null && !TextUtils.equals(AndroidUtilities.getHostAuthority(str2), MessagesController.getInstance(this.currentAccount).linkPrefix)) {
            TextView textView = new TextView(this.activityContext);
            textView.setTextColor(getThemedColor(Theme.key_chat_messageLinkIn));
            textView.setTextSize(1, 14.0f);
            textView.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView.setMaxWidth(AndroidUtilities.dp(300.0f));
            Uri parse = Uri.parse(this.currentMessageObject.sponsoredUrl);
            textView.setText(Browser.replaceHostname(parse, Browser.IDN_toUnicode(parse.getHost()), null));
            textView.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, this.currentMessageObject.sponsoredAdditionalInfo == null ? 6 : 0));
            textView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda61
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$107(makeOptions, view);
                }
            });
            textView.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda62
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    boolean lambda$openAdsMenu$108;
                    lambda$openAdsMenu$108 = PhotoViewer.this.lambda$openAdsMenu$108(darkThemeResourceProvider, view);
                    return lambda$openAdsMenu$108;
                }
            });
            arrayList.add(textView);
        }
        if (this.currentMessageObject.sponsoredInfo != null) {
            TextView textView2 = new TextView(this.activityContext);
            textView2.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
            textView2.setTextSize(1, 14.0f);
            textView2.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView2.setMaxWidth(AndroidUtilities.dp(300.0f));
            textView2.setText(this.currentMessageObject.sponsoredInfo);
            textView2.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, this.currentMessageObject.sponsoredAdditionalInfo == null ? 6 : 0));
            textView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda59
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$109(darkThemeResourceProvider, view);
                }
            });
            arrayList.add(textView2);
        }
        if (this.currentMessageObject.sponsoredAdditionalInfo != null) {
            TextView textView3 = new TextView(this.activityContext);
            textView3.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
            textView3.setTextSize(1, 14.0f);
            textView3.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView3.setMaxWidth(AndroidUtilities.dp(300.0f));
            textView3.setText(this.currentMessageObject.sponsoredAdditionalInfo);
            textView3.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, 6));
            textView3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda60
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$110(darkThemeResourceProvider, view);
                }
            });
            arrayList.add(textView3);
        }
        for (int i3 = 0; i3 < arrayList.size(); i3++) {
            View view = (View) arrayList.get(i3);
            if (i3 > 0) {
                FrameLayout frameLayout = new FrameLayout(this.activityContext);
                frameLayout.setBackgroundColor(getThemedColor(Theme.key_divider));
                i = -1;
                LinearLayout.LayoutParams createLinear = LayoutHelper.createLinear(-1, 1);
                createLinear.height = 1;
                makeSwipeback.addView(frameLayout, createLinear);
            } else {
                i = -1;
            }
            makeSwipeback.addView(view, LayoutHelper.createLinear(i, -2));
        }
        makeOptions.add(R.drawable.msg_channel, LocaleController.getString(R.string.SponsoredMessageSponsorReportable), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda66
            @Override // java.lang.Runnable
            public final void run() {
                ItemOptions.this.openSwipeback(makeSwipeback);
            }
        });
        if (!UserConfig.getInstance(i2).isPremium()) {
            makeOptions.add(R.drawable.msg_block2, LocaleController.getString(R.string.HideAd), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda88
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$112(i2, darkThemeResourceProvider);
                }
            });
        }
        boolean z2 = this.currentMessageObject.sponsoredCanReport;
        makeOptions.add(R.drawable.msg_info, LocaleController.getString(R.string.AboutRevenueSharingAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda96
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$openAdsMenu$113(darkThemeResourceProvider);
            }
        });
        if (this.parentFragment instanceof ChatActivity) {
            makeOptions.addGap();
            makeOptions.add(R.drawable.msg_cancel, LocaleController.getString(R.string.RemoveAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda89
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$114(i2, darkThemeResourceProvider);
                }
            });
        }
        if (makeOptions.getItemsCount() > 0) {
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$107(ItemOptions itemOptions, View view) {
        if (this.currentMessageObject == null) {
            return;
        }
        itemOptions.dismiss();
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ((ChatActivity) baseFragment).logSponsoredClicked(this.currentMessageObject);
        }
        Browser.openUrl(this.activityContext, this.currentMessageObject.sponsoredUrl, true, false);
    }

    public /* synthetic */ boolean lambda$openAdsMenu$108(Theme.ResourcesProvider resourcesProvider, View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return false;
        }
        if (AndroidUtilities.addToClipboard(messageObject.sponsoredUrl)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyLinkBulletin().show();
            return true;
        }
        return true;
    }

    public /* synthetic */ void lambda$openAdsMenu$109(Theme.ResourcesProvider resourcesProvider, View view) {
        if (AndroidUtilities.addToClipboard(this.currentMessageObject.sponsoredInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$110(Theme.ResourcesProvider resourcesProvider, View view) {
        if (AndroidUtilities.addToClipboard(this.currentMessageObject.sponsoredAdditionalInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$112(int i, Theme.ResourcesProvider resourcesProvider) {
        if (UserConfig.getInstance(i).isPremium()) {
            BulletinFactory.of(this.containerView, resourcesProvider).createAdReportedBulletin(LocaleController.getString(R.string.AdHidden)).show();
            MessagesController.getInstance(i).disableAds(true);
            BaseFragment baseFragment = this.parentFragment;
            if (baseFragment instanceof ChatActivity) {
                ChatActivity chatActivity = (ChatActivity) baseFragment;
                chatActivity.removeFromSponsored(this.currentMessageObject);
                chatActivity.removeMessageWithThanos(this.currentMessageObject);
                return;
            }
            return;
        }
        new PremiumFeatureBottomSheet(this.parentFragment, 3, true).show();
    }

    public /* synthetic */ void lambda$openAdsMenu$113(Theme.ResourcesProvider resourcesProvider) {
        RevenueSharingAdsInfoBottomSheet.showAlert(this.activityContext, this.parentFragment, resourcesProvider);
    }

    public /* synthetic */ void lambda$openAdsMenu$114(int i, Theme.ResourcesProvider resourcesProvider) {
        if (UserConfig.getInstance(i).isPremium()) {
            BulletinFactory.of(this.containerView, resourcesProvider).createAdReportedBulletin(LocaleController.getString(R.string.AdHidden)).show();
            MessagesController.getInstance(i).disableAds(true);
            BaseFragment baseFragment = this.parentFragment;
            if (baseFragment instanceof ChatActivity) {
                ChatActivity chatActivity = (ChatActivity) baseFragment;
                chatActivity.removeFromSponsored(this.currentMessageObject);
                chatActivity.removeMessageWithThanos(this.currentMessageObject);
                return;
            }
            return;
        }
        new PremiumFeatureBottomSheet(this.parentFragment, 3, true).show();
    }

    private static CharSequence sponsoredCaption(MessageObject messageObject, CharSequence charSequence) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (!TextUtils.isEmpty(messageObject.sponsoredTitle)) {
            spannableStringBuilder.append((CharSequence) messageObject.sponsoredTitle);
            spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder.length(), 33);
            spannableStringBuilder.setSpan(new LineHeightSpan() { // from class: org.telegram.ui.PhotoViewer.81
                @Override // android.text.style.LineHeightSpan
                public void chooseHeight(CharSequence charSequence2, int i, int i2, int i3, int i4, Paint.FontMetricsInt fontMetricsInt) {
                    fontMetricsInt.descent += AndroidUtilities.dp(4.0f);
                    fontMetricsInt.ascent = fontMetricsInt.ascent;
                }
            }, 0, spannableStringBuilder.length(), 33);
            spannableStringBuilder.append((CharSequence) "\n");
        }
        spannableStringBuilder.append(charSequence);
        return spannableStringBuilder;
    }

    private void createAdButtonView() {
        if (this.adButtonView != null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(this.activityContext);
        this.adButtonView = frameLayout;
        frameLayout.setBackground(Theme.createRadSelectorDrawable(620756991, 369098751, 8, 8));
        ScaleStateListAnimator.apply(this.adButtonView, 0.05f, 1.25f);
        TextView textView = new TextView(this.activityContext);
        this.adButtonTextView = textView;
        textView.setTextSize(1, 14.0f);
        this.adButtonTextView.setTextColor(-1);
        this.adButtonTextView.setTypeface(AndroidUtilities.bold());
        this.adButtonView.addView(this.adButtonTextView, LayoutHelper.createFrame(-2, -2, 17));
        this.adButtonView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda38
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createAdButtonView$115(view);
            }
        });
    }

    public /* synthetic */ void lambda$createAdButtonView$115(View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored()) {
            return;
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ((ChatActivity) baseFragment).logSponsoredClicked(this.currentMessageObject);
        }
        closePhoto(true, false);
        String str = this.currentMessageObject.sponsoredUrl;
        if (str != null) {
            Context context = LaunchActivity.instance;
            if (context == null) {
                context = this.activityContext;
            }
            Browser.openUrl(context, Uri.parse(str), true, false, false, null, null, false);
        }
    }
}

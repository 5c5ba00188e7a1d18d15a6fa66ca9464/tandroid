package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Insets;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.RecordingCanvas;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.RenderEffect;
import android.graphics.RenderNode;
import android.graphics.Shader;
import android.graphics.SurfaceTexture;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.provider.Settings;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.ClickableSpan;
import android.text.style.LineHeightSpan;
import android.text.style.URLSpan;
import android.transition.ChangeBounds;
import android.transition.Fade;
import android.transition.Transition;
import android.transition.TransitionManager;
import android.transition.TransitionSet;
import android.transition.TransitionValues;
import android.util.FloatProperty;
import android.util.Pair;
import android.util.Property;
import android.util.Range;
import android.util.SparseArray;
import android.view.ContextThemeWrapper;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.OrientationEventListener;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewPropertyAnimator;
import android.view.ViewTreeObserver;
import android.view.WindowInsets;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.view.animation.OvershootInterpolator;
import android.webkit.WebView;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.OverScroller;
import android.widget.Scroller;
import android.widget.Space;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ViewSwitcher;
import androidx.collection.ArrayMap;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.widget.NestedScrollView;
import androidx.dynamicanimation.animation.DynamicAnimation;
import androidx.dynamicanimation.animation.FloatValueHolder;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerEnd;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.analytics.AnalyticsListener;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import com.google.android.gms.vision.Frame;
import com.google.android.gms.vision.face.FaceDetector;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.AnimationNotificationsLocker;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.Bitmaps;
import org.telegram.messenger.BotWebViewVibrationEffect;
import org.telegram.messenger.BringAppForegroundService;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DispatchQueue;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FileStreamLoadOperation;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsSettingsFacade;
import org.telegram.messenger.R;
import org.telegram.messenger.SecureDocument;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.TranslateController;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.camera.Size;
import org.telegram.messenger.video.VideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.PhotoPickerPhotoCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChooseQualityLayout;
import org.telegram.ui.ChooseSpeedLayout;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedFloat;
import org.telegram.ui.Components.AnimatedTextView;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BlurringShader;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.CaptionPhotoViewer;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.CheckBox;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.Crop.CropAreaView;
import org.telegram.ui.Components.Crop.CropTransform;
import org.telegram.ui.Components.Crop.CropView;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.FilterGLThread;
import org.telegram.ui.Components.FilterShaders;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.Forum.ForumUtilities;
import org.telegram.ui.Components.GestureDetector2;
import org.telegram.ui.Components.GroupedPhotosListView;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.ItemOptions;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.LoadingDrawable;
import org.telegram.ui.Components.MediaActivity;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.OptionsSpeedIconDrawable;
import org.telegram.ui.Components.OtherDocumentPlaceholderDrawable;
import org.telegram.ui.Components.Paint.Views.LPhotoPaintView;
import org.telegram.ui.Components.Paint.Views.MaskPaintView;
import org.telegram.ui.Components.Paint.Views.PaintWeightChooserView;
import org.telegram.ui.Components.Paint.Views.StickerCutOutBtn;
import org.telegram.ui.Components.Paint.Views.StickerMakerBackgroundView;
import org.telegram.ui.Components.Paint.Views.StickerMakerView;
import org.telegram.ui.Components.PaintingOverlay;
import org.telegram.ui.Components.PhotoCropView;
import org.telegram.ui.Components.PhotoFilterCurvesControl;
import org.telegram.ui.Components.PhotoFilterView;
import org.telegram.ui.Components.PhotoViewerWebView;
import org.telegram.ui.Components.PickerBottomLayoutViewer;
import org.telegram.ui.Components.PipVideoOverlay;
import org.telegram.ui.Components.PlayPauseDrawable;
import org.telegram.ui.Components.PopupSwipeBackLayout;
import org.telegram.ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.QuoteSpan;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ScaleStateListAnimator;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
import org.telegram.ui.Components.SpeedIconDrawable;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.TextViewSwitcher;
import org.telegram.ui.Components.ThanosEffect;
import org.telegram.ui.Components.Tooltip;
import org.telegram.ui.Components.TranslateAlert2;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.VideoCompressButton;
import org.telegram.ui.Components.VideoEditTextureView;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.VideoPlayer;
import org.telegram.ui.Components.VideoPlayerSeekBar;
import org.telegram.ui.Components.VideoSeekPreviewImage;
import org.telegram.ui.Components.VideoTimelinePlayView;
import org.telegram.ui.Components.ViewHelper;
import org.telegram.ui.Components.spoilers.SpoilersTextView;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.Stories.DarkThemeResourceProvider;
import org.telegram.ui.Stories.recorder.KeyboardNotifier;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes4.dex */
public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector2.OnGestureListener, GestureDetector2.OnDoubleTapListener {
    private static volatile PhotoViewer Instance;
    private static volatile PhotoViewer PipInstance;
    private static final Property VPC_PROGRESS;
    private static DecelerateInterpolator decelerateInterpolator;
    private static Drawable[] progressDrawables;
    private static Paint progressPaint;
    private boolean ALLOW_USE_SURFACE;
    public final Property FLASH_VIEW_VALUE;
    private int aboutToSwitchTo;
    private ActionBar actionBar;
    private AnimatorSet actionBarAnimator;
    private PhotoViewerActionBarContainer actionBarContainer;
    private Map actionBarItemsVisibility;
    private boolean actionBarWasShownBeforeByEnd;
    private Context activityContext;
    private TextView adButtonTextView;
    private FrameLayout adButtonView;
    private ActionBarMenuSubItem allMediaItem;
    private boolean allowOrder;
    private boolean allowShare;
    private boolean allowShowFullscreenButton;
    private float animateToMirror;
    private float animateToRotate;
    private float animateToScale;
    private float animateToX;
    private float animateToY;
    private ClippingImageView animatingImageView;
    private Runnable animationEndRunnable;
    private int animationInProgress;
    private long animationStartTime;
    private float animationValue;
    private float[][] animationValues;
    private boolean applying;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private boolean attachedToWindow;
    private long audioFramesSize;
    private float avatarStartProgress;
    private long avatarStartTime;
    private final ArrayList avatarsArr;
    private long avatarsDialogId;
    private BackgroundDrawable backgroundDrawable;
    private Paint bitmapPaint;
    private volatile int bitrate;
    private Paint blackPaint;
    private final AnimatedFloat blurAlpha;
    private RectF blurBounds;
    private BlurringShader.BlurManager blurManager;
    private LinearGradient bottomFancyShadow;
    private Matrix bottomFancyShadowMatrix;
    private Paint bottomFancyShadowPaint;
    private FrameLayout bottomLayout;
    private LinearLayout btnLayout;
    private boolean canDragDown;
    private boolean canEditAvatar;
    private boolean canZoom;
    private ObjectAnimator captionAnimator;
    private FrameLayout captionContainer;
    private String captionDetectedLanguage;
    private CaptionPhotoViewer captionEdit;
    private FrameLayout captionEditContainer;
    public CharSequence captionForAllMedia;
    private boolean captionHwLayerEnabled;
    private CaptionScrollView captionScrollView;
    private CaptionTextViewSwitcher captionTextViewSwitcher;
    private boolean captionTranslated;
    private long captureFrameAtTime;
    private long captureFrameReadyAtTime;
    private BlurringShader.ThumbBlurer centerBlur;
    private ImageReceiver centerImage;
    private AnimatedFloat[] centerImageInsideBlur;
    private boolean centerImageIsVideo;
    private Matrix centerImageTransform;
    private boolean centerImageTransformLocked;
    private AnimatorSet changeModeAnimation;
    private TextureView changedTextureView;
    private boolean changingPage;
    private boolean changingTextureView;
    private CheckBox checkImageView;
    private ChooseQualityLayout chooseQualityLayout;
    private ChooseSpeedLayout chooseSpeedLayout;
    private int classGuid;
    private Path clipFancyShadows;
    private float clippingImageProgress;
    public boolean closePhotoAfterSelect;
    private VideoCompressButton compressItem;
    private volatile int compressionsCount;
    private FrameLayoutDrawer containerView;
    private PhotoCountView countView;
    private boolean cropInitied;
    private ImageView cropItem;
    private CropTransform cropTransform;
    private int currentAccount;
    private AnimatedFileDrawable currentAnimation;
    private ImageLocation currentAvatarLocation;
    private Bitmap currentBitmap;
    private TLRPC.BotInlineResult currentBotInlineResult;
    private long currentDialogId;
    private int currentEditMode;
    private ImageLocation currentFileLocation;
    private ImageLocation currentFileLocationVideo;
    private String[] currentFileNames;
    private String currentFilterQuery;
    private ReactionsLayoutInBubble.VisibleReaction currentFilterTag;
    private boolean currentFiltered;
    private String currentImageFaceKey;
    private int currentImageHasFace;
    private String currentImagePath;
    private int currentIndex;
    private AnimatorSet currentListViewAnimation;
    private Runnable currentLoadingVideoRunnable;
    private MessageObject currentMessageObject;
    private TLRPC.PageBlock currentPageBlock;
    private float currentPanTranslationY;
    private String currentPathObject;
    private PlaceProviderObject currentPlaceObject;
    private Uri currentPlayingVideoFile;
    private ArrayList currentPlayingVideoQualityFiles;
    private SecureDocument currentSecureDocument;
    private String currentSubtitle;
    private ImageReceiver.BitmapHolder currentThumb;
    private boolean currentVideoFinishedLoading;
    private float currentVideoSpeed;
    public Utilities.Callback2 customStickerHandler;
    private CharSequence customTitle;
    private BlurButton cutOutBtn;
    private int dateOverride;
    private MessagesController.DialogPhotos dialogPhotos;
    private boolean disableShowCheck;
    private boolean discardTap;
    private TextView docInfoTextView;
    private TextView docNameTextView;
    private TextView doneButtonFullWidth;
    private boolean doneButtonPressed;
    private boolean dontAutoPlay;
    private boolean dontChangeCaptionPosition;
    private boolean dontResetZoomOnFirstLayout;
    private boolean doubleTap;
    private boolean doubleTapEnabled;
    private float dragY;
    private boolean draggingDown;
    private boolean[] drawPressedDrawable;
    private ActionBarMenuItem editItem;
    private EditState editState;
    private boolean editing;
    private PickerBottomLayoutViewer editorDoneLayout;
    private boolean[] endReached;
    private long endTime;
    private BlurButton eraseBtn;
    private long estimatedDuration;
    private long estimatedSize;
    private ImageView exitFullscreenButton;
    private boolean fancyShadows;
    private boolean firstAnimationDelay;
    private boolean firstFrameRendered;
    private FirstFrameView firstFrameView;
    private AnimatorSet flashAnimator;
    private View flashView;
    boolean fromCamera;
    private ImageView[] fullscreenButton;
    private int fullscreenedByButton;
    private GestureDetector2 gestureDetector;
    private GroupedPhotosListView groupedPhotosListView;
    public boolean hasCaptionForAllMedia;
    private Runnable hideActionBarRunnable;
    private PlaceProviderObject hideAfterAnimation;
    private UndoView hintView;
    private Rect hitRect;
    private boolean ignoreDidSetImage;
    private RectF imageBounds;
    private Matrix imageBoundsMatrix;
    private float[] imageBoundsPoints;
    private AnimatorSet imageMoveAnimation;
    private final ArrayList imagesArr;
    private final ArrayList imagesArrLocals;
    private final ArrayList imagesArrLocations;
    private final ArrayList imagesArrLocationsSizes;
    private final ArrayList imagesArrLocationsVideo;
    private final ArrayList imagesArrMessages;
    private final ArrayList imagesArrTemp;
    private final SparseArray[] imagesByIds;
    private final SparseArray[] imagesByIdsTemp;
    private boolean inBubbleMode;
    private boolean inPreview;
    private VideoPlayer injectingVideoPlayer;
    private SurfaceTexture injectingVideoPlayerSurface;
    private float inlineOutAnimationProgress;
    private final Rect insets;
    private DecelerateInterpolator interpolator;
    private boolean invalidCoords;
    private boolean isActionBarVisible;
    private boolean isCurrentVideo;
    private boolean isDocumentsPicker;
    private boolean isEmbedVideo;
    private boolean isEvent;
    private boolean isFirstLoading;
    private volatile boolean isH264Video;
    private boolean isInline;
    private boolean isPhotosListViewVisible;
    private boolean isPlaying;
    private boolean isStreaming;
    private boolean isVisible;
    private boolean isVisibleOrAnimating;
    private LinearLayout itemsLayout;
    private boolean keepScreenOnFlagSet;
    private int keyboardSize;
    private long lastBufferedPositionCheck;
    private boolean lastCaptionTranslating;
    private String lastControlFrameDuration;
    private Bitmap lastFrameBitmap;
    private ImageView lastFrameImageView;
    private int lastImageId;
    private long lastPhotoSetTime;
    private long lastSaveTime;
    private CharSequence lastTitle;
    private BlurringShader.ThumbBlurer leftBlur;
    private MediaController.CropState leftCropState;
    private CropTransform leftCropTransform;
    private ImageReceiver leftImage;
    private boolean leftImageIsVideo;
    private PaintingOverlay leftPaintingOverlay;
    private Bulletin limitBulletin;
    private boolean loadInitialVideo;
    private boolean loadingMoreImages;
    Runnable longPressRunnable;
    float longPressX;
    private boolean manuallyPaused;
    private MaskPaintView maskPaintView;
    private boolean maskPaintViewEraser;
    private boolean maskPaintViewShuttingDown;
    private int maskPaintViewTouched;
    private StickersAlert masksAlert;
    private ActionBarMenuItem masksItem;
    private int maxSelectedPhotos;
    private float maxX;
    private float maxY;
    private ActionBarMenu menu;
    private ActionBarMenuItem menuItem;
    private OptionsSpeedIconDrawable menuItemIcon;
    private long mergeDialogId;
    private float minX;
    private float minY;
    private AnimatorSet miniProgressAnimator;
    private Runnable miniProgressShowRunnable;
    private RadialProgressView miniProgressView;
    private float mirror;
    private ImageView mirrorItem;
    private float moveStartX;
    private float moveStartY;
    private boolean moving;
    private ImageView muteItem;
    private boolean muteVideo;
    private String nameOverride;
    private View navigationBar;
    private int navigationBarHeight;
    private boolean needCaptionLayout;
    private long needCaptureFrameReadyAtTime;
    private boolean needSearchImageInArr;
    private boolean needShowOnReady;
    private Runnable onUserLeaveHintListener;
    private boolean openedFromProfile;
    private boolean openedFullScreenVideo;
    private boolean opennedFromMedia;
    private OrientationEventListener orientationEventListener;
    private volatile int originalBitrate;
    private volatile int originalHeight;
    private long originalSize;
    private volatile int originalWidth;
    private BlurButton outlineBtn;
    private boolean padImageForHorizontalInsets;
    private PageBlocksAdapter pageBlocksAdapter;
    private ImageView paintItem;
    private AnimatorSet paintKeyboardAnimator;
    private KeyboardNotifier paintKeyboardNotifier;
    private int paintViewTouched;
    private PaintingOverlay paintingOverlay;
    private Activity parentActivity;
    private ChatAttachAlert parentAlert;
    private ChatActivity parentChatActivity;
    private BaseFragment parentFragment;
    private PhotoCropView photoCropView;
    private PhotoFilterView photoFilterView;
    private LPhotoPaintView photoPaintView;
    private PhotoProgressView[] photoProgressViews;
    private PhotoViewerWebView photoViewerWebView;
    private CounterView photosCounterView;
    private FrameLayout pickerView;
    private ImageView pickerViewSendButton;
    private Drawable pickerViewSendDrawable;
    private float pinchCenterX;
    private float pinchCenterY;
    private float pinchStartAngle;
    private float pinchStartDistance;
    private float pinchStartRotate;
    private float pinchStartScale;
    private float pinchStartX;
    private float pinchStartY;
    private boolean pipAnimationInProgress;
    private boolean pipAvailable;
    private ActionBarMenuItem pipItem;
    private int[] pipPosition;
    private boolean pipVideoOverlayAnimateFlag;
    private PhotoViewerProvider placeProvider;
    private View playButtonAccessibilityOverlay;
    private boolean playerAutoStarted;
    private boolean playerInjected;
    private boolean playerLooping;
    private boolean playerWasPlaying;
    private boolean playerWasReady;
    private GradientDrawable[] pressedDrawable;
    private float[] pressedDrawableAlpha;
    private int prevOrientation;
    private int previousCompression;
    private boolean previousCropMirrored;
    private int previousCropOrientation;
    private float previousCropPh;
    private float previousCropPw;
    private float previousCropPx;
    private float previousCropPy;
    private float previousCropRotation;
    private float previousCropScale;
    private boolean previousHasTransform;
    private RadialProgressView progressView;
    private QualityChooseView qualityChooseView;
    private AnimatorSet qualityChooseViewAnimation;
    private ChooseQualityLayout.QualityIcon qualityIcon;
    private ActionBarMenuSubItem qualityItem;
    private PickerBottomLayoutViewer qualityPicker;
    private RenderNode renderNode;
    public TLRPC.Document replacedSticker;
    private boolean requestingPreview;
    private TextView resetButton;
    private Theme.ResourcesProvider resourcesProvider;
    private BlurButton restoreBtn;
    private volatile int resultHeight;
    private volatile int resultWidth;
    private BlurringShader.ThumbBlurer rightBlur;
    private MediaController.CropState rightCropState;
    private CropTransform rightCropTransform;
    private ImageReceiver rightImage;
    private boolean rightImageIsVideo;
    private PaintingOverlay rightPaintingOverlay;
    private float rotate;
    private ImageView rotateItem;
    private int rotationValue;
    private float savedRotation;
    private float savedScale;
    private SavedState savedState;
    private float savedTx;
    private float savedTy;
    private ArrayMap savedVideoPositions;
    private float scale;
    private Scroller scroller;
    private final ArrayList secureDocuments;
    private float seekToProgressPending;
    private float seekToProgressPending2;
    private volatile int selectedCompression;
    private ArrayList selectedEmojis;
    private ListAdapter selectedPhotosAdapter;
    private SelectedPhotosListView selectedPhotosListView;
    private ActionBarMenuItem sendItem;
    private int sendPhotoType;
    private ActionBarPopupWindow.ActionBarPopupWindowLayout sendPopupLayout;
    private ActionBarPopupWindow sendPopupWindow;
    private ImageUpdater.AvatarFor setAvatarFor;
    private Runnable setLoadingRunnable;
    private BlurringShader.StoryBlurDrawer shadowBlurer;
    private int sharedMediaType;
    private float shiftDp;
    private String shouldSavePositionForCurrentVideo;
    private String shouldSavePositionForCurrentVideoShortTerm;
    private PlaceProviderObject showAfterAnimation;
    private boolean shownControlsByEnd;
    private ImageReceiver sideImage;
    private boolean skipFirstBufferingProgress;
    public boolean skipLastFrameDraw;
    private int slideshowMessageId;
    private ActionBarPopupWindow.GapView speedGap;
    private ActionBarMenuSubItem speedItem;
    private int startOffset;
    private boolean startReached;
    private long startTime;
    private long startedPlayTime;
    public boolean stickerEmpty;
    public boolean stickerEmptySent;
    private StickerMakerBackgroundView stickerMakerBackgroundView;
    public StickerMakerView stickerMakerView;
    private boolean streamingAlertShown;
    private Paint surfaceBlackoutPaint;
    private TextureView.SurfaceTextureListener surfaceTextureListener;
    private int switchImageAfterAnimation;
    private Runnable switchToInlineRunnable;
    private boolean switchingInlineMode;
    private int switchingToIndex;
    private int switchingToMode;
    private int[] tempInt;
    private TextSelectionHelper.SimpleTextSelectionHelper textSelectionHelper;
    private ImageView textureImageView;
    private boolean textureUploaded;
    private Tooltip tooltip;
    private LinearGradient topFancyShadow;
    private Matrix topFancyShadowMatrix;
    private Paint topFancyShadowPaint;
    private long topicId;
    private int totalImagesCount;
    private int totalImagesCountMerge;
    private int touchSlop;
    private long transitionAnimationStartTime;
    private AnimationNotificationsLocker transitionNotificationLocker;
    private float translateY;
    private ValueAnimator translateYAnimator;
    private float translationX;
    private float translationY;
    private boolean tryStartRequestPreviewOnFinish;
    private ImageView tuneItem;
    private BlurButton undoBtn;
    private final Runnable updateContainerFlagsRunnable;
    private Runnable updateProgressRunnable;
    private boolean usedSurfaceView;
    private VelocityTracker velocityTracker;
    private TextView videoAvatarTooltip;
    private volatile boolean videoConvertSupported;
    private float videoCrossfadeAlpha;
    private long videoCrossfadeAlphaLastTime;
    private boolean videoCrossfadeStarted;
    private float videoCutEnd;
    private float videoCutStart;
    private float videoDuration;
    private VideoForwardDrawable videoForwardDrawable;
    private Bitmap videoFrameBitmap;
    private Paint videoFrameBitmapPaint;
    private int videoFramerate;
    private long videoFramesSize;
    private int videoHeight;
    private Runnable videoPlayRunnable;
    private VideoPlayer videoPlayer;
    private Animator videoPlayerControlAnimator;
    private VideoPlayerControlFrameLayout videoPlayerControlFrameLayout;
    private boolean videoPlayerControlVisible;
    private int[] videoPlayerCurrentTime;
    VideoPlayerRewinder videoPlayerRewinder;
    private VideoPlayerSeekBar videoPlayerSeekbar;
    private View videoPlayerSeekbarView;
    private SimpleTextView videoPlayerTime;
    private int[] videoPlayerTotalTime;
    private VideoSeekPreviewImage videoPreviewFrame;
    private AnimatorSet videoPreviewFrameAnimation;
    private MessageObject videoPreviewMessageObject;
    private boolean videoSizeSet;
    private SurfaceView videoSurfaceView;
    private TextureView videoTextureView;
    private ObjectAnimator videoTimelineAnimator;
    private VideoTimelinePlayView videoTimelineView;
    private FrameLayout videoTimelineViewContainer;
    private int videoWidth;
    private AlertDialog visibleDialog;
    private int waitingForDraw;
    private int waitingForFirstTextureUpload;
    private boolean wasCountViewShown;
    private boolean wasLayout;
    private boolean wasRotated;
    private WindowManager.LayoutParams windowLayoutParams;
    private FrameLayout windowView;
    private boolean zoomAnimation;
    private boolean zooming;

    /* loaded from: classes4.dex */
    public class 13 extends FrameLayout {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        13(Context context) {
            super(context);
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onLayout$0() {
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) PhotoViewer.this.checkImageView.getLayoutParams();
            ((WindowManager) ApplicationLoader.applicationContext.getSystemService("window")).getDefaultDisplay().getRotation();
            int currentActionBarHeight = ((ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(34.0f)) / 2) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
            if (currentActionBarHeight != layoutParams.topMargin) {
                layoutParams.topMargin = currentActionBarHeight;
                PhotoViewer.this.checkImageView.setLayoutParams(layoutParams);
            }
            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) PhotoViewer.this.photosCounterView.getLayoutParams();
            int currentActionBarHeight2 = ((ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(40.0f)) / 2) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
            if (layoutParams2.topMargin != currentActionBarHeight2) {
                layoutParams2.topMargin = currentActionBarHeight2;
                PhotoViewer.this.photosCounterView.setLayoutParams(layoutParams2);
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void dispatchDraw(Canvas canvas) {
            UndoView undoView;
            super.dispatchDraw(canvas);
            if (PhotoViewer.this.parentChatActivity == null || (undoView = PhotoViewer.this.parentChatActivity.getUndoView()) == null || undoView.getVisibility() != 0) {
                return;
            }
            canvas.save();
            View view = (View) undoView.getParent();
            canvas.clipRect(view.getX(), view.getY(), view.getX() + view.getWidth(), view.getY() + view.getHeight());
            canvas.translate(undoView.getX(), undoView.getY());
            undoView.draw(canvas);
            canvas.restore();
            invalidate();
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            keyEvent.getKeyCode();
            if (!PhotoViewer.this.muteVideo && PhotoViewer.this.sendPhotoType != 1 && PhotoViewer.this.isCurrentVideo && PhotoViewer.this.videoPlayer != null && keyEvent.getRepeatCount() == 0 && keyEvent.getAction() == 0 && (keyEvent.getKeyCode() == 24 || keyEvent.getKeyCode() == 25)) {
                PhotoViewer.this.videoPlayer.setVolume(1.0f);
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEventPreIme(KeyEvent keyEvent) {
            if (keyEvent != null && keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1) {
                if (PhotoViewer.this.textSelectionHelper.isInSelectionMode()) {
                    PhotoViewer.this.textSelectionHelper.clear();
                }
                if (PhotoViewer.this.isCaptionOpen()) {
                    PhotoViewer.this.closeCaptionEnter(true);
                    return false;
                } else if (ContentPreviewViewer.getInstance().isVisible()) {
                    ContentPreviewViewer.getInstance().closeWithMenu();
                    return false;
                } else {
                    PhotoViewer.getInstance().closePhoto(true, false);
                    return true;
                }
            }
            return super.dispatchKeyEventPreIme(keyEvent);
        }

        /* JADX WARN: Code restructure failed: missing block: B:40:0x0020, code lost:
            if (r0 != 6) goto L21;
         */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                int actionMasked = motionEvent.getActionMasked();
                if (actionMasked != 0) {
                    if (actionMasked != 1 && actionMasked != 3) {
                        if (actionMasked != 5) {
                        }
                    }
                    if (PhotoViewer.this.currentMessageObject == null || !PhotoViewer.this.currentMessageObject.isSponsored()) {
                        PhotoViewer.this.scheduleActionBarHide();
                    }
                }
                AndroidUtilities.cancelRunOnUIThread(PhotoViewer.this.hideActionBarRunnable);
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            try {
                return super.drawChild(canvas, view, j);
            } catch (Throwable unused) {
                return false;
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            PhotoViewer.this.centerImage.onAttachedToWindow();
            PhotoViewer.this.leftImage.onAttachedToWindow();
            PhotoViewer.this.rightImage.onAttachedToWindow();
            PhotoViewer.this.attachedToWindow = true;
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            PhotoViewer.this.centerImage.onDetachedFromWindow();
            PhotoViewer.this.leftImage.onDetachedFromWindow();
            PhotoViewer.this.rightImage.onDetachedFromWindow();
            PhotoViewer.this.attachedToWindow = false;
            PhotoViewer.this.wasLayout = false;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (PhotoViewer.this.stickerMakerBackgroundView != null && PhotoViewer.this.stickerMakerBackgroundView.getVisibility() == 0) {
                View view = (View) PhotoViewer.this.stickerMakerBackgroundView.getParent();
                float min = Math.min(PhotoViewer.this.stickerMakerBackgroundView.getAlpha(), view != null ? view.getAlpha() : 1.0f);
                if (min > 0.0f) {
                    canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), (int) (min * 255.0f), 31);
                    PhotoViewer.this.stickerMakerBackgroundView.draw(canvas);
                    canvas.restore();
                }
            }
            if (Build.VERSION.SDK_INT < 21 || !PhotoViewer.this.isVisible) {
                return;
            }
            PhotoViewer.this.blackPaint.setAlpha(PhotoViewer.this.backgroundDrawable.getAlpha());
            canvas.drawRect(0.0f, getMeasuredHeight(), getMeasuredWidth(), getMeasuredHeight() + PhotoViewer.this.insets.bottom, PhotoViewer.this.blackPaint);
        }

        @Override // android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            return PhotoViewer.this.isVisible && super.onInterceptTouchEvent(motionEvent);
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            PhotoViewer.this.animatingImageView.layout(getPaddingLeft(), 0, getPaddingLeft() + PhotoViewer.this.animatingImageView.getMeasuredWidth(), PhotoViewer.this.animatingImageView.getMeasuredHeight());
            PhotoViewer.this.containerView.layout(getPaddingLeft(), 0, getPaddingLeft() + PhotoViewer.this.containerView.getMeasuredWidth(), PhotoViewer.this.containerView.getMeasuredHeight());
            PhotoViewer.this.navigationBar.layout(getPaddingLeft(), PhotoViewer.this.containerView.getMeasuredHeight(), PhotoViewer.this.navigationBar.getMeasuredWidth(), PhotoViewer.this.containerView.getMeasuredHeight() + PhotoViewer.this.navigationBar.getMeasuredHeight());
            PhotoViewer.this.wasLayout = true;
            if (z) {
                if (!PhotoViewer.this.dontResetZoomOnFirstLayout) {
                    PhotoViewer photoViewer = PhotoViewer.this;
                    photoViewer.scale = photoViewer.scale1();
                    PhotoViewer.this.translationX = 0.0f;
                    PhotoViewer.this.translationY = 0.0f;
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.updateMinMax(photoViewer2.scale);
                }
                if (PhotoViewer.this.checkImageView != null) {
                    PhotoViewer.this.checkImageView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$13$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.13.this.lambda$onLayout$0();
                        }
                    });
                }
            }
            if (PhotoViewer.this.dontResetZoomOnFirstLayout) {
                PhotoViewer.this.setScaleToFill();
                PhotoViewer.this.dontResetZoomOnFirstLayout = false;
            }
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int i3;
            int i4;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i5 = Build.VERSION.SDK_INT;
            if (i5 >= 21) {
                if (!PhotoViewer.this.inBubbleMode) {
                    if (AndroidUtilities.incorrectDisplaySizeFix) {
                        int i6 = AndroidUtilities.displaySize.y;
                        if (size2 > i6) {
                            size2 = i6;
                        }
                        size2 += AndroidUtilities.statusBarHeight;
                    } else if (PhotoViewer.this.insets.bottom >= 0 && (i3 = AndroidUtilities.statusBarHeight) >= 0 && (i4 = (size2 - i3) - PhotoViewer.this.insets.bottom) > 0 && i4 < 4096) {
                        AndroidUtilities.displaySize.y = i4;
                    }
                }
                size2 -= PhotoViewer.this.insets.bottom;
            } else {
                if (i5 < 21) {
                    PhotoViewer.this.insets.top = AndroidUtilities.statusBarHeight;
                    PhotoViewer.this.insets.bottom = AndroidUtilities.navigationBarHeight;
                }
                int i7 = AndroidUtilities.displaySize.y;
                if (size2 > i7) {
                    size2 = i7;
                }
            }
            int paddingLeft = size - (getPaddingLeft() + getPaddingRight());
            int paddingBottom = size2 - getPaddingBottom();
            setMeasuredDimension(paddingLeft, paddingBottom);
            ViewGroup.LayoutParams layoutParams = PhotoViewer.this.animatingImageView.getLayoutParams();
            PhotoViewer.this.animatingImageView.measure(View.MeasureSpec.makeMeasureSpec(layoutParams.width, Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(layoutParams.height, Integer.MIN_VALUE));
            PhotoViewer.this.containerView.measure(View.MeasureSpec.makeMeasureSpec(paddingLeft, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingBottom, 1073741824));
            PhotoViewer.this.navigationBar.measure(View.MeasureSpec.makeMeasureSpec(paddingLeft, 1073741824), View.MeasureSpec.makeMeasureSpec(PhotoViewer.this.navigationBarHeight, 1073741824));
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            return PhotoViewer.this.isVisible && PhotoViewer.this.onTouchEvent(motionEvent);
        }
    }

    /* loaded from: classes4.dex */
    public class 16 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Theme.ResourcesProvider val$resourcesProvider;

        16(Theme.ResourcesProvider resourcesProvider) {
            PhotoViewer.this = r1;
            this.val$resourcesProvider = resourcesProvider;
        }

        public /* synthetic */ void lambda$onItemClick$0(boolean z, Uri uri) {
            BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, z, -115203550, -1).show();
        }

        public /* synthetic */ void lambda$onItemClick$1(boolean z, Uri uri) {
            BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, z, -115203550, -1).show();
        }

        public /* synthetic */ boolean lambda$onItemClick$10(ArrayList arrayList, ChatActivity chatActivity, DialogsActivity dialogsActivity, ArrayList arrayList2, CharSequence charSequence, boolean z, boolean z2, int i, TopicsFragment topicsFragment) {
            UndoView undoView;
            long j;
            String str;
            if (arrayList2.size() > 1 || ((MessagesStorage.TopicKey) arrayList2.get(0)).dialogId == UserConfig.getInstance(PhotoViewer.this.currentAccount).getClientUserId() || charSequence != null) {
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    long j2 = ((MessagesStorage.TopicKey) arrayList2.get(i2)).dialogId;
                    if (charSequence != null) {
                        j = j2;
                        SendMessagesHelper.getInstance(PhotoViewer.this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(charSequence.toString(), j2, null, null, null, true, null, null, null, true, 0, null, false));
                    } else {
                        j = j2;
                    }
                    SendMessagesHelper.getInstance(PhotoViewer.this.currentAccount).sendMessage(arrayList, j, false, false, true, 0);
                }
                dialogsActivity.finishFragment();
                if (chatActivity != null && (undoView = chatActivity.getUndoView()) != null) {
                    if (arrayList2.size() == 1) {
                        undoView.showWithAction(((MessagesStorage.TopicKey) arrayList2.get(0)).dialogId, 53, Integer.valueOf(arrayList.size()));
                    } else {
                        undoView.showWithAction(0L, 53, Integer.valueOf(arrayList.size()), Integer.valueOf(arrayList2.size()), (Runnable) null, (Runnable) null);
                    }
                }
            } else {
                MessagesStorage.TopicKey topicKey = (MessagesStorage.TopicKey) arrayList2.get(0);
                long j3 = topicKey.dialogId;
                Bundle bundle = new Bundle();
                bundle.putBoolean("scrollToTopOnResume", true);
                if (DialogObject.isEncryptedDialog(j3)) {
                    bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j3));
                } else {
                    if (DialogObject.isUserDialog(j3)) {
                        str = "user_id";
                    } else {
                        j3 = -j3;
                        str = "chat_id";
                    }
                    bundle.putLong(str, j3);
                }
                ChatActivity chatActivity2 = new ChatActivity(bundle);
                if (topicKey.topicId != 0) {
                    ForumUtilities.applyTopic(chatActivity2, topicKey);
                }
                if (((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(chatActivity2, true, false)) {
                    chatActivity2.showFieldPanelForForward(true, arrayList);
                } else {
                    dialogsActivity.finishFragment();
                }
            }
            return true;
        }

        public static /* synthetic */ void lambda$onItemClick$11(boolean[] zArr, View view) {
            boolean z = !zArr[0];
            zArr[0] = z;
            ((CheckBoxCell) view).setChecked(z, true);
        }

        /* JADX WARN: Multi-variable type inference failed */
        public /* synthetic */ void lambda$onItemClick$12(boolean[] zArr, DialogInterface dialogInterface, int i) {
            ArrayList arrayList;
            TLRPC.EncryptedChat encryptedChat;
            if (!PhotoViewer.this.placeProvider.onDeletePhoto(PhotoViewer.this.currentIndex)) {
                PhotoViewer.this.closePhoto(false, false);
            } else if (!PhotoViewer.this.imagesArr.isEmpty()) {
                if (PhotoViewer.this.currentIndex < 0 || PhotoViewer.this.currentIndex >= PhotoViewer.this.imagesArr.size()) {
                    return;
                }
                MessageObject messageObject = (MessageObject) PhotoViewer.this.imagesArr.get(PhotoViewer.this.currentIndex);
                if (messageObject.isSent()) {
                    PhotoViewer.this.closePhoto(false, false);
                    ArrayList arrayList2 = new ArrayList();
                    arrayList2.add(Integer.valueOf(PhotoViewer.this.slideshowMessageId != 0 ? PhotoViewer.this.slideshowMessageId : messageObject.getId()));
                    if (!DialogObject.isEncryptedDialog(messageObject.getDialogId()) || messageObject.messageOwner.random_id == 0) {
                        arrayList = null;
                        encryptedChat = null;
                    } else {
                        ArrayList arrayList3 = new ArrayList();
                        arrayList3.add(Long.valueOf(messageObject.messageOwner.random_id));
                        encryptedChat = MessagesController.getInstance(PhotoViewer.this.currentAccount).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(messageObject.getDialogId())));
                        arrayList = arrayList3;
                    }
                    MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteMessages(arrayList2, arrayList, encryptedChat, messageObject.getDialogId(), messageObject.getQuickReplyId(), zArr[0], messageObject.getChatMode());
                }
            } else {
                if (PhotoViewer.this.avatarsArr.isEmpty()) {
                    if (PhotoViewer.this.secureDocuments.isEmpty() || PhotoViewer.this.placeProvider == null) {
                        return;
                    }
                    PhotoViewer.this.secureDocuments.remove(PhotoViewer.this.currentIndex);
                    PhotoViewer.this.placeProvider.deleteImageAtIndex(PhotoViewer.this.currentIndex);
                    if (!PhotoViewer.this.secureDocuments.isEmpty()) {
                        int i2 = PhotoViewer.this.currentIndex;
                        if (i2 >= PhotoViewer.this.secureDocuments.size()) {
                            i2 = PhotoViewer.this.secureDocuments.size() - 1;
                        }
                        PhotoViewer.this.currentIndex = -1;
                        PhotoViewer.this.setImageIndex(i2);
                        return;
                    }
                } else if (PhotoViewer.this.currentIndex < 0 || PhotoViewer.this.currentIndex >= PhotoViewer.this.avatarsArr.size()) {
                    return;
                } else {
                    TLRPC.Message message = (TLRPC.Message) PhotoViewer.this.imagesArrMessages.get(PhotoViewer.this.currentIndex);
                    if (message != null) {
                        ArrayList<Integer> arrayList4 = new ArrayList<>();
                        arrayList4.add(Integer.valueOf(message.id));
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteMessages(arrayList4, null, null, MessageObject.getDialogId(message), message.quick_reply_shortcut_id, true, 0);
                        NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
                    }
                    if (!PhotoViewer.this.isCurrentAvatarSet()) {
                        TLRPC.Photo photo = (TLRPC.Photo) PhotoViewer.this.avatarsArr.get(PhotoViewer.this.currentIndex);
                        if (photo == null) {
                            return;
                        }
                        TLRPC.TL_inputPhoto tL_inputPhoto = new TLRPC.TL_inputPhoto();
                        tL_inputPhoto.id = photo.id;
                        tL_inputPhoto.access_hash = photo.access_hash;
                        byte[] bArr = photo.file_reference;
                        tL_inputPhoto.file_reference = bArr;
                        if (bArr == null) {
                            tL_inputPhoto.file_reference = new byte[0];
                        }
                        if (PhotoViewer.this.avatarsDialogId > 0) {
                            MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteUserPhoto(tL_inputPhoto);
                        }
                        MessagesStorage.getInstance(PhotoViewer.this.currentAccount).clearUserPhoto(PhotoViewer.this.avatarsDialogId, photo.id);
                        PhotoViewer.this.imagesArrLocations.remove(PhotoViewer.this.currentIndex);
                        PhotoViewer.this.imagesArrLocationsSizes.remove(PhotoViewer.this.currentIndex);
                        PhotoViewer.this.imagesArrLocationsVideo.remove(PhotoViewer.this.currentIndex);
                        PhotoViewer.this.imagesArrMessages.remove(PhotoViewer.this.currentIndex);
                        PhotoViewer.this.avatarsArr.remove(PhotoViewer.this.currentIndex);
                        if (PhotoViewer.this.imagesArrLocations.isEmpty()) {
                            PhotoViewer.this.closePhoto(false, false);
                        } else {
                            int i3 = PhotoViewer.this.currentIndex;
                            if (i3 >= PhotoViewer.this.avatarsArr.size()) {
                                i3 = PhotoViewer.this.avatarsArr.size() - 1;
                            }
                            PhotoViewer.this.currentIndex = -1;
                            PhotoViewer.this.setImageIndex(i3);
                        }
                        if (message == null) {
                            NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
                            return;
                        }
                        return;
                    } else if (PhotoViewer.this.avatarsDialogId > 0) {
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).deleteUserPhoto(null);
                    } else {
                        MessagesController.getInstance(PhotoViewer.this.currentAccount).changeChatAvatar(-PhotoViewer.this.avatarsDialogId, null, null, null, null, 0.0d, null, null, null, null);
                    }
                }
                PhotoViewer.this.closePhoto(false, false);
            }
        }

        public /* synthetic */ void lambda$onItemClick$13(TLObject tLObject, UserConfig userConfig, TLRPC.Photo photo) {
            if (tLObject instanceof TLRPC.TL_photos_photo) {
                TLRPC.TL_photos_photo tL_photos_photo = (TLRPC.TL_photos_photo) tLObject;
                MessagesController.getInstance(PhotoViewer.this.currentAccount).putUsers(tL_photos_photo.users, false);
                TLRPC.User user = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(userConfig.clientUserId));
                if (tL_photos_photo.photo instanceof TLRPC.TL_photo) {
                    int indexOf = PhotoViewer.this.avatarsArr.indexOf(photo);
                    if (indexOf >= 0) {
                        PhotoViewer.this.avatarsArr.set(indexOf, tL_photos_photo.photo);
                    }
                    if (user != null) {
                        user.photo.photo_id = tL_photos_photo.photo.id;
                        userConfig.setCurrentUser(user);
                        userConfig.saveConfig(true);
                    }
                }
            }
        }

        public /* synthetic */ void lambda$onItemClick$14(final UserConfig userConfig, final TLRPC.Photo photo, final TLObject tLObject, TLRPC.TL_error tL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda15
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.16.this.lambda$onItemClick$13(tLObject, userConfig, photo);
                }
            });
        }

        public /* synthetic */ void lambda$onItemClick$15() {
            if (PhotoViewer.this.menuItem == null) {
                return;
            }
            PhotoViewer.this.menuItem.hideSubItem(16);
        }

        public /* synthetic */ void lambda$onItemClick$16() {
            PhotoViewer.this.menuItem.hideSubItem(21);
            PhotoViewer.this.menuItem.showSubItem(22);
        }

        public /* synthetic */ void lambda$onItemClick$18() {
            PhotoViewer.this.menuItem.showSubItem(21);
            PhotoViewer.this.menuItem.hideSubItem(22);
        }

        public /* synthetic */ void lambda$onItemClick$2(DialogInterface dialogInterface, int i) {
            File pathToMessage;
            if (PhotoViewer.this.currentMessageObject == null) {
                return;
            }
            if ((MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage != null && MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.document == null) {
                PhotoViewer photoViewer = PhotoViewer.this;
                pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(photoViewer.getFileLocation(photoViewer.currentIndex, null), true);
            } else {
                pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(PhotoViewer.this.currentMessageObject.messageOwner);
            }
            final boolean isVideo = PhotoViewer.this.currentMessageObject.isVideo();
            if (pathToMessage == null || !pathToMessage.exists()) {
                PhotoViewer.this.showDownloadAlert();
                return;
            }
            MediaController.saveFile(pathToMessage.toString(), PhotoViewer.this.parentActivity, isVideo ? 1 : 0, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda16
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.16.this.lambda$onItemClick$1(isVideo, (Uri) obj);
                }
            });
        }

        public /* synthetic */ void lambda$onItemClick$3(int[] iArr, int[] iArr2, boolean z) {
            int i = iArr[0] + 1;
            iArr[0] = i;
            if (i == iArr2[0]) {
                BulletinFactory.createSaveToGalleryBulletin(PhotoViewer.this.containerView, iArr2[0], z, -115203550, -1).show();
            }
        }

        public /* synthetic */ void lambda$onItemClick$5(final boolean z, ArrayList arrayList, DialogInterface dialogInterface, int i) {
            File pathToMessage;
            final int[] iArr = new int[1];
            final int[] iArr2 = new int[1];
            final Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda17
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.16.this.lambda$onItemClick$3(iArr2, iArr, z);
                }
            };
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                MessageObject messageObject = (MessageObject) arrayList.get(i2);
                if (messageObject != null) {
                    if ((MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null && MessageObject.getMedia(messageObject.messageOwner).webpage.document == null) {
                        FileLoader fileLoader = FileLoader.getInstance(PhotoViewer.this.currentAccount);
                        PhotoViewer photoViewer = PhotoViewer.this;
                        pathToMessage = fileLoader.getPathToAttach(photoViewer.getFileLocation(photoViewer.currentIndex, null), true);
                    } else {
                        pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(messageObject.messageOwner);
                    }
                    boolean isVideo = messageObject.isVideo();
                    if (pathToMessage != null && pathToMessage.exists()) {
                        iArr[0] = iArr[0] + 1;
                        MediaController.saveFile(pathToMessage.toString(), PhotoViewer.this.parentActivity, isVideo ? 1 : 0, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda18
                            @Override // org.telegram.messenger.Utilities.Callback
                            public final void run(Object obj) {
                                Uri uri = (Uri) obj;
                                AndroidUtilities.runOnUIThread(runnable);
                            }
                        });
                    }
                }
            }
        }

        public /* synthetic */ void lambda$onItemClick$7(DialogInterface dialogInterface, int i) {
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(PhotoViewer.this.currentMessageObject);
            PhotoViewer.this.showShareAlert(arrayList);
        }

        public /* synthetic */ void lambda$onItemClick$8(ArrayList arrayList, DialogInterface dialogInterface, int i) {
            PhotoViewer.this.showShareAlert(arrayList);
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public boolean canOpenMenu() {
            if (PhotoViewer.this.currentMessageObject == null && PhotoViewer.this.currentSecureDocument == null) {
                if (PhotoViewer.this.currentFileLocationVideo == null) {
                    return PhotoViewer.this.pageBlocksAdapter != null;
                }
                File pathToAttach = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.this.avatarsDialogId != 0 || PhotoViewer.this.isEvent);
                return pathToAttach.exists() || new File(FileLoader.getDirectory(4), pathToAttach.getName()).exists();
            }
            return true;
        }

        /* JADX WARN: Code restructure failed: missing block: B:605:0x02d5, code lost:
            if (((android.widget.LinearLayout) r0.getButtonsLayout()).getOrientation() == 1) goto L107;
         */
        /* JADX WARN: Code restructure failed: missing block: B:669:0x04bb, code lost:
            if (((android.widget.LinearLayout) r0.getButtonsLayout()).getOrientation() == 1) goto L107;
         */
        /* JADX WARN: Code restructure failed: missing block: B:670:0x04bd, code lost:
            r1.bringToFront();
         */
        /* JADX WARN: Removed duplicated region for block: B:635:0x03a2  */
        /* JADX WARN: Removed duplicated region for block: B:637:0x03b8  */
        /* JADX WARN: Removed duplicated region for block: B:638:0x03be  */
        /* JADX WARN: Removed duplicated region for block: B:645:0x03dc  */
        /* JADX WARN: Removed duplicated region for block: B:672:0x04cd  */
        /* JADX WARN: Removed duplicated region for block: B:694:0x0589  */
        /* JADX WARN: Removed duplicated region for block: B:695:0x0597  */
        /* JADX WARN: Removed duplicated region for block: B:729:0x066c  */
        /* JADX WARN: Removed duplicated region for block: B:776:0x07d6  */
        /* JADX WARN: Removed duplicated region for block: B:863:0x0a10  */
        /* JADX WARN: Removed duplicated region for block: B:979:? A[RETURN, SYNTHETIC] */
        /* JADX WARN: Removed duplicated region for block: B:988:? A[RETURN, SYNTHETIC] */
        /* JADX WARN: Type inference failed for: r11v31 */
        /* JADX WARN: Type inference failed for: r11v32 */
        /* JADX WARN: Type inference failed for: r11v33, types: [int, boolean] */
        /* JADX WARN: Type inference failed for: r11v34 */
        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onItemClick(int i) {
            String str;
            TLObject tLObject;
            TLRPC.Document document;
            MessagesController messagesController;
            Object parentObject;
            boolean z;
            CharSequence deleteMessageString;
            CharSequence formatString;
            TextView textView;
            long dialogId;
            TLRPC.Chat chat;
            TLRPC.User user;
            boolean z2;
            final ArrayList arrayList;
            MessageObject.GroupedMessages group;
            boolean z3;
            AlertDialog create;
            View button;
            String str2;
            MessageObject.GroupedMessages groupedMessages;
            final ?? r11;
            boolean isVideo;
            File pathToMessage;
            int checkSelfPermission;
            boolean z4 = true;
            if (i == -1) {
                if (PhotoViewer.this.photoPaintView == null || !PhotoViewer.this.photoPaintView.onBackPressed()) {
                    if (PhotoViewer.this.isCaptionOpen()) {
                        PhotoViewer.this.closeCaptionEnter(false);
                        return;
                    } else {
                        PhotoViewer.this.closePhoto(true, false);
                        return;
                    }
                }
                return;
            }
            File file = null;
            if (i == 1) {
                int i2 = Build.VERSION.SDK_INT;
                if (i2 >= 23 && (i2 <= 28 || BuildVars.NO_SCOPED_STORAGE)) {
                    checkSelfPermission = PhotoViewer.this.parentActivity.checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE");
                    if (checkSelfPermission != 0) {
                        PhotoViewer.this.parentActivity.requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                        return;
                    }
                }
                final ArrayList arrayList2 = new ArrayList(1);
                if (PhotoViewer.this.parentChatActivity != null) {
                    str2 = "AllNMedia";
                    groupedMessages = PhotoViewer.this.parentChatActivity.getGroup(PhotoViewer.this.currentMessageObject.getGroupId());
                } else {
                    str2 = "AllNMedia";
                    groupedMessages = null;
                }
                if (groupedMessages != null) {
                    arrayList2.addAll(groupedMessages.messages);
                } else {
                    arrayList2.add(PhotoViewer.this.currentMessageObject);
                }
                if (arrayList2.size() > 1) {
                    final boolean z5 = false;
                    for (int i3 = 0; i3 < arrayList2.size() && !z5; i3++) {
                        if (((MessageObject) arrayList2.get(i3)).isVideo()) {
                            z5 = true;
                        }
                    }
                    AlertDialog.Builder negativeButton = new AlertDialog.Builder(PhotoViewer.this.parentActivity, this.val$resourcesProvider).setTitle(LocaleController.getString("SaveGroupMedia", R.string.SaveGroupMedia)).setMessage(LocaleController.getString("SaveGroupMediaMessage", R.string.SaveGroupMediaMessage)).setDialogButtonColorKey(Theme.key_voipgroup_listeningText).setNegativeButton(!z5 ? LocaleController.getString("ThisPhoto", R.string.ThisPhoto) : LocaleController.getString("ThisMedia", R.string.ThisMedia), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda8
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i4) {
                            PhotoViewer.16.this.lambda$onItemClick$2(dialogInterface, i4);
                        }
                    });
                    int size = arrayList2.size();
                    Object[] objArr = new Object[0];
                    create = negativeButton.setPositiveButton(!z5 ? LocaleController.formatPluralString("AllNPhotos", size, objArr) : LocaleController.formatPluralString(str2, size, objArr), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda9
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i4) {
                            PhotoViewer.16.this.lambda$onItemClick$5(z5, arrayList2, dialogInterface, i4);
                        }
                    }).setNeutralButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda10
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i4) {
                            dialogInterface.dismiss();
                        }
                    }).create();
                    create.setBackgroundColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_dialogBackground));
                    create.show();
                    button = create.getButton(-3);
                    if (button instanceof TextView) {
                        PhotoViewer photoViewer = PhotoViewer.this;
                        int i4 = Theme.key_text_RedBold;
                        ((TextView) button).setTextColor(photoViewer.getThemedColor(i4));
                        button.setBackground(Theme.getRoundRectSelectorDrawable(PhotoViewer.this.getThemedColor(i4)));
                        if (create.getButtonsLayout() instanceof LinearLayout) {
                        }
                    }
                    create.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_actionBarItems));
                    return;
                }
                if (PhotoViewer.this.currentMessageObject == null) {
                    if (PhotoViewer.this.currentFileLocationVideo != null) {
                        String fileLocationExt = PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo);
                        file = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), fileLocationExt, PhotoViewer.this.avatarsDialogId != 0 || PhotoViewer.this.isEvent);
                        if (fileLocationExt != null) {
                            fileLocationExt = fileLocationExt.toLowerCase();
                        }
                        if (fileLocationExt == null || (!fileLocationExt.equals("webm") && !fileLocationExt.equals("mp4") && !fileLocationExt.equals("gif"))) {
                            z4 = false;
                        }
                        r11 = z4;
                    } else if (PhotoViewer.this.pageBlocksAdapter != null) {
                        file = PhotoViewer.this.pageBlocksAdapter.getFile(PhotoViewer.this.currentIndex);
                        isVideo = PhotoViewer.this.pageBlocksAdapter.isVideo(PhotoViewer.this.currentIndex);
                    } else {
                        r11 = 0;
                    }
                    if (file != null && !file.exists()) {
                        file = new File(FileLoader.getDirectory(4), file.getName());
                    }
                    if (file == null && file.exists()) {
                        MediaController.saveFile(file.toString(), PhotoViewer.this.parentActivity, r11, null, null, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda7
                            @Override // org.telegram.messenger.Utilities.Callback
                            public final void run(Object obj) {
                                PhotoViewer.16.this.lambda$onItemClick$0(r11, (Uri) obj);
                            }
                        });
                        return;
                    }
                    PhotoViewer.this.showDownloadAlert();
                }
                if ((MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage != null && MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.document == null) {
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(photoViewer2.getFileLocation(photoViewer2.currentIndex, null), true);
                    if (!pathToMessage.exists()) {
                        file = new File(FileLoader.getDirectory(4), pathToMessage.getName());
                        isVideo = PhotoViewer.this.currentMessageObject.isVideo();
                    }
                } else {
                    pathToMessage = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToMessage(PhotoViewer.this.currentMessageObject.messageOwner);
                }
                file = pathToMessage;
                isVideo = PhotoViewer.this.currentMessageObject.isVideo();
                r11 = isVideo;
                if (file != null) {
                    file = new File(FileLoader.getDirectory(4), file.getName());
                }
                if (file == null) {
                }
                PhotoViewer.this.showDownloadAlert();
            } else if (i == 2) {
                if (PhotoViewer.this.currentDialogId != 0) {
                    PhotoViewer.this.disableShowCheck = true;
                    Bundle bundle = new Bundle();
                    bundle.putLong("dialog_id", PhotoViewer.this.currentDialogId);
                    MediaActivity mediaActivity = new MediaActivity(bundle, null);
                    if (PhotoViewer.this.parentChatActivity != null) {
                        mediaActivity.setChatInfo(PhotoViewer.this.parentChatActivity.getCurrentChatInfo());
                    }
                    PhotoViewer.this.closePhoto(false, false);
                    if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                        ((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(mediaActivity, false, true);
                    }
                }
            } else if (i == 4 || i == 23) {
                if (PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                Bundle bundle2 = new Bundle();
                long j = PhotoViewer.this.currentDialogId;
                if (PhotoViewer.this.currentMessageObject != null) {
                    j = PhotoViewer.this.currentMessageObject.getDialogId();
                }
                if (DialogObject.isEncryptedDialog(j)) {
                    bundle2.putInt("enc_id", DialogObject.getEncryptedChatId(j));
                } else {
                    if (DialogObject.isUserDialog(j)) {
                        str = "user_id";
                    } else {
                        TLRPC.Chat chat2 = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-j));
                        if (chat2 != null && chat2.migrated_to != null) {
                            bundle2.putLong("migrated_to", j);
                            j = -chat2.migrated_to.channel_id;
                        }
                        j = -j;
                        str = "chat_id";
                    }
                    bundle2.putLong(str, j);
                }
                bundle2.putInt("message_id", PhotoViewer.this.currentMessageObject.getId());
                if (i == 23) {
                    bundle2.putInt("reply_to", PhotoViewer.this.currentMessageObject.getId());
                }
                NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeChats, new Object[0]);
                if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                    LaunchActivity launchActivity = (LaunchActivity) PhotoViewer.this.parentActivity;
                    launchActivity.presentFragment(new ChatActivity(bundle2), launchActivity.getMainFragmentsCount() > 1 || AndroidUtilities.isTablet(), true);
                }
                PhotoViewer.this.closePhoto(false, false);
                PhotoViewer.this.currentMessageObject = null;
            } else if (i == 3) {
                if (PhotoViewer.this.currentMessageObject == null || !(PhotoViewer.this.parentActivity instanceof LaunchActivity)) {
                    return;
                }
                if (!PhotoViewer.this.currentMessageObject.scheduled) {
                    long dialogId2 = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (DialogObject.isChatDialog(dialogId2)) {
                        z2 = ChatObject.isChannelAndNotMegaGroup(MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId2)));
                        ((LaunchActivity) PhotoViewer.this.parentActivity).switchToAccount(PhotoViewer.this.currentMessageObject.currentAccount, true);
                        arrayList = new ArrayList(1);
                        group = PhotoViewer.this.parentChatActivity != null ? PhotoViewer.this.parentChatActivity.getGroup(PhotoViewer.this.currentMessageObject.getGroupId()) : null;
                        if (group == null) {
                            arrayList.addAll(group.messages);
                        } else {
                            arrayList.add(PhotoViewer.this.currentMessageObject);
                        }
                        if (!z2 && arrayList.size() <= 1) {
                            PhotoViewer.this.showShareAlert(arrayList);
                            return;
                        } else if (arrayList.size() > 1) {
                            Bundle bundle3 = new Bundle();
                            bundle3.putBoolean("onlySelect", true);
                            bundle3.putBoolean("canSelectTopics", true);
                            bundle3.putInt("dialogsType", 3);
                            DialogsActivity dialogsActivity = new DialogsActivity(bundle3);
                            final ArrayList arrayList3 = new ArrayList();
                            arrayList3.add(PhotoViewer.this.currentMessageObject);
                            final ChatActivity chatActivity = PhotoViewer.this.parentChatActivity;
                            dialogsActivity.setDelegate(new DialogsActivity.DialogsActivityDelegate() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda14
                                @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
                                public final boolean didSelectDialogs(DialogsActivity dialogsActivity2, ArrayList arrayList4, CharSequence charSequence, boolean z6, boolean z7, int i5, TopicsFragment topicsFragment) {
                                    boolean lambda$onItemClick$10;
                                    lambda$onItemClick$10 = PhotoViewer.16.this.lambda$onItemClick$10(arrayList3, chatActivity, dialogsActivity2, arrayList4, charSequence, z6, z7, i5, topicsFragment);
                                    return lambda$onItemClick$10;
                                }
                            });
                            ((LaunchActivity) PhotoViewer.this.parentActivity).presentFragment(dialogsActivity, false, true);
                            PhotoViewer.this.closePhoto(false, false);
                            return;
                        } else {
                            for (int i5 = 0; i5 < arrayList.size(); i5++) {
                                if (!((MessageObject) arrayList.get(i5)).isPhoto() || ((MessageObject) arrayList.get(i5)).isVideo()) {
                                    z3 = false;
                                    break;
                                }
                            }
                            z3 = true;
                            create = new AlertDialog.Builder(PhotoViewer.this.parentActivity, this.val$resourcesProvider).setTitle(LocaleController.getString("ForwardGroupMedia", R.string.ForwardGroupMedia)).setMessage(LocaleController.getString("ForwardGroupMediaMessage", R.string.ForwardGroupMediaMessage)).setDialogButtonColorKey(Theme.key_voipgroup_listeningText).setNegativeButton(z3 ? LocaleController.getString("ThisPhoto", R.string.ThisPhoto) : LocaleController.getString("ThisMedia", R.string.ThisMedia), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda11
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    PhotoViewer.16.this.lambda$onItemClick$7(dialogInterface, i6);
                                }
                            }).setPositiveButton(z3 ? LocaleController.formatPluralString("AllNPhotos", arrayList.size(), new Object[0]) : LocaleController.formatPluralString("AllNMedia", arrayList.size(), new Object[0]), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda12
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    PhotoViewer.16.this.lambda$onItemClick$8(arrayList, dialogInterface, i6);
                                }
                            }).setNeutralButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda13
                                @Override // android.content.DialogInterface.OnClickListener
                                public final void onClick(DialogInterface dialogInterface, int i6) {
                                    dialogInterface.dismiss();
                                }
                            }).create();
                            create.setBackgroundColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_dialogBackground));
                            create.show();
                            button = create.getButton(-3);
                            if (button instanceof TextView) {
                                PhotoViewer photoViewer3 = PhotoViewer.this;
                                int i6 = Theme.key_text_RedBold;
                                ((TextView) button).setTextColor(photoViewer3.getThemedColor(i6));
                                button.setBackground(Theme.getRoundRectSelectorDrawable(PhotoViewer.this.getThemedColor(i6)));
                                if (create.getButtonsLayout() instanceof LinearLayout) {
                                }
                            }
                            create.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_voipgroup_actionBarItems));
                            return;
                        }
                    }
                }
                z2 = false;
                ((LaunchActivity) PhotoViewer.this.parentActivity).switchToAccount(PhotoViewer.this.currentMessageObject.currentAccount, true);
                arrayList = new ArrayList(1);
                if (PhotoViewer.this.parentChatActivity != null) {
                }
                if (group == null) {
                }
                if (!z2) {
                }
                if (arrayList.size() > 1) {
                }
            } else if (i == 20) {
                PhotoViewer.this.openCurrentPhotoInPaintModeForSelect();
            } else if (i == 6) {
                if (PhotoViewer.this.parentActivity == null || PhotoViewer.this.placeProvider == null) {
                    return;
                }
                if (PhotoViewer.this.currentMessageObject != null && !PhotoViewer.this.currentMessageObject.scheduled) {
                    long dialogId3 = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (DialogObject.isChatDialog(dialogId3)) {
                        z = ChatObject.isChannel(MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId3)));
                        AlertDialog.Builder builder = new AlertDialog.Builder(PhotoViewer.this.parentActivity);
                        deleteMessageString = PhotoViewer.this.placeProvider.getDeleteMessageString();
                        if (deleteMessageString == null) {
                            builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
                            builder.setMessage(deleteMessageString);
                        } else {
                            if (PhotoViewer.this.isEmbedVideo || (!(PhotoViewer.this.currentFileLocationVideo == null || PhotoViewer.this.currentFileLocationVideo == PhotoViewer.this.currentFileLocation) || (PhotoViewer.this.currentMessageObject != null && PhotoViewer.this.currentMessageObject.isVideo()))) {
                                builder.setTitle(LocaleController.getString("AreYouSureDeleteVideoTitle", R.string.AreYouSureDeleteVideoTitle));
                                formatString = z ? LocaleController.formatString("AreYouSureDeleteVideoEveryone", R.string.AreYouSureDeleteVideoEveryone, new Object[0]) : LocaleController.formatString("AreYouSureDeleteVideo", R.string.AreYouSureDeleteVideo, new Object[0]);
                            } else if (PhotoViewer.this.currentMessageObject == null || !PhotoViewer.this.currentMessageObject.isGif()) {
                                builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
                                formatString = z ? LocaleController.formatString("AreYouSureDeletePhotoEveryone", R.string.AreYouSureDeletePhotoEveryone, new Object[0]) : LocaleController.formatString("AreYouSureDeletePhoto", R.string.AreYouSureDeletePhoto, new Object[0]);
                            } else {
                                builder.setTitle(LocaleController.getString("AreYouSureDeleteGIFTitle", R.string.AreYouSureDeleteGIFTitle));
                                formatString = z ? LocaleController.formatString("AreYouSureDeleteGIFEveryone", R.string.AreYouSureDeleteGIFEveryone, new Object[0]) : LocaleController.formatString("AreYouSureDeleteGIF", R.string.AreYouSureDeleteGIF, new Object[0]);
                            }
                            builder.setMessage(formatString);
                        }
                        final boolean[] zArr = new boolean[1];
                        if (PhotoViewer.this.currentMessageObject != null && !PhotoViewer.this.currentMessageObject.scheduled) {
                            dialogId = PhotoViewer.this.currentMessageObject.getDialogId();
                            if (!DialogObject.isEncryptedDialog(dialogId)) {
                                if (DialogObject.isUserDialog(dialogId)) {
                                    user = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(dialogId));
                                    chat = null;
                                } else {
                                    chat = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-dialogId));
                                    user = null;
                                }
                                if (user != null || !ChatObject.isChannel(chat)) {
                                    int currentTime = ConnectionsManager.getInstance(PhotoViewer.this.currentAccount).getCurrentTime();
                                    MessagesController messagesController2 = MessagesController.getInstance(PhotoViewer.this.currentAccount);
                                    int i7 = user != null ? messagesController2.revokeTimePmLimit : messagesController2.revokeTimeLimit;
                                    if ((user != null && user.id != UserConfig.getInstance(PhotoViewer.this.currentAccount).getClientUserId()) || chat != null) {
                                        boolean z6 = user != null && MessagesController.getInstance(PhotoViewer.this.currentAccount).canRevokePmInbox;
                                        if ((PhotoViewer.this.currentMessageObject.messageOwner.action == null || (PhotoViewer.this.currentMessageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty)) && ((PhotoViewer.this.currentMessageObject.isOut() || z6 || ChatObject.hasAdminRights(chat)) && currentTime - PhotoViewer.this.currentMessageObject.messageOwner.date <= i7)) {
                                            FrameLayout frameLayout = new FrameLayout(PhotoViewer.this.parentActivity);
                                            CheckBoxCell checkBoxCell = new CheckBoxCell(PhotoViewer.this.parentActivity, 1, this.val$resourcesProvider);
                                            checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                            checkBoxCell.setText(chat != null ? LocaleController.getString("DeleteForAll", R.string.DeleteForAll) : LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(user)), "", false, false);
                                            checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                                            frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                                            checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda0
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view) {
                                                    PhotoViewer.16.lambda$onItemClick$11(zArr, view);
                                                }
                                            });
                                            builder.setView(frameLayout);
                                            builder.setCustomViewOffset(9);
                                        }
                                    }
                                }
                            }
                        }
                        builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda1
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i8) {
                                PhotoViewer.16.this.lambda$onItemClick$12(zArr, dialogInterface, i8);
                            }
                        });
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        AlertDialog create2 = builder.create();
                        PhotoViewer.this.showAlertDialog(builder);
                        textView = (TextView) create2.getButton(-1);
                        if (textView == null) {
                            textView.setTextColor(PhotoViewer.this.getThemedColor(Theme.key_text_RedBold));
                            return;
                        }
                        return;
                    }
                }
                z = false;
                AlertDialog.Builder builder2 = new AlertDialog.Builder(PhotoViewer.this.parentActivity);
                deleteMessageString = PhotoViewer.this.placeProvider.getDeleteMessageString();
                if (deleteMessageString == null) {
                }
                final boolean[] zArr2 = new boolean[1];
                if (PhotoViewer.this.currentMessageObject != null) {
                    dialogId = PhotoViewer.this.currentMessageObject.getDialogId();
                    if (!DialogObject.isEncryptedDialog(dialogId)) {
                    }
                }
                builder2.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda1
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i8) {
                        PhotoViewer.16.this.lambda$onItemClick$12(zArr2, dialogInterface, i8);
                    }
                });
                builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                AlertDialog create22 = builder2.create();
                PhotoViewer.this.showAlertDialog(builder2);
                textView = (TextView) create22.getButton(-1);
                if (textView == null) {
                }
            } else if (i == 10 || i == 18) {
                PhotoViewer.this.onSharePressed();
            } else if (i == 11) {
                try {
                    if (!PhotoViewer.this.isEmbedVideo) {
                        if (PhotoViewer.this.currentMessageObject == null) {
                            if (PhotoViewer.this.pageBlocksAdapter != null) {
                                if (AndroidUtilities.openForView(PhotoViewer.this.pageBlocksAdapter.getMedia(PhotoViewer.this.currentIndex), PhotoViewer.this.parentActivity)) {
                                }
                                PhotoViewer.this.showDownloadAlert();
                                return;
                            }
                            return;
                        }
                        MessageObject messageObject = PhotoViewer.this.currentMessageObject;
                        Activity activity = PhotoViewer.this.parentActivity;
                        Theme.ResourcesProvider resourcesProvider = this.val$resourcesProvider;
                        if (!PhotoViewer.this.currentMessageObject.isVideo() && !PhotoViewer.this.currentMessageObject.isPhoto() && !PhotoViewer.this.currentMessageObject.isSticker()) {
                            z4 = false;
                        }
                        if (AndroidUtilities.openForView(messageObject, activity, resourcesProvider, z4)) {
                        }
                        PhotoViewer.this.showDownloadAlert();
                        return;
                    }
                    Browser.openUrl(PhotoViewer.this.parentActivity, MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).webpage.url);
                    PhotoViewer.this.closePhoto(false, false);
                } catch (Exception e) {
                    FileLog.e(e);
                }
            } else if (i == 13 || i == 15) {
                if (PhotoViewer.this.parentActivity == null || PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                if (MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaPhoto) {
                    tLObject = MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).photo;
                } else if (!(MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaDocument)) {
                    return;
                } else {
                    tLObject = MessageObject.getMedia(PhotoViewer.this.currentMessageObject.messageOwner).document;
                }
                PhotoViewer.this.masksAlert = new StickersAlert(PhotoViewer.this.parentActivity, PhotoViewer.this.currentMessageObject, tLObject, this.val$resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.16.1
                    {
                        16.this = this;
                    }

                    @Override // org.telegram.ui.Components.StickersAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface, org.telegram.ui.ActionBar.BaseFragment.AttachedSheet
                    public void dismiss() {
                        super.dismiss();
                        if (PhotoViewer.this.masksAlert == this) {
                            PhotoViewer.this.masksAlert = null;
                        }
                    }
                };
                PhotoViewer.this.masksAlert.show();
            } else if (i == 5) {
                if (PhotoViewer.this.pipItem.getAlpha() != 1.0f) {
                    return;
                }
                if (!PhotoViewer.this.isEmbedVideo) {
                    PhotoViewer.this.switchToPip(false);
                } else if (PhotoViewer.this.photoViewerWebView.openInPip()) {
                    if (PhotoViewer.PipInstance != null) {
                        PhotoViewer.PipInstance.destroyPhotoViewer();
                    }
                    PhotoViewer.this.isInline = true;
                    PhotoViewer unused = PhotoViewer.PipInstance = PhotoViewer.Instance;
                    PhotoViewer unused2 = PhotoViewer.Instance = null;
                    PhotoViewer.this.isVisible = false;
                    PhotoViewer.this.isVisibleOrAnimating = false;
                    if (PhotoViewer.this.currentPlaceObject != null && !PhotoViewer.this.currentPlaceObject.imageReceiver.getVisible()) {
                        PhotoViewer.this.currentPlaceObject.imageReceiver.setVisible(true, true);
                    }
                    PhotoViewer.this.clippingImageProgress = 1.0f;
                    PhotoViewer.this.containerView.invalidate();
                    PhotoViewer.this.dismissInternal();
                }
            } else if (i == 7) {
                if (PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                FileLoader.getInstance(PhotoViewer.this.currentAccount).cancelLoadFile(PhotoViewer.this.currentMessageObject.getDocument());
                PhotoViewer.this.releasePlayer(false);
                PhotoViewer.this.bottomLayout.setTag(r5);
                PhotoViewer.this.bottomLayout.setVisibility(0);
            } else if (i != 14) {
                if (i != 16) {
                    if (i == 17) {
                        File pathToAttach = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocationVideo), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocationVideo), true);
                        boolean z7 = PhotoViewer.this.currentFileLocationVideo.imageType == 2;
                        PhotoViewer.this.placeProvider.openPhotoForEdit(pathToAttach.getAbsolutePath(), z7 ? FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(PhotoViewer.getFileLocation(PhotoViewer.this.currentFileLocation), PhotoViewer.getFileLocationExt(PhotoViewer.this.currentFileLocation), true).getAbsolutePath() : null, z7);
                        return;
                    } else if (i != 21) {
                        if (i == 22) {
                            PhotoViewer.this.captionTranslated = false;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda6
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.16.this.lambda$onItemClick$18();
                                }
                            }, 32L);
                            PhotoViewer.this.updateCaptionTranslated();
                            return;
                        }
                        return;
                    } else if (PhotoViewer.this.switchingToIndex < 0 || PhotoViewer.this.switchingToIndex >= PhotoViewer.this.imagesArr.size()) {
                        return;
                    } else {
                        PhotoViewer.this.captionTranslated = true;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda4
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.16.this.lambda$onItemClick$16();
                            }
                        }, 32L);
                        PhotoViewer.this.updateCaptionTranslated();
                        TranslateController translateController = MessagesController.getInstance(PhotoViewer.this.currentAccount).getTranslateController();
                        final PhotoViewer photoViewer4 = PhotoViewer.this;
                        translateController.translatePhoto((MessageObject) PhotoViewer.this.imagesArr.get(PhotoViewer.this.switchingToIndex), new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda5
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.access$16800(PhotoViewer.this);
                            }
                        });
                        return;
                    }
                }
                final TLRPC.Photo photo = (TLRPC.Photo) PhotoViewer.this.avatarsArr.get(PhotoViewer.this.currentIndex);
                if (photo == null || photo.sizes.isEmpty()) {
                    return;
                }
                TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 800);
                TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 90);
                final UserConfig userConfig = UserConfig.getInstance(PhotoViewer.this.currentAccount);
                if (PhotoViewer.this.avatarsDialogId == userConfig.clientUserId) {
                    TLRPC.TL_photos_updateProfilePhoto tL_photos_updateProfilePhoto = new TLRPC.TL_photos_updateProfilePhoto();
                    TLRPC.TL_inputPhoto tL_inputPhoto = new TLRPC.TL_inputPhoto();
                    tL_photos_updateProfilePhoto.id = tL_inputPhoto;
                    tL_inputPhoto.id = photo.id;
                    tL_inputPhoto.access_hash = photo.access_hash;
                    tL_inputPhoto.file_reference = photo.file_reference;
                    ConnectionsManager.getInstance(PhotoViewer.this.currentAccount).sendRequest(tL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda2
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC.TL_error tL_error) {
                            PhotoViewer.16.this.lambda$onItemClick$14(userConfig, photo, tLObject2, tL_error);
                        }
                    });
                    TLRPC.User user2 = MessagesController.getInstance(PhotoViewer.this.currentAccount).getUser(Long.valueOf(userConfig.clientUserId));
                    if (user2 != null) {
                        TLRPC.UserProfilePhoto userProfilePhoto = user2.photo;
                        userProfilePhoto.photo_id = photo.id;
                        userProfilePhoto.dc_id = photo.dc_id;
                        userProfilePhoto.photo_small = closestPhotoSizeWithSize2.location;
                        userProfilePhoto.photo_big = closestPhotoSizeWithSize.location;
                        userConfig.setCurrentUser(user2);
                        userConfig.saveConfig(true);
                        NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                    }
                } else {
                    TLRPC.Chat chat3 = MessagesController.getInstance(PhotoViewer.this.currentAccount).getChat(Long.valueOf(-PhotoViewer.this.avatarsDialogId));
                    if (chat3 == null) {
                        return;
                    }
                    TLRPC.TL_inputChatPhoto tL_inputChatPhoto = new TLRPC.TL_inputChatPhoto();
                    TLRPC.TL_inputPhoto tL_inputPhoto2 = new TLRPC.TL_inputPhoto();
                    tL_inputChatPhoto.id = tL_inputPhoto2;
                    tL_inputPhoto2.id = photo.id;
                    tL_inputPhoto2.access_hash = photo.access_hash;
                    tL_inputPhoto2.file_reference = photo.file_reference;
                    MessagesController.getInstance(PhotoViewer.this.currentAccount).changeChatAvatar(-PhotoViewer.this.avatarsDialogId, tL_inputChatPhoto, null, null, null, 0.0d, null, null, null, null);
                    TLRPC.ChatPhoto chatPhoto = chat3.photo;
                    chatPhoto.dc_id = photo.dc_id;
                    chatPhoto.photo_small = closestPhotoSizeWithSize2.location;
                    chatPhoto.photo_big = closestPhotoSizeWithSize.location;
                    NotificationCenter.getInstance(PhotoViewer.this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_AVATAR));
                }
                PhotoViewer.this.currentAvatarLocation = ImageLocation.getForPhoto(closestPhotoSizeWithSize, photo);
                PhotoViewer.this.avatarsArr.remove(PhotoViewer.this.currentIndex);
                PhotoViewer.this.avatarsArr.add(0, photo);
                PhotoViewer.this.imagesArrLocations.remove(PhotoViewer.this.currentIndex);
                PhotoViewer.this.imagesArrLocations.add(0, (ImageLocation) PhotoViewer.this.imagesArrLocations.get(PhotoViewer.this.currentIndex));
                PhotoViewer.this.imagesArrLocationsVideo.remove(PhotoViewer.this.currentIndex);
                PhotoViewer.this.imagesArrLocationsVideo.add(0, (ImageLocation) PhotoViewer.this.imagesArrLocationsVideo.get(PhotoViewer.this.currentIndex));
                PhotoViewer.this.imagesArrLocationsSizes.remove(PhotoViewer.this.currentIndex);
                PhotoViewer.this.imagesArrLocationsSizes.add(0, (Long) PhotoViewer.this.imagesArrLocationsSizes.get(PhotoViewer.this.currentIndex));
                PhotoViewer.this.imagesArrMessages.remove(PhotoViewer.this.currentIndex);
                PhotoViewer.this.imagesArrMessages.add(0, (TLRPC.Message) PhotoViewer.this.imagesArrMessages.get(PhotoViewer.this.currentIndex));
                PhotoViewer.this.currentIndex = -1;
                PhotoViewer.this.setImageIndex(0);
                PhotoViewer.this.groupedPhotosListView.clear();
                PhotoViewer.this.groupedPhotosListView.fillList();
                PhotoViewer.this.hintView.showWithAction(PhotoViewer.this.avatarsDialogId, 22, PhotoViewer.this.currentFileLocationVideo == PhotoViewer.this.currentFileLocation ? null : 1);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$16$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.16.this.lambda$onItemClick$15();
                    }
                }, 300L);
            } else {
                if (PhotoViewer.this.currentMessageObject == null) {
                    if (PhotoViewer.this.pageBlocksAdapter != null) {
                        TLObject media = PhotoViewer.this.pageBlocksAdapter.getMedia(PhotoViewer.this.currentIndex);
                        if (media instanceof TLRPC.Document) {
                            document = (TLRPC.Document) media;
                            MediaDataController.getInstance(PhotoViewer.this.currentAccount).addRecentGif(document, (int) (System.currentTimeMillis() / 1000), true);
                            messagesController = MessagesController.getInstance(PhotoViewer.this.currentAccount);
                            parentObject = PhotoViewer.this.pageBlocksAdapter.getParentObject();
                        }
                        if (PhotoViewer.this.containerView == null) {
                            BulletinFactory.of(PhotoViewer.this.containerView, this.val$resourcesProvider).createDownloadBulletin(BulletinFactory.FileType.GIF, this.val$resourcesProvider).show();
                            return;
                        }
                        return;
                    }
                    return;
                }
                document = PhotoViewer.this.currentMessageObject.getDocument();
                if (PhotoViewer.this.parentChatActivity == null || PhotoViewer.this.parentChatActivity.chatActivityEnterView == null) {
                    MediaDataController.getInstance(PhotoViewer.this.currentAccount).addRecentGif(document, (int) (System.currentTimeMillis() / 1000), true);
                } else {
                    PhotoViewer.this.parentChatActivity.chatActivityEnterView.addRecentGif(document);
                }
                messagesController = MessagesController.getInstance(PhotoViewer.this.currentAccount);
                parentObject = PhotoViewer.this.currentMessageObject;
                messagesController.saveGif(parentObject, document);
                if (PhotoViewer.this.containerView == null) {
                }
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 26 implements VideoTimelinePlayView.VideoTimelineViewDelegate {
        private int seekTo;
        private Runnable seekToRunnable;
        private boolean wasPlaying;

        26() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$seekTo$0() {
            PhotoViewer.this.seekVideoOrWebTo(this.seekTo);
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.needCaptureFrameReadyAtTime = this.seekTo;
                if (PhotoViewer.this.captureFrameReadyAtTime != PhotoViewer.this.needCaptureFrameReadyAtTime) {
                    PhotoViewer.this.captureFrameReadyAtTime = -1L;
                }
            }
            this.seekToRunnable = null;
        }

        private void seekTo(float f) {
            this.seekTo = (int) (PhotoViewer.this.videoDuration * f);
            if (SharedConfig.getDevicePerformanceClass() != 2) {
                if (this.seekToRunnable == null) {
                    Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$26$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.26.this.lambda$seekTo$0();
                        }
                    };
                    this.seekToRunnable = runnable;
                    AndroidUtilities.runOnUIThread(runnable, 100L);
                    return;
                }
                return;
            }
            PhotoViewer.this.seekVideoOrWebTo(this.seekTo);
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.needCaptureFrameReadyAtTime = this.seekTo;
                if (PhotoViewer.this.captureFrameReadyAtTime != PhotoViewer.this.needCaptureFrameReadyAtTime) {
                    PhotoViewer.this.captureFrameReadyAtTime = -1L;
                }
            }
            this.seekToRunnable = null;
        }

        private void updateAvatarStartTime(int i) {
            PhotoViewer photoViewer;
            float f;
            float rightProgress;
            if (PhotoViewer.this.sendPhotoType != 1) {
                return;
            }
            if (i == 0) {
                PhotoViewer photoViewer2 = PhotoViewer.this;
                photoViewer2.avatarStartProgress = photoViewer2.videoTimelineView.getProgress();
                PhotoViewer photoViewer3 = PhotoViewer.this;
                photoViewer3.avatarStartTime = photoViewer3.videoDuration * 1000.0f * PhotoViewer.this.avatarStartProgress;
            } else if (PhotoViewer.this.photoCropView != null) {
                if (PhotoViewer.this.videoTimelineView.getLeftProgress() > PhotoViewer.this.avatarStartProgress || PhotoViewer.this.videoTimelineView.getRightProgress() < PhotoViewer.this.avatarStartProgress) {
                    PhotoViewer.this.photoCropView.setVideoThumbVisible(false);
                    if (i == 1) {
                        photoViewer = PhotoViewer.this;
                        f = photoViewer.videoDuration * 1000.0f;
                        rightProgress = PhotoViewer.this.videoTimelineView.getLeftProgress();
                    } else {
                        photoViewer = PhotoViewer.this;
                        f = photoViewer.videoDuration * 1000.0f;
                        rightProgress = PhotoViewer.this.videoTimelineView.getRightProgress();
                    }
                    photoViewer.avatarStartTime = f * rightProgress;
                    PhotoViewer.this.captureFrameAtTime = -1L;
                }
            }
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void didStartDragging(int i) {
            if (i == VideoTimelinePlayView.TYPE_PROGRESS) {
                PhotoViewer.this.cancelVideoPlayRunnable();
                if (PhotoViewer.this.sendPhotoType == 1) {
                    PhotoViewer.this.cancelFlashAnimations();
                    PhotoViewer.this.captureFrameAtTime = -1L;
                }
                boolean isVideoPlaying = PhotoViewer.this.isVideoPlaying();
                this.wasPlaying = isVideoPlaying;
                if (isVideoPlaying) {
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.pauseVideoOrWeb();
                    PhotoViewer.this.containerView.invalidate();
                }
            }
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void didStopDragging(int i) {
            Runnable runnable = this.seekToRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.seekToRunnable.run();
            }
            PhotoViewer.this.cancelVideoPlayRunnable();
            if (PhotoViewer.this.sendPhotoType != 1 || PhotoViewer.this.flashView == null || i != VideoTimelinePlayView.TYPE_PROGRESS) {
                if (PhotoViewer.this.sendPhotoType == 1 || this.wasPlaying) {
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.playVideoOrWeb();
                    return;
                }
                return;
            }
            PhotoViewer.this.cancelFlashAnimations();
            PhotoViewer photoViewer = PhotoViewer.this;
            photoViewer.captureFrameAtTime = photoViewer.avatarStartTime;
            if (PhotoViewer.this.captureFrameReadyAtTime == this.seekTo) {
                PhotoViewer.this.captureCurrentFrame();
            }
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onLeftProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.videoPlayer.isPlaying()) {
                PhotoViewer.this.manuallyPaused = false;
                PhotoViewer.this.videoPlayer.pause();
                PhotoViewer.this.containerView.invalidate();
            }
            updateAvatarStartTime(1);
            seekTo(f);
            PhotoViewer.this.videoPlayerSeekbar.setProgress(0.0f);
            PhotoViewer.this.videoTimelineView.setProgress(f);
            PhotoViewer.this.updateVideoInfo();
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onPlayProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.sendPhotoType == 1) {
                updateAvatarStartTime(0);
            }
            seekTo(f);
        }

        @Override // org.telegram.ui.Components.VideoTimelinePlayView.VideoTimelineViewDelegate
        public void onRightProgressChanged(float f) {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            if (PhotoViewer.this.videoPlayer.isPlaying()) {
                PhotoViewer.this.manuallyPaused = false;
                PhotoViewer.this.videoPlayer.pause();
                PhotoViewer.this.containerView.invalidate();
            }
            updateAvatarStartTime(2);
            seekTo(f);
            PhotoViewer.this.videoPlayerSeekbar.setProgress(1.0f);
            PhotoViewer.this.videoTimelineView.setProgress(f);
            PhotoViewer.this.updateVideoInfo();
        }
    }

    /* loaded from: classes4.dex */
    public class 33 implements DialogInterface.OnDismissListener {
        33() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onDismiss$0() {
            if (PhotoViewer.this.lastFrameImageView == null || PhotoViewer.this.lastFrameImageView.getParent() == null) {
                return;
            }
            ((ViewGroup) PhotoViewer.this.lastFrameImageView.getParent()).removeView(PhotoViewer.this.lastFrameImageView);
            if (PhotoViewer.this.lastFrameBitmap != null) {
                if (PhotoViewer.this.lastFrameImageView != null) {
                    PhotoViewer.this.lastFrameImageView.setBackground(null);
                }
                AndroidUtilities.recycleBitmap(PhotoViewer.this.lastFrameBitmap);
                PhotoViewer.this.lastFrameBitmap = null;
            }
            PhotoViewer.this.lastFrameImageView = null;
        }

        @Override // android.content.DialogInterface.OnDismissListener
        public void onDismiss(DialogInterface dialogInterface) {
            if (PhotoViewer.this.lastFrameImageView != null) {
                PhotoViewer.this.lastFrameImageView.animate().alpha(0.0f).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$33$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.33.this.lambda$onDismiss$0();
                    }
                }).setDuration(150L).start();
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 35 extends ShareAlert {
        final /* synthetic */ boolean val$finalOpenKeyboardOnShareAlertClose;
        final /* synthetic */ FrameLayout val$photoContainerView;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        35(Context context, ChatActivity chatActivity, ArrayList arrayList, String str, String str2, boolean z, String str3, String str4, boolean z2, boolean z3, boolean z4, Theme.ResourcesProvider resourcesProvider, FrameLayout frameLayout, boolean z5) {
            super(context, chatActivity, arrayList, str, str2, z, str3, str4, z2, z3, z4, resourcesProvider);
            PhotoViewer.this = r15;
            this.val$photoContainerView = frameLayout;
            this.val$finalOpenKeyboardOnShareAlertClose = z5;
        }

        public /* synthetic */ void lambda$dismissInternal$1() {
            if (PhotoViewer.this.parentChatActivity == null || PhotoViewer.this.parentChatActivity.getChatActivityEnterView() == null) {
                return;
            }
            PhotoViewer.this.parentChatActivity.getChatActivityEnterView().openKeyboard();
        }

        public /* synthetic */ void lambda$onSend$0(FrameLayout frameLayout, LongSparseArray longSparseArray, int i) {
            BulletinFactory.createForwardedBulletin(PhotoViewer.this.parentActivity, frameLayout, longSparseArray.size(), longSparseArray.size() == 1 ? ((TLRPC.Dialog) longSparseArray.valueAt(0)).id : 0L, i, -115203550, -1).show();
        }

        @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
        public void dismissInternal() {
            super.dismissInternal();
            if (this.val$finalOpenKeyboardOnShareAlertClose) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$35$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.35.this.lambda$dismissInternal$1();
                    }
                }, 50L);
            }
            PhotoViewer.this.requestAdjust();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.ShareAlert
        public void onSend(final LongSparseArray longSparseArray, final int i, TLRPC.TL_forumTopic tL_forumTopic) {
            final FrameLayout frameLayout = this.val$photoContainerView;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$35$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.35.this.lambda$onSend$0(frameLayout, longSparseArray, i);
                }
            }, 250L);
        }
    }

    /* loaded from: classes4.dex */
    public class 39 extends AnimatorListenerAdapter {
        final /* synthetic */ View val$textureView;

        39(View view) {
            PhotoViewer.this = r1;
            this.val$textureView = view;
        }

        public /* synthetic */ void lambda$onAnimationEnd$0(View view) {
            view.setOutlineProvider(null);
            if (PhotoViewer.this.textureImageView != null) {
                PhotoViewer.this.textureImageView.setOutlineProvider(null);
            }
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.setOutlineProvider(null);
            }
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            PhotoViewer.this.pipAnimationInProgress = false;
            PhotoViewer.this.switchToInlineRunnable.run();
            final View view = this.val$textureView;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$39$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.39.this.lambda$onAnimationEnd$0(view);
                }
            }, 100L);
        }
    }

    /* loaded from: classes4.dex */
    public class 5 implements Runnable {
        5() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$run$0(float f) {
            ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).edit().putFloat(PhotoViewer.this.shouldSavePositionForCurrentVideo, f).commit();
        }

        /* JADX WARN: Code restructure failed: missing block: B:145:0x00f6, code lost:
            if (org.telegram.ui.PhotoViewer.this.sendPhotoType != 1) goto L44;
         */
        @Override // java.lang.Runnable
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void run() {
            float f;
            if (PhotoViewer.this.videoPlayer != null || (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable())) {
                float f2 = 0.0f;
                if (!PhotoViewer.this.isCurrentVideo) {
                    final float currentVideoPosition = ((float) PhotoViewer.this.getCurrentVideoPosition()) / ((float) PhotoViewer.this.getVideoDuration());
                    if (PhotoViewer.this.shownControlsByEnd && !PhotoViewer.this.actionBarWasShownBeforeByEnd) {
                        currentVideoPosition = 0.0f;
                    }
                    if (PhotoViewer.this.currentVideoFinishedLoading) {
                        f = 1.0f;
                    } else {
                        long elapsedRealtime = SystemClock.elapsedRealtime();
                        if (Math.abs(elapsedRealtime - PhotoViewer.this.lastBufferedPositionCheck) >= 500) {
                            if (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable()) {
                                f = PhotoViewer.this.photoViewerWebView.getBufferedPosition();
                            } else if (PhotoViewer.this.isStreaming) {
                                f = FileLoader.getInstance(PhotoViewer.this.currentAccount).getBufferedProgressFromPosition(PhotoViewer.this.seekToProgressPending != 0.0f ? PhotoViewer.this.seekToProgressPending : currentVideoPosition, PhotoViewer.this.currentFileNames[0]);
                            } else {
                                f = 1.0f;
                            }
                            PhotoViewer.this.lastBufferedPositionCheck = elapsedRealtime;
                        } else {
                            f = -1.0f;
                        }
                    }
                    if (PhotoViewer.this.inPreview || PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 0) {
                        if (PhotoViewer.this.seekToProgressPending == 0.0f) {
                            PhotoViewer photoViewer = PhotoViewer.this;
                            VideoPlayerRewinder videoPlayerRewinder = photoViewer.videoPlayerRewinder;
                            if (videoPlayerRewinder.rewindCount == 0 || !videoPlayerRewinder.rewindByBackSeek) {
                                photoViewer.videoPlayerSeekbar.setProgress(currentVideoPosition, false);
                            }
                        }
                        if (f != -1.0f) {
                            PhotoViewer.this.videoPlayerSeekbar.setBufferedProgress(f);
                            PipVideoOverlay.setBufferedProgress(f);
                        }
                    } else if (currentVideoPosition >= PhotoViewer.this.videoTimelineView.getRightProgress()) {
                        PhotoViewer.this.manuallyPaused = false;
                        PhotoViewer.this.pauseVideoOrWeb();
                        PhotoViewer.this.videoPlayerSeekbar.setProgress(0.0f);
                        PhotoViewer photoViewer2 = PhotoViewer.this;
                        photoViewer2.seekVideoOrWebTo((int) (photoViewer2.videoTimelineView.getLeftProgress() * ((float) PhotoViewer.this.getVideoDuration())));
                        PhotoViewer.this.containerView.invalidate();
                    } else {
                        float leftProgress = currentVideoPosition - PhotoViewer.this.videoTimelineView.getLeftProgress();
                        if (leftProgress < 0.0f) {
                            leftProgress = 0.0f;
                        }
                        currentVideoPosition = leftProgress / (PhotoViewer.this.videoTimelineView.getRightProgress() - PhotoViewer.this.videoTimelineView.getLeftProgress());
                        if (currentVideoPosition > 1.0f) {
                            currentVideoPosition = 1.0f;
                        }
                        PhotoViewer.this.videoPlayerSeekbar.setProgress(currentVideoPosition);
                    }
                    PhotoViewer.this.videoPlayerSeekbarView.invalidate();
                    if (PhotoViewer.this.shouldSavePositionForCurrentVideo != null && currentVideoPosition >= 0.0f && SystemClock.elapsedRealtime() - PhotoViewer.this.lastSaveTime >= 1000) {
                        String unused = PhotoViewer.this.shouldSavePositionForCurrentVideo;
                        PhotoViewer.this.lastSaveTime = SystemClock.elapsedRealtime();
                        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$5$$ExternalSyntheticLambda0
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.5.this.lambda$run$0(currentVideoPosition);
                            }
                        });
                    }
                } else if (!PhotoViewer.this.videoTimelineView.isDragging()) {
                    float currentVideoPosition2 = ((float) PhotoViewer.this.getCurrentVideoPosition()) / ((float) PhotoViewer.this.getVideoDuration());
                    if (!PhotoViewer.this.shownControlsByEnd || PhotoViewer.this.actionBarWasShownBeforeByEnd) {
                        f2 = currentVideoPosition2;
                    }
                    if (!PhotoViewer.this.inPreview && (PhotoViewer.this.currentEditMode != 0 || PhotoViewer.this.videoTimelineViewContainer.getVisibility() == 0)) {
                        if (f2 >= PhotoViewer.this.videoTimelineView.getRightProgress()) {
                            PhotoViewer.this.videoTimelineView.setProgress(PhotoViewer.this.videoTimelineView.getLeftProgress());
                            PhotoViewer.this.videoPlayer.seekTo((int) (PhotoViewer.this.videoTimelineView.getLeftProgress() * ((float) PhotoViewer.this.getVideoDuration())));
                            PhotoViewer.this.manuallyPaused = false;
                            PhotoViewer.this.cancelVideoPlayRunnable();
                            if (PhotoViewer.this.muteVideo || PhotoViewer.this.sendPhotoType == 1 || PhotoViewer.this.currentEditMode != 0 || PhotoViewer.this.switchingToMode > 0) {
                                PhotoViewer.this.playVideoOrWeb();
                            } else {
                                PhotoViewer.this.pauseVideoOrWeb();
                            }
                            PhotoViewer.this.containerView.invalidate();
                        }
                        PhotoViewer.this.videoTimelineView.setProgress(f2);
                    }
                }
                PhotoViewer.this.updateVideoPlayerTime();
            }
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.updateAlpha();
            }
            if (PhotoViewer.this.isPlaying) {
                AndroidUtilities.runOnUIThread(PhotoViewer.this.updateProgressRunnable, 17L);
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 50 implements VideoPlayer.VideoPlayerDelegate {
        private boolean firstState = true;

        50() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onError$0(DialogInterface dialogInterface, int i) {
            try {
                AndroidUtilities.openForView(PhotoViewer.this.currentMessageObject, PhotoViewer.this.parentActivity, PhotoViewer.this.resourcesProvider, true);
                PhotoViewer.this.closePhoto(false, false);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        public /* synthetic */ void lambda$onRenderedFirstFrame$1() {
            PhotoViewer.this.firstFrameView.updateAlpha();
        }

        public /* synthetic */ void lambda$onRenderedFirstFrame$2() {
            PhotoViewer.this.firstFrameView.updateAlpha();
        }

        public /* synthetic */ void lambda$onSurfaceTextureUpdated$3() {
            if (PhotoViewer.this.firstFrameView != null) {
                PhotoViewer.this.firstFrameView.checkFromPlayer(PhotoViewer.this.videoPlayer);
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onError(VideoPlayer videoPlayer, Exception exc) {
            if (PhotoViewer.this.videoPlayer != videoPlayer) {
                return;
            }
            FileLog.e(exc);
            if (PhotoViewer.this.menuItem.isSubItemVisible(11)) {
                AlertDialog.Builder builder = new AlertDialog.Builder(PhotoViewer.this.parentActivity, PhotoViewer.this.resourcesProvider);
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("CantPlayVideo", R.string.CantPlayVideo));
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$50$$ExternalSyntheticLambda3
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        PhotoViewer.50.this.lambda$onError$0(dialogInterface, i);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                PhotoViewer.this.showAlertDialog(builder);
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onRenderedFirstFrame() {
            if (!PhotoViewer.this.textureUploaded) {
                PhotoViewer.this.textureUploaded = true;
                PhotoViewer.this.containerView.invalidate();
            }
            if (PhotoViewer.this.firstFrameView != null) {
                if (PhotoViewer.this.videoPlayer == null || !PhotoViewer.this.videoPlayer.isLooping()) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$50$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.50.this.lambda$onRenderedFirstFrame$1();
                        }
                    }, 64L);
                }
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onRenderedFirstFrame(AnalyticsListener.EventTime eventTime) {
            if (eventTime.eventPlaybackPositionMs == PhotoViewer.this.needCaptureFrameReadyAtTime) {
                PhotoViewer.this.captureFrameReadyAtTime = eventTime.eventPlaybackPositionMs;
                PhotoViewer.this.needCaptureFrameReadyAtTime = -1L;
                PhotoViewer.this.captureCurrentFrame();
            }
            if (PhotoViewer.this.firstFrameView != null) {
                if (PhotoViewer.this.videoPlayer == null || !PhotoViewer.this.videoPlayer.isLooping()) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$50$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.50.this.lambda$onRenderedFirstFrame$2();
                        }
                    }, 64L);
                }
            }
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public /* synthetic */ void onSeekFinished(AnalyticsListener.EventTime eventTime) {
            VideoPlayer.VideoPlayerDelegate.-CC.$default$onSeekFinished(this, eventTime);
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public /* synthetic */ void onSeekStarted(AnalyticsListener.EventTime eventTime) {
            VideoPlayer.VideoPlayerDelegate.-CC.$default$onSeekStarted(this, eventTime);
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onStateChanged(boolean z, int i) {
            if (this.firstState && PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPlayer.getDuration() != -9223372036854775807L) {
                this.firstState = false;
                if (PhotoViewer.this.imagesArr.isEmpty() && PhotoViewer.this.secureDocuments.isEmpty() && PhotoViewer.this.imagesArrLocations.isEmpty() && !PhotoViewer.this.imagesArrLocals.isEmpty() && PhotoViewer.this.switchingToIndex >= 0 && PhotoViewer.this.switchingToIndex < PhotoViewer.this.imagesArrLocals.size()) {
                    Object obj = PhotoViewer.this.imagesArrLocals.get(PhotoViewer.this.switchingToIndex);
                    if (obj instanceof MediaController.PhotoEntry) {
                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                        if (photoEntry.isVideo && photoEntry.editedInfo != null) {
                            PhotoViewer.this.videoPlayer.seekTo(photoEntry.editedInfo.start * ((float) PhotoViewer.this.videoPlayer.getDuration()));
                            if (PhotoViewer.this.videoTimelineView != null) {
                                PhotoViewer.this.videoTimelineView.setProgress(photoEntry.editedInfo.start);
                            }
                        }
                    }
                }
            }
            PhotoViewer.this.updatePlayerState(z, i);
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public boolean onSurfaceDestroyed(SurfaceTexture surfaceTexture) {
            if (PhotoViewer.this.changingTextureView) {
                PhotoViewer.this.changingTextureView = false;
                if (PhotoViewer.this.isInline) {
                    PhotoViewer.this.waitingForFirstTextureUpload = 1;
                    PhotoViewer.this.changedTextureView.setSurfaceTexture(surfaceTexture);
                    PhotoViewer.this.changedTextureView.setSurfaceTextureListener(PhotoViewer.this.surfaceTextureListener);
                    PhotoViewer.this.changedTextureView.setVisibility(0);
                    return true;
                }
            }
            return false;
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
            PhotoViewer.this.checkChangedTextureView(false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$50$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.50.this.lambda$onSurfaceTextureUpdated$3();
                }
            });
        }

        @Override // org.telegram.ui.Components.VideoPlayer.VideoPlayerDelegate
        public void onVideoSizeChanged(int i, int i2, int i3, float f) {
            if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                if (i3 != 90 && i3 != 270) {
                    i2 = i;
                    i = i2;
                }
                float f2 = i2 * f;
                int i4 = (int) f2;
                PhotoViewer.this.videoWidth = i4;
                float f3 = i;
                PhotoViewer.this.videoHeight = (int) (f * f3);
                PhotoViewer.this.aspectRatioFrameLayout.setAspectRatio(i == 0 ? 1.0f : f2 / f3, i3);
                if (PhotoViewer.this.videoTextureView instanceof VideoEditTextureView) {
                    ((VideoEditTextureView) PhotoViewer.this.videoTextureView).setHDRInfo(PhotoViewer.this.videoPlayer.getHDRStaticInfo(null));
                    ((VideoEditTextureView) PhotoViewer.this.videoTextureView).setVideoSize(i4, i);
                    if (PhotoViewer.this.sendPhotoType == 1) {
                        PhotoViewer.this.setCropBitmap();
                    }
                }
                PhotoViewer.this.videoSizeSet = true;
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 53 implements PhotoCropView.PhotoCropViewDelegate {
        53() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onVideoThumbClick$0() {
            PhotoViewer.this.manuallyPaused = false;
            if (PhotoViewer.this.videoPlayer != null) {
                PhotoViewer.this.videoPlayer.play();
            }
            PhotoViewer.this.videoPlayRunnable = null;
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public int getVideoThumbX() {
            return (int) (AndroidUtilities.dp(16.0f) + ((PhotoViewer.this.videoTimelineView.getMeasuredWidth() - AndroidUtilities.dp(32.0f)) * PhotoViewer.this.avatarStartProgress));
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public boolean mirror() {
            return PhotoViewer.this.cropMirror();
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onChange(boolean z) {
            PhotoViewer.this.updateResetButtonVisibility(!z);
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onTapUp() {
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.manuallyPaused = true;
                PhotoViewer.this.toggleVideoPlayer();
            }
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onUpdate() {
            PhotoViewer.this.containerView.invalidate();
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public void onVideoThumbClick() {
            if (PhotoViewer.this.videoPlayer == null) {
                return;
            }
            PhotoViewer.this.videoPlayer.seekTo(((float) PhotoViewer.this.videoPlayer.getDuration()) * PhotoViewer.this.avatarStartProgress);
            PhotoViewer.this.videoPlayer.pause();
            PhotoViewer.this.videoTimelineView.setProgress(PhotoViewer.this.avatarStartProgress);
            PhotoViewer.this.cancelVideoPlayRunnable();
            AndroidUtilities.runOnUIThread(PhotoViewer.this.videoPlayRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$53$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.53.this.lambda$onVideoThumbClick$0();
                }
            }, 860L);
        }

        @Override // org.telegram.ui.Components.PhotoCropView.PhotoCropViewDelegate
        public boolean rotate() {
            return PhotoViewer.this.cropRotate(-90.0f);
        }
    }

    /* loaded from: classes4.dex */
    public class 54 extends AnimatorListenerAdapter {
        final /* synthetic */ int val$mode;

        54(int i) {
            PhotoViewer.this = r1;
            this.val$mode = i;
        }

        public /* synthetic */ void lambda$onAnimationEnd$0(MaskPaintView maskPaintView) {
            maskPaintView.shutdown();
            try {
                PhotoViewer.this.containerView.removeView(maskPaintView);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:162:0x02c3  */
        /* JADX WARN: Removed duplicated region for block: B:165:0x02e5  */
        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onAnimationEnd(Animator animator) {
            ObjectAnimator ofFloat;
            if (PhotoViewer.this.currentEditMode == 1) {
                PhotoViewer.this.photoCropView.onDisappear();
                PhotoViewer.this.photoCropView.onHide();
                PhotoViewer.this.editorDoneLayout.setVisibility(8);
                PhotoViewer.this.photoCropView.setVisibility(8);
                PhotoViewer.this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, 1.0f, 0.0f, 0.0f);
            } else if (PhotoViewer.this.currentEditMode == 2) {
                try {
                    PhotoViewer.this.containerView.removeView(PhotoViewer.this.photoFilterView);
                } catch (Exception e) {
                    FileLog.e(e);
                }
                PhotoViewer.this.photoFilterView = null;
            } else if (PhotoViewer.this.currentEditMode == 3) {
                PhotoViewer.this.photoPaintView.onAnimationStateChanged(false);
                try {
                    PhotoViewer.this.containerView.removeView(PhotoViewer.this.photoPaintView.getView());
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
                PhotoViewer.this.photoPaintView = null;
            } else if (PhotoViewer.this.currentEditMode == 4) {
                PhotoViewer.this.maskPaintViewShuttingDown = true;
                PhotoViewer.this.containerView.invalidate();
                final MaskPaintView maskPaintView = PhotoViewer.this.maskPaintView;
                PhotoViewer.this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$54$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.54.this.lambda$onAnimationEnd$0(maskPaintView);
                    }
                });
                PhotoViewer.this.maskPaintView = null;
                PhotoViewer.this.eraseBtn.setActive(false, true);
                PhotoViewer.this.restoreBtn.setActive(false, true);
            }
            PhotoViewer.this.imageMoveAnimation = null;
            int i = PhotoViewer.this.currentEditMode;
            PhotoViewer.this.currentEditMode = this.val$mode;
            PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
            if (PhotoViewer.this.paintKeyboardNotifier != null) {
                PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
            }
            if (PhotoViewer.this.currentEditMode != 3) {
                PhotoViewer.this.translateY = 0.0f;
            }
            PhotoViewer.this.applying = false;
            if (PhotoViewer.this.sendPhotoType == 1) {
                PhotoViewer.this.photoCropView.setVisibility(0);
            }
            if (PhotoViewer.this.sendPhotoType == 11 && (i == 3 || i == 2 || i == 1 || i == 4)) {
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.animateToX = photoViewer.savedTx;
                PhotoViewer photoViewer2 = PhotoViewer.this;
                photoViewer2.animateToY = photoViewer2.savedTy;
                PhotoViewer photoViewer3 = PhotoViewer.this;
                photoViewer3.animateToScale = photoViewer3.savedScale;
                PhotoViewer photoViewer4 = PhotoViewer.this;
                photoViewer4.animateToRotate = photoViewer4.savedRotation;
            } else {
                PhotoViewer photoViewer5 = PhotoViewer.this;
                photoViewer5.scale = photoViewer5.animateToScale = photoViewer5.scale1(false);
                PhotoViewer photoViewer6 = PhotoViewer.this;
                photoViewer6.updateMinMax(photoViewer6.scale);
                PhotoViewer.this.animateToX = 0.0f;
                PhotoViewer.this.animateToY = 0.0f;
            }
            PhotoViewer.this.switchingToMode = -1;
            PhotoViewer.this.containerView.invalidate();
            if (PhotoViewer.this.savedState != null) {
                PhotoViewer.this.savedState.restore();
                PhotoViewer.this.savedState = null;
                ActionBarToggleParams enableStatusBarAnimation = new ActionBarToggleParams().enableStatusBarAnimation(false);
                PhotoViewer.this.toggleActionBar(false, false, enableStatusBarAnimation);
                PhotoViewer.this.toggleActionBar(true, true, enableStatusBarAnimation);
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            ArrayList arrayList = new ArrayList();
            FrameLayout frameLayout = PhotoViewer.this.pickerView;
            Property property = View.TRANSLATION_Y;
            arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, 0.0f));
            FrameLayout frameLayout2 = PhotoViewer.this.pickerView;
            Property property2 = View.ALPHA;
            arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, 1.0f));
            StickerMakerView stickerMakerView = PhotoViewer.this.stickerMakerView;
            if (stickerMakerView != null) {
                arrayList.add(ObjectAnimator.ofFloat(stickerMakerView, property2, 1.0f));
            }
            if (PhotoViewer.this.stickerMakerBackgroundView != null) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.stickerMakerBackgroundView, property2, 1.0f));
            }
            arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.pickerViewSendButton, property, 0.0f));
            if (PhotoViewer.this.sendPhotoType != 1) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.actionBar, property, 0.0f));
            }
            if (PhotoViewer.this.needCaptionLayout) {
                arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.captionTextViewSwitcher, property, 0.0f));
            }
            if (PhotoViewer.this.sendPhotoType != 0 && PhotoViewer.this.sendPhotoType != 4) {
                if (PhotoViewer.this.sendPhotoType == 1) {
                    ofFloat = ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, property2, 1.0f);
                }
                if (PhotoViewer.this.muteItem.getTag() != null) {
                    PhotoViewer.this.muteItem.setVisibility(0);
                    arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.muteItem, property2, 1.0f));
                }
                if (PhotoViewer.this.navigationBar != null) {
                    PhotoViewer.this.navigationBar.setVisibility(0);
                    arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, property2, 1.0f));
                }
                animatorSet.playTogether(arrayList);
                animatorSet.setDuration(200L);
                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.54.1
                    {
                        54.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator2) {
                        if (PhotoViewer.this.videoConvertSupported && PhotoViewer.this.isCurrentVideo) {
                            PhotoViewer.this.updateVideoInfo();
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator2) {
                        PhotoViewer.this.pickerView.setVisibility(0);
                        if (PhotoViewer.this.useFullWidthSendButton()) {
                            PhotoViewer.this.doneButtonFullWidth.setVisibility(0);
                        } else {
                            PhotoViewer.this.pickerViewSendButton.setVisibility(0);
                        }
                        PhotoViewer.this.actionBar.setVisibility(0);
                        if (PhotoViewer.this.needCaptionLayout) {
                            PhotoViewer.this.captionTextViewSwitcher.setVisibility(PhotoViewer.this.captionTextViewSwitcher.getTag() != null ? 0 : 4);
                        }
                        if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                            PhotoViewer.this.checkImageView.setVisibility(0);
                            PhotoViewer.this.photosCounterView.setVisibility(0);
                            PhotoViewer.this.updateActionBarTitlePadding();
                        }
                    }
                });
                animatorSet.start();
            }
            arrayList.add(ObjectAnimator.ofFloat(PhotoViewer.this.checkImageView, property2, 1.0f));
            ofFloat = ObjectAnimator.ofFloat(PhotoViewer.this.photosCounterView, property2, 1.0f);
            arrayList.add(ofFloat);
            if (PhotoViewer.this.muteItem.getTag() != null) {
            }
            if (PhotoViewer.this.navigationBar != null) {
            }
            animatorSet.playTogether(arrayList);
            animatorSet.setDuration(200L);
            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.54.1
                {
                    54.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator2) {
                    if (PhotoViewer.this.videoConvertSupported && PhotoViewer.this.isCurrentVideo) {
                        PhotoViewer.this.updateVideoInfo();
                    }
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationStart(Animator animator2) {
                    PhotoViewer.this.pickerView.setVisibility(0);
                    if (PhotoViewer.this.useFullWidthSendButton()) {
                        PhotoViewer.this.doneButtonFullWidth.setVisibility(0);
                    } else {
                        PhotoViewer.this.pickerViewSendButton.setVisibility(0);
                    }
                    PhotoViewer.this.actionBar.setVisibility(0);
                    if (PhotoViewer.this.needCaptionLayout) {
                        PhotoViewer.this.captionTextViewSwitcher.setVisibility(PhotoViewer.this.captionTextViewSwitcher.getTag() != null ? 0 : 4);
                    }
                    if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                        PhotoViewer.this.checkImageView.setVisibility(0);
                        PhotoViewer.this.photosCounterView.setVisibility(0);
                        PhotoViewer.this.updateActionBarTitlePadding();
                    }
                }
            });
            animatorSet.start();
        }
    }

    /* loaded from: classes4.dex */
    public class 66 extends Fade {
        final /* synthetic */ boolean val$isCaptionEmpty;
        final /* synthetic */ boolean val$isCurrentCaptionEmpty;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        66(int i, boolean z, boolean z2) {
            super(i);
            PhotoViewer.this = r1;
            this.val$isCurrentCaptionEmpty = z;
            this.val$isCaptionEmpty = z2;
        }

        public /* synthetic */ void lambda$onAppear$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.backgroundAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.captionScrollView.invalidate();
        }

        @Override // android.transition.Fade, android.transition.Visibility
        public Animator onAppear(ViewGroup viewGroup, View view, TransitionValues transitionValues, TransitionValues transitionValues2) {
            Animator onAppear = super.onAppear(viewGroup, view, transitionValues, transitionValues2);
            if (this.val$isCurrentCaptionEmpty && !this.val$isCaptionEmpty && view == PhotoViewer.this.captionTextViewSwitcher) {
                onAppear.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.66.1
                    {
                        66.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionScrollView.backgroundAlpha = 1.0f;
                    }
                });
                ((ObjectAnimator) onAppear).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$66$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.66.this.lambda$onAppear$0(valueAnimator);
                    }
                });
            }
            return onAppear;
        }
    }

    /* loaded from: classes4.dex */
    public class 67 extends Fade {
        final /* synthetic */ boolean val$isCaptionEmpty;
        final /* synthetic */ boolean val$isCurrentCaptionEmpty;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        67(int i, boolean z, boolean z2) {
            super(i);
            PhotoViewer.this = r1;
            this.val$isCurrentCaptionEmpty = z;
            this.val$isCaptionEmpty = z2;
        }

        public /* synthetic */ void lambda$onDisappear$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.backgroundAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.captionScrollView.invalidate();
        }

        @Override // android.transition.Fade, android.transition.Visibility
        public Animator onDisappear(ViewGroup viewGroup, View view, TransitionValues transitionValues, TransitionValues transitionValues2) {
            Animator onDisappear = super.onDisappear(viewGroup, view, transitionValues, transitionValues2);
            if (!this.val$isCurrentCaptionEmpty && this.val$isCaptionEmpty && view == PhotoViewer.this.captionTextViewSwitcher) {
                onDisappear.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.67.1
                    {
                        67.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionScrollView.setVisibility(4);
                        PhotoViewer.this.captionScrollView.backgroundAlpha = 1.0f;
                    }
                });
                ((ObjectAnimator) onDisappear).addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$67$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.67.this.lambda$onDisappear$0(valueAnimator);
                    }
                });
            }
            return onDisappear;
        }
    }

    /* loaded from: classes4.dex */
    public class 68 extends Transition {
        68() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$createAnimator$0(ValueAnimator valueAnimator) {
            PhotoViewer.this.captionScrollView.scrollTo(0, ((Integer) valueAnimator.getAnimatedValue()).intValue());
        }

        @Override // android.transition.Transition
        public void captureEndValues(TransitionValues transitionValues) {
            if (transitionValues.view == PhotoViewer.this.captionTextViewSwitcher) {
                transitionValues.values.put("translationY", Integer.valueOf(PhotoViewer.this.captionScrollView.getPendingMarginTopDiff()));
            }
        }

        @Override // android.transition.Transition
        public void captureStartValues(TransitionValues transitionValues) {
            if (transitionValues.view == PhotoViewer.this.captionScrollView) {
                transitionValues.values.put("scrollY", Integer.valueOf(PhotoViewer.this.captionScrollView.getScrollY()));
            }
        }

        @Override // android.transition.Transition
        public Animator createAnimator(ViewGroup viewGroup, TransitionValues transitionValues, TransitionValues transitionValues2) {
            int intValue;
            if (transitionValues.view == PhotoViewer.this.captionScrollView) {
                ValueAnimator ofInt = ValueAnimator.ofInt(((Integer) transitionValues.values.get("scrollY")).intValue(), 0);
                ofInt.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.68.1
                    {
                        68.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionTextViewSwitcher.getNextView().setText((CharSequence) null);
                        PhotoViewer.this.captionScrollView.applyPendingTopMargin();
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationStart(Animator animator) {
                        PhotoViewer.this.captionScrollView.stopScrolling();
                    }
                });
                ofInt.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$68$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.68.this.lambda$createAnimator$0(valueAnimator);
                    }
                });
                return ofInt;
            } else if (transitionValues2.view != PhotoViewer.this.captionTextViewSwitcher || (intValue = ((Integer) transitionValues2.values.get("translationY")).intValue()) == 0) {
                return null;
            } else {
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(PhotoViewer.this.captionTextViewSwitcher, View.TRANSLATION_Y, 0.0f, intValue);
                ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.68.2
                    {
                        68.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.captionTextViewSwitcher.setTranslationY(0.0f);
                    }
                });
                return ofFloat;
            }
        }
    }

    /* loaded from: classes4.dex */
    public class 70 implements ViewTreeObserver.OnPreDrawListener {
        final /* synthetic */ ClippingImageView[] val$animatingImageViews;
        final /* synthetic */ Integer val$embedSeekTime;
        final /* synthetic */ ViewGroup.LayoutParams val$layoutParams;
        final /* synthetic */ float val$left;
        final /* synthetic */ PlaceProviderObject val$object;
        final /* synthetic */ ArrayList val$photos;
        final /* synthetic */ PhotoViewerProvider val$provider;
        final /* synthetic */ float val$top;

        /* loaded from: classes4.dex */
        public class 1 extends AnimatorListenerAdapter {
            1() {
                70.this = r1;
            }

            public /* synthetic */ void lambda$onAnimationEnd$0() {
                PhotoViewer.this.transitionNotificationLocker.unlock();
                if (PhotoViewer.this.animationEndRunnable != null) {
                    PhotoViewer.this.animationEndRunnable.run();
                    PhotoViewer.this.animationEndRunnable = null;
                }
                PhotoViewer.this.setCaptionHwLayerEnabled(true);
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$70$1$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.70.1.this.lambda$onAnimationEnd$0();
                    }
                });
            }
        }

        70(ClippingImageView[] clippingImageViewArr, ViewGroup.LayoutParams layoutParams, float f, PlaceProviderObject placeProviderObject, float f2, PhotoViewerProvider photoViewerProvider, ArrayList arrayList, Integer num) {
            PhotoViewer.this = r1;
            this.val$animatingImageViews = clippingImageViewArr;
            this.val$layoutParams = layoutParams;
            this.val$left = f;
            this.val$object = placeProviderObject;
            this.val$top = f2;
            this.val$provider = photoViewerProvider;
            this.val$photos = arrayList;
            this.val$embedSeekTime = num;
        }

        public /* synthetic */ void lambda$onPreDraw$0(ClippingImageView[] clippingImageViewArr, ArrayList arrayList, Integer num, PhotoViewerProvider photoViewerProvider) {
            PhotoViewer.this.animationEndRunnable = null;
            if (PhotoViewer.this.containerView == null || PhotoViewer.this.windowView == null) {
                return;
            }
            PhotoViewer.this.containerView.setLayerType(0, null);
            PhotoViewer.this.animationInProgress = 0;
            PhotoViewer.this.invalidateBlur();
            PhotoViewer.this.transitionAnimationStartTime = 0L;
            PhotoViewer.this.leftCropState = null;
            PhotoViewer.this.leftCropTransform.setViewTransform(false);
            PhotoViewer.this.rightCropState = null;
            PhotoViewer.this.rightCropTransform.setViewTransform(false);
            PhotoViewer.this.setImages();
            PhotoViewer.this.setCropBitmap();
            PhotoViewer.this.containerView.invalidate();
            for (ClippingImageView clippingImageView : clippingImageViewArr) {
                clippingImageView.setVisibility(8);
            }
            if (PhotoViewer.this.showAfterAnimation != null) {
                PhotoViewer.this.showAfterAnimation.imageReceiver.setVisible(true, true);
            }
            if (PhotoViewer.this.hideAfterAnimation != null) {
                PhotoViewer.this.hideAfterAnimation.imageReceiver.setVisible(false, true);
            }
            if (arrayList != null && PhotoViewer.this.sendPhotoType != 3 && PhotoViewer.this.sendPhotoType != 1 && (PhotoViewer.this.placeProvider == null || !PhotoViewer.this.placeProvider.closeKeyboard())) {
                PhotoViewer.this.makeFocusable();
            }
            if (PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPlayer.isPlaying() && PhotoViewer.this.isCurrentVideo && !PhotoViewer.this.imagesArrLocals.isEmpty()) {
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.seekAnimatedStickersTo(photoViewer.videoPlayer.getCurrentPosition());
                PhotoViewer.this.playOrStopAnimatedStickers(true);
            }
            if (PhotoViewer.this.isEmbedVideo) {
                PhotoViewer.this.initEmbedVideo(num.intValue());
            }
            if (photoViewerProvider != null) {
                photoViewerProvider.onOpen();
            }
        }

        public /* synthetic */ void lambda$onPreDraw$1(ValueAnimator valueAnimator) {
            PhotoViewer.this.clippingImageProgress = 1.0f - ((Float) valueAnimator.getAnimatedValue()).floatValue();
            PhotoViewer.this.invalidateBlur();
        }

        public /* synthetic */ void lambda$onPreDraw$2(AnimatorSet animatorSet) {
            PhotoViewer.this.transitionNotificationLocker.lock();
            animatorSet.start();
        }

        public /* synthetic */ void lambda$onPreDraw$3(PlaceProviderObject placeProviderObject) {
            PhotoViewer.this.disableShowCheck = false;
            placeProviderObject.imageReceiver.setVisible(false, true);
        }

        @Override // android.view.ViewTreeObserver.OnPreDrawListener
        public boolean onPreDraw() {
            float f;
            float f2;
            float measuredWidth;
            ClippingImageView[] clippingImageViewArr;
            ClippingImageView[] clippingImageViewArr2 = this.val$animatingImageViews;
            if (clippingImageViewArr2.length > 1) {
                clippingImageViewArr2[1].setAlpha(1.0f);
                this.val$animatingImageViews[1].setAdditionalTranslationX(-PhotoViewer.this.getLeftInset());
            }
            ClippingImageView clippingImageView = this.val$animatingImageViews[0];
            clippingImageView.setTranslationX(clippingImageView.getTranslationX() + PhotoViewer.this.getLeftInset());
            PhotoViewer.this.windowView.getViewTreeObserver().removeOnPreDrawListener(this);
            if (PhotoViewer.this.sendPhotoType == 1) {
                float f3 = PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0;
                float measuredHeight = (PhotoViewer.this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - f3;
                float measuredWidth2 = PhotoViewer.this.photoCropView.getMeasuredWidth() / 2.0f;
                float f4 = f3 + (measuredHeight / 2.0f);
                float min = (Math.min(PhotoViewer.this.photoCropView.getMeasuredWidth(), measuredHeight) - (AndroidUtilities.dp(16.0f) * 2)) / 2.0f;
                float f5 = f4 - min;
                ViewGroup.LayoutParams layoutParams = this.val$layoutParams;
                float f6 = (f4 + min) - f5;
                f = Math.max(((measuredWidth2 + min) - (measuredWidth2 - min)) / layoutParams.width, f6 / layoutParams.height);
                f2 = f5 + ((f6 - (this.val$layoutParams.height * f)) / 2.0f);
                measuredWidth = ((((PhotoViewer.this.windowView.getMeasuredWidth() - PhotoViewer.this.getLeftInset()) - PhotoViewer.this.getRightInset()) - (this.val$layoutParams.width * f)) / 2.0f) + PhotoViewer.this.getLeftInset();
            } else {
                float min2 = Math.min(PhotoViewer.this.windowView.getMeasuredWidth() / this.val$layoutParams.width, (AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) / this.val$layoutParams.height);
                if (PhotoViewer.this.sendPhotoType == 11) {
                    min2 *= PhotoViewer.this.scale1();
                }
                f = min2;
                f2 = ((AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (this.val$layoutParams.height * f)) / 2.0f;
                measuredWidth = (PhotoViewer.this.windowView.getMeasuredWidth() - (this.val$layoutParams.width * f)) / 2.0f;
                PhotoViewer.this.rotate = 0.0f;
                PhotoViewer.this.animateToRotate = 0.0f;
            }
            int abs = (int) Math.abs(this.val$left - this.val$object.imageReceiver.getImageX());
            int abs2 = (int) Math.abs(this.val$top - this.val$object.imageReceiver.getImageY());
            if (this.val$object.imageReceiver.isAspectFit()) {
                abs = 0;
            }
            int[] iArr = new int[2];
            this.val$object.parentView.getLocationInWindow(iArr);
            int i = iArr[1];
            int i2 = Build.VERSION.SDK_INT;
            float f7 = i - ((i2 >= 21 || PhotoViewer.this.inBubbleMode) ? 0 : AndroidUtilities.statusBarHeight);
            PlaceProviderObject placeProviderObject = this.val$object;
            float f8 = placeProviderObject.viewY + this.val$top;
            int i3 = (int) ((f7 - f8) + placeProviderObject.clipTopAddition);
            if (i3 < 0) {
                i3 = 0;
            }
            int height = (int) (((f8 + this.val$layoutParams.height) - ((iArr[1] + placeProviderObject.parentView.getHeight()) - ((i2 >= 21 || PhotoViewer.this.inBubbleMode) ? 0 : AndroidUtilities.statusBarHeight))) + this.val$object.clipBottomAddition);
            if (height < 0) {
                height = 0;
            }
            int max = Math.max(i3, abs2);
            int max2 = Math.max(height, abs2);
            PhotoViewer.this.animationValues[0][0] = PhotoViewer.this.animatingImageView.getScaleX();
            PhotoViewer.this.animationValues[0][1] = PhotoViewer.this.animatingImageView.getScaleY();
            PhotoViewer.this.animationValues[0][2] = PhotoViewer.this.animatingImageView.getTranslationX();
            PhotoViewer.this.animationValues[0][3] = PhotoViewer.this.animatingImageView.getTranslationY();
            float f9 = abs;
            PhotoViewer.this.animationValues[0][4] = this.val$object.scale * f9;
            PhotoViewer.this.animationValues[0][5] = max * this.val$object.scale;
            PhotoViewer.this.animationValues[0][6] = max2 * this.val$object.scale;
            int[] radius = PhotoViewer.this.animatingImageView.getRadius();
            for (int i4 = 0; i4 < 4; i4++) {
                PhotoViewer.this.animationValues[0][i4 + 7] = radius != null ? radius[i4] : 0.0f;
            }
            PhotoViewer.this.animationValues[0][11] = abs2 * this.val$object.scale;
            PhotoViewer.this.animationValues[0][12] = f9 * this.val$object.scale;
            PhotoViewer.this.animationValues[1][0] = f;
            PhotoViewer.this.animationValues[1][1] = f;
            PhotoViewer.this.animationValues[1][2] = measuredWidth;
            PhotoViewer.this.animationValues[1][3] = f2;
            PhotoViewer.this.animationValues[1][4] = 0.0f;
            PhotoViewer.this.animationValues[1][5] = 0.0f;
            PhotoViewer.this.animationValues[1][6] = 0.0f;
            PhotoViewer.this.animationValues[1][7] = 0.0f;
            PhotoViewer.this.animationValues[1][8] = 0.0f;
            PhotoViewer.this.animationValues[1][9] = 0.0f;
            PhotoViewer.this.animationValues[1][10] = 0.0f;
            PhotoViewer.this.animationValues[1][11] = 0.0f;
            PhotoViewer.this.animationValues[1][12] = 0.0f;
            int i5 = 0;
            while (true) {
                ClippingImageView[] clippingImageViewArr3 = this.val$animatingImageViews;
                if (i5 >= clippingImageViewArr3.length) {
                    break;
                }
                clippingImageViewArr3[i5].setAnimationProgress(0.0f);
                i5++;
            }
            PhotoViewer.this.backgroundDrawable.setAlpha(0);
            PhotoViewer.this.containerView.setAlpha(0.0f);
            PhotoViewer.this.navigationBar.setAlpha(0.0f);
            PhotoViewerProvider photoViewerProvider = this.val$provider;
            if (photoViewerProvider != null) {
                photoViewerProvider.onPreOpen();
            }
            PhotoViewer photoViewer = PhotoViewer.this;
            final ClippingImageView[] clippingImageViewArr4 = this.val$animatingImageViews;
            final ArrayList arrayList = this.val$photos;
            final Integer num = this.val$embedSeekTime;
            final PhotoViewerProvider photoViewerProvider2 = this.val$provider;
            photoViewer.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$70$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.70.this.lambda$onPreDraw$0(clippingImageViewArr4, arrayList, num, photoViewerProvider2);
                }
            };
            if (PhotoViewer.this.openedFullScreenVideo) {
                if (PhotoViewer.this.animationEndRunnable != null) {
                    PhotoViewer.this.animationEndRunnable.run();
                    PhotoViewer.this.animationEndRunnable = null;
                }
                PhotoViewer.this.containerView.setAlpha(1.0f);
                PhotoViewer.this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
                int i6 = 0;
                while (true) {
                    ClippingImageView[] clippingImageViewArr5 = this.val$animatingImageViews;
                    if (i6 >= clippingImageViewArr5.length) {
                        break;
                    }
                    clippingImageViewArr5[i6].setAnimationProgress(1.0f);
                    i6++;
                }
                if (PhotoViewer.this.sendPhotoType == 1) {
                    PhotoViewer.this.photoCropView.setAlpha(1.0f);
                }
            } else {
                final AnimatorSet animatorSet = new AnimatorSet();
                int i7 = PhotoViewer.this.sendPhotoType != 1 ? 2 : 3;
                ClippingImageView[] clippingImageViewArr6 = this.val$animatingImageViews;
                ArrayList arrayList2 = new ArrayList(i7 + clippingImageViewArr6.length + (clippingImageViewArr6.length > 1 ? 1 : 0));
                int i8 = 0;
                while (true) {
                    clippingImageViewArr = this.val$animatingImageViews;
                    if (i8 >= clippingImageViewArr.length) {
                        break;
                    }
                    ObjectAnimator ofFloat = ObjectAnimator.ofFloat(clippingImageViewArr[i8], AnimationProperties.CLIPPING_IMAGE_VIEW_PROGRESS, 0.0f, 1.0f);
                    if (i8 == 0) {
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$70$$ExternalSyntheticLambda1
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                PhotoViewer.70.this.lambda$onPreDraw$1(valueAnimator);
                            }
                        });
                    }
                    arrayList2.add(ofFloat);
                    i8++;
                }
                if (clippingImageViewArr.length > 1) {
                    arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.animatingImageView, View.ALPHA, 0.0f, 1.0f));
                }
                arrayList2.add(ObjectAnimator.ofInt(PhotoViewer.this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, 0, NotificationCenter.closeSearchByActiveAction));
                FrameLayoutDrawer frameLayoutDrawer = PhotoViewer.this.containerView;
                Property property = View.ALPHA;
                arrayList2.add(ObjectAnimator.ofFloat(frameLayoutDrawer, property, 0.0f, 1.0f));
                arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, property, 0.0f, 1.0f));
                if (PhotoViewer.this.sendPhotoType == 1) {
                    arrayList2.add(ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, property, 0.0f, 1.0f));
                }
                animatorSet.playTogether(arrayList2);
                animatorSet.setDuration(200L);
                animatorSet.addListener(new 1());
                PhotoViewer.this.containerView.setLayerType(2, null);
                PhotoViewer.this.setCaptionHwLayerEnabled(false);
                PhotoViewer.this.transitionAnimationStartTime = System.currentTimeMillis();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$70$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.70.this.lambda$onPreDraw$2(animatorSet);
                    }
                });
            }
            BackgroundDrawable backgroundDrawable = PhotoViewer.this.backgroundDrawable;
            final PlaceProviderObject placeProviderObject2 = this.val$object;
            backgroundDrawable.drawRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$70$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.70.this.lambda$onPreDraw$3(placeProviderObject2);
                }
            };
            if (PhotoViewer.this.parentChatActivity != null && PhotoViewer.this.parentChatActivity.getFragmentView() != null) {
                UndoView undoView = PhotoViewer.this.parentChatActivity.getUndoView();
                if (undoView != null) {
                    undoView.hide(false, 1);
                }
                PhotoViewer.this.parentChatActivity.getFragmentView().invalidate();
            }
            return true;
        }
    }

    /* loaded from: classes4.dex */
    public class 73 extends AnimatorListenerAdapter {
        73() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (PhotoViewer.this.animationEndRunnable != null) {
                PhotoViewer.this.animationEndRunnable.run();
                PhotoViewer.this.animationEndRunnable = null;
            }
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$73$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.73.this.lambda$onAnimationEnd$0();
                }
            });
        }
    }

    /* loaded from: classes4.dex */
    public class 79 implements Runnable {
        final /* synthetic */ int val$compressQuality;
        final /* synthetic */ String val$videoPath;

        79(String str, int i) {
            PhotoViewer.this = r1;
            this.val$videoPath = str;
            this.val$compressQuality = i;
        }

        public /* synthetic */ void lambda$run$0(Runnable runnable, int[] iArr) {
            if (PhotoViewer.this.parentActivity == null || runnable != PhotoViewer.this.currentLoadingVideoRunnable) {
                return;
            }
            PhotoViewer.this.currentLoadingVideoRunnable = null;
            PhotoViewer.this.audioFramesSize = iArr[5];
            PhotoViewer.this.videoDuration = iArr[4];
            PhotoViewer.this.videoFramerate = iArr[7];
            PhotoViewer photoViewer = PhotoViewer.this;
            photoViewer.videoFramesSize = ((photoViewer.bitrate / 8) * PhotoViewer.this.videoDuration) / 1000.0f;
            if (PhotoViewer.this.videoConvertSupported) {
                PhotoViewer.this.rotationValue = iArr[8];
                PhotoViewer.this.updateWidthHeightBitrateForCompression();
                if (PhotoViewer.this.selectedCompression > PhotoViewer.this.compressionsCount - 1) {
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.selectedCompression = photoViewer2.compressionsCount - 1;
                }
                PhotoViewer.this.compressItem.setState(PhotoViewer.this.compressionsCount > 1, PhotoViewer.this.muteVideo, Math.min(PhotoViewer.this.resultWidth, PhotoViewer.this.resultHeight));
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("compressionsCount = " + PhotoViewer.this.compressionsCount + " w = " + PhotoViewer.this.originalWidth + " h = " + PhotoViewer.this.originalHeight + " r = " + PhotoViewer.this.rotationValue);
                }
                PhotoViewer.this.qualityChooseView.invalidate();
            } else {
                PhotoViewer.this.compressItem.setState(false, PhotoViewer.this.muteVideo, Math.min(PhotoViewer.this.resultWidth, PhotoViewer.this.resultHeight));
                PhotoViewer.this.compressionsCount = 0;
            }
            PhotoViewer.this.updateVideoInfo();
            PhotoViewer.this.updateMuteButton();
        }

        @Override // java.lang.Runnable
        public void run() {
            if (PhotoViewer.this.currentLoadingVideoRunnable != this) {
                return;
            }
            int videoBitrate = MediaController.getVideoBitrate(this.val$videoPath);
            final int[] iArr = new int[11];
            AnimatedFileDrawable.getVideoInfo(this.val$videoPath, iArr);
            boolean z = false;
            boolean z2 = iArr[10] != 0;
            PhotoViewer photoViewer = PhotoViewer.this;
            if (iArr[0] != 0 && (!z2 || iArr[9] != 0)) {
                z = true;
            }
            photoViewer.videoConvertSupported = z;
            PhotoViewer photoViewer2 = PhotoViewer.this;
            if (videoBitrate == -1) {
                videoBitrate = iArr[3];
            }
            photoViewer2.originalBitrate = photoViewer2.bitrate = videoBitrate;
            if (PhotoViewer.this.videoConvertSupported) {
                PhotoViewer photoViewer3 = PhotoViewer.this;
                photoViewer3.resultWidth = photoViewer3.originalWidth = iArr[1];
                PhotoViewer photoViewer4 = PhotoViewer.this;
                photoViewer4.resultHeight = photoViewer4.originalHeight = iArr[2];
                PhotoViewer photoViewer5 = PhotoViewer.this;
                photoViewer5.updateCompressionsCount(photoViewer5.originalWidth, PhotoViewer.this.originalHeight);
                PhotoViewer photoViewer6 = PhotoViewer.this;
                int i = this.val$compressQuality;
                if (i == -1) {
                    i = photoViewer6.selectCompression();
                }
                photoViewer6.selectedCompression = i;
                PhotoViewer.this.prepareRealEncoderBitrate();
                PhotoViewer.this.isH264Video = MediaController.isH264Video(this.val$videoPath);
            }
            if (PhotoViewer.this.currentLoadingVideoRunnable != this) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$79$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.79.this.lambda$run$0(this, iArr);
                }
            });
        }
    }

    /* loaded from: classes4.dex */
    public class 8 implements ViewTreeObserver.OnPreDrawListener {
        8() {
            PhotoViewer.this = r1;
        }

        public /* synthetic */ void lambda$onPreDraw$0() {
            PhotoViewer.this.textureImageView.setVisibility(4);
            PhotoViewer.this.textureImageView.setImageDrawable(null);
            if (PhotoViewer.this.currentBitmap != null) {
                PhotoViewer.this.currentBitmap.recycle();
                PhotoViewer.this.currentBitmap = null;
            }
        }

        public /* synthetic */ void lambda$onPreDraw$1() {
            if (PhotoViewer.this.isInline) {
                PhotoViewer.this.dismissInternal();
            }
        }

        @Override // android.view.ViewTreeObserver.OnPreDrawListener
        public boolean onPreDraw() {
            PhotoViewer.this.changedTextureView.getViewTreeObserver().removeOnPreDrawListener(this);
            if (PhotoViewer.this.textureImageView != null) {
                if (PhotoViewer.this.isInline) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$8$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.8.this.lambda$onPreDraw$0();
                        }
                    }, 300L);
                } else {
                    PhotoViewer.this.textureImageView.setVisibility(4);
                    PhotoViewer.this.textureImageView.setImageDrawable(null);
                    if (PhotoViewer.this.currentBitmap != null) {
                        PhotoViewer.this.currentBitmap.recycle();
                        PhotoViewer.this.currentBitmap = null;
                    }
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$8$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.8.this.lambda$onPreDraw$1();
                }
            });
            PhotoViewer.this.waitingForFirstTextureUpload = 0;
            return true;
        }
    }

    /* loaded from: classes4.dex */
    public static class ActionBarToggleParams {
        public static final ActionBarToggleParams DEFAULT = new ActionBarToggleParams();
        public Interpolator animationInterpolator;
        public int animationDuration = NotificationCenter.storyQualityUpdate;
        public boolean enableStatusBarAnimation = true;
        public boolean enableTranslationAnimation = true;

        public ActionBarToggleParams animationDuration(int i) {
            this.animationDuration = i;
            return this;
        }

        public ActionBarToggleParams animationInterpolator(Interpolator interpolator) {
            this.animationInterpolator = interpolator;
            return this;
        }

        public ActionBarToggleParams enableStatusBarAnimation(boolean z) {
            this.enableStatusBarAnimation = z;
            return this;
        }

        public ActionBarToggleParams enableTranslationAnimation(boolean z) {
            this.enableTranslationAnimation = z;
            return this;
        }
    }

    /* loaded from: classes4.dex */
    public class BackgroundDrawable extends ColorDrawable {
        private boolean allowDrawContent;
        private Runnable drawRunnable;
        private final Paint paint;
        private final RectF rect;
        private final RectF visibleRect;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public BackgroundDrawable(int i) {
            super(i);
            PhotoViewer.this = r2;
            this.rect = new RectF();
            this.visibleRect = new RectF();
            Paint paint = new Paint(1);
            this.paint = paint;
            paint.setColor(i);
        }

        public /* synthetic */ void lambda$setAlpha$0() {
            if (PhotoViewer.this.parentAlert != null) {
                PhotoViewer.this.parentAlert.setAllowDrawContent(this.allowDrawContent);
            }
        }

        @Override // android.graphics.drawable.ColorDrawable, android.graphics.drawable.Drawable
        public void draw(Canvas canvas) {
            Runnable runnable;
            if (PhotoViewer.this.animationInProgress == 0 || AndroidUtilities.isTablet() || PhotoViewer.this.currentPlaceObject == null || PhotoViewer.this.currentPlaceObject.animatingImageView == null) {
                super.draw(canvas);
            } else {
                PhotoViewer.this.animatingImageView.getClippedVisibleRect(this.visibleRect);
                if (!this.visibleRect.isEmpty()) {
                    this.visibleRect.inset(AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f));
                    Rect bounds = getBounds();
                    float f = bounds.right;
                    float f2 = bounds.bottom;
                    for (int i = 0; i < 4; i++) {
                        if (i == 0) {
                            RectF rectF = this.rect;
                            RectF rectF2 = this.visibleRect;
                            rectF.set(0.0f, rectF2.top, rectF2.left, rectF2.bottom);
                        } else if (i == 1) {
                            this.rect.set(0.0f, 0.0f, f, this.visibleRect.top);
                        } else if (i == 2) {
                            RectF rectF3 = this.rect;
                            RectF rectF4 = this.visibleRect;
                            rectF3.set(rectF4.right, rectF4.top, f, rectF4.bottom);
                        } else if (i == 3) {
                            this.rect.set(0.0f, this.visibleRect.bottom, f, f2);
                        }
                        canvas.drawRect(this.rect, this.paint);
                    }
                }
            }
            if (getAlpha() == 0 || (runnable = this.drawRunnable) == null) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
            this.drawRunnable = null;
        }

        @Override // android.graphics.drawable.ColorDrawable, android.graphics.drawable.Drawable
        public void setAlpha(int i) {
            if (PhotoViewer.this.parentActivity instanceof LaunchActivity) {
                this.allowDrawContent = (PhotoViewer.this.isVisible && i == 255) ? false : true;
                ((LaunchActivity) PhotoViewer.this.parentActivity).drawerLayoutContainer.setAllowDrawContent(this.allowDrawContent);
                if (PhotoViewer.this.parentAlert != null) {
                    if (this.allowDrawContent) {
                        PhotoViewer.this.parentAlert.setAllowDrawContent(true);
                    } else {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$BackgroundDrawable$$ExternalSyntheticLambda0
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.BackgroundDrawable.this.lambda$setAlpha$0();
                            }
                        }, 50L);
                    }
                }
            }
            super.setAlpha(i);
            this.paint.setAlpha(i);
        }
    }

    /* loaded from: classes4.dex */
    public class BlurButton extends StickerCutOutBtn {
        private boolean active;
        private final AnimatedFloat activeFloat;
        private final Path path;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public BlurButton() {
            super(r8.stickerMakerView, r8.activityContext, r8.resourcesProvider, r8.blurManager);
            PhotoViewer.this = r8;
            this.path = new Path();
            this.activeFloat = new AnimatedFloat(this, 0L, 420L, CubicBezierInterpolator.EASE_OUT_QUINT);
        }

        public boolean isActive() {
            return this.active;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.Paint.Views.StickerCutOutBtn, org.telegram.ui.Stories.recorder.ButtonWithCounterView, android.view.View
        public void onDraw(Canvas canvas) {
            canvas.save();
            this.path.rewind();
            this.path.addRoundRect(this.bounds, AndroidUtilities.dp(this.rad), AndroidUtilities.dp(this.rad), Path.Direction.CW);
            canvas.clipPath(this.path);
            canvas.translate(-getX(), -getY());
            if (this == PhotoViewer.this.eraseBtn || this == PhotoViewer.this.restoreBtn) {
                canvas.translate(-PhotoViewer.this.btnLayout.getX(), -PhotoViewer.this.btnLayout.getY());
            }
            PhotoViewer.this.drawCaptionBlur(canvas, this.blurDrawer, -13948117, AndroidUtilities.DARK_STATUS_BAR_OVERLAY, false, true, false);
            float f = this.activeFloat.set(this.active);
            if (f > 0.0f) {
                canvas.drawColor(Theme.multAlpha(-1, f));
            }
            setTextColor(ColorUtils.blendARGB(-1, -16777216, f));
            canvas.restore();
            super.onDraw(canvas);
        }

        @Override // android.view.View
        public void onDrawForeground(Canvas canvas) {
            canvas.save();
            canvas.clipPath(this.path);
            super.onDrawForeground(canvas);
            canvas.restore();
        }

        public void setActive(boolean z, boolean z2) {
            this.active = z;
            if (!z2) {
                this.activeFloat.set(z, true);
            }
            invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public static class CaptionScrollView extends NestedScrollView {
        private Method abortAnimatedScrollMethod;
        public float backgroundAlpha;
        private final FrameLayout captionContainer;
        private final CaptionTextViewSwitcher captionTextViewSwitcher;
        public boolean dontChangeTopMargin;
        private boolean isLandscape;
        private boolean nestedScrollStarted;
        private float overScrollY;
        private final Paint paint;
        private int pendingTopMargin;
        private int prevHeight;
        private OverScroller scroller;
        private final SpringAnimation springAnimation;
        private int textHash;
        private float velocitySign;
        private float velocityY;

        public CaptionScrollView(Context context, CaptionTextViewSwitcher captionTextViewSwitcher, FrameLayout frameLayout) {
            super(context);
            Paint paint = new Paint(1);
            this.paint = paint;
            this.backgroundAlpha = 1.0f;
            this.pendingTopMargin = -1;
            this.captionTextViewSwitcher = captionTextViewSwitcher;
            this.captionContainer = frameLayout;
            setClipChildren(false);
            setOverScrollMode(2);
            paint.setColor(-16777216);
            setFadingEdgeLength(AndroidUtilities.dp(12.0f));
            setVerticalFadingEdgeEnabled(true);
            setWillNotDraw(false);
            SpringAnimation springAnimation = new SpringAnimation(captionTextViewSwitcher, DynamicAnimation.TRANSLATION_Y, 0.0f);
            this.springAnimation = springAnimation;
            springAnimation.getSpring().setStiffness(100.0f);
            springAnimation.setMinimumVisibleChange(1.0f);
            springAnimation.addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.PhotoViewer$CaptionScrollView$$ExternalSyntheticLambda0
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    PhotoViewer.CaptionScrollView.this.lambda$new$0(dynamicAnimation, f, f2);
                }
            });
            springAnimation.addEndListener(new DynamicAnimation.OnAnimationEndListener() { // from class: org.telegram.ui.PhotoViewer$CaptionScrollView$$ExternalSyntheticLambda1
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationEndListener
                public final void onAnimationEnd(DynamicAnimation dynamicAnimation, boolean z, float f, float f2) {
                    PhotoViewer.CaptionScrollView.this.lambda$new$1(dynamicAnimation, z, f, f2);
                }
            });
            springAnimation.getSpring().setDampingRatio(1.0f);
            try {
                Method declaredMethod = NestedScrollView.class.getDeclaredMethod("abortAnimatedScroll", null);
                this.abortAnimatedScrollMethod = declaredMethod;
                declaredMethod.setAccessible(true);
            } catch (Exception e) {
                this.abortAnimatedScrollMethod = null;
                FileLog.e(e);
            }
            try {
                Field declaredField = NestedScrollView.class.getDeclaredField("mScroller");
                declaredField.setAccessible(true);
                this.scroller = (OverScroller) declaredField.get(this);
            } catch (Exception e2) {
                this.scroller = null;
                FileLog.e(e2);
            }
        }

        public /* synthetic */ void lambda$new$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            this.overScrollY = f;
            this.velocityY = f2;
            onScrollUpdate();
        }

        public /* synthetic */ void lambda$new$1(DynamicAnimation dynamicAnimation, boolean z, float f, float f2) {
            onScrollEnd();
        }

        private void startSpringAnimationIfNotRunning(float f) {
            if (this.springAnimation.isRunning()) {
                return;
            }
            this.springAnimation.setStartVelocity(f);
            this.springAnimation.start();
        }

        private void updateTopMargin(int i, int i2) {
            int calculateNewContainerMarginTop = calculateNewContainerMarginTop(i, i2);
            if (calculateNewContainerMarginTop >= 0) {
                if (!this.dontChangeTopMargin) {
                    ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin = calculateNewContainerMarginTop;
                    calculateNewContainerMarginTop = -1;
                }
                this.pendingTopMargin = calculateNewContainerMarginTop;
            }
        }

        public void applyPendingTopMargin() {
            this.dontChangeTopMargin = false;
            if (this.pendingTopMargin >= 0) {
                ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin = this.pendingTopMargin;
                this.pendingTopMargin = -1;
                requestLayout();
            }
        }

        public int calculateNewContainerMarginTop(int i, int i2) {
            int fontMetricsInt;
            int dp;
            if (i == 0 || i2 == 0) {
                return -1;
            }
            TextView currentView = this.captionTextViewSwitcher.getCurrentView();
            CharSequence text = currentView.getText();
            int hashCode = text.hashCode();
            Point point = AndroidUtilities.displaySize;
            boolean z = point.x > point.y;
            if (this.textHash == hashCode && this.isLandscape == z && this.prevHeight == i2) {
                return -1;
            }
            this.textHash = hashCode;
            this.isLandscape = z;
            this.prevHeight = i2;
            currentView.measure(View.MeasureSpec.makeMeasureSpec(i, 1073741824), View.MeasureSpec.makeMeasureSpec(i2, Integer.MIN_VALUE));
            Layout layout = currentView.getLayout();
            int lineCount = layout.getLineCount();
            if ((!z || lineCount > 2) && (z || lineCount > 5)) {
                int min = Math.min(z ? 2 : 5, lineCount);
                loop0: while (min > 1) {
                    int i3 = min - 1;
                    for (int lineStart = layout.getLineStart(i3); lineStart < layout.getLineEnd(i3); lineStart++) {
                        if (!Character.isWhitespace(text.charAt(lineStart))) {
                            break loop0;
                        }
                    }
                    min--;
                }
                fontMetricsInt = i2 - (currentView.getPaint().getFontMetricsInt(null) * min);
                dp = AndroidUtilities.dp(8.0f);
            } else {
                fontMetricsInt = i2 - currentView.getMeasuredHeight();
                dp = this.captionTextViewSwitcher.getPaddingBottom();
            }
            return fontMetricsInt - dp;
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public void computeScroll() {
            OverScroller overScroller;
            super.computeScroll();
            if (!this.nestedScrollStarted && this.overScrollY != 0.0f && (overScroller = this.scroller) != null && overScroller.isFinished()) {
                startSpringAnimationIfNotRunning(0.0f);
            }
            onScrollUpdate();
        }

        @Override // androidx.core.widget.NestedScrollView
        public boolean dispatchNestedPreScroll(int i, int i2, int[] iArr, int[] iArr2, int i3) {
            iArr[1] = 0;
            if (this.nestedScrollStarted) {
                float f = this.overScrollY;
                if ((f > 0.0f && i2 > 0) || (f < 0.0f && i2 < 0)) {
                    float f2 = i2;
                    float f3 = f - f2;
                    if (f > 0.0f) {
                        if (f3 < 0.0f) {
                            this.overScrollY = 0.0f;
                            iArr[1] = (int) (0 + f2 + f3);
                        } else {
                            this.overScrollY = f3;
                            iArr[1] = i2;
                        }
                    } else if (f3 > 0.0f) {
                        this.overScrollY = 0.0f;
                        iArr[1] = (int) (0 + f2 + f3);
                    } else {
                        this.overScrollY = f3;
                        iArr[1] = i2;
                    }
                    onScrollUpdate();
                    this.captionTextViewSwitcher.setTranslationY(this.overScrollY);
                    return true;
                }
            }
            return false;
        }

        @Override // androidx.core.widget.NestedScrollView
        public void dispatchNestedScroll(int i, int i2, int i3, int i4, int[] iArr, int i5, int[] iArr2) {
            float f;
            if (i4 != 0) {
                int round = Math.round(i4 * (1.0f - Math.abs((-this.overScrollY) / (this.captionContainer.getTop() - ((isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())))));
                if (round != 0) {
                    if (this.nestedScrollStarted) {
                        float f2 = this.overScrollY - round;
                        this.overScrollY = f2;
                        this.captionTextViewSwitcher.setTranslationY(f2);
                    } else if (!this.springAnimation.isRunning()) {
                        OverScroller overScroller = this.scroller;
                        float currVelocity = overScroller != null ? overScroller.getCurrVelocity() : Float.NaN;
                        if (Float.isNaN(currVelocity)) {
                            f = 0.0f;
                        } else {
                            Point point = AndroidUtilities.displaySize;
                            float min = Math.min(point.x > point.y ? 3000.0f : 5000.0f, currVelocity);
                            round = (int) ((round * min) / currVelocity);
                            f = min * (-this.velocitySign);
                        }
                        if (round != 0) {
                            float f3 = this.overScrollY - round;
                            this.overScrollY = f3;
                            this.captionTextViewSwitcher.setTranslationY(f3);
                        }
                        startSpringAnimationIfNotRunning(f);
                    }
                }
                onScrollUpdate();
            }
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public void draw(Canvas canvas) {
            int width = getWidth();
            int height = getHeight();
            int scrollY = getScrollY();
            int save = canvas.save();
            int i = height + scrollY;
            canvas.clipRect(0, scrollY, width, i);
            this.paint.setAlpha((int) (this.backgroundAlpha * 127.0f));
            canvas.drawRect(0.0f, this.captionContainer.getTop() + this.captionTextViewSwitcher.getTranslationY(), width, i, this.paint);
            super.draw(canvas);
            canvas.restoreToCount(save);
        }

        @Override // androidx.core.widget.NestedScrollView
        public void fling(int i) {
            super.fling(i);
            this.velocitySign = Math.signum(i);
            this.velocityY = 0.0f;
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        protected float getBottomFadingEdgeStrength() {
            return 1.0f;
        }

        public int getPendingMarginTopDiff() {
            int i = this.pendingTopMargin;
            if (i >= 0) {
                return i - ((ViewGroup.MarginLayoutParams) this.captionContainer.getLayoutParams()).topMargin;
            }
            return 0;
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        protected float getTopFadingEdgeStrength() {
            return 1.0f;
        }

        protected boolean isStatusBarVisible() {
            return true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // androidx.core.widget.NestedScrollView, android.widget.FrameLayout, android.view.View
        public void onMeasure(int i, int i2) {
            updateTopMargin(View.MeasureSpec.getSize(i), View.MeasureSpec.getSize(i2));
            super.onMeasure(i, i2);
        }

        protected void onScrollEnd() {
        }

        protected void onScrollStart() {
        }

        protected void onScrollUpdate() {
        }

        @Override // androidx.core.widget.NestedScrollView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (motionEvent.getAction() != 0 || motionEvent.getY() >= (this.captionContainer.getTop() - getScrollY()) + this.captionTextViewSwitcher.getTranslationY()) {
                return super.onTouchEvent(motionEvent);
            }
            return false;
        }

        public void reset() {
            scrollTo(0, 0);
        }

        @Override // androidx.core.widget.NestedScrollView
        public boolean startNestedScroll(int i, int i2) {
            if (i2 == 0) {
                this.springAnimation.cancel();
                this.nestedScrollStarted = true;
                this.overScrollY = this.captionTextViewSwitcher.getTranslationY();
                onScrollStart();
            }
            return true;
        }

        @Override // androidx.core.widget.NestedScrollView
        public void stopNestedScroll(int i) {
            OverScroller overScroller;
            if (this.nestedScrollStarted && i == 0) {
                this.nestedScrollStarted = false;
                if (this.overScrollY != 0.0f && (overScroller = this.scroller) != null && overScroller.isFinished()) {
                    startSpringAnimationIfNotRunning(this.velocityY);
                }
                onScrollEnd();
            }
        }

        public void stopScrolling() {
            Method method = this.abortAnimatedScrollMethod;
            if (method != null) {
                try {
                    method.invoke(this, null);
                } catch (Exception e) {
                    FileLog.e(e);
                }
            }
        }

        public void updateTopMargin() {
            updateTopMargin(getWidth(), getHeight());
        }
    }

    /* loaded from: classes4.dex */
    public static class CaptionTextView extends SpoilersTextView {
        private AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiDrawables;
        private boolean hasQuote;
        private Layout lastLayout;
        private Layout lastLoadingLayout;
        private final LinkSpanDrawable.LinkCollector links;
        private boolean loading;
        private LoadingDrawable loadingDrawable;
        private Path loadingPath;
        private final Utilities.Callback2 onLinkClick;
        private final Utilities.Callback3 onLinkLongPress;
        private LinkSpanDrawable pressedLink;
        private ArrayList quoteBlocks;
        private final CaptionScrollView scrollView;
        private final TextSelectionHelper.SimpleTextSelectionHelper textSelectionHelper;

        public CaptionTextView(Context context, final CaptionScrollView captionScrollView, TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper, Utilities.Callback2 callback2, Utilities.Callback3 callback3) {
            super(context);
            this.links = new LinkSpanDrawable.LinkCollector(this);
            this.scrollView = captionScrollView;
            this.onLinkClick = callback2;
            this.onLinkLongPress = callback3;
            this.textSelectionHelper = simpleTextSelectionHelper;
            ViewHelper.setPadding(this, 16.0f, 8.0f, 16.0f, 8.0f);
            setLinkTextColor(-8796932);
            setTextColor(-1);
            setHighlightColor(872415231);
            setGravity(LayoutHelper.getAbsoluteGravityStart() | 16);
            setTextSize(1, 16.0f);
            setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$CaptionTextView$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.CaptionTextView.lambda$new$0(PhotoViewer.CaptionScrollView.this, view);
                }
            });
        }

        private void checkLoadingPath() {
            Layout layout = getLayout();
            Path path = this.loadingPath;
            if (path == null || this.lastLoadingLayout != layout) {
                if (path == null) {
                    this.loadingPath = new Path();
                } else {
                    path.rewind();
                }
                if (layout != null) {
                    float dp = AndroidUtilities.dp(16.0f);
                    float dp2 = AndroidUtilities.dp(8.0f);
                    float f = 0.0f;
                    int i = 0;
                    while (i < layout.getLineCount()) {
                        float f2 = dp / 3.0f;
                        float lineLeft = layout.getLineLeft(i) - f2;
                        float lineRight = layout.getLineRight(i) + f2;
                        if (i == 0) {
                            f = layout.getLineTop(i) - (dp2 / 3.0f);
                        }
                        float lineBottom = layout.getLineBottom(i);
                        if (i >= layout.getLineCount() - 1) {
                            lineBottom += dp2 / 3.0f;
                        }
                        this.loadingPath.addRect(getPaddingLeft() + lineLeft, getPaddingTop() + f, getPaddingLeft() + lineRight, getPaddingTop() + lineBottom, Path.Direction.CW);
                        i++;
                        f = lineBottom;
                    }
                }
                this.lastLoadingLayout = layout;
            }
        }

        public static /* synthetic */ void lambda$new$0(CaptionScrollView captionScrollView, View view) {
            if (captionScrollView != null) {
                captionScrollView.smoothScrollBy(0, AndroidUtilities.dp(64.0f));
            }
        }

        public /* synthetic */ void lambda$onTouchEvent$1(LinkSpanDrawable linkSpanDrawable) {
            LinkSpanDrawable linkSpanDrawable2 = this.pressedLink;
            if (linkSpanDrawable == linkSpanDrawable2 && linkSpanDrawable2 != null && (linkSpanDrawable2.getSpan() instanceof URLSpan)) {
                LinkSpanDrawable.LinkCollector linkCollector = this.links;
                Objects.requireNonNull(linkCollector);
                this.onLinkLongPress.run((URLSpan) this.pressedLink.getSpan(), this, new PhotoViewer$CaptionTextView$$ExternalSyntheticLambda2(linkCollector));
                this.pressedLink = null;
            }
        }

        @Override // android.view.View
        protected void dispatchDraw(Canvas canvas) {
            if (this.loading) {
                checkLoadingPath();
                if (this.loadingDrawable == null) {
                    LoadingDrawable loadingDrawable = new LoadingDrawable();
                    this.loadingDrawable = loadingDrawable;
                    loadingDrawable.usePath(this.loadingPath);
                    this.loadingDrawable.setRadiiDp(4.0f);
                    this.loadingDrawable.setColors(Theme.multAlpha(-1, 0.3f), Theme.multAlpha(-1, 0.1f), Theme.multAlpha(-1, 0.2f), Theme.multAlpha(-1, 0.7f));
                    this.loadingDrawable.setCallback(this);
                }
                this.loadingDrawable.setBounds(0, 0, getWidth(), getHeight());
                this.loadingDrawable.draw(canvas);
            }
            if (this.loading) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), NotificationCenter.filterSettingsUpdated, 31);
            }
            if (this.quoteBlocks != null && this.hasQuote) {
                canvas.save();
                canvas.translate(getPaddingLeft(), getPaddingTop());
                for (int i = 0; i < this.quoteBlocks.size(); i++) {
                    ((QuoteSpan.Block) this.quoteBlocks.get(i)).draw(canvas, 0.0f, ((getWidth() - getPaddingLeft()) - getPaddingRight()) + (this.hasQuote ? AndroidUtilities.dp(32.0f) : 0), -1, 1.0f, getPaint());
                }
                canvas.restore();
            }
            super.dispatchDraw(canvas);
            if (this.loading) {
                canvas.restore();
            }
            canvas.save();
            canvas.translate(getPaddingLeft(), getPaddingTop());
            canvas.clipRect(0.0f, getScrollY(), getWidth() - getPaddingRight(), (getHeight() + getScrollY()) - (getPaddingBottom() * 0.75f));
            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.animatedEmojiDrawables, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f);
            canvas.restore();
        }

        @Override // android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            AnimatedEmojiSpan.release(this, this.animatedEmojiDrawables);
            this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(null, this.quoteBlocks);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.spoilers.SpoilersTextView, android.widget.TextView, android.view.View
        public void onDraw(Canvas canvas) {
            boolean z = true;
            TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper = this.textSelectionHelper;
            if (simpleTextSelectionHelper != null && simpleTextSelectionHelper.isInSelectionMode()) {
                canvas.save();
                canvas.translate(getPaddingLeft(), getPaddingTop());
                if (this.textSelectionHelper != null && getStaticTextLayout() != null && this.textSelectionHelper.isCurrent(this)) {
                    this.textSelectionHelper.draw(canvas);
                }
                canvas.restore();
            }
            canvas.save();
            canvas.translate(getPaddingLeft(), 0.0f);
            if (this.links.draw(canvas)) {
                invalidate();
            }
            canvas.restore();
            super.onDraw(canvas);
            if (this.lastLayout != getLayout()) {
                this.animatedEmojiDrawables = AnimatedEmojiSpan.update(0, this, this.animatedEmojiDrawables, getLayout());
                this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(getLayout(), this.quoteBlocks);
                z = (getLayout() == null || !(getLayout().getText() instanceof Spanned) || ((QuoteSpan.QuoteStyleSpan[]) ((Spanned) getLayout().getText()).getSpans(0, getLayout().getText().length(), QuoteSpan.QuoteStyleSpan.class)).length <= 0) ? false : false;
                this.hasQuote = z;
                ViewHelper.setPadding(this, 16.0f, 8.0f, (z ? 32 : 0) + 16, 8.0f);
                this.lastLayout = getLayout();
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.spoilers.SpoilersTextView, android.widget.TextView
        public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            super.onTextChanged(charSequence, i, i2, i3);
            this.animatedEmojiDrawables = AnimatedEmojiSpan.update(0, this, this.animatedEmojiDrawables, getLayout());
            this.quoteBlocks = QuoteSpan.updateQuoteBlocksSpanned(getLayout(), this.quoteBlocks);
        }

        /* JADX WARN: Removed duplicated region for block: B:87:0x012c  */
        /* JADX WARN: Removed duplicated region for block: B:93:0x014c  */
        @Override // android.widget.TextView, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ClickableSpan clickableSpan;
            boolean z;
            if (getLayout() == null) {
                return false;
            }
            if (this.textSelectionHelper != null && getStaticTextLayout() != null) {
                this.textSelectionHelper.setSelectabeleView(this);
                this.textSelectionHelper.setScrollingParent(this.scrollView);
                this.textSelectionHelper.update(getPaddingLeft(), getPaddingTop());
                this.textSelectionHelper.onTouchEvent(motionEvent);
            }
            if (motionEvent.getAction() != 0 && (this.pressedLink == null || motionEvent.getAction() != 1)) {
                if (motionEvent.getAction() != 3) {
                    z = false;
                    if (z) {
                    }
                }
                this.links.clear();
                this.pressedLink = null;
                z = true;
                if (z) {
                }
            }
            int y = (int) (motionEvent.getY() - getPaddingTop());
            int lineForVertical = getLayout().getLineForVertical(y);
            float x = (int) (motionEvent.getX() - getPaddingLeft());
            int offsetForHorizontal = getLayout().getOffsetForHorizontal(lineForVertical, x);
            float lineLeft = getLayout().getLineLeft(lineForVertical);
            if (lineLeft <= x && lineLeft + getLayout().getLineWidth(lineForVertical) >= x && y >= 0 && y <= getLayout().getHeight()) {
                SpannableString spannableString = new SpannableString(getText());
                ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannableString.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                if (clickableSpanArr.length != 0) {
                    clickableSpan = clickableSpanArr[0];
                    if (motionEvent.getAction() == 0) {
                        this.links.clear();
                        LinkSpanDrawable linkSpanDrawable = new LinkSpanDrawable(clickableSpanArr[0], null, motionEvent.getX(), motionEvent.getY());
                        this.pressedLink = linkSpanDrawable;
                        linkSpanDrawable.setColor(1717742051);
                        this.links.addLink(this.pressedLink);
                        int spanStart = spannableString.getSpanStart(this.pressedLink.getSpan());
                        int spanEnd = spannableString.getSpanEnd(this.pressedLink.getSpan());
                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                        obtainNewPath.setCurrentLayout(getLayout(), spanStart, getPaddingTop());
                        getLayout().getSelectionPath(spanStart, spanEnd, obtainNewPath);
                        final LinkSpanDrawable linkSpanDrawable2 = this.pressedLink;
                        postDelayed(new Runnable() { // from class: org.telegram.ui.PhotoViewer$CaptionTextView$$ExternalSyntheticLambda1
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.CaptionTextView.this.lambda$onTouchEvent$1(linkSpanDrawable2);
                            }
                        }, ViewConfiguration.getLongPressTimeout());
                        z = true;
                        if (motionEvent.getAction() == 1) {
                            this.links.clear();
                            LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                            if (linkSpanDrawable3 != null && linkSpanDrawable3.getSpan() == clickableSpan) {
                                this.onLinkClick.run((ClickableSpan) this.pressedLink.getSpan(), this);
                            }
                            this.pressedLink = null;
                            z = true;
                        }
                        return !z || super.onTouchEvent(motionEvent);
                    }
                    z = false;
                    if (motionEvent.getAction() == 1) {
                    }
                    if (z) {
                    }
                }
            }
            clickableSpan = null;
            z = false;
            if (motionEvent.getAction() == 1) {
            }
            if (z) {
            }
        }

        public void setLoading(boolean z) {
            if (this.loading == z) {
                return;
            }
            this.loading = z;
            invalidate();
        }

        @Override // android.view.View
        public void setPressed(boolean z) {
            boolean z2 = z != isPressed();
            super.setPressed(z);
            if (z2) {
                invalidate();
            }
        }

        @Override // android.widget.TextView, android.view.View
        protected boolean verifyDrawable(Drawable drawable) {
            return drawable == this.loadingDrawable || super.verifyDrawable(drawable);
        }
    }

    /* loaded from: classes4.dex */
    public static class CaptionTextViewSwitcher extends TextViewSwitcher {
        private float alpha;
        private FrameLayout container;
        private boolean inScrollView;
        private NestedScrollView scrollView;

        public CaptionTextViewSwitcher(Context context) {
            super(context);
            this.inScrollView = false;
            this.alpha = 1.0f;
        }

        @Override // android.view.View
        public float getAlpha() {
            return this.inScrollView ? this.alpha : super.getAlpha();
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            if (this.container == null || getParent() != this.container) {
                return;
            }
            this.inScrollView = true;
            this.scrollView.setVisibility(getVisibility());
            this.scrollView.setAlpha(this.alpha);
            super.setAlpha(1.0f);
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            if (this.inScrollView) {
                this.inScrollView = false;
                this.scrollView.setVisibility(8);
                super.setAlpha(this.alpha);
            }
        }

        @Override // android.view.View
        public void setAlpha(float f) {
            this.alpha = f;
            if (this.inScrollView) {
                this.scrollView.setAlpha(f);
            } else {
                super.setAlpha(f);
            }
        }

        public void setContainer(FrameLayout frameLayout) {
            this.container = frameLayout;
        }

        public void setScrollView(NestedScrollView nestedScrollView) {
            this.scrollView = nestedScrollView;
        }

        @Override // android.view.View
        public void setTranslationY(float f) {
            super.setTranslationY(f);
            if (this.inScrollView) {
                this.scrollView.invalidate();
            }
        }

        @Override // android.view.View
        public void setVisibility(int i) {
            setVisibility(i, true);
        }

        public void setVisibility(int i, boolean z) {
            super.setVisibility(i);
            if (this.inScrollView && z) {
                this.scrollView.setVisibility(i);
            }
        }
    }

    /* loaded from: classes4.dex */
    public static class CounterView extends View {
        private int currentCount;
        private int height;
        private Paint paint;
        private RectF rect;
        private float rotation;
        private StaticLayout staticLayout;
        private TextPaint textPaint;
        private int width;

        public CounterView(Context context) {
            super(context);
            this.currentCount = 0;
            TextPaint textPaint = new TextPaint(1);
            this.textPaint = textPaint;
            textPaint.setTextSize(AndroidUtilities.dp(15.0f));
            this.textPaint.setTypeface(AndroidUtilities.bold());
            this.textPaint.setColor(-1);
            Paint paint = new Paint(1);
            this.paint = paint;
            paint.setColor(-1);
            this.paint.setStrokeWidth(AndroidUtilities.dp(2.0f));
            this.paint.setStyle(Paint.Style.STROKE);
            this.paint.setStrokeJoin(Paint.Join.ROUND);
            this.rect = new RectF();
            setCount(0);
        }

        @Override // android.view.View
        public float getRotationX() {
            return this.rotation;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            int measuredHeight = getMeasuredHeight() / 2;
            this.paint.setAlpha(NotificationCenter.closeSearchByActiveAction);
            this.rect.set(AndroidUtilities.dp(1.0f), measuredHeight - AndroidUtilities.dp(14.0f), getMeasuredWidth() - AndroidUtilities.dp(1.0f), measuredHeight + AndroidUtilities.dp(14.0f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(15.0f), AndroidUtilities.dp(15.0f), this.paint);
            if (this.staticLayout != null) {
                this.textPaint.setAlpha((int) ((1.0f - this.rotation) * 255.0f));
                canvas.save();
                canvas.translate((getMeasuredWidth() - this.width) / 2, ((getMeasuredHeight() - this.height) / 2) + AndroidUtilities.dpf2(0.2f) + (this.rotation * AndroidUtilities.dp(5.0f)));
                this.staticLayout.draw(canvas);
                canvas.restore();
                this.paint.setAlpha((int) (this.rotation * 255.0f));
                int centerX = (int) this.rect.centerX();
                int centerY = (int) (((int) this.rect.centerY()) - (AndroidUtilities.dp(5.0f) * (1.0f - this.rotation)));
                canvas.drawLine(AndroidUtilities.dp(5.0f) + centerX, centerY - AndroidUtilities.dp(5.0f), centerX - AndroidUtilities.dp(5.0f), AndroidUtilities.dp(5.0f) + centerY, this.paint);
                canvas.drawLine(centerX - AndroidUtilities.dp(5.0f), centerY - AndroidUtilities.dp(5.0f), centerX + AndroidUtilities.dp(5.0f), centerY + AndroidUtilities.dp(5.0f), this.paint);
            }
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.max(this.width + AndroidUtilities.dp(20.0f), AndroidUtilities.dp(30.0f)), 1073741824), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(40.0f), 1073741824));
        }

        public void setCount(int i) {
            TimeInterpolator overshootInterpolator;
            StaticLayout staticLayout = new StaticLayout("" + Math.max(1, i), this.textPaint, AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.staticLayout = staticLayout;
            this.width = (int) Math.ceil((double) staticLayout.getLineWidth(0));
            this.height = this.staticLayout.getLineBottom(0);
            AnimatorSet animatorSet = new AnimatorSet();
            if (i == 0) {
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(this, View.SCALE_X, 0.0f);
                ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.0f);
                Paint paint = this.paint;
                Property property = AnimationProperties.PAINT_ALPHA;
                animatorSet.playTogether(ofFloat, ofFloat2, ObjectAnimator.ofInt(paint, property, 0), ObjectAnimator.ofInt(this.textPaint, property, 0));
                overshootInterpolator = new DecelerateInterpolator();
            } else {
                int i2 = this.currentCount;
                if (i2 == 0) {
                    ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(this, View.SCALE_X, 0.0f, 1.0f);
                    ObjectAnimator ofFloat4 = ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.0f, 1.0f);
                    Paint paint2 = this.paint;
                    Property property2 = AnimationProperties.PAINT_ALPHA;
                    animatorSet.playTogether(ofFloat3, ofFloat4, ObjectAnimator.ofInt(paint2, property2, 0, NotificationCenter.closeSearchByActiveAction), ObjectAnimator.ofInt(this.textPaint, property2, 0, NotificationCenter.closeSearchByActiveAction));
                    overshootInterpolator = new DecelerateInterpolator();
                } else {
                    Property property3 = View.SCALE_X;
                    float[] fArr = {0.9f, 1.0f};
                    if (i < i2) {
                        // fill-array-data instruction
                        fArr[0] = 1.1f;
                        fArr[1] = 1.0f;
                        animatorSet.playTogether(ObjectAnimator.ofFloat(this, property3, fArr), ObjectAnimator.ofFloat(this, View.SCALE_Y, 1.1f, 1.0f));
                        overshootInterpolator = new OvershootInterpolator();
                    } else {
                        animatorSet.playTogether(ObjectAnimator.ofFloat(this, property3, fArr), ObjectAnimator.ofFloat(this, View.SCALE_Y, 0.9f, 1.0f));
                        overshootInterpolator = new OvershootInterpolator();
                    }
                }
            }
            animatorSet.setInterpolator(overshootInterpolator);
            animatorSet.setDuration(180L);
            animatorSet.start();
            requestLayout();
            this.currentCount = i;
        }

        @Override // android.view.View
        public void setRotationX(float f) {
            this.rotation = f;
            invalidate();
        }

        @Override // android.view.View
        public void setScaleX(float f) {
            super.setScaleX(f);
            invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public static class EditState {
        public long averageDuration;
        public MediaController.CropState cropState;
        public ArrayList croppedMediaEntities;
        public String croppedPaintPath;
        public ArrayList mediaEntities;
        public String paintPath;
        public MediaController.SavedFilterState savedFilterState;

        public void reset() {
            this.paintPath = null;
            this.cropState = null;
            this.savedFilterState = null;
            this.mediaEntities = null;
            this.croppedPaintPath = null;
            this.croppedMediaEntities = null;
            this.averageDuration = 0L;
        }
    }

    /* loaded from: classes4.dex */
    public static class EmptyPhotoViewerProvider implements PhotoViewerProvider {
        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean allowCaption() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean allowSendingSubmenu() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canCaptureMorePhotos() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canEdit(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean canLoadMoreAvatars() {
            return PhotoViewerProvider.-CC.$default$canLoadMoreAvatars(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canReplace(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean canScrollAway() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean cancelButtonPressed() {
            return true;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean closeKeyboard() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void deleteImageAtIndex(int i) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean forceAllInGroup() {
            return PhotoViewerProvider.-CC.$default$forceAllInGroup(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public String getDeleteMessageString() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public MessageObject getEditingMessageObject() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getPhotoIndex(int i) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z) {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getSelectedCount() {
            return 0;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public HashMap getSelectedPhotos() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ArrayList getSelectedPhotosOrder() {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i) {
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int getTotalImageCount() {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean isPhotoChecked(int i) {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean loadMore() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void needAddMorePhotos() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onApplyCaption(CharSequence charSequence) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onClose() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ boolean onDeletePhoto(int i) {
            return PhotoViewerProvider.-CC.$default$onDeletePhoto(this, i);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onEditModeChanged(boolean z) {
            PhotoViewerProvider.-CC.$default$onEditModeChanged(this, z);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void onOpen() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onPreClose() {
            PhotoViewerProvider.-CC.$default$onPreClose(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onPreOpen() {
            PhotoViewerProvider.-CC.$default$onPreOpen(this);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public /* synthetic */ void onReleasePlayerBeforeClose(int i) {
            PhotoViewerProvider.-CC.$default$onReleasePlayerBeforeClose(this, i);
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void openPhotoForEdit(String str, String str2, boolean z) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void replaceButtonPressed(int i, VideoEditedInfo videoEditedInfo) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean scaleToFill() {
            return false;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int setPhotoChecked(int i, VideoEditedInfo videoEditedInfo) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public int setPhotoUnchecked(Object obj) {
            return -1;
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void updatePhotoAtIndex(int i) {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void willHidePhotoViewer() {
        }

        @Override // org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i) {
        }
    }

    /* loaded from: classes4.dex */
    public class FirstFrameView extends ImageView {
        private VideoPlayer currentVideoPlayer;
        private ValueAnimator fadeAnimator;
        private final TimeInterpolator fadeInterpolator;
        private boolean gettingFrame;
        private int gettingFrameIndex;
        private boolean gotError;
        private boolean hasFrame;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public FirstFrameView(Context context) {
            super(context);
            PhotoViewer.this = r1;
            this.gettingFrameIndex = 0;
            this.gettingFrame = false;
            this.hasFrame = false;
            this.gotError = false;
            this.fadeInterpolator = CubicBezierInterpolator.EASE_IN;
            setAlpha(0.0f);
        }

        public /* synthetic */ void lambda$checkFromPlayer$0(int i, Bitmap bitmap) {
            if (i == this.gettingFrameIndex) {
                setImageBitmap(bitmap);
                this.hasFrame = true;
                this.gettingFrame = false;
            }
        }

        public /* synthetic */ void lambda$checkFromPlayer$1() {
            this.gotError = true;
        }

        public /* synthetic */ void lambda$checkFromPlayer$2(Uri uri, final int i) {
            try {
                File file = new File(uri.getPath());
                int i2 = UserConfig.selectedAccount;
                Point point = AndroidUtilities.displaySize;
                AnimatedFileDrawable animatedFileDrawable = new AnimatedFileDrawable(file, true, 0L, 0, null, null, null, 0L, i2, false, point.x, point.y, null);
                final Bitmap frameAtTime = animatedFileDrawable.getFrameAtTime(0L);
                animatedFileDrawable.recycle();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$0(i, frameAtTime);
                    }
                });
            } catch (Throwable th) {
                FileLog.e(th);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$1();
                    }
                });
            }
        }

        public /* synthetic */ void lambda$updateAlpha$3(ValueAnimator valueAnimator) {
            setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        public void updateAlpha() {
            if (PhotoViewer.this.videoPlayer == null || PhotoViewer.this.videoPlayer.getDuration() == -9223372036854775807L) {
                ValueAnimator valueAnimator = this.fadeAnimator;
                if (valueAnimator != null) {
                    valueAnimator.cancel();
                    this.fadeAnimator = null;
                }
                setAlpha(0.0f);
                return;
            }
            long max = Math.max(0L, PhotoViewer.this.videoPlayer.getDuration() - PhotoViewer.this.videoPlayer.getCurrentPosition());
            float max2 = 1.0f - Math.max(Math.min(((float) max) / 250.0f, 1.0f), 0.0f);
            if (max2 <= 0.0f) {
                ValueAnimator valueAnimator2 = this.fadeAnimator;
                if (valueAnimator2 != null) {
                    valueAnimator2.cancel();
                    this.fadeAnimator = null;
                }
                setAlpha(0.0f);
                return;
            }
            if (!PhotoViewer.this.videoPlayer.isPlaying()) {
                ValueAnimator valueAnimator3 = this.fadeAnimator;
                if (valueAnimator3 != null) {
                    valueAnimator3.cancel();
                    this.fadeAnimator = null;
                }
            } else if (this.fadeAnimator != null) {
                return;
            } else {
                ValueAnimator ofFloat = ValueAnimator.ofFloat(max2, 1.0f);
                this.fadeAnimator = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator4) {
                        PhotoViewer.FirstFrameView.this.lambda$updateAlpha$3(valueAnimator4);
                    }
                });
                this.fadeAnimator.setDuration(max);
                this.fadeAnimator.setInterpolator(this.fadeInterpolator);
                this.fadeAnimator.start();
            }
            setAlpha(max2);
        }

        public void checkFromPlayer(VideoPlayer videoPlayer) {
            if (this.currentVideoPlayer != videoPlayer) {
                this.gotError = false;
                clear();
            }
            if (videoPlayer != null && !videoPlayer.isHDR()) {
                long duration = videoPlayer.getDuration() - videoPlayer.getCurrentPosition();
                if (!this.hasFrame && !this.gotError && !this.gettingFrame && ((float) duration) < 5250.0f) {
                    final Uri currentUri = videoPlayer.getCurrentUri();
                    final int i = this.gettingFrameIndex + 1;
                    this.gettingFrameIndex = i;
                    Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$FirstFrameView$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.FirstFrameView.this.lambda$checkFromPlayer$2(currentUri, i);
                        }
                    });
                    this.gettingFrame = true;
                }
            }
            this.currentVideoPlayer = videoPlayer;
        }

        public void clear() {
            this.hasFrame = false;
            this.gotError = false;
            if (this.gettingFrame) {
                this.gettingFrameIndex++;
                this.gettingFrame = false;
            }
            setImageResource(17170445);
        }
    }

    /* loaded from: classes4.dex */
    public class FrameLayoutDrawer extends SizeNotifierFrameLayoutPhoto {
        private boolean captionAbove;
        private ArrayList exclusionRects;
        private boolean ignoreLayout;
        private Paint paint;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public FrameLayoutDrawer(Context context, Activity activity) {
            super(context, activity, false);
            PhotoViewer.this = r1;
            this.paint = new Paint();
            setWillNotDraw(false);
            this.paint.setColor(AndroidUtilities.DARK_STATUS_BAR_OVERLAY);
            setLayerType(2, null);
        }

        @Override // android.view.View
        public void draw(Canvas canvas) {
            super.draw(canvas);
            if (PhotoViewer.this.photoViewerWebView == null || !PhotoViewer.this.photoViewerWebView.isControllable() || PhotoViewer.this.videoForwardDrawable == null || !PhotoViewer.this.videoForwardDrawable.isAnimating()) {
                return;
            }
            int measuredHeight = ((int) (PhotoViewer.this.photoViewerWebView.getWebView().getMeasuredHeight() * (PhotoViewer.this.scale - 1.0f))) / 2;
            PhotoViewer.this.videoForwardDrawable.setBounds(PhotoViewer.this.photoViewerWebView.getLeft(), (PhotoViewer.this.photoViewerWebView.getWebView().getTop() - measuredHeight) + ((int) (PhotoViewer.this.translationY / PhotoViewer.this.scale)), PhotoViewer.this.photoViewerWebView.getRight(), PhotoViewer.this.photoViewerWebView.getWebView().getBottom() + measuredHeight + ((int) (PhotoViewer.this.translationY / PhotoViewer.this.scale)));
            PhotoViewer.this.videoForwardDrawable.draw(canvas);
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            if (view == PhotoViewer.this.leftPaintingOverlay || view == PhotoViewer.this.rightPaintingOverlay) {
                return false;
            }
            if (view != PhotoViewer.this.navigationBar && (PhotoViewer.this.captionEdit == null || !PhotoViewer.this.captionEdit.editText.isPopupView(view))) {
                canvas.save();
            }
            boolean drawChildInternal = drawChildInternal(canvas, view, j);
            if (view != PhotoViewer.this.navigationBar && (PhotoViewer.this.captionEdit == null || !PhotoViewer.this.captionEdit.editText.isPopupView(view))) {
                canvas.restore();
            }
            return drawChildInternal;
        }

        protected boolean drawChildInternal(Canvas canvas, View view, long j) {
            if (view == PhotoViewer.this.miniProgressView) {
                return false;
            }
            if (view == PhotoViewer.this.videoTimelineViewContainer && PhotoViewer.this.videoTimelineViewContainer.getTranslationY() > 0.0f && PhotoViewer.this.pickerView.getTranslationY() == 0.0f) {
                canvas.save();
                canvas.clipRect(PhotoViewer.this.videoTimelineViewContainer.getX(), PhotoViewer.this.videoTimelineViewContainer.getY(), PhotoViewer.this.videoTimelineViewContainer.getX() + PhotoViewer.this.videoTimelineViewContainer.getMeasuredWidth(), PhotoViewer.this.videoTimelineViewContainer.getBottom());
                boolean drawChild = super.drawChild(canvas, view, j);
                canvas.restore();
                return drawChild;
            }
            try {
                if (view == PhotoViewer.this.aspectRatioFrameLayout || view == PhotoViewer.this.paintingOverlay) {
                    return false;
                }
                return super.drawChild(canvas, view, j);
            } catch (Throwable unused) {
                return true;
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout
        public void notifyHeightChanged() {
            super.notifyHeightChanged();
            if (PhotoViewer.this.isCurrentVideo) {
                PhotoViewer.this.photoProgressViews[0].setIndexedAlpha(2, getKeyboardHeight() <= AndroidUtilities.dp(20.0f) ? 1.0f : 0.0f, true);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            Bulletin.addDelegate(this, new Bulletin.Delegate() { // from class: org.telegram.ui.PhotoViewer.FrameLayoutDrawer.1
                {
                    FrameLayoutDrawer.this = this;
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean allowLayoutChanges() {
                    return Bulletin.Delegate.-CC.$default$allowLayoutChanges(this);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean bottomOffsetAnimated() {
                    return Bulletin.Delegate.-CC.$default$bottomOffsetAnimated(this);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ boolean clipWithGradient(int i) {
                    return Bulletin.Delegate.-CC.$default$clipWithGradient(this, i);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public int getBottomOffset(int i) {
                    View view;
                    int i2 = 0;
                    if (PhotoViewer.this.editing) {
                        if (PhotoViewer.this.captionEdit != null && PhotoViewer.this.captionEdit.getVisibility() == 0) {
                            i2 = AndroidUtilities.dp(12.0f) + PhotoViewer.this.captionEdit.getEditTextHeight();
                        }
                        if (PhotoViewer.this.pickerView == null || PhotoViewer.this.pickerView.getVisibility() != 0) {
                            return i2;
                        }
                        view = PhotoViewer.this.pickerView;
                    } else {
                        if (PhotoViewer.this.bottomLayout != null && PhotoViewer.this.bottomLayout.getVisibility() == 0) {
                            i2 = PhotoViewer.this.bottomLayout.getHeight();
                        }
                        if (PhotoViewer.this.groupedPhotosListView == null || !PhotoViewer.this.groupedPhotosListView.hasPhotos()) {
                            return i2;
                        }
                        if (!AndroidUtilities.isTablet() && PhotoViewer.this.containerView.getMeasuredHeight() <= PhotoViewer.this.containerView.getMeasuredWidth()) {
                            return i2;
                        }
                        view = PhotoViewer.this.groupedPhotosListView;
                    }
                    return i2 + view.getHeight();
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ int getTopOffset(int i) {
                    return Bulletin.Delegate.-CC.$default$getTopOffset(this, i);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onBottomOffsetChange(float f) {
                    Bulletin.Delegate.-CC.$default$onBottomOffsetChange(this, f);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onHide(Bulletin bulletin) {
                    Bulletin.Delegate.-CC.$default$onHide(this, bulletin);
                }

                @Override // org.telegram.ui.Components.Bulletin.Delegate
                public /* synthetic */ void onShow(Bulletin bulletin) {
                    Bulletin.Delegate.-CC.$default$onShow(this, bulletin);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            Bulletin.removeDelegate(this);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            PhotoViewer.this.onDraw(canvas);
            if (!isStatusBarVisible() || AndroidUtilities.statusBarHeight == 0 || PhotoViewer.this.actionBar == null) {
                return;
            }
            if (Build.VERSION.SDK_INT < 21) {
                this.paint.setAlpha((int) (PhotoViewer.this.actionBar.getAlpha() * 255.0f * 0.2f));
                canvas.drawRect(0.0f, PhotoViewer.this.currentPanTranslationY, getMeasuredWidth(), PhotoViewer.this.currentPanTranslationY + AndroidUtilities.statusBarHeight, this.paint);
            }
            this.paint.setAlpha((int) (PhotoViewer.this.actionBar.getAlpha() * 255.0f * 0.498f));
            if (getPaddingRight() > 0) {
                canvas.drawRect(getMeasuredWidth() - getPaddingRight(), 0.0f, getMeasuredWidth(), getMeasuredHeight(), this.paint);
            }
            if (getPaddingLeft() > 0) {
                canvas.drawRect(0.0f, 0.0f, getPaddingLeft(), getMeasuredHeight(), this.paint);
            }
            if (getPaddingBottom() > 0) {
                float dpf2 = AndroidUtilities.dpf2(24.0f) * (1.0f - PhotoViewer.this.actionBar.getAlpha());
                canvas.drawRect(0.0f, (getMeasuredHeight() - getPaddingBottom()) + dpf2, getMeasuredWidth(), getMeasuredHeight() + dpf2, this.paint);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        /* JADX WARN: Removed duplicated region for block: B:108:0x0075  */
        /* JADX WARN: Removed duplicated region for block: B:113:0x0083  */
        /* JADX WARN: Removed duplicated region for block: B:116:0x0096  */
        /* JADX WARN: Removed duplicated region for block: B:118:0x00a3  */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            int paddingLeft;
            int paddingRight;
            int paddingBottom;
            int i5;
            int i6;
            int i7;
            int i8;
            int height;
            int i9;
            int height2;
            float f;
            int measuredHeight;
            int dp;
            int childCount = getChildCount();
            PhotoViewer.this.keyboardSize = measureKeyboardHeight();
            for (int i10 = 0; i10 < childCount; i10++) {
                View childAt = getChildAt(i10);
                if (childAt.getVisibility() != 8) {
                    if (childAt == PhotoViewer.this.aspectRatioFrameLayout) {
                        paddingLeft = i;
                        paddingRight = i3;
                        paddingBottom = i4;
                    } else {
                        paddingLeft = i + getPaddingLeft();
                        paddingRight = i3 - getPaddingRight();
                        paddingBottom = i4 - getPaddingBottom();
                    }
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) childAt.getLayoutParams();
                    int measuredWidth = childAt.getMeasuredWidth();
                    int measuredHeight2 = childAt.getMeasuredHeight();
                    int i11 = layoutParams.gravity;
                    if (i11 == -1) {
                        i11 = 51;
                    }
                    int i12 = i11 & 7;
                    int i13 = i11 & 112;
                    if (i12 == 1) {
                        i5 = (((paddingRight - paddingLeft) - measuredWidth) / 2) + layoutParams.leftMargin;
                    } else if (i12 != 5) {
                        i6 = layoutParams.leftMargin;
                        if (i13 != 16) {
                            i7 = (((paddingBottom - i2) - measuredHeight2) / 2) + layoutParams.topMargin;
                        } else if (i13 != 80) {
                            i8 = layoutParams.topMargin;
                            if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                                height = PhotoViewer.this.captionEdit.getEditTextHeight();
                            } else {
                                if (PhotoViewer.this.captionEdit.editText.isPopupView(childAt)) {
                                    measuredHeight = (i4 - i2) - measuredHeight2;
                                    dp = (PhotoViewer.this.inBubbleMode || AndroidUtilities.isInMultiwindow) ? 0 : AndroidUtilities.navigationBarHeight;
                                } else if (childAt == PhotoViewer.this.selectedPhotosListView) {
                                    measuredHeight = PhotoViewer.this.actionBar.getMeasuredHeight();
                                    dp = AndroidUtilities.dp(5.0f);
                                } else {
                                    if (childAt == PhotoViewer.this.muteItem) {
                                        i9 = ((PhotoViewer.this.videoTimelineViewContainer == null || PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 0) ? PhotoViewer.this.pickerView : PhotoViewer.this.videoTimelineViewContainer).getTop() - AndroidUtilities.dp((PhotoViewer.this.sendPhotoType == 4 || PhotoViewer.this.sendPhotoType == 5) ? 40.0f : 15.0f);
                                        height2 = childAt.getMeasuredHeight();
                                    } else if (childAt == PhotoViewer.this.videoTimelineViewContainer) {
                                        i8 -= PhotoViewer.this.pickerView.getHeight();
                                        if (PhotoViewer.this.sendPhotoType == 1) {
                                            f = 52.0f;
                                        } else {
                                            f = PhotoViewer.this.captionEdit.getVisibility() == 0 ? 56.0f : 56.0f;
                                            childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                                        }
                                        height = AndroidUtilities.dp(f);
                                    } else if (childAt == PhotoViewer.this.captionEditContainer) {
                                        i9 = ((paddingBottom - i2) - measuredHeight2) - layoutParams.bottomMargin;
                                        height2 = PhotoViewer.this.pickerView.getHeight();
                                    } else {
                                        if (childAt == PhotoViewer.this.videoAvatarTooltip) {
                                            height = PhotoViewer.this.pickerView.getHeight() + AndroidUtilities.dp(31.0f);
                                        }
                                        childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                                    }
                                    i8 = i9 - height2;
                                    childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                                }
                                i8 = measuredHeight + dp;
                                childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                            }
                            i8 -= height;
                            childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                        } else {
                            i7 = (paddingBottom - i2) - measuredHeight2;
                        }
                        i8 = i7 - layoutParams.bottomMargin;
                        if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                        }
                        i8 -= height;
                        childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                    } else {
                        i5 = (paddingRight - paddingLeft) - measuredWidth;
                    }
                    i6 = i5 - layoutParams.rightMargin;
                    if (i13 != 16) {
                    }
                    i8 = i7 - layoutParams.bottomMargin;
                    if (childAt == PhotoViewer.this.captionEdit.mentionContainer) {
                    }
                    i8 -= height;
                    childAt.layout(i6 + paddingLeft, i8, i6 + measuredWidth + paddingLeft, measuredHeight2 + i8);
                }
            }
            notifyHeightChanged();
            updateExclusionRects();
        }

        /* JADX WARN: Removed duplicated region for block: B:211:0x026a  */
        /* JADX WARN: Removed duplicated region for block: B:212:0x026d  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            int i3;
            int i4;
            int currentActionBarHeight;
            int makeMeasureSpec;
            int makeMeasureSpec2;
            int bitmapWidth;
            int bitmapHeight;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            if (getLayoutParams().height > 0) {
                size2 = getLayoutParams().height;
            }
            int i5 = size2;
            setMeasuredDimension(size, i5);
            if (!PhotoViewer.this.isCurrentVideo) {
                this.ignoreLayout = true;
                if (PhotoViewer.this.needCaptionLayout) {
                    Point point = AndroidUtilities.displaySize;
                    int i6 = point.x > point.y ? 5 : 10;
                    PhotoViewer.this.captionTextViewSwitcher.getCurrentView().setMaxLines(i6);
                    PhotoViewer.this.captionTextViewSwitcher.getNextView().setMaxLines(i6);
                } else {
                    PhotoViewer.this.captionTextViewSwitcher.getCurrentView().setMaxLines(ConnectionsManager.DEFAULT_DATACENTER_ID);
                    PhotoViewer.this.captionTextViewSwitcher.getNextView().setMaxLines(ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                this.ignoreLayout = false;
            }
            int dp = PhotoViewer.this.bottomLayout.getVisibility() != 8 ? AndroidUtilities.dp(48.0f) : 0;
            if (PhotoViewer.this.groupedPhotosListView == null || PhotoViewer.this.groupedPhotosListView.getVisibility() == 8) {
                i3 = 0;
            } else {
                ((ViewGroup.MarginLayoutParams) PhotoViewer.this.groupedPhotosListView.getLayoutParams()).bottomMargin = dp;
                measureChildWithMargins(PhotoViewer.this.groupedPhotosListView, i, 0, i2, 0);
                int measuredHeight = PhotoViewer.this.groupedPhotosListView.getMeasuredHeight();
                this.ignoreLayout = true;
                if (AndroidUtilities.isTablet() || i5 >= size) {
                    if (PhotoViewer.this.groupedPhotosListView.getVisibility() != 0) {
                        PhotoViewer.this.groupedPhotosListView.setVisibility(0);
                    }
                } else if (PhotoViewer.this.groupedPhotosListView.getVisibility() != 4) {
                    PhotoViewer.this.groupedPhotosListView.setVisibility(4);
                }
                this.ignoreLayout = false;
                i3 = measuredHeight;
            }
            if (PhotoViewer.this.videoPlayerControlFrameLayout != null) {
                PhotoViewer.this.videoPlayerControlFrameLayout.parentWidth = size;
                PhotoViewer.this.videoPlayerControlFrameLayout.parentHeight = i5;
            }
            int paddingRight = size - (getPaddingRight() + getPaddingLeft());
            int paddingBottom = i5 - getPaddingBottom();
            int childCount = getChildCount();
            for (int i7 = 0; i7 < childCount; i7++) {
                View childAt = getChildAt(i7);
                if (childAt.getVisibility() != 8 && childAt != PhotoViewer.this.groupedPhotosListView) {
                    if (childAt == PhotoViewer.this.aspectRatioFrameLayout) {
                        childAt.measure(i, View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0), 1073741824));
                    } else if (childAt == PhotoViewer.this.paintingOverlay) {
                        if (PhotoViewer.this.aspectRatioFrameLayout == null || PhotoViewer.this.aspectRatioFrameLayout.getVisibility() != 0) {
                            bitmapWidth = PhotoViewer.this.centerImage.getBitmapWidth();
                            bitmapHeight = PhotoViewer.this.centerImage.getBitmapHeight();
                        } else {
                            View view = PhotoViewer.this.usedSurfaceView ? PhotoViewer.this.videoSurfaceView : PhotoViewer.this.videoTextureView;
                            bitmapWidth = view.getMeasuredWidth();
                            bitmapHeight = view.getMeasuredHeight();
                        }
                        if (bitmapWidth == 0 || bitmapHeight == 0) {
                            bitmapWidth = paddingRight;
                            bitmapHeight = paddingBottom;
                        }
                        PhotoViewer.this.paintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(bitmapWidth, 1073741824), View.MeasureSpec.makeMeasureSpec(bitmapHeight, 1073741824));
                    } else {
                        if (PhotoViewer.this.captionEdit.editText.isPopupView(childAt)) {
                            if (PhotoViewer.this.inBubbleMode) {
                                makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                                makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec(paddingBottom, 1073741824);
                                childAt.measure(makeMeasureSpec, makeMeasureSpec2);
                            } else if (!AndroidUtilities.isInMultiwindow) {
                                makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                                currentActionBarHeight = childAt.getLayoutParams().height + AndroidUtilities.navigationBarHeight;
                            } else if (AndroidUtilities.isTablet()) {
                                makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                                currentActionBarHeight = Math.min(AndroidUtilities.dp(320.0f), paddingBottom - AndroidUtilities.statusBarHeight);
                            } else {
                                makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                                currentActionBarHeight = paddingBottom - AndroidUtilities.statusBarHeight;
                            }
                        } else if (childAt != PhotoViewer.this.captionScrollView) {
                            measureChildWithMargins(childAt, i, 0, i2, 0);
                        } else if (PhotoViewer.this.dontChangeCaptionPosition) {
                            if (this.captionAbove) {
                                i4 = dp + i3;
                                currentActionBarHeight = (paddingBottom - ((!isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                                ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                                makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                            }
                            i4 = dp;
                            currentActionBarHeight = (paddingBottom - ((!isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                            ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                            makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                        } else if (!PhotoViewer.this.groupedPhotosListView.hasPhotos() || (!AndroidUtilities.isTablet() && paddingBottom <= paddingRight)) {
                            this.captionAbove = false;
                            i4 = dp;
                            currentActionBarHeight = (paddingBottom - ((!isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                            ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                            makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                        } else {
                            i4 = dp + i3;
                            this.captionAbove = true;
                            currentActionBarHeight = (paddingBottom - ((!isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - i4;
                            ((ViewGroup.MarginLayoutParams) PhotoViewer.this.captionScrollView.getLayoutParams()).bottomMargin = i4;
                            makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(paddingRight, 1073741824);
                        }
                        makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec(currentActionBarHeight, 1073741824);
                        childAt.measure(makeMeasureSpec, makeMeasureSpec2);
                    }
                }
            }
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        public void updateExclusionRects() {
            if (Build.VERSION.SDK_INT >= 29) {
                if (this.exclusionRects == null) {
                    this.exclusionRects = new ArrayList();
                }
                this.exclusionRects.clear();
                if (PhotoViewer.this.currentEditMode == 1 || PhotoViewer.this.switchingToMode == 1) {
                    int measuredHeight = getMeasuredHeight();
                    int measuredWidth = getMeasuredWidth();
                    this.exclusionRects.add(new Rect(0, (measuredHeight - AndroidUtilities.dp(200.0f)) / 2, AndroidUtilities.dp(100.0f), (AndroidUtilities.dp(200.0f) + measuredHeight) / 2));
                    this.exclusionRects.add(new Rect(measuredWidth - AndroidUtilities.dp(100.0f), (measuredHeight - AndroidUtilities.dp(200.0f)) / 2, measuredWidth, (measuredHeight + AndroidUtilities.dp(200.0f)) / 2));
                }
                setSystemGestureExclusionRects(this.exclusionRects);
                invalidate();
            }
        }
    }

    /* loaded from: classes4.dex */
    public class ListAdapter extends RecyclerListView.SelectionAdapter {
        private Context mContext;

        public ListAdapter(Context context) {
            PhotoViewer.this = r1;
            this.mContext = context;
        }

        /* JADX WARN: Code restructure failed: missing block: B:28:0x004e, code lost:
            if (r5 == 0) goto L9;
         */
        /* JADX WARN: Code restructure failed: missing block: B:33:0x0066, code lost:
            if (r5 == 0) goto L9;
         */
        /* JADX WARN: Code restructure failed: missing block: B:34:0x0068, code lost:
            org.telegram.ui.PhotoViewer.this.selectedPhotosAdapter.notifyItemChanged(0);
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public /* synthetic */ void lambda$onCreateViewHolder$0(View view) {
            Object tag = ((View) view.getParent()).getTag();
            int indexOf = PhotoViewer.this.imagesArrLocals.indexOf(tag);
            if (indexOf >= 0) {
                int photoChecked = PhotoViewer.this.placeProvider.setPhotoChecked(indexOf, PhotoViewer.this.getCurrentVideoEditedInfo());
                boolean isPhotoChecked = PhotoViewer.this.placeProvider.isPhotoChecked(indexOf);
                if (indexOf == PhotoViewer.this.currentIndex) {
                    PhotoViewer.this.checkImageView.setChecked(-1, isPhotoChecked, true);
                }
                if (photoChecked >= 0) {
                    PhotoViewer.this.selectedPhotosAdapter.notifyItemRemoved(photoChecked);
                }
                PhotoViewer.this.updateSelectedCount();
                return;
            }
            int photoUnchecked = PhotoViewer.this.placeProvider.setPhotoUnchecked(tag);
            if (photoUnchecked < 0) {
                return;
            }
            PhotoViewer.this.selectedPhotosAdapter.notifyItemRemoved(photoUnchecked);
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            if (PhotoViewer.this.placeProvider == null || PhotoViewer.this.placeProvider.getSelectedPhotosOrder() == null) {
                return 0;
            }
            return PhotoViewer.this.placeProvider.getSelectedPhotosOrder().size();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            return 0;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
            StringBuilder sb;
            String str;
            PhotoPickerPhotoCell photoPickerPhotoCell = (PhotoPickerPhotoCell) viewHolder.itemView;
            photoPickerPhotoCell.setItemWidth(AndroidUtilities.dp(85.0f), i != 0 ? AndroidUtilities.dp(6.0f) : 0);
            BackupImageView backupImageView = photoPickerPhotoCell.imageView;
            backupImageView.setOrientation(0, true);
            Object obj = PhotoViewer.this.placeProvider.getSelectedPhotos().get(PhotoViewer.this.placeProvider.getSelectedPhotosOrder().get(i));
            if (obj instanceof MediaController.PhotoEntry) {
                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                photoPickerPhotoCell.setTag(photoEntry);
                photoPickerPhotoCell.videoInfoContainer.setVisibility(4);
                String str2 = photoEntry.thumbPath;
                if (str2 != null) {
                    backupImageView.setImage(str2, null, this.mContext.getResources().getDrawable(R.drawable.nophotos));
                } else if (photoEntry.path != null) {
                    backupImageView.setOrientation(photoEntry.orientation, photoEntry.invert, true);
                    if (photoEntry.isVideo) {
                        photoPickerPhotoCell.videoInfoContainer.setVisibility(0);
                        photoPickerPhotoCell.videoTextView.setText(AndroidUtilities.formatShortDuration(photoEntry.duration));
                        sb = new StringBuilder();
                        str = "vthumb://";
                    } else {
                        sb = new StringBuilder();
                        str = "thumb://";
                    }
                    sb.append(str);
                    sb.append(photoEntry.imageId);
                    sb.append(":");
                    sb.append(photoEntry.path);
                    backupImageView.setImage(sb.toString(), null, this.mContext.getResources().getDrawable(R.drawable.nophotos));
                } else {
                    backupImageView.setImageResource(R.drawable.nophotos);
                }
            } else if (!(obj instanceof MediaController.SearchImage)) {
                return;
            } else {
                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                photoPickerPhotoCell.setTag(searchImage);
                photoPickerPhotoCell.setImage(searchImage);
                photoPickerPhotoCell.videoInfoContainer.setVisibility(4);
            }
            photoPickerPhotoCell.setChecked(-1, true, false);
            photoPickerPhotoCell.checkBox.setVisibility(0);
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            PhotoPickerPhotoCell photoPickerPhotoCell = new PhotoPickerPhotoCell(this.mContext);
            photoPickerPhotoCell.checkFrame.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$ListAdapter$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.ListAdapter.this.lambda$onCreateViewHolder$0(view);
                }
            });
            return new RecyclerListView.Holder(photoPickerPhotoCell);
        }
    }

    /* loaded from: classes4.dex */
    public interface PageBlocksAdapter {
        TLRPC.PageBlock get(int i);

        List getAll();

        CharSequence getCaption(int i);

        File getFile(int i);

        TLRPC.PhotoSize getFileLocation(TLObject tLObject, int[] iArr);

        String getFileName(int i);

        int getItemsCount();

        TLObject getMedia(int i);

        Object getParentObject();

        boolean isHardwarePlayer(int i);

        boolean isVideo(int i);

        void updateSlideshowCell(TLRPC.PageBlock pageBlock);
    }

    /* loaded from: classes4.dex */
    public static class PhotoCountView extends View {
        Paint backgroundPaint;
        StaticLayout center;
        float centerTop;
        float centerWidth;
        AnimatedTextView.AnimatedTextDrawable left;
        private String lng;
        private int marginTop;
        private boolean nextNotAnimate;
        TextPaint paint;
        AnimatedTextView.AnimatedTextDrawable right;
        private AnimatedFloat showT;
        private boolean shown;

        public PhotoCountView(Context context) {
            super(context);
            this.backgroundPaint = new Paint(1);
            this.paint = new TextPaint(1);
            this.shown = false;
            CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
            this.showT = new AnimatedFloat(this, 0L, 350L, cubicBezierInterpolator);
            this.backgroundPaint.setColor(2130706432);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = new AnimatedTextView.AnimatedTextDrawable(false, true, true);
            this.left = animatedTextDrawable;
            animatedTextDrawable.setAnimationProperties(0.3f, 0L, 320L, cubicBezierInterpolator);
            this.left.setTextColor(-1);
            this.left.setTextSize(AndroidUtilities.dp(14.0f));
            this.left.setTypeface(AndroidUtilities.bold());
            this.left.setCallback(this);
            this.left.setText("0");
            this.left.setOverrideFullWidth(AndroidUtilities.displaySize.x);
            this.paint.setColor(-1);
            this.paint.setTextSize(AndroidUtilities.dp(14.0f));
            this.paint.setTypeface(AndroidUtilities.bold());
            setCenterText();
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable2 = new AnimatedTextView.AnimatedTextDrawable(false, true, true);
            this.right = animatedTextDrawable2;
            animatedTextDrawable2.setAnimationProperties(0.3f, 0L, 320L, cubicBezierInterpolator);
            this.right.setTextColor(-1);
            this.right.setTextSize(AndroidUtilities.dp(14.0f));
            this.right.setTypeface(AndroidUtilities.bold());
            this.right.setCallback(this);
            this.right.setText("0");
            this.right.setOverrideFullWidth(AndroidUtilities.displaySize.x);
        }

        private String getOf() {
            this.lng = LocaleController.getInstance().getCurrentLocaleInfo().shortName;
            return LocaleController.getString("Of").replace("%1$d", "").replace("%2$d", "");
        }

        private void setCenterText() {
            float f;
            StaticLayout staticLayout = new StaticLayout(getOf(), this.paint, AndroidUtilities.dp(200.0f), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
            this.center = staticLayout;
            if (staticLayout.getLineCount() >= 1) {
                this.centerWidth = this.center.getLineWidth(0);
                f = this.center.getLineDescent(0);
            } else {
                f = 0.0f;
                this.centerWidth = 0.0f;
            }
            this.centerTop = f;
        }

        @Override // android.view.View
        public boolean isShown() {
            return this.shown;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            float f = this.showT.set(this.shown ? 1.0f : 0.0f);
            if (f <= 0.0f) {
                return;
            }
            float currentWidth = this.left.getCurrentWidth() + this.centerWidth + this.right.getCurrentWidth() + AndroidUtilities.dp(18.0f);
            float f2 = this.marginTop + ((1.0f - f) * (-AndroidUtilities.dp(8.0f)));
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set((getWidth() - currentWidth) / 2.0f, AndroidUtilities.dpf2(10.0f) + f2, (getWidth() + currentWidth) / 2.0f, AndroidUtilities.dpf2(33.0f) + f2);
            int alpha = this.backgroundPaint.getAlpha();
            this.backgroundPaint.setAlpha((int) (alpha * f));
            canvas.drawRoundRect(rectF, AndroidUtilities.dpf2(12.0f), AndroidUtilities.dpf2(12.0f), this.backgroundPaint);
            this.backgroundPaint.setAlpha(alpha);
            canvas.save();
            canvas.translate(((getWidth() - currentWidth) / 2.0f) + AndroidUtilities.dp(9.0f), f2 + AndroidUtilities.dp(10.0f));
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = this.left;
            animatedTextDrawable.setBounds(0, 0, (int) animatedTextDrawable.getCurrentWidth(), AndroidUtilities.dp(23.0f));
            int i = (int) (f * 255.0f);
            this.left.setAlpha(i);
            this.left.draw(canvas);
            canvas.translate(this.left.getCurrentWidth(), 0.0f);
            canvas.save();
            canvas.translate((-(this.center.getWidth() - this.centerWidth)) / 2.0f, ((AndroidUtilities.dp(23.0f) - this.center.getHeight()) + (this.centerTop / 2.0f)) / 2.0f);
            this.paint.setAlpha(i);
            this.center.draw(canvas);
            canvas.restore();
            canvas.translate(this.centerWidth, 0.0f);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable2 = this.right;
            animatedTextDrawable2.setBounds(0, 0, (int) animatedTextDrawable2.getCurrentWidth(), AndroidUtilities.dp(23.0f));
            this.right.setAlpha(i);
            this.right.draw(canvas);
            canvas.restore();
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            int size = View.MeasureSpec.getSize(i);
            this.marginTop = ActionBar.getCurrentActionBarHeight() + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
            this.left.setOverrideFullWidth(size);
            this.right.setOverrideFullWidth(size);
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(this.marginTop + AndroidUtilities.dp(43.0f), 1073741824));
        }

        public void set(int i, int i2) {
            set(i, i2, true);
        }

        public void set(int i, int i2, boolean z) {
            boolean z2 = false;
            int max = Math.max(0, i);
            int max2 = Math.max(max, i2);
            if (LocaleController.getInstance().getCurrentLocaleInfo() != null && !TextUtils.equals(this.lng, LocaleController.getInstance().getCurrentLocaleInfo().shortName)) {
                setCenterText();
            }
            this.left.setText(String.format("%d", Integer.valueOf(LocaleController.isRTL ? max2 : max)), (!z || this.nextNotAnimate || LocaleController.isRTL) ? false : true);
            AnimatedTextView.AnimatedTextDrawable animatedTextDrawable = this.right;
            if (!LocaleController.isRTL) {
                max = max2;
            }
            String format = String.format("%d", Integer.valueOf(max));
            if (z && !this.nextNotAnimate && !LocaleController.isRTL) {
                z2 = true;
            }
            animatedTextDrawable.setText(format, z2);
            this.nextNotAnimate = !z;
        }

        public void updateShow(boolean z, boolean z2) {
            if (this.shown != z) {
                this.shown = z;
                if (!z) {
                    this.nextNotAnimate = true;
                }
                if (!z2) {
                    this.showT.set(z ? 1.0f : 0.0f, true);
                }
                invalidate();
            }
        }

        @Override // android.view.View
        protected boolean verifyDrawable(Drawable drawable) {
            return this.left == drawable || this.right == drawable || super.verifyDrawable(drawable);
        }
    }

    /* loaded from: classes4.dex */
    public class PhotoProgressView {
        private View parent;
        private final CombinedDrawable playDrawable;
        private final PlayPauseDrawable playPauseDrawable;
        private boolean visible;
        private long lastUpdateTime = 0;
        private float radOffset = 0.0f;
        private float currentProgress = 0.0f;
        private float animationProgressStart = 0.0f;
        private long currentProgressTime = 0;
        private float animatedProgressValue = 0.0f;
        private RectF progressRect = new RectF();
        private int backgroundState = -1;
        private int size = AndroidUtilities.dp(64.0f);
        private int previousBackgroundState = -2;
        private float animatedAlphaValue = 1.0f;
        private float[] animAlphas = new float[3];
        private float[] alphas = new float[3];
        private float scale = 1.0f;

        public PhotoProgressView(View view) {
            PhotoViewer.this = r5;
            if (PhotoViewer.decelerateInterpolator == null) {
                DecelerateInterpolator unused = PhotoViewer.decelerateInterpolator = new DecelerateInterpolator(1.5f);
                Paint unused2 = PhotoViewer.progressPaint = new Paint(1);
                PhotoViewer.progressPaint.setStyle(Paint.Style.STROKE);
                PhotoViewer.progressPaint.setStrokeCap(Paint.Cap.ROUND);
                PhotoViewer.progressPaint.setStrokeWidth(AndroidUtilities.dp(3.0f));
                PhotoViewer.progressPaint.setColor(-1);
            }
            this.parent = view;
            resetAlphas();
            PlayPauseDrawable playPauseDrawable = new PlayPauseDrawable(28);
            this.playPauseDrawable = playPauseDrawable;
            playPauseDrawable.setDuration(NotificationCenter.storyQualityUpdate);
            this.playDrawable = new CombinedDrawable(ContextCompat.getDrawable(r5.parentActivity, R.drawable.circle_big).mutate(), playPauseDrawable);
        }

        private float calculateAlpha() {
            float f = 1.0f;
            int i = 0;
            while (true) {
                float[] fArr = this.animAlphas;
                if (i >= fArr.length) {
                    return f;
                }
                f *= i == 2 ? AndroidUtilities.accelerateInterpolator.getInterpolation(fArr[i]) : fArr[i];
                i++;
            }
        }

        private void checkVisibility() {
            boolean z = false;
            int i = 0;
            while (true) {
                float[] fArr = this.alphas;
                if (i >= fArr.length) {
                    z = true;
                    break;
                } else if (fArr[i] != 1.0f) {
                    break;
                } else {
                    i++;
                }
            }
            if (z != this.visible) {
                this.visible = z;
                onVisibilityChanged(z);
            }
        }

        private void updateAnimation(boolean z) {
            boolean z2;
            long currentTimeMillis = System.currentTimeMillis();
            long j = currentTimeMillis - this.lastUpdateTime;
            if (j > 18) {
                j = 18;
            }
            this.lastUpdateTime = currentTimeMillis;
            int i = 0;
            if (z) {
                if (this.animatedProgressValue == 1.0f && this.currentProgress == 1.0f) {
                    z2 = false;
                } else {
                    this.radOffset += ((float) (360 * j)) / 3000.0f;
                    float f = this.currentProgress - this.animationProgressStart;
                    if (Math.abs(f) > 0.0f) {
                        long j2 = this.currentProgressTime + j;
                        this.currentProgressTime = j2;
                        if (j2 >= 300) {
                            float f2 = this.currentProgress;
                            this.animatedProgressValue = f2;
                            this.animationProgressStart = f2;
                            this.currentProgressTime = 0L;
                        } else {
                            this.animatedProgressValue = this.animationProgressStart + (f * PhotoViewer.decelerateInterpolator.getInterpolation(((float) this.currentProgressTime) / 300.0f));
                        }
                    }
                    z2 = true;
                }
                float f3 = this.animatedAlphaValue;
                if (f3 > 0.0f && this.previousBackgroundState != -2) {
                    float f4 = f3 - (((float) j) / 200.0f);
                    this.animatedAlphaValue = f4;
                    if (f4 <= 0.0f) {
                        this.animatedAlphaValue = 0.0f;
                        this.previousBackgroundState = -2;
                    }
                    z2 = true;
                }
            } else {
                z2 = false;
            }
            while (true) {
                float[] fArr = this.alphas;
                if (i >= fArr.length) {
                    break;
                }
                float f5 = fArr[i];
                float[] fArr2 = this.animAlphas;
                float f6 = fArr2[i];
                if (f5 > f6) {
                    fArr2[i] = Math.min(1.0f, f6 + (((float) j) / 200.0f));
                } else if (f5 < f6) {
                    fArr2[i] = Math.max(0.0f, f6 - (((float) j) / 200.0f));
                } else {
                    i++;
                }
                z2 = true;
                i++;
            }
            if (z2) {
                this.parent.postInvalidateOnAnimation();
            }
        }

        public int getX() {
            return (PhotoViewer.this.containerView.getWidth() - ((int) (this.size * this.scale))) / 2;
        }

        public int getY() {
            int i = (int) ((((AndroidUtilities.displaySize.y + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - ((int) (this.size * this.scale))) / 2) + PhotoViewer.this.currentPanTranslationY);
            return PhotoViewer.this.sendPhotoType == 1 ? i - AndroidUtilities.dp(38.0f) : i;
        }

        public boolean isVisible() {
            return this.visible;
        }

        protected abstract void onBackgroundStateUpdated(int i);

        public void onDraw(Canvas canvas) {
            Paint paint;
            int i;
            int i2;
            int i3 = (int) (this.size * this.scale);
            int x = getX();
            int y = getY();
            float calculateAlpha = calculateAlpha();
            int i4 = this.previousBackgroundState;
            if (i4 >= 0 && i4 < PhotoViewer.progressDrawables.length + 2) {
                Drawable drawable = this.previousBackgroundState < PhotoViewer.progressDrawables.length ? PhotoViewer.progressDrawables[this.previousBackgroundState] : this.playDrawable;
                if (drawable != null) {
                    drawable.setAlpha((int) (this.animatedAlphaValue * 255.0f * calculateAlpha));
                    drawable.setBounds(x, y, x + i3, y + i3);
                    drawable.draw(canvas);
                }
            }
            int i5 = this.backgroundState;
            if (i5 >= 0 && i5 < PhotoViewer.progressDrawables.length + 2) {
                Drawable drawable2 = this.backgroundState < PhotoViewer.progressDrawables.length ? PhotoViewer.progressDrawables[this.backgroundState] : this.playDrawable;
                if (drawable2 != null) {
                    drawable2.setAlpha(this.previousBackgroundState != -2 ? (int) ((1.0f - this.animatedAlphaValue) * 255.0f * calculateAlpha) : (int) (calculateAlpha * 255.0f));
                    drawable2.setBounds(x, y, x + i3, y + i3);
                    drawable2.draw(canvas);
                }
            }
            int i6 = this.backgroundState;
            if (i6 != 0 && i6 != 1 && (i2 = this.previousBackgroundState) != 0 && i2 != 1) {
                updateAnimation(false);
                return;
            }
            int dp = AndroidUtilities.dp(4.0f);
            if (this.previousBackgroundState != -2) {
                paint = PhotoViewer.progressPaint;
                i = (int) (this.animatedAlphaValue * 255.0f * calculateAlpha);
            } else {
                paint = PhotoViewer.progressPaint;
                i = (int) (calculateAlpha * 255.0f);
            }
            paint.setAlpha(i);
            this.progressRect.set(x + dp, y + dp, (x + i3) - dp, (y + i3) - dp);
            canvas.drawArc(this.progressRect, this.radOffset - 90.0f, Math.max(4.0f, this.animatedProgressValue * 360.0f), false, PhotoViewer.progressPaint);
            updateAnimation(true);
        }

        protected abstract void onVisibilityChanged(boolean z);

        public void resetAlphas() {
            int i = 0;
            while (true) {
                float[] fArr = this.alphas;
                if (i >= fArr.length) {
                    checkVisibility();
                    return;
                }
                this.animAlphas[i] = 1.0f;
                fArr[i] = 1.0f;
                i++;
            }
        }

        public void setAlpha(float f) {
            setIndexedAlpha(0, f, false);
        }

        public void setBackgroundState(int i, boolean z, boolean z2) {
            int i2;
            int i3 = this.backgroundState;
            if (i3 == i) {
                return;
            }
            PlayPauseDrawable playPauseDrawable = this.playPauseDrawable;
            if (playPauseDrawable != null) {
                boolean z3 = z2 && (i3 == 3 || i3 == 4);
                if (i == 3) {
                    playPauseDrawable.setPause(false, z3);
                } else if (i == 4) {
                    playPauseDrawable.setPause(true, z3);
                }
                this.playPauseDrawable.setParent(this.parent);
                this.playPauseDrawable.invalidateSelf();
            }
            this.lastUpdateTime = System.currentTimeMillis();
            if (!z || (i2 = this.backgroundState) == i) {
                this.previousBackgroundState = -2;
            } else {
                this.previousBackgroundState = i2;
                this.animatedAlphaValue = 1.0f;
            }
            this.backgroundState = i;
            onBackgroundStateUpdated(i);
            this.parent.invalidate();
        }

        public void setIndexedAlpha(int i, float f, boolean z) {
            float[] fArr = this.alphas;
            if (fArr[i] != f) {
                fArr[i] = f;
                if (!z) {
                    this.animAlphas[i] = f;
                }
                checkVisibility();
                this.parent.invalidate();
            }
        }

        public void setProgress(float f, boolean z) {
            if (z) {
                this.animationProgressStart = this.animatedProgressValue;
            } else {
                this.animatedProgressValue = f;
                this.animationProgressStart = f;
            }
            this.currentProgress = f;
            this.currentProgressTime = 0L;
            this.parent.invalidate();
        }

        public void setScale(float f) {
            this.scale = f;
        }
    }

    /* loaded from: classes4.dex */
    public static class PhotoViewerActionBarContainer extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
        private FrameLayout container;
        private boolean hasSubtitle;
        int lastHeight;
        private float rightPadding;
        private ValueAnimator rightPaddingAnimator;
        private AnimatorSet subtitleAnimator;
        AnimatedTextView subtitleTextView;
        private AnimatorSet titleAnimator;
        private FrameLayout titleLayout;
        SimpleTextView[] titleTextView;

        public PhotoViewerActionBarContainer(Context context) {
            super(context);
            FrameLayout frameLayout = new FrameLayout(context);
            this.container = frameLayout;
            frameLayout.setPadding(AndroidUtilities.dp((AndroidUtilities.isTablet() ? 80 : 72) - 16), 0, 0, 0);
            addView(this.container, LayoutHelper.createFrame(-1, -1, 119));
            FrameLayout frameLayout2 = new FrameLayout(context) { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.1
                {
                    PhotoViewerActionBarContainer.this = this;
                }

                @Override // android.widget.FrameLayout, android.view.View
                protected void onMeasure(int i, int i2) {
                    super.onMeasure(i, i2);
                    setPivotY(getMeasuredHeight());
                }
            };
            this.titleLayout = frameLayout2;
            frameLayout2.setPivotX(AndroidUtilities.dp(16.0f));
            this.titleLayout.setPadding(AndroidUtilities.dp(16.0f), 0, 0, 0);
            this.titleLayout.setClipToPadding(false);
            this.container.addView(this.titleLayout, LayoutHelper.createFrame(-1, -1, 119));
            this.titleTextView = new SimpleTextView[2];
            for (int i = 0; i < 2; i++) {
                this.titleTextView[i] = new SimpleTextView(context);
                this.titleTextView[i].setGravity(19);
                this.titleTextView[i].setTextColor(-1);
                this.titleTextView[i].setTextSize(20);
                this.titleTextView[i].setTypeface(AndroidUtilities.bold());
                this.titleTextView[i].setDrawablePadding(AndroidUtilities.dp(4.0f));
                this.titleTextView[i].setScrollNonFitText(true);
                this.titleLayout.addView(this.titleTextView[i], LayoutHelper.createFrame(-1, -2, 19));
            }
            AnimatedTextView animatedTextView = new AnimatedTextView(context, true, false, false);
            this.subtitleTextView = animatedTextView;
            animatedTextView.setAnimationProperties(0.4f, 0L, 320L, CubicBezierInterpolator.EASE_OUT_QUINT);
            this.subtitleTextView.setTextSize(AndroidUtilities.dp(14.0f));
            this.subtitleTextView.setGravity(19);
            this.subtitleTextView.setTextColor(-1);
            this.subtitleTextView.setEllipsizeByGradient(true);
            this.container.addView(this.subtitleTextView, LayoutHelper.createFrame(-1, 20.0f, 51, 16.0f, 0.0f, 0.0f, 0.0f));
        }

        private boolean areStringsEqual(CharSequence charSequence, CharSequence charSequence2) {
            if (charSequence == null && charSequence2 == null) {
                return true;
            }
            if ((charSequence == null) != (charSequence2 == null)) {
                return false;
            }
            return TextUtils.equals(charSequence.toString(), charSequence2.toString());
        }

        public /* synthetic */ void lambda$updateRightPadding$0(float f, ValueAnimator valueAnimator) {
            this.rightPadding = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            int i = (int) f;
            this.titleTextView[0].setRightPadding(i);
            this.titleTextView[1].setRightPadding(i);
            this.subtitleTextView.setRightPadding(f);
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(int i, int i2, Object... objArr) {
            if (i == NotificationCenter.emojiLoaded) {
                this.titleTextView[0].invalidate();
                this.titleTextView[1].invalidate();
                this.subtitleTextView.invalidate();
            }
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            this.container.layout(0, Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0, i3 - i, i4 - i2);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i3 = Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0;
            int i4 = this.lastHeight;
            int i5 = AndroidUtilities.displaySize.y;
            if (i4 != i5) {
                this.lastHeight = i5;
                updateOrientation();
            }
            this.container.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(size2 - i3, 1073741824));
            setMeasuredDimension(size, size2);
        }

        public void setSubtitle(CharSequence charSequence) {
            setSubtitle(charSequence, true);
        }

        public void setSubtitle(CharSequence charSequence, boolean z) {
            boolean z2 = !TextUtils.isEmpty(charSequence);
            if (z2 != this.hasSubtitle) {
                this.hasSubtitle = z2;
                AnimatorSet animatorSet = this.subtitleAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                Point point = AndroidUtilities.displaySize;
                int dp = AndroidUtilities.dp((z2 ? 30 : 33) - (point.x > point.y ? AndroidUtilities.isTablet() ? -4 : 6 : 0));
                if (z) {
                    ArrayList arrayList = new ArrayList();
                    arrayList.add(ObjectAnimator.ofFloat(this.subtitleTextView, View.ALPHA, z2 ? 1.0f : 0.0f));
                    AnimatedTextView animatedTextView = this.subtitleTextView;
                    Property property = View.TRANSLATION_Y;
                    arrayList.add(ObjectAnimator.ofFloat(animatedTextView, property, dp));
                    arrayList.add(ObjectAnimator.ofFloat(this.titleLayout, property, z2 ? AndroidUtilities.dp(-12.0f) : 0.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.titleLayout, View.SCALE_X, z2 ? 0.87f : 1.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.titleLayout, View.SCALE_Y, z2 ? 0.87f : 1.0f));
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.subtitleAnimator = animatorSet2;
                    animatorSet2.playTogether(arrayList);
                    this.subtitleAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    this.subtitleAnimator.start();
                } else {
                    this.subtitleTextView.setAlpha(z2 ? 1.0f : 0.0f);
                    this.subtitleTextView.setTranslationY(dp);
                    this.titleLayout.setTranslationY(z2 ? AndroidUtilities.dp(-12.0f) : 0.0f);
                    this.titleLayout.setScaleX(z2 ? 0.87f : 1.0f);
                    this.titleLayout.setScaleY(z2 ? 0.87f : 1.0f);
                }
            }
            this.subtitleTextView.setText(charSequence, z);
        }

        public void setTextShadows(boolean z) {
            this.titleTextView[0].getPaint().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
            this.titleTextView[1].getPaint().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
            this.subtitleTextView.getDrawable().setShadowLayer(AndroidUtilities.dpf2(0.66f), 0.0f, 1.0f, z ? 1912602624 : 0);
        }

        public void setTitle(CharSequence charSequence) {
            this.titleTextView[1].setAlpha(0.0f);
            this.titleTextView[1].setVisibility(8);
            if (!areStringsEqual(this.titleTextView[0].getText(), charSequence)) {
                this.titleTextView[0].resetScrolling();
            }
            this.titleTextView[0].setText(charSequence);
            this.titleTextView[0].setAlpha(1.0f);
            this.titleTextView[0].setTranslationX(0.0f);
            this.titleTextView[0].setTranslationY(0.0f);
        }

        public void setTitleAnimated(CharSequence charSequence, boolean z, boolean z2) {
            if (areStringsEqual(this.titleTextView[0].getText(), charSequence)) {
                return;
            }
            AnimatorSet animatorSet = this.titleAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.titleAnimator = null;
            }
            SimpleTextView[] simpleTextViewArr = this.titleTextView;
            simpleTextViewArr[1].copyScrolling(simpleTextViewArr[0]);
            SimpleTextView[] simpleTextViewArr2 = this.titleTextView;
            simpleTextViewArr2[1].setText(simpleTextViewArr2[0].getText());
            this.titleTextView[1].setRightPadding((int) this.rightPadding);
            this.titleTextView[0].resetScrolling();
            this.titleTextView[0].setText(charSequence);
            float dp = AndroidUtilities.dp(8.0f) * (z2 ? 1 : -1);
            this.titleTextView[1].setTranslationX(0.0f);
            this.titleTextView[1].setTranslationY(0.0f);
            SimpleTextView[] simpleTextViewArr3 = this.titleTextView;
            if (z) {
                simpleTextViewArr3[0].setTranslationX(0.0f);
                this.titleTextView[0].setTranslationY(-dp);
            } else {
                simpleTextViewArr3[0].setTranslationX(-dp);
                this.titleTextView[0].setTranslationY(0.0f);
            }
            this.titleTextView[0].setAlpha(0.0f);
            this.titleTextView[1].setAlpha(1.0f);
            this.titleTextView[0].setVisibility(0);
            this.titleTextView[1].setVisibility(0);
            ArrayList arrayList = new ArrayList();
            SimpleTextView simpleTextView = this.titleTextView[1];
            Property property = View.ALPHA;
            arrayList.add(ObjectAnimator.ofFloat(simpleTextView, property, 0.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[0], property, 1.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[1], z ? View.TRANSLATION_Y : View.TRANSLATION_X, dp));
            arrayList.add(ObjectAnimator.ofFloat(this.titleTextView[0], z ? View.TRANSLATION_Y : View.TRANSLATION_X, 0.0f));
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.titleAnimator = animatorSet2;
            animatorSet2.playTogether(arrayList);
            this.titleAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.2
                {
                    PhotoViewerActionBarContainer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (PhotoViewerActionBarContainer.this.titleAnimator == animator) {
                        PhotoViewerActionBarContainer.this.titleTextView[1].setVisibility(8);
                        PhotoViewerActionBarContainer.this.titleAnimator = null;
                    }
                }
            });
            this.titleAnimator.setDuration(320L);
            this.titleAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            this.titleAnimator.start();
        }

        public void updateOrientation() {
            this.hasSubtitle = !this.hasSubtitle;
            setSubtitle(this.subtitleTextView.getText(), false);
        }

        public void updateRightPadding(final float f, boolean z) {
            ValueAnimator valueAnimator = this.rightPaddingAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
                this.rightPaddingAnimator = null;
            }
            if (!z) {
                this.rightPadding = f;
                this.titleTextView[0].setRightPadding((int) f);
                this.subtitleTextView.setRightPadding(f);
                return;
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.rightPadding, f);
            this.rightPaddingAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$PhotoViewerActionBarContainer$$ExternalSyntheticLambda0
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    PhotoViewer.PhotoViewerActionBarContainer.this.lambda$updateRightPadding$0(f, valueAnimator2);
                }
            });
            this.rightPaddingAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.PhotoViewerActionBarContainer.3
                {
                    PhotoViewerActionBarContainer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    PhotoViewerActionBarContainer.this.updateRightPadding(f, false);
                }
            });
            this.rightPaddingAnimator.setDuration(320L);
            this.rightPaddingAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
            this.rightPaddingAnimator.start();
        }
    }

    /* loaded from: classes4.dex */
    public interface PhotoViewerProvider {

        /* loaded from: classes4.dex */
        public abstract /* synthetic */ class -CC {
            public static boolean $default$canLoadMoreAvatars(PhotoViewerProvider photoViewerProvider) {
                return true;
            }

            public static boolean $default$forceAllInGroup(PhotoViewerProvider photoViewerProvider) {
                return false;
            }

            public static boolean $default$onDeletePhoto(PhotoViewerProvider photoViewerProvider, int i) {
                return true;
            }

            public static void $default$onEditModeChanged(PhotoViewerProvider photoViewerProvider, boolean z) {
            }

            public static void $default$onPreClose(PhotoViewerProvider photoViewerProvider) {
            }

            public static void $default$onPreOpen(PhotoViewerProvider photoViewerProvider) {
            }

            public static void $default$onReleasePlayerBeforeClose(PhotoViewerProvider photoViewerProvider, int i) {
            }
        }

        boolean allowCaption();

        boolean allowSendingSubmenu();

        boolean canCaptureMorePhotos();

        boolean canEdit(int i);

        boolean canLoadMoreAvatars();

        boolean canReplace(int i);

        boolean canScrollAway();

        boolean cancelButtonPressed();

        boolean closeKeyboard();

        void deleteImageAtIndex(int i);

        boolean forceAllInGroup();

        String getDeleteMessageString();

        MessageObject getEditingMessageObject();

        int getPhotoIndex(int i);

        PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i, boolean z);

        int getSelectedCount();

        HashMap getSelectedPhotos();

        ArrayList getSelectedPhotosOrder();

        ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i);

        int getTotalImageCount();

        boolean isPhotoChecked(int i);

        boolean loadMore();

        void needAddMorePhotos();

        void onApplyCaption(CharSequence charSequence);

        void onClose();

        boolean onDeletePhoto(int i);

        void onEditModeChanged(boolean z);

        void onOpen();

        void onPreClose();

        void onPreOpen();

        void onReleasePlayerBeforeClose(int i);

        void openPhotoForEdit(String str, String str2, boolean z);

        void replaceButtonPressed(int i, VideoEditedInfo videoEditedInfo);

        boolean scaleToFill();

        void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2);

        int setPhotoChecked(int i, VideoEditedInfo videoEditedInfo);

        int setPhotoUnchecked(Object obj);

        void updatePhotoAtIndex(int i);

        void willHidePhotoViewer();

        void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int i);
    }

    /* loaded from: classes4.dex */
    public static class PlaceProviderObject {
        public ClippingImageView animatingImageView;
        public int animatingImageViewYOffset;
        public boolean canEdit;
        public int clipBottomAddition;
        public int clipTopAddition;
        public long dialogId;
        public ImageReceiver imageReceiver;
        public boolean isEvent;
        public View parentView;
        public int[] radius;
        public long size;
        public int starOffset;
        public ImageReceiver.BitmapHolder thumb;
        public int viewX;
        public int viewY;
        public float scale = 1.0f;
        public boolean allowTakeAnimation = true;
    }

    /* loaded from: classes4.dex */
    public class QualityChooseView extends View {
        private int circleSize;
        private int gapSize;
        private String hightQualityDescription;
        private int lineSize;
        private String lowQualityDescription;
        private Paint paint;
        private int sideSide;
        private int startMovingQuality;
        private TextPaint textPaint;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public QualityChooseView(Context context) {
            super(context);
            PhotoViewer.this = r1;
            this.paint = new Paint(1);
            TextPaint textPaint = new TextPaint(1);
            this.textPaint = textPaint;
            textPaint.setTextSize(AndroidUtilities.dp(14.0f));
            this.textPaint.setColor(-3289651);
            this.lowQualityDescription = LocaleController.getString("AccDescrVideoCompressLow", R.string.AccDescrVideoCompressLow);
            this.hightQualityDescription = LocaleController.getString("AccDescrVideoCompressHigh", R.string.AccDescrVideoCompressHigh);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            Paint paint;
            int i;
            this.lineSize = PhotoViewer.this.compressionsCount != 1 ? (((getMeasuredWidth() - (this.circleSize * PhotoViewer.this.compressionsCount)) - (this.gapSize * ((PhotoViewer.this.compressionsCount * 2) - 2))) - (this.sideSide * 2)) / (PhotoViewer.this.compressionsCount - 1) : ((getMeasuredWidth() - (this.circleSize * PhotoViewer.this.compressionsCount)) - (this.gapSize * 2)) - (this.sideSide * 2);
            int measuredHeight = (getMeasuredHeight() / 2) + AndroidUtilities.dp(6.0f);
            int i2 = 0;
            while (i2 < PhotoViewer.this.compressionsCount) {
                int i3 = this.sideSide;
                int i4 = this.lineSize + (this.gapSize * 2);
                int i5 = this.circleSize;
                int i6 = i3 + ((i4 + i5) * i2) + (i5 / 2);
                if (i2 <= PhotoViewer.this.selectedCompression) {
                    paint = this.paint;
                    i = -11292945;
                } else {
                    paint = this.paint;
                    i = 1728053247;
                }
                paint.setColor(i);
                canvas.drawCircle(i6, measuredHeight, i2 == PhotoViewer.this.selectedCompression ? AndroidUtilities.dp(6.0f) : this.circleSize / 2, this.paint);
                if (i2 != 0) {
                    int i7 = ((i6 - (this.circleSize / 2)) - this.gapSize) - this.lineSize;
                    canvas.drawRect((i2 == PhotoViewer.this.selectedCompression + 1 ? AndroidUtilities.dpf2(2.0f) : 0.0f) + i7, measuredHeight - AndroidUtilities.dp(1.0f), (i7 + this.lineSize) - (i2 == PhotoViewer.this.selectedCompression ? AndroidUtilities.dpf2(2.0f) : 0.0f), AndroidUtilities.dp(2.0f) + measuredHeight, this.paint);
                }
                i2++;
            }
            canvas.drawText(this.lowQualityDescription, this.sideSide, measuredHeight - AndroidUtilities.dp(16.0f), this.textPaint);
            canvas.drawText(this.hightQualityDescription, (getMeasuredWidth() - this.sideSide) - this.textPaint.measureText(this.hightQualityDescription), measuredHeight - AndroidUtilities.dp(16.0f), this.textPaint);
        }

        @Override // android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            this.circleSize = AndroidUtilities.dp(8.0f);
            this.gapSize = AndroidUtilities.dp(2.0f);
            this.sideSide = AndroidUtilities.dp(18.0f);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            float x = motionEvent.getX();
            if (motionEvent.getAction() == 0) {
                this.startMovingQuality = PhotoViewer.this.selectedCompression;
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            if (motionEvent.getAction() == 0 || motionEvent.getAction() == 2) {
                int i = 0;
                while (true) {
                    if (i >= PhotoViewer.this.compressionsCount) {
                        break;
                    }
                    int i2 = this.sideSide;
                    int i3 = this.lineSize;
                    int i4 = this.gapSize;
                    int i5 = this.circleSize;
                    int i6 = i5 / 2;
                    int i7 = i2 + (((i4 * 2) + i3 + i5) * i) + i6;
                    int i8 = (i3 / 2) + i6 + i4;
                    if (x <= i7 - i8 || x >= i7 + i8) {
                        i++;
                    } else if (PhotoViewer.this.selectedCompression != i) {
                        PhotoViewer.this.selectedCompression = i;
                        PhotoViewer.this.didChangedCompressionLevel(false);
                        invalidate();
                    }
                }
            } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
                if (PhotoViewer.this.selectedCompression != this.startMovingQuality) {
                    PhotoViewer.this.requestVideoPreview(1);
                }
                PhotoViewer.this.moving = false;
            }
            return true;
        }
    }

    /* loaded from: classes4.dex */
    public class SavedState {
        private int index;
        private ArrayList messages;
        private PhotoViewerProvider provider;

        public SavedState(int i, ArrayList arrayList, PhotoViewerProvider photoViewerProvider) {
            PhotoViewer.this = r1;
            this.messages = arrayList;
            this.index = i;
            this.provider = photoViewerProvider;
        }

        public void restore() {
            WindowManager.LayoutParams layoutParams;
            int i;
            PhotoViewer.this.placeProvider = this.provider;
            if (Build.VERSION.SDK_INT >= 21) {
                layoutParams = PhotoViewer.this.windowLayoutParams;
                i = -2147286784;
            } else {
                layoutParams = PhotoViewer.this.windowLayoutParams;
                i = 131072;
            }
            layoutParams.flags = i;
            PhotoViewer.this.windowLayoutParams.softInputMode = NotificationCenter.onDownloadingFilesChanged;
            PhotoViewer.this.windowView.setFocusable(false);
            PhotoViewer.this.containerView.setFocusable(false);
            PhotoViewer.this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
            PhotoViewer.this.containerView.setAlpha(1.0f);
            PhotoViewer photoViewer = PhotoViewer.this;
            ArrayList arrayList = this.messages;
            int i2 = this.index;
            photoViewer.onPhotoShow(null, null, null, null, arrayList, null, null, i2, this.provider.getPlaceForPhoto((MessageObject) arrayList.get(i2), null, this.index, true));
        }
    }

    /* loaded from: classes4.dex */
    public static class SavedVideoPosition {
        public final float position;
        public final long timestamp;

        public SavedVideoPosition(float f, long j) {
            this.position = f;
            this.timestamp = j;
        }
    }

    /* loaded from: classes4.dex */
    public static class SelectedPhotosListView extends RecyclerListView {
        private Drawable arrowDrawable;
        private Paint paint;
        private RectF rect;

        public SelectedPhotosListView(Context context) {
            super(context);
            this.paint = new Paint(1);
            this.rect = new RectF();
            setWillNotDraw(false);
            setClipToPadding(false);
            setTranslationY(-AndroidUtilities.dp(10.0f));
            DefaultItemAnimator defaultItemAnimator = new DefaultItemAnimator() { // from class: org.telegram.ui.PhotoViewer.SelectedPhotosListView.1
                {
                    SelectedPhotosListView.this = this;
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // androidx.recyclerview.widget.DefaultItemAnimator
                public void onMoveAnimationUpdate(RecyclerView.ViewHolder viewHolder) {
                    SelectedPhotosListView.this.invalidate();
                }
            };
            setItemAnimator(defaultItemAnimator);
            defaultItemAnimator.setDelayAnimations(false);
            defaultItemAnimator.setSupportsChangeAnimations(false);
            setPadding(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(12.0f), AndroidUtilities.dp(12.0f), AndroidUtilities.dp(6.0f));
            this.paint.setColor(2130706432);
            this.arrowDrawable = context.getResources().getDrawable(R.drawable.photo_tooltip2).mutate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            int childCount = getChildCount();
            if (childCount > 0) {
                int measuredWidth = getMeasuredWidth() - AndroidUtilities.dp(87.0f);
                Drawable drawable = this.arrowDrawable;
                drawable.setBounds(measuredWidth, 0, drawable.getIntrinsicWidth() + measuredWidth, AndroidUtilities.dp(6.0f));
                this.arrowDrawable.draw(canvas);
                int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                int i2 = Integer.MIN_VALUE;
                for (int i3 = 0; i3 < childCount; i3++) {
                    View childAt = getChildAt(i3);
                    i = (int) Math.min(i, Math.floor(childAt.getX()));
                    i2 = (int) Math.max(i2, Math.ceil(childAt.getX() + childAt.getMeasuredWidth()));
                }
                if (i == Integer.MAX_VALUE || i2 == Integer.MIN_VALUE) {
                    return;
                }
                this.rect.set(i - AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), i2 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(103.0f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(8.0f), this.paint);
            }
        }
    }

    /* loaded from: classes4.dex */
    public class VideoPlayerControlFrameLayout extends FrameLayout {
        private boolean ignoreLayout;
        private int lastTimeWidth;
        private int parentHeight;
        private int parentWidth;
        private float progress;
        private boolean seekBarTransitionEnabled;
        private SpringAnimation timeSpring;
        private FloatValueHolder timeValue;
        private boolean translationYAnimationEnabled;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public VideoPlayerControlFrameLayout(Context context) {
            super(context);
            PhotoViewer.this = r3;
            this.progress = 1.0f;
            this.translationYAnimationEnabled = true;
            this.timeValue = new FloatValueHolder(0.0f);
            this.timeSpring = (SpringAnimation) new SpringAnimation(this.timeValue).setSpring(new SpringForce(0.0f).setStiffness(750.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.PhotoViewer$VideoPlayerControlFrameLayout$$ExternalSyntheticLambda0
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    PhotoViewer.VideoPlayerControlFrameLayout.this.lambda$new$0(dynamicAnimation, f, f2);
                }
            });
            setWillNotDraw(false);
        }

        public /* synthetic */ void lambda$new$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            PhotoViewer.this.videoPlayerSeekbar.setSize((int) (((getMeasuredWidth() - AndroidUtilities.dp(16.0f)) - f) - (this.parentWidth > this.parentHeight ? AndroidUtilities.dp(48.0f) : 0)), getMeasuredHeight());
        }

        private void onProgressChanged(float f) {
            PhotoViewer.this.videoPlayerTime.setAlpha(f);
            PhotoViewer.this.exitFullscreenButton.setAlpha(f);
            if (!this.seekBarTransitionEnabled) {
                if (this.translationYAnimationEnabled) {
                    setTranslationY(AndroidUtilities.dpf2(24.0f) * (1.0f - f));
                }
                PhotoViewer.this.videoPlayerSeekbarView.setAlpha(f);
                return;
            }
            PhotoViewer.this.videoPlayerTime.setPivotX(PhotoViewer.this.videoPlayerTime.getWidth());
            PhotoViewer.this.videoPlayerTime.setPivotY(PhotoViewer.this.videoPlayerTime.getHeight());
            float f2 = 1.0f - f;
            float f3 = 1.0f - (0.1f * f2);
            PhotoViewer.this.videoPlayerTime.setScaleX(f3);
            PhotoViewer.this.videoPlayerTime.setScaleY(f3);
            PhotoViewer.this.videoPlayerSeekbar.setTransitionProgress(f2);
        }

        public float getProgress() {
            return this.progress;
        }

        @Override // android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.timeValue.setValue(0.0f);
            this.lastTimeWidth = 0;
        }

        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            float currentPosition = PhotoViewer.this.videoPlayer != null ? ((float) PhotoViewer.this.videoPlayer.getCurrentPosition()) / ((float) PhotoViewer.this.videoPlayer.getDuration()) : 0.0f;
            if (PhotoViewer.this.playerWasReady) {
                PhotoViewer.this.videoPlayerSeekbar.setProgress(currentPosition);
            }
            PhotoViewer.this.videoTimelineView.setProgress(currentPosition);
        }

        /* JADX WARN: Code restructure failed: missing block: B:50:0x0078, code lost:
            if (r13 == (-9223372036854775807L)) goto L24;
         */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            int i3;
            long videoDuration;
            long j;
            long j2;
            this.ignoreLayout = true;
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) PhotoViewer.this.videoPlayerTime.getLayoutParams();
            if (this.parentWidth > this.parentHeight) {
                if (PhotoViewer.this.exitFullscreenButton.getVisibility() != 0) {
                    PhotoViewer.this.exitFullscreenButton.setVisibility(0);
                }
                i3 = AndroidUtilities.dp(48.0f);
                layoutParams.rightMargin = AndroidUtilities.dp(47.0f);
            } else {
                if (PhotoViewer.this.exitFullscreenButton.getVisibility() != 4) {
                    PhotoViewer.this.exitFullscreenButton.setVisibility(4);
                }
                layoutParams.rightMargin = AndroidUtilities.dp(12.0f);
                i3 = 0;
            }
            this.ignoreLayout = false;
            super.onMeasure(i, i2);
            if (PhotoViewer.this.videoPlayer != null) {
                videoDuration = PhotoViewer.this.videoPlayer.getDuration();
            } else {
                if (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable()) {
                    videoDuration = PhotoViewer.this.photoViewerWebView.getVideoDuration();
                }
                videoDuration = 0;
            }
            int ceil = (int) Math.ceil(PhotoViewer.this.videoPlayerTime.getPaint().measureText(String.format(Locale.ROOT, "%1$s / %1$s", (videoDuration / 1000) / 60 > 60 ? String.format(Locale.ROOT, "%02d:%02d:%02d", Long.valueOf(j2 / 60), Long.valueOf(j2 % 60), Long.valueOf(j % 60)) : String.format(Locale.ROOT, "%02d:%02d", Long.valueOf(j2), Long.valueOf(j % 60)))));
            this.timeSpring.cancel();
            if (this.lastTimeWidth != 0) {
                float f = ceil;
                if (this.timeValue.getValue() != f) {
                    this.timeSpring.getSpring().setFinalPosition(f);
                    this.timeSpring.start();
                    this.lastTimeWidth = ceil;
                }
            }
            PhotoViewer.this.videoPlayerSeekbar.setSize(((getMeasuredWidth() - AndroidUtilities.dp(16.0f)) - ceil) - i3, getMeasuredHeight());
            this.timeValue.setValue(ceil);
            this.lastTimeWidth = ceil;
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (this.progress < 1.0f) {
                return false;
            }
            if (PhotoViewer.this.videoPlayerSeekbar.onTouch(motionEvent.getAction(), motionEvent.getX() - AndroidUtilities.dp(2.0f), motionEvent.getY())) {
                getParent().requestDisallowInterceptTouchEvent(true);
                PhotoViewer.this.videoPlayerSeekbarView.invalidate();
            }
            return true;
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        public void setProgress(float f) {
            if (this.progress != f) {
                this.progress = f;
                onProgressChanged(f);
            }
        }

        public void setSeekBarTransitionEnabled(boolean z) {
            if (this.seekBarTransitionEnabled != z) {
                this.seekBarTransitionEnabled = z;
                if (z) {
                    setTranslationY(0.0f);
                    PhotoViewer.this.videoPlayerSeekbarView.setAlpha(1.0f);
                } else {
                    PhotoViewer.this.videoPlayerTime.setScaleX(1.0f);
                    PhotoViewer.this.videoPlayerTime.setScaleY(1.0f);
                    PhotoViewer.this.videoPlayerSeekbar.setTransitionProgress(0.0f);
                }
                onProgressChanged(this.progress);
            }
        }

        public void setTranslationYAnimationEnabled(boolean z) {
            if (this.translationYAnimationEnabled != z) {
                this.translationYAnimationEnabled = z;
                if (!z) {
                    setTranslationY(0.0f);
                }
                onProgressChanged(this.progress);
            }
        }
    }

    static {
        VPC_PROGRESS = Build.VERSION.SDK_INT >= 24 ? new FloatProperty("progress") { // from class: org.telegram.ui.PhotoViewer.11
            @Override // android.util.Property
            public Float get(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout) {
                return Float.valueOf(videoPlayerControlFrameLayout.getProgress());
            }

            @Override // android.util.FloatProperty
            public void setValue(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout, float f) {
                videoPlayerControlFrameLayout.setProgress(f);
            }
        } : new Property(Float.class, "progress") { // from class: org.telegram.ui.PhotoViewer.12
            @Override // android.util.Property
            public Float get(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout) {
                return Float.valueOf(videoPlayerControlFrameLayout.getProgress());
            }

            @Override // android.util.Property
            public void set(VideoPlayerControlFrameLayout videoPlayerControlFrameLayout, Float f) {
                videoPlayerControlFrameLayout.setProgress(f.floatValue());
            }
        };
        Instance = null;
        PipInstance = null;
    }

    public PhotoViewer() {
        this.ALLOW_USE_SURFACE = Build.VERSION.SDK_INT >= 30;
        this.maxSelectedPhotos = -1;
        this.allowOrder = true;
        this.miniProgressShowRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda18
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$new$0();
            }
        };
        this.isActionBarVisible = true;
        this.closePhotoAfterSelect = true;
        this.actionBarItemsVisibility = new HashMap(3);
        this.backgroundDrawable = new BackgroundDrawable(-16777216);
        this.blackPaint = new Paint();
        this.photoProgressViews = new PhotoProgressView[3];
        this.onUserLeaveHintListener = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda19
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.onUserLeaveHint();
            }
        };
        this.pressedDrawable = new GradientDrawable[2];
        this.drawPressedDrawable = new boolean[2];
        this.pressedDrawableAlpha = new float[2];
        this.cropTransform = new CropTransform();
        this.leftCropTransform = new CropTransform();
        this.rightCropTransform = new CropTransform();
        this.shiftDp = -8.0f;
        this.bitmapPaint = new Paint(2);
        this.insets = new Rect();
        this.setLoadingRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.1
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (PhotoViewer.this.currentMessageObject == null) {
                    return;
                }
                FileLoader.getInstance(PhotoViewer.this.currentMessageObject.currentAccount).setLoadingVideo(PhotoViewer.this.currentMessageObject.getDocument(), true, false);
            }
        };
        this.hideActionBarRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.2
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying && !ApplicationLoader.mainInterfacePaused) {
                    if (PhotoViewer.this.menuItem == null || !PhotoViewer.this.menuItem.isSubMenuShowing()) {
                        if (PhotoViewer.this.captionScrollView == null || PhotoViewer.this.captionScrollView.getScrollY() == 0) {
                            if (PhotoViewer.this.miniProgressView == null || PhotoViewer.this.miniProgressView.getVisibility() != 0) {
                                PhotoViewer photoViewer = PhotoViewer.PipInstance;
                                PhotoViewer photoViewer2 = PhotoViewer.this;
                                if (photoViewer == photoViewer2) {
                                    return;
                                }
                                photoViewer2.toggleActionBar(false, true);
                            }
                        }
                    }
                }
            }
        };
        this.savedVideoPositions = new ArrayMap();
        this.videoPlayerControlVisible = true;
        this.videoPlayerCurrentTime = new int[2];
        this.videoPlayerTotalTime = new int[2];
        this.fullscreenButton = new ImageView[3];
        this.pipPosition = new int[2];
        this.pipVideoOverlayAnimateFlag = true;
        this.lastImageId = -1;
        this.prevOrientation = -10;
        this.videoPlayerRewinder = new VideoPlayerRewinder() { // from class: org.telegram.ui.PhotoViewer.3
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void onRewindCanceled() {
                PhotoViewer.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                PhotoViewer.this.videoForwardDrawable.setShowing(false);
                PipVideoOverlay.onRewindCanceled();
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void onRewindStart(boolean z) {
                PhotoViewer.this.videoForwardDrawable.setOneShootAnimation(false);
                PhotoViewer.this.videoForwardDrawable.setLeftSide(!z);
                PhotoViewer.this.videoForwardDrawable.setShowing(true);
                PhotoViewer.this.containerView.invalidate();
                PipVideoOverlay.onRewindStart(z);
            }

            @Override // org.telegram.messenger.video.VideoPlayerRewinder
            protected void updateRewindProgressUi(long j, float f, boolean z) {
                PhotoViewer.this.videoForwardDrawable.setTime(Math.abs(j));
                if (z) {
                    PhotoViewer.this.videoPlayerSeekbar.setProgress(f);
                    PhotoViewer.this.videoPlayerSeekbarView.invalidate();
                }
                PipVideoOverlay.onUpdateRewindProgressUi(j, f, z);
            }
        };
        this.FLASH_VIEW_VALUE = new AnimationProperties.FloatProperty("flashViewAlpha") { // from class: org.telegram.ui.PhotoViewer.4
            {
                PhotoViewer.this = this;
            }

            @Override // android.util.Property
            public Float get(View view) {
                return Float.valueOf(view.getAlpha());
            }

            @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
            public void setValue(View view, float f) {
                view.setAlpha(f);
                if (PhotoViewer.this.photoCropView != null) {
                    PhotoViewer.this.photoCropView.setVideoThumbFlashAlpha(f);
                }
            }
        };
        this.updateProgressRunnable = new 5();
        this.switchToInlineRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer.6
            {
                PhotoViewer.this = this;
            }

            @Override // java.lang.Runnable
            public void run() {
                if (PipVideoOverlay.isVisible()) {
                    PipVideoOverlay.dismiss();
                    AndroidUtilities.runOnUIThread(this, 250L);
                    return;
                }
                PhotoViewer.this.switchingInlineMode = false;
                if (PhotoViewer.this.currentBitmap != null) {
                    PhotoViewer.this.currentBitmap.recycle();
                    PhotoViewer.this.currentBitmap = null;
                }
                PhotoViewer.this.changingTextureView = true;
                TextureViewContainer textureViewContainer = new TextureViewContainer(PhotoViewer.this.parentActivity);
                try {
                    if (PhotoViewer.this.usedSurfaceView) {
                        Drawable drawable = PhotoViewer.this.textureImageView.getDrawable();
                        if (drawable instanceof BitmapDrawable) {
                            PhotoViewer.this.currentBitmap = ((BitmapDrawable) drawable).getBitmap();
                        } else {
                            PhotoViewer photoViewer = PhotoViewer.this;
                            photoViewer.currentBitmap = Bitmaps.createBitmap(photoViewer.videoSurfaceView.getWidth(), PhotoViewer.this.videoSurfaceView.getHeight(), Bitmap.Config.ARGB_8888);
                            AndroidUtilities.getBitmapFromSurface(PhotoViewer.this.videoSurfaceView, PhotoViewer.this.currentBitmap);
                        }
                    } else {
                        PhotoViewer photoViewer2 = PhotoViewer.this;
                        photoViewer2.currentBitmap = Bitmaps.createBitmap(photoViewer2.videoTextureView.getWidth(), PhotoViewer.this.videoTextureView.getHeight(), Bitmap.Config.ARGB_8888);
                        PhotoViewer.this.videoTextureView.getBitmap(PhotoViewer.this.currentBitmap);
                    }
                } catch (Throwable th) {
                    if (PhotoViewer.this.currentBitmap != null) {
                        PhotoViewer.this.currentBitmap.recycle();
                        PhotoViewer.this.currentBitmap = null;
                    }
                    FileLog.e(th);
                }
                if (PhotoViewer.this.currentBitmap != null) {
                    if (PhotoViewer.this.textureImageView != null) {
                        PhotoViewer.this.textureImageView.setVisibility(0);
                        PhotoViewer.this.textureImageView.setImageBitmap(PhotoViewer.this.currentBitmap);
                    }
                    textureViewContainer.imageReceiver.setImageBitmap(PhotoViewer.this.currentBitmap);
                }
                PhotoViewer.this.isInline = true;
                PhotoViewer.this.changedTextureView = textureViewContainer.textureView;
                if (PipVideoOverlay.show(false, PhotoViewer.this.parentActivity, textureViewContainer, PhotoViewer.this.videoWidth, PhotoViewer.this.videoHeight, PhotoViewer.this.pipVideoOverlayAnimateFlag)) {
                    PipVideoOverlay.setPhotoViewer(PhotoViewer.this);
                }
                PhotoViewer.this.pipVideoOverlayAnimateFlag = true;
                if (!PhotoViewer.this.usedSurfaceView) {
                    PhotoViewer.this.changedTextureView.setVisibility(4);
                    if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                        PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoTextureView);
                        PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoSurfaceView);
                        return;
                    }
                    return;
                }
                if (PhotoViewer.this.aspectRatioFrameLayout != null) {
                    PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoTextureView);
                    PhotoViewer.this.aspectRatioFrameLayout.removeView(PhotoViewer.this.videoSurfaceView);
                }
                PhotoViewer.this.videoPlayer.setSurfaceView(null);
                PhotoViewer.this.videoPlayer.setTextureView(null);
                PhotoViewer.this.videoPlayer.play();
                PhotoViewer.this.videoPlayer.setTextureView(PhotoViewer.this.changedTextureView);
                PhotoViewer.this.checkChangedTextureView(true);
                PhotoViewer.this.changedTextureView.setVisibility(0);
            }
        };
        this.surfaceTextureListener = new TextureView.SurfaceTextureListener() { // from class: org.telegram.ui.PhotoViewer.7
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i2) {
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
                if (PhotoViewer.this.videoTextureView != null && PhotoViewer.this.changingTextureView) {
                    if (PhotoViewer.this.switchingInlineMode) {
                        PhotoViewer.this.waitingForFirstTextureUpload = 2;
                    }
                    PhotoViewer.this.videoTextureView.setSurfaceTexture(surfaceTexture);
                    PhotoViewer.this.videoTextureView.setVisibility(0);
                    PhotoViewer.this.changingTextureView = false;
                    PhotoViewer.this.containerView.invalidate();
                    return false;
                }
                return true;
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i2) {
            }

            @Override // android.view.TextureView.SurfaceTextureListener
            public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
                if (PhotoViewer.this.waitingForFirstTextureUpload == 1) {
                    PhotoViewer.this.checkChangedTextureView(true);
                }
            }
        };
        this.animationValues = (float[][]) Array.newInstance(Float.TYPE, 2, 13);
        this.updateContainerFlagsRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$new$5();
            }
        };
        this.leftImage = new ImageReceiver();
        this.centerImage = new ImageReceiver() { // from class: org.telegram.ui.PhotoViewer.10
            {
                PhotoViewer.this = this;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.messenger.ImageReceiver
            public boolean setImageBitmapByKey(Drawable drawable, String str, int i, boolean z, int i2) {
                boolean imageBitmapByKey = super.setImageBitmapByKey(drawable, str, i, z, i2);
                PhotoViewer.this.prepareSegmentImage();
                return imageBitmapByKey;
            }
        };
        this.rightImage = new ImageReceiver();
        this.leftBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda21(this));
        this.centerBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda21(this));
        this.rightBlur = new BlurringShader.ThumbBlurer(1, new PhotoViewer$$ExternalSyntheticLambda21(this));
        this.centerImageTransformLocked = false;
        this.centerImageTransform = new Matrix();
        this.videoFrameBitmapPaint = new Paint();
        this.videoFrameBitmap = null;
        this.editState = new EditState();
        this.currentFileNames = new String[3];
        this.endReached = new boolean[]{false, true};
        this.startReached = false;
        this.scale = 1.0f;
        this.rotate = 0.0f;
        this.mirror = 0.0f;
        this.switchingToMode = -1;
        this.interpolator = new DecelerateInterpolator(1.5f);
        this.pinchStartScale = 1.0f;
        this.pinchStartRotate = 0.0f;
        this.canZoom = true;
        this.canDragDown = true;
        this.shownControlsByEnd = false;
        this.actionBarWasShownBeforeByEnd = false;
        this.imagesArrTemp = new ArrayList();
        this.imagesByIdsTemp = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.imagesArr = new ArrayList();
        this.imagesByIds = new SparseArray[]{new SparseArray(), new SparseArray()};
        this.imagesArrLocations = new ArrayList();
        this.imagesArrLocationsVideo = new ArrayList();
        this.imagesArrLocationsSizes = new ArrayList();
        this.imagesArrMessages = new ArrayList();
        this.secureDocuments = new ArrayList();
        this.avatarsArr = new ArrayList();
        this.imagesArrLocals = new ArrayList();
        this.currentAvatarLocation = null;
        this.savedState = null;
        this.hitRect = new Rect();
        this.transitionNotificationLocker = new AnimationNotificationsLocker(new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.mediaCountDidLoad, NotificationCenter.mediaDidLoad, NotificationCenter.dialogPhotosUpdate});
        this.longPressRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.onLongPress();
            }
        };
        this.tempInt = new int[2];
        this.captureFrameAtTime = -1L;
        this.captureFrameReadyAtTime = -1L;
        this.needCaptureFrameReadyAtTime = -1L;
        this.compressionsCount = -1;
        this.blurAlpha = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda21(this), 180L, CubicBezierInterpolator.EASE_OUT);
        this.blackPaint.setColor(-16777216);
        this.videoFrameBitmapPaint.setColor(-1);
        this.centerImage.setFileLoadingPriority(3);
    }

    public static boolean BLUR_RENDERNODE() {
        return Build.VERSION.SDK_INT >= 31 && SharedConfig.useNewBlur && SharedConfig.getDevicePerformanceClass() >= 2 && !AndroidUtilities.makingGlobalBlurBitmap;
    }

    public static /* synthetic */ void access$16800(PhotoViewer photoViewer) {
        photoViewer.updateCaptionTranslated();
    }

    private void animateTo(float f, float f2, float f3, boolean z) {
        animateTo(f, f2, f3, z, NotificationCenter.liveLocationsChanged);
    }

    private void animateTo(float f, float f2, float f3, boolean z, int i) {
        if (this.scale == f && this.translationX == f2 && this.translationY == f3) {
            return;
        }
        this.zoomAnimation = z;
        this.animateToScale = f;
        this.animateToX = f2;
        this.animateToY = f3;
        this.animationStartTime = System.currentTimeMillis();
        AnimatorSet animatorSet = new AnimatorSet();
        this.imageMoveAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
        this.imageMoveAnimation.setInterpolator(this.interpolator);
        this.imageMoveAnimation.setDuration(i);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.75
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.imageMoveAnimation = null;
                PhotoViewer.this.containerView.invalidate();
            }
        });
        this.imageMoveAnimation.start();
    }

    /* JADX WARN: Removed duplicated region for block: B:75:0x0089  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public CharSequence applyCaption() {
        int i;
        PhotoViewerProvider photoViewerProvider;
        MediaController.MediaEditState mediaEditState;
        if (!isVisible() || this.placeProvider == null || (i = this.currentIndex) < 0 || i >= this.imagesArrLocals.size()) {
            return null;
        }
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        CharSequence text = this.captionEdit.getText();
        CharSequence[] charSequenceArr = {text};
        if (this.hasCaptionForAllMedia && !TextUtils.equals(this.captionForAllMedia, text) && this.placeProvider.getPhotoIndex(this.currentIndex) != 0 && this.placeProvider.getSelectedCount() > 0) {
            this.hasCaptionForAllMedia = false;
        }
        ArrayList<TLRPC.MessageEntity> entities = MediaDataController.getInstance(this.currentAccount).getEntities(charSequenceArr, supportsSendingNewEntities());
        CharSequence charSequence = charSequenceArr[0];
        this.captionForAllMedia = charSequence;
        if (!(obj instanceof MediaController.PhotoEntry)) {
            if (obj instanceof MediaController.SearchImage) {
                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                searchImage.caption = charSequence;
                mediaEditState = searchImage;
            }
            if (text.length() != 0 && !this.placeProvider.isPhotoChecked(this.currentIndex)) {
                setPhotoChecked();
            }
            photoViewerProvider = this.placeProvider;
            if (photoViewerProvider != null) {
                photoViewerProvider.onApplyCaption(text);
            }
            return text;
        }
        MediaController.MediaEditState mediaEditState2 = (MediaController.PhotoEntry) obj;
        mediaEditState2.caption = charSequence;
        mediaEditState = mediaEditState2;
        mediaEditState.entities = entities;
        if (text.length() != 0) {
            setPhotoChecked();
        }
        photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
        }
        return text;
    }

    /* JADX WARN: Removed duplicated region for block: B:134:0x0099  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x011d  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0171  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int[] applyCrop(Canvas canvas, int i, int i2, int i3, int i4, float f, CropTransform cropTransform, MediaController.CropState cropState) {
        float f2;
        int i5;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        float f9;
        float minScale;
        int i6;
        float rotation;
        float f10 = i;
        int i7 = i3;
        float f11 = i7;
        float f12 = f10 / f11;
        float f13 = i2;
        int i8 = i4;
        float f14 = i8;
        float f15 = f13 / f14;
        float min = Math.min(f12, f15);
        int orientation = cropTransform.getOrientation();
        if (orientation != 90 && orientation != 270) {
            i8 = i7;
            i7 = i8;
        }
        if (this.sendPhotoType == 1 || (this.currentEditMode != 3 && this.switchingToMode != 3)) {
            if (this.imageMoveAnimation == null || (i5 = this.switchingToMode) == -1) {
                int i9 = this.currentEditMode;
                if (i9 == 2 || i9 == 3) {
                    f2 = 0.0f;
                }
            } else {
                int i10 = this.currentEditMode;
                if (i10 != 1 && i5 != 1 && ((i10 != 2 && i10 != 3) || i5 != -1)) {
                    f2 = i5 == 0 ? this.animationValue : 1.0f - this.animationValue;
                }
            }
            float cropPw = cropTransform.getCropPw();
            float cropPh = cropTransform.getCropPh();
            float f16 = i8;
            f3 = 1.0f - f2;
            int i11 = (int) ((cropPw + ((1.0f - cropPw) * f3)) * f16);
            f4 = i7;
            int i12 = (int) ((cropPh + ((1.0f - cropPh) * f3)) * f4);
            f5 = i11;
            f6 = f10 / f5;
            f7 = i12;
            if (f6 * f7 > f13) {
                f6 = f13 / f7;
            }
            if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && cropState != null)) {
                float f17 = f5 * f6;
                float f18 = f7 * f6;
                if (f12 * f14 > f13) {
                    f12 = f15;
                }
                float f19 = f17 + ((((f11 * f12) / f) - f17) * f3);
                float f20 = f18 + ((((f14 * f12) / f) - f18) * f3);
                canvas.clipRect((-f19) / 2.0f, (-f20) / 2.0f, f19 / 2.0f, f20 / 2.0f);
            }
            if (this.sendPhotoType != 1 || cropTransform.hasViewTransform()) {
                if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                    float scale = cropTransform.getScale() / (((cropTransform.getTrueCropScale() - 1.0f) * f3) + 1.0f);
                    f8 = f10 / f16;
                    if (f8 * f4 > f13) {
                        f8 = f13 / f4;
                    }
                    f9 = (f8 / min) * scale;
                    if (this.sendPhotoType == 1) {
                        if (this.currentEditMode == 3 || (i6 = this.switchingToMode) == 3) {
                            minScale = ((cropTransform.getMinScale() - 1.0f) * f3) + 1.0f;
                        } else if (i6 == 0) {
                            minScale = cropTransform.getMinScale();
                        }
                        f9 /= minScale;
                    }
                } else {
                    float f21 = cropState != null ? cropState.cropScale : 1.0f;
                    f9 = f21 * ((f6 / min) / (((f21 - 1.0f) * f3) + 1.0f));
                }
                canvas.translate(cropTransform.getCropAreaX() * f2, cropTransform.getCropAreaY() * f2);
                canvas.scale(f9, f9);
                canvas.translate(cropTransform.getCropPx() * f16 * min * f2, cropTransform.getCropPy() * f4 * min * f2);
                rotation = cropTransform.getRotation() + orientation;
                if (rotation > 180.0f) {
                    rotation -= 360.0f;
                }
                if (this.sendPhotoType == 1 || (this.currentEditMode != 3 && this.switchingToMode != 3)) {
                    rotation *= f2;
                }
                canvas.rotate(rotation);
            }
            int[] iArr = this.tempInt;
            iArr[0] = i11;
            iArr[1] = i12;
            return iArr;
        }
        f2 = 1.0f;
        float cropPw2 = cropTransform.getCropPw();
        float cropPh2 = cropTransform.getCropPh();
        float f162 = i8;
        f3 = 1.0f - f2;
        int i112 = (int) ((cropPw2 + ((1.0f - cropPw2) * f3)) * f162);
        f4 = i7;
        int i122 = (int) ((cropPh2 + ((1.0f - cropPh2) * f3)) * f4);
        f5 = i112;
        f6 = f10 / f5;
        f7 = i122;
        if (f6 * f7 > f13) {
        }
        if (this.sendPhotoType != 1) {
            float f172 = f5 * f6;
            float f182 = f7 * f6;
            if (f12 * f14 > f13) {
            }
            float f192 = f172 + ((((f11 * f12) / f) - f172) * f3);
            float f202 = f182 + ((((f14 * f12) / f) - f182) * f3);
            canvas.clipRect((-f192) / 2.0f, (-f202) / 2.0f, f192 / 2.0f, f202 / 2.0f);
        }
        if (this.sendPhotoType != 1) {
        }
        if (this.currentEditMode != 1) {
        }
        float scale2 = cropTransform.getScale() / (((cropTransform.getTrueCropScale() - 1.0f) * f3) + 1.0f);
        f8 = f10 / f162;
        if (f8 * f4 > f13) {
        }
        f9 = (f8 / min) * scale2;
        if (this.sendPhotoType == 1) {
        }
        canvas.translate(cropTransform.getCropAreaX() * f2, cropTransform.getCropAreaY() * f2);
        canvas.scale(f9, f9);
        canvas.translate(cropTransform.getCropPx() * f162 * min * f2, cropTransform.getCropPy() * f4 * min * f2);
        rotation = cropTransform.getRotation() + orientation;
        if (rotation > 180.0f) {
        }
        if (this.sendPhotoType == 1) {
        }
        rotation *= f2;
        canvas.rotate(rotation);
        int[] iArr2 = this.tempInt;
        iArr2[0] = i112;
        iArr2[1] = i122;
        return iArr2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:364:0x0187 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:365:0x0188  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x030b  */
    /* JADX WARN: Removed duplicated region for block: B:503:0x0588  */
    /* JADX WARN: Removed duplicated region for block: B:582:0x07a9  */
    /* JADX WARN: Removed duplicated region for block: B:585:0x07b0  */
    /* JADX WARN: Type inference failed for: r15v1 */
    /* JADX WARN: Type inference failed for: r15v10 */
    /* JADX WARN: Type inference failed for: r15v11 */
    /* JADX WARN: Type inference failed for: r15v12 */
    /* JADX WARN: Type inference failed for: r15v13 */
    /* JADX WARN: Type inference failed for: r15v14 */
    /* JADX WARN: Type inference failed for: r15v15 */
    /* JADX WARN: Type inference failed for: r15v16 */
    /* JADX WARN: Type inference failed for: r15v17 */
    /* JADX WARN: Type inference failed for: r15v18 */
    /* JADX WARN: Type inference failed for: r15v19 */
    /* JADX WARN: Type inference failed for: r15v2, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r15v22 */
    /* JADX WARN: Type inference failed for: r15v23 */
    /* JADX WARN: Type inference failed for: r15v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void applyCurrentEditMode() {
        Bitmap bitmap;
        int[] iArr;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList;
        MediaController.SavedFilterState savedFilterState;
        Bitmap createVideoThumbnailAtTime;
        boolean z;
        List<TLRPC.InputDocument> list;
        MediaController.SavedFilterState savedFilterState2;
        ?? r15;
        ImageView imageView;
        PorterDuffColorFilter porterDuffColorFilter;
        int i;
        PhotoViewerProvider photoViewerProvider;
        int i2;
        Bitmap bitmap2;
        boolean z2;
        Bitmap bitmap3;
        boolean z3;
        Bitmap createBitmap;
        long j;
        int[] iArr2;
        Bitmap loadBitmap;
        int bitmapWidth;
        int bitmapHeight;
        Bitmap bitmap4;
        Bitmap bitmap5;
        boolean z4;
        boolean z5;
        Bitmap createCroppedBitmap;
        boolean z6;
        MediaController.SavedFilterState savedFilterState3;
        int i3;
        int i4;
        int i5 = this.currentIndex;
        if (i5 < 0 || i5 >= this.imagesArrLocals.size() || !(this.imagesArrLocals.get(this.currentIndex) instanceof MediaController.MediaEditState)) {
            return;
        }
        Bitmap[] bitmapArr = new Bitmap[1];
        MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        int i6 = this.currentEditMode;
        if (i6 == 1 || (i6 == 0 && this.sendPhotoType == 1)) {
            this.photoCropView.makeCrop(mediaEditState);
            if (mediaEditState.cropState == null && this.currentEditMode != 1) {
                return;
            }
            if (this.isCurrentVideo) {
                if (!TextUtils.isEmpty(mediaEditState.filterPath)) {
                    createVideoThumbnailAtTime = ImageLoader.loadBitmap(mediaEditState.filterPath, null, 512.0f, 512.0f, true);
                } else if (this.sendPhotoType == 1) {
                    iArr = new int[1];
                    bitmap = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.avatarStartTime / 1000, iArr, true);
                } else {
                    createVideoThumbnailAtTime = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.videoTimelineView.getLeftProgress() * ((float) this.videoPlayer.getDuration()) * 1000.0f);
                }
                bitmap = createVideoThumbnailAtTime;
                iArr = null;
                arrayList = null;
                MediaController.SavedFilterState savedFilterState4 = arrayList;
                savedFilterState = savedFilterState4;
                savedFilterState3 = savedFilterState4;
            } else {
                bitmap = this.centerImage.getBitmap();
                iArr = new int[]{this.centerImage.getOrientation(), this.centerImage.getInvert()};
            }
            arrayList = null;
            MediaController.SavedFilterState savedFilterState42 = arrayList;
            savedFilterState = savedFilterState42;
            savedFilterState3 = savedFilterState42;
        } else if (i6 == 2) {
            bitmap = this.stickerMakerView.cutSegmentInFilteredBitmap(this.photoFilterView.getBitmap(), this.centerImage.getOrientation());
            savedFilterState = this.photoFilterView.getSavedFilterState();
            iArr = null;
            arrayList = null;
            savedFilterState3 = null;
        } else if (i6 == 3) {
            int i7 = this.sendPhotoType;
            ArrayList<VideoEditedInfo.MediaEntity> arrayList2 = (i7 == 0 || i7 == 1 || i7 == 11 || i7 == 2) ? new ArrayList<>() : null;
            boolean hasChanges = this.photoPaintView.hasChanges();
            Bitmap bitmap6 = this.photoPaintView.getBitmap(arrayList2, bitmapArr);
            List<TLRPC.InputDocument> masks = this.photoPaintView.getMasks();
            this.photoPaintView.onCleanupEntities();
            z = hasChanges;
            list = masks;
            arrayList = arrayList2;
            bitmap = bitmap6;
            iArr = null;
            savedFilterState = null;
            if (bitmap != null) {
                return;
            }
            if (mediaEditState.thumbPath != null) {
                new File(mediaEditState.thumbPath).delete();
                mediaEditState.thumbPath = null;
            }
            if (mediaEditState.imagePath != null) {
                new File(mediaEditState.imagePath).delete();
                mediaEditState.imagePath = null;
            }
            int i8 = this.currentEditMode;
            if (i8 == 1 || (i8 == 0 && this.sendPhotoType == 1)) {
                savedFilterState2 = savedFilterState;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                EditState editState = this.editState;
                MediaController.CropState cropState = mediaEditState.cropState;
                editState.cropState = cropState;
                editState.croppedPaintPath = mediaEditState.croppedPaintPath;
                editState.croppedMediaEntities = mediaEditState.croppedMediaEntities;
                if (cropState != null) {
                    Bitmap createCroppedBitmap2 = createCroppedBitmap(bitmap, cropState, iArr, true);
                    if (mediaEditState.paintPath != null) {
                        Bitmap decodeFile = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                        Bitmap createCroppedBitmap3 = createCroppedBitmap(decodeFile, mediaEditState.cropState, null, false);
                        if (!this.isCurrentVideo) {
                            if (hasAnimatedMediaEntities()) {
                                String file = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                                this.currentImagePath = file;
                                mediaEditState.imagePath = file;
                            } else {
                                String tempFileAbsolutePath = getTempFileAbsolutePath();
                                mediaEditState.imagePath = tempFileAbsolutePath;
                                mergeImages(tempFileAbsolutePath, null, createCroppedBitmap3, createCroppedBitmap2, AndroidUtilities.getPhotoSize(), true);
                            }
                        }
                        String tempFileAbsolutePath2 = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath2;
                        mergeImages(tempFileAbsolutePath2, null, createCroppedBitmap3, createCroppedBitmap2, 512.0f, true);
                        if (createCroppedBitmap3 != null) {
                            createCroppedBitmap3.recycle();
                        }
                        if (decodeFile != null) {
                            decodeFile.recycle();
                        }
                    } else {
                        if (!this.isCurrentVideo) {
                            String file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file2;
                            mediaEditState.imagePath = file2;
                        }
                        mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap2, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                    }
                    if (this.currentEditMode == 0 && this.isCurrentVideo) {
                        bitmap.recycle();
                        bitmap = createCroppedBitmap2;
                    }
                }
            } else if (i8 == 2) {
                if (mediaEditState.filterPath != null) {
                    new File(mediaEditState.filterPath).delete();
                }
                mediaEditState.filterPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                MediaController.CropState cropState2 = mediaEditState.cropState;
                Bitmap createCroppedBitmap4 = cropState2 != null ? createCroppedBitmap(bitmap, cropState2, null, true) : bitmap;
                String str = mediaEditState.paintPath;
                if (str == null) {
                    if (!this.isCurrentVideo) {
                        String file3 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                        this.currentImagePath = file3;
                        mediaEditState.imagePath = file3;
                    }
                    mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), 512.0f, 512.0f, 83, false, 101, 101), true).toString();
                    savedFilterState2 = savedFilterState;
                    z6 = false;
                } else {
                    String str2 = mediaEditState.fullPaintPath;
                    Bitmap thumb = str.equals(str2) ? this.paintingOverlay.getThumb() : null;
                    MediaController.CropState cropState3 = mediaEditState.cropState;
                    if (cropState3 != null) {
                        if (thumb == null) {
                            Bitmap decodeFile2 = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                            Bitmap createCroppedBitmap5 = createCroppedBitmap(decodeFile2, mediaEditState.cropState, null, false);
                            decodeFile2.recycle();
                            createCroppedBitmap = createCroppedBitmap5;
                        } else {
                            createCroppedBitmap = createCroppedBitmap(thumb, cropState3, null, false);
                        }
                        bitmap5 = createCroppedBitmap;
                        z4 = true;
                    } else {
                        bitmap5 = thumb;
                        z4 = false;
                    }
                    if (!this.isCurrentVideo) {
                        if (hasAnimatedMediaEntities()) {
                            String file4 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createCroppedBitmap4, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file4;
                            mediaEditState.imagePath = file4;
                        } else {
                            String tempFileAbsolutePath3 = getTempFileAbsolutePath();
                            mediaEditState.imagePath = tempFileAbsolutePath3;
                            savedFilterState2 = savedFilterState;
                            z5 = false;
                            mergeImages(tempFileAbsolutePath3, str2, bitmap5, createCroppedBitmap4, AndroidUtilities.getPhotoSize(), true);
                            String tempFileAbsolutePath4 = getTempFileAbsolutePath();
                            mediaEditState.thumbPath = tempFileAbsolutePath4;
                            mergeImages(tempFileAbsolutePath4, str2, bitmap5, createCroppedBitmap4, 512.0f, true);
                            z6 = z5;
                            if (z4) {
                                bitmap5.recycle();
                                z6 = z5;
                            }
                        }
                    }
                    savedFilterState2 = savedFilterState;
                    z5 = false;
                    String tempFileAbsolutePath42 = getTempFileAbsolutePath();
                    mediaEditState.thumbPath = tempFileAbsolutePath42;
                    mergeImages(tempFileAbsolutePath42, str2, bitmap5, createCroppedBitmap4, 512.0f, true);
                    z6 = z5;
                    if (z4) {
                    }
                }
                r15 = z6;
                if (mediaEditState.cropState != null) {
                    createCroppedBitmap4.recycle();
                    r15 = z6;
                }
            } else {
                savedFilterState2 = savedFilterState;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                r15 = 0;
                if (i8 == 3) {
                    if (mediaEditState.paintPath != null) {
                        new File(mediaEditState.paintPath).delete();
                        if (!mediaEditState.paintPath.equals(mediaEditState.fullPaintPath)) {
                            new File(mediaEditState.fullPaintPath).delete();
                        }
                    }
                    Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.PNG;
                    TLRPC.PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(bitmap, compressFormat, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101);
                    mediaEditState.stickers = list != null ? new ArrayList<>(list) : null;
                    EditState editState2 = this.editState;
                    String file5 = FileLoader.getInstance(this.currentAccount).getPathToAttach(scaleAndSaveImage, true).toString();
                    editState2.paintPath = file5;
                    mediaEditState.paintPath = file5;
                    PaintingOverlay paintingOverlay = this.paintingOverlay;
                    EditState editState3 = this.editState;
                    ArrayList<VideoEditedInfo.MediaEntity> arrayList3 = (arrayList == null || arrayList.isEmpty()) ? null : arrayList;
                    editState3.mediaEntities = arrayList3;
                    mediaEditState.mediaEntities = arrayList3;
                    paintingOverlay.setEntities(arrayList3, this.isCurrentVideo, true, this.sendPhotoType != 11);
                    EditState editState4 = this.editState;
                    long lcm = this.photoPaintView.getLcm();
                    editState4.averageDuration = lcm;
                    mediaEditState.averageDuration = lcm;
                    mediaEditState.fullPaintPath = (mediaEditState.mediaEntities == null || (bitmap4 = bitmapArr[0]) == null) ? mediaEditState.paintPath : FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap4, compressFormat, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                    this.paintingOverlay.setBitmap(bitmap);
                    MediaController.CropState cropState4 = mediaEditState.cropState;
                    if (cropState4 != null && cropState4.initied) {
                        String copy = CropView.getCopy(this.editState.paintPath);
                        if (this.editState.croppedPaintPath != null) {
                            new File(this.editState.croppedPaintPath).delete();
                            this.editState.croppedPaintPath = null;
                        }
                        EditState editState5 = this.editState;
                        editState5.croppedPaintPath = copy;
                        ArrayList arrayList4 = editState5.mediaEntities;
                        if (arrayList4 == null || arrayList4.isEmpty()) {
                            this.editState.croppedMediaEntities = null;
                        } else {
                            this.editState.croppedMediaEntities = new ArrayList(this.editState.mediaEntities.size());
                            int size = this.editState.mediaEntities.size();
                            for (int i9 = 0; i9 < size; i9++) {
                                EditState editState6 = this.editState;
                                editState6.croppedMediaEntities.add(((VideoEditedInfo.MediaEntity) editState6.mediaEntities.get(i9)).copy());
                            }
                        }
                        MediaController.CropState cropState5 = mediaEditState.cropState;
                        Bitmap createBitmap2 = Bitmap.createBitmap(cropState5.width, cropState5.height, Bitmap.Config.ARGB_8888);
                        Canvas canvas = new Canvas(createBitmap2);
                        if (this.isCurrentVideo) {
                            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) this.videoTextureView;
                            int videoWidth = videoEditTextureView.getVideoWidth();
                            bitmapHeight = videoEditTextureView.getVideoHeight();
                            bitmapWidth = videoWidth;
                        } else {
                            bitmapWidth = this.centerImage.getBitmapWidth();
                            bitmapHeight = this.centerImage.getBitmapHeight();
                        }
                        Activity activity = this.parentActivity;
                        Bitmap.CompressFormat compressFormat2 = Bitmap.CompressFormat.PNG;
                        MediaController.CropState cropState6 = mediaEditState.cropState;
                        CropView.editBitmap(activity, copy, null, canvas, createBitmap2, compressFormat2, cropState6.matrix, bitmapWidth, bitmapHeight, cropState6.stateScale, cropState6.cropRotate, cropState6.transformRotation, cropState6.scale, false, this.editState.croppedMediaEntities, false);
                        createBitmap2.recycle();
                        EditState editState7 = this.editState;
                        mediaEditState.croppedPaintPath = editState7.croppedPaintPath;
                        mediaEditState.croppedMediaEntities = editState7.croppedMediaEntities;
                    }
                    Bitmap bitmap7 = bitmapArr[0];
                    if (bitmap7 == null) {
                        bitmap7 = bitmap;
                    }
                    MediaController.CropState cropState7 = mediaEditState.cropState;
                    if (cropState7 == null || !cropState7.initied) {
                        bitmap2 = bitmap7;
                        z2 = false;
                    } else {
                        bitmap2 = createCroppedBitmap(bitmap7, cropState7, null, false);
                        z2 = true;
                    }
                    if (this.isCurrentVideo) {
                        String str3 = mediaEditState.filterPath;
                        if (str3 == null) {
                            loadBitmap = SendMessagesHelper.createVideoThumbnailAtTime(mediaEditState.getPath(), this.videoTimelineView.getLeftProgress() * ((float) this.videoPlayer.getDuration()) * 1000.0f);
                            iArr2 = null;
                        } else {
                            iArr2 = null;
                            loadBitmap = ImageLoader.loadBitmap(str3, null, 512.0f, 512.0f, true);
                        }
                        MediaController.CropState cropState8 = mediaEditState.cropState;
                        createBitmap = cropState8 != null ? createCroppedBitmap(loadBitmap, cropState8, iArr2, true) : loadBitmap;
                        if (mediaEditState.cropState != null) {
                            loadBitmap.recycle();
                        }
                    } else {
                        int[] iArr3 = {this.centerImage.getOrientation(), this.centerImage.getInvert()};
                        if (mediaEditState.cropState != null) {
                            createBitmap = createCroppedBitmap(this.centerImage.getBitmap(), mediaEditState.cropState, iArr3, true);
                        } else {
                            Bitmap bitmap8 = this.centerImage.getBitmap();
                            if (iArr3[0] != 0) {
                                Matrix matrix = new Matrix();
                                matrix.postRotate(iArr3[0]);
                                int i10 = iArr3[1];
                                if (i10 == 1) {
                                    matrix.postScale(-1.0f, 1.0f);
                                } else if (i10 == 2) {
                                    matrix.postScale(1.0f, -1.0f);
                                }
                                createBitmap = Bitmaps.createBitmap(bitmap8, 0, 0, bitmap8.getWidth(), bitmap8.getHeight(), matrix, true);
                            } else {
                                bitmap3 = bitmap8;
                                z3 = false;
                                if (!this.isCurrentVideo) {
                                    if (hasAnimatedMediaEntities()) {
                                        String file6 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap3, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                                        this.currentImagePath = file6;
                                        mediaEditState.imagePath = file6;
                                    } else {
                                        String tempFileAbsolutePath5 = getTempFileAbsolutePath();
                                        mediaEditState.imagePath = tempFileAbsolutePath5;
                                        mergeImages(tempFileAbsolutePath5, null, bitmap3, bitmap2, AndroidUtilities.getPhotoSize(), false);
                                    }
                                }
                                String tempFileAbsolutePath6 = getTempFileAbsolutePath();
                                mediaEditState.thumbPath = tempFileAbsolutePath6;
                                mergeImages(tempFileAbsolutePath6, null, bitmap3, bitmap2, 512.0f, false);
                                if (z2 && bitmap2 != null) {
                                    bitmap2.recycle();
                                }
                                if (z3 && bitmap3 != null) {
                                    bitmap3.recycle();
                                }
                                if (this.sendPhotoType == 1 && this.videoPlayer != null && this.isCurrentVideo && getAnimatedMediaEntitiesCount(false) == 1 && this.videoTimelineView.getLeftProgress() <= 0.0f && this.videoTimelineView.getRightProgress() >= 1.0f) {
                                    j = mediaEditState.averageDuration;
                                    long duration = this.videoPlayer.getDuration();
                                    while (j < 3000 && j < duration) {
                                        j += mediaEditState.averageDuration;
                                    }
                                    this.videoTimelineView.setRightProgress(Math.min(1.0f, ((float) j) / ((float) duration)));
                                }
                            }
                        }
                    }
                    bitmap3 = createBitmap;
                    z3 = true;
                    if (!this.isCurrentVideo) {
                    }
                    String tempFileAbsolutePath62 = getTempFileAbsolutePath();
                    mediaEditState.thumbPath = tempFileAbsolutePath62;
                    mergeImages(tempFileAbsolutePath62, null, bitmap3, bitmap2, 512.0f, false);
                    if (z2) {
                        bitmap2.recycle();
                    }
                    if (z3) {
                        bitmap3.recycle();
                    }
                    if (this.sendPhotoType == 1) {
                        j = mediaEditState.averageDuration;
                        long duration2 = this.videoPlayer.getDuration();
                        while (j < 3000) {
                            j += mediaEditState.averageDuration;
                        }
                        this.videoTimelineView.setRightProgress(Math.min(1.0f, ((float) j) / ((float) duration2)));
                    }
                }
            }
            SharedConfig.saveConfig();
            MediaController.SavedFilterState savedFilterState5 = savedFilterState2;
            if (savedFilterState5 != null) {
                this.editState.savedFilterState = savedFilterState5;
                mediaEditState.savedFilterState = savedFilterState5;
            }
            int i11 = this.currentEditMode;
            if (i11 == 1) {
                mediaEditState.isCropped = true;
                imageView = this.cropItem;
                porterDuffColorFilter = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
            } else if (i11 != 2) {
                if (i11 == 3) {
                    if (z) {
                        mediaEditState.isPainted = true;
                        imageView = this.paintItem;
                        porterDuffColorFilter = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                    } else if (this.sendPhotoType == 11) {
                        mediaEditState.isPainted = true;
                    }
                }
                i = this.sendPhotoType;
                if ((i != 0 || i == 4) && (photoViewerProvider = this.placeProvider) != null) {
                    photoViewerProvider.updatePhotoAtIndex(this.currentIndex);
                    if (!this.placeProvider.isPhotoChecked(this.currentIndex)) {
                        setPhotoChecked();
                    }
                }
                if (this.currentEditMode == 1) {
                    this.scale = Math.max(this.photoCropView.getRectSizeX() / getContainerViewWidth(), this.photoCropView.getRectSizeY() / getContainerViewHeight());
                    this.translationX = (this.photoCropView.getRectX() + (this.photoCropView.getRectSizeX() / 2.0f)) - (getContainerViewWidth() / 2);
                    this.translationY = (this.photoCropView.getRectY() + (this.photoCropView.getRectSizeY() / 2.0f)) - (getContainerViewHeight() / 2);
                    this.zoomAnimation = true;
                    this.applying = true;
                    this.photoCropView.onDisappear();
                }
                this.centerImage.setParentView(null);
                this.ignoreDidSetImage = true;
                if (!this.isCurrentVideo ? this.currentEditMode == 2 : !((i2 = this.currentEditMode) != 1 && (i2 != 0 || this.sendPhotoType != 1))) {
                    this.centerImage.setImageBitmap(bitmap);
                    this.centerImage.setOrientation(r15, true);
                    this.centerBlur.destroy();
                    this.containerView.requestLayout();
                }
                this.ignoreDidSetImage = r15;
                this.centerImage.setParentView(this.containerView);
                return;
            } else {
                mediaEditState.isFiltered = true;
                imageView = this.tuneItem;
                porterDuffColorFilter = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
            }
            imageView.setColorFilter(porterDuffColorFilter);
            i = this.sendPhotoType;
            if (i != 0) {
            }
            photoViewerProvider.updatePhotoAtIndex(this.currentIndex);
            if (!this.placeProvider.isPhotoChecked(this.currentIndex)) {
            }
            if (this.currentEditMode == 1) {
            }
            this.centerImage.setParentView(null);
            this.ignoreDidSetImage = true;
            if (!this.isCurrentVideo) {
                this.centerImage.setImageBitmap(bitmap);
                this.centerImage.setOrientation(r15, true);
                this.centerBlur.destroy();
                this.containerView.requestLayout();
            }
            this.ignoreDidSetImage = r15;
            this.centerImage.setParentView(this.containerView);
            return;
        } else if (i6 == 4) {
            Bitmap bitmap9 = this.maskPaintView.getBitmap();
            this.centerImage.setImageBitmap(bitmap9);
            lambda$setParentActivity$20(bitmap9);
            this.eraseBtn.setActive(false, true);
            this.restoreBtn.setActive(false, true);
            if (this.stickerMakerView != null) {
                int orientation = this.centerImage.getOrientation();
                StickerMakerView stickerMakerView = this.stickerMakerView;
                int i12 = orientation - stickerMakerView.orientation;
                if (i12 == 0) {
                    stickerMakerView.updateOutlinePath(bitmap9);
                    return;
                }
                int width = bitmap9.getWidth();
                int height = bitmap9.getHeight();
                if ((i12 / 90) % 2 != 0) {
                    i4 = width;
                    i3 = height;
                } else {
                    i3 = width;
                    i4 = height;
                }
                Bitmap createBitmap3 = Bitmap.createBitmap(i3, i4, Bitmap.Config.ARGB_8888);
                Canvas canvas2 = new Canvas(createBitmap3);
                canvas2.translate((-width) / 2.0f, (-height) / 2.0f);
                canvas2.rotate(i12);
                canvas2.translate(i3 / 2.0f, i4 / 2.0f);
                canvas2.drawBitmap(bitmap9, 0.0f, 0.0f, new Paint(3));
                this.stickerMakerView.updateOutlinePath(createBitmap3);
                return;
            }
            return;
        } else {
            iArr = null;
            arrayList = null;
            savedFilterState3 = null;
            savedFilterState = null;
            bitmap = null;
        }
        z = false;
        list = savedFilterState3;
        if (bitmap != null) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:74:0x006e  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x00d7  */
    /* renamed from: applyCurrentEditMode */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$setParentActivity$20(Bitmap bitmap) {
        boolean z;
        int i;
        String tempFileAbsolutePath;
        float f;
        boolean z2;
        String str;
        PhotoViewer photoViewer;
        Bitmap bitmap2;
        Bitmap bitmap3;
        MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        int[] iArr = {this.centerImage.getOrientation(), this.centerImage.getInvert()};
        MediaController.CropState cropState = mediaEditState.cropState;
        if (cropState != null) {
            bitmap = createCroppedBitmap(bitmap, cropState, iArr, true);
        } else if (iArr[0] == 0) {
            z = false;
            i = this.currentEditMode;
            if ((i != 0 || i == 4) && this.sendPhotoType == 11 && !this.isCurrentVideo) {
                if (mediaEditState.cropState == null) {
                    if (mediaEditState.paintPath != null) {
                        Bitmap createCroppedBitmap = createCroppedBitmap(BitmapFactory.decodeFile(mediaEditState.fullPaintPath), mediaEditState.cropState, null, false);
                        if (hasAnimatedMediaEntities()) {
                            String file = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file;
                            mediaEditState.imagePath = file;
                        } else {
                            String tempFileAbsolutePath2 = getTempFileAbsolutePath();
                            mediaEditState.imagePath = tempFileAbsolutePath2;
                            mergeImages(tempFileAbsolutePath2, null, createCroppedBitmap, bitmap, AndroidUtilities.getPhotoSize(), true);
                        }
                        tempFileAbsolutePath = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath;
                        f = 512.0f;
                        z2 = true;
                        str = null;
                        photoViewer = this;
                        bitmap2 = createCroppedBitmap;
                        bitmap3 = bitmap;
                        photoViewer.mergeImages(tempFileAbsolutePath, str, bitmap2, bitmap3, f, z2);
                    }
                    Bitmap bitmap4 = bitmap;
                    String file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap4, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                    this.currentImagePath = file2;
                    mediaEditState.imagePath = file2;
                    mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap4, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                } else {
                    if (mediaEditState.paintPath != null) {
                        Bitmap decodeFile = BitmapFactory.decodeFile(mediaEditState.fullPaintPath);
                        if (hasAnimatedMediaEntities()) {
                            String file3 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                            this.currentImagePath = file3;
                            mediaEditState.imagePath = file3;
                        } else {
                            String tempFileAbsolutePath3 = getTempFileAbsolutePath();
                            mediaEditState.imagePath = tempFileAbsolutePath3;
                            mergeImages(tempFileAbsolutePath3, null, bitmap, decodeFile, AndroidUtilities.getPhotoSize(), false);
                        }
                        tempFileAbsolutePath = getTempFileAbsolutePath();
                        mediaEditState.thumbPath = tempFileAbsolutePath;
                        f = 512.0f;
                        z2 = false;
                        str = null;
                        photoViewer = this;
                        bitmap2 = bitmap;
                        bitmap3 = decodeFile;
                        photoViewer.mergeImages(tempFileAbsolutePath, str, bitmap2, bitmap3, f, z2);
                    }
                    Bitmap bitmap42 = bitmap;
                    String file22 = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap42, getCompressFormat(), AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 87, false, 101, 101), true).toString();
                    this.currentImagePath = file22;
                    mediaEditState.imagePath = file22;
                    mediaEditState.thumbPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(bitmap42, 512.0f, 512.0f, 70, false, 101, 101), true).toString();
                }
            }
            if (z || bitmap == null) {
            }
            bitmap.recycle();
            return;
        } else {
            Matrix matrix = new Matrix();
            matrix.postRotate(iArr[0]);
            int i2 = iArr[1];
            if (i2 == 1) {
                matrix.postScale(-1.0f, 1.0f);
            } else if (i2 == 2) {
                matrix.postScale(1.0f, -1.0f);
            }
            bitmap = Bitmaps.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
        }
        z = true;
        i = this.currentEditMode;
        if (i != 0) {
        }
        if (mediaEditState.cropState == null) {
        }
        if (z) {
        }
    }

    private void applyTransformToMatrix(Matrix matrix) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        MediaController.CropState cropState;
        if (this.imageMoveAnimation != null) {
            f2 = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            f = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
        } else {
            f = this.scale;
            f2 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f = this.animateToScale;
            }
        }
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight = getContainerViewHeight();
        matrix.preTranslate(f5, f4 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        matrix.preScale(f, f);
        matrix.preRotate(f3);
        int bitmapWidth = this.centerImage.getBitmapWidth();
        int bitmapHeight = this.centerImage.getBitmapHeight();
        float f6 = containerViewWidth;
        float f7 = containerViewHeight;
        float min = Math.min(f6 / bitmapWidth, f7 / bitmapHeight);
        int orientation = this.cropTransform.getOrientation();
        if (orientation != 90 && orientation != 270) {
            bitmapHeight = bitmapWidth;
            bitmapWidth = bitmapHeight;
        }
        float cropPw = this.cropTransform.getCropPw();
        float cropPh = this.cropTransform.getCropPh();
        float f8 = bitmapHeight;
        float f9 = bitmapWidth;
        float f10 = f6 / ((int) ((cropPw + ((1.0f - cropPw) * 0.0f)) * f8));
        float f11 = (int) ((cropPh + ((1.0f - cropPh) * 0.0f)) * f9);
        if (f10 * f11 > f7) {
            f10 = f7 / f11;
        }
        if (this.sendPhotoType == 1 || this.cropTransform.hasViewTransform()) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                MediaController.CropState cropState2 = this.editState.cropState;
                textureView.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                }
            }
            MediaController.CropState cropState3 = this.editState.cropState;
            float f12 = cropState3 != null ? cropState3.cropScale : 1.0f;
            float f13 = f12 * ((f10 / min) / (((f12 - 1.0f) * 0.0f) + 1.0f));
            matrix.preTranslate(this.cropTransform.getCropAreaX() * 1.0f, this.cropTransform.getCropAreaY() * 1.0f);
            matrix.preScale(f13, f13);
            matrix.preTranslate(this.cropTransform.getCropPx() * f8 * min * 1.0f, this.cropTransform.getCropPy() * f9 * min * 1.0f);
            float rotation = this.cropTransform.getRotation() + orientation;
            if (rotation > 180.0f) {
                rotation -= 360.0f;
            }
            matrix.preRotate(rotation);
        }
        if (!this.imagesArrLocals.isEmpty() && (cropState = this.editState.cropState) != null && cropState.mirrored) {
            matrix.preScale(-1.0f, 1.0f);
        }
        if (f2 > 0.0f) {
            matrix.preScale(1.0f - (2.0f * f2), 1.0f);
            matrix.preSkew(0.0f, 4.0f * f2 * (1.0f - f2) * 0.25f);
        }
    }

    private void applyTransformToOutline(Canvas canvas) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        MediaController.CropState cropState;
        if (this.imageMoveAnimation != null) {
            f2 = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            f = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
        } else {
            f = this.scale;
            f2 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f = this.animateToScale;
            }
        }
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight = getContainerViewHeight();
        canvas.translate(getAdditionX(this.currentEditMode), getAdditionY(this.currentEditMode));
        canvas.translate(f5, f4 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        canvas.scale(f, f);
        canvas.rotate(f3);
        int bitmapWidth = this.centerImage.getBitmapWidth();
        int bitmapHeight = this.centerImage.getBitmapHeight();
        float f9 = containerViewWidth;
        float f10 = bitmapWidth;
        float f11 = f9 / f10;
        float f12 = containerViewHeight;
        float f13 = bitmapHeight;
        float f14 = f12 / f13;
        float min = Math.min(f11, f14);
        int orientation = this.cropTransform.getOrientation();
        if (orientation == 90 || orientation == 270) {
            bitmapHeight = bitmapWidth;
            bitmapWidth = bitmapHeight;
        }
        float cropPw = this.cropTransform.getCropPw();
        float cropPh = this.cropTransform.getCropPh();
        float f15 = bitmapWidth;
        float f16 = bitmapHeight;
        float f17 = (int) ((cropPw + ((1.0f - cropPw) * 0.0f)) * f15);
        float f18 = f9 / f17;
        float f19 = (int) ((cropPh + ((1.0f - cropPh) * 0.0f)) * f16);
        if (f18 * f19 > f12) {
            f18 = f12 / f19;
        }
        float f20 = f2;
        if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
            float f21 = f17 * f18;
            float f22 = f19 * f18;
            if (f11 * f13 > f12) {
                f11 = f14;
            }
            float f23 = f21 + ((((f10 * f11) / f) - f21) * 0.0f);
            float f24 = f22 + ((((f13 * f11) / f) - f22) * 0.0f);
            canvas.clipRect((-f23) / 2.0f, (-f24) / 2.0f, f23 / 2.0f, f24 / 2.0f);
        }
        if (this.sendPhotoType == 1 || this.cropTransform.hasViewTransform()) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                MediaController.CropState cropState2 = this.editState.cropState;
                textureView.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                }
            }
            MediaController.CropState cropState3 = this.editState.cropState;
            if (cropState3 != null) {
                f7 = cropState3.cropScale;
                f6 = 1.0f;
            } else {
                f6 = 1.0f;
                f7 = 1.0f;
            }
            float f25 = f7 * ((f18 / min) / (((f7 - f6) * 0.0f) + f6));
            canvas.translate(this.cropTransform.getCropAreaX() * f6, this.cropTransform.getCropAreaY() * f6);
            canvas.scale(f25, f25);
            canvas.translate(this.cropTransform.getCropPx() * f15 * min * f6, this.cropTransform.getCropPy() * f16 * min * f6);
            float rotation = this.cropTransform.getRotation() + orientation;
            if (rotation > 180.0f) {
                rotation -= 360.0f;
            }
            canvas.rotate(rotation);
        }
        if (this.imagesArrLocals.isEmpty() || (cropState = this.editState.cropState) == null || !cropState.mirrored) {
            f8 = 1.0f;
        } else {
            f8 = 1.0f;
            canvas.scale(-1.0f, 1.0f);
        }
        if (f20 > 0.0f) {
            canvas.scale(f8 - (f20 * 2.0f), f8);
            canvas.skew(0.0f, 4.0f * f20 * (f8 - f20) * 0.25f);
        }
    }

    private void calculateEstimatedVideoSize(boolean z, boolean z2) {
        float f;
        if (z) {
            long j = ((float) ((z2 ? 0L : this.audioFramesSize) + this.videoFramesSize)) * (((float) this.estimatedDuration) / this.videoDuration);
            this.estimatedSize = j + ((j / 32768) * 16);
            return;
        }
        long j2 = ((float) this.originalSize) * (((float) this.estimatedDuration) / this.videoDuration);
        this.estimatedSize = j2;
        if (z2) {
            this.estimatedSize = j2 - (((float) this.audioFramesSize) * f);
        }
    }

    private Size calculateResultVideoSize() {
        int round;
        int i;
        if (this.compressionsCount == 1) {
            return new Size(this.originalWidth, this.originalHeight);
        }
        int i2 = this.selectedCompression;
        float f = (i2 != 0 ? i2 != 1 ? i2 != 2 ? 1920.0f : 1280.0f : 854.0f : 480.0f) / (this.originalWidth > this.originalHeight ? this.originalWidth : this.originalHeight);
        if (this.selectedCompression != this.compressionsCount - 1 || f < 1.0f) {
            int round2 = Math.round((this.originalWidth * f) / 2.0f) * 2;
            round = Math.round((this.originalHeight * f) / 2.0f) * 2;
            i = round2;
        } else {
            i = this.originalWidth;
            round = this.originalHeight;
        }
        int i3 = i % 4;
        if (i3 != 0 || round % 4 != 0) {
            i = (i - i3) - (round % 4);
        }
        return new Size(i, round);
    }

    private boolean canDoubleTapSeekVideo(MotionEvent motionEvent) {
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            boolean z = motionEvent.getX() >= ((float) ((getContainerViewWidth() / 3) * 2));
            long currentVideoPosition = getCurrentVideoPosition();
            long videoDuration = getVideoDuration();
            if (currentVideoPosition == -9223372036854775807L || videoDuration <= 15000) {
                return false;
            }
            return !z || videoDuration - currentVideoPosition > 10000;
        }
        return false;
    }

    private boolean canSendMediaToParentChatActivity() {
        TLRPC.Chat chat;
        ChatActivity chatActivity = this.parentChatActivity;
        return (chatActivity == null || (chatActivity.currentUser == null && ((chat = chatActivity.currentChat) == null || ChatObject.isNotInChat(chat) || (!ChatObject.canSendPhoto(this.parentChatActivity.currentChat) && !ChatObject.canSendVideo(this.parentChatActivity.currentChat))))) ? false : true;
    }

    public void cancelFlashAnimations() {
        View view = this.flashView;
        if (view != null) {
            view.animate().setListener(null).cancel();
            this.flashView.setAlpha(0.0f);
        }
        AnimatorSet animatorSet = this.flashAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.flashAnimator = null;
        }
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.cancelThumbAnimation();
        }
    }

    private void cancelMoveZoomAnimation() {
        AnimatorSet animatorSet = this.imageMoveAnimation;
        if (animatorSet == null) {
            return;
        }
        float f = this.scale;
        float f2 = this.animationValue;
        float f3 = f + ((this.animateToScale - f) * f2);
        float f4 = this.translationX;
        float f5 = f4 + ((this.animateToX - f4) * f2);
        float f6 = this.translationY;
        float f7 = f6 + ((this.animateToY - f6) * f2);
        float f8 = this.rotate;
        animatorSet.cancel();
        this.scale = f3;
        this.translationX = f5;
        this.translationY = f7;
        this.animationStartTime = 0L;
        this.rotate = f8 + ((this.animateToRotate - f8) * f2);
        updateMinMax(f3);
        this.zoomAnimation = false;
        this.containerView.invalidate();
    }

    private void cancelStickerClippingMode() {
        if (this.sendPhotoType == 11 && this.cutOutBtn.isCancelState()) {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(true, true);
            this.stickerMakerView.disableClippingMode();
            this.containerView.invalidate();
        }
    }

    public void cancelVideoPlayRunnable() {
        Runnable runnable = this.videoPlayRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.videoPlayRunnable = null;
        }
    }

    public void captureCurrentFrame() {
        TextureView textureView;
        if (this.captureFrameAtTime == -1 || (textureView = this.videoTextureView) == null) {
            return;
        }
        this.captureFrameAtTime = -1L;
        final Bitmap bitmap = textureView.getBitmap();
        this.flashView.animate().alpha(1.0f).setInterpolator(CubicBezierInterpolator.EASE_BOTH).setDuration(85L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.36

            /* loaded from: classes4.dex */
            public class 1 extends AnimatorListenerAdapter {
                1() {
                    36.this = r1;
                }

                public /* synthetic */ void lambda$onAnimationEnd$0() {
                    PhotoViewer.this.manuallyPaused = false;
                    if (PhotoViewer.this.videoPlayer != null) {
                        PhotoViewer.this.videoPlayer.play();
                    }
                    PhotoViewer.this.videoPlayRunnable = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    PhotoViewer.this.flashAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (PhotoViewer.this.flashAnimator == null) {
                        return;
                    }
                    AndroidUtilities.runOnUIThread(PhotoViewer.this.videoPlayRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$36$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.36.1.this.lambda$onAnimationEnd$0();
                        }
                    }, 860L);
                }
            }

            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.photoCropView.setVideoThumb(bitmap, 0);
                PhotoViewer.this.flashAnimator = new AnimatorSet();
                PhotoViewer.this.flashAnimator.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.flashView, PhotoViewer.this.FLASH_VIEW_VALUE, 0.0f));
                PhotoViewer.this.flashAnimator.setDuration(85L);
                PhotoViewer.this.flashAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT);
                PhotoViewer.this.flashAnimator.addListener(new 1());
                PhotoViewer.this.flashAnimator.start();
            }
        }).start();
    }

    private boolean checkAnimation() {
        if (this.animationInProgress != 0) {
            invalidateBlur();
            if (Math.abs(this.transitionAnimationStartTime - System.currentTimeMillis()) >= 500) {
                Runnable runnable = this.animationEndRunnable;
                if (runnable != null) {
                    runnable.run();
                    this.animationEndRunnable = null;
                }
                this.animationInProgress = 0;
            }
        }
        return this.animationInProgress != 0;
    }

    private void checkBufferedProgress(float f) {
        MessageObject messageObject;
        TLRPC.Document document;
        if (!this.isStreaming || this.parentActivity == null || this.streamingAlertShown || this.videoPlayer == null || (messageObject = this.currentMessageObject) == null || (document = messageObject.getDocument()) == null || this.currentMessageObject.getDuration() < 20.0d) {
            return;
        }
        boolean z = document.size >= 2147483648L;
        if ((DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 4) == 0 || f >= 0.9f) {
            return;
        }
        long j = document.size;
        if (((float) j) * f >= 5242880.0f || (f >= 0.5f && j >= 2097152)) {
            if (Math.abs(SystemClock.elapsedRealtime() - this.startedPlayTime) >= (z ? 10000 : 3000)) {
                if (this.videoPlayer.getDuration() == -9223372036854775807L) {
                    Toast.makeText(this.parentActivity, LocaleController.getString(R.string.VideoDoesNotSupportStreaming), 1).show();
                }
                this.streamingAlertShown = true;
            }
        }
    }

    public void checkChangedTextureView(boolean z) {
        if (z) {
            TextureView textureView = this.changedTextureView;
            if (textureView == null) {
                return;
            }
            textureView.getViewTreeObserver().addOnPreDrawListener(new 8());
            this.changedTextureView.invalidate();
        } else if (this.waitingForFirstTextureUpload == 2) {
            ImageView imageView = this.textureImageView;
            if (imageView != null) {
                imageView.setVisibility(4);
                this.textureImageView.setImageDrawable(null);
                Bitmap bitmap = this.currentBitmap;
                if (bitmap != null) {
                    bitmap.recycle();
                    this.currentBitmap = null;
                }
            }
            this.switchingInlineMode = false;
            if (Build.VERSION.SDK_INT >= 21) {
                final View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
                if (aspectRatioFrameLayout == null) {
                    return;
                }
                aspectRatioFrameLayout.getLocationInWindow(this.pipPosition);
                int[] iArr = this.pipPosition;
                iArr[1] = (int) (iArr[1] - this.containerView.getTranslationY());
                ImageView imageView2 = this.textureImageView;
                if (imageView2 != null) {
                    imageView2.setTranslationX(imageView2.getTranslationX() + getLeftInset());
                }
                if (view != null) {
                    view.setTranslationX((view.getTranslationX() + getLeftInset()) - this.aspectRatioFrameLayout.getX());
                }
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setTranslationX(view.getTranslationX());
                }
                ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda76
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$checkChangedTextureView$3(valueAnimator);
                    }
                });
                float x = this.usedSurfaceView ? 0.0f : this.pipPosition[0] - this.aspectRatioFrameLayout.getX();
                float y = this.usedSurfaceView ? 0.0f : this.pipPosition[1] - this.aspectRatioFrameLayout.getY();
                AnimatorSet animatorSet = new AnimatorSet();
                ArrayList arrayList = new ArrayList();
                arrayList.add(ofFloat);
                ImageView imageView3 = this.textureImageView;
                Property property = View.SCALE_X;
                arrayList.add(ObjectAnimator.ofFloat(imageView3, property, 1.0f));
                ImageView imageView4 = this.textureImageView;
                Property property2 = View.SCALE_Y;
                arrayList.add(ObjectAnimator.ofFloat(imageView4, property2, 1.0f));
                ImageView imageView5 = this.textureImageView;
                Property property3 = View.TRANSLATION_X;
                arrayList.add(ObjectAnimator.ofFloat(imageView5, property3, this.usedSurfaceView ? 0.0f : this.pipPosition[0]));
                ImageView imageView6 = this.textureImageView;
                Property property4 = View.TRANSLATION_Y;
                arrayList.add(ObjectAnimator.ofFloat(imageView6, property4, this.usedSurfaceView ? 0.0f : this.pipPosition[1]));
                arrayList.add(ObjectAnimator.ofFloat(view, property, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(view, property2, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(view, property3, x));
                arrayList.add(ObjectAnimator.ofFloat(view, property4, y));
                arrayList.add(ObjectAnimator.ofInt(this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, NotificationCenter.closeSearchByActiveAction));
                FirstFrameView firstFrameView2 = this.firstFrameView;
                if (firstFrameView2 != null) {
                    arrayList.add(ObjectAnimator.ofFloat(firstFrameView2, property, 1.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, property2, 1.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, property3, x));
                    arrayList.add(ObjectAnimator.ofFloat(this.firstFrameView, property4, y));
                }
                float f = PipVideoOverlay.getPipRect(false, this.aspectRatioFrameLayout.getAspectRatio()).width;
                view.getWidth();
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda77
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$checkChangedTextureView$4(view, valueAnimator);
                    }
                });
                arrayList.add(ofFloat2);
                animatorSet.playTogether(arrayList);
                DecelerateInterpolator decelerateInterpolator2 = new DecelerateInterpolator();
                animatorSet.setInterpolator(decelerateInterpolator2);
                animatorSet.setDuration(250L);
                SurfaceView surfaceView = this.videoSurfaceView;
                if (surfaceView != null) {
                    surfaceView.setVisibility(0);
                }
                animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.9
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.pipAnimationInProgress = false;
                        view.setOutlineProvider(null);
                        if (PhotoViewer.this.textureImageView != null) {
                            PhotoViewer.this.textureImageView.setOutlineProvider(null);
                        }
                        if (PhotoViewer.this.firstFrameView != null) {
                            PhotoViewer.this.firstFrameView.setOutlineProvider(null);
                        }
                        if (PhotoViewer.this.videoSurfaceView != null) {
                            PhotoViewer.this.videoSurfaceView.setVisibility(0);
                        }
                    }
                });
                animatorSet.start();
                toggleActionBar(true, true, new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(NotificationCenter.liveLocationsChanged).animationInterpolator(decelerateInterpolator2));
            } else {
                toggleActionBar(true, false);
            }
            this.waitingForFirstTextureUpload = 0;
        }
    }

    private boolean checkInlinePermissions() {
        boolean canDrawOverlays;
        Activity activity = this.parentActivity;
        if (activity == null) {
            return false;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            canDrawOverlays = Settings.canDrawOverlays(activity);
            if (canDrawOverlays) {
                return true;
            }
            AlertsCreator.createDrawOverlayPermissionDialog(this.parentActivity, null).show();
            return false;
        }
        return true;
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x0017, code lost:
        if (r2 > r3) goto L3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x0028, code lost:
        if (r2 > r3) goto L6;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void checkMinMax(boolean z) {
        float f = this.translationX;
        float f2 = this.translationY;
        updateMinMax(this.scale);
        float f3 = this.translationX;
        float f4 = this.minX;
        if (f3 >= f4) {
            f4 = this.maxX;
        }
        f = f4;
        float f5 = this.translationY;
        float f6 = this.minY;
        if (f5 >= f6) {
            f6 = this.maxY;
        }
        f2 = f6;
        animateTo(this.scale, f, f2, z);
    }

    public void checkProgress(final int i, boolean z, final boolean z2) {
        File file;
        boolean z3;
        FileLoader.FileResolver fileResolver;
        MessageObject messageObject;
        boolean z4;
        boolean shouldIndexAutoPlayed;
        PhotoProgressView photoProgressView;
        File pathToAttach;
        File pathToAttach2;
        File file2;
        boolean z5;
        AnimatedFileDrawable animatedFileDrawable;
        int i2 = this.currentIndex;
        int i3 = i == 1 ? i2 + 1 : i == 2 ? i2 - 1 : i2;
        boolean z6 = false;
        if (this.currentFileNames[i] == null) {
            if (!this.imagesArrLocals.isEmpty() && i3 >= 0 && i3 < this.imagesArrLocals.size()) {
                Object obj = this.imagesArrLocals.get(i3);
                if (obj instanceof MediaController.PhotoEntry) {
                    z6 = ((MediaController.PhotoEntry) obj).isVideo;
                }
            }
            PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
            if (z6) {
                photoProgressViewArr[i].setBackgroundState(3, z2, true);
                return;
            } else {
                photoProgressViewArr[i].setBackgroundState(-1, z2, true);
                return;
            }
        }
        boolean hasBitmap = (i == 0 && i2 == 0 && (animatedFileDrawable = this.currentAnimation) != null) ? animatedFileDrawable.hasBitmap() : false;
        File file3 = null;
        if (this.currentMessageObject != null) {
            if (i3 < 0 || i3 >= this.imagesArr.size()) {
                photoProgressView = this.photoProgressViews[i];
            } else {
                MessageObject messageObject2 = (MessageObject) this.imagesArr.get(i3);
                shouldIndexAutoPlayed = shouldMessageObjectAutoPlayed(messageObject2);
                if (this.sharedMediaType != 1 || messageObject2.canPreviewDocument()) {
                    file = !TextUtils.isEmpty(messageObject2.messageOwner.attachPath) ? new File(messageObject2.messageOwner.attachPath) : null;
                    if ((MessageObject.getMedia(messageObject2.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(messageObject2.messageOwner).webpage != null && MessageObject.getMedia(messageObject2.messageOwner).webpage.document == null) {
                        final TLObject fileLocation = getFileLocation(i3, null);
                        fileResolver = new FileLoader.FileResolver() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda15
                            @Override // org.telegram.messenger.FileLoader.FileResolver
                            public final File getFile() {
                                File lambda$checkProgress$93;
                                lambda$checkProgress$93 = PhotoViewer.this.lambda$checkProgress$93(fileLocation);
                                return lambda$checkProgress$93;
                            }
                        };
                    } else {
                        final TLRPC.Message message = messageObject2.messageOwner;
                        fileResolver = new FileLoader.FileResolver() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda16
                            @Override // org.telegram.messenger.FileLoader.FileResolver
                            public final File getFile() {
                                File lambda$checkProgress$94;
                                lambda$checkProgress$94 = PhotoViewer.this.lambda$checkProgress$94(message);
                                return lambda$checkProgress$94;
                            }
                        };
                    }
                    if (messageObject2.isVideo()) {
                        messageObject = messageObject2;
                        z4 = SharedConfig.streamMedia && messageObject2.canStreamVideo() && !DialogObject.isEncryptedDialog(messageObject2.getDialogId());
                        z3 = true;
                    } else {
                        messageObject = messageObject2;
                        z4 = false;
                        z3 = false;
                    }
                } else {
                    photoProgressView = this.photoProgressViews[i];
                }
            }
            photoProgressView.setBackgroundState(-1, z2, true);
            return;
        } else if (this.currentBotInlineResult != null) {
            if (i3 < 0 || i3 >= this.imagesArrLocals.size()) {
                photoProgressView = this.photoProgressViews[i];
                photoProgressView.setBackgroundState(-1, z2, true);
                return;
            }
            TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) this.imagesArrLocals.get(i3);
            if (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(botInlineResult.document)) {
                if (botInlineResult.document != null) {
                    file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(botInlineResult.document);
                } else if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
                    file2 = new File(FileLoader.getDirectory(4), Utilities.MD5(botInlineResult.content.url) + "." + ImageLoader.getHttpUrlExtension(botInlineResult.content.url, "mp4"));
                } else {
                    file2 = null;
                }
                z5 = true;
            } else {
                file2 = botInlineResult.document != null ? new File(FileLoader.getDirectory(3), this.currentFileNames[i]) : botInlineResult.photo != null ? new File(FileLoader.getDirectory(0), this.currentFileNames[i]) : null;
                z5 = false;
            }
            file = file2;
            z3 = z5;
            fileResolver = null;
            messageObject = null;
            z4 = false;
            file3 = new File(FileLoader.getDirectory(4), this.currentFileNames[i]);
            shouldIndexAutoPlayed = false;
        } else if (this.currentFileLocation != null) {
            if (i3 < 0 || i3 >= this.imagesArrLocationsVideo.size()) {
                photoProgressView = this.photoProgressViews[i];
                photoProgressView.setBackgroundState(-1, z2, true);
                return;
            }
            ImageLocation imageLocation = (ImageLocation) this.imagesArrLocationsVideo.get(i3);
            if (imageLocation != null) {
                pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(imageLocation.location, getFileLocationExt(imageLocation), false);
                pathToAttach2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(imageLocation.location, getFileLocationExt(imageLocation), true);
                file = pathToAttach;
                fileResolver = null;
                messageObject = null;
                shouldIndexAutoPlayed = false;
                z4 = false;
                z3 = false;
                file3 = pathToAttach2;
            }
            file = null;
            fileResolver = null;
            messageObject = null;
            shouldIndexAutoPlayed = false;
            z4 = false;
            z3 = false;
        } else if (this.currentSecureDocument != null) {
            if (i3 < 0 || i3 >= this.secureDocuments.size()) {
                photoProgressView = this.photoProgressViews[i];
                photoProgressView.setBackgroundState(-1, z2, true);
                return;
            }
            SecureDocument secureDocument = (SecureDocument) this.secureDocuments.get(i3);
            pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(secureDocument, true);
            pathToAttach2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(secureDocument, false);
            file = pathToAttach;
            fileResolver = null;
            messageObject = null;
            shouldIndexAutoPlayed = false;
            z4 = false;
            z3 = false;
            file3 = pathToAttach2;
        } else if (this.currentPathObject != null) {
            file = new File(FileLoader.getDirectory(3), this.currentFileNames[i]);
            fileResolver = null;
            messageObject = null;
            shouldIndexAutoPlayed = false;
            z4 = false;
            z3 = false;
            file3 = new File(FileLoader.getDirectory(4), this.currentFileNames[i]);
        } else {
            PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
            if (pageBlocksAdapter != null) {
                file = pageBlocksAdapter.getFile(i3);
                z3 = this.pageBlocksAdapter.isVideo(i3) || this.pageBlocksAdapter.isHardwarePlayer(i3);
                fileResolver = null;
                messageObject = null;
                z4 = false;
                shouldIndexAutoPlayed = shouldIndexAutoPlayed(i3);
            }
            file = null;
            fileResolver = null;
            messageObject = null;
            shouldIndexAutoPlayed = false;
            z4 = false;
            z3 = false;
        }
        boolean z7 = !(i == 0 && this.dontAutoPlay) && shouldIndexAutoPlayed;
        final boolean z8 = hasBitmap;
        final File file4 = file;
        final File file5 = file3;
        final FileLoader.FileResolver fileResolver2 = fileResolver;
        final MessageObject messageObject3 = messageObject;
        final boolean z9 = z4;
        final boolean z10 = z3;
        final boolean z11 = z7;
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda17
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$checkProgress$96(z8, file4, file5, fileResolver2, i, messageObject3, z9, z10, z11, z2);
            }
        });
    }

    public void closeCaptionEnter(boolean z) {
        int i = this.currentIndex;
        if (i < 0 || i >= this.imagesArrLocals.size() || !isCaptionOpen()) {
            return;
        }
        this.imagesArrLocals.get(this.currentIndex);
        if (z) {
            applyCaption();
        }
        this.captionEdit.onBackPressed();
    }

    private void closePaintMode() {
        this.photoPaintView.maybeShowDismissalAlert(this, this.parentActivity, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda75
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$closePaintMode$84();
            }
        });
    }

    private void createAdButtonView() {
        if (this.adButtonView != null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(this.activityContext);
        this.adButtonView = frameLayout;
        frameLayout.setBackground(Theme.createRadSelectorDrawable(620756991, 369098751, 8, 8));
        ScaleStateListAnimator.apply(this.adButtonView, 0.05f, 1.25f);
        TextView textView = new TextView(this.activityContext);
        this.adButtonTextView = textView;
        textView.setTextSize(1, 14.0f);
        this.adButtonTextView.setTextColor(-1);
        this.adButtonTextView.setTypeface(AndroidUtilities.bold());
        this.adButtonView.addView(this.adButtonTextView, LayoutHelper.createFrame(-2, -2, 17));
        this.adButtonView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda92
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createAdButtonView$118(view);
            }
        });
    }

    private void createCropView() {
        if (this.photoCropView != null) {
            return;
        }
        PhotoCropView photoCropView = new PhotoCropView(this.activityContext, this.resourcesProvider);
        this.photoCropView = photoCropView;
        photoCropView.setVisibility(8);
        this.photoCropView.onDisappear();
        this.containerView.addView(this.photoCropView, this.containerView.indexOfChild(this.videoTimelineViewContainer) - 1, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
        this.photoCropView.setDelegate(new 53());
    }

    /* JADX WARN: Removed duplicated region for block: B:69:0x006a A[Catch: all -> 0x000c, TryCatch #0 {all -> 0x000c, blocks: (B:42:0x0004, B:44:0x0009, B:48:0x0010, B:50:0x0016, B:52:0x0019, B:53:0x001b, B:59:0x0031, B:61:0x0058, B:66:0x0061, B:67:0x0065, B:69:0x006a, B:72:0x0073, B:71:0x0070), top: B:76:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x006e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private Bitmap createCroppedBitmap(Bitmap bitmap, MediaController.CropState cropState, int[] iArr, boolean z) {
        int i;
        int i2;
        int i3;
        int i4;
        Matrix matrix;
        try {
            int i5 = 0;
            int i6 = (cropState.transformRotation + (iArr != null ? iArr[0] : 0)) % 360;
            if (iArr != null && iArr.length > 1) {
                i5 = iArr[1];
            }
            int width = bitmap.getWidth();
            int height = bitmap.getHeight();
            if (i6 != 90 && i6 != 270) {
                i2 = width;
                i = height;
                float f = i2;
                float f2 = i;
                Bitmap createBitmap = Bitmap.createBitmap((int) (cropState.cropPw * f), (int) (cropState.cropPh * f2), Bitmap.Config.ARGB_8888);
                matrix = new Matrix();
                matrix.postTranslate((-width) / 2, (-height) / 2);
                if (z && cropState.mirrored) {
                    if (i6 != 90 && i6 != 270) {
                        matrix.postScale(-1.0f, 1.0f);
                    }
                    matrix.postScale(1.0f, -1.0f);
                }
                if (i5 != 1) {
                    matrix.postScale(-1.0f, 1.0f);
                } else if (i5 == 2) {
                    matrix.postScale(1.0f, -1.0f);
                }
                matrix.postRotate(cropState.cropRotate + i6);
                matrix.postTranslate(cropState.cropPx * f, cropState.cropPy * f2);
                float f3 = cropState.cropScale;
                matrix.postScale(f3, f3);
                matrix.postTranslate(i3 / 2, i4 / 2);
                new Canvas(createBitmap).drawBitmap(bitmap, matrix, new Paint(2));
                return createBitmap;
            }
            i = width;
            i2 = height;
            float f4 = i2;
            float f22 = i;
            Bitmap createBitmap2 = Bitmap.createBitmap((int) (cropState.cropPw * f4), (int) (cropState.cropPh * f22), Bitmap.Config.ARGB_8888);
            matrix = new Matrix();
            matrix.postTranslate((-width) / 2, (-height) / 2);
            if (z) {
                if (i6 != 90) {
                    matrix.postScale(-1.0f, 1.0f);
                }
                matrix.postScale(1.0f, -1.0f);
            }
            if (i5 != 1) {
            }
            matrix.postRotate(cropState.cropRotate + i6);
            matrix.postTranslate(cropState.cropPx * f4, cropState.cropPy * f22);
            float f32 = cropState.cropScale;
            matrix.postScale(f32, f32);
            matrix.postTranslate(i3 / 2, i4 / 2);
            new Canvas(createBitmap2).drawBitmap(bitmap, matrix, new Paint(2));
            return createBitmap2;
        } catch (Throwable th) {
            FileLog.e(th);
            return null;
        }
    }

    private void createMaskPaintView() {
        MediaController.CropState cropState;
        if (this.maskPaintView != null) {
            return;
        }
        if (this.sendPhotoType == 1) {
            cropState = new MediaController.CropState();
            cropState.transformRotation = this.cropTransform.getOrientation();
        } else {
            cropState = this.editState.cropState;
        }
        MediaController.CropState cropState2 = cropState;
        int bitmapWidth = this.centerImage.getBitmapWidth();
        int bitmapHeight = this.centerImage.getBitmapHeight();
        Bitmap.Config config = Bitmap.Config.ARGB_8888;
        Bitmap createBitmap = Bitmap.createBitmap(bitmapWidth, bitmapHeight, config);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null && stickerMakerView.getSourceBitmap() != null) {
            Bitmap sourceBitmap = this.stickerMakerView.getSourceBitmap();
            Canvas canvas = new Canvas(createBitmap);
            canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
            canvas.rotate(this.stickerMakerView.orientation);
            float width = createBitmap.getWidth() / ((this.stickerMakerView.orientation / 90) % 2 != 0 ? sourceBitmap.getHeight() : sourceBitmap.getWidth());
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(((-sourceBitmap.getWidth()) / 2.0f) * width, ((-sourceBitmap.getHeight()) / 2.0f) * width, (sourceBitmap.getWidth() / 2.0f) * width, (sourceBitmap.getHeight() / 2.0f) * width);
            canvas.drawBitmap(sourceBitmap, (Rect) null, rectF, new Paint(3));
        }
        Bitmap createBitmap2 = Bitmap.createBitmap(this.centerImage.getBitmapWidth(), this.centerImage.getBitmapHeight(), config);
        if (this.centerImage.getBitmap() != null) {
            Bitmap bitmap = this.centerImage.getBitmap();
            Canvas canvas2 = new Canvas(createBitmap2);
            canvas2.translate(createBitmap2.getWidth() / 2.0f, createBitmap2.getHeight() / 2.0f);
            canvas2.rotate(this.centerImage.getOrientation());
            float width2 = createBitmap2.getWidth() / ((this.centerImage.getOrientation() / 90) % 2 != 0 ? bitmap.getHeight() : bitmap.getWidth());
            RectF rectF2 = AndroidUtilities.rectTmp;
            rectF2.set(((-bitmap.getWidth()) / 2.0f) * width2, ((-bitmap.getHeight()) / 2.0f) * width2, (bitmap.getWidth() / 2.0f) * width2, (bitmap.getHeight() / 2.0f) * width2);
            canvas2.drawBitmap(bitmap, (Rect) null, rectF2, new Paint(3));
        }
        MaskPaintView maskPaintView = new MaskPaintView(this.parentActivity, this.currentAccount, createBitmap2, createBitmap, this.centerImage.getOrientation(), cropState2) { // from class: org.telegram.ui.PhotoViewer.59
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.Paint.Views.MaskPaintView
            protected void onDrawn() {
                PhotoViewer.this.showEditStickerMode(true, true);
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.Paint.Views.MaskPaintView
            public void onRenderViewAlphaUpdate(ValueAnimator valueAnimator) {
                super.onRenderViewAlphaUpdate(valueAnimator);
                PhotoViewer.this.containerView.invalidate();
            }
        };
        this.maskPaintView = maskPaintView;
        maskPaintView.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda98
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createMaskPaintView$76(view);
            }
        });
        this.maskPaintView.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda99
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$createMaskPaintView$77(view);
            }
        });
        this.maskPaintView.setEraser(this.maskPaintViewEraser);
        int indexOfChild = this.containerView.indexOfChild(this.btnLayout) - 1;
        if (indexOfChild < 0) {
            indexOfChild = this.containerView.getChildCount();
        }
        this.containerView.addView(this.maskPaintView, indexOfChild, LayoutHelper.createFrame(-1, -1.0f));
        this.maskPaintViewShuttingDown = false;
    }

    private void createPaintView() {
        int bitmapWidth;
        int bitmapHeight;
        MediaController.CropState cropState;
        if (this.photoPaintView == null) {
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
                bitmapWidth = videoEditTextureView.getVideoWidth();
                bitmapHeight = videoEditTextureView.getVideoHeight();
                while (true) {
                    if (bitmapWidth <= 1280 && bitmapHeight <= 1280) {
                        break;
                    }
                    bitmapWidth /= 2;
                    bitmapHeight /= 2;
                }
            } else {
                bitmapWidth = this.centerImage.getBitmapWidth();
                bitmapHeight = this.centerImage.getBitmapHeight();
            }
            Bitmap bitmap = this.paintingOverlay.getBitmap();
            Bitmap createBitmap = bitmap == null ? Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888) : bitmap;
            if (this.sendPhotoType == 1) {
                cropState = new MediaController.CropState();
                cropState.transformRotation = this.cropTransform.getOrientation();
            } else {
                cropState = this.editState.cropState;
            }
            MediaController.CropState cropState2 = cropState;
            KeyboardNotifier keyboardNotifier = new KeyboardNotifier(this.windowView, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda118
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$createPaintView$79((Integer) obj);
                }
            });
            this.paintKeyboardNotifier = keyboardNotifier;
            keyboardNotifier.ignore(this.currentEditMode != 3);
            Activity activity = this.parentActivity;
            LPhotoPaintView lPhotoPaintView = new LPhotoPaintView(activity, activity, this.currentAccount, createBitmap, this.isCurrentVideo ? null : this.centerImage.getBitmap(), this.centerImage.getOrientation(), this.editState.mediaEntities, cropState2, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda119
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$createPaintView$80();
                }
            }, this.resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.60
                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void didSetAnimatedSticker(RLottieDrawable rLottieDrawable) {
                    if (PhotoViewer.this.videoPlayer == null) {
                        return;
                    }
                    rLottieDrawable.setProgressMs(PhotoViewer.this.videoPlayer.getCurrentPosition() - (PhotoViewer.this.startTime > 0 ? PhotoViewer.this.startTime / 1000 : 0L));
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected int getPKeyboardHeight() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        return PhotoViewer.this.paintKeyboardNotifier.getKeyboardHeight();
                    }
                    return 0;
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onEmojiViewCloseByClick() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        PhotoViewer.this.paintKeyboardNotifier.awaitKeyboard();
                    }
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onOpenCloseStickersAlert(boolean z) {
                    if (PhotoViewer.this.videoPlayer == null) {
                        return;
                    }
                    PhotoViewer.this.manuallyPaused = false;
                    PhotoViewer.this.cancelVideoPlayRunnable();
                    if (z) {
                        PhotoViewer.this.videoPlayer.pause();
                    } else {
                        PhotoViewer.this.videoPlayer.play();
                    }
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void onTextAdd() {
                    PhotoViewer.this.windowView.isFocusable();
                }

                @Override // org.telegram.ui.Components.Paint.Views.LPhotoPaintView
                protected void updateKeyboard() {
                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                        PhotoViewer.this.paintKeyboardNotifier.fire();
                    }
                }
            };
            this.photoPaintView = lPhotoPaintView;
            this.containerView.addView(lPhotoPaintView.getView(), LayoutHelper.createFrame(-1, -1.0f));
            this.photoPaintView.setOnDoneButtonClickedListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda120
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$createPaintView$81();
                }
            });
            this.photoPaintView.getCancelView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda121
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$createPaintView$82(view);
                }
            });
            this.photoPaintView.setOffsetTranslationY(AndroidUtilities.dp(126.0f), 0.0f, 0, false);
            this.photoPaintView.setOffsetTranslationX(-AndroidUtilities.dp(12.0f));
        }
    }

    private void createVideoControlsInterface() {
        VideoPlayerControlFrameLayout videoPlayerControlFrameLayout = new VideoPlayerControlFrameLayout(this.containerView.getContext());
        this.videoPlayerControlFrameLayout = videoPlayerControlFrameLayout;
        this.containerView.addView(videoPlayerControlFrameLayout, LayoutHelper.createFrame(-1, 48, 83));
        final VideoPlayerSeekBar.SeekBarDelegate seekBarDelegate = new VideoPlayerSeekBar.SeekBarDelegate() { // from class: org.telegram.ui.PhotoViewer.44
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.VideoPlayerSeekBar.SeekBarDelegate
            public void onSeekBarContinuousDrag(float f) {
                if (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isYouTube() && PhotoViewer.this.videoPreviewFrame != null) {
                    PhotoViewer.this.videoPreviewFrame.setProgressForYouTube(PhotoViewer.this.photoViewerWebView, f, PhotoViewer.this.videoPlayerSeekbar.getWidth());
                } else if (PhotoViewer.this.videoPlayer != null && PhotoViewer.this.videoPreviewFrame != null) {
                    PhotoViewer.this.videoPreviewFrame.setProgress(f, PhotoViewer.this.videoPlayerSeekbar.getWidth());
                }
                PhotoViewer.this.showVideoSeekPreviewPosition(true);
                PhotoViewer.this.updateVideoSeekPreviewPosition();
            }

            @Override // org.telegram.ui.Components.VideoPlayerSeekBar.SeekBarDelegate
            public void onSeekBarDrag(float f) {
                if (PhotoViewer.this.videoPlayer != null || (PhotoViewer.this.photoViewerWebView != null && PhotoViewer.this.photoViewerWebView.isControllable())) {
                    if (!PhotoViewer.this.inPreview && PhotoViewer.this.videoTimelineViewContainer.getVisibility() == 0) {
                        f = PhotoViewer.this.videoTimelineView.getLeftProgress() + ((PhotoViewer.this.videoTimelineView.getRightProgress() - PhotoViewer.this.videoTimelineView.getLeftProgress()) * f);
                    }
                    long videoDuration = PhotoViewer.this.getVideoDuration();
                    if (videoDuration == -9223372036854775807L) {
                        PhotoViewer.this.seekToProgressPending = f;
                    } else {
                        PhotoViewer.this.seekVideoOrWebTo((int) (f * ((float) videoDuration)));
                    }
                    PhotoViewer.this.showVideoSeekPreviewPosition(false);
                    PhotoViewer.this.needShowOnReady = false;
                }
            }
        };
        FloatSeekBarAccessibilityDelegate floatSeekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.PhotoViewer.45
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.SeekBarAccessibilityDelegate
            public String getContentDescription(View view) {
                return LocaleController.formatString("AccDescrPlayerDuration", R.string.AccDescrPlayerDuration, LocaleController.formatPluralString("Minutes", PhotoViewer.this.videoPlayerCurrentTime[0], new Object[0]) + ' ' + LocaleController.formatPluralString("Seconds", PhotoViewer.this.videoPlayerCurrentTime[1], new Object[0]), LocaleController.formatPluralString("Minutes", PhotoViewer.this.videoPlayerTotalTime[0], new Object[0]) + ' ' + LocaleController.formatPluralString("Seconds", PhotoViewer.this.videoPlayerTotalTime[1], new Object[0]));
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                return PhotoViewer.this.videoPlayerSeekbar.getProgress();
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                seekBarDelegate.onSeekBarDrag(f);
                PhotoViewer.this.videoPlayerSeekbar.setProgress(f);
                PhotoViewer.this.videoPlayerSeekbarView.invalidate();
            }
        };
        View view = new View(this.containerView.getContext()) { // from class: org.telegram.ui.PhotoViewer.46
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            protected void onDraw(Canvas canvas) {
                PhotoViewer.this.videoPlayerSeekbar.draw(canvas, this);
            }
        };
        this.videoPlayerSeekbarView = view;
        view.setAccessibilityDelegate(floatSeekBarAccessibilityDelegate);
        this.videoPlayerSeekbarView.setImportantForAccessibility(1);
        this.videoPlayerControlFrameLayout.addView(this.videoPlayerSeekbarView, LayoutHelper.createFrame(-1, -1.0f));
        VideoPlayerSeekBar videoPlayerSeekBar = new VideoPlayerSeekBar(this.videoPlayerSeekbarView);
        this.videoPlayerSeekbar = videoPlayerSeekBar;
        videoPlayerSeekBar.setHorizontalPadding(AndroidUtilities.dp(2.0f));
        this.videoPlayerSeekbar.setColors(872415231, 872415231, -1, -1, -1, 1509949439);
        this.videoPlayerSeekbar.setDelegate(seekBarDelegate);
        VideoSeekPreviewImage videoSeekPreviewImage = new VideoSeekPreviewImage(this.containerView.getContext(), new VideoSeekPreviewImage.VideoSeekPreviewImageDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda88
            @Override // org.telegram.ui.Components.VideoSeekPreviewImage.VideoSeekPreviewImageDelegate
            public final void onReady() {
                PhotoViewer.this.lambda$createVideoControlsInterface$61();
            }
        }) { // from class: org.telegram.ui.PhotoViewer.47
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
                super.onLayout(z, i, i2, i3, i4);
                PhotoViewer.this.updateVideoSeekPreviewPosition();
            }

            @Override // android.view.View
            public void setVisibility(int i) {
                super.setVisibility(i);
                if (i == 0) {
                    PhotoViewer.this.updateVideoSeekPreviewPosition();
                }
            }
        };
        this.videoPreviewFrame = videoSeekPreviewImage;
        videoSeekPreviewImage.setAlpha(0.0f);
        this.containerView.addView(this.videoPreviewFrame, LayoutHelper.createFrame(-2, -2.0f, 83, 0.0f, 0.0f, 0.0f, 58.0f));
        SimpleTextView simpleTextView = new SimpleTextView(this.containerView.getContext());
        this.videoPlayerTime = simpleTextView;
        simpleTextView.setTextColor(-1);
        this.videoPlayerTime.setGravity(53);
        this.videoPlayerTime.setTextSize(14);
        this.videoPlayerTime.setImportantForAccessibility(2);
        this.videoPlayerControlFrameLayout.addView(this.videoPlayerTime, LayoutHelper.createFrame(-2, -2.0f, 53, 0.0f, 15.0f, 12.0f, 0.0f));
        ImageView imageView = new ImageView(this.containerView.getContext());
        this.exitFullscreenButton = imageView;
        imageView.setImageResource(R.drawable.msg_minvideo);
        this.exitFullscreenButton.setContentDescription(LocaleController.getString("AccExitFullscreen", R.string.AccExitFullscreen));
        this.exitFullscreenButton.setScaleType(ImageView.ScaleType.CENTER);
        this.exitFullscreenButton.setBackground(Theme.createSelectorDrawable(1090519039));
        this.exitFullscreenButton.setVisibility(4);
        this.videoPlayerControlFrameLayout.addView(this.exitFullscreenButton, LayoutHelper.createFrame(48, 48, 53));
        this.exitFullscreenButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda89
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$createVideoControlsInterface$62(view2);
            }
        });
    }

    private void createVideoTextureView(final MediaController.SavedFilterState savedFilterState) {
        AspectRatioFrameLayout aspectRatioFrameLayout;
        View view;
        if (this.videoTextureView != null) {
            return;
        }
        AspectRatioFrameLayout aspectRatioFrameLayout2 = new AspectRatioFrameLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.51
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.ViewGroup
            protected boolean drawChild(Canvas canvas, View view2, long j) {
                if (view2 == PhotoViewer.this.lastFrameImageView && PhotoViewer.this.skipLastFrameDraw) {
                    return true;
                }
                return super.drawChild(canvas, view2, j);
            }

            @Override // com.google.android.exoplayer2.ui.AspectRatioFrameLayout, android.widget.FrameLayout, android.view.View
            public void onMeasure(int i, int i2) {
                float f;
                FirstFrameView firstFrameView;
                super.onMeasure(i, i2);
                if (PhotoViewer.this.textureImageView != null) {
                    ViewGroup.LayoutParams layoutParams = PhotoViewer.this.textureImageView.getLayoutParams();
                    layoutParams.width = getMeasuredWidth();
                    layoutParams.height = getMeasuredHeight();
                }
                if (PhotoViewer.this.videoTextureView instanceof VideoEditTextureView) {
                    PhotoViewer.this.videoTextureView.setPivotX(PhotoViewer.this.videoTextureView.getMeasuredWidth() / 2);
                    firstFrameView = PhotoViewer.this.firstFrameView;
                    f = PhotoViewer.this.videoTextureView.getMeasuredWidth() / 2;
                } else {
                    f = 0.0f;
                    if (PhotoViewer.this.videoTextureView != null) {
                        PhotoViewer.this.videoTextureView.setPivotX(0.0f);
                    }
                    if (PhotoViewer.this.videoSurfaceView != null) {
                        PhotoViewer.this.videoSurfaceView.setPivotX(0.0f);
                    }
                    firstFrameView = PhotoViewer.this.firstFrameView;
                }
                firstFrameView.setPivotX(f);
                PhotoViewer.this.checkFullscreenButton();
            }
        };
        this.aspectRatioFrameLayout = aspectRatioFrameLayout2;
        aspectRatioFrameLayout2.setWillNotDraw(false);
        this.aspectRatioFrameLayout.setVisibility(4);
        this.containerView.addView(this.aspectRatioFrameLayout, 0, LayoutHelper.createFrame(-1, -1, 17));
        this.usedSurfaceView = false;
        if (!this.imagesArrLocals.isEmpty()) {
            VideoEditTextureView videoEditTextureView = new VideoEditTextureView(this.parentActivity, this.videoPlayer);
            this.blurManager.resetBitmap();
            videoEditTextureView.updateUiBlurManager(this.blurManager);
            if (savedFilterState != null) {
                videoEditTextureView.setDelegate(new VideoEditTextureView.VideoEditTextureViewDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda74
                    @Override // org.telegram.ui.Components.VideoEditTextureView.VideoEditTextureViewDelegate
                    public final void onEGLThreadAvailable(FilterGLThread filterGLThread) {
                        PhotoViewer.lambda$createVideoTextureView$63(MediaController.SavedFilterState.this, filterGLThread);
                    }
                });
            }
            this.videoTextureView = videoEditTextureView;
        } else if (this.ALLOW_USE_SURFACE && this.injectingVideoPlayerSurface == null) {
            this.videoSurfaceView = new SurfaceView(this.parentActivity);
            this.usedSurfaceView = true;
        } else {
            this.videoTextureView = new TextureView(this.parentActivity);
        }
        SurfaceTexture surfaceTexture = this.injectingVideoPlayerSurface;
        if (surfaceTexture != null) {
            this.videoTextureView.setSurfaceTexture(surfaceTexture);
            this.textureUploaded = true;
            this.videoSizeSet = true;
            this.injectingVideoPlayerSurface = null;
        }
        TextureView textureView = this.videoTextureView;
        if (textureView != null) {
            textureView.setPivotX(0.0f);
            this.videoTextureView.setPivotY(0.0f);
            this.videoTextureView.setOpaque(false);
            aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            view = this.videoTextureView;
        } else {
            aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            view = this.videoSurfaceView;
        }
        aspectRatioFrameLayout.addView(view, LayoutHelper.createFrame(-1, -1, 17));
        FirstFrameView firstFrameView = new FirstFrameView(this.parentActivity);
        this.firstFrameView = firstFrameView;
        firstFrameView.setPivotX(0.0f);
        this.firstFrameView.setPivotY(0.0f);
        this.firstFrameView.setScaleType(ImageView.ScaleType.FIT_XY);
        this.aspectRatioFrameLayout.addView(this.firstFrameView, LayoutHelper.createFrame(-1, -1, 17));
        if (this.sendPhotoType == 1) {
            View view2 = new View(this.parentActivity);
            this.flashView = view2;
            view2.setBackgroundColor(-1);
            this.flashView.setAlpha(0.0f);
            this.aspectRatioFrameLayout.addView(this.flashView, LayoutHelper.createFrame(-1, -1, 17));
        }
    }

    public boolean cropMirror() {
        if (this.imageMoveAnimation != null || this.photoCropView == null) {
            return false;
        }
        this.mirror = 0.0f;
        this.animateToMirror = 1.0f;
        this.animationStartTime = System.currentTimeMillis();
        AnimatorSet animatorSet = new AnimatorSet();
        this.imageMoveAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
        this.imageMoveAnimation.setDuration(250L);
        this.imageMoveAnimation.setInterpolator(CubicBezierInterpolator.DEFAULT);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.40
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ImageView imageView;
                PorterDuffColorFilter porterDuffColorFilter = null;
                PhotoViewer.this.imageMoveAnimation = null;
                if (PhotoViewer.this.photoCropView == null) {
                    return;
                }
                if (PhotoViewer.this.photoCropView.mirror()) {
                    imageView = PhotoViewer.this.mirrorItem;
                    porterDuffColorFilter = new PorterDuffColorFilter(PhotoViewer.this.getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                } else {
                    imageView = PhotoViewer.this.mirrorItem;
                }
                imageView.setColorFilter(porterDuffColorFilter);
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.mirror = photoViewer.animateToMirror = 0.0f;
                PhotoViewer.this.containerView.invalidate();
            }
        });
        this.imageMoveAnimation.start();
        return !this.photoCropView.cropView.isMirrored();
    }

    public boolean cropRotate(float f) {
        return cropRotate(f, false, null);
    }

    private boolean cropRotate(final float f, boolean z, final Runnable runnable) {
        PhotoCropView photoCropView;
        if (this.imageMoveAnimation == null && (photoCropView = this.photoCropView) != null) {
            photoCropView.cropView.maximize(true);
            this.rotate = 0.0f;
            this.animateToRotate = f + 0.0f;
            if (z) {
                this.mirror = 0.0f;
                this.animateToMirror = 1.0f;
            }
            this.animationStartTime = System.currentTimeMillis();
            this.imageMoveAnimation = new AnimatorSet();
            if (this.sendPhotoType == 1) {
                this.animateToScale = 1.0f;
                this.scale = 1.0f;
            } else {
                ImageReceiver imageReceiver = this.centerImage;
                if (imageReceiver != null) {
                    int bitmapWidth = imageReceiver.getBitmapWidth();
                    int bitmapHeight = this.centerImage.getBitmapHeight();
                    if (Math.abs((((int) this.photoCropView.cropView.getStateOrientation()) / 90) % 2) != 1) {
                        bitmapHeight = bitmapWidth;
                        bitmapWidth = bitmapHeight;
                    }
                    MediaController.CropState cropState = this.editState.cropState;
                    if (cropState != null) {
                        bitmapHeight = (int) (bitmapHeight * cropState.cropPw);
                        bitmapWidth = (int) (bitmapWidth * cropState.cropPh);
                    }
                    float f2 = bitmapHeight;
                    float f3 = bitmapWidth;
                    float min = Math.min(getContainerViewWidth(1) / f2, getContainerViewHeight(1) / f3);
                    this.animateToScale = (Math.abs((f / 90.0f) % 2.0f) == 1.0f ? Math.min(getContainerViewWidth(1) / f3, getContainerViewHeight(1) / f2) : min) / min;
                }
            }
            if (this.sendPhotoType == 11) {
                this.scale *= scale1(false);
                this.animateToScale *= scale1(false);
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            final float rotation = this.photoCropView.wheelView.getRotation();
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda84
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$cropRotate$60(f, rotation, valueAnimator);
                }
            });
            this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ofFloat);
            this.imageMoveAnimation.setDuration(250L);
            this.imageMoveAnimation.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.41
                {
                    PhotoViewer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ImageView imageView;
                    PorterDuffColorFilter porterDuffColorFilter = null;
                    PhotoViewer.this.imageMoveAnimation = null;
                    PhotoViewer photoViewer = PhotoViewer.this;
                    photoViewer.rotate = photoViewer.animateToRotate = 0.0f;
                    PhotoViewer photoViewer2 = PhotoViewer.this;
                    photoViewer2.mirror = photoViewer2.animateToMirror = 0.0f;
                    PhotoViewer photoViewer3 = PhotoViewer.this;
                    photoViewer3.scale = photoViewer3.animateToScale = photoViewer3.scale1(false);
                    PhotoViewer.this.containerView.invalidate();
                    PhotoViewer.this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, PhotoViewer.this.scale1(false), 0.0f, 0.0f);
                    PhotoViewer.this.photoCropView.wheelView.setRotated(false);
                    if (Math.abs(f) > 0.0f) {
                        if (PhotoViewer.this.photoCropView.rotate(f)) {
                            imageView = PhotoViewer.this.rotateItem;
                            porterDuffColorFilter = new PorterDuffColorFilter(PhotoViewer.this.getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                        } else {
                            imageView = PhotoViewer.this.rotateItem;
                        }
                        imageView.setColorFilter(porterDuffColorFilter);
                    }
                    if (PhotoViewer.this.editState.cropState != null) {
                        MediaController.CropState cropState2 = PhotoViewer.this.editState.cropState;
                        PhotoViewer.this.editState.cropState.cropPy = 0.0f;
                        cropState2.cropPx = 0.0f;
                        MediaController.CropState cropState3 = PhotoViewer.this.editState.cropState;
                        PhotoViewer.this.editState.cropState.cropPh = 1.0f;
                        cropState3.cropPw = 1.0f;
                    }
                    Runnable runnable2 = runnable;
                    if (runnable2 != null) {
                        runnable2.run();
                    }
                }
            });
            this.imageMoveAnimation.start();
            return Math.abs(this.photoCropView.cropView.getStateOrientation() + f) > 0.01f;
        }
        return false;
    }

    private void detectFaces() {
        if (this.centerImage.getAnimation() != null || this.imagesArrLocals.isEmpty() || this.sendPhotoType == 1) {
            return;
        }
        String imageKey = this.centerImage.getImageKey();
        String str = this.currentImageFaceKey;
        if (str == null || !str.equals(imageKey)) {
            this.currentImageHasFace = 0;
            detectFaces(imageKey, this.centerImage.getBitmapSafe(), this.centerImage.getOrientation());
        }
    }

    private void detectFaces(final String str, final ImageReceiver.BitmapHolder bitmapHolder, final int i) {
        if (str == null || bitmapHolder == null || bitmapHolder.bitmap == null) {
            return;
        }
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda23
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$detectFaces$69(bitmapHolder, i, str);
            }
        });
    }

    public void didChangedCompressionLevel(boolean z) {
        SharedPreferences.Editor edit = MessagesController.getGlobalMainSettings().edit();
        edit.putInt(String.format("compress_video_%d", Integer.valueOf(this.compressionsCount)), this.selectedCompression);
        edit.commit();
        updateWidthHeightBitrateForCompression();
        updateVideoInfo();
        if (z) {
            requestVideoPreview(1);
        }
    }

    public void dismissInternal() {
        try {
            if (this.windowView.getParent() != null) {
                Activity activity = this.parentActivity;
                if (activity instanceof LaunchActivity) {
                    ((LaunchActivity) activity).drawerLayoutContainer.setAllowDrawContent(true);
                }
                ((WindowManager) this.parentActivity.getSystemService("window")).removeView(this.windowView);
                onHideView();
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:896:0x09a6, code lost:
        if (r48 != false) goto L392;
     */
    /* JADX WARN: Code restructure failed: missing block: B:899:0x09ae, code lost:
        if (r48 != false) goto L392;
     */
    /* JADX WARN: Code restructure failed: missing block: B:900:0x09b0, code lost:
        r41.imageBoundsMatrix.preRotate(r0);
     */
    /* JADX WARN: Removed duplicated region for block: B:1004:0x0d6e  */
    /* JADX WARN: Removed duplicated region for block: B:1014:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:600:0x025d  */
    /* JADX WARN: Removed duplicated region for block: B:611:0x029b  */
    /* JADX WARN: Removed duplicated region for block: B:634:0x0347  */
    /* JADX WARN: Removed duplicated region for block: B:635:0x034f  */
    /* JADX WARN: Removed duplicated region for block: B:638:0x035b  */
    /* JADX WARN: Removed duplicated region for block: B:642:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:647:0x03d8  */
    /* JADX WARN: Removed duplicated region for block: B:657:0x03fe  */
    /* JADX WARN: Removed duplicated region for block: B:665:0x0413 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:672:0x0445  */
    /* JADX WARN: Removed duplicated region for block: B:673:0x0448  */
    /* JADX WARN: Removed duplicated region for block: B:676:0x045a  */
    /* JADX WARN: Removed duplicated region for block: B:683:0x048f  */
    /* JADX WARN: Removed duplicated region for block: B:687:0x04af  */
    /* JADX WARN: Removed duplicated region for block: B:688:0x04b1  */
    /* JADX WARN: Removed duplicated region for block: B:691:0x04d2  */
    /* JADX WARN: Removed duplicated region for block: B:693:0x04e3  */
    /* JADX WARN: Removed duplicated region for block: B:705:0x0533 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:731:0x0595  */
    /* JADX WARN: Removed duplicated region for block: B:752:0x0759  */
    /* JADX WARN: Removed duplicated region for block: B:757:0x0771  */
    /* JADX WARN: Removed duplicated region for block: B:779:0x079a  */
    /* JADX WARN: Removed duplicated region for block: B:820:0x081f  */
    /* JADX WARN: Removed duplicated region for block: B:823:0x082a  */
    /* JADX WARN: Removed duplicated region for block: B:832:0x0843  */
    /* JADX WARN: Removed duplicated region for block: B:836:0x0865  */
    /* JADX WARN: Removed duplicated region for block: B:840:0x0871  */
    /* JADX WARN: Removed duplicated region for block: B:862:0x08b7  */
    /* JADX WARN: Removed duplicated region for block: B:871:0x08ee  */
    /* JADX WARN: Removed duplicated region for block: B:874:0x08f9  */
    /* JADX WARN: Removed duplicated region for block: B:885:0x094d  */
    /* JADX WARN: Removed duplicated region for block: B:888:0x0992  */
    /* JADX WARN: Removed duplicated region for block: B:891:0x099a  */
    /* JADX WARN: Removed duplicated region for block: B:901:0x09b6  */
    /* JADX WARN: Removed duplicated region for block: B:903:0x09bc  */
    /* JADX WARN: Removed duplicated region for block: B:918:0x09e4  */
    /* JADX WARN: Removed duplicated region for block: B:919:0x09f1  */
    /* JADX WARN: Removed duplicated region for block: B:922:0x09f9  */
    /* JADX WARN: Removed duplicated region for block: B:933:0x0a2c  */
    /* JADX WARN: Removed duplicated region for block: B:934:0x0ad0  */
    /* JADX WARN: Removed duplicated region for block: B:937:0x0ada  */
    /* JADX WARN: Removed duplicated region for block: B:939:0x0ae4  */
    /* JADX WARN: Removed duplicated region for block: B:944:0x0b4b  */
    /* JADX WARN: Removed duplicated region for block: B:946:0x0b50  */
    /* JADX WARN: Removed duplicated region for block: B:949:0x0b58  */
    /* JADX WARN: Removed duplicated region for block: B:953:0x0b67  */
    /* JADX WARN: Removed duplicated region for block: B:956:0x0bb0  */
    /* JADX WARN: Removed duplicated region for block: B:963:0x0c31  */
    /* JADX WARN: Removed duplicated region for block: B:992:0x0cef  */
    /* JADX WARN: Removed duplicated region for block: B:995:0x0cfc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawCaptionBlur(Canvas canvas, BlurringShader.StoryBlurDrawer storyBlurDrawer, int i, int i2, boolean z, boolean z2, boolean z3) {
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        ImageReceiver imageReceiver;
        ImageReceiver imageReceiver2;
        int i3;
        int i4;
        int i5;
        float f8;
        float f9;
        float f10;
        float f11;
        float f12;
        int i6;
        float f13;
        float f14;
        float f15;
        boolean z4;
        float f16;
        int bitmapWidth;
        int bitmapHeight;
        float f17;
        float f18;
        float f19;
        int i7;
        float f20;
        float f21;
        ImageReceiver imageReceiver3;
        float f22;
        int i8;
        float f23;
        float f24;
        boolean z5;
        float f25;
        float f26;
        boolean z6;
        boolean z7;
        float f27;
        float f28;
        boolean z8;
        PhotoViewerWebView photoViewerWebView;
        float f29;
        Bitmap bitmap;
        float f30;
        int i9;
        int i10;
        float f31;
        int i11;
        float f32;
        float f33;
        float f34;
        float f35;
        float f36;
        float f37;
        TextureView textureView;
        float f38;
        float f39;
        float minScale;
        int i12;
        float rotation;
        int i13;
        int i14;
        float min;
        float f40;
        float f41;
        Bitmap bitmap2;
        Bitmap bitmap3;
        int containerViewHeight;
        ImageReceiver imageReceiver4;
        float f42;
        Paint paint;
        int i15;
        ImageReceiver imageReceiver5;
        float f43;
        boolean z9;
        Bitmap bitmap4;
        Bitmap bitmap5;
        AspectRatioFrameLayout aspectRatioFrameLayout;
        float f44;
        float f45;
        float f46;
        int i16;
        int i17;
        ImageReceiver imageReceiver6;
        boolean z10;
        Bitmap bitmap6;
        ImageReceiver imageReceiver7;
        Paint paint2;
        boolean hasDisplayList;
        int width;
        int height;
        RecordingCanvas beginRecording;
        RenderEffect createColorFilterEffect;
        Shader.TileMode tileMode;
        RenderEffect createBlurEffect;
        RenderEffect createChainEffect;
        BlurringShader.StoryBlurDrawer storyBlurDrawer2 = storyBlurDrawer;
        if (BLUR_RENDERNODE()) {
            if (this.renderNode != null) {
                if (storyBlurDrawer2.renderNode == null) {
                    RenderNode renderNode = new RenderNode("photoviewer blur");
                    storyBlurDrawer2.renderNode = renderNode;
                    createColorFilterEffect = RenderEffect.createColorFilterEffect(new ColorMatrixColorFilter(storyBlurDrawer2.colorMatrix));
                    tileMode = Shader.TileMode.DECAL;
                    createBlurEffect = RenderEffect.createBlurEffect(AndroidUtilities.dp(35.0f), AndroidUtilities.dp(35.0f), tileMode);
                    createChainEffect = RenderEffect.createChainEffect(createColorFilterEffect, createBlurEffect);
                    renderNode.setRenderEffect(createChainEffect);
                }
                RenderNode renderNode2 = storyBlurDrawer2.renderNode;
                width = this.renderNode.getWidth();
                height = this.renderNode.getHeight();
                renderNode2.setPosition(0, 0, width, height);
                beginRecording = storyBlurDrawer2.renderNode.beginRecording();
                beginRecording.drawColor(i);
                beginRecording.drawRenderNode(this.renderNode);
                storyBlurDrawer2.renderNode.endRecording();
            }
            RenderNode renderNode3 = storyBlurDrawer2.renderNode;
            if (renderNode3 != null) {
                hasDisplayList = renderNode3.hasDisplayList();
                if (hasDisplayList) {
                    canvas.drawColor(i);
                    canvas.drawRenderNode(storyBlurDrawer2.renderNode);
                }
            }
            canvas.drawColor(i2);
            return;
        }
        if (SharedConfig.photoViewerBlur) {
            AnimatedFloat animatedFloat = this.blurAlpha;
            int i18 = this.animationInProgress;
            f = animatedFloat.set(i18 == 0 || i18 == 2 || i18 == 3);
        } else {
            f = 1.0f;
        }
        storyBlurDrawer2.paint.setShader(null);
        if (i != 0) {
            storyBlurDrawer2.paint.setColor(i);
            storyBlurDrawer2.paint.setAlpha((int) (paint2.getAlpha() * AndroidUtilities.lerp(0.7f, 1.0f, z2 ? f : 1.0f)));
            canvas.drawPaint(storyBlurDrawer2.paint);
        }
        if (!SharedConfig.photoViewerBlur || this.animationInProgress != 0) {
            float f47 = f;
            this.blurAlpha.set(0.0f, true);
            if (i2 != 0) {
                storyBlurDrawer2.paint.setColor(i2);
                Paint paint3 = storyBlurDrawer2.paint;
                float alpha = paint3.getAlpha();
                if (!z2) {
                    f47 = 1.0f;
                }
                paint3.setAlpha((int) (alpha * AndroidUtilities.lerp(0.7f, 1.0f, f47)));
                canvas.drawPaint(storyBlurDrawer2.paint);
                return;
            }
            return;
        }
        if (z3) {
            if (this.centerImageInsideBlur == null) {
                AnimatedFloat[] animatedFloatArr = new AnimatedFloat[3];
                this.centerImageInsideBlur = animatedFloatArr;
                PhotoViewer$$ExternalSyntheticLambda21 photoViewer$$ExternalSyntheticLambda21 = new PhotoViewer$$ExternalSyntheticLambda21(this);
                CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT;
                f2 = f;
                animatedFloatArr[0] = new AnimatedFloat(photoViewer$$ExternalSyntheticLambda21, 180L, cubicBezierInterpolator);
                this.centerImageInsideBlur[1] = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda21(this), 180L, cubicBezierInterpolator);
                this.centerImageInsideBlur[2] = new AnimatedFloat(new PhotoViewer$$ExternalSyntheticLambda21(this), 180L, cubicBezierInterpolator);
            } else {
                f2 = f;
            }
            this.centerImageInsideBlur[0].set(1.0f, true);
            this.centerImageInsideBlur[2].set(1.0f, true);
            if (this.blurBounds == null) {
                this.blurBounds = new RectF();
            }
            if (this.imageBounds == null) {
                this.imageBounds = new RectF();
            }
            if (this.imageBoundsMatrix == null) {
                this.imageBoundsMatrix = new Matrix();
            }
            if (this.imageBoundsPoints == null) {
                this.imageBoundsPoints = new float[8];
            }
            this.blurBounds.set(this.captionEdit.getBounds());
            this.blurBounds.offset(this.captionEditContainer.getX(), this.captionEditContainer.getY());
            this.blurBounds.offset(this.captionEdit.getX(), this.captionEdit.getY());
            this.imageBoundsMatrix.reset();
        } else {
            f2 = f;
        }
        int saveCount = canvas.getSaveCount();
        if (this.padImageForHorizontalInsets) {
            canvas.save();
            canvas.translate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            if (z3) {
                this.imageBoundsMatrix.preTranslate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            }
        }
        if (this.imageMoveAnimation != null) {
            float lerp = AndroidUtilities.lerp(this.mirror, this.animateToMirror, this.animationValue);
            float lerp2 = AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue);
            f3 = AndroidUtilities.lerp(this.rotate, this.animateToRotate, this.animationValue);
            f4 = AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue);
            f5 = AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue);
            f7 = lerp;
            f6 = lerp2;
        } else {
            float f48 = this.scale;
            float f49 = this.mirror;
            f3 = this.rotate;
            f4 = this.translationY;
            f5 = this.translationX;
            if (this.animationStartTime != 0) {
                f5 = this.animateToX;
                f4 = this.animateToY;
                f48 = this.animateToScale;
            }
            f6 = f48;
            f7 = f49;
        }
        float f50 = f3;
        float f51 = f5;
        float f52 = f4;
        int containerViewWidth = getContainerViewWidth();
        int containerViewHeight2 = getContainerViewHeight();
        if (this.currentEditMode == 0 && this.sendPhotoType != 1 && this.scale >= 1.0f && !this.zoomAnimation && !this.zooming) {
            if (f51 > this.maxX + AndroidUtilities.dp(5.0f)) {
                imageReceiver7 = this.leftImage;
            } else if (f51 < this.minX - AndroidUtilities.dp(5.0f)) {
                imageReceiver7 = this.rightImage;
            }
            imageReceiver = imageReceiver7;
            if (imageReceiver == this.rightImage) {
                float f53 = z3 ? this.centerImageInsideBlur[0].set(1.0f, true) : 1.0f;
                if (!this.zoomAnimation) {
                    float f54 = this.minX;
                    if (f51 < f54) {
                        float min2 = Math.min(1.0f, (f54 - f51) / containerViewWidth);
                        f45 = (1.0f - min2) * 0.3f;
                        f44 = (-containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2);
                        f46 = min2;
                        if (imageReceiver.hasBitmapImage()) {
                            canvas.save();
                            canvas.translate(containerViewWidth / 2, containerViewHeight2 / 2);
                            canvas.translate((AndroidUtilities.dp(30.0f) / 2) + containerViewWidth + f44, 0.0f);
                            float f55 = 1.0f - f45;
                            canvas.scale(f55, f55);
                            int bitmapWidth2 = imageReceiver.getBitmapWidth();
                            int bitmapHeight2 = imageReceiver.getBitmapHeight();
                            if (this.rightImageIsVideo || this.rightCropState == null || !this.rightCropTransform.hasViewTransform()) {
                                i16 = bitmapHeight2;
                                i17 = bitmapWidth2;
                                imageReceiver6 = imageReceiver;
                                i3 = containerViewHeight2;
                                i4 = containerViewWidth;
                                i5 = saveCount;
                                f8 = f7;
                                f9 = f2;
                                f12 = f50;
                                i6 = 1;
                            } else {
                                i16 = bitmapHeight2;
                                i17 = bitmapWidth2;
                                imageReceiver6 = imageReceiver;
                                i3 = containerViewHeight2;
                                i4 = containerViewWidth;
                                i5 = saveCount;
                                f8 = f7;
                                f9 = f2;
                                f12 = f50;
                                i6 = 1;
                                applyCrop(canvas, containerViewWidth, containerViewHeight2, i17, i16, 1.0f, this.rightCropTransform, this.rightCropState);
                            }
                            float f56 = i17;
                            float f57 = i16;
                            float min3 = Math.min(i4 / f56, i3 / f57);
                            int i19 = (int) (f56 * min3);
                            int i20 = (int) (f57 * min3);
                            if (!this.imagesArrLocals.isEmpty()) {
                                if (this.currentEditMode == i6 || this.sendPhotoType == i6) {
                                    z10 = this.rightCropTransform.isMirrored();
                                } else {
                                    MediaController.CropState cropState = this.rightCropState;
                                    if (cropState != null && cropState.mirrored) {
                                        z10 = true;
                                    }
                                }
                                if (z10) {
                                    f11 = 1.0f;
                                } else {
                                    f11 = 1.0f;
                                    canvas.scale(-1.0f, 1.0f);
                                }
                                imageReceiver2 = imageReceiver6;
                                bitmap6 = this.rightBlur.getBitmap(imageReceiver2);
                                if (bitmap6 == null) {
                                    storyBlurDrawer2.paint.setShader(null);
                                    storyBlurDrawer2.paint.setAlpha((int) (f46 * 255.0f * f9 * f53));
                                    canvas.scale(bitmap6.getWidth() / (bitmap6.getWidth() - 3.0f), bitmap6.getHeight() / (bitmap6.getHeight() - 3.0f));
                                    canvas.translate((-i19) / 2, (-i20) / 2);
                                    canvas.scale((i19 * f11) / bitmap6.getWidth(), (i20 * f11) / bitmap6.getHeight());
                                    f10 = 0.0f;
                                    if (z) {
                                        int i21 = (int) 0.0f;
                                        canvas.clipRect(i21, i21, bitmap6.getWidth() - i21, bitmap6.getHeight() - i21);
                                    }
                                    canvas.drawBitmap(bitmap6, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                } else {
                                    f10 = 0.0f;
                                }
                                canvas.restore();
                                if (!this.zoomAnimation) {
                                    float f58 = this.maxX;
                                    if (f51 > f58 && this.currentEditMode == 0 && this.sendPhotoType != i6) {
                                        float min4 = Math.min(f11, (f51 - f58) / i4);
                                        f15 = min4 * 0.3f;
                                        f14 = f11 - min4;
                                        f13 = this.maxX;
                                        z4 = (this.videoSizeSet || (aspectRatioFrameLayout = this.aspectRatioFrameLayout) == null || aspectRatioFrameLayout.getVisibility() != 0) ? false : true;
                                        if (!this.centerImage.hasBitmapImage() || (z4 && this.textureUploaded)) {
                                            canvas.save();
                                            int i22 = i4 / 2;
                                            int i23 = i3 / 2;
                                            canvas.translate(getAdditionX(this.currentEditMode) + i22, i23 + getAdditionY(this.currentEditMode));
                                            canvas.translate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                            f16 = f6 - f15;
                                            canvas.scale(f16, f16);
                                            float f59 = f12;
                                            canvas.rotate(f59);
                                            if (z3) {
                                                this.imageBoundsMatrix.preTranslate(i22 + getAdditionX(this.currentEditMode), i23 + getAdditionY(this.currentEditMode));
                                                this.imageBoundsMatrix.preTranslate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                                this.imageBoundsMatrix.preScale(f16, f16, f10, f10);
                                                this.imageBoundsMatrix.preRotate(f59);
                                            }
                                            if (this.currentEditMode == 3 && this.photoPaintView != null) {
                                                float emojiPadding = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) >= AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                                canvas.translate(f10, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding);
                                                if (z3) {
                                                    this.imageBoundsMatrix.preTranslate(f10, emojiPadding * (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()));
                                                }
                                            }
                                            if (!z4 && this.textureUploaded && this.videoSizeSet) {
                                                View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                                                bitmapWidth = view.getMeasuredWidth();
                                                bitmapHeight = view.getMeasuredHeight();
                                            } else {
                                                bitmapWidth = this.centerImage.getBitmapWidth();
                                                bitmapHeight = this.centerImage.getBitmapHeight();
                                            }
                                            float f60 = i4;
                                            f17 = bitmapWidth;
                                            f18 = f60 / f17;
                                            float f61 = i3;
                                            int i24 = bitmapWidth;
                                            f19 = bitmapHeight;
                                            int i25 = bitmapHeight;
                                            float f62 = f61 / f19;
                                            float min5 = Math.min(f18, f62);
                                            float f63 = f62;
                                            i7 = i3;
                                            float f64 = (int) (f17 * min5);
                                            float f65 = (int) (f19 * min5);
                                            if (!this.pipAnimationInProgress || ((z4 && ((this.textureUploaded || this.videoSizeSet) && this.videoCrossfadeStarted && this.videoCrossfadeAlpha == 1.0f)) || (this.videoFrameBitmap != null && this.isCurrentVideo))) {
                                                f20 = f16;
                                                f21 = f19;
                                                imageReceiver3 = imageReceiver2;
                                                f22 = f17;
                                                i8 = i4;
                                                f23 = f18;
                                                f24 = f64;
                                            } else {
                                                float bitmapWidth3 = this.centerImage.getBitmapWidth();
                                                float bitmapHeight3 = this.centerImage.getBitmapHeight();
                                                if (this.isCurrentVideo && this.currentEditMode == 0) {
                                                    i8 = i4;
                                                    if (this.sendPhotoType == 1) {
                                                        min = getCropFillScale(false);
                                                        f24 = bitmapWidth3 * min;
                                                        f65 = min * bitmapHeight3;
                                                        if (this.isCurrentVideo) {
                                                            f20 = f16;
                                                            f21 = f19;
                                                            imageReceiver3 = imageReceiver2;
                                                            f22 = f17;
                                                            f23 = f18;
                                                        } else {
                                                            if (z3) {
                                                                imageReceiver3 = imageReceiver2;
                                                                this.imageBoundsMatrix.preTranslate((-f24) / 2.0f, (-f65) / 2.0f);
                                                                float[] fArr = this.imageBoundsPoints;
                                                                fArr[0] = 0.0f;
                                                                fArr[1] = 0.0f;
                                                                fArr[2] = f24;
                                                                fArr[3] = 0.0f;
                                                                fArr[4] = f24;
                                                                fArr[5] = f65;
                                                                fArr[6] = 0.0f;
                                                                fArr[7] = f65;
                                                                this.imageBoundsMatrix.mapPoints(fArr);
                                                                RectF rectF = this.imageBounds;
                                                                float[] fArr2 = this.imageBoundsPoints;
                                                                f20 = f16;
                                                                float min6 = Math.min(fArr2[0], fArr2[2]);
                                                                float[] fArr3 = this.imageBoundsPoints;
                                                                float min7 = Math.min(min6, Math.min(fArr3[4], fArr3[6]));
                                                                float[] fArr4 = this.imageBoundsPoints;
                                                                f22 = f17;
                                                                float min8 = Math.min(fArr4[1], fArr4[3]);
                                                                float[] fArr5 = this.imageBoundsPoints;
                                                                float min9 = Math.min(min8, Math.min(fArr5[5], fArr5[7]));
                                                                float[] fArr6 = this.imageBoundsPoints;
                                                                f21 = f19;
                                                                float max = Math.max(fArr6[0], fArr6[2]);
                                                                float[] fArr7 = this.imageBoundsPoints;
                                                                float max2 = Math.max(max, Math.max(fArr7[4], fArr7[6]));
                                                                float[] fArr8 = this.imageBoundsPoints;
                                                                f23 = f18;
                                                                float max3 = Math.max(fArr8[1], fArr8[3]);
                                                                float[] fArr9 = this.imageBoundsPoints;
                                                                rectF.set(min7, min9, max2, Math.max(max3, Math.max(fArr9[5], fArr9[7])));
                                                                f40 = this.centerImageInsideBlur[1].set(this.blurBounds.intersect(this.imageBounds));
                                                            } else {
                                                                f20 = f16;
                                                                f21 = f19;
                                                                imageReceiver3 = imageReceiver2;
                                                                f22 = f17;
                                                                f23 = f18;
                                                                f40 = 1.0f;
                                                            }
                                                            if (this.videoCrossfadeAlpha >= 1.0f || (bitmap3 = this.centerBlur.getBitmap(this.centerImage)) == null) {
                                                                f41 = 0.0f;
                                                            } else {
                                                                canvas.save();
                                                                storyBlurDrawer2.paint.setShader(null);
                                                                storyBlurDrawer2.paint.setAlpha((int) (f40 * 255.0f * f14 * (1.0f - this.videoCrossfadeAlpha) * f9));
                                                                canvas.scale(bitmap3.getWidth() / (bitmap3.getWidth() - 3.0f), bitmap3.getHeight() / (bitmap3.getHeight() - 3.0f));
                                                                canvas.translate((-f24) / 2.0f, (-f65) / 2.0f);
                                                                canvas.scale((f24 * 1.0f) / bitmap3.getWidth(), (f65 * 1.0f) / bitmap3.getHeight());
                                                                f41 = 0.0f;
                                                                if (z) {
                                                                    int i26 = (int) 0.0f;
                                                                    canvas.clipRect(i26, i26, bitmap3.getWidth() - i26, bitmap3.getHeight() - i26);
                                                                }
                                                                canvas.drawBitmap(bitmap3, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                canvas.restore();
                                                            }
                                                            if (this.videoCrossfadeAlpha > f41 && (bitmap2 = this.blurManager.getBitmap()) != null) {
                                                                canvas.save();
                                                                storyBlurDrawer2.paint.setShader(null);
                                                                storyBlurDrawer2.paint.setAlpha((int) (f40 * 255.0f * f14 * this.videoCrossfadeAlpha * f9));
                                                                canvas.scale(bitmap2.getWidth() / (bitmap2.getWidth() - 3.0f), bitmap2.getHeight() / (bitmap2.getHeight() - 3.0f));
                                                                canvas.translate((-f24) / 2.0f, (-f65) / 2.0f);
                                                                canvas.scale((f24 * 1.0f) / bitmap2.getWidth(), (f65 * 1.0f) / bitmap2.getHeight());
                                                                if (z) {
                                                                    int i27 = (int) 0.0f;
                                                                    canvas.clipRect(i27, i27, bitmap2.getWidth() - i27, bitmap2.getHeight() - i27);
                                                                }
                                                                canvas.drawBitmap(bitmap2, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                canvas.restore();
                                                            }
                                                            z5 = true;
                                                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                                                f25 = f14;
                                                                f26 = f9;
                                                            } else {
                                                                int orientation = this.cropTransform.getOrientation();
                                                                if (orientation == 90 || orientation == 270) {
                                                                    i9 = i24;
                                                                    i10 = i25;
                                                                } else {
                                                                    i10 = i24;
                                                                    i9 = i25;
                                                                }
                                                                if (this.sendPhotoType == 1 || (this.currentEditMode != 3 && this.switchingToMode != 3)) {
                                                                    if (this.imageMoveAnimation == null || (i11 = this.switchingToMode) == -1) {
                                                                        int i28 = this.currentEditMode;
                                                                        if (i28 == 2 || i28 == 3) {
                                                                            f31 = 0.0f;
                                                                            float cropPw = this.cropTransform.getCropPw();
                                                                            float cropPh = this.cropTransform.getCropPh();
                                                                            f32 = i10;
                                                                            f33 = 1.0f - f31;
                                                                            f34 = i9;
                                                                            f35 = (int) ((cropPw + ((1.0f - cropPw) * f33)) * f32);
                                                                            f36 = f60 / f35;
                                                                            f37 = (int) ((cropPh + ((1.0f - cropPh) * f33)) * f34);
                                                                            if (f36 * f37 > f61) {
                                                                                f36 = f61 / f37;
                                                                            }
                                                                            f26 = f9;
                                                                            f25 = f14;
                                                                            if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
                                                                                float f66 = f35 * f36;
                                                                                float f67 = f37 * f36;
                                                                                if (f23 * f21 <= f61) {
                                                                                    f63 = f23;
                                                                                }
                                                                                float f68 = f66 + ((((f22 * f63) / f20) - f66) * f33);
                                                                                float f69 = f67 + ((((f21 * f63) / f20) - f67) * f33);
                                                                                canvas.clipRect((-f68) / 2.0f, (-f69) / 2.0f, f68 / 2.0f, f69 / 2.0f);
                                                                            }
                                                                            if (this.sendPhotoType != 1 || this.cropTransform.hasViewTransform()) {
                                                                                if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                                                                                    textureView = this.videoTextureView;
                                                                                    if (textureView != null) {
                                                                                        textureView.setScaleX(this.cropTransform.isMirrored() ? -1.0f : 1.0f);
                                                                                        FirstFrameView firstFrameView = this.firstFrameView;
                                                                                        if (firstFrameView != null) {
                                                                                            firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                                                                                        }
                                                                                    }
                                                                                    float scale = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                    f38 = f60 / f32;
                                                                                    if (f38 * f34 > f61) {
                                                                                        f38 = f61 / f34;
                                                                                    }
                                                                                    f39 = scale * (f38 / min5);
                                                                                    if (this.sendPhotoType == 1) {
                                                                                        if (this.currentEditMode == 3 || (i12 = this.switchingToMode) == 3) {
                                                                                            minScale = ((this.cropTransform.getMinScale() - 1.0f) * f33) + 1.0f;
                                                                                        } else if (i12 == 0) {
                                                                                            minScale = this.cropTransform.getMinScale();
                                                                                        }
                                                                                        f39 /= minScale;
                                                                                    }
                                                                                } else {
                                                                                    TextureView textureView2 = this.videoTextureView;
                                                                                    if (textureView2 != null) {
                                                                                        MediaController.CropState cropState2 = this.editState.cropState;
                                                                                        textureView2.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                                                                                        FirstFrameView firstFrameView2 = this.firstFrameView;
                                                                                        if (firstFrameView2 != null) {
                                                                                            firstFrameView2.setScaleX(this.videoTextureView.getScaleX());
                                                                                        }
                                                                                    }
                                                                                    MediaController.CropState cropState3 = this.editState.cropState;
                                                                                    float f70 = cropState3 != null ? cropState3.cropScale : 1.0f;
                                                                                    f39 = f70 * ((f36 / min5) / (((f70 - 1.0f) * f33) + 1.0f));
                                                                                }
                                                                                canvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                canvas.scale(f39, f39);
                                                                                canvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                if (z3) {
                                                                                    this.imageBoundsMatrix.preTranslate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                    this.imageBoundsMatrix.preScale(f39, f39);
                                                                                    this.imageBoundsMatrix.preTranslate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                                }
                                                                                rotation = this.cropTransform.getRotation() + orientation;
                                                                                if (rotation > 180.0f) {
                                                                                    rotation -= 360.0f;
                                                                                }
                                                                                if (this.sendPhotoType == 1 || !(this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                    rotation *= f31;
                                                                                    canvas.rotate(rotation);
                                                                                } else {
                                                                                    canvas.rotate(rotation);
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        int i29 = this.currentEditMode;
                                                                        if (i29 != 1 && i11 != 1 && ((i29 != 2 && i29 != 3) || i11 != -1)) {
                                                                            f31 = this.animationValue;
                                                                            if (i11 != 0) {
                                                                                f31 = 1.0f - f31;
                                                                            }
                                                                            float cropPw2 = this.cropTransform.getCropPw();
                                                                            float cropPh2 = this.cropTransform.getCropPh();
                                                                            f32 = i10;
                                                                            f33 = 1.0f - f31;
                                                                            f34 = i9;
                                                                            f35 = (int) ((cropPw2 + ((1.0f - cropPw2) * f33)) * f32);
                                                                            f36 = f60 / f35;
                                                                            f37 = (int) ((cropPh2 + ((1.0f - cropPh2) * f33)) * f34);
                                                                            if (f36 * f37 > f61) {
                                                                            }
                                                                            f26 = f9;
                                                                            f25 = f14;
                                                                            if (this.sendPhotoType != 1) {
                                                                                float f662 = f35 * f36;
                                                                                float f672 = f37 * f36;
                                                                                if (f23 * f21 <= f61) {
                                                                                }
                                                                                float f682 = f662 + ((((f22 * f63) / f20) - f662) * f33);
                                                                                float f692 = f672 + ((((f21 * f63) / f20) - f672) * f33);
                                                                                canvas.clipRect((-f682) / 2.0f, (-f692) / 2.0f, f682 / 2.0f, f692 / 2.0f);
                                                                            }
                                                                            if (this.sendPhotoType != 1) {
                                                                            }
                                                                            if (this.currentEditMode != 1) {
                                                                            }
                                                                            textureView = this.videoTextureView;
                                                                            if (textureView != null) {
                                                                            }
                                                                            float scale2 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                            f38 = f60 / f32;
                                                                            if (f38 * f34 > f61) {
                                                                            }
                                                                            f39 = scale2 * (f38 / min5);
                                                                            if (this.sendPhotoType == 1) {
                                                                            }
                                                                            canvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                            canvas.scale(f39, f39);
                                                                            canvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                            if (z3) {
                                                                            }
                                                                            rotation = this.cropTransform.getRotation() + orientation;
                                                                            if (rotation > 180.0f) {
                                                                            }
                                                                            if (this.sendPhotoType == 1) {
                                                                            }
                                                                            rotation *= f31;
                                                                            canvas.rotate(rotation);
                                                                        }
                                                                    }
                                                                }
                                                                f31 = 1.0f;
                                                                float cropPw22 = this.cropTransform.getCropPw();
                                                                float cropPh22 = this.cropTransform.getCropPh();
                                                                f32 = i10;
                                                                f33 = 1.0f - f31;
                                                                f34 = i9;
                                                                f35 = (int) ((cropPw22 + ((1.0f - cropPw22) * f33)) * f32);
                                                                f36 = f60 / f35;
                                                                f37 = (int) ((cropPh22 + ((1.0f - cropPh22) * f33)) * f34);
                                                                if (f36 * f37 > f61) {
                                                                }
                                                                f26 = f9;
                                                                f25 = f14;
                                                                if (this.sendPhotoType != 1) {
                                                                }
                                                                if (this.sendPhotoType != 1) {
                                                                }
                                                                if (this.currentEditMode != 1) {
                                                                }
                                                                textureView = this.videoTextureView;
                                                                if (textureView != null) {
                                                                }
                                                                float scale22 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                f38 = f60 / f32;
                                                                if (f38 * f34 > f61) {
                                                                }
                                                                f39 = scale22 * (f38 / min5);
                                                                if (this.sendPhotoType == 1) {
                                                                }
                                                                canvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                canvas.scale(f39, f39);
                                                                canvas.translate(this.cropTransform.getCropPx() * f32 * min5 * f31, this.cropTransform.getCropPy() * f34 * min5 * f31);
                                                                if (z3) {
                                                                }
                                                                rotation = this.cropTransform.getRotation() + orientation;
                                                                if (rotation > 180.0f) {
                                                                }
                                                                if (this.sendPhotoType == 1) {
                                                                }
                                                                rotation *= f31;
                                                                canvas.rotate(rotation);
                                                            }
                                                            if (z5) {
                                                                if (!this.imagesArrLocals.isEmpty()) {
                                                                    if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                                        z7 = this.cropTransform.isMirrored();
                                                                    } else {
                                                                        MediaController.CropState cropState4 = this.editState.cropState;
                                                                        if (cropState4 != null && cropState4.mirrored) {
                                                                            z7 = true;
                                                                        }
                                                                    }
                                                                    if (z7) {
                                                                        f27 = 1.0f;
                                                                        f28 = 0.0f;
                                                                        z8 = false;
                                                                    } else {
                                                                        canvas.save();
                                                                        f27 = 1.0f;
                                                                        canvas.scale(-1.0f, 1.0f);
                                                                        f28 = 0.0f;
                                                                        z8 = true;
                                                                    }
                                                                    if (f8 > f28) {
                                                                        if (z8) {
                                                                            f30 = 2.0f;
                                                                        } else {
                                                                            canvas.save();
                                                                            f30 = 2.0f;
                                                                            z8 = true;
                                                                        }
                                                                        canvas.scale(f27 - (f8 * f30), f27);
                                                                        canvas.skew(0.0f, f8 * 4.0f * (f27 - f8) * 0.25f);
                                                                    }
                                                                    photoViewerWebView = this.photoViewerWebView;
                                                                    if (photoViewerWebView != null || !photoViewerWebView.isLoaded()) {
                                                                        if (z3) {
                                                                            f29 = 1.0f;
                                                                        } else {
                                                                            this.imageBoundsMatrix.preTranslate((-f24) / 2.0f, (-f65) / 2.0f);
                                                                            float[] fArr10 = this.imageBoundsPoints;
                                                                            fArr10[0] = 0.0f;
                                                                            fArr10[1] = 0.0f;
                                                                            fArr10[2] = f24;
                                                                            fArr10[3] = 0.0f;
                                                                            fArr10[4] = f24;
                                                                            fArr10[5] = f65;
                                                                            fArr10[6] = 0.0f;
                                                                            fArr10[7] = f65;
                                                                            this.imageBoundsMatrix.mapPoints(fArr10);
                                                                            RectF rectF2 = this.imageBounds;
                                                                            float[] fArr11 = this.imageBoundsPoints;
                                                                            float min10 = Math.min(fArr11[0], fArr11[2]);
                                                                            float[] fArr12 = this.imageBoundsPoints;
                                                                            float min11 = Math.min(min10, Math.min(fArr12[4], fArr12[6]));
                                                                            float[] fArr13 = this.imageBoundsPoints;
                                                                            float min12 = Math.min(fArr13[1], fArr13[3]);
                                                                            float[] fArr14 = this.imageBoundsPoints;
                                                                            float min13 = Math.min(min12, Math.min(fArr14[5], fArr14[7]));
                                                                            float[] fArr15 = this.imageBoundsPoints;
                                                                            float max4 = Math.max(fArr15[0], fArr15[2]);
                                                                            float[] fArr16 = this.imageBoundsPoints;
                                                                            float max5 = Math.max(max4, Math.max(fArr16[4], fArr16[6]));
                                                                            float[] fArr17 = this.imageBoundsPoints;
                                                                            float max6 = Math.max(fArr17[1], fArr17[3]);
                                                                            float[] fArr18 = this.imageBoundsPoints;
                                                                            rectF2.set(min11, min13, max5, Math.max(max6, Math.max(fArr18[5], fArr18[7])));
                                                                            f29 = this.centerImageInsideBlur[1].set(this.blurBounds.intersect(this.imageBounds));
                                                                        }
                                                                        bitmap = this.blurManager.getBitmap();
                                                                        if (bitmap == null) {
                                                                            bitmap = this.centerBlur.getBitmap(this.centerImage);
                                                                        }
                                                                        if (bitmap != null) {
                                                                            storyBlurDrawer2 = storyBlurDrawer;
                                                                            storyBlurDrawer2.paint.setShader(null);
                                                                            storyBlurDrawer2.paint.setAlpha((int) (f25 * 255.0f * f29 * f26));
                                                                            canvas.scale(bitmap.getWidth() / (bitmap.getWidth() - 3.0f), bitmap.getHeight() / (bitmap.getHeight() - 3.0f));
                                                                            canvas.translate((-f24) / 2.0f, (-f65) / 2.0f);
                                                                            canvas.scale((f24 * 1.0f) / bitmap.getWidth(), (f65 * 1.0f) / bitmap.getHeight());
                                                                            if (z) {
                                                                                int i30 = (int) 0.0f;
                                                                                canvas.clipRect(i30, i30, bitmap.getWidth() - i30, bitmap.getHeight() - i30);
                                                                            }
                                                                            canvas.drawBitmap(bitmap, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                                            if (z8) {
                                                                                canvas.restore();
                                                                            }
                                                                            z5 = true;
                                                                        }
                                                                    }
                                                                    storyBlurDrawer2 = storyBlurDrawer;
                                                                    if (z8) {
                                                                    }
                                                                    z5 = true;
                                                                }
                                                                z7 = false;
                                                                if (z7) {
                                                                }
                                                                if (f8 > f28) {
                                                                }
                                                                photoViewerWebView = this.photoViewerWebView;
                                                                if (photoViewerWebView != null) {
                                                                }
                                                                if (z3) {
                                                                }
                                                                bitmap = this.blurManager.getBitmap();
                                                                if (bitmap == null) {
                                                                }
                                                                if (bitmap != null) {
                                                                }
                                                                storyBlurDrawer2 = storyBlurDrawer;
                                                                if (z8) {
                                                                }
                                                                z5 = true;
                                                            } else {
                                                                storyBlurDrawer2 = storyBlurDrawer;
                                                            }
                                                            canvas.restore();
                                                            z6 = z5;
                                                        }
                                                    }
                                                } else {
                                                    i8 = i4;
                                                }
                                                min = Math.min(f60 / bitmapWidth3, f61 / bitmapHeight3);
                                                f24 = bitmapWidth3 * min;
                                                f65 = min * bitmapHeight3;
                                                if (this.isCurrentVideo) {
                                                }
                                            }
                                            z5 = false;
                                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                            }
                                            if (z5) {
                                            }
                                            canvas.restore();
                                            z6 = z5;
                                        } else {
                                            imageReceiver3 = imageReceiver2;
                                            i8 = i4;
                                            f26 = f9;
                                            i7 = i3;
                                            z6 = false;
                                        }
                                        if (!z6 && this.animatingImageView.getVisibility() == 0) {
                                            canvas.save();
                                            if (this.padImageForHorizontalInsets) {
                                                canvas.translate((getRightInset() / 2) - (getLeftInset() / 2), 0.0f);
                                            }
                                            canvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                                            canvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY(), this.animatingImageView.getPivotX(), this.animatingImageView.getPivotY());
                                            bitmap5 = this.centerBlur.getBitmap(this.animatingImageView.getBitmapHolder());
                                            if (bitmap5 != null) {
                                                canvas.save();
                                                storyBlurDrawer2.paint.setShader(null);
                                                storyBlurDrawer2.paint.setAlpha((int) (f26 * 255.0f));
                                                canvas.scale((this.animatingImageView.getWidth() * 1.0f) / bitmap5.getWidth(), (this.animatingImageView.getHeight() * 1.0f) / bitmap5.getHeight());
                                                canvas.scale(bitmap5.getWidth() / (bitmap5.getWidth() - 3.0f), bitmap5.getHeight() / (bitmap5.getHeight() - 3.0f), bitmap5.getWidth() / 2.0f, bitmap5.getHeight() / 2.0f);
                                                canvas.drawBitmap(bitmap5, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                if (z) {
                                                    int i31 = (int) 0.0f;
                                                    canvas.clipRect(i31, i31, bitmap5.getWidth() - i31, bitmap5.getHeight() - i31);
                                                }
                                                canvas.restore();
                                            }
                                            canvas.restore();
                                        }
                                        imageReceiver4 = imageReceiver3;
                                        if (imageReceiver4 == this.leftImage) {
                                            float f71 = z3 ? this.centerImageInsideBlur[0].set(1.0f, true) : 1.0f;
                                            if (imageReceiver4 != null && imageReceiver4.hasBitmapImage()) {
                                                canvas.save();
                                                canvas.translate(i8 / 2, i7 / 2);
                                                int i32 = i8;
                                                float f72 = i32;
                                                canvas.translate(((-(((this.scale + 1.0f) * f72) + AndroidUtilities.dp(30.0f))) / 2.0f) + f51, 0.0f);
                                                int bitmapWidth4 = imageReceiver4.getBitmapWidth();
                                                int bitmapHeight4 = imageReceiver4.getBitmapHeight();
                                                if (this.leftImageIsVideo || this.leftCropState == null || !this.leftCropTransform.hasViewTransform()) {
                                                    i15 = bitmapHeight4;
                                                    imageReceiver5 = imageReceiver4;
                                                    f43 = f71;
                                                    f42 = 1.0f;
                                                } else {
                                                    i15 = bitmapHeight4;
                                                    imageReceiver5 = imageReceiver4;
                                                    f43 = f71;
                                                    f42 = 1.0f;
                                                    applyCrop(canvas, i32, i7, bitmapWidth4, bitmapHeight4, f6, this.leftCropTransform, this.leftCropState);
                                                }
                                                float f73 = bitmapWidth4;
                                                float f74 = i15;
                                                float min14 = Math.min(f72 / f73, i7 / f74);
                                                int i33 = (int) (f73 * min14);
                                                int i34 = (int) (f74 * min14);
                                                if (!this.imagesArrLocals.isEmpty()) {
                                                    if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                        z9 = this.leftCropTransform.isMirrored();
                                                    } else {
                                                        MediaController.CropState cropState5 = this.leftCropState;
                                                        if (cropState5 != null && cropState5.mirrored) {
                                                            z9 = true;
                                                        }
                                                    }
                                                    if (z9) {
                                                        canvas.scale(-1.0f, f42);
                                                    }
                                                    bitmap4 = this.leftBlur.getBitmap(imageReceiver5);
                                                    if (bitmap4 != null) {
                                                        storyBlurDrawer2.paint.setShader(null);
                                                        storyBlurDrawer2.paint.setAlpha((int) (f26 * 255.0f * f43));
                                                        canvas.scale(bitmap4.getWidth() / (bitmap4.getWidth() - 3.0f), bitmap4.getHeight() / (bitmap4.getHeight() - 3.0f));
                                                        canvas.translate((-i33) / 2, (-i34) / 2);
                                                        canvas.scale((i33 * f42) / bitmap4.getWidth(), (i34 * f42) / bitmap4.getHeight());
                                                        if (z) {
                                                            int i35 = (int) 0.0f;
                                                            canvas.clipRect(i35, i35, bitmap4.getWidth() - i35, bitmap4.getHeight() - i35);
                                                        }
                                                        canvas.drawBitmap(bitmap4, 0.0f, 0.0f, storyBlurDrawer2.paint);
                                                    }
                                                    canvas.restore();
                                                    canvas.restoreToCount(i5);
                                                    if (i2 != 0) {
                                                        storyBlurDrawer2.paint.setColor(i2);
                                                        storyBlurDrawer2.paint.setAlpha((int) (paint.getAlpha() * AndroidUtilities.lerp(0.7f, f42, f26)));
                                                        canvas.drawPaint(storyBlurDrawer2.paint);
                                                        return;
                                                    }
                                                    return;
                                                }
                                                z9 = false;
                                                if (z9) {
                                                }
                                                bitmap4 = this.leftBlur.getBitmap(imageReceiver5);
                                                if (bitmap4 != null) {
                                                }
                                                canvas.restore();
                                                canvas.restoreToCount(i5);
                                                if (i2 != 0) {
                                                }
                                            }
                                        }
                                        f42 = 1.0f;
                                        canvas.restoreToCount(i5);
                                        if (i2 != 0) {
                                        }
                                    }
                                }
                                f13 = f51;
                                f14 = 1.0f;
                                f15 = 0.0f;
                                if (this.videoSizeSet) {
                                }
                                if (this.centerImage.hasBitmapImage()) {
                                }
                                canvas.save();
                                int i222 = i4 / 2;
                                int i232 = i3 / 2;
                                canvas.translate(getAdditionX(this.currentEditMode) + i222, i232 + getAdditionY(this.currentEditMode));
                                canvas.translate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                                f16 = f6 - f15;
                                canvas.scale(f16, f16);
                                float f592 = f12;
                                canvas.rotate(f592);
                                if (z3) {
                                }
                                if (this.currentEditMode == 3) {
                                    float emojiPadding2 = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) >= AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                    canvas.translate(f10, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding2);
                                    if (z3) {
                                    }
                                }
                                if (!z4) {
                                }
                                bitmapWidth = this.centerImage.getBitmapWidth();
                                bitmapHeight = this.centerImage.getBitmapHeight();
                                float f602 = i4;
                                f17 = bitmapWidth;
                                f18 = f602 / f17;
                                float f612 = i3;
                                int i242 = bitmapWidth;
                                f19 = bitmapHeight;
                                int i252 = bitmapHeight;
                                float f622 = f612 / f19;
                                float min52 = Math.min(f18, f622);
                                float f632 = f622;
                                i7 = i3;
                                float f642 = (int) (f17 * min52);
                                float f652 = (int) (f19 * min52);
                                if (this.pipAnimationInProgress) {
                                }
                                f20 = f16;
                                f21 = f19;
                                imageReceiver3 = imageReceiver2;
                                f22 = f17;
                                i8 = i4;
                                f23 = f18;
                                f24 = f642;
                                z5 = false;
                                if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                                }
                                if (z5) {
                                }
                                canvas.restore();
                                z6 = z5;
                                if (!z6) {
                                    canvas.save();
                                    if (this.padImageForHorizontalInsets) {
                                    }
                                    canvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                                    canvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY(), this.animatingImageView.getPivotX(), this.animatingImageView.getPivotY());
                                    bitmap5 = this.centerBlur.getBitmap(this.animatingImageView.getBitmapHolder());
                                    if (bitmap5 != null) {
                                    }
                                    canvas.restore();
                                }
                                imageReceiver4 = imageReceiver3;
                                if (imageReceiver4 == this.leftImage) {
                                }
                                f42 = 1.0f;
                                canvas.restoreToCount(i5);
                                if (i2 != 0) {
                                }
                            }
                            z10 = false;
                            if (z10) {
                            }
                            imageReceiver2 = imageReceiver6;
                            bitmap6 = this.rightBlur.getBitmap(imageReceiver2);
                            if (bitmap6 == null) {
                            }
                            canvas.restore();
                            if (!this.zoomAnimation) {
                            }
                            f13 = f51;
                            f14 = 1.0f;
                            f15 = 0.0f;
                            if (this.videoSizeSet) {
                            }
                            if (this.centerImage.hasBitmapImage()) {
                            }
                            canvas.save();
                            int i2222 = i4 / 2;
                            int i2322 = i3 / 2;
                            canvas.translate(getAdditionX(this.currentEditMode) + i2222, i2322 + getAdditionY(this.currentEditMode));
                            canvas.translate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
                            f16 = f6 - f15;
                            canvas.scale(f16, f16);
                            float f5922 = f12;
                            canvas.rotate(f5922);
                            if (z3) {
                            }
                            if (this.currentEditMode == 3) {
                            }
                            if (!z4) {
                            }
                            bitmapWidth = this.centerImage.getBitmapWidth();
                            bitmapHeight = this.centerImage.getBitmapHeight();
                            float f6022 = i4;
                            f17 = bitmapWidth;
                            f18 = f6022 / f17;
                            float f6122 = i3;
                            int i2422 = bitmapWidth;
                            f19 = bitmapHeight;
                            int i2522 = bitmapHeight;
                            float f6222 = f6122 / f19;
                            float min522 = Math.min(f18, f6222);
                            float f6322 = f6222;
                            i7 = i3;
                            float f6422 = (int) (f17 * min522);
                            float f6522 = (int) (f19 * min522);
                            if (this.pipAnimationInProgress) {
                            }
                            f20 = f16;
                            f21 = f19;
                            imageReceiver3 = imageReceiver2;
                            f22 = f17;
                            i8 = i4;
                            f23 = f18;
                            f24 = f6422;
                            z5 = false;
                            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
                            }
                            if (z5) {
                            }
                            canvas.restore();
                            z6 = z5;
                            if (!z6) {
                            }
                            imageReceiver4 = imageReceiver3;
                            if (imageReceiver4 == this.leftImage) {
                            }
                            f42 = 1.0f;
                            canvas.restoreToCount(i5);
                            if (i2 != 0) {
                            }
                        }
                    }
                }
                f44 = f51;
                f45 = 0.0f;
                f46 = 1.0f;
                if (imageReceiver.hasBitmapImage()) {
                }
            }
            imageReceiver2 = imageReceiver;
            i3 = containerViewHeight2;
            i4 = containerViewWidth;
            i5 = saveCount;
            f8 = f7;
            f9 = f2;
            f10 = 0.0f;
            f11 = 1.0f;
            f12 = f50;
            i6 = 1;
            if (!this.zoomAnimation) {
            }
            f13 = f51;
            f14 = 1.0f;
            f15 = 0.0f;
            if (this.videoSizeSet) {
            }
            if (this.centerImage.hasBitmapImage()) {
            }
            canvas.save();
            int i22222 = i4 / 2;
            int i23222 = i3 / 2;
            canvas.translate(getAdditionX(this.currentEditMode) + i22222, i23222 + getAdditionY(this.currentEditMode));
            canvas.translate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
            f16 = f6 - f15;
            canvas.scale(f16, f16);
            float f59222 = f12;
            canvas.rotate(f59222);
            if (z3) {
            }
            if (this.currentEditMode == 3) {
            }
            if (!z4) {
            }
            bitmapWidth = this.centerImage.getBitmapWidth();
            bitmapHeight = this.centerImage.getBitmapHeight();
            float f60222 = i4;
            f17 = bitmapWidth;
            f18 = f60222 / f17;
            float f61222 = i3;
            int i24222 = bitmapWidth;
            f19 = bitmapHeight;
            int i25222 = bitmapHeight;
            float f62222 = f61222 / f19;
            float min5222 = Math.min(f18, f62222);
            float f63222 = f62222;
            i7 = i3;
            float f64222 = (int) (f17 * min5222);
            float f65222 = (int) (f19 * min5222);
            if (this.pipAnimationInProgress) {
            }
            f20 = f16;
            f21 = f19;
            imageReceiver3 = imageReceiver2;
            f22 = f17;
            i8 = i4;
            f23 = f18;
            f24 = f64222;
            z5 = false;
            if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
            }
            if (z5) {
            }
            canvas.restore();
            z6 = z5;
            if (!z6) {
            }
            imageReceiver4 = imageReceiver3;
            if (imageReceiver4 == this.leftImage) {
            }
            f42 = 1.0f;
            canvas.restoreToCount(i5);
            if (i2 != 0) {
            }
        }
        imageReceiver = null;
        if (imageReceiver == this.rightImage) {
        }
        imageReceiver2 = imageReceiver;
        i3 = containerViewHeight2;
        i4 = containerViewWidth;
        i5 = saveCount;
        f8 = f7;
        f9 = f2;
        f10 = 0.0f;
        f11 = 1.0f;
        f12 = f50;
        i6 = 1;
        if (!this.zoomAnimation) {
        }
        f13 = f51;
        f14 = 1.0f;
        f15 = 0.0f;
        if (this.videoSizeSet) {
        }
        if (this.centerImage.hasBitmapImage()) {
        }
        canvas.save();
        int i222222 = i4 / 2;
        int i232222 = i3 / 2;
        canvas.translate(getAdditionX(this.currentEditMode) + i222222, i232222 + getAdditionY(this.currentEditMode));
        canvas.translate(f13, f52 + (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f));
        f16 = f6 - f15;
        canvas.scale(f16, f16);
        float f592222 = f12;
        canvas.rotate(f592222);
        if (z3) {
        }
        if (this.currentEditMode == 3) {
        }
        if (!z4) {
        }
        bitmapWidth = this.centerImage.getBitmapWidth();
        bitmapHeight = this.centerImage.getBitmapHeight();
        float f602222 = i4;
        f17 = bitmapWidth;
        f18 = f602222 / f17;
        float f612222 = i3;
        int i242222 = bitmapWidth;
        f19 = bitmapHeight;
        int i252222 = bitmapHeight;
        float f622222 = f612222 / f19;
        float min52222 = Math.min(f18, f622222);
        float f632222 = f622222;
        i7 = i3;
        float f642222 = (int) (f17 * min52222);
        float f652222 = (int) (f19 * min52222);
        if (this.pipAnimationInProgress) {
        }
        f20 = f16;
        f21 = f19;
        imageReceiver3 = imageReceiver2;
        f22 = f17;
        i8 = i4;
        f23 = f18;
        f24 = f642222;
        z5 = false;
        if (this.imagesArrLocals.isEmpty() && ((i13 = this.currentEditMode) == 3 || (i14 = this.switchingToMode) == 3 || (this.sendPhotoType != 1 ? !((this.imageMoveAnimation == null || i14 == -1) && i13 != 0 && i13 != 1 && i14 == -1) : !(i14 != 0 && (i13 == 3 || i13 == 2))))) {
        }
        if (z5) {
        }
        canvas.restore();
        z6 = z5;
        if (!z6) {
        }
        imageReceiver4 = imageReceiver3;
        if (imageReceiver4 == this.leftImage) {
        }
        f42 = 1.0f;
        canvas.restoreToCount(i5);
        if (i2 != 0) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:62:0x002b  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0035  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x003b  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0080  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0082  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x00ab  */
    /* JADX WARN: Removed duplicated region for block: B:87:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCenterImageInternal(Canvas canvas, float f, float f2) {
        boolean z;
        boolean z2;
        PhotoViewerWebView photoViewerWebView;
        if (!this.imagesArrLocals.isEmpty()) {
            if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                z = this.cropTransform.isMirrored();
            } else {
                MediaController.CropState cropState = this.editState.cropState;
                if (cropState != null && cropState.mirrored) {
                    z = true;
                }
            }
            if (z) {
                z2 = false;
            } else {
                canvas.save();
                canvas.scale(-1.0f, 1.0f);
                z2 = true;
            }
            if (f > 0.0f) {
                if (!z2) {
                    canvas.save();
                    z2 = true;
                }
                canvas.scale(1.0f - (2.0f * f), 1.0f);
                canvas.skew(0.0f, 4.0f * f * (1.0f - f) * 0.25f);
            }
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null || !photoViewerWebView.isLoaded()) {
                if (!this.centerImageTransformLocked) {
                    this.centerImageTransform.preTranslate(this.centerImage.getImageX(), this.centerImage.getImageY());
                }
                this.stickerMakerView.drawOutline(canvas, false, this.containerView, this.switchingToMode == -1);
                this.centerImage.setAlpha(f2);
                this.centerImage.draw(canvas);
                this.stickerMakerView.drawOutline(canvas, true, this.containerView, this.switchingToMode != -1);
                this.stickerMakerView.drawSegmentBorderPath(canvas, this.centerImage, this.centerImageTransform, this.containerView);
                this.centerImageTransformLocked = true;
            }
            if (z2) {
                return;
            }
            canvas.restore();
            return;
        }
        z = false;
        if (z) {
        }
        if (f > 0.0f) {
        }
        photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
        }
        if (!this.centerImageTransformLocked) {
        }
        this.stickerMakerView.drawOutline(canvas, false, this.containerView, this.switchingToMode == -1);
        this.centerImage.setAlpha(f2);
        this.centerImage.draw(canvas);
        this.stickerMakerView.drawOutline(canvas, true, this.containerView, this.switchingToMode != -1);
        this.stickerMakerView.drawSegmentBorderPath(canvas, this.centerImage, this.centerImageTransform, this.containerView);
        this.centerImageTransformLocked = true;
        if (z2) {
        }
    }

    private void drawFancyShadows(Canvas canvas) {
        float f;
        if (this.fancyShadows) {
            if (SharedConfig.photoViewerBlur) {
                AnimatedFloat animatedFloat = this.blurAlpha;
                int i = this.animationInProgress;
                f = animatedFloat.set(i == 0 || i == 2 || i == 3);
            } else {
                f = 1.0f;
            }
            if (f <= 0.0f) {
                return;
            }
            int currentActionBarHeight = ((int) (AndroidUtilities.statusBarHeight * 1.5f)) + ActionBar.getCurrentActionBarHeight();
            int height = AndroidUtilities.navigationBarHeight + this.pickerView.getHeight() + (this.captionEdit.getVisibility() == 0 ? (this.captionEdit.getEditTextHeightClosedKeyboard() / 2) + AndroidUtilities.dp(20.0f) : 0);
            if (this.clipFancyShadows == null) {
                this.clipFancyShadows = new Path();
                Paint paint = new Paint(1);
                this.topFancyShadowPaint = paint;
                PorterDuff.Mode mode = PorterDuff.Mode.DST_IN;
                paint.setXfermode(new PorterDuffXfermode(mode));
                Paint paint2 = new Paint(1);
                this.bottomFancyShadowPaint = paint2;
                paint2.setXfermode(new PorterDuffXfermode(mode));
                Shader.TileMode tileMode = Shader.TileMode.CLAMP;
                this.topFancyShadow = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{-16777216, 0}, new float[]{0.0f, 1.0f}, tileMode);
                this.bottomFancyShadow = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{0, -16777216}, new float[]{0.0f, 1.0f}, tileMode);
                this.topFancyShadowMatrix = new Matrix();
                this.bottomFancyShadowMatrix = new Matrix();
                this.topFancyShadowPaint.setShader(this.topFancyShadow);
                this.bottomFancyShadowPaint.setShader(this.bottomFancyShadow);
            }
            canvas.saveLayerAlpha(0.0f, 0.0f, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, (int) (f * (this.backgroundDrawable.getAlpha() - 127) * 2.007874f), 31);
            this.clipFancyShadows.rewind();
            float f2 = currentActionBarHeight;
            Path.Direction direction = Path.Direction.CW;
            this.clipFancyShadows.addRect(0.0f, 0.0f, this.containerView.getWidth(), f2, direction);
            this.clipFancyShadows.addRect(0.0f, (this.containerView.getHeight() + AndroidUtilities.navigationBarHeight) - height, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, direction);
            canvas.clipPath(this.clipFancyShadows);
            canvas.drawColor(-16777216);
            drawCaptionBlur(canvas, this.shadowBlurer, 0, 0, true, true, false);
            canvas.save();
            this.topFancyShadowMatrix.reset();
            this.topFancyShadowMatrix.postScale(1.0f, f2 / 16.0f);
            this.topFancyShadow.setLocalMatrix(this.topFancyShadowMatrix);
            this.topFancyShadowPaint.setAlpha(NotificationCenter.availableEffectsUpdate);
            canvas.drawRect(0.0f, 0.0f, this.containerView.getWidth(), f2, this.topFancyShadowPaint);
            this.bottomFancyShadowMatrix.reset();
            this.bottomFancyShadowMatrix.postScale(1.0f, height / 16.0f);
            this.bottomFancyShadowMatrix.postTranslate(0.0f, (this.containerView.getHeight() - height) + AndroidUtilities.navigationBarHeight);
            this.bottomFancyShadow.setLocalMatrix(this.bottomFancyShadowMatrix);
            this.bottomFancyShadowPaint.setAlpha(NotificationCenter.storiesEnabledUpdate);
            canvas.drawRect(0.0f, (this.containerView.getHeight() + AndroidUtilities.navigationBarHeight) - height, this.containerView.getWidth(), this.containerView.getHeight() + AndroidUtilities.navigationBarHeight, this.bottomFancyShadowPaint);
            canvas.restore();
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x0067  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x004b  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x004e  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0059  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x005e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawProgress(Canvas canvas, float f, float f2, float f3, float f4) {
        float f5;
        VideoTimelinePlayView videoTimelinePlayView;
        VideoPlayer videoPlayer;
        boolean z = true;
        boolean z2 = !this.isCurrentVideo || (((videoTimelinePlayView = this.videoTimelineView) == null || !videoTimelinePlayView.isDragging()) && ((this.sendPhotoType != 1 || this.manuallyPaused) && ((videoPlayer = this.videoPlayer) == null || !videoPlayer.isPlaying())));
        if (this.miniProgressView.getVisibility() != 0 && this.miniProgressAnimator == null) {
            z = false;
        }
        if (z2) {
            if (!this.zoomAnimation) {
                float f6 = this.maxX;
                if ((-f) > f6) {
                    f5 = f6 + f;
                    float f7 = f2 == 1.0f ? f3 : 0.0f;
                    float alpha = !z ? (1.0f - this.miniProgressView.getAlpha()) * f4 : f4;
                    if (!this.pipAnimationInProgress) {
                        alpha *= this.actionBar.getAlpha();
                    } else if (this.photoProgressViews[0].backgroundState == 4) {
                        f7 += AndroidUtilities.dpf2(8.0f) * (1.0f - this.actionBar.getAlpha());
                    }
                    canvas.save();
                    canvas.translate(f5, f7);
                    this.photoProgressViews[0].setScale(1.0f);
                    this.photoProgressViews[0].setAlpha(alpha);
                    this.photoProgressViews[0].onDraw(canvas);
                    if (this.isActionBarVisible && this.allowShowFullscreenButton && this.fullscreenButton[0].getTag() == null) {
                        ImageView imageView = this.fullscreenButton[0];
                        imageView.setAlpha(Math.min(imageView.getAlpha(), f4));
                    }
                    canvas.restore();
                }
            }
            f5 = 0.0f;
            if (f2 == 1.0f) {
            }
            if (!z) {
            }
            if (!this.pipAnimationInProgress) {
            }
            canvas.save();
            canvas.translate(f5, f7);
            this.photoProgressViews[0].setScale(1.0f);
            this.photoProgressViews[0].setAlpha(alpha);
            this.photoProgressViews[0].onDraw(canvas);
            if (this.isActionBarVisible) {
                ImageView imageView2 = this.fullscreenButton[0];
                imageView2.setAlpha(Math.min(imageView2.getAlpha(), f4));
            }
            canvas.restore();
        }
        if (!z || this.pipAnimationInProgress) {
            return;
        }
        canvas.save();
        canvas.translate(this.miniProgressView.getLeft() + f, this.miniProgressView.getTop() + (f3 / f2));
        this.miniProgressView.draw(canvas);
        canvas.restore();
    }

    private boolean enableSwipeToPiP() {
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:37:0x0068, code lost:
        if (r4 == null) goto L21;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int[] fixVideoWidthHeight(int i, int i2) {
        MediaCodecInfo.VideoCapabilities videoCapabilities;
        Range supportedWidths;
        Range supportedHeights;
        Comparable lower;
        Comparable lower2;
        int[] iArr = {i, i2};
        if (Build.VERSION.SDK_INT >= 21) {
            MediaCodec mediaCodec = null;
            try {
                mediaCodec = MediaCodec.createEncoderByType(MediaController.VIDEO_MIME_TYPE);
                videoCapabilities = mediaCodec.getCodecInfo().getCapabilitiesForType(MediaController.VIDEO_MIME_TYPE).getVideoCapabilities();
                supportedWidths = videoCapabilities.getSupportedWidths();
                supportedHeights = videoCapabilities.getSupportedHeights();
                lower = supportedWidths.getLower();
                iArr[0] = Math.max(((Integer) lower).intValue(), Math.round(i / 16.0f) * 16);
                lower2 = supportedHeights.getLower();
                iArr[1] = Math.max(((Integer) lower2).intValue(), Math.round(i2 / 16.0f) * 16);
            } catch (Exception unused) {
            } catch (Throwable th) {
                if (mediaCodec != null) {
                    try {
                        mediaCodec.release();
                    } catch (Exception unused2) {
                    }
                }
                throw th;
            }
            try {
                mediaCodec.release();
            } catch (Exception unused3) {
            }
        }
        return iArr;
    }

    private String format(int i, int i2) {
        char c = (char) (((i >= 100 ? 99 : i) / 10) + 48);
        if (i >= 100) {
            i = 99;
        }
        char c2 = (char) ((i % 10) + 48);
        char c3 = (char) (((i2 >= 100 ? 99 : i2) / 10) + 48);
        if (i2 >= 100) {
            i2 = 99;
        }
        return new String(new char[]{c, c2, ':', c3, (char) ((i2 % 10) + 48)});
    }

    private String format(int i, int i2, int i3) {
        char c = (char) (((i >= 100 ? 99 : i) / 10) + 48);
        if (i >= 100) {
            i = 99;
        }
        char c2 = (char) ((i % 10) + 48);
        char c3 = (char) (((i2 >= 100 ? 99 : i2) / 10) + 48);
        if (i2 >= 100) {
            i2 = 99;
        }
        char c4 = (char) ((i2 % 10) + 48);
        char c5 = (char) (((i3 >= 100 ? 99 : i3) / 10) + 48);
        if (i3 >= 100) {
            i3 = 99;
        }
        return new String(new char[]{c, c2, ':', c3, c4, ':', c5, (char) ((i3 % 10) + 48)});
    }

    private int getAdditionX(int i) {
        float f;
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            f = 16.0f;
        } else if (i == 0 || i == 4 || i == 3) {
            return 0;
        } else {
            f = 14.0f;
        }
        return AndroidUtilities.dp(f);
    }

    private int getAdditionY(int i) {
        if (i < 0) {
            return 0;
        }
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            return AndroidUtilities.dp(16.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
        } else if (i == 3 && this.photoPaintView != null) {
            return AndroidUtilities.dp(8.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + this.photoPaintView.getAdditionalTop();
        } else if (i == 0 || i == 4) {
            return 0;
        } else {
            return AndroidUtilities.dp(14.0f) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:35:0x0024, code lost:
        if ((r4 & 4) == 0) goto L19;
     */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0032 A[EDGE_INSN: B:43:0x0032->B:40:0x0032 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0034 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int getAnimatedMediaEntitiesCount(boolean z) {
        ArrayList arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                VideoEditedInfo.MediaEntity mediaEntity = (VideoEditedInfo.MediaEntity) this.editState.mediaEntities.get(i2);
                if (mediaEntity.type == 0) {
                    byte b = mediaEntity.subType;
                    if ((b & 1) == 0) {
                    }
                    i++;
                    if (!z) {
                        break;
                    }
                }
                if (mediaEntity.entities.isEmpty()) {
                    continue;
                }
                i++;
                if (!z) {
                }
            }
            return i;
        }
        return 0;
    }

    private ClippingImageView[] getAnimatingImageViews(PlaceProviderObject placeProviderObject) {
        int i = (AndroidUtilities.isTablet() || placeProviderObject == null || placeProviderObject.animatingImageView == null) ? 0 : 1;
        ClippingImageView[] clippingImageViewArr = new ClippingImageView[i + 1];
        clippingImageViewArr[0] = this.animatingImageView;
        if (i != 0) {
            ClippingImageView clippingImageView = placeProviderObject.animatingImageView;
            clippingImageViewArr[1] = clippingImageView;
            clippingImageView.setAdditionalTranslationY(placeProviderObject.animatingImageViewYOffset);
        }
        return clippingImageViewArr;
    }

    public Bitmap.CompressFormat getCompressFormat() {
        return this.sendPhotoType == 11 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;
    }

    public int getContainerViewHeight() {
        return getContainerViewHeight(this.currentEditMode);
    }

    public int getContainerViewHeight(int i) {
        return getContainerViewHeight(false, i);
    }

    private int getContainerViewHeight(boolean z, int i) {
        int measuredHeight;
        int dp;
        float f;
        if (z || this.inBubbleMode) {
            measuredHeight = this.containerView.getMeasuredHeight();
        } else {
            measuredHeight = AndroidUtilities.displaySize.y;
            if ((i == 0 || i == 4) && this.sendPhotoType != 1 && isStatusBarVisible()) {
                measuredHeight += AndroidUtilities.statusBarHeight;
            }
        }
        if ((i == 0 && this.sendPhotoType == 1) || i == 1) {
            f = 144.0f;
        } else if (i != 2) {
            if (i == 3) {
                dp = AndroidUtilities.dp(48.0f) + this.photoPaintView.getAdditionalBottom() + ActionBar.getCurrentActionBarHeight() + this.photoPaintView.getAdditionalTop();
                return measuredHeight - dp;
            }
            return measuredHeight;
        } else {
            f = 214.0f;
        }
        dp = AndroidUtilities.dp(f);
        return measuredHeight - dp;
    }

    public int getContainerViewWidth() {
        return getContainerViewWidth(this.currentEditMode);
    }

    public int getContainerViewWidth(int i) {
        float f;
        int width = this.containerView.getWidth();
        if (i == 1 || (i == 0 && this.sendPhotoType == 1)) {
            f = 32.0f;
        } else if (i == 0 || i == 4 || i == 3) {
            return width;
        } else {
            f = 28.0f;
        }
        return width - AndroidUtilities.dp(f);
    }

    public float getCropFillScale(boolean z) {
        ImageReceiver imageReceiver = this.centerImage;
        int bitmapHeight = z ? imageReceiver.getBitmapHeight() : imageReceiver.getBitmapWidth();
        int bitmapWidth = z ? this.centerImage.getBitmapWidth() : this.centerImage.getBitmapHeight();
        float min = Math.min(this.photoCropView.getMeasuredWidth(), (this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (AndroidUtilities.dp(16.0f) * 2);
        return Math.max(min / bitmapHeight, min / bitmapWidth);
    }

    public VideoEditedInfo getCurrentVideoEditedInfo() {
        int i;
        MediaController.CropState cropState;
        float f;
        float f2;
        long j;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList = null;
        boolean z = false;
        if (!this.isCurrentVideo && hasAnimatedMediaEntities() && this.centerImage.getBitmapWidth() > 0) {
            int i2 = this.sendPhotoType;
            float f3 = i2 == 1 ? 800.0f : i2 == 11 ? 500.0f : 854.0f;
            VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
            videoEditedInfo.startTime = 0L;
            videoEditedInfo.start = (float) 0;
            long min = Math.min(3000L, this.editState.averageDuration);
            while (true) {
                videoEditedInfo.endTime = min;
                j = videoEditedInfo.endTime;
                if (j <= 0 || j >= 1000) {
                    break;
                }
                min = j * 2;
            }
            videoEditedInfo.end = (float) j;
            videoEditedInfo.compressQuality = this.selectedCompression;
            videoEditedInfo.rotationValue = 0;
            videoEditedInfo.originalPath = this.currentImagePath;
            long j2 = videoEditedInfo.endTime;
            videoEditedInfo.estimatedSize = (int) ((((float) j2) / 1000.0f) * 115200.0f);
            videoEditedInfo.estimatedDuration = j2;
            videoEditedInfo.framerate = 30;
            videoEditedInfo.originalDuration = j2;
            EditState editState = this.editState;
            videoEditedInfo.filterState = editState.savedFilterState;
            String str = editState.croppedPaintPath;
            if (str != null) {
                videoEditedInfo.paintPath = str;
                ArrayList arrayList2 = editState.croppedMediaEntities;
                if (arrayList2 != null && !arrayList2.isEmpty()) {
                    arrayList = this.editState.croppedMediaEntities;
                }
                videoEditedInfo.mediaEntities = arrayList;
            } else {
                videoEditedInfo.paintPath = editState.paintPath;
                videoEditedInfo.mediaEntities = editState.mediaEntities;
            }
            videoEditedInfo.isPhoto = true;
            int bitmapWidth = this.centerImage.getBitmapWidth();
            int bitmapHeight = this.centerImage.getBitmapHeight();
            MediaController.CropState cropState2 = this.editState.cropState;
            if (cropState2 != null) {
                int i3 = cropState2.transformRotation;
                if (i3 != 90 && i3 != 270) {
                    bitmapHeight = bitmapWidth;
                    bitmapWidth = bitmapHeight;
                }
                int i4 = (int) (bitmapHeight * cropState2.cropPw);
                bitmapHeight = (int) (bitmapWidth * cropState2.cropPh);
                bitmapWidth = i4;
            }
            int i5 = this.sendPhotoType;
            if (i5 == 1 || i5 == 11) {
                bitmapWidth = bitmapHeight;
            }
            float f4 = bitmapWidth;
            float f5 = bitmapHeight;
            float max = Math.max(f4 / f3, f5 / f3);
            if (max < 1.0f) {
                max = 1.0f;
            }
            int i6 = (int) (f4 / max);
            int i7 = (int) (f5 / max);
            if (i6 % 16 != 0) {
                i6 = Math.max(1, Math.round(i6 / 16.0f)) * 16;
            }
            if (i7 % 16 != 0) {
                i7 = Math.max(1, Math.round(i7 / 16.0f)) * 16;
            }
            videoEditedInfo.resultWidth = i6;
            videoEditedInfo.originalWidth = i6;
            videoEditedInfo.resultHeight = i7;
            videoEditedInfo.originalHeight = i7;
            videoEditedInfo.bitrate = -1;
            videoEditedInfo.muted = true;
            videoEditedInfo.avatarStartTime = 0L;
            return videoEditedInfo;
        }
        int i8 = -1;
        if (!this.isCurrentVideo || ((this.currentPlayingVideoFile == null && this.currentPlayingVideoQualityFiles == null) || this.compressionsCount == 0)) {
            return null;
        }
        VideoEditedInfo videoEditedInfo2 = new VideoEditedInfo();
        videoEditedInfo2.startTime = this.startTime;
        videoEditedInfo2.endTime = this.endTime;
        videoEditedInfo2.start = this.videoCutStart;
        videoEditedInfo2.end = this.videoCutEnd;
        videoEditedInfo2.compressQuality = this.selectedCompression;
        videoEditedInfo2.rotationValue = this.rotationValue;
        videoEditedInfo2.originalWidth = this.originalWidth;
        videoEditedInfo2.originalHeight = this.originalHeight;
        videoEditedInfo2.bitrate = this.bitrate;
        videoEditedInfo2.originalPath = this.currentPathObject;
        long j3 = this.estimatedSize;
        if (j3 == 0) {
            j3 = 1;
        }
        videoEditedInfo2.estimatedSize = j3;
        videoEditedInfo2.estimatedDuration = this.estimatedDuration;
        videoEditedInfo2.framerate = this.videoFramerate;
        videoEditedInfo2.originalDuration = this.videoDuration * 1000.0f;
        EditState editState2 = this.editState;
        videoEditedInfo2.filterState = editState2.savedFilterState;
        String str2 = editState2.croppedPaintPath;
        if (str2 != null) {
            videoEditedInfo2.paintPath = str2;
            ArrayList arrayList3 = editState2.croppedMediaEntities;
            if (arrayList3 != null && !arrayList3.isEmpty()) {
                arrayList = this.editState.croppedMediaEntities;
            }
        } else {
            videoEditedInfo2.paintPath = editState2.paintPath;
            ArrayList arrayList4 = editState2.mediaEntities;
            if (arrayList4 != null && !arrayList4.isEmpty()) {
                arrayList = this.editState.mediaEntities;
            }
        }
        videoEditedInfo2.mediaEntities = arrayList;
        if (this.sendPhotoType == 1 || this.muteVideo || !(this.compressItem.getTag() == null || (videoEditedInfo2.resultWidth == this.originalWidth && videoEditedInfo2.resultHeight == this.originalHeight))) {
            if (this.muteVideo || this.sendPhotoType == 1) {
                this.selectedCompression = 1;
                updateWidthHeightBitrateForCompression();
            }
            videoEditedInfo2.resultWidth = this.resultWidth;
            videoEditedInfo2.resultHeight = this.resultHeight;
            if (!this.muteVideo && this.sendPhotoType != 1) {
                i8 = this.bitrate;
            }
        } else {
            videoEditedInfo2.resultWidth = this.originalWidth;
            videoEditedInfo2.resultHeight = this.originalHeight;
            if (!this.muteVideo) {
                i8 = this.originalBitrate;
            }
        }
        videoEditedInfo2.bitrate = i8;
        MediaController.CropState cropState3 = this.editState.cropState;
        videoEditedInfo2.cropState = cropState3;
        if (cropState3 != null) {
            videoEditedInfo2.rotationValue += cropState3.transformRotation;
            while (true) {
                i = videoEditedInfo2.rotationValue;
                if (i < 360) {
                    break;
                }
                videoEditedInfo2.rotationValue = i - 360;
            }
            if (i == 90 || i == 270) {
                cropState = videoEditedInfo2.cropState;
                cropState.transformWidth = (int) (videoEditedInfo2.resultWidth * cropState.cropPh);
                f = videoEditedInfo2.resultHeight;
                f2 = cropState.cropPw;
            } else {
                cropState = videoEditedInfo2.cropState;
                cropState.transformWidth = (int) (videoEditedInfo2.resultWidth * cropState.cropPw);
                f = videoEditedInfo2.resultHeight;
                f2 = cropState.cropPh;
            }
            cropState.transformHeight = (int) (f * f2);
            if (this.sendPhotoType == 1) {
                MediaController.CropState cropState4 = videoEditedInfo2.cropState;
                if (cropState4.transformWidth > 800) {
                    cropState4.transformWidth = 800;
                }
                if (cropState4.transformHeight > 800) {
                    cropState4.transformHeight = 800;
                }
                int min2 = Math.min(cropState4.transformWidth, cropState4.transformHeight);
                cropState4.transformHeight = min2;
                cropState4.transformWidth = min2;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("original transformed w = " + videoEditedInfo2.cropState.transformWidth + " h = " + videoEditedInfo2.cropState.transformHeight + " r = " + videoEditedInfo2.rotationValue);
            }
            MediaController.CropState cropState5 = videoEditedInfo2.cropState;
            int[] fixVideoWidthHeight = fixVideoWidthHeight(cropState5.transformWidth, cropState5.transformHeight);
            MediaController.CropState cropState6 = videoEditedInfo2.cropState;
            cropState6.transformWidth = fixVideoWidthHeight[0];
            cropState6.transformHeight = fixVideoWidthHeight[1];
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("fixed transformed w = " + videoEditedInfo2.cropState.transformWidth + " h = " + videoEditedInfo2.cropState.transformHeight);
            }
        }
        if (this.sendPhotoType == 1) {
            videoEditedInfo2.avatarStartTime = this.avatarStartTime;
            videoEditedInfo2.originalBitrate = this.originalBitrate;
        }
        videoEditedInfo2.muted = (this.muteVideo || this.sendPhotoType == 1) ? true : true;
        return videoEditedInfo2;
    }

    public long getCurrentVideoPosition() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView == null || !photoViewerWebView.isControllable()) {
            VideoPlayer videoPlayer = this.videoPlayer;
            if (videoPlayer == null) {
                return 0L;
            }
            return videoPlayer.getCurrentPosition();
        }
        return this.photoViewerWebView.getCurrentPosition();
    }

    public TLObject getFileLocation(int i, long[] jArr) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            if (jArr != null) {
                jArr[0] = ((SecureDocument) this.secureDocuments.get(i)).secureFile.size;
            }
            return (TLObject) this.secureDocuments.get(i);
        } else if (!this.imagesArrLocations.isEmpty()) {
            if (i >= this.imagesArrLocations.size()) {
                return null;
            }
            if (jArr != null && this.imagesArrLocationsSizes.get(i) != null) {
                jArr[0] = ((Long) this.imagesArrLocationsSizes.get(i)).longValue();
            }
            if (this.imagesArrLocationsVideo.get(i) != null) {
                return ((ImageLocation) this.imagesArrLocationsVideo.get(i)).location;
            }
            return null;
        } else if (this.imagesArr.isEmpty() || i >= this.imagesArr.size()) {
            return null;
        } else {
            MessageObject messageObject = (MessageObject) this.imagesArr.get(i);
            TLRPC.Message message = messageObject.messageOwner;
            if (message instanceof TLRPC.TL_messageService) {
                TLRPC.MessageAction messageAction = message.action;
                if (messageAction instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                    return messageAction.newUserPhoto.photo_big;
                }
                TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                if (closestPhotoSizeWithSize != null) {
                    if (jArr != null) {
                        long j = closestPhotoSizeWithSize.size;
                        jArr[0] = j;
                        if (j == 0) {
                            jArr[0] = -1;
                        }
                    }
                    return closestPhotoSizeWithSize;
                } else if (jArr != null) {
                    jArr[0] = -1;
                }
            } else {
                TLRPC.MessageMedia messageMedia = messageObject.sponsoredMedia;
                if (messageMedia != null) {
                    TLRPC.Document document = messageMedia.document;
                    if (document != null) {
                        TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(document.thumbs, 90);
                        if (jArr != null) {
                            long j2 = closestPhotoSizeWithSize2.size;
                            jArr[0] = j2;
                            if (j2 == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize2;
                    }
                    TLRPC.Photo photo = messageMedia.photo;
                    if (photo != null) {
                        TLRPC.PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize(), false, null, true);
                        if (closestPhotoSizeWithSize3 != null) {
                            if (jArr != null) {
                                long j3 = closestPhotoSizeWithSize3.size;
                                jArr[0] = j3;
                                if (j3 == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return closestPhotoSizeWithSize3;
                        } else if (jArr != null) {
                            jArr[0] = -1;
                        }
                    }
                } else if (((MessageObject.getMedia(message) instanceof TLRPC.TL_messageMediaPhoto) && MessageObject.getMedia(messageObject.messageOwner).photo != null) || ((MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null)) {
                    TLRPC.PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize(), false, null, true);
                    if (closestPhotoSizeWithSize4 != null) {
                        if (jArr != null) {
                            long j4 = closestPhotoSizeWithSize4.size;
                            jArr[0] = j4;
                            if (j4 == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize4;
                    } else if (jArr != null) {
                        jArr[0] = -1;
                    }
                } else if (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaInvoice) {
                    return ((TLRPC.TL_messageMediaInvoice) MessageObject.getMedia(messageObject.messageOwner)).photo;
                } else {
                    if (messageObject.getDocument() != null && MessageObject.isDocumentHasThumb(messageObject.getDocument())) {
                        TLRPC.PhotoSize closestPhotoSizeWithSize5 = FileLoader.getClosestPhotoSizeWithSize(messageObject.getDocument().thumbs, 90);
                        if (jArr != null) {
                            long j5 = closestPhotoSizeWithSize5.size;
                            jArr[0] = j5;
                            if (j5 == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return closestPhotoSizeWithSize5;
                    }
                }
            }
            return null;
        }
    }

    public static TLRPC.FileLocation getFileLocation(ImageLocation imageLocation) {
        if (imageLocation == null) {
            return null;
        }
        return imageLocation.location;
    }

    public static String getFileLocationExt(ImageLocation imageLocation) {
        if (imageLocation == null || imageLocation.imageType != 2) {
            return null;
        }
        return "mp4";
    }

    private String getFileName(int i) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            SecureDocument secureDocument = (SecureDocument) this.secureDocuments.get(i);
            return secureDocument.secureFile.dc_id + "_" + secureDocument.secureFile.id + ".jpg";
        } else if (!this.imagesArrLocations.isEmpty() || !this.imagesArr.isEmpty()) {
            if (this.imagesArrLocations.isEmpty()) {
                if (i >= this.imagesArr.size()) {
                    return null;
                }
                return FileLoader.getMessageFileName(((MessageObject) this.imagesArr.get(i)).messageOwner);
            } else if (i >= this.imagesArrLocations.size()) {
                return null;
            } else {
                ImageLocation imageLocation = (ImageLocation) this.imagesArrLocations.get(i);
                ImageLocation imageLocation2 = (ImageLocation) this.imagesArrLocationsVideo.get(i);
                if (imageLocation == null) {
                    return null;
                }
                if (imageLocation2 == null || imageLocation2 == imageLocation) {
                    return imageLocation.location.volume_id + "_" + imageLocation.location.local_id + ".jpg";
                }
                return imageLocation2.location.volume_id + "_" + imageLocation2.location.local_id + ".mp4";
            }
        } else {
            if (this.imagesArrLocals.isEmpty()) {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    return pageBlocksAdapter.getFileName(i);
                }
            } else if (i >= this.imagesArrLocals.size()) {
                return null;
            } else {
                Object obj = this.imagesArrLocals.get(i);
                if (obj instanceof MediaController.SearchImage) {
                    return ((MediaController.SearchImage) obj).getAttachName();
                }
                if (obj instanceof TLRPC.BotInlineResult) {
                    TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) obj;
                    TLRPC.Document document = botInlineResult.document;
                    if (document != null) {
                        return FileLoader.getAttachFileName(document);
                    }
                    TLRPC.Photo photo = botInlineResult.photo;
                    if (photo != null) {
                        return FileLoader.getAttachFileName(FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()));
                    }
                    if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
                        StringBuilder sb = new StringBuilder();
                        sb.append(Utilities.MD5(botInlineResult.content.url));
                        sb.append(".");
                        TLRPC.WebDocument webDocument = botInlineResult.content;
                        sb.append(ImageLoader.getHttpUrlExtension(webDocument.url, FileLoader.getMimeTypePart(webDocument.mime_type)));
                        return sb.toString();
                    }
                }
            }
            return null;
        }
    }

    private ImageLocation getImageLocation(int i, long[] jArr) {
        if (i < 0) {
            return null;
        }
        if (!this.secureDocuments.isEmpty()) {
            if (i >= this.secureDocuments.size()) {
                return null;
            }
            if (jArr != null) {
                jArr[0] = ((SecureDocument) this.secureDocuments.get(i)).secureFile.size;
            }
            return ImageLocation.getForSecureDocument((SecureDocument) this.secureDocuments.get(i));
        } else if (!this.imagesArrLocations.isEmpty()) {
            if (i >= this.imagesArrLocations.size()) {
                return null;
            }
            if (jArr != null && this.imagesArrLocationsSizes.get(i) != null) {
                jArr[0] = ((Long) this.imagesArrLocationsSizes.get(i)).longValue();
            }
            return (ImageLocation) this.imagesArrLocationsVideo.get(i);
        } else if (this.imagesArr.isEmpty() || i >= this.imagesArr.size()) {
            return null;
        } else {
            MessageObject messageObject = (MessageObject) this.imagesArr.get(i);
            TLRPC.Message message = messageObject.messageOwner;
            if (!(message instanceof TLRPC.TL_messageService)) {
                TLRPC.MessageMedia messageMedia = messageObject.sponsoredMedia;
                if (messageMedia != null) {
                    TLRPC.Document document = messageMedia.document;
                    if (document != null) {
                        return ImageLocation.getForDocument(document);
                    }
                    TLRPC.Photo photo = messageMedia.photo;
                    if (photo != null) {
                        TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize(), false, null, true);
                        if (closestPhotoSizeWithSize != null) {
                            if (jArr != null) {
                                long j = closestPhotoSizeWithSize.size;
                                jArr[0] = j;
                                if (j == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.sponsoredMedia.photo);
                        } else if (jArr != null) {
                            jArr[0] = -1;
                        }
                    }
                } else if ((!(MessageObject.getMedia(message) instanceof TLRPC.TL_messageMediaPhoto) || MessageObject.getMedia(messageObject.messageOwner).photo == null) && (!(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) || MessageObject.getMedia(messageObject.messageOwner).webpage == null)) {
                    if (MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaInvoice) {
                        return ImageLocation.getForWebFile(WebFile.createWithWebDocument(((TLRPC.TL_messageMediaInvoice) MessageObject.getMedia(messageObject.messageOwner)).webPhoto));
                    }
                    if (messageObject.getDocument() != null) {
                        TLRPC.Document document2 = messageObject.getDocument();
                        if (this.sharedMediaType == 5) {
                            return ImageLocation.getForDocument(document2);
                        }
                        if (MessageObject.isDocumentHasThumb(messageObject.getDocument())) {
                            TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(document2.thumbs, 90);
                            if (jArr != null) {
                                long j2 = closestPhotoSizeWithSize2.size;
                                jArr[0] = j2;
                                if (j2 == 0) {
                                    jArr[0] = -1;
                                }
                            }
                            return ImageLocation.getForDocument(closestPhotoSizeWithSize2, document2);
                        }
                    }
                } else if (messageObject.isGif()) {
                    return ImageLocation.getForDocument(messageObject.getDocument());
                } else {
                    TLRPC.PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize(), false, null, true);
                    if (closestPhotoSizeWithSize3 != null) {
                        if (jArr != null) {
                            long j3 = closestPhotoSizeWithSize3.size;
                            jArr[0] = j3;
                            if (j3 == 0) {
                                jArr[0] = -1;
                            }
                        }
                        return ImageLocation.getForObject(closestPhotoSizeWithSize3, messageObject.photoThumbsObject);
                    } else if (jArr != null) {
                        jArr[0] = -1;
                    }
                }
            } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                return null;
            } else {
                TLRPC.PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                if (closestPhotoSizeWithSize4 != null) {
                    if (jArr != null) {
                        long j4 = closestPhotoSizeWithSize4.size;
                        jArr[0] = j4;
                        if (j4 == 0) {
                            jArr[0] = -1;
                        }
                    }
                    return ImageLocation.getForObject(closestPhotoSizeWithSize4, messageObject.photoThumbsObject);
                } else if (jArr != null) {
                    jArr[0] = -1;
                }
            }
            return null;
        }
    }

    public static PhotoViewer getInstance() {
        PhotoViewer photoViewer = Instance;
        if (photoViewer == null) {
            synchronized (PhotoViewer.class) {
                try {
                    photoViewer = Instance;
                    if (photoViewer == null) {
                        photoViewer = new PhotoViewer();
                        Instance = photoViewer;
                    }
                } finally {
                }
            }
        }
        return photoViewer;
    }

    public int getLeftInset() {
        return this.insets.left;
    }

    public static PhotoViewer getPipInstance() {
        return PipInstance;
    }

    public int getRightInset() {
        return this.insets.right;
    }

    private String getTempFileAbsolutePath() {
        File directory = FileLoader.getDirectory(4);
        return new File(directory, SharedConfig.getLastLocalId() + "_temp.jpg").getAbsolutePath();
    }

    public int getThemedColor(int i) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.getColor(i) : Theme.getColor(i);
    }

    public long getVideoDuration() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView == null || !photoViewerWebView.isControllable()) {
            VideoPlayer videoPlayer = this.videoPlayer;
            if (videoPlayer == null) {
                return 0L;
            }
            return videoPlayer.getDuration();
        }
        return this.photoViewerWebView.getVideoDuration();
    }

    private void goToNext() {
        float containerViewWidth = this.scale != 1.0f ? ((getContainerViewWidth() - this.centerImage.getImageWidth()) / 2.0f) * this.scale : 0.0f;
        this.switchImageAfterAnimation = 1;
        animateTo(this.scale, ((this.minX - getContainerViewWidth()) - containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2), this.translationY, false);
    }

    private void goToPrev() {
        float containerViewWidth = this.scale != 1.0f ? ((getContainerViewWidth() - this.centerImage.getImageWidth()) / 2.0f) * this.scale : 0.0f;
        this.switchImageAfterAnimation = 2;
        animateTo(this.scale, this.maxX + getContainerViewWidth() + containerViewWidth + (AndroidUtilities.dp(30.0f) / 2), this.translationY, false);
    }

    private boolean hasAnimatedMediaEntities() {
        return getAnimatedMediaEntitiesCount(true) != 0;
    }

    public static boolean hasInstance() {
        return Instance != null;
    }

    private void hidePressedDrawables() {
        boolean[] zArr = this.drawPressedDrawable;
        zArr[1] = false;
        zArr[0] = false;
        this.containerView.invalidate();
    }

    private void initCropView() {
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView == null) {
            return;
        }
        photoCropView.setBitmap(null, 0, false, false, null, null, null, null);
        if (this.sendPhotoType != 1) {
            return;
        }
        this.photoCropView.onAppear();
        this.photoCropView.setVisibility(0);
        this.photoCropView.setAlpha(1.0f);
        this.photoCropView.onAppeared();
        this.padImageForHorizontalInsets = true;
    }

    public void initEmbedVideo(int i) {
        if (this.isEmbedVideo) {
            PhotoViewerWebView photoViewerWebView = new PhotoViewerWebView(this, this.parentActivity, this.pipItem) { // from class: org.telegram.ui.PhotoViewer.72
                Rect rect = new Rect();

                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.Components.PhotoViewerWebView
                protected void drawBlackBackground(Canvas canvas, int i2, int i3) {
                    Bitmap bitmap = PhotoViewer.this.centerImage.getBitmap();
                    if (bitmap != null) {
                        float min = Math.min(i2 / bitmap.getWidth(), i3 / bitmap.getHeight());
                        int width = (int) (bitmap.getWidth() * min);
                        int height = (int) (bitmap.getHeight() * min);
                        int i4 = (i3 - height) / 2;
                        int i5 = (i2 - width) / 2;
                        this.rect.set(i5, i4, width + i5, height + i4);
                        canvas.drawBitmap(bitmap, (Rect) null, this.rect, (Paint) null);
                    }
                }

                @Override // org.telegram.ui.Components.PhotoViewerWebView
                protected void processTouch(MotionEvent motionEvent) {
                }
            };
            this.photoViewerWebView = photoViewerWebView;
            photoViewerWebView.init(i, MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage);
            this.photoViewerWebView.setPlaybackSpeed(this.currentVideoSpeed);
            this.containerView.addView(this.photoViewerWebView, 0, LayoutHelper.createFrame(-1, -1.0f));
            if (this.photoViewerWebView.isControllable()) {
                setVideoPlayerControlVisible(true, true);
            }
            this.videoPlayerSeekbar.clearTimestamps();
            updateVideoPlayerTime();
            this.shouldSavePositionForCurrentVideo = null;
            this.shouldSavePositionForCurrentVideoShortTerm = null;
            this.lastSaveTime = 0L;
            this.seekToProgressPending = this.seekToProgressPending2;
            this.videoPlayerSeekbar.setProgress(0.0f);
            this.videoTimelineView.setProgress(0.0f);
            this.videoPlayerSeekbar.setBufferedProgress(0.0f);
        }
    }

    public void invalidateBlur() {
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView == null || !stickerMakerView.isThanosInProgress) {
            CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
            if (captionPhotoViewer != null) {
                captionPhotoViewer.invalidateBlur();
            }
            BlurButton blurButton = this.cutOutBtn;
            if (blurButton != null) {
                blurButton.invalidateBlur();
            }
            BlurButton blurButton2 = this.eraseBtn;
            if (blurButton2 != null) {
                blurButton2.invalidateBlur();
            }
            BlurButton blurButton3 = this.restoreBtn;
            if (blurButton3 != null) {
                blurButton3.invalidateBlur();
            }
            BlurButton blurButton4 = this.undoBtn;
            if (blurButton4 != null) {
                blurButton4.invalidateBlur();
            }
            BlurButton blurButton5 = this.outlineBtn;
            if (blurButton5 != null) {
                blurButton5.invalidateBlur();
            }
            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
            if (videoTimelinePlayView != null) {
                videoTimelinePlayView.invalidateBlur();
            }
            FrameLayoutDrawer frameLayoutDrawer = this.containerView;
            if (frameLayoutDrawer != null) {
                frameLayoutDrawer.invalidate();
            }
        }
    }

    private boolean isAccessibilityEnabled() {
        try {
            AccessibilityManager accessibilityManager = (AccessibilityManager) this.activityContext.getSystemService("accessibility");
            if (accessibilityManager.isEnabled()) {
                return accessibilityManager.isTouchExplorationEnabled();
            }
            return false;
        } catch (Exception e) {
            FileLog.e(e);
            return false;
        }
    }

    public boolean isCaptionOpen() {
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        return captionPhotoViewer != null && (captionPhotoViewer.keyboardNotifier.keyboardVisible() || this.captionEdit.editText.isPopupShowing());
    }

    public boolean isCurrentAvatarSet() {
        int i;
        if (this.currentAvatarLocation != null && (i = this.currentIndex) >= 0 && i < this.avatarsArr.size()) {
            TLRPC.Photo photo = (TLRPC.Photo) this.avatarsArr.get(this.currentIndex);
            ImageLocation imageLocation = (ImageLocation) this.imagesArrLocations.get(this.currentIndex);
            if (photo instanceof TLRPC.TL_photoEmpty) {
                photo = null;
            }
            if (photo != null) {
                int size = photo.sizes.size();
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC.FileLocation fileLocation = photo.sizes.get(i2).location;
                    if (fileLocation != null) {
                        int i3 = fileLocation.local_id;
                        TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated = this.currentAvatarLocation.location;
                        if (i3 == tL_fileLocationToBeDeprecated.local_id && fileLocation.volume_id == tL_fileLocationToBeDeprecated.volume_id) {
                            return true;
                        }
                    }
                }
            } else if (imageLocation != null) {
                TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated2 = imageLocation.location;
                int i4 = tL_fileLocationToBeDeprecated2.local_id;
                TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated3 = this.currentAvatarLocation.location;
                if (i4 == tL_fileLocationToBeDeprecated3.local_id && tL_fileLocationToBeDeprecated2.volume_id == tL_fileLocationToBeDeprecated3.volume_id) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean isPlayingMessage(MessageObject messageObject) {
        return (Instance == null || Instance.pipAnimationInProgress || !Instance.isVisible || messageObject == null || Instance.currentMessageObject == null || Instance.currentMessageObject.getId() != messageObject.getId() || Instance.currentMessageObject.getDialogId() != messageObject.getDialogId()) ? false : true;
    }

    public static boolean isPlayingMessageInPip(MessageObject messageObject) {
        return (PipInstance == null || messageObject == null || PipInstance.currentMessageObject == null || PipInstance.currentMessageObject.getId() != messageObject.getId() || PipInstance.currentMessageObject.getDialogId() != messageObject.getDialogId()) ? false : true;
    }

    public static boolean isShowingImage(String str) {
        return (Instance == null || !Instance.isVisible || Instance.disableShowCheck || str == null || !str.equals(Instance.currentPathObject)) ? false : true;
    }

    public static boolean isShowingImage(MessageObject messageObject) {
        boolean z;
        if (Instance != null && !Instance.pipAnimationInProgress && Instance.isVisible && !Instance.disableShowCheck && messageObject != null) {
            MessageObject messageObject2 = Instance.currentMessageObject;
            if (messageObject2 == null && Instance.placeProvider != null) {
                messageObject2 = Instance.placeProvider.getEditingMessageObject();
            }
            if (messageObject2 != null && messageObject2.getId() == messageObject.getId() && messageObject2.getDialogId() == messageObject.getDialogId()) {
                z = true;
                return (!z || PipInstance == null) ? z : PipInstance.isVisible && !PipInstance.disableShowCheck && messageObject != null && PipInstance.currentMessageObject != null && PipInstance.currentMessageObject.getId() == messageObject.getId() && PipInstance.currentMessageObject.getDialogId() == messageObject.getDialogId();
            }
        }
        z = false;
        if (z) {
        }
    }

    public static boolean isShowingImage(TLRPC.BotInlineResult botInlineResult) {
        return (Instance == null || !Instance.isVisible || Instance.disableShowCheck || botInlineResult == null || Instance.currentBotInlineResult == null || botInlineResult.id != Instance.currentBotInlineResult.id) ? false : true;
    }

    public static boolean isShowingImage(TLRPC.FileLocation fileLocation) {
        if (Instance == null || !Instance.isVisible || Instance.disableShowCheck || fileLocation == null) {
            return false;
        }
        return (Instance.currentFileLocation != null && fileLocation.local_id == Instance.currentFileLocation.location.local_id && fileLocation.volume_id == Instance.currentFileLocation.location.volume_id && fileLocation.dc_id == Instance.currentFileLocation.dc_id) || (Instance.currentFileLocationVideo != null && fileLocation.local_id == Instance.currentFileLocationVideo.location.local_id && fileLocation.volume_id == Instance.currentFileLocationVideo.location.volume_id && fileLocation.dc_id == Instance.currentFileLocationVideo.dc_id);
    }

    public boolean isStatusBarVisible() {
        return Build.VERSION.SDK_INT >= 21 && !this.inBubbleMode;
    }

    public boolean isVideoPlaying() {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView == null || !photoViewerWebView.isControllable()) {
            VideoPlayer videoPlayer = this.videoPlayer;
            return videoPlayer != null && videoPlayer.isPlaying();
        }
        return this.photoViewerWebView.isPlaying();
    }

    public /* synthetic */ void lambda$checkChangedTextureView$3(ValueAnimator valueAnimator) {
        this.clippingImageProgress = 1.0f - ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$checkChangedTextureView$4(View view, ValueAnimator valueAnimator) {
        this.inlineOutAnimationProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        view.invalidateOutline();
        ImageView imageView = this.textureImageView;
        if (imageView != null) {
            imageView.invalidateOutline();
        }
        FirstFrameView firstFrameView = this.firstFrameView;
        if (firstFrameView != null) {
            firstFrameView.invalidateOutline();
        }
    }

    public /* synthetic */ File lambda$checkProgress$93(TLObject tLObject) {
        return FileLoader.getInstance(this.currentAccount).getPathToAttach(tLObject, true);
    }

    public /* synthetic */ File lambda$checkProgress$94(TLRPC.Message message) {
        return FileLoader.getInstance(this.currentAccount).getPathToMessage(message);
    }

    public /* synthetic */ void lambda$checkProgress$95(int i, File file, File file2, boolean z, boolean z2, boolean z3, boolean z4, boolean z5) {
        boolean z6 = false;
        if (this.shownControlsByEnd && !this.actionBarWasShownBeforeByEnd && this.isPlaying) {
            this.photoProgressViews[i].setBackgroundState(3, false, false);
            return;
        }
        if (!(file == null && file2 == null) && (z || z2)) {
            if (i != 0 || !this.isPlaying) {
                if (!z3 || (z4 && !(i == 0 && this.playerWasPlaying))) {
                    this.photoProgressViews[i].setBackgroundState(-1, z5, true);
                } else {
                    this.photoProgressViews[i].setBackgroundState(3, z5, true);
                }
            }
            if (i == 0 && !this.menuItem.isSubMenuShowing()) {
                if (z || !FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[i])) {
                    this.menuItem.hideSubItem(7);
                } else {
                    this.menuItem.showSubItem(7);
                }
            }
        } else {
            if (!z3) {
                this.photoProgressViews[i].setBackgroundState(0, z5, true);
            } else if (FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[i])) {
                this.photoProgressViews[i].setBackgroundState(1, false, true);
            } else {
                this.photoProgressViews[i].setBackgroundState(2, false, true);
            }
            Float fileProgress = ImageLoader.getInstance().getFileProgress(this.currentFileNames[i]);
            if (fileProgress == null) {
                fileProgress = Float.valueOf(0.0f);
            }
            this.photoProgressViews[i].setProgress(fileProgress.floatValue(), false);
        }
        if (i == 0) {
            if (!this.isEmbedVideo && (!this.imagesArrLocals.isEmpty() || (this.currentFileNames[0] != null && this.photoProgressViews[0].backgroundState != 0))) {
                z6 = true;
            }
            this.canZoom = z6;
        }
    }

    public /* synthetic */ void lambda$checkProgress$96(boolean z, final File file, File file2, FileLoader.FileResolver fileResolver, final int i, MessageObject messageObject, final boolean z2, final boolean z3, final boolean z4, final boolean z5) {
        final File file3;
        ChatActivity chatActivity;
        TLRPC.Document document;
        boolean exists = (z || file == null) ? z : file.exists();
        if (file2 != null || fileResolver == null) {
            r2 = fileResolver != null ? fileResolver.getFile() : null;
            file3 = file2;
        } else {
            file3 = fileResolver.getFile();
        }
        if (!exists && file3 != null) {
            exists = file3.exists();
        }
        if (!exists && r2 != null) {
            exists = r2.exists();
        }
        final boolean z6 = exists;
        if (!z6 && i != 0 && messageObject != null && z2 && DownloadController.getInstance(this.currentAccount).canDownloadMedia(messageObject.messageOwner) != 0 && (((chatActivity = this.parentChatActivity) == null || chatActivity.getCurrentEncryptedChat() == null) && !messageObject.shouldEncryptPhotoOrVideo() && (document = messageObject.getDocument()) != null)) {
            FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 0, 10);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$checkProgress$95(i, file, file3, z6, z2, z3, z4, z5);
            }
        });
    }

    public /* synthetic */ void lambda$closePaintMode$84() {
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$closePhoto$100(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$closePhoto$101(PlaceProviderObject placeProviderObject) {
        ArrayList arrayList;
        this.animationEndRunnable = null;
        this.containerView.setLayerType(0, null);
        this.animationInProgress = 0;
        invalidateBlur();
        onPhotoClosed(placeProviderObject);
        MediaController.getInstance().tryResumePausedAudio();
        if (!this.stickerEmpty || this.stickerEmptySent || (arrayList = this.imagesArrLocals) == null) {
            return;
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            Object next = it.next();
            if (next instanceof MediaController.PhotoEntry) {
                ((MediaController.PhotoEntry) next).deleteAll();
            }
        }
    }

    public /* synthetic */ void lambda$closePhoto$102(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$closePhoto$103(PlaceProviderObject placeProviderObject) {
        ArrayList arrayList;
        this.animationEndRunnable = null;
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        if (frameLayoutDrawer == null) {
            return;
        }
        frameLayoutDrawer.setLayerType(0, null);
        this.animationInProgress = 0;
        onPhotoClosed(placeProviderObject);
        this.containerView.setScaleX(1.0f);
        this.containerView.setScaleY(1.0f);
        MediaController.getInstance().tryResumePausedAudio();
        if (!this.stickerEmpty || this.stickerEmptySent || (arrayList = this.imagesArrLocals) == null) {
            return;
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            Object next = it.next();
            if (next instanceof MediaController.PhotoEntry) {
                ((MediaController.PhotoEntry) next).deleteAll();
            }
        }
    }

    public /* synthetic */ void lambda$closePhoto$98(MaskPaintView maskPaintView) {
        maskPaintView.shutdown();
        this.containerView.removeView(this.maskPaintView);
    }

    public /* synthetic */ void lambda$closePhoto$99(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateBlur();
    }

    public /* synthetic */ void lambda$createAdButtonView$118(View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored()) {
            return;
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ((ChatActivity) baseFragment).logSponsoredClicked(this.currentMessageObject, false, true);
        }
        closePhoto(true, false);
        String str = this.currentMessageObject.sponsoredUrl;
        if (str != null) {
            Context context = LaunchActivity.instance;
            if (context == null) {
                context = this.activityContext;
            }
            Browser.openUrl(context, Uri.parse(str), true, false, false, null, null, false, MessagesController.getInstance(this.currentAccount).sponsoredLinksInappAllow);
        }
    }

    public /* synthetic */ void lambda$createMaskPaintView$76(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(false, true);
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$createMaskPaintView$77(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(false, true);
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$createPaintView$78(ValueAnimator valueAnimator) {
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.overlayLayout.invalidate();
        }
    }

    public /* synthetic */ void lambda$createPaintView$79(Integer num) {
        this.photoPaintView.keyboardVisible = this.paintKeyboardNotifier.keyboardVisible();
        this.containerView.invalidate();
        int max = Math.max(num.intValue(), this.photoPaintView.getEmojiPadding(false));
        translateY((!this.photoPaintView.isCurrentText() || max <= 0) ? 0.0f : ((AndroidUtilities.displaySize.y - max) - AndroidUtilities.dp(80.0f)) - this.photoPaintView.getSelectedEntityBottom());
        AnimatorSet animatorSet = this.paintKeyboardAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda129
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$createPaintView$78(valueAnimator);
            }
        });
        AnimatorSet animatorSet2 = new AnimatorSet();
        this.paintKeyboardAnimator = animatorSet2;
        PaintWeightChooserView paintWeightChooserView = this.photoPaintView.weightChooserView;
        Property property = View.TRANSLATION_Y;
        int i = -max;
        ObjectAnimator ofFloat2 = ObjectAnimator.ofFloat(paintWeightChooserView, property, i / 2.5f);
        ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(this.photoPaintView.bottomLayout, property, Math.min(0, i + AndroidUtilities.dp(40.0f)));
        LinearLayout linearLayout = this.photoPaintView.tabsLayout;
        Property property2 = View.ALPHA;
        animatorSet2.playTogether(ofFloat2, ofFloat3, ObjectAnimator.ofFloat(linearLayout, property2, max > AndroidUtilities.dp(20.0f) ? 0.0f : 1.0f), ObjectAnimator.ofFloat(this.photoPaintView.cancelButton, property2, max > AndroidUtilities.dp(20.0f) ? 0.0f : 1.0f), ObjectAnimator.ofFloat(this.photoPaintView.doneButton, property2, max <= AndroidUtilities.dp(20.0f) ? 1.0f : 0.0f), ofFloat);
        animatorSet2.setDuration(320L);
        animatorSet2.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        animatorSet2.start();
        this.photoPaintView.updatePlusEmojiKeyboardButton();
    }

    public /* synthetic */ void lambda$createPaintView$80() {
        this.paintingOverlay.hideBitmap();
    }

    public /* synthetic */ void lambda$createPaintView$81() {
        this.savedState = null;
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$createPaintView$82(View view) {
        closePaintMode();
    }

    public /* synthetic */ void lambda$createVideoControlsInterface$61() {
        if (this.needShowOnReady) {
            showVideoSeekPreviewPosition(true);
        }
    }

    public /* synthetic */ void lambda$createVideoControlsInterface$62(View view) {
        Activity activity = this.parentActivity;
        if (activity == null) {
            return;
        }
        this.wasRotated = false;
        this.fullscreenedByButton = 2;
        if (this.prevOrientation == -10) {
            this.prevOrientation = activity.getRequestedOrientation();
        }
        this.parentActivity.setRequestedOrientation(1);
    }

    public static /* synthetic */ void lambda$createVideoTextureView$63(MediaController.SavedFilterState savedFilterState, FilterGLThread filterGLThread) {
        filterGLThread.setFilterGLThreadDelegate(FilterShaders.getFilterShadersDelegate(savedFilterState));
    }

    public /* synthetic */ void lambda$cropRotate$60(float f, float f2, ValueAnimator valueAnimator) {
        CropAreaView cropAreaView = this.photoCropView.cropView.areaView;
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue() * f;
        float f3 = this.scale;
        cropAreaView.setRotationScaleTranslation(floatValue, f3 + ((this.animateToScale - f3) * this.animationValue), 0.0f, 0.0f);
        this.photoCropView.wheelView.setRotation(AndroidUtilities.lerp(f2, 0.0f, ((Float) valueAnimator.getAnimatedValue()).floatValue()), false);
    }

    public /* synthetic */ void lambda$detectFaces$67(String str, boolean z) {
        if (str.equals(this.centerImage.getImageKey())) {
            this.currentImageHasFace = z ? 1 : 0;
            this.currentImageFaceKey = str;
        }
    }

    public /* synthetic */ void lambda$detectFaces$68(ImageReceiver.BitmapHolder bitmapHolder, String str) {
        bitmapHolder.release();
        if (str.equals(this.centerImage.getImageKey())) {
            this.currentImageHasFace = 2;
            this.currentImageFaceKey = str;
        }
    }

    public /* synthetic */ void lambda$detectFaces$69(final ImageReceiver.BitmapHolder bitmapHolder, int i, final String str) {
        Runnable runnable;
        FaceDetector faceDetector = null;
        try {
            try {
                final boolean z = false;
                faceDetector = new FaceDetector.Builder(ApplicationLoader.applicationContext).setMode(0).setLandmarkType(0).setTrackingEnabled(false).build();
                if (faceDetector.isOperational()) {
                    SparseArray detect = faceDetector.detect(new Frame.Builder().setBitmap(bitmapHolder.bitmap).setRotation(i).build());
                    if (detect != null && detect.size() != 0) {
                        z = true;
                    }
                    runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda24
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$detectFaces$67(str, z);
                        }
                    };
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.e("face detection is not operational");
                    }
                    runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda25
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$detectFaces$68(bitmapHolder, str);
                        }
                    };
                }
                AndroidUtilities.runOnUIThread(runnable);
            } catch (Exception e) {
                FileLog.e(e);
                if (faceDetector == null) {
                    return;
                }
            }
            faceDetector.release();
        } catch (Throwable th) {
            if (faceDetector != null) {
                faceDetector.release();
            }
            throw th;
        }
    }

    public /* synthetic */ void lambda$new$0() {
        toggleMiniProgressInternal(true);
    }

    public /* synthetic */ void lambda$new$5() {
        if (this.isVisible && this.animationInProgress == 0) {
            updateContainerFlags(this.isActionBarVisible);
        }
    }

    public /* synthetic */ void lambda$onDraw$106() {
        switchToNextIndex(1, false);
    }

    public /* synthetic */ void lambda$onDraw$107() {
        switchToNextIndex(-1, false);
    }

    public /* synthetic */ void lambda$onDraw$108() {
        checkChangedTextureView(false);
        PipVideoOverlay.dismiss(true, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:116:0x00ee  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x00f7  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x011c  */
    /* JADX WARN: Removed duplicated region for block: B:131:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$onLinkLongPress$1(URLSpan uRLSpan, TextView textView, int i, DialogInterface dialogInterface, int i2) {
        MessageObject messageObject;
        StringBuilder sb;
        MessageObject messageObject2;
        int i3;
        String str;
        if (i2 == 0) {
            onLinkClick(uRLSpan, textView);
            return;
        }
        boolean z = true;
        if (i2 != 1) {
            return;
        }
        String url = uRLSpan.getURL();
        if (url.startsWith("mailto:")) {
            url = url.substring(7);
        } else if (url.startsWith("tel:")) {
            url = url.substring(4);
            AndroidUtilities.addToClipboard(url);
            if (!z) {
                i3 = R.string.PhoneCopied;
                str = "PhoneCopied";
            } else if (url.startsWith("#")) {
                i3 = R.string.HashtagCopied;
                str = "HashtagCopied";
            } else if (url.startsWith("@")) {
                i3 = R.string.UsernameCopied;
                str = "UsernameCopied";
            } else {
                i3 = R.string.LinkCopied;
                str = "LinkCopied";
            }
            String string = LocaleController.getString(str, i3);
            if (AndroidUtilities.shouldShowClipboardToast()) {
                return;
            }
            BulletinFactory.of(this.containerView, this.resourcesProvider).createSimpleBulletin(R.raw.voip_invite, string).show();
            return;
        } else if (i >= 0 && (messageObject = this.currentMessageObject) != null && !messageObject.scheduled) {
            if (!messageObject.isVideo() && !this.currentMessageObject.isRoundVideo() && !this.currentMessageObject.isVoice() && !this.currentMessageObject.isMusic() && (messageObject2 = this.currentMessageObject.replyMessageObject) != null) {
                messageObject = messageObject2;
            }
            long dialogId = messageObject.getDialogId();
            int id = messageObject.getId();
            TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
            if (messageFwdHeader != null) {
                TLRPC.Peer peer = messageFwdHeader.saved_from_peer;
                if (peer != null) {
                    dialogId = MessageObject.getPeerId(peer);
                    id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                } else {
                    TLRPC.Peer peer2 = messageFwdHeader.from_id;
                    if (peer2 != null) {
                        dialogId = MessageObject.getPeerId(peer2);
                        id = messageObject.messageOwner.fwd_from.channel_post;
                    }
                }
            }
            if (DialogObject.isChatDialog(dialogId)) {
                String publicUsername = ChatObject.getPublicUsername(MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId)));
                if (publicUsername != null) {
                    sb = new StringBuilder();
                    sb.append("https://t.me/");
                    sb.append(publicUsername);
                    sb.append("/");
                    sb.append(id);
                    sb.append("?t=");
                    sb.append(i);
                    url = sb.toString();
                }
            } else {
                TLRPC.User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                String publicUsername2 = UserObject.getPublicUsername(user);
                if (user != null && publicUsername2 != null) {
                    sb = new StringBuilder();
                    sb.append("https://t.me/");
                    sb.append(publicUsername2);
                    sb.append("/");
                    sb.append(id);
                    sb.append("?t=");
                    sb.append(i);
                    url = sb.toString();
                }
            }
        }
        z = false;
        AndroidUtilities.addToClipboard(url);
        if (!z) {
        }
        String string2 = LocaleController.getString(str, i3);
        if (AndroidUtilities.shouldShowClipboardToast()) {
        }
    }

    public /* synthetic */ void lambda$onPhotoClosed$104(PlaceProviderObject placeProviderObject) {
        ClippingImageView clippingImageView;
        this.animatingImageView.setImageBitmap(null);
        if (placeProviderObject != null && !AndroidUtilities.isTablet() && (clippingImageView = placeProviderObject.animatingImageView) != null) {
            clippingImageView.setImageBitmap(null);
        }
        try {
            if (this.windowView.getParent() != null) {
                ((WindowManager) this.parentActivity.getSystemService("window")).removeView(this.windowView);
                onHideView();
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public static /* synthetic */ int lambda$onPhotoShow$90(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject.getId() - messageObject2.getId();
    }

    public /* synthetic */ void lambda$openAdsMenu$110(ItemOptions itemOptions, View view) {
        if (this.currentMessageObject == null) {
            return;
        }
        itemOptions.dismiss();
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ((ChatActivity) baseFragment).logSponsoredClicked(this.currentMessageObject, false, true);
        }
        Browser.openUrl(this.activityContext, Uri.parse(this.currentMessageObject.sponsoredUrl), true, false, false, null, null, false, MessagesController.getInstance(this.currentAccount).sponsoredLinksInappAllow);
    }

    public /* synthetic */ boolean lambda$openAdsMenu$111(Theme.ResourcesProvider resourcesProvider, View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return false;
        }
        if (AndroidUtilities.addToClipboard(messageObject.sponsoredUrl)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyLinkBulletin().show();
            return true;
        }
        return true;
    }

    public /* synthetic */ void lambda$openAdsMenu$112(Theme.ResourcesProvider resourcesProvider, View view) {
        if (AndroidUtilities.addToClipboard(this.currentMessageObject.sponsoredInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$113(Theme.ResourcesProvider resourcesProvider, View view) {
        if (AndroidUtilities.addToClipboard(this.currentMessageObject.sponsoredAdditionalInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(this.activityContext), resourcesProvider).createCopyBulletin(LocaleController.getString(R.string.TextCopied)).show();
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$115(int i, Theme.ResourcesProvider resourcesProvider) {
        if (!UserConfig.getInstance(i).isPremium()) {
            new PremiumFeatureBottomSheet(this.parentFragment, 3, true).show();
            return;
        }
        BulletinFactory.of(this.containerView, resourcesProvider).createAdReportedBulletin(LocaleController.getString(R.string.AdHidden)).show();
        MessagesController.getInstance(i).disableAds(true);
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ChatActivity chatActivity = (ChatActivity) baseFragment;
            chatActivity.removeFromSponsored(this.currentMessageObject);
            chatActivity.removeMessageWithThanos(this.currentMessageObject);
        }
    }

    public /* synthetic */ void lambda$openAdsMenu$116(Theme.ResourcesProvider resourcesProvider) {
        RevenueSharingAdsInfoBottomSheet.showAlert(this.activityContext, this.parentFragment, resourcesProvider);
    }

    public /* synthetic */ void lambda$openAdsMenu$117(int i, Theme.ResourcesProvider resourcesProvider) {
        if (!UserConfig.getInstance(i).isPremium()) {
            new PremiumFeatureBottomSheet(this.parentFragment, 3, true).show();
            return;
        }
        BulletinFactory.of(this.containerView, resourcesProvider).createAdReportedBulletin(LocaleController.getString(R.string.AdHidden)).show();
        MessagesController.getInstance(i).disableAds(true);
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment instanceof ChatActivity) {
            ChatActivity chatActivity = (ChatActivity) baseFragment;
            chatActivity.removeFromSponsored(this.currentMessageObject);
            chatActivity.removeMessageWithThanos(this.currentMessageObject);
        }
    }

    public /* synthetic */ void lambda$openCurrentPhotoInPaintModeForSelect$97(File file, boolean z, final MessageObject messageObject, final boolean z2, final boolean z3) {
        Pair<Integer, Integer> imageOrientation = AndroidUtilities.getImageOrientation(file);
        int i = this.lastImageId;
        this.lastImageId = i - 1;
        final MediaController.PhotoEntry orientation = new MediaController.PhotoEntry(0, i, 0L, file.getAbsolutePath(), z ? 0 : ((Integer) imageOrientation.first).intValue(), z, 0, 0, 0L).setOrientation(imageOrientation);
        this.sendPhotoType = 2;
        this.doneButtonPressed = false;
        final PhotoViewerProvider photoViewerProvider = this.placeProvider;
        this.placeProvider = new EmptyPhotoViewerProvider() { // from class: org.telegram.ui.PhotoViewer.69
            private final ImageReceiver.BitmapHolder thumbHolder;

            {
                PhotoViewer.this = this;
                this.thumbHolder = this.centerImage.getBitmapSafe();
            }

            private void sendMedia(VideoEditedInfo videoEditedInfo, boolean z4, int i2, boolean z5, boolean z6) {
                AccountInstance accountInstance;
                MediaController.PhotoEntry photoEntry;
                String str;
                if (PhotoViewer.this.parentChatActivity != null) {
                    MessageObject messageObject2 = z5 ? messageObject : null;
                    if (messageObject2 != null && !TextUtils.isEmpty(orientation.caption)) {
                        MediaController.PhotoEntry photoEntry2 = orientation;
                        messageObject2.editingMessage = photoEntry2.caption;
                        messageObject2.editingMessageEntities = photoEntry2.entities;
                    }
                    MediaController.PhotoEntry photoEntry3 = orientation;
                    if (photoEntry3.isVideo) {
                        AccountInstance accountInstance2 = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        String str2 = orientation.path;
                        long dialogId = PhotoViewer.this.parentChatActivity.getDialogId();
                        MessageObject replyMessage = PhotoViewer.this.parentChatActivity.getReplyMessage();
                        MessageObject threadMessage = PhotoViewer.this.parentChatActivity.getThreadMessage();
                        ChatActivity.ReplyQuote replyQuote = PhotoViewer.this.parentChatActivity.getReplyQuote();
                        MediaController.PhotoEntry photoEntry4 = orientation;
                        SendMessagesHelper.prepareSendingVideo(accountInstance2, str2, videoEditedInfo != null ? videoEditedInfo : null, dialogId, replyMessage, threadMessage, null, replyQuote, photoEntry4.entities, photoEntry4.ttl, messageObject2, z4, i2, z6, photoEntry4.hasSpoiler, photoEntry4.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                        return;
                    }
                    if (photoEntry3.imagePath != null) {
                        accountInstance = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        photoEntry = orientation;
                        str = photoEntry.imagePath;
                    } else if (photoEntry3.path == null) {
                        return;
                    } else {
                        accountInstance = PhotoViewer.this.parentChatActivity.getAccountInstance();
                        photoEntry = orientation;
                        str = photoEntry.path;
                    }
                    String str3 = str;
                    String str4 = photoEntry.thumbPath;
                    long dialogId2 = PhotoViewer.this.parentChatActivity.getDialogId();
                    MessageObject replyMessage2 = PhotoViewer.this.parentChatActivity.getReplyMessage();
                    MessageObject threadMessage2 = PhotoViewer.this.parentChatActivity.getThreadMessage();
                    ChatActivity.ReplyQuote replyQuote2 = PhotoViewer.this.parentChatActivity.getReplyQuote();
                    MediaController.PhotoEntry photoEntry5 = orientation;
                    SendMessagesHelper.prepareSendingPhoto(accountInstance, str3, str4, null, dialogId2, replyMessage2, threadMessage2, null, replyQuote2, photoEntry5.entities, photoEntry5.stickers, null, photoEntry5.ttl, messageObject2, videoEditedInfo, z4, i2, 0, z6, photoEntry5.caption, PhotoViewer.this.parentChatActivity.quickReplyShortcut, PhotoViewer.this.parentChatActivity.getQuickReplyId(), 0L);
                }
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canCaptureMorePhotos() {
                return false;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canEdit(int i2) {
                return photoViewerProvider != null && z2;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canReplace(int i2) {
                return photoViewerProvider != null && z3;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public MessageObject getEditingMessageObject() {
                return messageObject;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject2, TLRPC.FileLocation fileLocation, int i2, boolean z4) {
                PhotoViewerProvider photoViewerProvider2 = photoViewerProvider;
                if (photoViewerProvider2 != null) {
                    return photoViewerProvider2.getPlaceForPhoto(messageObject, null, 0, z4);
                }
                return null;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject2, TLRPC.FileLocation fileLocation, int i2) {
                return this.thumbHolder;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void replaceButtonPressed(int i2, VideoEditedInfo videoEditedInfo) {
                MediaController.PhotoEntry photoEntry = orientation;
                if (photoEntry.isCropped || photoEntry.isPainted || photoEntry.isFiltered || videoEditedInfo != null || !TextUtils.isEmpty(photoEntry.caption)) {
                    sendMedia(videoEditedInfo, false, 0, true, false);
                }
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i2, VideoEditedInfo videoEditedInfo, boolean z4, int i3, boolean z5) {
                sendMedia(videoEditedInfo, z4, i3, false, z5);
            }
        };
        this.selectedPhotosAdapter.notifyDataSetChanged();
        if (this.velocityTracker == null) {
            this.velocityTracker = VelocityTracker.obtain();
        }
        this.aboutToSwitchTo = 3;
        togglePhotosListView(false, false);
        toggleActionBar(true, false);
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getChatActivityEnterView() == null || !this.parentChatActivity.isKeyboardVisible()) {
            makeFocusable();
        } else {
            this.parentChatActivity.getChatActivityEnterView().closeKeyboard();
        }
        this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
        this.containerView.setAlpha(1.0f);
        onPhotoShow(null, null, null, null, null, null, Collections.singletonList(orientation), 0, null);
        this.pickerView.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        this.pickerViewSendButton.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        ActionBar actionBar = this.actionBar;
        actionBar.setTranslationY(-actionBar.getHeight());
        this.captionTextViewSwitcher.setTranslationY(AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f));
        createPaintView();
        switchToPaintMode();
        this.aboutToSwitchTo = 0;
    }

    public /* synthetic */ void lambda$prepareSegmentImage$92(StickerMakerView.SegmentedObject segmentedObject) {
        try {
            this.stickerMakerView.setSegmentedState(true, segmentedObject);
            this.centerImage.setImageBitmap(this.stickerMakerView.getSegmentedImage(this.centerImage.getBitmap(), !TextUtils.isEmpty(((MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex)).filterPath), this.centerImage.getOrientation()));
            this.cutOutBtn.setUndoCutState(true);
            showStickerMode(true, true, true);
            this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda93(this));
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public /* synthetic */ void lambda$redraw$105(int i) {
        redraw(i + 1);
    }

    public static /* synthetic */ void lambda$sendPressed$54(DialogInterface dialogInterface, int i) {
    }

    public /* synthetic */ void lambda$sendPressed$55(boolean z, int i, boolean z2, boolean z3, DialogInterface dialogInterface, int i2) {
        sendPressed(z, i, z2, z3, true);
    }

    public /* synthetic */ void lambda$setIsAboutToSwitchToIndex$91(int i, TranslateController translateController, MessageObject messageObject, String str) {
        if (i != this.switchingToIndex) {
            return;
        }
        this.captionDetectedLanguage = str;
        if (!translateController.isContextTranslateEnabled() || !translateController.canTranslatePhoto(messageObject, this.captionDetectedLanguage)) {
            this.menuItem.hideSubItem(21);
        } else if (this.captionTranslated) {
            this.menuItem.showSubItem(22);
            this.menuItem.hideSubItem(21);
            return;
        } else {
            this.menuItem.showSubItem(21);
        }
        this.menuItem.hideSubItem(22);
    }

    public /* synthetic */ void lambda$setItemVisible$88(ValueAnimator valueAnimator) {
        updateActionBarTitlePadding();
    }

    public /* synthetic */ void lambda$setItemVisible$89(boolean z, View view) {
        if (!z) {
            view.setVisibility(8);
        }
        updateActionBarTitlePadding();
    }

    public /* synthetic */ void lambda$setParentActivity$10(PopupSwipeBackLayout popupSwipeBackLayout, float f, float f2) {
        this.qualityIcon.setRotation(f2);
    }

    public /* synthetic */ void lambda$setParentActivity$11(float f, boolean z, boolean z2) {
        SharedPreferences.Editor putFloat;
        if (f != this.currentVideoSpeed) {
            this.currentVideoSpeed = f;
            if (this.currentMessageObject != null) {
                SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("playback_speed", 0);
                int i = (Math.abs(this.currentVideoSpeed - 1.0f) > 0.001f ? 1 : (Math.abs(this.currentVideoSpeed - 1.0f) == 0.001f ? 0 : -1));
                SharedPreferences.Editor edit = sharedPreferences.edit();
                if (i < 0) {
                    putFloat = edit.remove("speed" + this.currentMessageObject.getDialogId() + "_" + this.currentMessageObject.getId());
                } else {
                    putFloat = edit.putFloat("speed" + this.currentMessageObject.getDialogId() + "_" + this.currentMessageObject.getId(), this.currentVideoSpeed);
                }
                putFloat.commit();
            }
            VideoPlayer videoPlayer = this.videoPlayer;
            if (videoPlayer != null) {
                videoPlayer.setPlaybackSpeed(this.currentVideoSpeed);
            }
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
                photoViewerWebView.setPlaybackSpeed(this.currentVideoSpeed);
            }
        }
        setMenuItemIcon(true, z);
        if (z2) {
            this.menuItem.toggleSubMenu();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$12(View view) {
        Activity activity = this.parentActivity;
        if (activity == null) {
            return;
        }
        this.wasRotated = false;
        this.fullscreenedByButton = 1;
        if (this.prevOrientation == -10) {
            this.prevOrientation = activity.getRequestedOrientation();
        }
        if (((WindowManager) this.parentActivity.getSystemService("window")).getDefaultDisplay().getRotation() == 3) {
            this.parentActivity.setRequestedOrientation(8);
        } else {
            this.parentActivity.setRequestedOrientation(0);
        }
        toggleActionBar(false, false);
    }

    public /* synthetic */ View lambda$setParentActivity$13() {
        return new CaptionTextView(this.activityContext, this.captionScrollView, this.textSelectionHelper, new Utilities.Callback2() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda90
            @Override // org.telegram.messenger.Utilities.Callback2
            public final void run(Object obj, Object obj2) {
                PhotoViewer.this.onLinkClick((ClickableSpan) obj, (TextView) obj2);
            }
        }, new Utilities.Callback3() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda91
            @Override // org.telegram.messenger.Utilities.Callback3
            public final void run(Object obj, Object obj2, Object obj3) {
                PhotoViewer.this.onLinkLongPress((URLSpan) obj, (TextView) obj2, (Runnable) obj3);
            }
        });
    }

    public /* synthetic */ void lambda$setParentActivity$14(View view) {
        this.selectedCompression = this.previousCompression;
        didChangedCompressionLevel(false);
        showQualityView(false);
        requestVideoPreview(2);
    }

    public /* synthetic */ void lambda$setParentActivity$15(View view) {
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (obj instanceof MediaController.MediaEditState) {
            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
        }
        showQualityView(false);
        requestVideoPreview(2);
    }

    public /* synthetic */ void lambda$setParentActivity$16(View view) {
        sendPressed(false, 0);
    }

    public /* synthetic */ void lambda$setParentActivity$17(Integer num) {
        MediaController.MediaEditState mediaEditState;
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (!(obj instanceof MediaController.PhotoEntry)) {
            if (obj instanceof MediaController.SearchImage) {
                mediaEditState = (MediaController.SearchImage) obj;
            }
            if (num.intValue() != 0 || this.placeProvider.isPhotoChecked(this.currentIndex)) {
            }
            setPhotoChecked();
            return;
        }
        mediaEditState = (MediaController.PhotoEntry) obj;
        mediaEditState.ttl = num.intValue();
        if (num.intValue() != 0) {
        }
    }

    public /* synthetic */ void lambda$setParentActivity$18(Integer num) {
        FrameLayout frameLayout = this.videoTimelineViewContainer;
        if (frameLayout != null && frameLayout.getVisibility() != 8) {
            this.videoTimelineViewContainer.setTranslationY(this.pickerView.getTranslationY() - Math.max(0, this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
        }
        this.muteItem.setTranslationY(-Math.max(0, num.intValue() - AndroidUtilities.dp(46.0f)));
    }

    public /* synthetic */ void lambda$setParentActivity$19(View view) {
        if (this.placeProvider == null || isCaptionOpen()) {
            return;
        }
        this.placeProvider.needAddMorePhotos();
        closePhoto(true, false);
    }

    public /* synthetic */ void lambda$setParentActivity$21() {
        this.stickerMakerView.isThanosInProgress = false;
    }

    public /* synthetic */ void lambda$setParentActivity$22(Bitmap bitmap, Runnable runnable) {
        this.centerImage.setImageBitmap(bitmap);
        this.cutOutBtn.setUndoCutState(true);
        showStickerMode(true, true);
        AndroidUtilities.cancelRunOnUIThread(runnable);
        AndroidUtilities.runOnUIThread(runnable, 800L);
    }

    public static /* synthetic */ void lambda$setParentActivity$23() {
    }

    public /* synthetic */ void lambda$setParentActivity$24(boolean z, MediaController.MediaEditState mediaEditState, StickerMakerView.SegmentedObject segmentedObject) {
        float f;
        float f2;
        float f3;
        float f4;
        if (this.stickerMakerView.hasSegmentedBitmap()) {
            ThanosEffect thanosEffect = this.stickerMakerView.getThanosEffect();
            this.stickerMakerView.setSegmentedState(true, segmentedObject);
            final Bitmap segmentedImage = this.stickerMakerView.getSegmentedImage(this.centerImage.getBitmap(), z, this.centerImage.getOrientation());
            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex);
            if (thanosEffect == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda93(this));
                return;
            }
            Bitmap thanosImage = this.stickerMakerView.getThanosImage(photoEntry, this.centerImage.getOrientation());
            if (thanosImage == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda93(this));
                return;
            }
            MediaController.CropState cropState = mediaEditState.cropState;
            if (cropState != null) {
                thanosImage = createCroppedBitmap(thanosImage, cropState, new int[]{this.centerImage.getOrientation(), this.centerImage.getInvert()}, true);
            }
            if (thanosImage == null) {
                this.centerImage.setImageBitmap(segmentedImage);
                this.cutOutBtn.setUndoCutState(true);
                showEditStickerMode(true, true);
                this.cutOutBtn.post(new PhotoViewer$$ExternalSyntheticLambda93(this));
                return;
            }
            Matrix matrix = new Matrix();
            int width = thanosImage.getWidth();
            int height = thanosImage.getHeight();
            if (!photoEntry.isCropped && (this.centerImage.getOrientation() / 90) % 2 != 0) {
                width = thanosImage.getHeight();
                height = thanosImage.getWidth();
            }
            float f5 = width;
            float f6 = height;
            float min = Math.min(getContainerViewWidth() / f5, getContainerViewHeight() / f6);
            float f7 = f5 * min;
            float f8 = f6 * min;
            if (this.centerImage.getOrientation() == 0 || photoEntry.isCropped) {
                f = 0.0f;
                if (this.rotate == 0.0f) {
                    f2 = f7;
                    f3 = f8;
                    f4 = 0.0f;
                    matrix.postScale(f2, f3);
                    float f9 = this.scale;
                    matrix.postScale(f9, f9, f2 / 2.0f, f3 / 2.0f);
                    matrix.postTranslate(this.translationX + f + Math.max(0, (int) ((getContainerViewWidth() - f7) / 2.0f)), this.translationY + f4 + Math.max(0, (int) ((getContainerViewHeight() - f8) / 2.0f)));
                    this.stickerMakerView.isThanosInProgress = true;
                    Utilities.themeQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda123
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$setParentActivity$20(segmentedImage);
                        }
                    });
                    final Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda124
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$setParentActivity$21();
                        }
                    };
                    thanosEffect.animate(matrix, thanosImage, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda125
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$setParentActivity$22(segmentedImage, runnable);
                        }
                    }, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda126
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.lambda$setParentActivity$23();
                        }
                    });
                    AndroidUtilities.runOnUIThread(runnable, 1200L);
                }
            }
            float width2 = thanosImage.getWidth();
            float height2 = thanosImage.getHeight();
            float f10 = width2 / 2.0f;
            float f11 = height2 / 2.0f;
            float sqrt = (float) Math.sqrt((f10 * f10) + (f11 * f11));
            float f12 = sqrt * 2.0f;
            int i = (int) f12;
            Bitmap createBitmap = Bitmap.createBitmap(i, i, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(createBitmap);
            canvas.save();
            canvas.rotate((photoEntry.isCropped ? 0 : this.centerImage.getOrientation()) + this.rotate, sqrt, sqrt);
            canvas.drawBitmap(thanosImage, (f12 - width2) / 2.0f, (f12 - height2) / 2.0f, (Paint) null);
            thanosImage.recycle();
            float f13 = f7 / 2.0f;
            float f14 = f8 / 2.0f;
            f3 = ((float) Math.sqrt((f13 * f13) + (f14 * f14))) * 2.0f;
            f = (-(f3 - f7)) / 2.0f;
            f4 = (-(f3 - f8)) / 2.0f;
            thanosImage = createBitmap;
            f2 = f3;
            matrix.postScale(f2, f3);
            float f92 = this.scale;
            matrix.postScale(f92, f92, f2 / 2.0f, f3 / 2.0f);
            matrix.postTranslate(this.translationX + f + Math.max(0, (int) ((getContainerViewWidth() - f7) / 2.0f)), this.translationY + f4 + Math.max(0, (int) ((getContainerViewHeight() - f8) / 2.0f)));
            this.stickerMakerView.isThanosInProgress = true;
            Utilities.themeQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda123
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$20(segmentedImage);
                }
            });
            final Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda124
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$21();
                }
            };
            thanosEffect.animate(matrix, thanosImage, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda125
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setParentActivity$22(segmentedImage, runnable2);
                }
            }, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda126
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.lambda$setParentActivity$23();
                }
            });
            AndroidUtilities.runOnUIThread(runnable2, 1200L);
        } else {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
        }
        this.stickerMakerView.disableClippingMode();
        this.containerView.invalidate();
    }

    public /* synthetic */ void lambda$setParentActivity$25(View view) {
        int i;
        if (this.stickerEmpty || this.cutOutBtn.isLoading() || this.cutOutBtn.isUndoCutState() || (i = this.currentIndex) < 0 || i >= this.imagesArrLocals.size() || this.stickerMakerView.isThanosInProgress) {
            return;
        }
        final MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex);
        final boolean z = !TextUtils.isEmpty(mediaEditState.filterPath);
        if (this.cutOutBtn.isCutOutState()) {
            this.cutOutBtn.setCancelState(true);
            this.stickerMakerView.enableClippingMode(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda85
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$setParentActivity$24(z, mediaEditState, (StickerMakerView.SegmentedObject) obj);
                }
            });
        } else if (!this.cutOutBtn.isCancelState()) {
            this.stickerMakerView.resetPaths();
            this.stickerMakerView.getThanosEffect();
            this.stickerMakerView.setSegmentedState(false, null);
            this.centerImage.setImageBitmap(this.stickerMakerView.getSourceBitmap(z));
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
            applyCurrentEditMode();
            return;
        } else {
            this.cutOutBtn.setCutOutState(true);
            showEditStickerMode(false, true);
            this.stickerMakerView.disableClippingMode();
        }
        this.containerView.invalidate();
    }

    public /* synthetic */ void lambda$setParentActivity$26(View view) {
        this.eraseBtn.setActive(true, true);
        this.restoreBtn.setActive(false, true);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setOutlineVisible(false);
        }
        this.maskPaintViewEraser = true;
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView != null) {
            maskPaintView.setEraser(true);
        }
        switchToEditMode(4);
    }

    public /* synthetic */ void lambda$setParentActivity$27(View view) {
        this.eraseBtn.setActive(false, true);
        this.restoreBtn.setActive(true, true);
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setOutlineVisible(false);
        }
        this.maskPaintViewEraser = false;
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView != null) {
            maskPaintView.setEraser(false);
        }
        switchToEditMode(4);
    }

    public /* synthetic */ void lambda$setParentActivity$28(View view) {
        MaskPaintView maskPaintView = this.maskPaintView;
        if (maskPaintView == null || !maskPaintView.undo()) {
            switchToEditMode(0);
            this.stickerMakerView.resetPaths();
            boolean z = !TextUtils.isEmpty(((MediaController.MediaEditState) this.imagesArrLocals.get(this.currentIndex)).filterPath);
            StickerMakerView stickerMakerView = this.stickerMakerView;
            if (stickerMakerView != null && !stickerMakerView.empty) {
                stickerMakerView.setSegmentedState(false, null);
            }
            this.centerImage.setImageBitmap(this.stickerMakerView.getSourceBitmap(z));
            StickerMakerView stickerMakerView2 = this.stickerMakerView;
            if (stickerMakerView2 == null || !stickerMakerView2.empty) {
                this.cutOutBtn.setCutOutState(true);
            }
            showStickerMode(true, true);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$29(View view) {
        if (this.stickerMakerView != null) {
            BlurButton blurButton = this.outlineBtn;
            boolean z = true;
            blurButton.setActive(!blurButton.isActive(), true);
            this.stickerMakerView.setOutlineVisible((!this.outlineBtn.isActive() || this.eraseBtn.isActive() || this.restoreBtn.isActive()) ? false : false);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$30(View view) {
        if (!this.captionEdit.isCaptionOverLimit()) {
            ChatActivity chatActivity = this.parentChatActivity;
            if (chatActivity == null || !chatActivity.isInScheduleMode() || this.parentChatActivity.isEditingMessageMedia()) {
                sendPressed(true, 0);
                return;
            } else {
                showScheduleDatePickerDialog();
                return;
            }
        }
        AnimatedTextView animatedTextView = this.captionEdit.limitTextView;
        float f = -this.shiftDp;
        this.shiftDp = f;
        AndroidUtilities.shakeViewSpring(animatedTextView, f);
        BotWebViewVibrationEffect.APP_ERROR.vibrate();
        if (MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked() || MessagesController.getInstance(this.currentAccount).captionLengthLimitPremium <= this.captionEdit.getCodePointCount()) {
            return;
        }
        showCaptionLimitBulletin(this.containerView);
    }

    public /* synthetic */ boolean lambda$setParentActivity$31(View view, MotionEvent motionEvent) {
        ActionBarPopupWindow actionBarPopupWindow;
        if (motionEvent.getActionMasked() == 0 && (actionBarPopupWindow = this.sendPopupWindow) != null && actionBarPopupWindow.isShowing()) {
            view.getHitRect(this.hitRect);
            if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                return false;
            }
            this.sendPopupWindow.dismiss();
            return false;
        }
        return false;
    }

    public /* synthetic */ void lambda$setParentActivity$32(KeyEvent keyEvent) {
        ActionBarPopupWindow actionBarPopupWindow;
        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0 && (actionBarPopupWindow = this.sendPopupWindow) != null && actionBarPopupWindow.isShowing()) {
            this.sendPopupWindow.dismiss();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$33(int i, View view) {
        ActionBarPopupWindow actionBarPopupWindow = this.sendPopupWindow;
        if (actionBarPopupWindow != null && actionBarPopupWindow.isShowing()) {
            this.sendPopupWindow.dismiss();
        }
        if (i == 0) {
            showScheduleDatePickerDialog();
        } else if (i == 1) {
            sendPressed(false, 0);
        } else if (i == 2) {
            replacePressed();
        } else if (i == 3) {
            sendPressed(true, 0);
        } else if (i == 4) {
            sendPressed(true, 0, false, true, false);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:209:0x0100, code lost:
        if (org.telegram.messenger.UserObject.isUserSelf(r2) != false) goto L35;
     */
    /* JADX WARN: Code restructure failed: missing block: B:212:0x0105, code lost:
        if (r12 == 3) goto L113;
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x0107, code lost:
        if (r6 == false) goto L35;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x010a, code lost:
        if (r12 != r7) goto L70;
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x010e, code lost:
        if (r16.isCurrentVideo == false) goto L111;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x0116, code lost:
        if (r16.captionEdit.hasTimer() == false) goto L70;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ boolean lambda$setParentActivity$34(Theme.ResourcesProvider resourcesProvider, View view) {
        ChatActivity chatActivity;
        String string;
        int i;
        int i2;
        String str;
        PhotoViewerProvider photoViewerProvider;
        PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
        if ((photoViewerProvider2 == null || photoViewerProvider2.allowSendingSubmenu()) && this.sendPhotoType != 11) {
            BaseFragment baseFragment = this.parentFragment;
            if (((baseFragment == null || baseFragment.getLastStoryViewer() == null) && ((chatActivity = this.parentChatActivity) == null || chatActivity.isInScheduleMode())) || this.captionEdit.isCaptionOverLimit()) {
                return false;
            }
            this.parentChatActivity.getCurrentChat();
            TLRPC.User currentUser = this.parentChatActivity.getCurrentUser();
            ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(this.parentActivity);
            this.sendPopupLayout = actionBarPopupWindowLayout;
            actionBarPopupWindowLayout.setAnimationEnabled(false);
            this.sendPopupLayout.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda104
                @Override // android.view.View.OnTouchListener
                public final boolean onTouch(View view2, MotionEvent motionEvent) {
                    boolean lambda$setParentActivity$31;
                    lambda$setParentActivity$31 = PhotoViewer.this.lambda$setParentActivity$31(view2, motionEvent);
                    return lambda$setParentActivity$31;
                }
            });
            this.sendPopupLayout.setDispatchKeyEventListener(new ActionBarPopupWindow.OnDispatchKeyEventListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda105
                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow.OnDispatchKeyEventListener
                public final void onDispatchKeyEvent(KeyEvent keyEvent) {
                    PhotoViewer.this.lambda$setParentActivity$32(keyEvent);
                }
            });
            this.sendPopupLayout.setShownFromBottom(false);
            this.sendPopupLayout.setBackgroundColor(-115203550);
            PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
            boolean z = photoViewerProvider3 != null && photoViewerProvider3.canEdit(this.currentIndex);
            PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
            boolean z2 = photoViewerProvider4 != null && photoViewerProvider4.canReplace(this.currentIndex);
            int i3 = 4;
            int[] iArr = {4, 3, 2, 0, 1};
            int i4 = 0;
            while (i4 < 5) {
                final int i5 = iArr[i4];
                if ((i5 == 2 || i5 == 3 || !z || !z2) && ((i5 == 1 || !z || z2) && (i5 != 0 || this.parentChatActivity.canScheduleMessage()))) {
                    if (i5 != 0 || (photoViewerProvider = this.placeProvider) == null || photoViewerProvider.getSelectedPhotos() == null) {
                        if (i5 == 1) {
                        }
                        if (i5 != 2) {
                        }
                    } else {
                        for (Map.Entry entry : this.placeProvider.getSelectedPhotos().entrySet()) {
                            Object value = entry.getValue();
                            if (value instanceof MediaController.PhotoEntry) {
                                if (((MediaController.PhotoEntry) value).ttl != 0) {
                                }
                            } else if ((value instanceof MediaController.SearchImage) && ((MediaController.SearchImage) value).ttl != 0) {
                            }
                        }
                        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.parentActivity, i5 == 0, i5 == 3, resourcesProvider);
                        if (i5 == 0) {
                            if (UserObject.isUserSelf(currentUser)) {
                                i2 = R.string.SetReminder;
                                str = "SetReminder";
                            } else {
                                i2 = R.string.ScheduleMessage;
                                str = "ScheduleMessage";
                            }
                            string = LocaleController.getString(str, i2);
                            i = R.drawable.msg_calendar2;
                        } else if (i5 == 1) {
                            string = LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound);
                            i = R.drawable.input_notify_off;
                        } else if (i5 == 2) {
                            string = LocaleController.getString("ReplacePhoto", R.string.ReplacePhoto);
                            i = R.drawable.msg_replace;
                        } else if (i5 == 3) {
                            string = LocaleController.getString("SendAsNewPhoto", R.string.SendAsNewPhoto);
                            i = R.drawable.msg_send;
                        } else {
                            if (i5 == 4) {
                                PhotoViewerProvider photoViewerProvider5 = this.placeProvider;
                                actionBarMenuSubItem.setTextAndIcon(LocaleController.getString((photoViewerProvider5 == null || photoViewerProvider5.getSelectedCount() <= 1) ? R.string.SendAsFile : R.string.SendAsFiles), R.drawable.msg_sendfile);
                            }
                            actionBarMenuSubItem.setMinimumWidth(AndroidUtilities.dp(196.0f));
                            actionBarMenuSubItem.setColors(-1, -1);
                            this.sendPopupLayout.addView((View) actionBarMenuSubItem, LayoutHelper.createLinear(-1, 48));
                            actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda106
                                @Override // android.view.View.OnClickListener
                                public final void onClick(View view2) {
                                    PhotoViewer.this.lambda$setParentActivity$33(i5, view2);
                                }
                            });
                        }
                        actionBarMenuSubItem.setTextAndIcon(string, i);
                        actionBarMenuSubItem.setMinimumWidth(AndroidUtilities.dp(196.0f));
                        actionBarMenuSubItem.setColors(-1, -1);
                        this.sendPopupLayout.addView((View) actionBarMenuSubItem, LayoutHelper.createLinear(-1, 48));
                        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda106
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view2) {
                                PhotoViewer.this.lambda$setParentActivity$33(i5, view2);
                            }
                        });
                    }
                    i4++;
                    i3 = 4;
                }
                i4++;
                i3 = 4;
            }
            if (this.sendPopupLayout.getChildCount() == 0) {
                return false;
            }
            this.sendPopupLayout.setupRadialSelectors(620756991);
            ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(this.sendPopupLayout, -2, -2);
            this.sendPopupWindow = actionBarPopupWindow;
            actionBarPopupWindow.setAnimationEnabled(false);
            this.sendPopupWindow.setAnimationStyle(R.style.PopupContextAnimation2);
            this.sendPopupWindow.setOutsideTouchable(true);
            this.sendPopupWindow.setClippingEnabled(true);
            this.sendPopupWindow.setInputMethodMode(2);
            this.sendPopupWindow.setSoftInputMode(0);
            this.sendPopupWindow.getContentView().setFocusableInTouchMode(true);
            this.sendPopupLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
            this.sendPopupWindow.setFocusable(true);
            int[] iArr2 = new int[2];
            view.getLocationInWindow(iArr2);
            this.sendPopupWindow.showAtLocation(view, 51, ((iArr2[0] + view.getMeasuredWidth()) - this.sendPopupLayout.getMeasuredWidth()) + AndroidUtilities.dp(14.0f), (iArr2[1] - this.sendPopupLayout.getMeasuredHeight()) - AndroidUtilities.dp(18.0f));
            view.performHapticFeedback(3, 2);
            return false;
        }
        return false;
    }

    public /* synthetic */ void lambda$setParentActivity$35(View view) {
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(1);
    }

    public /* synthetic */ void lambda$setParentActivity$36(View view) {
        cropRotate(-90.0f);
    }

    public /* synthetic */ void lambda$setParentActivity$37(View view) {
        cropMirror();
    }

    public /* synthetic */ void lambda$setParentActivity$38(View view) {
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(3);
    }

    public /* synthetic */ void lambda$setParentActivity$39(View view) {
        if (isCaptionOpen()) {
            return;
        }
        this.muteVideo = !this.muteVideo;
        updateMuteButton();
        updateVideoInfo();
        if (this.muteVideo && !this.checkImageView.isChecked()) {
            this.checkImageView.callOnClick();
            return;
        }
        Object obj = this.imagesArrLocals.get(this.currentIndex);
        if (obj instanceof MediaController.MediaEditState) {
            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$40(Activity activity, View view) {
        if (isCaptionOpen() || this.muteVideo) {
            return;
        }
        if (this.compressItem.getTag() != null) {
            showQualityView(true);
            requestVideoPreview(1);
        } else if (this.videoConvertSupported) {
            if (this.tooltip == null) {
                this.tooltip = new Tooltip(activity, this.containerView, -871296751, -1);
            }
            this.tooltip.setText(LocaleController.getString("VideoQualityIsTooLow", R.string.VideoQualityIsTooLow));
            this.tooltip.show(this.compressItem);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$41(View view) {
        if (view.getAlpha() < 0.9f) {
            return;
        }
        cancelStickerClippingMode();
        if (isCaptionOpen()) {
            return;
        }
        if (this.isCurrentVideo) {
            if (!this.videoConvertSupported) {
                return;
            }
            TextureView textureView = this.videoTextureView;
            if (!(textureView instanceof VideoEditTextureView)) {
                return;
            }
            VideoEditTextureView videoEditTextureView = (VideoEditTextureView) textureView;
            if (videoEditTextureView.getVideoWidth() <= 0 || videoEditTextureView.getVideoHeight() <= 0) {
                return;
            }
        }
        switchToEditMode(2);
    }

    public /* synthetic */ void lambda$setParentActivity$42() {
        this.cropTransform.setViewTransform(this.previousHasTransform, this.previousCropPx, this.previousCropPy, this.previousCropRotation, this.previousCropOrientation, this.previousCropScale, scale1(), scale1(), this.previousCropPw, this.previousCropPh, 0.0f, 0.0f, this.previousCropMirrored);
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$setParentActivity$43(View view) {
        if (this.imageMoveAnimation != null) {
            return;
        }
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$setParentActivity$42();
            }
        };
        if (this.previousHasTransform) {
            runnable.run();
            return;
        }
        float stateOrientation = this.previousCropOrientation - this.photoCropView.cropView.getStateOrientation();
        if (Math.abs(stateOrientation) > 180.0f) {
            stateOrientation = stateOrientation < 0.0f ? stateOrientation + 360.0f : -(360.0f - stateOrientation);
        }
        cropRotate(stateOrientation, this.photoCropView.cropView.getStateMirror(), runnable);
    }

    public /* synthetic */ void lambda$setParentActivity$44(View view) {
        if (this.currentEditMode != 1 || this.photoCropView.isReady()) {
            applyCurrentEditMode();
            switchToEditMode(0);
        }
    }

    public /* synthetic */ void lambda$setParentActivity$45() {
        this.photoCropView.reset(true);
    }

    public /* synthetic */ void lambda$setParentActivity$46(View view) {
        float f = -this.photoCropView.cropView.getStateOrientation();
        if (Math.abs(f) > 180.0f) {
            f = f < 0.0f ? f + 360.0f : -(360.0f - f);
        }
        cropRotate(f, this.photoCropView.cropView.getStateMirror(), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$setParentActivity$45();
            }
        });
    }

    public /* synthetic */ void lambda$setParentActivity$47(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        PhotoViewerProvider photoViewerProvider;
        int i;
        Bitmap bitmap;
        int i2;
        if (imageReceiver == this.centerImage && z && !z2) {
            if (!this.isCurrentVideo && ((this.currentEditMode == 1 || (i2 = this.sendPhotoType) == 1 || i2 == 11) && this.photoCropView != null && (bitmap = imageReceiver.getBitmap()) != null)) {
                PhotoCropView photoCropView = this.photoCropView;
                int orientation = imageReceiver.getOrientation();
                int i3 = this.sendPhotoType;
                photoCropView.setBitmap(bitmap, orientation, (i3 == 1 || i3 == 11) ? false : true, true, this.paintingOverlay, this.cropTransform, null, null);
            }
            if (this.paintingOverlay.getVisibility() == 0) {
                this.containerView.requestLayout();
            }
            detectFaces();
        }
        if (imageReceiver != this.centerImage || !z || (photoViewerProvider = this.placeProvider) == null || !photoViewerProvider.scaleToFill() || this.ignoreDidSetImage || (i = this.sendPhotoType) == 1 || i == 11) {
            return;
        }
        if (this.wasLayout) {
            setScaleToFill();
        } else {
            this.dontResetZoomOnFirstLayout = true;
        }
    }

    public /* synthetic */ void lambda$setParentActivity$48(View view) {
        if (isCaptionOpen()) {
            return;
        }
        setPhotoChecked();
    }

    public /* synthetic */ void lambda$setParentActivity$49(View view) {
        PhotoViewerProvider photoViewerProvider;
        if (isCaptionOpen() || (photoViewerProvider = this.placeProvider) == null || photoViewerProvider.getSelectedPhotosOrder() == null || this.placeProvider.getSelectedPhotosOrder().isEmpty()) {
            return;
        }
        togglePhotosListView(!this.isPhotosListViewVisible, true);
    }

    public /* synthetic */ void lambda$setParentActivity$50(View view, int i) {
        int i2;
        if (!this.imagesArrLocals.isEmpty() && (i2 = this.currentIndex) >= 0 && i2 < this.imagesArrLocals.size()) {
            Object obj = this.imagesArrLocals.get(this.currentIndex);
            if (obj instanceof MediaController.MediaEditState) {
                ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
            }
        }
        this.ignoreDidSetImage = true;
        int indexOf = this.imagesArrLocals.indexOf(view.getTag());
        if (indexOf >= 0) {
            this.currentIndex = -1;
            setImageIndex(indexOf);
        }
        this.ignoreDidSetImage = false;
    }

    public /* synthetic */ WindowInsets lambda$setParentActivity$6(View view, WindowInsets windowInsets) {
        int stableInsetLeft;
        int stableInsetTop;
        int stableInsetRight;
        int stableInsetBottom;
        int systemWindowInsetLeft;
        int systemWindowInsetRight;
        WindowInsets consumeSystemWindowInsets;
        WindowInsets windowInsets2;
        Insets insets;
        int i;
        int i2;
        int i3;
        int i4;
        Rect rect = new Rect(this.insets);
        int i5 = Build.VERSION.SDK_INT;
        if (i5 >= 30) {
            insets = windowInsets.getInsets(WindowInsetsCompat.Type.displayCutout() | WindowInsetsCompat.Type.systemBars());
            Rect rect2 = this.insets;
            i = insets.left;
            i2 = insets.top;
            i3 = insets.right;
            i4 = insets.bottom;
            rect2.set(i, i2, i3, i4);
        } else {
            Rect rect3 = this.insets;
            stableInsetLeft = windowInsets.getStableInsetLeft();
            stableInsetTop = windowInsets.getStableInsetTop();
            stableInsetRight = windowInsets.getStableInsetRight();
            stableInsetBottom = windowInsets.getStableInsetBottom();
            rect3.set(stableInsetLeft, stableInsetTop, stableInsetRight, stableInsetBottom);
        }
        int i6 = this.insets.top;
        Activity activity = this.parentActivity;
        if ((activity instanceof LaunchActivity) && ((i6 != 0 || AndroidUtilities.isInMultiwindow) && !this.inBubbleMode && AndroidUtilities.statusBarHeight != i6)) {
            AndroidUtilities.statusBarHeight = i6;
            ((LaunchActivity) activity).drawerLayoutContainer.requestLayout();
        }
        if (!rect.equals(windowInsets)) {
            int i7 = this.animationInProgress;
            if (i7 == 1 || i7 == 3) {
                ClippingImageView clippingImageView = this.animatingImageView;
                clippingImageView.setTranslationX(clippingImageView.getTranslationX() - getLeftInset());
                this.animationValues[0][2] = this.animatingImageView.getTranslationX();
            }
            FrameLayout frameLayout = this.windowView;
            if (frameLayout != null) {
                frameLayout.requestLayout();
            }
        }
        View view2 = this.navigationBar;
        if (view2 != null) {
            this.navigationBarHeight = this.insets.bottom;
            ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams) view2.getLayoutParams();
            int i8 = this.navigationBarHeight;
            marginLayoutParams.height = i8;
            marginLayoutParams.bottomMargin = (-i8) / 2;
            this.navigationBar.setLayoutParams(marginLayoutParams);
        }
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        systemWindowInsetLeft = windowInsets.getSystemWindowInsetLeft();
        systemWindowInsetRight = windowInsets.getSystemWindowInsetRight();
        frameLayoutDrawer.setPadding(systemWindowInsetLeft, 0, systemWindowInsetRight, 0);
        if (this.actionBar != null) {
            AndroidUtilities.cancelRunOnUIThread(this.updateContainerFlagsRunnable);
            if (this.isVisible && this.animationInProgress == 0) {
                AndroidUtilities.runOnUIThread(this.updateContainerFlagsRunnable, 200L);
            }
        }
        if (i5 >= 30) {
            windowInsets2 = WindowInsets.CONSUMED;
            return windowInsets2;
        }
        consumeSystemWindowInsets = windowInsets.consumeSystemWindowInsets();
        return consumeSystemWindowInsets;
    }

    public /* synthetic */ void lambda$setParentActivity$7(View view) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.isSponsored()) {
            openAdsMenu();
        } else if (this.actionBar.actionBarMenuOnItemClick.canOpenMenu()) {
            this.menuItem.toggleSubMenu();
        }
    }

    public /* synthetic */ void lambda$setParentActivity$8(Boolean bool) {
        checkProgress(0, false, false);
    }

    public /* synthetic */ void lambda$setParentActivity$9(int i, boolean z, boolean z2) {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.setSelectedQuality(i, false);
        }
        if (i == -1) {
            VideoPlayer.saveQuality(null, this.currentMessageObject);
        } else {
            VideoPlayer.saveQuality(this.videoPlayer.getQuality(i), this.currentMessageObject);
        }
        updateQualityItems();
        if (z2) {
            this.menuItem.toggleSubMenu();
        }
    }

    public /* synthetic */ void lambda$setVideoPlayerControlVisible$64(ValueAnimator valueAnimator) {
        this.videoPlayerControlFrameLayout.setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public /* synthetic */ void lambda$showAlertDialog$65(DialogInterface dialogInterface) {
        this.visibleDialog = null;
    }

    public /* synthetic */ void lambda$showCaptionLimitBulletin$51() {
        closePhoto(false, false);
        ChatAttachAlert chatAttachAlert = this.parentAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismiss(true);
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment != null) {
            baseFragment.presentFragment(new PremiumPreviewFragment("caption_limit"));
        }
    }

    public /* synthetic */ void lambda$showCaptionLimitBulletin$52() {
        this.limitBulletin = null;
    }

    public /* synthetic */ void lambda$showShareAlert$56(ShareAlert shareAlert) {
        if (shareAlert == null || shareAlert.getWindow() == null) {
            return;
        }
        shareAlert.setFocusable(true);
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getChatActivityEnterView() == null) {
            return;
        }
        this.parentChatActivity.getChatActivityEnterView().hidePopup(false);
    }

    public /* synthetic */ void lambda$switchToEditMode$70(ValueAnimator valueAnimator) {
        this.photoCropView.cropView.areaView.setRotationScaleTranslation(0.0f, AndroidUtilities.lerp(this.scale, this.animateToScale, this.animationValue), AndroidUtilities.lerp(this.translationX, this.animateToX, this.animationValue), AndroidUtilities.lerp(this.translationY, this.animateToY, this.animationValue));
    }

    public /* synthetic */ void lambda$switchToEditMode$71(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationY(((Float) valueAnimator.getAnimatedValue()).floatValue(), 0.0f, 0, false);
    }

    public /* synthetic */ void lambda$switchToEditMode$72(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationX(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public /* synthetic */ void lambda$switchToEditMode$73(View view) {
        applyCurrentEditMode();
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$switchToEditMode$74(DialogInterface dialogInterface, int i) {
        switchToEditMode(0);
    }

    public /* synthetic */ void lambda$switchToEditMode$75(View view) {
        if (!this.photoFilterView.hasChanges()) {
            switchToEditMode(0);
            return;
        }
        Activity activity = this.parentActivity;
        if (activity == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(activity, this.resourcesProvider);
        builder.setMessage(LocaleController.getString("DiscardChanges", R.string.DiscardChanges));
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda116
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                PhotoViewer.this.lambda$switchToEditMode$74(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showAlertDialog(builder);
    }

    public /* synthetic */ void lambda$switchToPaintMode$85(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationY(((Float) valueAnimator.getAnimatedValue()).floatValue(), 0.0f, 0, false);
    }

    public /* synthetic */ void lambda$switchToPaintMode$86(ValueAnimator valueAnimator) {
        this.photoPaintView.setOffsetTranslationX(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public static /* synthetic */ void lambda$switchToPip$57(ImageReceiver imageReceiver, ValueAnimator valueAnimator) {
        imageReceiver.setAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    public /* synthetic */ void lambda$switchToPip$58(CubicBezierInterpolator cubicBezierInterpolator, float f, float f2, float f3, float f4, View view, float f5, float f6, float f7, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        float interpolation = cubicBezierInterpolator == null ? floatValue : cubicBezierInterpolator.getInterpolation(floatValue);
        ImageView imageView = this.textureImageView;
        if (imageView != null) {
            imageView.setTranslationX(((1.0f - floatValue) * f) + (f2 * floatValue));
            this.textureImageView.setTranslationY((f3 * (1.0f - interpolation)) + (f4 * interpolation));
            this.textureImageView.invalidateOutline();
        }
        view.setTranslationX((f * (1.0f - floatValue)) + (f5 * floatValue));
        view.setTranslationY((f6 * (1.0f - interpolation)) + (f7 * interpolation));
        view.invalidateOutline();
        FirstFrameView firstFrameView = this.firstFrameView;
        if (firstFrameView != null) {
            firstFrameView.setTranslationX(view.getTranslationX());
            this.firstFrameView.setTranslationY(view.getTranslationY());
            this.firstFrameView.setScaleX(view.getScaleX());
            this.firstFrameView.setScaleY(view.getScaleY());
            this.firstFrameView.invalidateOutline();
        }
    }

    public /* synthetic */ void lambda$switchToPip$59(ValueAnimator valueAnimator) {
        this.clippingImageProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
    }

    public /* synthetic */ void lambda$toggleActionBar$87(ValueAnimator valueAnimator) {
        this.photoProgressViews[0].setIndexedAlpha(1, ((Float) valueAnimator.getAnimatedValue()).floatValue(), false);
    }

    public /* synthetic */ void lambda$translateY$83(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.translateY = floatValue;
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.translateY(floatValue);
        }
        this.containerView.invalidate();
    }

    public /* synthetic */ void lambda$updateResetButtonVisibility$66(boolean z) {
        if (z) {
            return;
        }
        this.resetButton.setVisibility(8);
    }

    public void makeFocusable() {
        WindowManager.LayoutParams layoutParams;
        int i;
        if (Build.VERSION.SDK_INT >= 21) {
            layoutParams = this.windowLayoutParams;
            i = -2147417856;
        } else {
            layoutParams = this.windowLayoutParams;
            i = 0;
        }
        layoutParams.flags = i;
        this.windowLayoutParams.softInputMode = NotificationCenter.onDownloadingFilesChanged;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
        this.windowView.setFocusable(true);
        this.containerView.setFocusable(true);
    }

    private void mergeImages(String str, String str2, Bitmap bitmap, Bitmap bitmap2, float f, boolean z) {
        boolean z2;
        if (bitmap == null) {
            try {
                bitmap = BitmapFactory.decodeFile(str2);
                z2 = true;
            } catch (Throwable th) {
                FileLog.e(th);
                return;
            }
        } else {
            z2 = false;
        }
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        float f2 = width;
        if (f2 > f || height > f) {
            float max = Math.max(width, height) / f;
            height = (int) (height / max);
            width = (int) (f2 / max);
        }
        Bitmap createBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(createBitmap);
        Rect rect = new Rect(0, 0, width, height);
        if (z) {
            canvas.drawBitmap(bitmap2, (Rect) null, rect, this.bitmapPaint);
            canvas.drawBitmap(bitmap, (Rect) null, rect, this.bitmapPaint);
        } else {
            canvas.drawBitmap(bitmap, (Rect) null, rect, this.bitmapPaint);
            canvas.drawBitmap(bitmap2, (Rect) null, rect, this.bitmapPaint);
        }
        FileOutputStream fileOutputStream = new FileOutputStream(new File(str));
        createBitmap.compress(getCompressFormat(), f == 512.0f ? 83 : 87, fileOutputStream);
        try {
            fileOutputStream.close();
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (z2) {
            bitmap.recycle();
        }
        createBitmap.recycle();
    }

    private boolean needEncoding() {
        ArrayList arrayList;
        EditState editState = this.editState;
        if (editState.croppedPaintPath != null) {
            ArrayList arrayList2 = editState.croppedMediaEntities;
            if (arrayList2 != null && !arrayList2.isEmpty()) {
                arrayList = this.editState.croppedMediaEntities;
            }
            arrayList = null;
        } else {
            ArrayList arrayList3 = editState.mediaEntities;
            if (arrayList3 != null && !arrayList3.isEmpty()) {
                arrayList = this.editState.mediaEntities;
            }
            arrayList = null;
        }
        EditState editState2 = this.editState;
        String str = editState2.croppedPaintPath;
        if (str == null) {
            str = editState2.paintPath;
        }
        if (this.isH264Video && this.videoCutStart == 0.0f && this.rotationValue == 0 && this.resultWidth == this.originalWidth && this.resultHeight == this.originalHeight) {
            EditState editState3 = this.editState;
            return (editState3.cropState == null && arrayList == null && str == null && editState3.savedFilterState == null && this.sendPhotoType != 1) ? false : true;
        }
        return true;
    }

    /* JADX WARN: Code restructure failed: missing block: B:156:0x003c, code lost:
        if (r0.exists() == false) goto L100;
     */
    /* JADX WARN: Code restructure failed: missing block: B:194:0x00e7, code lost:
        if (r0.exists() == false) goto L95;
     */
    /* JADX WARN: Code restructure failed: missing block: B:199:0x0126, code lost:
        if (r0.exists() == false) goto L95;
     */
    /* JADX WARN: Removed duplicated region for block: B:224:0x0190 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:228:0x019a A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:263:0x028c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onActionClick(boolean z) {
        int i;
        File file;
        File file2;
        ArrayList arrayList;
        Uri uri;
        FileLoader fileLoader;
        TLRPC.Document document;
        FileLoader fileLoader2;
        TLRPC.Document document2;
        TLRPC.Document document3;
        TLRPC.MessageMedia messageMedia;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null && this.currentBotInlineResult == null && ((this.pageBlocksAdapter == null || this.currentFileNames[0] == null) && this.sendPhotoType != -1)) {
            return;
        }
        this.isStreaming = false;
        if (messageObject != null) {
            String str = messageObject.messageOwner.attachPath;
            if (str != null && str.length() != 0) {
                file2 = new File(this.currentMessageObject.messageOwner.attachPath);
            }
            file2 = null;
            if (file2 == null) {
                ArrayList arrayList2 = new ArrayList();
                MessageObject messageObject2 = this.currentMessageObject;
                TLRPC.Message message = messageObject2.messageOwner;
                if (message == null || (messageMedia = message.media) == null || (document3 = messageMedia.document) == null) {
                    document3 = messageObject2.getDocument();
                } else {
                    arrayList2.addAll(messageMedia.alt_documents);
                }
                if ((document3 != null ? 1 : 0) + arrayList2.size() <= 1) {
                    file2 = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                }
                if (file2 == null || !file2.exists()) {
                    if (SharedConfig.streamMedia && !DialogObject.isEncryptedDialog(this.currentMessageObject.getDialogId()) && this.currentMessageObject.isVideo() && this.currentMessageObject.canStreamVideo()) {
                        int fileReference = FileLoader.getInstance(this.currentMessageObject.currentAccount).getFileReference(this.currentMessageObject);
                        arrayList = new ArrayList();
                        arrayList.addAll(VideoPlayer.getQualities(this.currentAccount, document3, arrayList2, fileReference, false));
                        this.isStreaming = true;
                        checkProgress(0, false, false);
                        file2 = null;
                        uri = null;
                        if (file2 != null && uri == null && arrayList == null) {
                            uri = Uri.fromFile(file2);
                        }
                        if (uri == null || arrayList != null) {
                            if (this.sharedMediaType != 1 && !this.currentMessageObject.canPreviewDocument()) {
                                AndroidUtilities.openDocument(this.currentMessageObject, this.parentActivity, null);
                                return;
                            }
                            preparePlayer(arrayList, uri, true, false);
                            this.videoSizeSet = true;
                        } else if (z) {
                            if (this.currentMessageObject == null) {
                                TLRPC.BotInlineResult botInlineResult = this.currentBotInlineResult;
                                if (botInlineResult != null) {
                                    if (botInlineResult.document != null) {
                                        if (FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                                            fileLoader = FileLoader.getInstance(this.currentAccount);
                                            document = this.currentBotInlineResult.document;
                                            fileLoader.cancelLoadFile(document);
                                        } else {
                                            fileLoader2 = FileLoader.getInstance(this.currentAccount);
                                            document2 = this.currentBotInlineResult.document;
                                            fileLoader2.loadFile(document2, this.currentMessageObject, 1, 0);
                                        }
                                    } else if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
                                        if (ImageLoader.getInstance().isLoadingHttpFile(this.currentBotInlineResult.content.url)) {
                                            ImageLoader.getInstance().cancelLoadHttpFile(this.currentBotInlineResult.content.url);
                                        } else {
                                            ImageLoader.getInstance().loadHttpFile(this.currentBotInlineResult.content.url, "mp4", this.currentAccount);
                                        }
                                    }
                                } else if (this.pageBlocksAdapter != null) {
                                    if (FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                                        fileLoader = FileLoader.getInstance(this.currentAccount);
                                        document = (TLRPC.Document) this.pageBlocksAdapter.getMedia(this.currentIndex);
                                        fileLoader.cancelLoadFile(document);
                                    } else {
                                        FileLoader.getInstance(this.currentAccount).loadFile((TLRPC.Document) this.pageBlocksAdapter.getMedia(this.currentIndex), this.pageBlocksAdapter.getParentObject(), 1, 1);
                                    }
                                }
                            } else if (FileLoader.getInstance(this.currentAccount).isLoadingFile(this.currentFileNames[0])) {
                                fileLoader = FileLoader.getInstance(this.currentAccount);
                                document = this.currentMessageObject.getDocument();
                                fileLoader.cancelLoadFile(document);
                            } else {
                                fileLoader2 = FileLoader.getInstance(this.currentAccount);
                                document2 = this.currentMessageObject.getDocument();
                                fileLoader2.loadFile(document2, this.currentMessageObject, 1, 0);
                            }
                            Drawable staticThumb = this.centerImage.getStaticThumb();
                            if (staticThumb instanceof OtherDocumentPlaceholderDrawable) {
                                ((OtherDocumentPlaceholderDrawable) staticThumb).checkFileExist();
                                return;
                            }
                            return;
                        } else {
                            return;
                        }
                    }
                    file2 = null;
                    uri = null;
                }
            }
            uri = null;
        } else {
            TLRPC.BotInlineResult botInlineResult2 = this.currentBotInlineResult;
            if (botInlineResult2 == null) {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    TLObject media = pageBlocksAdapter.getMedia(this.currentIndex);
                    if (!(media instanceof TLRPC.Document)) {
                        return;
                    }
                    file = this.pageBlocksAdapter.getFile(this.currentIndex);
                    if (file != null && !file.exists()) {
                        Uri prepareUri = FileStreamLoadOperation.prepareUri(this.currentAccount, (TLRPC.Document) media, this.pageBlocksAdapter.getParentObject());
                        this.isStreaming = true;
                        arrayList = null;
                        uri = prepareUri;
                        file2 = file;
                        if (file2 != null) {
                            uri = Uri.fromFile(file2);
                        }
                        if (uri == null) {
                        }
                        if (this.sharedMediaType != 1) {
                        }
                        preparePlayer(arrayList, uri, true, false);
                        this.videoSizeSet = true;
                    }
                } else {
                    if (this.sendPhotoType == -1 && !this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                        Object obj = this.imagesArrLocals.get(this.currentIndex);
                        if (obj instanceof MediaController.PhotoEntry) {
                            file = new File(((MediaController.PhotoEntry) obj).path);
                        }
                    }
                    file2 = null;
                    uri = null;
                }
                file2 = file;
                uri = null;
            } else if (botInlineResult2.document != null) {
                file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(this.currentBotInlineResult.document);
            } else {
                if (botInlineResult2.content instanceof TLRPC.TL_webDocument) {
                    file2 = new File(FileLoader.getDirectory(4), Utilities.MD5(this.currentBotInlineResult.content.url) + "." + ImageLoader.getHttpUrlExtension(this.currentBotInlineResult.content.url, "mp4"));
                }
                file2 = null;
                uri = null;
            }
        }
        arrayList = uri;
        if (file2 != null) {
        }
        if (uri == null) {
        }
        if (this.sharedMediaType != 1) {
        }
        preparePlayer(arrayList, uri, true, false);
        this.videoSizeSet = true;
    }

    /* JADX WARN: Code restructure failed: missing block: B:1221:0x0a13, code lost:
        if (r6 == 2) goto L682;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1226:0x0a1b, code lost:
        if (r11 == (-1)) goto L687;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1234:0x0a27, code lost:
        if (r11 == r0) goto L682;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1362:0x0c70, code lost:
        if (r46.centerImageTransformLocked == false) goto L634;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1365:0x0c7a, code lost:
        if (r46.centerImageTransformLocked == false) goto L634;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1366:0x0c7c, code lost:
        r46.centerImageTransform.preRotate(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:1467:0x0e60, code lost:
        if (r46.switchingToMode == (-1)) goto L539;
     */
    /* JADX WARN: Removed duplicated region for block: B:1014:0x048f  */
    /* JADX WARN: Removed duplicated region for block: B:1016:0x0494  */
    /* JADX WARN: Removed duplicated region for block: B:1022:0x04ad  */
    /* JADX WARN: Removed duplicated region for block: B:1023:0x04af  */
    /* JADX WARN: Removed duplicated region for block: B:1027:0x04b6  */
    /* JADX WARN: Removed duplicated region for block: B:1040:0x0505  */
    /* JADX WARN: Removed duplicated region for block: B:1048:0x053a  */
    /* JADX WARN: Removed duplicated region for block: B:1071:0x0600  */
    /* JADX WARN: Removed duplicated region for block: B:1086:0x067e  */
    /* JADX WARN: Removed duplicated region for block: B:1089:0x06d9  */
    /* JADX WARN: Removed duplicated region for block: B:1092:0x06e5  */
    /* JADX WARN: Removed duplicated region for block: B:1097:0x0704  */
    /* JADX WARN: Removed duplicated region for block: B:1109:0x0735  */
    /* JADX WARN: Removed duplicated region for block: B:1117:0x074f  */
    /* JADX WARN: Removed duplicated region for block: B:1128:0x0778 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1135:0x0793  */
    /* JADX WARN: Removed duplicated region for block: B:1141:0x07a8  */
    /* JADX WARN: Removed duplicated region for block: B:1143:0x07b3  */
    /* JADX WARN: Removed duplicated region for block: B:1146:0x083b  */
    /* JADX WARN: Removed duplicated region for block: B:1147:0x083e  */
    /* JADX WARN: Removed duplicated region for block: B:1150:0x0849  */
    /* JADX WARN: Removed duplicated region for block: B:1151:0x084c  */
    /* JADX WARN: Removed duplicated region for block: B:1154:0x0868  */
    /* JADX WARN: Removed duplicated region for block: B:1164:0x08c4 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:1200:0x09b5  */
    /* JADX WARN: Removed duplicated region for block: B:1212:0x09fb  */
    /* JADX WARN: Removed duplicated region for block: B:1238:0x0a30  */
    /* JADX WARN: Removed duplicated region for block: B:1241:0x0a37  */
    /* JADX WARN: Removed duplicated region for block: B:1275:0x0ac3  */
    /* JADX WARN: Removed duplicated region for block: B:1278:0x0ace  */
    /* JADX WARN: Removed duplicated region for block: B:1286:0x0ae6  */
    /* JADX WARN: Removed duplicated region for block: B:1290:0x0b06  */
    /* JADX WARN: Removed duplicated region for block: B:1300:0x0b30  */
    /* JADX WARN: Removed duplicated region for block: B:1322:0x0b75  */
    /* JADX WARN: Removed duplicated region for block: B:1331:0x0bad  */
    /* JADX WARN: Removed duplicated region for block: B:1334:0x0bb7  */
    /* JADX WARN: Removed duplicated region for block: B:1345:0x0bef  */
    /* JADX WARN: Removed duplicated region for block: B:1348:0x0c0b  */
    /* JADX WARN: Removed duplicated region for block: B:1351:0x0c2f  */
    /* JADX WARN: Removed duplicated region for block: B:1354:0x0c5a  */
    /* JADX WARN: Removed duplicated region for block: B:1357:0x0c62  */
    /* JADX WARN: Removed duplicated region for block: B:1368:0x0c88  */
    /* JADX WARN: Removed duplicated region for block: B:1371:0x0c9b  */
    /* JADX WARN: Removed duplicated region for block: B:1376:0x0cc7  */
    /* JADX WARN: Removed duplicated region for block: B:1380:0x0ce1  */
    /* JADX WARN: Removed duplicated region for block: B:1386:0x0cf9  */
    /* JADX WARN: Removed duplicated region for block: B:1387:0x0d18  */
    /* JADX WARN: Removed duplicated region for block: B:1390:0x0d29  */
    /* JADX WARN: Removed duplicated region for block: B:1394:0x0d36  */
    /* JADX WARN: Removed duplicated region for block: B:1453:0x0e35  */
    /* JADX WARN: Removed duplicated region for block: B:1455:0x0e39  */
    /* JADX WARN: Removed duplicated region for block: B:1462:0x0e54  */
    /* JADX WARN: Removed duplicated region for block: B:1474:0x0e80  */
    /* JADX WARN: Removed duplicated region for block: B:1477:0x0e86  */
    /* JADX WARN: Removed duplicated region for block: B:1481:0x0e92  */
    /* JADX WARN: Removed duplicated region for block: B:1485:0x0ea2  */
    /* JADX WARN: Removed duplicated region for block: B:1512:0x0f52  */
    /* JADX WARN: Removed duplicated region for block: B:1538:0x1006  */
    /* JADX WARN: Removed duplicated region for block: B:1556:0x10d6  */
    /* JADX WARN: Removed duplicated region for block: B:1561:0x10e8  */
    /* JADX WARN: Removed duplicated region for block: B:1586:0x1140  */
    /* JADX WARN: Removed duplicated region for block: B:1589:0x1147  */
    /* JADX WARN: Removed duplicated region for block: B:1594:0x118f  */
    /* JADX WARN: Removed duplicated region for block: B:1595:0x119c  */
    /* JADX WARN: Removed duplicated region for block: B:1610:0x0f40 A[EDGE_INSN: B:1610:0x0f40->B:1510:0x0f40 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:961:0x036d  */
    /* JADX WARN: Removed duplicated region for block: B:964:0x037e  */
    /* JADX WARN: Removed duplicated region for block: B:967:0x0385  */
    /* JADX WARN: Removed duplicated region for block: B:999:0x045c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onDraw(Canvas canvas) {
        RecordingCanvas recordingCanvas;
        float f;
        float f2;
        float f3;
        float f4;
        float f5;
        float f6;
        float f7;
        float f8;
        Runnable runnable;
        int i;
        PhotoViewerWebView photoViewerWebView;
        int i2;
        int i3;
        int i4;
        long j;
        int i5;
        int i6;
        float f9;
        float f10;
        float f11;
        float f12;
        float f13;
        float f14;
        float f15;
        boolean z;
        boolean z2;
        float f16;
        StickerMakerView stickerMakerView;
        float f17;
        float f18;
        float f19;
        int i7;
        float f20;
        float f21;
        float f22;
        int i8;
        float f23;
        float f24;
        boolean z3;
        int bitmapWidth;
        int bitmapHeight;
        int i9;
        int i10;
        boolean z4;
        boolean z5;
        int i11;
        boolean z6;
        float f25;
        float f26;
        int i12;
        int i13;
        float f27;
        int i14;
        float f28;
        float f29;
        int i15;
        boolean z7;
        long j2;
        int i16;
        GradientDrawable[] gradientDrawableArr;
        float f30;
        int i17;
        int i18;
        float f31;
        int i19;
        float f32;
        float f33;
        float f34;
        float f35;
        float f36;
        float f37;
        TextureView textureView;
        float f38;
        float f39;
        float minScale;
        int i20;
        float rotation;
        int i21;
        int i22;
        int height;
        int i23;
        int i24;
        int containerViewHeight;
        boolean z8;
        ImageReceiver imageReceiver;
        int i25;
        Canvas canvas2;
        Drawable drawable;
        float f40;
        float f41;
        char c;
        float f42;
        int i26;
        int i27;
        int i28;
        int i29;
        boolean z9;
        PaintingOverlay paintingOverlay;
        AspectRatioFrameLayout aspectRatioFrameLayout;
        int i30;
        float f43;
        float f44;
        float f45;
        float f46;
        float f47;
        float f48;
        int i31;
        float f49;
        int i32;
        int i33;
        int i34;
        boolean z10;
        PaintingOverlay paintingOverlay2;
        float f50;
        int i35;
        ImageReceiver imageReceiver2;
        int i36;
        RecordingCanvas beginRecording;
        Canvas canvas3 = canvas;
        if (BLUR_RENDERNODE()) {
            if (this.renderNode == null) {
                this.renderNode = new RenderNode("photo viewer");
            }
            this.renderNode.setPosition(0, 0, canvas.getWidth(), canvas.getHeight() + AndroidUtilities.navigationBarHeight);
            beginRecording = this.renderNode.beginRecording();
            recordingCanvas = beginRecording;
        } else {
            recordingCanvas = canvas3;
        }
        BaseFragment baseFragment = this.parentFragment;
        float f51 = 1.0f;
        if (baseFragment != null && baseFragment.getFragmentView() != null) {
            if (!this.scroller.isFinished() && this.scroller.computeScrollOffset()) {
                if (this.scroller.getStartX() < this.maxX && this.scroller.getStartX() > this.minX) {
                    this.translationX = this.scroller.getCurrX();
                }
                if (this.scroller.getStartY() < this.maxY && this.scroller.getStartY() > this.minY) {
                    this.translationY = this.scroller.getCurrY();
                }
                invalidateBlur();
                this.containerView.invalidate();
            }
            float abs = Math.abs(this.translationY) / (getContainerViewHeight() / 2.0f);
            float f52 = this.clippingImageProgress;
            if (f52 != 0.0f) {
                abs += (1.0f - abs) * f52;
            }
            float clamp = ((1.0f - Utilities.clamp(abs, 1.0f, 0.0f)) * 0.1f) + 1.0f;
            if (!LiteMode.isEnabled(32768)) {
                clamp = 1.0f;
            }
            View fragmentView = this.parentFragment.getFragmentView();
            if (fragmentView.getScaleX() != clamp || fragmentView.getScaleY() != clamp) {
                fragmentView.setPivotX(fragmentView.getWidth() / 2.0f);
                fragmentView.setPivotY(fragmentView.getHeight() / 2.0f);
                fragmentView.setScaleX(clamp);
                fragmentView.setScaleY(clamp);
            }
            ChatAttachAlert chatAttachAlert = this.parentAlert;
            if (chatAttachAlert != null) {
                BottomSheet.ContainerView container = chatAttachAlert.getContainer();
                if (container.getScaleX() != clamp || container.getScaleY() != clamp) {
                    container.setPivotX(container.getWidth() / 2.0f);
                    container.setPivotY(container.getHeight() / 2.0f);
                    container.setScaleX(clamp);
                    container.setScaleY(clamp);
                }
            }
            int i37 = this.animationInProgress;
            if (i37 == 1 || i37 == 2 || i37 == 3 || this.pipAnimationInProgress) {
                this.containerView.invalidate();
            }
        }
        int i38 = this.animationInProgress;
        if (i38 == 1) {
            if (this.padImageForHorizontalInsets) {
                canvas.save();
                canvas3.translate((getLeftInset() / 2.0f) - (getRightInset() / 2.0f), 0.0f);
            }
            if (this.animatingImageView != null) {
                canvas.save();
                canvas3.translate(this.animatingImageView.getCenterX() - (canvas.getWidth() / 2.0f), this.animatingImageView.getCenterY() - (canvas.getHeight() / 2.0f));
                float animationProgress = this.animatingImageView.getAnimationProgress();
                if (this.animationInProgress != 1) {
                    animationProgress = 1.0f - animationProgress;
                }
                canvas3.scale(animationProgress, animationProgress, canvas.getWidth() / 2.0f, canvas.getHeight() / 2.0f);
                f51 = animationProgress;
            }
            drawProgress(canvas, 0.0f, 1.0f, 0.0f, f51);
            if (this.animatingImageView != null) {
                canvas.restore();
            }
            if (this.padImageForHorizontalInsets) {
                canvas.restore();
            }
            if (this.animatingImageView != null && recordingCanvas != canvas3) {
                recordingCanvas.save();
                recordingCanvas.translate(this.animatingImageView.getX(), this.animatingImageView.getY());
                recordingCanvas.scale(this.animatingImageView.getScaleX(), this.animatingImageView.getScaleY());
                this.animatingImageView.draw(recordingCanvas);
                recordingCanvas.restore();
            }
            if (BLUR_RENDERNODE()) {
                this.renderNode.endRecording();
            } else {
                canvas3 = recordingCanvas;
            }
            drawFancyShadows(canvas3);
        } else if (i38 == 3 || !(this.isVisible || i38 == 2 || this.pipAnimationInProgress)) {
            if (BLUR_RENDERNODE()) {
                this.renderNode.endRecording();
                canvas3.drawRenderNode(this.renderNode);
            }
        } else {
            if (this.padImageForHorizontalInsets) {
                recordingCanvas.save();
                recordingCanvas.translate((getLeftInset() / 2) - (getRightInset() / 2), 0.0f);
            }
            long currentTimeMillis = System.currentTimeMillis();
            long j3 = currentTimeMillis - this.videoCrossfadeAlphaLastTime;
            if (j3 > 20) {
                j3 = 17;
            }
            long j4 = j3;
            this.videoCrossfadeAlphaLastTime = currentTimeMillis;
            if (this.imageMoveAnimation != null) {
                if (!this.scroller.isFinished()) {
                    this.scroller.abortAnimation();
                }
                float f53 = this.scale;
                float f54 = this.animateToScale;
                float f55 = this.animationValue;
                f = ((f54 - f53) * f55) + f53;
                float f56 = this.rotate;
                f3 = f56 + ((this.animateToRotate - f56) * f55);
                float f57 = this.translationX;
                f5 = ((this.animateToX - f57) * f55) + f57;
                float f58 = this.translationY;
                f4 = f58 + ((this.animateToY - f58) * f55);
                float f59 = this.mirror;
                f2 = f59 + ((this.animateToMirror - f59) * f55);
                f8 = (f54 == 1.0f && f53 == 1.0f && f57 == 0.0f) ? f4 : -1.0f;
                updateMinMax(f);
                this.containerView.invalidate();
            } else {
                if (this.animationStartTime != 0) {
                    this.translationX = this.animateToX;
                    this.translationY = this.animateToY;
                    float f60 = this.animateToScale;
                    this.scale = f60;
                    this.rotate = this.animateToRotate;
                    this.animationStartTime = 0L;
                    updateMinMax(f60);
                    this.zoomAnimation = false;
                }
                if (!this.scroller.isFinished() && this.scroller.computeScrollOffset()) {
                    if (this.scroller.getStartX() < this.maxX && this.scroller.getStartX() > this.minX) {
                        this.translationX = this.scroller.getCurrX();
                    }
                    if (this.scroller.getStartY() < this.maxY && this.scroller.getStartY() > this.minY) {
                        this.translationY = this.scroller.getCurrY();
                    }
                    invalidateBlur();
                    this.containerView.invalidate();
                }
                if (this.switchImageAfterAnimation != 0) {
                    this.openedFullScreenVideo = false;
                    if (!this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                        Object obj = this.imagesArrLocals.get(this.currentIndex);
                        if (obj instanceof MediaController.MediaEditState) {
                            ((MediaController.MediaEditState) obj).editedInfo = getCurrentVideoEditedInfo();
                        }
                    }
                    int i39 = this.switchImageAfterAnimation;
                    if (i39 == 1) {
                        runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda95
                            @Override // java.lang.Runnable
                            public final void run() {
                                PhotoViewer.this.lambda$onDraw$106();
                            }
                        };
                    } else {
                        if (i39 == 2) {
                            runnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda96
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.this.lambda$onDraw$107();
                                }
                            };
                        }
                        this.switchImageAfterAnimation = 0;
                    }
                    AndroidUtilities.runOnUIThread(runnable);
                    this.switchImageAfterAnimation = 0;
                }
                f = this.scale;
                f2 = this.mirror;
                f3 = this.rotate;
                f4 = this.translationY;
                f5 = this.translationX;
                if (this.moving) {
                    f6 = f5;
                    f7 = f3;
                    f8 = -1.0f;
                    float f61 = f2;
                    float f62 = f;
                    float f63 = f4 + this.translateY;
                    if (this.currentEditMode == 3) {
                        f63 += this.photoPaintView.getEmojiPadding(false) / 2.0f;
                    }
                    float f64 = f63;
                    photoViewerWebView = this.photoViewerWebView;
                    if (photoViewerWebView != null) {
                        photoViewerWebView.setTranslationY(f64);
                    }
                    if (this.isActionBarVisible) {
                        if (f62 <= 1.0001f) {
                            if (!this.allowShowFullscreenButton && this.fullscreenButton[0].getTag() == null) {
                                this.fullscreenButton[0].animate().alpha(1.0f).setDuration(120L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.76
                                    {
                                        PhotoViewer.this = this;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        PhotoViewer.this.fullscreenButton[0].setTag(null);
                                    }
                                }).start();
                                this.fullscreenButton[0].setTag(1);
                                this.allowShowFullscreenButton = true;
                            }
                        } else if (this.allowShowFullscreenButton) {
                            this.fullscreenButton[0].animate().alpha(0.0f).setDuration(120L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.77
                                {
                                    PhotoViewer.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    PhotoViewer.this.fullscreenButton[0].setTag(null);
                                }
                            }).start();
                            this.fullscreenButton[0].setTag(1);
                            this.allowShowFullscreenButton = false;
                        }
                    }
                    int containerViewWidth = getContainerViewWidth();
                    int containerViewHeight2 = getContainerViewHeight();
                    i2 = this.animationInProgress;
                    if (i2 != 2 || i2 == 4 || this.pipAnimationInProgress || this.isInline) {
                        if (i2 == 4) {
                            recordingCanvas.drawColor(-16777216);
                        }
                    } else if (this.currentEditMode != 0 || (i36 = this.sendPhotoType) == 1 || i36 == 11 || this.scale != 1.0f || f8 == -1.0f || this.zoomAnimation) {
                        this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
                    } else {
                        float f65 = containerViewWidth / 4.0f;
                        this.backgroundDrawable.setAlpha((int) Math.max(127.0f, (1.0f - (Math.min(Math.abs(f8), f65) / f65)) * 255.0f));
                    }
                    this.sideImage = null;
                    if (this.currentEditMode == 0 && (i35 = this.sendPhotoType) != 1 && i35 != 11) {
                        if (this.scale >= 1.0f && !this.zoomAnimation && !this.zooming) {
                            if (f6 <= this.maxX + AndroidUtilities.dp(5.0f)) {
                                imageReceiver2 = this.leftImage;
                            } else if (f6 < this.minX - AndroidUtilities.dp(5.0f)) {
                                imageReceiver2 = this.rightImage;
                            } else {
                                this.groupedPhotosListView.setMoveProgress(0.0f);
                            }
                            this.sideImage = imageReceiver2;
                        }
                        this.changingPage = this.sideImage == null;
                    }
                    i3 = 0;
                    for (i4 = 3; i3 < i4; i4 = 3) {
                        if (i3 != 1) {
                            if (i3 == 2) {
                                f50 = ((-this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(15.0f)) + (f6 - this.maxX);
                            } else {
                                float f66 = this.minX;
                                if (f6 < f66) {
                                    f50 = f6 - f66;
                                }
                            }
                            this.fullscreenButton[i3].setTranslationX((f50 + this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(48.0f));
                            i3++;
                        }
                        f50 = 0.0f;
                        this.fullscreenButton[i3].setTranslationX((f50 + this.containerView.getMeasuredWidth()) - AndroidUtilities.dp(48.0f));
                        i3++;
                    }
                    if (this.sideImage != this.rightImage) {
                        if (!this.zoomAnimation) {
                            float f67 = this.minX;
                            if (f6 < f67) {
                                float min = Math.min(1.0f, (f67 - f6) / containerViewWidth);
                                f43 = (-containerViewWidth) - (AndroidUtilities.dp(30.0f) / 2);
                                f45 = min;
                                f44 = (1.0f - min) * 0.3f;
                                if (this.sideImage.hasBitmapImage()) {
                                    f46 = f44;
                                    f47 = f45;
                                    f48 = f43;
                                    j = j4;
                                    i5 = containerViewHeight2;
                                    i31 = containerViewWidth;
                                    f49 = f64;
                                    f9 = f7;
                                    f10 = f6;
                                    f11 = f61;
                                } else {
                                    recordingCanvas.save();
                                    float f68 = f45;
                                    recordingCanvas.translate(containerViewWidth / 2, containerViewHeight2 / 2);
                                    recordingCanvas.translate((AndroidUtilities.dp(30.0f) / 2) + containerViewWidth + f43, 0.0f);
                                    float f69 = 1.0f - f44;
                                    recordingCanvas.scale(f69, f69);
                                    int bitmapWidth2 = this.sideImage.getBitmapWidth();
                                    int bitmapHeight2 = this.sideImage.getBitmapHeight();
                                    if (this.rightImageIsVideo || this.rightCropState == null || !this.rightCropTransform.hasViewTransform()) {
                                        f48 = f43;
                                        i32 = bitmapHeight2;
                                        j = j4;
                                        f49 = f64;
                                        f9 = f7;
                                        f10 = f6;
                                        f11 = f61;
                                        f47 = f68;
                                        i33 = containerViewHeight2;
                                        i34 = containerViewWidth;
                                    } else {
                                        f47 = f68;
                                        f11 = f61;
                                        i32 = bitmapHeight2;
                                        f10 = f6;
                                        j = j4;
                                        i33 = containerViewHeight2;
                                        f48 = f43;
                                        i34 = containerViewWidth;
                                        f49 = f64;
                                        f9 = f7;
                                        applyCrop(recordingCanvas, containerViewWidth, containerViewHeight2, bitmapWidth2, i32, 1.0f, this.rightCropTransform, this.rightCropState);
                                    }
                                    float f70 = bitmapWidth2;
                                    int i40 = i32;
                                    float f71 = i40;
                                    float min2 = Math.min(i34 / f70, i33 / f71);
                                    int i41 = (int) (f70 * min2);
                                    int i42 = (int) (f71 * min2);
                                    if (!this.imagesArrLocals.isEmpty()) {
                                        if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                            z10 = this.rightCropTransform.isMirrored();
                                        } else {
                                            MediaController.CropState cropState = this.rightCropState;
                                            if (cropState != null && cropState.mirrored) {
                                                z10 = true;
                                            }
                                        }
                                        if (z10) {
                                            recordingCanvas.scale(-1.0f, 1.0f);
                                        }
                                        this.sideImage.setAlpha(f47);
                                        int i43 = (-i41) / 2;
                                        i5 = i33;
                                        int i44 = (-i42) / 2;
                                        f46 = f44;
                                        i31 = i34;
                                        this.sideImage.setImageCoords(i43, i44, i41, i42);
                                        this.sideImage.draw(recordingCanvas);
                                        paintingOverlay2 = this.rightPaintingOverlay;
                                        if (paintingOverlay2 == null && paintingOverlay2.getVisibility() == 0) {
                                            recordingCanvas.clipRect(i43, i44, i41 / 2, i42 / 2);
                                            if (this.rightPaintingOverlay.getMeasuredWidth() != bitmapWidth2 || this.rightPaintingOverlay.getMeasuredHeight() != i40) {
                                                this.rightPaintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(bitmapWidth2, 1073741824), View.MeasureSpec.makeMeasureSpec(i40, 1073741824));
                                                this.rightPaintingOverlay.layout(0, 0, bitmapWidth2, i40);
                                            }
                                            recordingCanvas.scale(min2, min2);
                                            recordingCanvas.translate((-bitmapWidth2) / 2, (-i40) / 2);
                                            this.rightPaintingOverlay.setAlpha(1.0f);
                                            this.rightPaintingOverlay.draw(recordingCanvas);
                                        }
                                        recordingCanvas.restore();
                                    }
                                    z10 = false;
                                    if (z10) {
                                    }
                                    this.sideImage.setAlpha(f47);
                                    int i432 = (-i41) / 2;
                                    i5 = i33;
                                    int i442 = (-i42) / 2;
                                    f46 = f44;
                                    i31 = i34;
                                    this.sideImage.setImageCoords(i432, i442, i41, i42);
                                    this.sideImage.draw(recordingCanvas);
                                    paintingOverlay2 = this.rightPaintingOverlay;
                                    if (paintingOverlay2 == null) {
                                    }
                                    recordingCanvas.restore();
                                }
                                this.groupedPhotosListView.setMoveProgress(-f47);
                                recordingCanvas.save();
                                f12 = f49;
                                recordingCanvas.translate(f48, f12 / f62);
                                i6 = i31;
                                recordingCanvas.translate(((i6 * (this.scale + 1.0f)) + AndroidUtilities.dp(30.0f)) / 2.0f, (-f12) / f62);
                                this.photoProgressViews[1].setScale(1.0f - f46);
                                this.photoProgressViews[1].setAlpha(f47);
                                this.photoProgressViews[1].onDraw(recordingCanvas);
                                if (this.isActionBarVisible) {
                                    this.fullscreenButton[1].setAlpha(f47);
                                }
                                recordingCanvas.restore();
                            }
                        }
                        f43 = f6;
                        f44 = 0.0f;
                        f45 = 1.0f;
                        if (this.sideImage.hasBitmapImage()) {
                        }
                        this.groupedPhotosListView.setMoveProgress(-f47);
                        recordingCanvas.save();
                        f12 = f49;
                        recordingCanvas.translate(f48, f12 / f62);
                        i6 = i31;
                        recordingCanvas.translate(((i6 * (this.scale + 1.0f)) + AndroidUtilities.dp(30.0f)) / 2.0f, (-f12) / f62);
                        this.photoProgressViews[1].setScale(1.0f - f46);
                        this.photoProgressViews[1].setAlpha(f47);
                        this.photoProgressViews[1].onDraw(recordingCanvas);
                        if (this.isActionBarVisible) {
                        }
                        recordingCanvas.restore();
                    } else {
                        j = j4;
                        i5 = containerViewHeight2;
                        i6 = containerViewWidth;
                        f9 = f7;
                        f10 = f6;
                        f11 = f61;
                        f12 = f64;
                        if (this.isActionBarVisible) {
                            this.fullscreenButton[1].setAlpha(0.0f);
                            if (!this.zoomAnimation) {
                                float f72 = this.maxX;
                                if (f10 > f72 && (((i30 = this.currentEditMode) == 0 || i30 == 4) && this.sendPhotoType != 1)) {
                                    float min3 = Math.min(1.0f, (f10 - f72) / i6);
                                    f15 = 1.0f - min3;
                                    f13 = this.maxX;
                                    f14 = min3 * 0.3f;
                                    if (this.videoSizeSet || (aspectRatioFrameLayout = this.aspectRatioFrameLayout) == null || aspectRatioFrameLayout.getVisibility() != 0) {
                                        z = false;
                                        z2 = false;
                                    } else {
                                        z = false;
                                        z2 = true;
                                    }
                                    this.centerImageTransformLocked = z;
                                    this.centerImageTransform.reset();
                                    MaskPaintView maskPaintView = this.maskPaintView;
                                    f16 = (maskPaintView != null || this.maskPaintViewShuttingDown || maskPaintView.getRenderView() == null) ? f15 : this.maskPaintView.getRenderView().getAlpha() > 0.99f ? 0.0f : 1.0f;
                                    if (!this.centerImage.hasBitmapImage() || (z2 && this.textureUploaded)) {
                                        stickerMakerView = this.stickerMakerView;
                                        if (stickerMakerView != null && stickerMakerView.outlineVisible) {
                                            try {
                                                z8 = ((MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex)).isCropped;
                                            } catch (Exception unused) {
                                                z8 = false;
                                            }
                                            if (z8) {
                                                this.stickerMakerView.outlineMatrix.reset();
                                                this.stickerMakerView.outlineMatrix.postTranslate(-0.5f, -0.5f);
                                                float dp = i6 - AndroidUtilities.dp(20.0f);
                                                this.stickerMakerView.outlineMatrix.postScale(dp, dp);
                                                float f73 = 1.0f / f62;
                                                this.stickerMakerView.outlineMatrix.postScale(f73, f73);
                                                f17 = f10;
                                                this.stickerMakerView.outlineMatrix.postTranslate((-f17) / f62, (-f12) / f62);
                                                f18 = f9;
                                                this.stickerMakerView.outlineMatrix.postRotate(-f18);
                                                this.stickerMakerView.updateOutlineBounds(true);
                                                recordingCanvas.save();
                                                f19 = i6;
                                                float f74 = f19 / 2.0f;
                                                i7 = i5;
                                                float f75 = i7;
                                                float f76 = f75 / 2.0f;
                                                recordingCanvas.translate(f74 + getAdditionX(this.currentEditMode), f76 + getAdditionY(this.currentEditMode));
                                                this.centerImageTransform.preTranslate(f74 + getAdditionX(this.currentEditMode), f76 + getAdditionY(this.currentEditMode));
                                                recordingCanvas.translate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                                                this.centerImageTransform.preTranslate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                                                float f77 = f62 - f14;
                                                recordingCanvas.scale(f77, f77);
                                                this.centerImageTransform.preScale(f77, f77);
                                                recordingCanvas.rotate(f18);
                                                this.centerImageTransform.preRotate(f18);
                                                if (this.currentEditMode == 3 || this.photoPaintView == null) {
                                                    f20 = f19;
                                                } else {
                                                    f20 = f19;
                                                    float emojiPadding = ((containerViewHeight - this.photoPaintView.getEmojiPadding(Math.abs((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) - getContainerViewHeight(true, 0)) < AndroidUtilities.dp(20.0f))) - getContainerViewHeight(false, 0)) / 2.0f;
                                                    recordingCanvas.translate(0.0f, (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()) * emojiPadding);
                                                    this.centerImageTransform.preTranslate(0.0f, emojiPadding * (1.0f - this.photoPaintView.adjustPanLayoutHelperProgress()));
                                                }
                                                if (!this.pipAnimationInProgress || (z2 && ((this.textureUploaded || this.videoSizeSet) && this.videoCrossfadeStarted && this.videoCrossfadeAlpha == 1.0f))) {
                                                    f21 = f18;
                                                    f22 = f17;
                                                    i8 = i7;
                                                    f23 = f13;
                                                    f24 = f16;
                                                } else {
                                                    Bitmap bitmap = this.videoFrameBitmap;
                                                    if (bitmap == null || !this.isCurrentVideo) {
                                                        f21 = f18;
                                                        f22 = f17;
                                                        i8 = i7;
                                                        f23 = f13;
                                                        f24 = f16;
                                                        this.centerImage.setAlpha(f24);
                                                        int bitmapWidth3 = this.centerImage.getBitmapWidth();
                                                        int bitmapHeight3 = this.centerImage.getBitmapHeight();
                                                        float cropFillScale = (this.isCurrentVideo && this.currentEditMode == 0 && this.sendPhotoType == 1) ? getCropFillScale(false) : Math.min(f20 / bitmapWidth3, f75 / bitmapHeight3);
                                                        this.centerImage.setImageCoords((-i21) / 2, (-i22) / 2, (int) (bitmapWidth3 * cropFillScale), (int) (bitmapHeight3 * cropFillScale));
                                                        if (this.isCurrentVideo) {
                                                            this.centerImage.draw(recordingCanvas);
                                                            this.centerImageTransformLocked = true;
                                                        } else {
                                                            z3 = true;
                                                            if (!z2 && this.textureUploaded && this.videoSizeSet) {
                                                                View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
                                                                bitmapWidth = view.getMeasuredWidth();
                                                                bitmapHeight = view.getMeasuredHeight();
                                                            } else {
                                                                bitmapWidth = this.centerImage.getBitmapWidth();
                                                                bitmapHeight = this.centerImage.getBitmapHeight();
                                                            }
                                                            float f78 = bitmapWidth;
                                                            float f79 = f20 / f78;
                                                            float f80 = bitmapHeight;
                                                            float f81 = f75 / f80;
                                                            float min4 = Math.min(f79, f81);
                                                            int i45 = bitmapHeight;
                                                            int i46 = (int) (f78 * min4);
                                                            int i47 = bitmapWidth;
                                                            int i48 = (int) (f80 * min4);
                                                            i9 = i6;
                                                            if (this.imagesArrLocals.isEmpty()) {
                                                                int i49 = this.currentEditMode;
                                                                if (i49 != 3) {
                                                                    z4 = z2;
                                                                    int i50 = this.switchingToMode;
                                                                    if (i50 != 3) {
                                                                        i10 = i48;
                                                                        if (this.sendPhotoType != 1) {
                                                                            int i51 = this.imageMoveAnimation != null ? -1 : -1;
                                                                            if (i49 != 0) {
                                                                                if (i49 != 4) {
                                                                                    if (i49 != 1) {
                                                                                    }
                                                                                }
                                                                            }
                                                                        } else if (i50 != 0) {
                                                                        }
                                                                        if (z5) {
                                                                            i11 = i46;
                                                                            z6 = z3;
                                                                            f25 = f24;
                                                                            f26 = f62;
                                                                            i12 = i45;
                                                                            i13 = i47;
                                                                            f27 = 1.0f;
                                                                        } else {
                                                                            int orientation = this.cropTransform.getOrientation();
                                                                            if (orientation == 90 || orientation == 270) {
                                                                                i17 = i45;
                                                                                i18 = i47;
                                                                            } else {
                                                                                i18 = i45;
                                                                                i17 = i47;
                                                                            }
                                                                            i11 = i46;
                                                                            if (this.sendPhotoType != 1 && (this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                f25 = f24;
                                                                            } else if (this.imageMoveAnimation == null || (i19 = this.switchingToMode) == -1) {
                                                                                f25 = f24;
                                                                                int i52 = this.currentEditMode;
                                                                                if (i52 == 2 || i52 == 3) {
                                                                                    f31 = 0.0f;
                                                                                    float cropPw = this.cropTransform.getCropPw();
                                                                                    float cropPh = this.cropTransform.getCropPh();
                                                                                    f32 = i17;
                                                                                    f33 = 1.0f - f31;
                                                                                    int i53 = (int) ((cropPw + ((1.0f - cropPw) * f33)) * f32);
                                                                                    f34 = i18;
                                                                                    int i54 = (int) ((cropPh + ((1.0f - cropPh) * f33)) * f34);
                                                                                    z6 = z3;
                                                                                    f35 = i53;
                                                                                    f36 = f20 / f35;
                                                                                    f37 = i54;
                                                                                    if (f36 * f37 > f75) {
                                                                                        f36 = f75 / f37;
                                                                                    }
                                                                                    f26 = f62;
                                                                                    if (this.sendPhotoType != 1 && ((this.currentEditMode != 1 || this.switchingToMode == 0) && this.editState.cropState != null)) {
                                                                                        float f82 = f35 * f36;
                                                                                        float f83 = f37 * f36;
                                                                                        if (f79 * f80 > f75) {
                                                                                            f79 = f81;
                                                                                        }
                                                                                        float f84 = f82 + ((((f78 * f79) / f77) - f82) * f33);
                                                                                        float f85 = f83 + ((((f80 * f79) / f77) - f83) * f33);
                                                                                        recordingCanvas.clipRect((-f84) / 2.0f, (-f85) / 2.0f, f84 / 2.0f, f85 / 2.0f);
                                                                                    }
                                                                                    if (this.sendPhotoType != 1 || this.cropTransform.hasViewTransform()) {
                                                                                        if (this.currentEditMode != 1 || this.sendPhotoType == 1) {
                                                                                            textureView = this.videoTextureView;
                                                                                            if (textureView != null) {
                                                                                                textureView.setScaleX(this.cropTransform.isMirrored() ? -1.0f : 1.0f);
                                                                                                FirstFrameView firstFrameView = this.firstFrameView;
                                                                                                if (firstFrameView != null) {
                                                                                                    firstFrameView.setScaleX(this.videoTextureView.getScaleX());
                                                                                                }
                                                                                            }
                                                                                            float scale = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                            f38 = f20 / f32;
                                                                                            if (f38 * f34 > f75) {
                                                                                                f38 = f75 / f34;
                                                                                            }
                                                                                            f39 = scale * (f38 / min4);
                                                                                            if (this.sendPhotoType == 1) {
                                                                                                if (this.currentEditMode == 3 || (i20 = this.switchingToMode) == 3) {
                                                                                                    minScale = ((this.cropTransform.getMinScale() - 1.0f) * f33) + 1.0f;
                                                                                                } else if (i20 == 0) {
                                                                                                    minScale = this.cropTransform.getMinScale();
                                                                                                }
                                                                                                f39 /= minScale;
                                                                                            }
                                                                                        } else {
                                                                                            TextureView textureView2 = this.videoTextureView;
                                                                                            if (textureView2 != null) {
                                                                                                MediaController.CropState cropState2 = this.editState.cropState;
                                                                                                textureView2.setScaleX((cropState2 == null || !cropState2.mirrored) ? 1.0f : -1.0f);
                                                                                                FirstFrameView firstFrameView2 = this.firstFrameView;
                                                                                                if (firstFrameView2 != null) {
                                                                                                    firstFrameView2.setScaleX(this.videoTextureView.getScaleX());
                                                                                                }
                                                                                            }
                                                                                            MediaController.CropState cropState3 = this.editState.cropState;
                                                                                            float f86 = cropState3 != null ? cropState3.cropScale : 1.0f;
                                                                                            f39 = f86 * ((f36 / min4) / (((f86 - 1.0f) * f33) + 1.0f));
                                                                                        }
                                                                                        recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                            this.centerImageTransform.preTranslate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                        }
                                                                                        recordingCanvas.scale(f39, f39);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                            this.centerImageTransform.preScale(f39, f39);
                                                                                        }
                                                                                        recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min4 * f31, this.cropTransform.getCropPy() * f34 * min4 * f31);
                                                                                        if (!this.centerImageTransformLocked) {
                                                                                            this.centerImageTransform.preTranslate(this.cropTransform.getCropPx() * f32 * min4 * f31, this.cropTransform.getCropPy() * f34 * min4 * f31);
                                                                                        }
                                                                                        rotation = this.cropTransform.getRotation() + orientation;
                                                                                        if (rotation > 180.0f) {
                                                                                            rotation -= 360.0f;
                                                                                        }
                                                                                        if (this.sendPhotoType == 1 || !(this.currentEditMode == 3 || this.switchingToMode == 3)) {
                                                                                            rotation *= f31;
                                                                                            recordingCanvas.rotate(rotation);
                                                                                        } else {
                                                                                            recordingCanvas.rotate(rotation);
                                                                                        }
                                                                                    } else {
                                                                                        TextureView textureView3 = this.videoTextureView;
                                                                                        if (textureView3 != null) {
                                                                                            textureView3.setScaleX(1.0f);
                                                                                            this.videoTextureView.setScaleY(1.0f);
                                                                                            FirstFrameView firstFrameView3 = this.firstFrameView;
                                                                                            if (firstFrameView3 != null) {
                                                                                                firstFrameView3.setScaleX(1.0f);
                                                                                                this.firstFrameView.setScaleY(1.0f);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    f27 = f36;
                                                                                    i13 = i53;
                                                                                    i12 = i54;
                                                                                }
                                                                            } else {
                                                                                f25 = f24;
                                                                                if (this.currentEditMode != 1 && i19 != 1) {
                                                                                    f31 = i19 == 0 ? this.animationValue : 1.0f - this.animationValue;
                                                                                    float cropPw2 = this.cropTransform.getCropPw();
                                                                                    float cropPh2 = this.cropTransform.getCropPh();
                                                                                    f32 = i17;
                                                                                    f33 = 1.0f - f31;
                                                                                    int i532 = (int) ((cropPw2 + ((1.0f - cropPw2) * f33)) * f32);
                                                                                    f34 = i18;
                                                                                    int i542 = (int) ((cropPh2 + ((1.0f - cropPh2) * f33)) * f34);
                                                                                    z6 = z3;
                                                                                    f35 = i532;
                                                                                    f36 = f20 / f35;
                                                                                    f37 = i542;
                                                                                    if (f36 * f37 > f75) {
                                                                                    }
                                                                                    f26 = f62;
                                                                                    if (this.sendPhotoType != 1) {
                                                                                        float f822 = f35 * f36;
                                                                                        float f832 = f37 * f36;
                                                                                        if (f79 * f80 > f75) {
                                                                                        }
                                                                                        float f842 = f822 + ((((f78 * f79) / f77) - f822) * f33);
                                                                                        float f852 = f832 + ((((f80 * f79) / f77) - f832) * f33);
                                                                                        recordingCanvas.clipRect((-f842) / 2.0f, (-f852) / 2.0f, f842 / 2.0f, f852 / 2.0f);
                                                                                    }
                                                                                    if (this.sendPhotoType != 1) {
                                                                                    }
                                                                                    if (this.currentEditMode != 1) {
                                                                                    }
                                                                                    textureView = this.videoTextureView;
                                                                                    if (textureView != null) {
                                                                                    }
                                                                                    float scale2 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                                    f38 = f20 / f32;
                                                                                    if (f38 * f34 > f75) {
                                                                                    }
                                                                                    f39 = scale2 * (f38 / min4);
                                                                                    if (this.sendPhotoType == 1) {
                                                                                    }
                                                                                    recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                                    if (!this.centerImageTransformLocked) {
                                                                                    }
                                                                                    recordingCanvas.scale(f39, f39);
                                                                                    if (!this.centerImageTransformLocked) {
                                                                                    }
                                                                                    recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min4 * f31, this.cropTransform.getCropPy() * f34 * min4 * f31);
                                                                                    if (!this.centerImageTransformLocked) {
                                                                                    }
                                                                                    rotation = this.cropTransform.getRotation() + orientation;
                                                                                    if (rotation > 180.0f) {
                                                                                    }
                                                                                    if (this.sendPhotoType == 1) {
                                                                                    }
                                                                                    rotation *= f31;
                                                                                    recordingCanvas.rotate(rotation);
                                                                                }
                                                                            }
                                                                            f31 = 1.0f;
                                                                            float cropPw22 = this.cropTransform.getCropPw();
                                                                            float cropPh22 = this.cropTransform.getCropPh();
                                                                            f32 = i17;
                                                                            f33 = 1.0f - f31;
                                                                            int i5322 = (int) ((cropPw22 + ((1.0f - cropPw22) * f33)) * f32);
                                                                            f34 = i18;
                                                                            int i5422 = (int) ((cropPh22 + ((1.0f - cropPh22) * f33)) * f34);
                                                                            z6 = z3;
                                                                            f35 = i5322;
                                                                            f36 = f20 / f35;
                                                                            f37 = i5422;
                                                                            if (f36 * f37 > f75) {
                                                                            }
                                                                            f26 = f62;
                                                                            if (this.sendPhotoType != 1) {
                                                                            }
                                                                            if (this.sendPhotoType != 1) {
                                                                            }
                                                                            if (this.currentEditMode != 1) {
                                                                            }
                                                                            textureView = this.videoTextureView;
                                                                            if (textureView != null) {
                                                                            }
                                                                            float scale22 = this.cropTransform.getScale() / (((this.cropTransform.getTrueCropScale() - 1.0f) * f33) + 1.0f);
                                                                            f38 = f20 / f32;
                                                                            if (f38 * f34 > f75) {
                                                                            }
                                                                            f39 = scale22 * (f38 / min4);
                                                                            if (this.sendPhotoType == 1) {
                                                                            }
                                                                            recordingCanvas.translate(this.cropTransform.getCropAreaX() * f31, this.cropTransform.getCropAreaY() * f31);
                                                                            if (!this.centerImageTransformLocked) {
                                                                            }
                                                                            recordingCanvas.scale(f39, f39);
                                                                            if (!this.centerImageTransformLocked) {
                                                                            }
                                                                            recordingCanvas.translate(this.cropTransform.getCropPx() * f32 * min4 * f31, this.cropTransform.getCropPy() * f34 * min4 * f31);
                                                                            if (!this.centerImageTransformLocked) {
                                                                            }
                                                                            rotation = this.cropTransform.getRotation() + orientation;
                                                                            if (rotation > 180.0f) {
                                                                            }
                                                                            if (this.sendPhotoType == 1) {
                                                                            }
                                                                            rotation *= f31;
                                                                            recordingCanvas.rotate(rotation);
                                                                        }
                                                                        i14 = this.currentEditMode;
                                                                        if (i14 != 3) {
                                                                            LPhotoPaintView lPhotoPaintView = this.photoPaintView;
                                                                            lPhotoPaintView.setTransform(f26, f22, f12 + ((this.sendPhotoType == 1 ? AndroidUtilities.statusBarHeight / 2.0f : 0.0f) * lPhotoPaintView.getRenderView().getScaleX()), i13 * f27, i12 * f27);
                                                                        } else if (i14 == 4) {
                                                                            this.maskPaintView.setTransform(f26, f22, f12, f21, i13 * f27, i12 * f27);
                                                                        }
                                                                        if (z6 || this.usedSurfaceView) {
                                                                            f28 = f11;
                                                                            f29 = f25;
                                                                        } else {
                                                                            f28 = f11;
                                                                            f29 = f25;
                                                                            drawCenterImageInternal(recordingCanvas, f28, f29);
                                                                        }
                                                                        recordingCanvas.save();
                                                                        if (f28 <= 0.0f) {
                                                                            recordingCanvas.save();
                                                                            recordingCanvas.scale(1.0f - (f28 * 2.0f), 1.0f);
                                                                            recordingCanvas.skew(0.0f, f28 * 4.0f * (1.0f - f28) * 0.25f);
                                                                            i15 = i11;
                                                                            z7 = true;
                                                                        } else {
                                                                            i15 = i11;
                                                                            z7 = false;
                                                                        }
                                                                        float f87 = (-i15) / 2;
                                                                        int i55 = i10;
                                                                        float f88 = (-i55) / 2;
                                                                        recordingCanvas.translate(f87, f88);
                                                                        if (!z4 || this.paintingOverlay.getVisibility() == 0) {
                                                                            recordingCanvas.scale(min4, min4);
                                                                        }
                                                                        if (z4) {
                                                                            j2 = j;
                                                                        } else {
                                                                            if (!this.videoCrossfadeStarted && ((this.usedSurfaceView && this.firstFrameRendered) || (this.textureUploaded && this.videoSizeSet))) {
                                                                                this.videoCrossfadeStarted = true;
                                                                                this.videoCrossfadeAlpha = 0.0f;
                                                                                this.videoCrossfadeAlphaLastTime = System.currentTimeMillis();
                                                                                this.containerView.getMeasuredHeight();
                                                                            }
                                                                            TextureView textureView4 = this.videoTextureView;
                                                                            if (textureView4 != null) {
                                                                                textureView4.setAlpha(this.videoCrossfadeAlpha * f29);
                                                                            }
                                                                            TextureView textureView5 = this.videoTextureView;
                                                                            if (textureView5 instanceof VideoEditTextureView) {
                                                                                ((VideoEditTextureView) textureView5).setViewRect(((i9 - i15) / 2.0f) + getAdditionX(this.currentEditMode) + f23, ((i8 - i55) / 2.0f) + getAdditionY(this.currentEditMode) + f12 + this.currentPanTranslationY, i15, i55);
                                                                            }
                                                                            SurfaceView surfaceView = this.videoSurfaceView;
                                                                            if (surfaceView != null && this.waitingForDraw == 0 && !this.changingTextureView && !this.switchingInlineMode && !this.pipAnimationInProgress && surfaceView.getVisibility() != 0) {
                                                                                this.videoSurfaceView.setVisibility(0);
                                                                            }
                                                                            if (!this.usedSurfaceView || this.firstFrameRendered) {
                                                                                this.aspectRatioFrameLayout.draw(recordingCanvas);
                                                                            }
                                                                            if (this.usedSurfaceView && f29 != 1.0f) {
                                                                                if (this.surfaceBlackoutPaint == null) {
                                                                                    this.surfaceBlackoutPaint = new Paint();
                                                                                }
                                                                                this.surfaceBlackoutPaint.setAlpha((int) ((1.0f - f29) * 255.0f));
                                                                                recordingCanvas.drawRect(-1.0f, -1.0f, this.aspectRatioFrameLayout.getWidth() + 1.0f, this.aspectRatioFrameLayout.getHeight() + 1.0f, this.surfaceBlackoutPaint);
                                                                            }
                                                                            if (this.videoCrossfadeStarted) {
                                                                                float f89 = this.videoCrossfadeAlpha;
                                                                                if (f89 < 1.0f) {
                                                                                    j2 = j;
                                                                                    this.videoCrossfadeAlpha = f89 + (((float) j2) / (this.playerInjected ? 100.0f : 200.0f));
                                                                                    this.containerView.invalidate();
                                                                                    invalidateBlur();
                                                                                    if (this.videoCrossfadeAlpha > 1.0f) {
                                                                                        this.videoCrossfadeAlpha = 1.0f;
                                                                                    }
                                                                                    this.paintingOverlay.setAlpha(f29);
                                                                                }
                                                                            }
                                                                            j2 = j;
                                                                            this.paintingOverlay.setAlpha(f29);
                                                                        }
                                                                        if (z7) {
                                                                            recordingCanvas.restore();
                                                                            recordingCanvas.translate(f87, f88);
                                                                            if (z4 || this.paintingOverlay.getVisibility() == 0) {
                                                                                recordingCanvas.scale(min4, min4);
                                                                            }
                                                                        }
                                                                        if (this.paintingOverlay.getVisibility() == 0) {
                                                                            if (!this.isCurrentVideo) {
                                                                                if (this.currentEditMode == 2) {
                                                                                }
                                                                            }
                                                                            if (this.sendPhotoType != 11) {
                                                                                recordingCanvas.clipRect(0, 0, this.paintingOverlay.getMeasuredWidth(), this.paintingOverlay.getMeasuredHeight());
                                                                            }
                                                                            this.paintingOverlay.draw(recordingCanvas);
                                                                        }
                                                                        recordingCanvas.restore();
                                                                        if (z6 && this.usedSurfaceView) {
                                                                            f30 = this.videoCrossfadeAlpha;
                                                                            if (f30 != 1.0f) {
                                                                                drawCenterImageInternal(recordingCanvas, f28, (1.0f - f30) * f29);
                                                                            }
                                                                        }
                                                                        recordingCanvas.restore();
                                                                        i16 = 0;
                                                                        while (true) {
                                                                            gradientDrawableArr = this.pressedDrawable;
                                                                            if (i16 < gradientDrawableArr.length) {
                                                                                break;
                                                                            }
                                                                            if (this.drawPressedDrawable[i16] || this.pressedDrawableAlpha[i16] != 0.0f) {
                                                                                gradientDrawableArr[i16].setAlpha((int) (this.pressedDrawableAlpha[i16] * 255.0f));
                                                                                GradientDrawable[] gradientDrawableArr2 = this.pressedDrawable;
                                                                                if (i16 == 0) {
                                                                                    gradientDrawableArr2[i16].setBounds(0, 0, this.containerView.getMeasuredWidth() / 5, this.containerView.getMeasuredHeight());
                                                                                } else {
                                                                                    gradientDrawableArr2[i16].setBounds(this.containerView.getMeasuredWidth() - (this.containerView.getMeasuredWidth() / 5), 0, this.containerView.getMeasuredWidth(), this.containerView.getMeasuredHeight());
                                                                                }
                                                                                this.pressedDrawable[i16].draw(recordingCanvas);
                                                                            }
                                                                            if (this.drawPressedDrawable[i16]) {
                                                                                float[] fArr = this.pressedDrawableAlpha;
                                                                                float f90 = fArr[i16];
                                                                                if (f90 < 1.0f) {
                                                                                    float f91 = f90 + (((float) j2) / 180.0f);
                                                                                    fArr[i16] = f91;
                                                                                    if (f91 > 1.0f) {
                                                                                        fArr[i16] = 1.0f;
                                                                                    }
                                                                                    this.containerView.invalidate();
                                                                                }
                                                                            } else {
                                                                                float[] fArr2 = this.pressedDrawableAlpha;
                                                                                float f92 = fArr2[i16];
                                                                                if (f92 > 0.0f) {
                                                                                    float f93 = f92 - (((float) j2) / 180.0f);
                                                                                    fArr2[i16] = f93;
                                                                                    if (f93 < 0.0f) {
                                                                                        fArr2[i16] = 0.0f;
                                                                                    }
                                                                                    this.containerView.invalidate();
                                                                                }
                                                                            }
                                                                            i16++;
                                                                        }
                                                                    } else {
                                                                        i10 = i48;
                                                                    }
                                                                } else {
                                                                    i10 = i48;
                                                                    z4 = z2;
                                                                }
                                                                z5 = true;
                                                                if (z5) {
                                                                }
                                                                i14 = this.currentEditMode;
                                                                if (i14 != 3) {
                                                                }
                                                                if (z6) {
                                                                }
                                                                f28 = f11;
                                                                f29 = f25;
                                                                recordingCanvas.save();
                                                                if (f28 <= 0.0f) {
                                                                }
                                                                float f872 = (-i15) / 2;
                                                                int i552 = i10;
                                                                float f882 = (-i552) / 2;
                                                                recordingCanvas.translate(f872, f882);
                                                                if (!z4) {
                                                                }
                                                                recordingCanvas.scale(min4, min4);
                                                                if (z4) {
                                                                }
                                                                if (z7) {
                                                                }
                                                                if (this.paintingOverlay.getVisibility() == 0) {
                                                                }
                                                                recordingCanvas.restore();
                                                                if (z6) {
                                                                    f30 = this.videoCrossfadeAlpha;
                                                                    if (f30 != 1.0f) {
                                                                    }
                                                                }
                                                                recordingCanvas.restore();
                                                                i16 = 0;
                                                                while (true) {
                                                                    gradientDrawableArr = this.pressedDrawable;
                                                                    if (i16 < gradientDrawableArr.length) {
                                                                    }
                                                                    i16++;
                                                                }
                                                            } else {
                                                                i10 = i48;
                                                                z4 = z2;
                                                            }
                                                            z5 = false;
                                                            if (z5) {
                                                            }
                                                            i14 = this.currentEditMode;
                                                            if (i14 != 3) {
                                                            }
                                                            if (z6) {
                                                            }
                                                            f28 = f11;
                                                            f29 = f25;
                                                            recordingCanvas.save();
                                                            if (f28 <= 0.0f) {
                                                            }
                                                            float f8722 = (-i15) / 2;
                                                            int i5522 = i10;
                                                            float f8822 = (-i5522) / 2;
                                                            recordingCanvas.translate(f8722, f8822);
                                                            if (!z4) {
                                                            }
                                                            recordingCanvas.scale(min4, min4);
                                                            if (z4) {
                                                            }
                                                            if (z7) {
                                                            }
                                                            if (this.paintingOverlay.getVisibility() == 0) {
                                                            }
                                                            recordingCanvas.restore();
                                                            if (z6) {
                                                            }
                                                            recordingCanvas.restore();
                                                            i16 = 0;
                                                            while (true) {
                                                                gradientDrawableArr = this.pressedDrawable;
                                                                if (i16 < gradientDrawableArr.length) {
                                                                }
                                                                i16++;
                                                            }
                                                        }
                                                    } else {
                                                        int width = bitmap.getWidth();
                                                        int i56 = (-width) / 2;
                                                        float f94 = f18;
                                                        int i57 = (-this.videoFrameBitmap.getHeight()) / 2;
                                                        if (f16 < 1.0f) {
                                                            i23 = i57;
                                                            f21 = f94;
                                                            i8 = i7;
                                                            f22 = f17;
                                                            i24 = i56;
                                                            f23 = f13;
                                                            f24 = f16;
                                                            recordingCanvas.saveLayerAlpha(i56, i57, width + i56, height + i57, (int) (f16 * 255.0f), 31);
                                                        } else {
                                                            i23 = i57;
                                                            f22 = f17;
                                                            i8 = i7;
                                                            f23 = f13;
                                                            f21 = f94;
                                                            i24 = i56;
                                                            f24 = f16;
                                                        }
                                                        recordingCanvas.drawBitmap(this.videoFrameBitmap, i24, i23, this.videoFrameBitmapPaint);
                                                        if (f24 < 1.0f) {
                                                            recordingCanvas.restore();
                                                        }
                                                    }
                                                }
                                                z3 = false;
                                                if (!z2) {
                                                }
                                                bitmapWidth = this.centerImage.getBitmapWidth();
                                                bitmapHeight = this.centerImage.getBitmapHeight();
                                                float f782 = bitmapWidth;
                                                float f792 = f20 / f782;
                                                float f802 = bitmapHeight;
                                                float f812 = f75 / f802;
                                                float min42 = Math.min(f792, f812);
                                                int i452 = bitmapHeight;
                                                int i462 = (int) (f782 * min42);
                                                int i472 = bitmapWidth;
                                                int i482 = (int) (f802 * min42);
                                                i9 = i6;
                                                if (this.imagesArrLocals.isEmpty()) {
                                                }
                                                z5 = false;
                                                if (z5) {
                                                }
                                                i14 = this.currentEditMode;
                                                if (i14 != 3) {
                                                }
                                                if (z6) {
                                                }
                                                f28 = f11;
                                                f29 = f25;
                                                recordingCanvas.save();
                                                if (f28 <= 0.0f) {
                                                }
                                                float f87222 = (-i15) / 2;
                                                int i55222 = i10;
                                                float f88222 = (-i55222) / 2;
                                                recordingCanvas.translate(f87222, f88222);
                                                if (!z4) {
                                                }
                                                recordingCanvas.scale(min42, min42);
                                                if (z4) {
                                                }
                                                if (z7) {
                                                }
                                                if (this.paintingOverlay.getVisibility() == 0) {
                                                }
                                                recordingCanvas.restore();
                                                if (z6) {
                                                }
                                                recordingCanvas.restore();
                                                i16 = 0;
                                                while (true) {
                                                    gradientDrawableArr = this.pressedDrawable;
                                                    if (i16 < gradientDrawableArr.length) {
                                                    }
                                                    i16++;
                                                }
                                            } else {
                                                this.stickerMakerView.updateOutlineBounds(false);
                                            }
                                        }
                                        f17 = f10;
                                        f18 = f9;
                                        recordingCanvas.save();
                                        f19 = i6;
                                        float f742 = f19 / 2.0f;
                                        i7 = i5;
                                        float f752 = i7;
                                        float f762 = f752 / 2.0f;
                                        recordingCanvas.translate(f742 + getAdditionX(this.currentEditMode), f762 + getAdditionY(this.currentEditMode));
                                        this.centerImageTransform.preTranslate(f742 + getAdditionX(this.currentEditMode), f762 + getAdditionY(this.currentEditMode));
                                        recordingCanvas.translate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                                        this.centerImageTransform.preTranslate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                                        float f772 = f62 - f14;
                                        recordingCanvas.scale(f772, f772);
                                        this.centerImageTransform.preScale(f772, f772);
                                        recordingCanvas.rotate(f18);
                                        this.centerImageTransform.preRotate(f18);
                                        if (this.currentEditMode == 3) {
                                        }
                                        f20 = f19;
                                        if (this.pipAnimationInProgress) {
                                        }
                                        f21 = f18;
                                        f22 = f17;
                                        i8 = i7;
                                        f23 = f13;
                                        f24 = f16;
                                        z3 = false;
                                        if (!z2) {
                                        }
                                        bitmapWidth = this.centerImage.getBitmapWidth();
                                        bitmapHeight = this.centerImage.getBitmapHeight();
                                        float f7822 = bitmapWidth;
                                        float f7922 = f20 / f7822;
                                        float f8022 = bitmapHeight;
                                        float f8122 = f752 / f8022;
                                        float min422 = Math.min(f7922, f8122);
                                        int i4522 = bitmapHeight;
                                        int i4622 = (int) (f7822 * min422);
                                        int i4722 = bitmapWidth;
                                        int i4822 = (int) (f8022 * min422);
                                        i9 = i6;
                                        if (this.imagesArrLocals.isEmpty()) {
                                        }
                                        z5 = false;
                                        if (z5) {
                                        }
                                        i14 = this.currentEditMode;
                                        if (i14 != 3) {
                                        }
                                        if (z6) {
                                        }
                                        f28 = f11;
                                        f29 = f25;
                                        recordingCanvas.save();
                                        if (f28 <= 0.0f) {
                                        }
                                        float f872222 = (-i15) / 2;
                                        int i552222 = i10;
                                        float f882222 = (-i552222) / 2;
                                        recordingCanvas.translate(f872222, f882222);
                                        if (!z4) {
                                        }
                                        recordingCanvas.scale(min422, min422);
                                        if (z4) {
                                        }
                                        if (z7) {
                                        }
                                        if (this.paintingOverlay.getVisibility() == 0) {
                                        }
                                        recordingCanvas.restore();
                                        if (z6) {
                                        }
                                        recordingCanvas.restore();
                                        i16 = 0;
                                        while (true) {
                                            gradientDrawableArr = this.pressedDrawable;
                                            if (i16 < gradientDrawableArr.length) {
                                            }
                                            i16++;
                                        }
                                    } else {
                                        f23 = f13;
                                        f26 = f62;
                                        i8 = i5;
                                        f22 = f10;
                                        i9 = i6;
                                        f29 = f16;
                                    }
                                    drawProgress(recordingCanvas, f23, f26, f12, f29);
                                    imageReceiver = this.sideImage;
                                    if (imageReceiver != this.leftImage) {
                                        if (imageReceiver.hasBitmapImage()) {
                                            recordingCanvas.save();
                                            recordingCanvas.translate(i9 / 2, i8 / 2);
                                            int i58 = i9;
                                            float f95 = i58;
                                            float f96 = f22;
                                            recordingCanvas.translate(((-(((this.scale + 1.0f) * f95) + AndroidUtilities.dp(30.0f))) / 2.0f) + f96, 0.0f);
                                            int bitmapWidth4 = this.sideImage.getBitmapWidth();
                                            int bitmapHeight4 = this.sideImage.getBitmapHeight();
                                            if (this.leftImageIsVideo || this.leftCropState == null || !this.leftCropTransform.hasViewTransform()) {
                                                f40 = f29;
                                                i27 = bitmapHeight4;
                                                i26 = i58;
                                                f42 = f96;
                                                i28 = i8;
                                                c = 2;
                                                i29 = bitmapWidth4;
                                            } else {
                                                float f97 = f29;
                                                i27 = bitmapHeight4;
                                                i26 = i58;
                                                f42 = f96;
                                                i28 = i8;
                                                i29 = bitmapWidth4;
                                                f40 = f97;
                                                c = 2;
                                                applyCrop(recordingCanvas, i58, i8, bitmapWidth4, bitmapHeight4, f26, this.leftCropTransform, this.leftCropState);
                                            }
                                            float f98 = i29;
                                            float f99 = i27;
                                            float min5 = Math.min(f95 / f98, i28 / f99);
                                            int i59 = (int) (f98 * min5);
                                            int i60 = (int) (f99 * min5);
                                            if (!this.imagesArrLocals.isEmpty()) {
                                                if (this.currentEditMode == 1 || this.sendPhotoType == 1) {
                                                    z9 = this.leftCropTransform.isMirrored();
                                                } else {
                                                    MediaController.CropState cropState4 = this.leftCropState;
                                                    if (cropState4 != null && cropState4.mirrored) {
                                                        z9 = true;
                                                    }
                                                }
                                                if (z9) {
                                                    recordingCanvas.scale(-1.0f, 1.0f);
                                                }
                                                this.sideImage.setAlpha(1.0f);
                                                int i61 = (-i59) / 2;
                                                int i62 = (-i60) / 2;
                                                this.sideImage.setImageCoords(i61, i62, i59, i60);
                                                this.sideImage.draw(recordingCanvas);
                                                paintingOverlay = this.leftPaintingOverlay;
                                                if (paintingOverlay == null && paintingOverlay.getVisibility() == 0) {
                                                    recordingCanvas.clipRect(i61, i62, i59 / 2, i60 / 2);
                                                    if (this.leftPaintingOverlay.getMeasuredWidth() != i29 || this.leftPaintingOverlay.getMeasuredHeight() != i27) {
                                                        this.leftPaintingOverlay.measure(View.MeasureSpec.makeMeasureSpec(i29, 1073741824), View.MeasureSpec.makeMeasureSpec(i27, 1073741824));
                                                        this.leftPaintingOverlay.layout(0, 0, i29, i27);
                                                    }
                                                    recordingCanvas.scale(min5, min5);
                                                    recordingCanvas.translate((-i29) / 2, (-i27) / 2);
                                                    f41 = 1.0f;
                                                    this.leftPaintingOverlay.setAlpha(1.0f);
                                                    this.leftPaintingOverlay.draw(recordingCanvas);
                                                } else {
                                                    f41 = 1.0f;
                                                }
                                                recordingCanvas.restore();
                                            }
                                            z9 = false;
                                            if (z9) {
                                            }
                                            this.sideImage.setAlpha(1.0f);
                                            int i612 = (-i59) / 2;
                                            int i622 = (-i60) / 2;
                                            this.sideImage.setImageCoords(i612, i622, i59, i60);
                                            this.sideImage.draw(recordingCanvas);
                                            paintingOverlay = this.leftPaintingOverlay;
                                            if (paintingOverlay == null) {
                                            }
                                            f41 = 1.0f;
                                            recordingCanvas.restore();
                                        } else {
                                            f40 = f29;
                                            f41 = 1.0f;
                                            c = 2;
                                            int i63 = i9;
                                            f42 = f22;
                                            i26 = i63;
                                        }
                                        this.groupedPhotosListView.setMoveProgress(f41 - f40);
                                        recordingCanvas.save();
                                        recordingCanvas.translate(f42, f12 / f26);
                                        recordingCanvas.translate((-((i26 * (this.scale + f41)) + AndroidUtilities.dp(30.0f))) / 2.0f, (-f12) / f26);
                                        this.photoProgressViews[c].setScale(1.0f);
                                        this.photoProgressViews[c].setAlpha(1.0f);
                                        this.photoProgressViews[c].onDraw(recordingCanvas);
                                        if (this.isActionBarVisible) {
                                            this.fullscreenButton[c].setAlpha(1.0f);
                                        }
                                        recordingCanvas.restore();
                                    } else if (this.isActionBarVisible) {
                                        this.fullscreenButton[2].setAlpha(0.0f);
                                    }
                                    i25 = this.waitingForDraw;
                                    if (i25 != 0) {
                                        int i64 = i25 - 1;
                                        this.waitingForDraw = i64;
                                        if (i64 == 0) {
                                            TextureView textureView6 = this.changedTextureView;
                                            if (textureView6 != null && !this.usedSurfaceView) {
                                                try {
                                                    this.currentBitmap = textureView6.getBitmap();
                                                    drawable = null;
                                                } catch (Throwable th) {
                                                    Bitmap bitmap2 = this.currentBitmap;
                                                    if (bitmap2 != null) {
                                                        bitmap2.recycle();
                                                        drawable = null;
                                                        this.currentBitmap = null;
                                                    } else {
                                                        drawable = null;
                                                    }
                                                    FileLog.e(th);
                                                }
                                                if (this.currentBitmap != null) {
                                                    this.textureImageView.setVisibility(0);
                                                    this.textureImageView.setImageBitmap(this.currentBitmap);
                                                } else {
                                                    this.textureImageView.setImageDrawable(drawable);
                                                }
                                            }
                                            if (this.usedSurfaceView) {
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda97
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        PhotoViewer.this.lambda$onDraw$108();
                                                    }
                                                });
                                            } else {
                                                PipVideoOverlay.dismiss(true);
                                            }
                                        } else {
                                            this.containerView.invalidate();
                                        }
                                    }
                                    if (this.padImageForHorizontalInsets) {
                                        recordingCanvas.restore();
                                    }
                                    if (this.aspectRatioFrameLayout != null && this.videoForwardDrawable.isAnimating()) {
                                        int measuredHeight = ((int) (this.aspectRatioFrameLayout.getMeasuredHeight() * (this.scale - 1.0f))) / 2;
                                        int i65 = (int) (f12 / f26);
                                        this.videoForwardDrawable.setBounds(this.aspectRatioFrameLayout.getLeft(), (this.aspectRatioFrameLayout.getTop() - measuredHeight) + i65, this.aspectRatioFrameLayout.getRight(), this.aspectRatioFrameLayout.getBottom() + measuredHeight + i65);
                                        this.videoForwardDrawable.draw(recordingCanvas);
                                    }
                                    if (BLUR_RENDERNODE()) {
                                        canvas2 = recordingCanvas;
                                    } else {
                                        this.renderNode.endRecording();
                                        canvas2 = canvas;
                                        canvas2.drawRenderNode(this.renderNode);
                                    }
                                    drawFancyShadows(canvas2);
                                }
                            }
                            f13 = f10;
                            f14 = 0.0f;
                            f15 = 1.0f;
                            if (this.videoSizeSet) {
                            }
                            z = false;
                            z2 = false;
                            this.centerImageTransformLocked = z;
                            this.centerImageTransform.reset();
                            MaskPaintView maskPaintView2 = this.maskPaintView;
                            if (maskPaintView2 != null) {
                            }
                            if (this.centerImage.hasBitmapImage()) {
                            }
                            stickerMakerView = this.stickerMakerView;
                            if (stickerMakerView != null) {
                                z8 = ((MediaController.PhotoEntry) this.imagesArrLocals.get(this.currentIndex)).isCropped;
                                if (z8) {
                                }
                            }
                            f17 = f10;
                            f18 = f9;
                            recordingCanvas.save();
                            f19 = i6;
                            float f7422 = f19 / 2.0f;
                            i7 = i5;
                            float f7522 = i7;
                            float f7622 = f7522 / 2.0f;
                            recordingCanvas.translate(f7422 + getAdditionX(this.currentEditMode), f7622 + getAdditionY(this.currentEditMode));
                            this.centerImageTransform.preTranslate(f7422 + getAdditionX(this.currentEditMode), f7622 + getAdditionY(this.currentEditMode));
                            recordingCanvas.translate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                            this.centerImageTransform.preTranslate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                            float f7722 = f62 - f14;
                            recordingCanvas.scale(f7722, f7722);
                            this.centerImageTransform.preScale(f7722, f7722);
                            recordingCanvas.rotate(f18);
                            this.centerImageTransform.preRotate(f18);
                            if (this.currentEditMode == 3) {
                            }
                            f20 = f19;
                            if (this.pipAnimationInProgress) {
                            }
                            f21 = f18;
                            f22 = f17;
                            i8 = i7;
                            f23 = f13;
                            f24 = f16;
                            z3 = false;
                            if (!z2) {
                            }
                            bitmapWidth = this.centerImage.getBitmapWidth();
                            bitmapHeight = this.centerImage.getBitmapHeight();
                            float f78222 = bitmapWidth;
                            float f79222 = f20 / f78222;
                            float f80222 = bitmapHeight;
                            float f81222 = f7522 / f80222;
                            float min4222 = Math.min(f79222, f81222);
                            int i45222 = bitmapHeight;
                            int i46222 = (int) (f78222 * min4222);
                            int i47222 = bitmapWidth;
                            int i48222 = (int) (f80222 * min4222);
                            i9 = i6;
                            if (this.imagesArrLocals.isEmpty()) {
                            }
                            z5 = false;
                            if (z5) {
                            }
                            i14 = this.currentEditMode;
                            if (i14 != 3) {
                            }
                            if (z6) {
                            }
                            f28 = f11;
                            f29 = f25;
                            recordingCanvas.save();
                            if (f28 <= 0.0f) {
                            }
                            float f8722222 = (-i15) / 2;
                            int i5522222 = i10;
                            float f8822222 = (-i5522222) / 2;
                            recordingCanvas.translate(f8722222, f8822222);
                            if (!z4) {
                            }
                            recordingCanvas.scale(min4222, min4222);
                            if (z4) {
                            }
                            if (z7) {
                            }
                            if (this.paintingOverlay.getVisibility() == 0) {
                            }
                            recordingCanvas.restore();
                            if (z6) {
                            }
                            recordingCanvas.restore();
                            i16 = 0;
                            while (true) {
                                gradientDrawableArr = this.pressedDrawable;
                                if (i16 < gradientDrawableArr.length) {
                                }
                                i16++;
                            }
                            drawProgress(recordingCanvas, f23, f26, f12, f29);
                            imageReceiver = this.sideImage;
                            if (imageReceiver != this.leftImage) {
                            }
                            i25 = this.waitingForDraw;
                            if (i25 != 0) {
                            }
                            if (this.padImageForHorizontalInsets) {
                            }
                            if (this.aspectRatioFrameLayout != null) {
                                int measuredHeight2 = ((int) (this.aspectRatioFrameLayout.getMeasuredHeight() * (this.scale - 1.0f))) / 2;
                                int i652 = (int) (f12 / f26);
                                this.videoForwardDrawable.setBounds(this.aspectRatioFrameLayout.getLeft(), (this.aspectRatioFrameLayout.getTop() - measuredHeight2) + i652, this.aspectRatioFrameLayout.getRight(), this.aspectRatioFrameLayout.getBottom() + measuredHeight2 + i652);
                                this.videoForwardDrawable.draw(recordingCanvas);
                            }
                            if (BLUR_RENDERNODE()) {
                            }
                            drawFancyShadows(canvas2);
                        }
                    }
                    if (!this.zoomAnimation) {
                    }
                    f13 = f10;
                    f14 = 0.0f;
                    f15 = 1.0f;
                    if (this.videoSizeSet) {
                    }
                    z = false;
                    z2 = false;
                    this.centerImageTransformLocked = z;
                    this.centerImageTransform.reset();
                    MaskPaintView maskPaintView22 = this.maskPaintView;
                    if (maskPaintView22 != null) {
                    }
                    if (this.centerImage.hasBitmapImage()) {
                    }
                    stickerMakerView = this.stickerMakerView;
                    if (stickerMakerView != null) {
                    }
                    f17 = f10;
                    f18 = f9;
                    recordingCanvas.save();
                    f19 = i6;
                    float f74222 = f19 / 2.0f;
                    i7 = i5;
                    float f75222 = i7;
                    float f76222 = f75222 / 2.0f;
                    recordingCanvas.translate(f74222 + getAdditionX(this.currentEditMode), f76222 + getAdditionY(this.currentEditMode));
                    this.centerImageTransform.preTranslate(f74222 + getAdditionX(this.currentEditMode), f76222 + getAdditionY(this.currentEditMode));
                    recordingCanvas.translate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                    this.centerImageTransform.preTranslate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
                    float f77222 = f62 - f14;
                    recordingCanvas.scale(f77222, f77222);
                    this.centerImageTransform.preScale(f77222, f77222);
                    recordingCanvas.rotate(f18);
                    this.centerImageTransform.preRotate(f18);
                    if (this.currentEditMode == 3) {
                    }
                    f20 = f19;
                    if (this.pipAnimationInProgress) {
                    }
                    f21 = f18;
                    f22 = f17;
                    i8 = i7;
                    f23 = f13;
                    f24 = f16;
                    z3 = false;
                    if (!z2) {
                    }
                    bitmapWidth = this.centerImage.getBitmapWidth();
                    bitmapHeight = this.centerImage.getBitmapHeight();
                    float f782222 = bitmapWidth;
                    float f792222 = f20 / f782222;
                    float f802222 = bitmapHeight;
                    float f812222 = f75222 / f802222;
                    float min42222 = Math.min(f792222, f812222);
                    int i452222 = bitmapHeight;
                    int i462222 = (int) (f782222 * min42222);
                    int i472222 = bitmapWidth;
                    int i482222 = (int) (f802222 * min42222);
                    i9 = i6;
                    if (this.imagesArrLocals.isEmpty()) {
                    }
                    z5 = false;
                    if (z5) {
                    }
                    i14 = this.currentEditMode;
                    if (i14 != 3) {
                    }
                    if (z6) {
                    }
                    f28 = f11;
                    f29 = f25;
                    recordingCanvas.save();
                    if (f28 <= 0.0f) {
                    }
                    float f87222222 = (-i15) / 2;
                    int i55222222 = i10;
                    float f88222222 = (-i55222222) / 2;
                    recordingCanvas.translate(f87222222, f88222222);
                    if (!z4) {
                    }
                    recordingCanvas.scale(min42222, min42222);
                    if (z4) {
                    }
                    if (z7) {
                    }
                    if (this.paintingOverlay.getVisibility() == 0) {
                    }
                    recordingCanvas.restore();
                    if (z6) {
                    }
                    recordingCanvas.restore();
                    i16 = 0;
                    while (true) {
                        gradientDrawableArr = this.pressedDrawable;
                        if (i16 < gradientDrawableArr.length) {
                        }
                        i16++;
                    }
                    drawProgress(recordingCanvas, f23, f26, f12, f29);
                    imageReceiver = this.sideImage;
                    if (imageReceiver != this.leftImage) {
                    }
                    i25 = this.waitingForDraw;
                    if (i25 != 0) {
                    }
                    if (this.padImageForHorizontalInsets) {
                    }
                    if (this.aspectRatioFrameLayout != null) {
                    }
                    if (BLUR_RENDERNODE()) {
                    }
                    drawFancyShadows(canvas2);
                }
                f8 = f4;
            }
            f6 = f5;
            f7 = f3;
            float f612 = f2;
            float f622 = f;
            float f632 = f4 + this.translateY;
            if (this.currentEditMode == 3) {
            }
            float f642 = f632;
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
            }
            if (this.isActionBarVisible) {
            }
            int containerViewWidth2 = getContainerViewWidth();
            int containerViewHeight22 = getContainerViewHeight();
            i2 = this.animationInProgress;
            if (i2 != 2) {
            }
            if (i2 == 4) {
            }
            this.sideImage = null;
            if (this.currentEditMode == 0) {
                if (this.scale >= 1.0f) {
                    if (f6 <= this.maxX + AndroidUtilities.dp(5.0f)) {
                    }
                    this.sideImage = imageReceiver2;
                }
                this.changingPage = this.sideImage == null;
            }
            i3 = 0;
            while (i3 < i4) {
            }
            if (this.sideImage != this.rightImage) {
            }
            if (!this.zoomAnimation) {
            }
            f13 = f10;
            f14 = 0.0f;
            f15 = 1.0f;
            if (this.videoSizeSet) {
            }
            z = false;
            z2 = false;
            this.centerImageTransformLocked = z;
            this.centerImageTransform.reset();
            MaskPaintView maskPaintView222 = this.maskPaintView;
            if (maskPaintView222 != null) {
            }
            if (this.centerImage.hasBitmapImage()) {
            }
            stickerMakerView = this.stickerMakerView;
            if (stickerMakerView != null) {
            }
            f17 = f10;
            f18 = f9;
            recordingCanvas.save();
            f19 = i6;
            float f742222 = f19 / 2.0f;
            i7 = i5;
            float f752222 = i7;
            float f762222 = f752222 / 2.0f;
            recordingCanvas.translate(f742222 + getAdditionX(this.currentEditMode), f762222 + getAdditionY(this.currentEditMode));
            this.centerImageTransform.preTranslate(f742222 + getAdditionX(this.currentEditMode), f762222 + getAdditionY(this.currentEditMode));
            recordingCanvas.translate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
            this.centerImageTransform.preTranslate(f13, (this.currentEditMode != 3 ? this.currentPanTranslationY : 0.0f) + f12);
            float f772222 = f622 - f14;
            recordingCanvas.scale(f772222, f772222);
            this.centerImageTransform.preScale(f772222, f772222);
            recordingCanvas.rotate(f18);
            this.centerImageTransform.preRotate(f18);
            if (this.currentEditMode == 3) {
            }
            f20 = f19;
            if (this.pipAnimationInProgress) {
            }
            f21 = f18;
            f22 = f17;
            i8 = i7;
            f23 = f13;
            f24 = f16;
            z3 = false;
            if (!z2) {
            }
            bitmapWidth = this.centerImage.getBitmapWidth();
            bitmapHeight = this.centerImage.getBitmapHeight();
            float f7822222 = bitmapWidth;
            float f7922222 = f20 / f7822222;
            float f8022222 = bitmapHeight;
            float f8122222 = f752222 / f8022222;
            float min422222 = Math.min(f7922222, f8122222);
            int i4522222 = bitmapHeight;
            int i4622222 = (int) (f7822222 * min422222);
            int i4722222 = bitmapWidth;
            int i4822222 = (int) (f8022222 * min422222);
            i9 = i6;
            if (this.imagesArrLocals.isEmpty()) {
            }
            z5 = false;
            if (z5) {
            }
            i14 = this.currentEditMode;
            if (i14 != 3) {
            }
            if (z6) {
            }
            f28 = f11;
            f29 = f25;
            recordingCanvas.save();
            if (f28 <= 0.0f) {
            }
            float f872222222 = (-i15) / 2;
            int i552222222 = i10;
            float f882222222 = (-i552222222) / 2;
            recordingCanvas.translate(f872222222, f882222222);
            if (!z4) {
            }
            recordingCanvas.scale(min422222, min422222);
            if (z4) {
            }
            if (z7) {
            }
            if (this.paintingOverlay.getVisibility() == 0) {
            }
            recordingCanvas.restore();
            if (z6) {
            }
            recordingCanvas.restore();
            i16 = 0;
            while (true) {
                gradientDrawableArr = this.pressedDrawable;
                if (i16 < gradientDrawableArr.length) {
                }
                i16++;
            }
            drawProgress(recordingCanvas, f23, f26, f12, f29);
            imageReceiver = this.sideImage;
            if (imageReceiver != this.leftImage) {
            }
            i25 = this.waitingForDraw;
            if (i25 != 0) {
            }
            if (this.padImageForHorizontalInsets) {
            }
            if (this.aspectRatioFrameLayout != null) {
            }
            if (BLUR_RENDERNODE()) {
            }
            drawFancyShadows(canvas2);
        }
    }

    private void onHideView() {
        Activity activity = this.parentActivity;
        if (activity instanceof LaunchActivity) {
            ((LaunchActivity) activity).removeOnUserLeaveHintListener(this.onUserLeaveHintListener);
        }
        BaseFragment baseFragment = this.parentFragment;
        if (baseFragment == null || baseFragment.getFragmentView() == null) {
            return;
        }
        this.clippingImageProgress = 1.0f;
        View fragmentView = this.parentFragment.getFragmentView();
        fragmentView.setScaleX(1.0f);
        fragmentView.setScaleY(1.0f);
        ChatAttachAlert chatAttachAlert = this.parentAlert;
        if (chatAttachAlert != null) {
            BottomSheet.ContainerView container = chatAttachAlert.getContainer();
            container.setScaleX(1.0f);
            container.setScaleY(1.0f);
        }
    }

    public void onLinkClick(ClickableSpan clickableSpan, TextView textView) {
        if (textView != null && (clickableSpan instanceof URLSpan)) {
            String url = ((URLSpan) clickableSpan).getURL();
            if (url.startsWith(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                if (this.videoPlayer == null || this.currentMessageObject == null) {
                    return;
                }
                int intValue = Utilities.parseInt((CharSequence) url).intValue();
                if (this.videoPlayer.getDuration() == -9223372036854775807L) {
                    this.seekToProgressPending = intValue / ((float) this.currentMessageObject.getDuration());
                    return;
                }
                long j = intValue * 1000;
                this.videoPlayer.seekTo(j);
                this.videoPlayerSeekbar.setProgress(((float) j) / ((float) this.videoPlayer.getDuration()), true);
                this.videoPlayerSeekbarView.invalidate();
                return;
            } else if (url.startsWith("#")) {
                if (this.parentActivity instanceof LaunchActivity) {
                    DialogsActivity dialogsActivity = new DialogsActivity(null);
                    dialogsActivity.setSearchString(url);
                    ((LaunchActivity) this.parentActivity).presentFragment(dialogsActivity, false, true);
                    closePhoto(false, false);
                    return;
                }
                return;
            } else if (this.parentChatActivity != null && ((clickableSpan instanceof URLSpanReplacement) || AndroidUtilities.shouldShowUrlInAlert(url))) {
                AlertsCreator.showOpenUrlAlert(this.parentChatActivity, url, true, true);
                return;
            }
        }
        clickableSpan.onClick(textView);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(10:1|(9:16|17|(1:5)(1:15)|6|7|8|9|10|11)|3|(0)(0)|6|7|8|9|10|11) */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0038  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0040  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onLinkLongPress(final URLSpan uRLSpan, final TextView textView, final Runnable runnable) {
        final int parseInt;
        BottomSheet.Builder builder = new BottomSheet.Builder(this.parentActivity, false, this.resourcesProvider, -14933463);
        if (uRLSpan.getURL().startsWith("video?")) {
            try {
                parseInt = Integer.parseInt(uRLSpan.getURL().substring(uRLSpan.getURL().indexOf(63) + 1));
            } catch (Throwable unused) {
            }
            builder.setTitle(parseInt < 0 ? AndroidUtilities.formatDuration(parseInt, false) : uRLSpan.getURL());
            builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda131
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    PhotoViewer.this.lambda$onLinkLongPress$1(uRLSpan, textView, parseInt, dialogInterface, i);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda132
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    runnable.run();
                }
            });
            BottomSheet create = builder.create();
            create.scrollNavBar = true;
            create.show();
            this.containerView.performHapticFeedback(0, 2);
            create.setItemColor(0, -1, -1);
            create.setItemColor(1, -1, -1);
            create.setBackgroundColor(-14933463);
            create.setTitleColor(-7697782);
            create.setCalcMandatoryInsets(true);
            AndroidUtilities.setNavigationBarColor(create.getWindow(), -14933463, false);
            AndroidUtilities.setLightNavigationBar(create.getWindow(), false);
            create.scrollNavBar = true;
        }
        parseInt = -1;
        builder.setTitle(parseInt < 0 ? AndroidUtilities.formatDuration(parseInt, false) : uRLSpan.getURL());
        builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda131
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                PhotoViewer.this.lambda$onLinkLongPress$1(uRLSpan, textView, parseInt, dialogInterface, i);
            }
        });
        builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda132
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                runnable.run();
            }
        });
        BottomSheet create2 = builder.create();
        create2.scrollNavBar = true;
        create2.show();
        this.containerView.performHapticFeedback(0, 2);
        create2.setItemColor(0, -1, -1);
        create2.setItemColor(1, -1, -1);
        create2.setBackgroundColor(-14933463);
        create2.setTitleColor(-7697782);
        create2.setCalcMandatoryInsets(true);
        AndroidUtilities.setNavigationBarColor(create2.getWindow(), -14933463, false);
        AndroidUtilities.setLightNavigationBar(create2.getWindow(), false);
        create2.scrollNavBar = true;
    }

    private void onPhotoClosed(final PlaceProviderObject placeProviderObject) {
        if (this.doneButtonPressed) {
            releasePlayer(true);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.putInDownloadsStore) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
        }
        this.isVisible = false;
        this.isVisibleOrAnimating = false;
        this.cropInitied = false;
        this.disableShowCheck = true;
        this.currentMessageObject = null;
        this.currentBotInlineResult = null;
        this.currentFileLocation = null;
        this.currentFileLocationVideo = null;
        this.currentSecureDocument = null;
        this.currentPageBlock = null;
        this.currentPathObject = null;
        this.dialogPhotos = null;
        if (this.videoPlayerControlFrameLayout != null) {
            setVideoPlayerControlVisible(false, false);
        }
        CaptionScrollView captionScrollView = this.captionScrollView;
        if (captionScrollView != null) {
            captionScrollView.reset();
        }
        this.sendPhotoType = 0;
        this.isDocumentsPicker = false;
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.parentAlert = null;
        AnimatedFileDrawable animatedFileDrawable = this.currentAnimation;
        if (animatedFileDrawable != null) {
            animatedFileDrawable.removeSecondParentView(this.containerView);
            this.currentAnimation = null;
        }
        for (int i = 0; i < 3; i++) {
            PhotoProgressView photoProgressView = this.photoProgressViews[i];
            if (photoProgressView != null) {
                photoProgressView.setBackgroundState(-1, false, true);
            }
        }
        requestVideoPreview(0);
        VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
        if (videoTimelinePlayView != null) {
            videoTimelinePlayView.destroy();
        }
        this.hintView.hide(false, 0);
        this.centerImage.setImageBitmap((Bitmap) null);
        this.centerBlur.destroy();
        this.leftImage.setImageBitmap((Bitmap) null);
        this.leftBlur.destroy();
        this.rightImage.setImageBitmap((Bitmap) null);
        this.rightBlur.destroy();
        this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$onPhotoClosed$104(placeProviderObject);
            }
        });
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
            photoViewerProvider.willHidePhotoViewer();
        }
        this.groupedPhotosListView.clear();
        PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
        if (photoViewerProvider2 != null) {
            photoViewerProvider2.onClose();
        }
        this.placeProvider = null;
        this.selectedPhotosAdapter.notifyDataSetChanged();
        this.pageBlocksAdapter = null;
        this.disableShowCheck = false;
        this.shownControlsByEnd = false;
        this.videoCutStart = 0.0f;
        this.videoCutEnd = 1.0f;
        if (placeProviderObject != null) {
            placeProviderObject.imageReceiver.setVisible(true, true);
        }
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity != null) {
            chatActivity.getFragmentView().invalidate();
        }
        Bitmap bitmap = this.videoFrameBitmap;
        if (bitmap != null) {
            bitmap.recycle();
            this.videoFrameBitmap = null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:706:0x0471, code lost:
        if (r9 == false) goto L154;
     */
    /* JADX WARN: Code restructure failed: missing block: B:743:0x051f, code lost:
        if (r30.eventId == 0) goto L154;
     */
    /* JADX WARN: Code restructure failed: missing block: B:744:0x0521, code lost:
        r2 = 0;
        setItemVisible(r29.sendItem, true, false);
     */
    /* JADX WARN: Removed duplicated region for block: B:1017:0x0a78  */
    /* JADX WARN: Removed duplicated region for block: B:1038:0x0aca  */
    /* JADX WARN: Removed duplicated region for block: B:685:0x0417  */
    /* JADX WARN: Removed duplicated region for block: B:687:0x0425  */
    /* JADX WARN: Removed duplicated region for block: B:692:0x043a  */
    /* JADX WARN: Removed duplicated region for block: B:699:0x0453  */
    /* JADX WARN: Removed duplicated region for block: B:952:0x090c  */
    /* JADX WARN: Removed duplicated region for block: B:959:0x0920  */
    /* JADX WARN: Type inference failed for: r13v30 */
    /* JADX WARN: Type inference failed for: r13v7 */
    /* JADX WARN: Type inference failed for: r13v8, types: [android.animation.AnimatorSet, java.lang.String] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onPhotoShow(MessageObject messageObject, TLRPC.FileLocation fileLocation, ImageLocation imageLocation, ImageLocation imageLocation2, ArrayList arrayList, ArrayList arrayList2, List list, int i, PlaceProviderObject placeProviderObject) {
        int i2;
        ?? r13;
        boolean z;
        boolean z2;
        boolean z3;
        int i3;
        ImageView imageView;
        MentionsContainerView mentionsContainerView;
        PhotoViewerProvider photoViewerProvider;
        ChatActivity chatActivity;
        ActionBarMenuSubItem actionBarMenuSubItem;
        String string;
        ImageLocation imageLocation3;
        int i4;
        TLObject chat;
        ImageView imageView2;
        MessageObject messageObject2;
        TLRPC.BotInlineResult botInlineResult;
        PageBlocksAdapter pageBlocksAdapter;
        boolean z4;
        ChatActivity chatActivity2;
        MessageObject messageObject3;
        PhotoViewerProvider photoViewerProvider2;
        ChatActivity chatActivity3;
        boolean z5;
        int i5;
        ActionBarMenuSubItem actionBarMenuSubItem2;
        String string2;
        TLRPC.MessageAction messageAction;
        PhotoViewerWebView photoViewerWebView;
        TLRPC.WebPage webPage;
        String str;
        TLRPC.Message message;
        this.classGuid = ConnectionsManager.generateClassGuid();
        this.customTitle = null;
        this.currentMessageObject = null;
        this.currentFileLocation = null;
        this.currentFileLocationVideo = null;
        this.currentSecureDocument = null;
        this.currentPathObject = null;
        this.currentPageBlock = null;
        this.fromCamera = false;
        this.currentBotInlineResult = null;
        this.avatarStartProgress = 0.0f;
        this.avatarStartTime = 0L;
        this.currentIndex = -1;
        String[] strArr = this.currentFileNames;
        strArr[0] = null;
        strArr[1] = null;
        strArr[2] = null;
        this.avatarsDialogId = 0L;
        this.canEditAvatar = false;
        this.totalImagesCount = 0;
        this.totalImagesCountMerge = 0;
        this.currentEditMode = 0;
        this.captionEdit.keyboardNotifier.ignore(false);
        KeyboardNotifier keyboardNotifier = this.paintKeyboardNotifier;
        if (keyboardNotifier != null) {
            keyboardNotifier.ignore(this.currentEditMode != 3);
        }
        this.isFirstLoading = true;
        this.needSearchImageInArr = false;
        this.loadingMoreImages = false;
        boolean[] zArr = this.endReached;
        zArr[0] = false;
        zArr[1] = this.mergeDialogId == 0;
        this.opennedFromMedia = false;
        this.openedFromProfile = false;
        this.needCaptionLayout = false;
        this.containerView.setTag(1);
        this.playerAutoStarted = false;
        this.isCurrentVideo = false;
        this.shownControlsByEnd = false;
        this.imagesArr.clear();
        this.imagesArrLocations.clear();
        this.imagesArrLocationsSizes.clear();
        this.imagesArrLocationsVideo.clear();
        this.imagesArrMessages.clear();
        this.avatarsArr.clear();
        this.secureDocuments.clear();
        this.imagesArrLocals.clear();
        BlurringShader.BlurManager blurManager = this.blurManager;
        if (blurManager != null) {
            blurManager.resetBitmap();
        }
        if (Build.VERSION.SDK_INT > 21) {
            this.actionBar.setElevation(0.0f);
        }
        for (int i6 = 0; i6 < 2; i6++) {
            this.imagesByIds[i6].clear();
            this.imagesByIdsTemp[i6].clear();
        }
        this.imagesArrTemp.clear();
        this.currentAvatarLocation = null;
        this.containerView.setPadding(0, 0, 0, 0);
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
        }
        this.currentThumb = placeProviderObject != null ? placeProviderObject.thumb : null;
        this.isEvent = placeProviderObject != null && placeProviderObject.isEvent;
        this.sharedMediaType = 0;
        this.allMediaItem.setText(LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia));
        setItemVisible(this.sendItem, false, false);
        setItemVisible(this.pipItem, false, true);
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.setSubtitle(null);
        }
        this.actionBar.setBackgroundColor(2130706432);
        int i7 = 8;
        this.bottomLayout.setVisibility(8);
        this.bottomLayout.setTag(0);
        PhotoCountView photoCountView = this.countView;
        if (photoCountView != null) {
            photoCountView.updateShow(false, false);
        }
        if (this.sendPhotoType == 11 || this.stickerMakerView == null) {
            i2 = 11;
        } else {
            this.stickerEmpty = false;
            ImageView imageView3 = this.tuneItem;
            if (imageView3 != null) {
                imageView3.setAlpha(1.0f);
            }
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            i2 = 11;
            this.stickerMakerView.clean();
            ArrayList arrayList3 = this.selectedEmojis;
            if (arrayList3 != null) {
                arrayList3.clear();
            }
        }
        this.bottomLayout.setTranslationY(0.0f);
        this.captionTextViewSwitcher.setTranslationY(0.0f);
        setItemVisible(this.editItem, false, false);
        QualityChooseView qualityChooseView = this.qualityChooseView;
        if (qualityChooseView != null) {
            qualityChooseView.setVisibility(4);
            this.qualityPicker.setVisibility(4);
            r13 = 0;
            this.qualityChooseView.setTag(null);
        } else {
            r13 = 0;
        }
        AnimatorSet animatorSet = this.qualityChooseViewAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.qualityChooseViewAnimation = r13;
        }
        setDoubleTapEnabled(true);
        this.allowShare = false;
        this.slideshowMessageId = 0;
        this.nameOverride = r13;
        this.dateOverride = 0;
        this.menuItem.hideSubItem(2);
        this.menuItem.hideSubItem(4);
        this.menuItem.hideSubItem(23);
        this.menuItem.hideSubItem(10);
        this.menuItem.hideSubItem(i2);
        this.menuItem.hideSubItem(14);
        this.menuItem.hideSubItem(15);
        this.menuItem.hideSubItem(17);
        this.menuItem.hideSubItem(16);
        this.menuItem.hideSubItem(6);
        this.speedItem.setVisibility(8);
        this.speedGap.setVisibility(8);
        this.qualityItem.setVisibility(8);
        this.actionBar.setTranslationY(0.0f);
        this.dialogPhotos = null;
        this.checkImageView.setAlpha(1.0f);
        this.checkImageView.setTranslationY(0.0f);
        this.checkImageView.setVisibility(8);
        this.actionBar.setTitleRightMargin(0);
        this.photosCounterView.setAlpha(1.0f);
        this.photosCounterView.setTranslationY(0.0f);
        this.photosCounterView.setVisibility(8);
        updateActionBarTitlePadding();
        this.pickerView.setVisibility(8);
        this.pickerViewSendButton.setVisibility(8);
        this.doneButtonFullWidth.setVisibility(8);
        this.pickerViewSendButton.setTranslationY(0.0f);
        this.pickerView.setAlpha(1.0f);
        this.pickerViewSendButton.setAlpha(1.0f);
        this.pickerView.setTranslationY(0.0f);
        this.paintItem.setVisibility(8);
        this.paintItem.setTag(null);
        this.cropItem.setVisibility(8);
        this.tuneItem.setVisibility(8);
        this.tuneItem.setTag(null);
        this.captionEdit.setTimerVisible(false, false);
        this.rotateItem.setVisibility(8);
        this.mirrorItem.setVisibility(8);
        this.pickerView.getLayoutParams().height = -2;
        this.docInfoTextView.setVisibility(8);
        this.docNameTextView.setVisibility(8);
        showVideoTimeline(false, false);
        showEditCaption(false, false);
        showStickerMode(false, false);
        this.videoAvatarTooltip.setVisibility(8);
        this.compressItem.setVisibility(8);
        AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, false);
        this.actionBarContainer.setSubtitle(null);
        setItemVisible(this.masksItem, false, true);
        this.muteVideo = false;
        this.muteItem.setImageResource(R.drawable.video_send_unmute);
        this.editorDoneLayout.setVisibility(8);
        this.captionTextViewSwitcher.setTag(null);
        this.captionTextViewSwitcher.setVisibility(4);
        PhotoCropView photoCropView2 = this.photoCropView;
        if (photoCropView2 != null) {
            photoCropView2.setVisibility(8);
        }
        PhotoFilterView photoFilterView = this.photoFilterView;
        if (photoFilterView != null) {
            photoFilterView.setVisibility(8);
        }
        int i8 = 0;
        for (int i9 = 3; i8 < i9; i9 = 3) {
            PhotoProgressView photoProgressView = this.photoProgressViews[i8];
            if (photoProgressView != null) {
                photoProgressView.setBackgroundState(-1, false, true);
            }
            i8++;
        }
        GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
        if (groupedPhotosListView != null) {
            groupedPhotosListView.reset();
            this.groupedPhotosListView.setAnimateBackground(!ApplicationLoader.isNetworkOnline());
        }
        PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
        if (photoViewerProvider3 != null && photoViewerProvider3.getTotalImageCount() > 0) {
            this.totalImagesCount = this.placeProvider.getTotalImageCount();
        }
        if (messageObject != null) {
            this.currentVideoSpeed = ApplicationLoader.applicationContext.getSharedPreferences("playback_speed", 0).getFloat("speed" + messageObject.getDialogId() + "_" + messageObject.getId(), 1.0f);
        } else {
            this.currentVideoSpeed = 1.0f;
        }
        setMenuItemIcon(false, true);
        boolean z6 = messageObject != null && (MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) || (((message = messageObject.messageOwner) != null && message.noforwards) || messageObject.hasRevealedExtendedMedia()));
        String str2 = "ShowAllGIFs";
        if (messageObject != null && arrayList == null) {
            TLRPC.Message message2 = messageObject.messageOwner;
            if (message2 != null && (MessageObject.getMedia(message2) instanceof TLRPC.TL_messageMediaWebPage) && MessageObject.getMedia(messageObject.messageOwner).webpage != null && (str = (webPage = MessageObject.getMedia(messageObject.messageOwner).webpage).site_name) != null) {
                String lowerCase = str.toLowerCase();
                if (lowerCase.equals("instagram") || lowerCase.equals("twitter") || "telegram_album".equals(webPage.type)) {
                    if (!TextUtils.isEmpty(webPage.author)) {
                        this.nameOverride = webPage.author;
                    }
                    if (webPage.cached_page instanceof TLRPC.TL_page) {
                        int i10 = 0;
                        while (true) {
                            if (i10 >= webPage.cached_page.blocks.size()) {
                                break;
                            }
                            TLRPC.PageBlock pageBlock = webPage.cached_page.blocks.get(i10);
                            if (pageBlock instanceof TLRPC.TL_pageBlockAuthorDate) {
                                this.dateOverride = ((TLRPC.TL_pageBlockAuthorDate) pageBlock).published_date;
                                break;
                            }
                            i10++;
                        }
                    }
                    ArrayList<MessageObject> webPagePhotos = messageObject.getWebPagePhotos(null, null);
                    if (!webPagePhotos.isEmpty()) {
                        this.slideshowMessageId = messageObject.getId();
                        this.needSearchImageInArr = false;
                        i5 = 5;
                        this.imagesArr.addAll(webPagePhotos);
                        this.totalImagesCount = this.imagesArr.size();
                        int indexOf = this.imagesArr.indexOf(messageObject);
                        if (indexOf < 0) {
                            indexOf = 0;
                        }
                        setImageIndex(indexOf);
                        if (messageObject.canPreviewDocument()) {
                            if (messageObject.isGif()) {
                                this.sharedMediaType = i5;
                                actionBarMenuSubItem2 = this.allMediaItem;
                                string2 = LocaleController.getString("ShowAllGIFs", R.string.ShowAllGIFs);
                            }
                            if (this.isEmbedVideo && ((photoViewerWebView = this.photoViewerWebView) == null || !photoViewerWebView.isControllable())) {
                                this.bottomLayout.setTag(null);
                                this.bottomLayout.setVisibility(8);
                            }
                            if (this.slideshowMessageId == 0) {
                                this.imagesArr.add(messageObject);
                                int i11 = 0;
                                if (messageObject.eventId != 0) {
                                    this.needSearchImageInArr = false;
                                } else if (this.currentAnimation != null) {
                                    this.needSearchImageInArr = false;
                                    if (messageObject.canForwardMessage()) {
                                    }
                                    i11 = 0;
                                } else {
                                    if (!messageObject.scheduled && !messageObject.isQuickReply() && !messageObject.isSponsored() && !(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaInvoice) && !(MessageObject.getMedia(messageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && ((messageAction = messageObject.messageOwner.action) == null || (messageAction instanceof TLRPC.TL_messageActionEmpty))) {
                                        this.needSearchImageInArr = true;
                                        this.imagesByIds[0].put(messageObject.getId(), messageObject);
                                        ChatActivity chatActivity4 = this.parentChatActivity;
                                        if (chatActivity4 == null || (!chatActivity4.isThreadChat() && this.parentChatActivity.getChatMode() != 3 && this.parentChatActivity.getChatMode() != i5)) {
                                            this.menuItem.showSubItem(4);
                                            long dialogId = messageObject.getDialogId();
                                            if (dialogId < 0 ? ChatObject.canWriteToChat(MessagesController.getInstance(messageObject.currentAccount).getChat(Long.valueOf(-dialogId))) : true) {
                                                this.menuItem.showSubItem(23);
                                            } else {
                                                this.menuItem.hideSubItem(23);
                                            }
                                            this.menuItem.showSubItem(2);
                                        }
                                        setItemVisible(this.sendItem, !z6, false);
                                    } else if (this.isEmbedVideo) {
                                    }
                                    i11 = 0;
                                }
                                setImageIndex(i11);
                            }
                        } else {
                            this.sharedMediaType = 1;
                            actionBarMenuSubItem2 = this.allMediaItem;
                            string2 = LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles);
                        }
                        actionBarMenuSubItem2.setText(string2);
                        if (this.isEmbedVideo) {
                            this.bottomLayout.setTag(null);
                            this.bottomLayout.setVisibility(8);
                        }
                        if (this.slideshowMessageId == 0) {
                        }
                    }
                }
            }
            i5 = 5;
            if (messageObject.canPreviewDocument()) {
            }
            actionBarMenuSubItem2.setText(string2);
            if (this.isEmbedVideo) {
            }
            if (this.slideshowMessageId == 0) {
            }
        } else if (arrayList2 != null) {
            this.secureDocuments.addAll(arrayList2);
            setImageIndex(i);
        } else if (fileLocation == null) {
            if (arrayList != null) {
                this.imagesArr.addAll(arrayList);
                int i12 = 0;
                while (i12 < this.imagesArr.size()) {
                    MessageObject messageObject4 = (MessageObject) this.imagesArr.get(i12);
                    String str3 = str2;
                    this.imagesByIds[messageObject4.getDialogId() == this.currentDialogId ? (char) 0 : (char) 1].put(messageObject4.getId(), messageObject4);
                    i12++;
                    str2 = str3;
                }
                String str4 = str2;
                MessageObject messageObject5 = (MessageObject) this.imagesArr.get(i);
                if (messageObject5.scheduled || messageObject5.isQuickReply() || messageObject5.isSponsored() || ((chatActivity = this.parentChatActivity) != null && chatActivity.isThreadChat())) {
                    this.totalImagesCount = this.imagesArr.size();
                } else {
                    this.opennedFromMedia = this.parentChatActivity == null;
                    if (this.parentFragment instanceof ProfileActivity) {
                        this.openedFromProfile = true;
                    }
                    if (placeProviderObject != null) {
                        this.startOffset = placeProviderObject.starOffset;
                    }
                    this.menuItem.showSubItem(4);
                    long dialogId2 = messageObject5.getDialogId();
                    if (dialogId2 < 0 ? ChatObject.canWriteToChat(MessagesController.getInstance(messageObject5.currentAccount).getChat(Long.valueOf(-dialogId2))) : true) {
                        this.menuItem.showSubItem(23);
                    } else {
                        this.menuItem.hideSubItem(23);
                    }
                    if (messageObject5.canForwardMessage() && !z6) {
                        setItemVisible(this.sendItem, true, false);
                    }
                    if (messageObject5.canPreviewDocument()) {
                        this.sharedMediaType = 1;
                        actionBarMenuSubItem = this.allMediaItem;
                        string = LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles);
                    } else if (messageObject5.isGif()) {
                        this.sharedMediaType = 5;
                        actionBarMenuSubItem = this.allMediaItem;
                        string = LocaleController.getString(str4, R.string.ShowAllGIFs);
                    }
                    actionBarMenuSubItem.setText(string);
                }
            } else if (list != null) {
                int i13 = this.sendPhotoType;
                if (i13 != -1 && (i13 == 0 || i13 == 4 || ((i13 == 2 || i13 == 5) && list.size() > 1))) {
                    this.checkImageView.setVisibility(0);
                    this.photosCounterView.setVisibility(0);
                    updateActionBarTitlePadding();
                }
                CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
                int i14 = this.sendPhotoType;
                if (i14 == -1 || !((i14 == 2 || i14 == 5) && this.placeProvider.canCaptureMorePhotos())) {
                    z = false;
                    z2 = false;
                } else {
                    z = false;
                    z2 = true;
                }
                captionPhotoViewer.setAddPhotoVisible(z2, z);
                this.menuItem.setVisibility(8);
                this.imagesArrLocals.addAll(list);
                Object obj = this.imagesArrLocals.get(i);
                int i15 = this.sendPhotoType;
                if (i15 == -1 || !(obj instanceof MediaController.PhotoEntry)) {
                    if (obj instanceof TLRPC.BotInlineResult) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                    } else {
                        this.cropItem.setVisibility(((obj instanceof MediaController.SearchImage) && ((MediaController.SearchImage) obj).type == 0) ? 0 : 8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        if (this.cropItem.getVisibility() == 0) {
                            z3 = true;
                        }
                    }
                    z3 = false;
                } else {
                    if (i15 == 10) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                    } else if (this.isDocumentsPicker) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        this.docInfoTextView.setVisibility(0);
                        this.docNameTextView.setVisibility(0);
                        this.pickerView.getLayoutParams().height = AndroidUtilities.dp(84.0f);
                    } else if (((MediaController.PhotoEntry) obj).isVideo) {
                        this.cropItem.setVisibility(8);
                        this.rotateItem.setVisibility(8);
                        this.mirrorItem.setVisibility(8);
                        this.bottomLayout.setVisibility(0);
                        this.bottomLayout.setTag(1);
                        this.bottomLayout.setTranslationY(-AndroidUtilities.dp(48.0f));
                    } else {
                        this.cropItem.setVisibility(i15 != 1 ? 0 : 8);
                        this.rotateItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                        this.mirrorItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                    }
                    z3 = !this.isDocumentsPicker;
                }
                this.needCaptionLayout = z3 && ((photoViewerProvider = this.placeProvider) == null || photoViewerProvider.allowCaption());
                if (this.parentChatActivity == null || (mentionsContainerView = this.captionEdit.mentionContainer) == null) {
                    i3 = 0;
                } else {
                    mentionsContainerView.getAdapter().setChatInfo(this.parentChatActivity.chatInfo);
                    this.captionEdit.mentionContainer.getAdapter().setNeedUsernames(this.parentChatActivity.currentChat != null);
                    i3 = 0;
                    this.captionEdit.mentionContainer.getAdapter().setNeedBotContext(false);
                }
                if (this.sendPhotoType != -1) {
                    this.pickerView.setVisibility(i3);
                    if (useFullWidthSendButton()) {
                        this.doneButtonFullWidth.setVisibility(i3);
                    } else {
                        this.pickerViewSendButton.setVisibility(i3);
                        this.pickerViewSendButton.setTranslationY(0.0f);
                        this.pickerViewSendButton.setAlpha(1.0f);
                    }
                    View view = this.navigationBar;
                    if (view != null && (!this.fancyShadows || this.sendPhotoType == 11)) {
                        view.setVisibility(0);
                        this.navigationBar.setAlpha(1.0f);
                    }
                    this.bottomLayout.setVisibility(8);
                    this.bottomLayout.setTag(null);
                    this.containerView.setTag(null);
                }
                setImageIndex(i);
                int i16 = this.sendPhotoType;
                if (i16 == 1) {
                    this.paintItem.setVisibility(0);
                    this.tuneItem.setVisibility(0);
                } else {
                    if (i16 == 4 || i16 == 5) {
                        this.paintItem.setVisibility(8);
                        imageView = this.tuneItem;
                    } else {
                        ImageView imageView4 = this.paintItem;
                        imageView4.setVisibility(imageView4.getTag() != null ? 0 : 8);
                        imageView = this.tuneItem;
                        if (imageView.getTag() != null) {
                            i7 = 0;
                        }
                    }
                    imageView.setVisibility(i7);
                }
                updateSelectedCount();
                imageView2 = this.tuneItem;
                if (imageView2 != null) {
                    imageView2.setAlpha(this.stickerEmpty ? 0.4f : 1.0f);
                }
                this.dialogPhotos = null;
                if (this.currentAnimation == null && !this.isEvent) {
                    if (this.currentDialogId != 0 || this.totalImagesCount != 0 || (messageObject3 = this.currentMessageObject) == null || messageObject3.scheduled) {
                        if (this.avatarsDialogId != 0 && this.placeProvider.canLoadMoreAvatars()) {
                            this.dialogPhotos = MessagesController.getInstance(this.currentAccount).getDialogPhotos(this.avatarsDialogId);
                            NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this.dialogPhotos);
                        }
                    } else if (this.currentFiltered && (chatActivity3 = this.parentChatActivity) != null) {
                        ArrayList filteredMessages = chatActivity3.getFilteredMessages();
                        if (filteredMessages != null) {
                            this.imagesArr.clear();
                            for (int i17 = 0; i17 < filteredMessages.size(); i17++) {
                                MessageObject messageObject6 = (MessageObject) filteredMessages.get(i17);
                                if (MediaDataController.getMediaType(messageObject6.messageOwner) == this.sharedMediaType) {
                                    this.imagesArr.add(messageObject6);
                                    this.imagesByIds[0].put(messageObject6.getId(), messageObject6);
                                }
                            }
                            Collections.sort(this.imagesArr, new Comparator() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda26
                                @Override // java.util.Comparator
                                public final int compare(Object obj2, Object obj3) {
                                    int lambda$onPhotoShow$90;
                                    lambda$onPhotoShow$90 = PhotoViewer.lambda$onPhotoShow$90((MessageObject) obj2, (MessageObject) obj3);
                                    return lambda$onPhotoShow$90;
                                }
                            });
                            this.currentIndex = -1;
                            for (int i18 = 0; i18 < this.imagesArr.size(); i18++) {
                                if (this.imagesArr.get(i18) == this.currentMessageObject || ((MessageObject) this.imagesArr.get(i18)).getId() == this.currentMessageObject.getId()) {
                                    this.currentIndex = i18;
                                }
                            }
                            if (this.currentIndex < 0) {
                                this.currentIndex = this.imagesArr.size();
                                this.imagesArr.add(this.currentMessageObject);
                                z5 = false;
                                this.imagesByIds[0].put(this.currentMessageObject.getId(), this.currentMessageObject);
                            } else {
                                z5 = false;
                            }
                            setImages();
                            PhotoCountView photoCountView2 = this.countView;
                            if (photoCountView2 != null) {
                                photoCountView2.updateShow(true, z5);
                                this.countView.set(this.currentIndex + 1, this.imagesArr.size(), z5);
                            }
                        } else {
                            z5 = false;
                        }
                        this.isFirstLoading = z5;
                    } else if (MediaDataController.getMediaType(messageObject3.messageOwner) == this.sharedMediaType && ((photoViewerProvider2 = this.placeProvider) == null || !photoViewerProvider2.forceAllInGroup())) {
                        MediaDataController.getInstance(this.currentAccount).getMediaCount(this.currentDialogId, this.topicId, this.sharedMediaType, this.classGuid, true);
                        if (this.mergeDialogId != 0) {
                            MediaDataController.getInstance(this.currentAccount).getMediaCount(this.mergeDialogId, this.topicId, this.sharedMediaType, this.classGuid, true);
                        }
                    }
                }
                messageObject2 = this.currentMessageObject;
                if ((messageObject2 == null && messageObject2.isVideo()) || (((botInlineResult = this.currentBotInlineResult) != null && (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) || (((pageBlocksAdapter = this.pageBlocksAdapter) != null && (pageBlocksAdapter.isVideo(i) || this.pageBlocksAdapter.isHardwarePlayer(i))) || (this.sendPhotoType == -1 && ((MediaController.PhotoEntry) this.imagesArrLocals.get(i)).isVideo)))) {
                    this.playerAutoStarted = true;
                    onActionClick(false);
                } else if (!this.imagesArrLocals.isEmpty()) {
                    Object obj2 = this.imagesArrLocals.get(i);
                    ChatActivity chatActivity5 = this.parentChatActivity;
                    TLRPC.User currentUser = chatActivity5 != null ? chatActivity5.getCurrentUser() : null;
                    boolean z7 = (this.isDocumentsPicker || (chatActivity2 = this.parentChatActivity) == null || chatActivity2.isSecretChat() || this.parentChatActivity.isInScheduleMode() || currentUser == null || currentUser.bot || UserObject.isUserSelf(currentUser) || this.parentChatActivity.isEditingMessageMedia()) ? false : true;
                    PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
                    if (photoViewerProvider4 != null && photoViewerProvider4.getEditingMessageObject() != null) {
                        z7 = false;
                    }
                    if (!(obj2 instanceof TLRPC.BotInlineResult)) {
                        if ((obj2 instanceof MediaController.PhotoEntry) || !z7 || !(obj2 instanceof MediaController.SearchImage)) {
                            z4 = z7;
                        } else if (((MediaController.SearchImage) obj2).type == 0) {
                            z4 = true;
                        }
                        this.captionEdit.setTimerVisible(z4, true);
                    }
                    z4 = false;
                    this.captionEdit.setTimerVisible(z4, true);
                }
                checkFullscreenButton();
            }
            setImageIndex(i);
            imageView2 = this.tuneItem;
            if (imageView2 != null) {
            }
            this.dialogPhotos = null;
            if (this.currentAnimation == null) {
                if (this.currentDialogId != 0) {
                }
                if (this.avatarsDialogId != 0) {
                    this.dialogPhotos = MessagesController.getInstance(this.currentAccount).getDialogPhotos(this.avatarsDialogId);
                    NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this.dialogPhotos);
                }
            }
            messageObject2 = this.currentMessageObject;
            if (messageObject2 == null) {
            }
            if (!this.imagesArrLocals.isEmpty()) {
            }
            checkFullscreenButton();
        } else {
            long j = placeProviderObject != null ? placeProviderObject.dialogId : 0L;
            this.avatarsDialogId = j;
            this.canEditAvatar = placeProviderObject != null && placeProviderObject.canEdit;
            if (imageLocation != null || j == 0) {
                imageLocation3 = imageLocation;
            } else {
                if (j > 0) {
                    chat = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId));
                    i4 = 0;
                } else {
                    i4 = 0;
                    chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                }
                imageLocation3 = ImageLocation.getForUserOrChat(chat, i4);
            }
            if (imageLocation3 == null) {
                return;
            }
            this.imagesArrLocations.add(imageLocation3);
            this.imagesArrLocationsVideo.add(imageLocation2 != null ? imageLocation2 : imageLocation3);
            this.currentAvatarLocation = imageLocation3;
            this.imagesArrLocationsSizes.add(Long.valueOf(placeProviderObject != null ? placeProviderObject.size : 0L));
            this.imagesArrMessages.add(null);
            this.avatarsArr.add(new TLRPC.TL_photoEmpty());
            this.allowShare = true;
            this.menuItem.hideSubItem(2);
            this.menuItem.showSubItem(10);
            setImageIndex(0);
            if (this.sendPhotoType == 1) {
                if (useFullWidthSendButton()) {
                    this.doneButtonFullWidth.setVisibility(0);
                } else {
                    this.pickerViewSendButton.setVisibility(0);
                }
                this.pickerViewSendButton.setTranslationY(0.0f);
                this.pickerViewSendButton.setAlpha(1.0f);
                View view2 = this.navigationBar;
                if (view2 != null) {
                    view2.setVisibility(0);
                    this.navigationBar.setAlpha(1.0f);
                }
                this.bottomLayout.setVisibility(8);
                this.bottomLayout.setTag(null);
                this.containerView.setTag(null);
            }
        }
        imageView2 = this.tuneItem;
        if (imageView2 != null) {
        }
        this.dialogPhotos = null;
        if (this.currentAnimation == null) {
        }
        messageObject2 = this.currentMessageObject;
        if (messageObject2 == null) {
        }
        if (!this.imagesArrLocals.isEmpty()) {
        }
        checkFullscreenButton();
    }

    public void onSharePressed() {
        File file;
        boolean z;
        boolean z2;
        String mimeType;
        if (this.parentActivity == null || !this.allowShare) {
            return;
        }
        try {
            MessageObject messageObject = this.currentMessageObject;
            File file2 = null;
            if (messageObject != null) {
                z = messageObject.isVideo();
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    File file3 = new File(this.currentMessageObject.messageOwner.attachPath);
                    if (file3.exists()) {
                        file2 = file3;
                    }
                }
                if (file2 == null) {
                    file2 = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                }
            } else {
                if (this.currentFileLocationVideo != null) {
                    FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                    TLRPC.FileLocation fileLocation = getFileLocation(this.currentFileLocationVideo);
                    String fileLocationExt = getFileLocationExt(this.currentFileLocationVideo);
                    if (this.avatarsDialogId == 0 && !this.isEvent) {
                        z2 = false;
                        file = fileLoader.getPathToAttach(fileLocation, fileLocationExt, z2);
                    }
                    z2 = true;
                    file = fileLoader.getPathToAttach(fileLocation, fileLocationExt, z2);
                } else {
                    PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                    if (pageBlocksAdapter != null) {
                        file = pageBlocksAdapter.getFile(this.currentIndex);
                    }
                    z = false;
                }
                file2 = file;
                z = false;
            }
            if (file2 != null && !file2.exists()) {
                file2 = new File(FileLoader.getDirectory(4), file2.getName());
            }
            if (file2 == null || !file2.exists()) {
                showDownloadAlert();
                return;
            }
            Intent intent = new Intent("android.intent.action.SEND");
            if (z) {
                mimeType = "video/mp4";
            } else {
                MessageObject messageObject2 = this.currentMessageObject;
                mimeType = messageObject2 != null ? messageObject2.getMimeType() : "image/jpeg";
            }
            intent.setType(mimeType);
            if (Build.VERSION.SDK_INT >= 24) {
                try {
                    Activity activity = this.parentActivity;
                    intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(activity, ApplicationLoader.getApplicationId() + ".provider", file2));
                    intent.setFlags(1);
                } catch (Exception unused) {
                }
                this.parentActivity.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
            }
            intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
            this.parentActivity.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void onShowView() {
        Activity activity = this.parentActivity;
        if (activity instanceof LaunchActivity) {
            ((LaunchActivity) activity).addOnUserLeaveHintListener(this.onUserLeaveHintListener);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:637:0x04cd, code lost:
        if (r1 > r4) goto L245;
     */
    /* JADX WARN: Code restructure failed: missing block: B:643:0x04dc, code lost:
        if (r2 > r4) goto L248;
     */
    /* JADX WARN: Code restructure failed: missing block: B:652:0x0501, code lost:
        if (r3 > r4) goto L258;
     */
    /* JADX WARN: Code restructure failed: missing block: B:658:0x0512, code lost:
        if (r3 > r4) goto L261;
     */
    /* JADX WARN: Code restructure failed: missing block: B:709:0x05f3, code lost:
        if (r3 > r4) goto L312;
     */
    /* JADX WARN: Code restructure failed: missing block: B:715:0x0604, code lost:
        if (r3 > r4) goto L315;
     */
    /* JADX WARN: Code restructure failed: missing block: B:741:0x06e5, code lost:
        if (r2 != null) goto L341;
     */
    /* JADX WARN: Code restructure failed: missing block: B:760:0x0780, code lost:
        if (r2 != null) goto L341;
     */
    /* JADX WARN: Code restructure failed: missing block: B:761:0x0782, code lost:
        r2.clear();
     */
    /* JADX WARN: Removed duplicated region for block: B:595:0x03d5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        VelocityTracker velocityTracker;
        int i;
        int i2;
        int i3;
        MaskPaintView maskPaintView;
        LPhotoPaintView lPhotoPaintView;
        if (this.currentEditMode == 3 && this.animationStartTime != 0 && (motionEvent.getActionMasked() == 0 || motionEvent.getActionMasked() == 5)) {
            if (motionEvent.getPointerCount() < 2) {
                return true;
            }
            cancelMoveZoomAnimation();
        }
        if (this.animationInProgress == 0 && this.animationStartTime == 0) {
            if (this.videoPlayerRewinder.rewindCount > 0) {
                if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
                    this.videoPlayerRewinder.cancelRewind();
                    return false;
                }
                return true;
            }
            int i4 = this.currentEditMode;
            if (i4 == 2) {
                this.photoFilterView.onTouch(motionEvent);
                return true;
            }
            if (i4 != 1 && (i4 == 3 || this.sendPhotoType != 1)) {
                if (!this.captionEdit.editText.isPopupShowing() && !this.captionEdit.editText.isKeyboardVisible()) {
                    if (this.currentEditMode == 0 && this.sendPhotoType != 1 && motionEvent.getPointerCount() == 1 && this.gestureDetector.onTouchEvent(motionEvent) && this.doubleTap) {
                        this.doubleTap = false;
                        this.moving = false;
                        this.zooming = false;
                        checkMinMax(false);
                        return true;
                    }
                    Tooltip tooltip = this.tooltip;
                    if (tooltip != null) {
                        tooltip.hide();
                    }
                    if (motionEvent.getActionMasked() == 0 || motionEvent.getActionMasked() == 5) {
                        this.discardTap = false;
                        if (!this.scroller.isFinished()) {
                            this.scroller.abortAnimation();
                        }
                        if (!this.draggingDown && !this.changingPage) {
                            if (this.canZoom && motionEvent.getPointerCount() == 2) {
                                if (this.paintViewTouched == 1) {
                                    MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                                    this.photoPaintView.onTouch(obtain);
                                    obtain.recycle();
                                    this.paintViewTouched = 2;
                                } else if (this.maskPaintViewTouched == 1) {
                                    MotionEvent obtain2 = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                                    this.maskPaintView.onTouch(obtain2);
                                    obtain2.recycle();
                                    this.maskPaintViewTouched = 2;
                                }
                                this.pinchStartDistance = (float) Math.hypot(motionEvent.getX(1) - motionEvent.getX(0), motionEvent.getY(1) - motionEvent.getY(0));
                                this.pinchStartAngle = (float) Math.atan2(motionEvent.getY(1) - motionEvent.getY(0), motionEvent.getX(1) - motionEvent.getX(0));
                                this.pinchStartScale = this.scale;
                                this.pinchStartRotate = this.rotate;
                                this.pinchCenterX = (motionEvent.getX(0) + motionEvent.getX(1)) / 2.0f;
                                float y = (motionEvent.getY(0) + motionEvent.getY(1)) / 2.0f;
                                this.pinchCenterY = y;
                                this.pinchStartX = this.translationX;
                                this.pinchStartY = this.translationY;
                                this.zooming = true;
                                this.moving = false;
                                if (this.currentEditMode == 3 || this.sendPhotoType == 11) {
                                    this.moveStartX = this.pinchCenterX;
                                    this.moveStartY = y;
                                    this.draggingDown = false;
                                    this.canDragDown = false;
                                }
                                hidePressedDrawables();
                                velocityTracker = this.velocityTracker;
                            } else if (motionEvent.getPointerCount() == 1) {
                                int i5 = this.currentEditMode;
                                if (i5 == 3) {
                                    if (this.paintViewTouched == 0) {
                                        View view = this.photoPaintView.getView();
                                        view.getHitRect(this.hitRect);
                                        if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                            MotionEvent obtain3 = MotionEvent.obtain(motionEvent);
                                            obtain3.offsetLocation(-view.getX(), -view.getY());
                                            this.photoPaintView.onTouch(obtain3);
                                            obtain3.recycle();
                                            this.paintViewTouched = 1;
                                        }
                                    }
                                } else if (i5 != 4) {
                                    this.moveStartX = motionEvent.getX();
                                    float y2 = motionEvent.getY();
                                    this.moveStartY = y2;
                                    this.dragY = y2;
                                    this.draggingDown = false;
                                    this.canDragDown = true;
                                    velocityTracker = this.velocityTracker;
                                } else if (this.maskPaintViewTouched == 0) {
                                    MaskPaintView maskPaintView2 = this.maskPaintView;
                                    maskPaintView2.getHitRect(this.hitRect);
                                    if (this.hitRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                        MotionEvent obtain4 = MotionEvent.obtain(motionEvent);
                                        obtain4.offsetLocation(-maskPaintView2.getX(), -maskPaintView2.getY());
                                        this.maskPaintView.onTouch(obtain4);
                                        obtain4.recycle();
                                        this.maskPaintViewTouched = 1;
                                    }
                                }
                            }
                        }
                        if (motionEvent.getActionMasked() == 0) {
                            this.longPressX = motionEvent.getX();
                            AndroidUtilities.runOnUIThread(this.longPressRunnable, 300L);
                        } else {
                            AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                        }
                    } else {
                        float f = 0.0f;
                        if (motionEvent.getActionMasked() == 2) {
                            if (this.canZoom && motionEvent.getPointerCount() == 2 && !this.draggingDown && this.zooming && !this.changingPage) {
                                this.discardTap = true;
                                if (this.currentEditMode == 3 || this.sendPhotoType == 11) {
                                    float x = (motionEvent.getX(0) + motionEvent.getX(1)) / 2.0f;
                                    float y3 = (motionEvent.getY(0) + motionEvent.getY(1)) / 2.0f;
                                    float f2 = this.moveStartX - x;
                                    float f3 = this.moveStartY - y3;
                                    this.moveStartX = x;
                                    this.moveStartY = y3;
                                    float f4 = this.translationX;
                                    if (f4 < this.minX || f4 > this.maxX) {
                                        f2 /= 3.0f;
                                    }
                                    float f5 = this.translationY;
                                    if (f5 < this.minY || f5 > this.maxY) {
                                        f3 /= 3.0f;
                                    }
                                    this.pinchStartX = ((this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.translationX) / (this.scale / this.pinchStartScale))) - f2;
                                    this.pinchStartY = ((this.pinchCenterY - (getContainerViewHeight() / 2)) - (((this.pinchCenterY - (getContainerViewHeight() / 2)) - this.translationY) / (this.scale / this.pinchStartScale))) - f3;
                                    this.pinchCenterX = x;
                                    this.pinchCenterY = y3;
                                }
                                if (this.sendPhotoType == 11 && this.currentEditMode == 0) {
                                    double atan2 = Math.atan2(motionEvent.getY(1) - motionEvent.getY(0), motionEvent.getX(1) - motionEvent.getX(0));
                                    double d = this.pinchStartAngle;
                                    Double.isNaN(d);
                                    double d2 = this.pinchStartRotate;
                                    Double.isNaN(d2);
                                    this.rotate = (float) ((((atan2 - d) / 3.141592653589793d) * 180.0d) + d2);
                                }
                                this.scale = (((float) Math.hypot(motionEvent.getX(1) - motionEvent.getX(0), motionEvent.getY(1) - motionEvent.getY(0))) / this.pinchStartDistance) * this.pinchStartScale;
                                this.translationX = (this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.pinchStartX) * (this.scale / this.pinchStartScale));
                                float containerViewHeight = this.pinchCenterY - (getContainerViewHeight() / 2);
                                float containerViewHeight2 = (this.pinchCenterY - (getContainerViewHeight() / 2)) - this.pinchStartY;
                                float f6 = this.scale;
                                this.translationY = containerViewHeight - (containerViewHeight2 * (f6 / this.pinchStartScale));
                                updateMinMax(f6);
                            } else if (motionEvent.getPointerCount() == 1) {
                                if (this.paintViewTouched == 1 && (lPhotoPaintView = this.photoPaintView) != null) {
                                    View view2 = lPhotoPaintView.getView();
                                    MotionEvent obtain5 = MotionEvent.obtain(motionEvent);
                                    obtain5.offsetLocation(-view2.getX(), -view2.getY());
                                    this.photoPaintView.onTouch(obtain5);
                                    obtain5.recycle();
                                    return true;
                                } else if (this.maskPaintViewTouched == 1 && (maskPaintView = this.maskPaintView) != null) {
                                    MotionEvent obtain6 = MotionEvent.obtain(motionEvent);
                                    obtain6.offsetLocation(-maskPaintView.getX(), -maskPaintView.getY());
                                    this.maskPaintView.onTouch(obtain6);
                                    obtain6.recycle();
                                    return true;
                                } else {
                                    VelocityTracker velocityTracker2 = this.velocityTracker;
                                    if (velocityTracker2 != null) {
                                        velocityTracker2.addMovement(motionEvent);
                                    }
                                    float abs = Math.abs(motionEvent.getX() - this.moveStartX);
                                    float abs2 = Math.abs(motionEvent.getY() - this.dragY);
                                    float f7 = this.touchSlop;
                                    if (abs > f7 || abs2 > f7) {
                                        this.discardTap = true;
                                        hidePressedDrawables();
                                        AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                                        QualityChooseView qualityChooseView = this.qualityChooseView;
                                        if (qualityChooseView != null && qualityChooseView.getVisibility() == 0) {
                                            return true;
                                        }
                                    }
                                    if (this.placeProvider.canScrollAway() && this.currentEditMode == 0 && (i3 = this.sendPhotoType) != 1 && i3 != 11 && this.canDragDown && !this.draggingDown && this.scale == 1.0f && abs2 >= AndroidUtilities.dp(30.0f) && abs2 / 2.0f > abs) {
                                        this.draggingDown = true;
                                        hidePressedDrawables();
                                        this.moving = false;
                                        this.dragY = motionEvent.getY();
                                        if (this.isActionBarVisible && this.containerView.getTag() != null) {
                                            toggleActionBar(false, true);
                                        } else if (this.pickerView.getVisibility() == 0) {
                                            toggleActionBar(false, true);
                                            togglePhotosListView(false, true);
                                            toggleCheckImageView(false);
                                        }
                                        return true;
                                    } else if (this.draggingDown) {
                                        this.translationY = motionEvent.getY() - this.dragY;
                                        this.containerView.invalidate();
                                    } else if (this.invalidCoords || this.animationStartTime != 0) {
                                        this.invalidCoords = false;
                                        this.moveStartX = motionEvent.getX();
                                        this.moveStartY = motionEvent.getY();
                                    } else {
                                        float x2 = this.moveStartX - motionEvent.getX();
                                        float y4 = this.moveStartY - motionEvent.getY();
                                        if (this.moving || this.currentEditMode != 0 || this.sendPhotoType == 11 || ((this.scale == 1.0f && Math.abs(y4) + AndroidUtilities.dp(12.0f) < Math.abs(x2)) || this.scale != 1.0f)) {
                                            if (!this.moving) {
                                                this.moving = true;
                                                this.canDragDown = false;
                                                hidePressedDrawables();
                                                x2 = 0.0f;
                                                y4 = 0.0f;
                                            }
                                            this.moveStartX = motionEvent.getX();
                                            this.moveStartY = motionEvent.getY();
                                            updateMinMax(this.scale);
                                            if ((this.translationX < this.minX && (this.currentEditMode != 0 || !this.rightImage.hasImageSet())) || (this.translationX > this.maxX && (this.currentEditMode != 0 || !this.leftImage.hasImageSet()))) {
                                                x2 /= 3.0f;
                                            }
                                            float f8 = this.maxY;
                                            if (f8 == 0.0f) {
                                                float f9 = this.minY;
                                                if (f9 == 0.0f && this.currentEditMode == 0 && (i2 = this.sendPhotoType) != 1 && i2 != 11) {
                                                    float f10 = this.translationY - y4;
                                                    if (f10 < f9) {
                                                        this.translationY = f9;
                                                    } else {
                                                        if (f10 > f8) {
                                                            this.translationY = f8;
                                                        }
                                                        f = y4;
                                                    }
                                                    this.translationX -= x2;
                                                    if (this.scale == 1.0f || this.currentEditMode != 0 || this.sendPhotoType == 11) {
                                                        this.translationY -= f;
                                                    }
                                                }
                                            }
                                            float f11 = this.translationY;
                                            if (f11 < this.minY || f11 > f8) {
                                                f = y4 / 3.0f;
                                                this.translationX -= x2;
                                                if (this.scale == 1.0f) {
                                                }
                                                this.translationY -= f;
                                            }
                                            f = y4;
                                            this.translationX -= x2;
                                            if (this.scale == 1.0f) {
                                            }
                                            this.translationY -= f;
                                        }
                                    }
                                }
                            }
                            invalidateBlur();
                            this.containerView.invalidate();
                        } else if (motionEvent.getActionMasked() == 3 || motionEvent.getActionMasked() == 1 || motionEvent.getActionMasked() == 6) {
                            hidePressedDrawables();
                            AndroidUtilities.cancelRunOnUIThread(this.longPressRunnable);
                            if (this.paintViewTouched == 1) {
                                LPhotoPaintView lPhotoPaintView2 = this.photoPaintView;
                                if (lPhotoPaintView2 != null) {
                                    View view3 = lPhotoPaintView2.getView();
                                    MotionEvent obtain7 = MotionEvent.obtain(motionEvent);
                                    obtain7.offsetLocation(-view3.getX(), -view3.getY());
                                    this.photoPaintView.onTouch(obtain7);
                                    obtain7.recycle();
                                }
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                return true;
                            } else if (this.maskPaintViewTouched == 1) {
                                MaskPaintView maskPaintView3 = this.maskPaintView;
                                if (maskPaintView3 != null) {
                                    MotionEvent obtain8 = MotionEvent.obtain(motionEvent);
                                    obtain8.offsetLocation(-maskPaintView3.getX(), -maskPaintView3.getY());
                                    this.maskPaintView.onTouch(obtain8);
                                    obtain8.recycle();
                                }
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                return true;
                            } else {
                                this.paintViewTouched = 0;
                                this.maskPaintViewTouched = 0;
                                if (this.zooming) {
                                    this.invalidCoords = true;
                                    int i6 = this.sendPhotoType;
                                    float f12 = i6 == 11 ? 10.0f : 3.0f;
                                    float f13 = i6 == 11 ? 0.33f : 1.0f;
                                    float f14 = this.scale;
                                    if (f14 < f13) {
                                        updateMinMax(f13);
                                        animateTo(f13, 0.0f, 0.0f, true);
                                    } else if (f14 > f12) {
                                        float containerViewWidth = (this.pinchCenterX - (getContainerViewWidth() / 2)) - (((this.pinchCenterX - (getContainerViewWidth() / 2)) - this.pinchStartX) * (f12 / this.pinchStartScale));
                                        float containerViewHeight3 = (this.pinchCenterY - (getContainerViewHeight() / 2)) - (((this.pinchCenterY - (getContainerViewHeight() / 2)) - this.pinchStartY) * (f12 / this.pinchStartScale));
                                        updateMinMax(f12);
                                        float f15 = this.minX;
                                        if (containerViewWidth >= f15) {
                                            f15 = this.maxX;
                                        }
                                        containerViewWidth = f15;
                                        float f16 = this.minY;
                                        if (containerViewHeight3 >= f16) {
                                            f16 = this.maxY;
                                        }
                                        containerViewHeight3 = f16;
                                        animateTo(f12, containerViewWidth, containerViewHeight3, true);
                                    } else {
                                        checkMinMax(true);
                                        if (this.currentEditMode == 3) {
                                            float f17 = this.translationX;
                                            float f18 = this.translationY;
                                            updateMinMax(this.scale);
                                            float f19 = this.translationX;
                                            float f20 = this.minX;
                                            if (f19 >= f20) {
                                                f20 = this.maxX;
                                            }
                                            f17 = f20;
                                            float f21 = this.translationY;
                                            float f22 = this.minY;
                                            if (f21 >= f22) {
                                                f22 = this.maxY;
                                            }
                                            f18 = f22;
                                            animateTo(this.scale, f17, f18, false);
                                        }
                                    }
                                    this.zooming = false;
                                    this.moving = false;
                                } else if (this.draggingDown) {
                                    if (Math.abs(this.dragY - motionEvent.getY()) <= getContainerViewHeight() / 6.0f) {
                                        if (this.pickerView.getVisibility() == 0) {
                                            toggleActionBar(true, true);
                                            toggleCheckImageView(true);
                                        }
                                        animateTo(1.0f, 0.0f, 0.0f, false);
                                    } else if (!enableSwipeToPiP() || this.dragY - motionEvent.getY() <= 0.0f) {
                                        closePhoto(true, false);
                                    } else {
                                        switchToPip(true);
                                    }
                                    this.draggingDown = false;
                                } else if (this.moving) {
                                    float f23 = this.translationX;
                                    float f24 = this.translationY;
                                    updateMinMax(this.scale);
                                    this.moving = false;
                                    this.canDragDown = true;
                                    VelocityTracker velocityTracker3 = this.velocityTracker;
                                    if (velocityTracker3 != null && this.scale == 1.0f) {
                                        velocityTracker3.computeCurrentVelocity(1000);
                                        f = this.velocityTracker.getXVelocity();
                                    }
                                    if (this.currentEditMode == 0 && (i = this.sendPhotoType) != 1 && i != 11) {
                                        if ((this.translationX < this.minX - (getContainerViewWidth() / 3) || f < (-AndroidUtilities.dp(650.0f))) && this.rightImage.hasImageSet()) {
                                            goToNext();
                                            return true;
                                        } else if ((this.translationX > this.maxX + (getContainerViewWidth() / 3) || f > AndroidUtilities.dp(650.0f)) && this.leftImage.hasImageSet()) {
                                            goToPrev();
                                            return true;
                                        }
                                    }
                                    float f25 = this.translationX;
                                    float f26 = this.minX;
                                    if (f25 >= f26) {
                                        f26 = this.maxX;
                                    }
                                    f23 = f26;
                                    float f27 = this.translationY;
                                    float f28 = this.minY;
                                    if (f27 >= f28) {
                                        f28 = this.maxY;
                                    }
                                    f24 = f28;
                                    animateTo(this.scale, f23, f24, false);
                                }
                            }
                        }
                    }
                    return false;
                } else if (motionEvent.getAction() == 1) {
                    closeCaptionEnter(true);
                }
            }
            return true;
        }
        return false;
    }

    public void onUserLeaveHint() {
        if (this.pipItem.getAlpha() == 1.0f && AndroidUtilities.checkInlinePermissions(this.parentActivity) && !PipVideoOverlay.isVisible() && this.isPlaying) {
            if (!this.isEmbedVideo) {
                this.pipVideoOverlayAnimateFlag = false;
                switchToPip(false);
                return;
            }
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView == null || photoViewerWebView.isInAppOnly() || !this.photoViewerWebView.openInPip()) {
                return;
            }
            this.pipVideoOverlayAnimateFlag = false;
            if (PipInstance != null) {
                PipInstance.destroyPhotoViewer();
            }
            this.isInline = true;
            PipInstance = Instance;
            Instance = null;
            this.isVisible = false;
            PlaceProviderObject placeProviderObject = this.currentPlaceObject;
            if (placeProviderObject != null && !placeProviderObject.imageReceiver.getVisible()) {
                this.currentPlaceObject.imageReceiver.setVisible(true, true);
            }
            this.clippingImageProgress = 1.0f;
            this.containerView.invalidate();
            dismissInternal();
        }
    }

    public void openCurrentPhotoInPaintModeForSelect() {
        final File file;
        final MessageObject messageObject;
        final boolean z;
        final boolean z2;
        final boolean z3;
        ActionBarToggleParams enableStatusBarAnimation;
        if (canSendMediaToParentChatActivity()) {
            MessageObject messageObject2 = this.currentMessageObject;
            File file2 = null;
            if (messageObject2 != null) {
                boolean z4 = messageObject2.canEditMedia() && !this.currentMessageObject.isDocument();
                boolean z5 = z4 && this.currentMessageObject.isOutOwner();
                boolean isVideo = this.currentMessageObject.isVideo();
                if (!TextUtils.isEmpty(this.currentMessageObject.messageOwner.attachPath)) {
                    File file3 = new File(this.currentMessageObject.messageOwner.attachPath);
                    if (file3.exists()) {
                        file2 = file3;
                    }
                }
                if (file2 == null) {
                    file2 = FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner);
                }
                messageObject = messageObject2;
                file = file2;
                z2 = z4;
                z3 = z5;
                z = isVideo;
            } else {
                file = null;
                messageObject = null;
                z = false;
                z2 = false;
                z3 = false;
            }
            if (file == null || !file.exists()) {
                showDownloadAlert();
                return;
            }
            this.savedState = new SavedState(this.currentIndex, new ArrayList(this.imagesArr), this.placeProvider);
            toggleActionBar(false, true, new ActionBarToggleParams().enableStatusBarAnimation(false));
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda130
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openCurrentPhotoInPaintModeForSelect$97(file, z, messageObject, z2, z3);
                }
            }, enableStatusBarAnimation.animationDuration);
        }
    }

    public void pauseVideoOrWeb() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.pause();
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.pauseVideo();
        }
    }

    public void playOrStopAnimatedStickers(boolean z) {
        RLottieDrawable lottieAnimation;
        ArrayList arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                VideoEditedInfo.MediaEntity mediaEntity = (VideoEditedInfo.MediaEntity) this.editState.mediaEntities.get(i);
                if (mediaEntity.type == 0 && (mediaEntity.subType & 1) != 0) {
                    View view = mediaEntity.view;
                    if ((view instanceof BackupImageView) && (lottieAnimation = ((BackupImageView) view).getImageReceiver().getLottieAnimation()) != null) {
                        if (z) {
                            lottieAnimation.start();
                        } else {
                            lottieAnimation.stop();
                        }
                    }
                }
            }
        }
    }

    public void playVideoOrWeb() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.play();
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.playVideo();
        }
    }

    private CharSequence postProcessTranslated(MessageObject messageObject) {
        boolean isOutOwner;
        int duration;
        int i;
        if (messageObject == null || messageObject.messageOwner == null) {
            return "";
        }
        Spannable replaceAnimatedEmoji = MessageObject.replaceAnimatedEmoji(Emoji.replaceEmoji((CharSequence) new SpannableStringBuilder(messageObject.messageOwner.translatedText.text), Theme.chat_msgTextPaint.getFontMetricsInt(), AndroidUtilities.dp(20.0f), false), messageObject.messageOwner.translatedText.entities, Theme.chat_msgTextPaint.getFontMetricsInt(), false);
        if (MessageObject.containsUrls(replaceAnimatedEmoji)) {
            try {
                AndroidUtilities.addLinksSafe(replaceAnimatedEmoji, 5, false, true);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        MessageObject.addUrlsByPattern(messageObject.isOutOwner(), replaceAnimatedEmoji, true, 0, 0, true);
        MessageObject.addEntitiesToText(replaceAnimatedEmoji, messageObject.messageOwner.translatedText.entities, messageObject.isOutOwner(), true, true, true);
        if (!messageObject.isVideo()) {
            if (messageObject.isMusic() || messageObject.isVoice()) {
                isOutOwner = messageObject.isOutOwner();
                duration = (int) messageObject.getDuration();
                i = 4;
            }
            return replaceAnimatedEmoji;
        }
        isOutOwner = messageObject.isOutOwner();
        duration = (int) messageObject.getDuration();
        i = 3;
        MessageObject.addUrlsByPattern(isOutOwner, replaceAnimatedEmoji, true, i, duration, false);
        return replaceAnimatedEmoji;
    }

    private void preparePlayer(ArrayList arrayList, Uri uri, boolean z, boolean z2) {
        preparePlayer(arrayList, uri, z, z2, null);
    }

    private void preparePlayer(ArrayList arrayList, Uri uri, boolean z, boolean z2, MediaController.SavedFilterState savedFilterState) {
        boolean z3;
        PageBlocksAdapter pageBlocksAdapter;
        if (!z2) {
            this.currentPlayingVideoFile = uri;
            this.currentPlayingVideoQualityFiles = arrayList;
        }
        if (this.parentActivity == null) {
            return;
        }
        this.streamingAlertShown = false;
        this.startedPlayTime = SystemClock.elapsedRealtime();
        this.currentVideoFinishedLoading = false;
        this.lastBufferedPositionCheck = 0L;
        this.firstAnimationDelay = true;
        this.inPreview = z2;
        releasePlayer(false);
        SavedVideoPosition savedVideoPosition = null;
        if (this.imagesArrLocals.isEmpty()) {
            createVideoTextureView(null);
        }
        if (Build.VERSION.SDK_INT >= 21 && this.textureImageView == null) {
            ImageView imageView = new ImageView(this.parentActivity);
            this.textureImageView = imageView;
            imageView.setBackgroundColor(-65536);
            this.textureImageView.setPivotX(0.0f);
            this.textureImageView.setPivotY(0.0f);
            this.textureImageView.setVisibility(4);
            this.containerView.addView(this.textureImageView);
        }
        checkFullscreenButton();
        if (this.orientationEventListener == null) {
            OrientationEventListener orientationEventListener = new OrientationEventListener(ApplicationLoader.applicationContext) { // from class: org.telegram.ui.PhotoViewer.48
                {
                    PhotoViewer.this = this;
                }

                @Override // android.view.OrientationEventListener
                public void onOrientationChanged(int i) {
                    if (PhotoViewer.this.orientationEventListener == null || PhotoViewer.this.aspectRatioFrameLayout == null || PhotoViewer.this.aspectRatioFrameLayout.getVisibility() != 0 || PhotoViewer.this.parentActivity == null || PhotoViewer.this.fullscreenedByButton == 0) {
                        return;
                    }
                    if (PhotoViewer.this.fullscreenedByButton != 1) {
                        if (i <= 0 || (i < 330 && i > 30)) {
                            if (!PhotoViewer.this.wasRotated || i < 240 || i > 300) {
                                return;
                            }
                            PhotoViewer.this.parentActivity.setRequestedOrientation(PhotoViewer.this.prevOrientation);
                            PhotoViewer.this.fullscreenedByButton = 0;
                            PhotoViewer.this.wasRotated = false;
                            return;
                        }
                        PhotoViewer.this.wasRotated = true;
                    }
                    if (i < 240 || i > 300) {
                        if (!PhotoViewer.this.wasRotated || i <= 0) {
                            return;
                        }
                        if (i < 330 && i > 30) {
                            return;
                        }
                        PhotoViewer.this.parentActivity.setRequestedOrientation(PhotoViewer.this.prevOrientation);
                        PhotoViewer.this.fullscreenedByButton = 0;
                        PhotoViewer.this.wasRotated = false;
                        return;
                    }
                    PhotoViewer.this.wasRotated = true;
                }
            };
            this.orientationEventListener = orientationEventListener;
            if (orientationEventListener.canDetectOrientation()) {
                this.orientationEventListener.enable();
            } else {
                this.orientationEventListener.disable();
                this.orientationEventListener = null;
            }
        }
        this.textureUploaded = false;
        this.videoSizeSet = false;
        this.videoCrossfadeStarted = false;
        this.playerWasReady = false;
        this.playerWasPlaying = false;
        this.captureFrameReadyAtTime = -1L;
        this.captureFrameAtTime = -1L;
        this.needCaptureFrameReadyAtTime = -1L;
        this.firstFrameRendered = false;
        if (this.videoPlayer == null) {
            VideoPlayer videoPlayer = this.injectingVideoPlayer;
            if (videoPlayer != null) {
                this.videoPlayer = videoPlayer;
                this.injectingVideoPlayer = null;
                this.playerInjected = true;
                updatePlayerState(videoPlayer.getPlayWhenReady(), this.videoPlayer.getPlaybackState());
                z3 = false;
            } else {
                VideoPlayer videoPlayer2 = new VideoPlayer() { // from class: org.telegram.ui.PhotoViewer.49
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer, com.google.android.exoplayer2.Player.Listener
                    public void onRenderedFirstFrame() {
                        super.onRenderedFirstFrame();
                        PhotoViewer.this.firstFrameRendered = true;
                        if (PhotoViewer.this.usedSurfaceView) {
                            PhotoViewer.this.containerView.invalidate();
                        }
                        PhotoViewer.this.updateQualityItems();
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void pause() {
                        super.pause();
                        if (PhotoViewer.this.currentEditMode == 0) {
                            PhotoViewer.this.playOrStopAnimatedStickers(false);
                        }
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void play() {
                        super.play();
                        PhotoViewer.this.playOrStopAnimatedStickers(true);
                    }

                    @Override // org.telegram.ui.Components.VideoPlayer
                    public void seekTo(long j) {
                        super.seekTo(j);
                        if (PhotoViewer.this.isCurrentVideo) {
                            PhotoViewer.this.seekAnimatedStickersTo(j);
                        }
                    }
                };
                this.videoPlayer = videoPlayer2;
                videoPlayer2.setOnQualityChangeListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda13
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.updateQualityItems();
                    }
                });
                z3 = true;
            }
            TextureView textureView = this.videoTextureView;
            if (textureView != null) {
                this.videoPlayer.setTextureView(textureView);
            } else {
                SurfaceView surfaceView = this.videoSurfaceView;
                if (surfaceView != null) {
                    this.videoPlayer.setSurfaceView(surfaceView);
                }
            }
            FirstFrameView firstFrameView = this.firstFrameView;
            if (firstFrameView != null) {
                firstFrameView.clear();
            }
            this.videoPlayer.setDelegate(new 50());
        } else {
            z3 = false;
        }
        if (!this.imagesArrLocals.isEmpty()) {
            createVideoTextureView(savedFilterState);
        }
        this.videoCrossfadeAlpha = 0.0f;
        TextureView textureView2 = this.videoTextureView;
        if (textureView2 != null) {
            textureView2.setAlpha(0.0f);
        }
        SurfaceView surfaceView2 = this.videoSurfaceView;
        if (surfaceView2 != null) {
            surfaceView2.setVisibility(4);
        }
        PaintingOverlay paintingOverlay = this.paintingOverlay;
        if (paintingOverlay != null) {
            paintingOverlay.setAlpha(this.videoCrossfadeAlpha);
        }
        this.shouldSavePositionForCurrentVideo = null;
        this.shouldSavePositionForCurrentVideoShortTerm = null;
        this.lastSaveTime = 0L;
        if (z3) {
            this.seekToProgressPending = this.seekToProgressPending2;
            this.videoPlayerSeekbar.setProgress(0.0f);
            VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
            videoTimelinePlayView.setProgress(videoTimelinePlayView.getLeftProgress());
            this.videoPlayerSeekbar.setBufferedProgress(0.0f);
            MessageObject messageObject = this.currentMessageObject;
            if (messageObject != null) {
                int duration = (int) messageObject.getDuration();
                String fileName = this.currentMessageObject.getFileName();
                if (!TextUtils.isEmpty(fileName)) {
                    if (duration >= 600) {
                        if (this.currentMessageObject.forceSeekTo < 0.0f) {
                            float f = ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).getFloat(fileName, -1.0f);
                            if (f > 0.0f && f < 0.999f) {
                                this.currentMessageObject.forceSeekTo = f;
                                this.videoPlayerSeekbar.setProgress(f);
                            }
                        }
                        this.shouldSavePositionForCurrentVideo = fileName;
                    } else if (duration >= 10) {
                        for (int size = this.savedVideoPositions.size() - 1; size >= 0; size--) {
                            SavedVideoPosition savedVideoPosition2 = (SavedVideoPosition) this.savedVideoPositions.valueAt(size);
                            if (savedVideoPosition2.timestamp < SystemClock.elapsedRealtime() - 5000) {
                                this.savedVideoPositions.removeAt(size);
                            } else if (savedVideoPosition == null && ((String) this.savedVideoPositions.keyAt(size)).equals(fileName)) {
                                savedVideoPosition = savedVideoPosition2;
                            }
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2 != null && messageObject2.forceSeekTo < 0.0f && savedVideoPosition != null) {
                            float f2 = savedVideoPosition.position;
                            if (f2 > 0.0f && f2 < 0.999f) {
                                messageObject2.forceSeekTo = f2;
                                this.videoPlayerSeekbar.setProgress(f2);
                            }
                        }
                        this.shouldSavePositionForCurrentVideoShortTerm = fileName;
                    }
                }
            }
            if (arrayList != null) {
                this.videoPlayer.preparePlayer(arrayList, VideoPlayer.getSavedQuality(arrayList, this.currentMessageObject));
            } else {
                this.videoPlayer.preparePlayer(uri, "other");
            }
            updateQualityItems();
            this.videoPlayer.setPlayWhenReady(z);
        }
        MessageObject messageObject3 = this.currentMessageObject;
        boolean z4 = (messageObject3 != null && messageObject3.getDuration() <= 30.0d) || ((pageBlocksAdapter = this.pageBlocksAdapter) != null && pageBlocksAdapter.isHardwarePlayer(this.currentIndex));
        this.playerLooping = z4;
        this.videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(z4);
        this.videoPlayer.setLooping(this.playerLooping);
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null) {
            float f3 = messageObject4.forceSeekTo;
            if (f3 >= 0.0f) {
                this.seekToProgressPending = f3;
                messageObject4.forceSeekTo = -1.0f;
            }
        }
        TLRPC.BotInlineResult botInlineResult = this.currentBotInlineResult;
        if (botInlineResult == null || !(botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) {
            this.bottomLayout.setPadding(0, 0, 0, 0);
        } else {
            this.bottomLayout.setVisibility(0);
            this.bottomLayout.setPadding(0, 0, AndroidUtilities.dp(84.0f), 0);
            this.pickerView.setVisibility(8);
        }
        if (this.pageBlocksAdapter != null) {
            this.bottomLayout.setVisibility(0);
        }
        PageBlocksAdapter pageBlocksAdapter2 = this.pageBlocksAdapter;
        if (pageBlocksAdapter2 == null || !pageBlocksAdapter2.isHardwarePlayer(this.currentIndex) || this.pageBlocksAdapter.isVideo(this.currentIndex)) {
            setVideoPlayerControlVisible(!this.isCurrentVideo, true);
        } else {
            setVideoPlayerControlVisible(false, true);
        }
        if (!this.isCurrentVideo) {
            scheduleActionBarHide(this.playerAutoStarted ? 3000 : 1000);
        }
        if (this.currentMessageObject != null) {
            this.videoPlayer.setPlaybackSpeed(this.currentVideoSpeed);
        }
        this.inPreview = z2;
    }

    public void prepareRealEncoderBitrate() {
        if (this.bitrate == 0 || this.sendPhotoType == 1) {
            return;
        }
        Size calculateResultVideoSize = calculateResultVideoSize();
        if (calculateResultVideoSize.getWidth() == this.originalWidth && calculateResultVideoSize.getHeight() == this.originalHeight) {
            MediaController.extractRealEncoderBitrate(calculateResultVideoSize.getWidth(), calculateResultVideoSize.getHeight(), this.originalBitrate, false);
            return;
        }
        MediaController.extractRealEncoderBitrate(calculateResultVideoSize.getWidth(), calculateResultVideoSize.getHeight(), MediaController.makeVideoBitrate(this.originalHeight, this.originalWidth, this.originalBitrate, calculateResultVideoSize.getHeight(), calculateResultVideoSize.getWidth()), false);
    }

    private void processOpenVideo(String str, boolean z, float f, float f2, int i) {
        if (this.currentLoadingVideoRunnable != null) {
            Utilities.globalQueue.cancelRunnable(this.currentLoadingVideoRunnable);
            this.currentLoadingVideoRunnable = null;
        }
        this.videoTimelineView.setVideoPath(str, f, f2);
        this.videoPreviewMessageObject = null;
        boolean z2 = true;
        if (!z && this.sendPhotoType != 1) {
            z2 = false;
        }
        this.muteVideo = z2;
        this.compressionsCount = -1;
        this.rotationValue = 0;
        this.videoFramerate = 25;
        this.originalSize = new File(str).length();
        DispatchQueue dispatchQueue = Utilities.globalQueue;
        79 r6 = new 79(str, i);
        this.currentLoadingVideoRunnable = r6;
        dispatchQueue.postRunnable(r6);
    }

    private void redraw(final int i) {
        FrameLayoutDrawer frameLayoutDrawer;
        if (i >= 6 || (frameLayoutDrawer = this.containerView) == null) {
            return;
        }
        frameLayoutDrawer.invalidate();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda27
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$redraw$105(i);
            }
        }, 100L);
    }

    public void releasePlayer(boolean z) {
        this.usedSurfaceView = false;
        if (this.videoPlayer != null) {
            cancelVideoPlayRunnable();
            AndroidUtilities.cancelRunOnUIThread(this.setLoadingRunnable);
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (this.shouldSavePositionForCurrentVideoShortTerm != null) {
                this.savedVideoPositions.put(this.shouldSavePositionForCurrentVideoShortTerm, new SavedVideoPosition(((float) this.videoPlayer.getCurrentPosition()) / ((float) this.videoPlayer.getDuration()), SystemClock.elapsedRealtime()));
            }
            this.videoPlayer.releasePlayer(true);
            this.videoPlayer = null;
        } else {
            this.playerWasPlaying = false;
        }
        if (this.photoViewerWebView != null) {
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (this.shouldSavePositionForCurrentVideoShortTerm != null) {
                this.savedVideoPositions.put(this.shouldSavePositionForCurrentVideoShortTerm, new SavedVideoPosition(((float) getCurrentVideoPosition()) / ((float) getVideoDuration()), SystemClock.elapsedRealtime()));
            }
        }
        OrientationEventListener orientationEventListener = this.orientationEventListener;
        if (orientationEventListener != null) {
            orientationEventListener.disable();
            this.orientationEventListener = null;
        }
        this.videoPreviewFrame.close();
        toggleMiniProgress(false, false);
        this.pipAvailable = false;
        this.playerInjected = false;
        if (this.pipItem.isEnabled()) {
            this.pipItem.setEnabled(false);
            this.pipItem.animate().alpha(0.5f).setDuration(175L).withEndAction(null).start();
        }
        if (this.keepScreenOnFlagSet) {
            try {
                this.parentActivity.getWindow().clearFlags(128);
                this.keepScreenOnFlagSet = false;
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
        if (aspectRatioFrameLayout != null) {
            try {
                this.containerView.removeView(aspectRatioFrameLayout);
            } catch (Throwable unused) {
            }
            this.aspectRatioFrameLayout = null;
        }
        cancelFlashAnimations();
        this.flashView = null;
        TextureView textureView = this.videoTextureView;
        if (textureView != null) {
            if (textureView instanceof VideoEditTextureView) {
                ((VideoEditTextureView) textureView).release();
            }
            this.videoTextureView = null;
        }
        this.blurManager.resetBitmap();
        if (this.videoSurfaceView != null) {
            this.videoSurfaceView = null;
        }
        if (this.isPlaying) {
            this.isPlaying = false;
            AndroidUtilities.cancelRunOnUIThread(this.updateProgressRunnable);
        }
        if (!z && !this.inPreview && !this.requestingPreview) {
            setVideoPlayerControlVisible(false, true);
        }
        this.photoProgressViews[0].resetAlphas();
    }

    private void removeObservers() {
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoadFailed);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.customStickerCreated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileLoadProgressChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.mediaCountDidLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.mediaDidLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.dialogPhotosUpdate);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.filePreparingFailed);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        ConnectionsManager.getInstance(this.currentAccount).cancelRequestsForGuid(this.classGuid);
    }

    private void replacePressed() {
        sendPressed(false, 0, true, false, false);
    }

    public void requestAdjust() {
        this.windowLayoutParams.softInputMode = NotificationCenter.onDownloadingFilesChanged;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void requestAdjustToNothing() {
        this.windowLayoutParams.softInputMode = 48;
        try {
            ((WindowManager) this.parentActivity.getSystemService("window")).updateViewLayout(this.windowView, this.windowLayoutParams);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:108:0x0155, code lost:
        if (r12 == 2) goto L26;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void requestVideoPreview(int i) {
        if (this.videoPreviewMessageObject != null) {
            MediaController.getInstance().cancelVideoConvert(this.videoPreviewMessageObject);
        }
        boolean z = this.requestingPreview && !this.tryStartRequestPreviewOnFinish;
        this.requestingPreview = false;
        this.loadInitialVideo = false;
        this.progressView.setVisibility(4);
        if (i != 1) {
            this.tryStartRequestPreviewOnFinish = false;
            this.photoProgressViews[0].setBackgroundState(3, false, true);
        } else if (this.resultHeight == this.originalHeight && this.resultWidth == this.originalWidth) {
            this.tryStartRequestPreviewOnFinish = false;
            PhotoProgressView photoProgressView = this.photoProgressViews[0];
            photoProgressView.setProgress(0.0f, photoProgressView.backgroundState == 0 || this.photoProgressViews[0].previousBackgroundState == 0);
            this.photoProgressViews[0].setBackgroundState(3, false, true);
            if (z) {
                this.loadInitialVideo = true;
            }
            preparePlayer(this.currentPlayingVideoQualityFiles, this.currentPlayingVideoFile, false, false, this.editState.savedFilterState);
            this.videoPlayer.seekTo(this.videoTimelineView.getLeftProgress() * this.videoDuration);
        } else {
            releasePlayer(false);
            if (this.videoPreviewMessageObject == null) {
                TLRPC.TL_message tL_message = new TLRPC.TL_message();
                tL_message.id = 0;
                tL_message.message = "";
                tL_message.media = new TLRPC.TL_messageMediaEmpty();
                tL_message.action = new TLRPC.TL_messageActionEmpty();
                tL_message.dialog_id = this.currentDialogId;
                MessageObject messageObject = new MessageObject(UserConfig.selectedAccount, tL_message, false, false);
                this.videoPreviewMessageObject = messageObject;
                messageObject.messageOwner.attachPath = new File(FileLoader.getDirectory(4), "video_preview.mp4").getAbsolutePath();
                this.videoPreviewMessageObject.videoEditedInfo = new VideoEditedInfo();
                VideoEditedInfo videoEditedInfo = this.videoPreviewMessageObject.videoEditedInfo;
                videoEditedInfo.rotationValue = this.rotationValue;
                videoEditedInfo.originalWidth = this.originalWidth;
                this.videoPreviewMessageObject.videoEditedInfo.originalHeight = this.originalHeight;
                VideoEditedInfo videoEditedInfo2 = this.videoPreviewMessageObject.videoEditedInfo;
                videoEditedInfo2.framerate = this.videoFramerate;
                videoEditedInfo2.originalPath = this.currentPlayingVideoFile.getPath();
            }
            VideoEditedInfo videoEditedInfo3 = this.videoPreviewMessageObject.videoEditedInfo;
            long j = this.startTime;
            videoEditedInfo3.startTime = j;
            long j2 = this.endTime;
            videoEditedInfo3.endTime = j2;
            if (j == -1) {
                j = 0;
            }
            if (j2 == -1) {
                j2 = this.videoDuration * 1000.0f;
            }
            if (j2 - j > 5000000) {
                videoEditedInfo3.endTime = j + 5000000;
            }
            videoEditedInfo3.bitrate = this.bitrate;
            this.videoPreviewMessageObject.videoEditedInfo.resultWidth = this.resultWidth;
            this.videoPreviewMessageObject.videoEditedInfo.resultHeight = this.resultHeight;
            VideoEditedInfo videoEditedInfo4 = this.videoPreviewMessageObject.videoEditedInfo;
            videoEditedInfo4.needUpdateProgress = true;
            videoEditedInfo4.originalDuration = this.videoDuration * 1000.0f;
            if (!MediaController.getInstance().scheduleVideoConvert(this.videoPreviewMessageObject, true, true, true)) {
                this.tryStartRequestPreviewOnFinish = true;
            }
            this.requestingPreview = true;
            PhotoProgressView photoProgressView2 = this.photoProgressViews[0];
            photoProgressView2.setProgress(0.0f, photoProgressView2.backgroundState == 0 || this.photoProgressViews[0].previousBackgroundState == 0);
            this.photoProgressViews[0].setBackgroundState(0, false, true);
        }
        this.containerView.invalidate();
    }

    private void resetIndexForDeferredImageLoading() {
        Object mark = this.centerImage.getMark();
        if (mark == null || !mark.equals(1)) {
            return;
        }
        setIndexToImage(this.centerImage, this.currentIndex, null);
    }

    public float scale1() {
        return scale1(true);
    }

    public float scale1(boolean z) {
        int i;
        if (this.sendPhotoType == 11) {
            int containerViewWidth = getContainerViewWidth();
            if (containerViewWidth == 0) {
                containerViewWidth = AndroidUtilities.displaySize.x;
            }
            float dp = ((containerViewWidth - AndroidUtilities.dp(20.0f)) + 1) / containerViewWidth;
            if (z) {
                int bitmapWidth = this.centerImage.getBitmapWidth();
                int bitmapHeight = this.centerImage.getBitmapHeight();
                if ((bitmapWidth <= 1 || bitmapHeight <= 1) && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                    Object obj = this.imagesArrLocals.get(this.currentIndex);
                    if (obj instanceof MediaController.PhotoEntry) {
                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                        if ((photoEntry.orientation / 90) % 2 != 0) {
                            bitmapWidth = photoEntry.height;
                            bitmapHeight = photoEntry.width;
                        } else {
                            bitmapWidth = photoEntry.width;
                            bitmapHeight = photoEntry.height;
                        }
                    }
                }
                return (bitmapWidth <= 1 || bitmapHeight <= 1 || bitmapWidth <= bitmapHeight) ? dp : dp * (bitmapWidth / bitmapHeight);
            }
            return dp;
        }
        return 1.0f;
    }

    public void scheduleActionBarHide() {
        scheduleActionBarHide(3000);
    }

    private void scheduleActionBarHide(int i) {
        if (isAccessibilityEnabled()) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored()) {
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            AndroidUtilities.runOnUIThread(this.hideActionBarRunnable, i);
        }
    }

    public void seekAnimatedStickersTo(long j) {
        RLottieDrawable lottieAnimation;
        ArrayList arrayList = this.editState.mediaEntities;
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                VideoEditedInfo.MediaEntity mediaEntity = (VideoEditedInfo.MediaEntity) this.editState.mediaEntities.get(i);
                if (mediaEntity.type == 0 && (mediaEntity.subType & 1) != 0) {
                    View view = mediaEntity.view;
                    if ((view instanceof BackupImageView) && (lottieAnimation = ((BackupImageView) view).getImageReceiver().getLottieAnimation()) != null) {
                        long j2 = this.startTime;
                        lottieAnimation.setProgressMs(j - (j2 > 0 ? j2 / 1000 : 0L));
                    }
                }
            }
        }
    }

    public void seekVideoOrWebTo(long j) {
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView == null || !photoViewerWebView.isControllable()) {
            VideoPlayer videoPlayer = this.videoPlayer;
            if (videoPlayer != null) {
                videoPlayer.seekTo(j);
            }
        } else {
            this.photoViewerWebView.seekTo(j);
        }
        updateVideoPlayerTime();
    }

    private void seekVideoOrWebToProgress(float f) {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.seekTo(f * ((float) videoPlayer.getDuration()));
            return;
        }
        PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
        if (photoViewerWebView != null) {
            photoViewerWebView.seekTo(f * photoViewerWebView.getVideoDuration());
        }
    }

    public int selectCompression() {
        if (this.originalSize > 1048576000) {
            return this.compressionsCount - 1;
        }
        SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
        int i = this.compressionsCount;
        while (i < 5) {
            int i2 = globalMainSettings.getInt(String.format(Locale.US, "compress_video_%d", Integer.valueOf(i)), -1);
            if (i2 >= 0) {
                return Math.min(i2, 2);
            }
            i++;
        }
        return Math.min(2, Math.round(DownloadController.getInstance(this.currentAccount).getMaxVideoBitrate() / (100.0f / i)) - 1);
    }

    public void sendPressed(boolean z, int i) {
        sendPressed(z, i, false, false, false);
    }

    private void sendPressed(final boolean z, final int i, final boolean z2, final boolean z3, boolean z4) {
        String str;
        ArrayList arrayList;
        String str2;
        Object obj;
        MediaController.CropState cropState;
        int i2;
        ChatActivity chatActivity;
        ImageUpdater.AvatarFor avatarFor;
        String str3;
        long j;
        int i3;
        String str4;
        TextureView textureView;
        PhotoViewer photoViewer = this;
        int i4 = 8;
        char c = 1;
        if (isCaptionOpen() || photoViewer.placeProvider == null || photoViewer.doneButtonPressed) {
            return;
        }
        VideoEditedInfo videoEditedInfo = null;
        if (photoViewer.sendPhotoType == 1) {
            if (!z4 && (avatarFor = photoViewer.setAvatarFor) != null) {
                TLObject tLObject = avatarFor.object;
                if (tLObject instanceof TLRPC.User) {
                    TLRPC.User user = (TLRPC.User) tLObject;
                    str3 = user.first_name;
                    j = user.id;
                } else {
                    str3 = "";
                    j = 0;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(photoViewer.containerView.getContext());
                builder.setAdditionalHorizontalPadding(AndroidUtilities.dp(8.0f));
                SuggestUserPhotoView suggestUserPhotoView = new SuggestUserPhotoView(photoViewer.containerView.getContext());
                suggestUserPhotoView.setImages(photoViewer.setAvatarFor.object, photoViewer.containerView, photoViewer.photoCropView);
                builder.setTopView(suggestUserPhotoView);
                if (photoViewer.setAvatarFor.type == 1) {
                    builder.setMessage(AndroidUtilities.replaceTags(UserConfig.getInstance(photoViewer.currentAccount).clientUserId == j ? LocaleController.getString("SetUserPhotoSelfAlertMessage", R.string.SetUserPhotoSelfAlertMessage) : LocaleController.formatString("SetUserPhotoAlertMessage", R.string.SetUserPhotoAlertMessage, str3, str3)));
                    if (photoViewer.centerImageIsVideo) {
                        i3 = R.string.SetVideo;
                        str4 = "SetVideo";
                    } else {
                        i3 = R.string.SetPhoto;
                        str4 = "SetPhoto";
                    }
                } else {
                    builder.setMessage(AndroidUtilities.replaceTags(photoViewer.centerImageIsVideo ? LocaleController.formatString("SuggestVideoAlertMessage", R.string.SuggestVideoAlertMessage, str3) : LocaleController.formatString("SuggestPhotoAlertMessage", R.string.SuggestPhotoAlertMessage, str3)));
                    i3 = R.string.SuggestPhotoShort;
                    str4 = "SuggestPhotoShort";
                }
                String string = LocaleController.getString(str4, i3);
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda100
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i5) {
                        PhotoViewer.lambda$sendPressed$54(dialogInterface, i5);
                    }
                });
                builder.setPositiveButton(string, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda101
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i5) {
                        PhotoViewer.this.lambda$sendPressed$55(z, i, z2, z3, dialogInterface, i5);
                    }
                });
                builder.setDialogButtonColorKey(Theme.key_voipgroup_listeningText);
                AlertDialog create = builder.create();
                create.setBlurParams(0.8f, false, true);
                create.setBackgroundColor(ColorUtils.setAlphaComponent(-15461356, NotificationCenter.groupPackUpdated));
                create.show();
                create.setTextColor(Theme.getColor(Theme.key_voipgroup_nameText));
                create.setOnDismissListener(new 33());
                if (!photoViewer.isCurrentVideo || (textureView = photoViewer.videoTextureView) == null) {
                    return;
                }
                try {
                    photoViewer.lastFrameBitmap = textureView.getBitmap();
                    ImageView imageView = photoViewer.lastFrameImageView;
                    if (imageView != null) {
                        photoViewer.aspectRatioFrameLayout.removeView(imageView);
                        photoViewer.lastFrameImageView = null;
                    }
                    ImageView imageView2 = new ImageView(photoViewer.videoTextureView.getContext());
                    photoViewer.lastFrameImageView = imageView2;
                    imageView2.setBackground(new BitmapDrawable(photoViewer.lastFrameBitmap));
                    photoViewer.aspectRatioFrameLayout.addView(photoViewer.lastFrameImageView);
                    return;
                } catch (Throwable th) {
                    Bitmap bitmap = photoViewer.currentBitmap;
                    if (bitmap != null) {
                        bitmap.recycle();
                        photoViewer.currentBitmap = null;
                    }
                    FileLog.e(th);
                    return;
                }
            }
            applyCurrentEditMode();
        }
        if (!z2 && (chatActivity = photoViewer.parentChatActivity) != null) {
            TLRPC.Chat currentChat = chatActivity.getCurrentChat();
            if (photoViewer.parentChatActivity.getCurrentUser() != null || ((ChatObject.isChannel(currentChat) && currentChat.megagroup) || !ChatObject.isChannel(currentChat))) {
                MessagesController.getNotificationsSettings(photoViewer.currentAccount).edit().putBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + photoViewer.parentChatActivity.getDialogId(), !z).commit();
            }
        }
        VideoEditedInfo currentVideoEditedInfo = getCurrentVideoEditedInfo();
        if (!photoViewer.imagesArrLocals.isEmpty() && (i2 = photoViewer.currentIndex) >= 0 && i2 < photoViewer.imagesArrLocals.size()) {
            Object obj2 = photoViewer.imagesArrLocals.get(photoViewer.currentIndex);
            if (obj2 instanceof MediaController.MediaEditState) {
                ((MediaController.MediaEditState) obj2).editedInfo = currentVideoEditedInfo;
            }
        }
        ChatActivity chatActivity2 = photoViewer.parentChatActivity;
        if (chatActivity2 != null && chatActivity2.getCurrentChat() != null) {
            boolean z5 = photoViewer.isCurrentVideo || currentVideoEditedInfo != null;
            if (z5 && !ChatObject.canSendVideo(photoViewer.parentChatActivity.getCurrentChat())) {
                BulletinFactory.of(photoViewer.containerView, photoViewer.resourcesProvider).createErrorBulletin(LocaleController.getString(R.string.GlobalAttachVideoRestricted)).show();
                return;
            } else if (!z5 && !ChatObject.canSendPhoto(photoViewer.parentChatActivity.getCurrentChat())) {
                BulletinFactory.of(photoViewer.containerView, photoViewer.resourcesProvider).createErrorBulletin(LocaleController.getString(R.string.GlobalAttachPhotoRestricted)).show();
                return;
            }
        }
        photoViewer.doneButtonPressed = true;
        if (currentVideoEditedInfo != null) {
            long j2 = ((float) currentVideoEditedInfo.estimatedSize) * 0.9f;
            if ((j2 > FileLoader.DEFAULT_MAX_FILE_SIZE && !UserConfig.getInstance(photoViewer.currentAccount).isPremium()) || j2 > 4194304000L) {
                if (photoViewer.parentAlert != null) {
                    new LimitReachedBottomSheet(photoViewer.parentAlert.getBaseFragment(), photoViewer.parentAlert.getContainer().getContext(), 6, UserConfig.selectedAccount, null).show();
                    return;
                }
                return;
            }
        }
        if (z2) {
            photoViewer.placeProvider.replaceButtonPressed(photoViewer.currentIndex, currentVideoEditedInfo);
        } else {
            if (photoViewer.sendPhotoType == 11) {
                Object obj3 = photoViewer.imagesArrLocals.get(photoViewer.currentIndex);
                if (obj3 instanceof MediaController.PhotoEntry) {
                    final MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj3;
                    Bitmap createBitmap = Bitmap.createBitmap(512, 512, Bitmap.Config.ARGB_8888);
                    Canvas canvas = new Canvas(createBitmap);
                    Path path = new Path();
                    RectF rectF = new RectF();
                    rectF.set(0.0f, 0.0f, createBitmap.getWidth(), createBitmap.getHeight());
                    float width = createBitmap.getWidth() / 8;
                    path.addRoundRect(rectF, width, width, Path.Direction.CW);
                    canvas.clipPath(path);
                    int containerViewWidth = getContainerViewWidth();
                    getContainerViewHeight();
                    float dp = containerViewWidth - AndroidUtilities.dp(20.0f);
                    StickerMakerView stickerMakerView = photoViewer.stickerMakerView;
                    if (stickerMakerView == null || !stickerMakerView.outlineVisible || stickerMakerView.getSourceBitmap() == null) {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        photoViewer.applyTransformToOutline(canvas);
                        photoViewer.centerImage.draw(canvas);
                    } else {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        photoViewer.applyTransformToOutline(canvas);
                        photoViewer.stickerMakerView.drawOutline(canvas, false, null, false);
                        canvas.restore();
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        photoViewer.applyTransformToOutline(canvas);
                        photoViewer.centerImage.draw(canvas);
                        canvas.restore();
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        photoViewer.applyTransformToOutline(canvas);
                        photoViewer.stickerMakerView.drawOutline(canvas, true, null, false);
                    }
                    canvas.restore();
                    if (photoViewer.paintingOverlay != null) {
                        canvas.save();
                        canvas.translate(createBitmap.getWidth() / 2.0f, createBitmap.getHeight() / 2.0f);
                        canvas.scale(createBitmap.getWidth() / dp, createBitmap.getHeight() / dp);
                        photoViewer.applyTransformToOutline(canvas);
                        canvas.translate((-photoViewer.centerImage.getImageWidth()) / 2.0f, (-photoViewer.centerImage.getImageHeight()) / 2.0f);
                        canvas.scale(photoViewer.centerImage.getImageWidth() / photoViewer.paintingOverlay.getMeasuredWidth(), photoViewer.centerImage.getImageHeight() / photoViewer.paintingOverlay.getMeasuredHeight());
                        photoViewer.paintingOverlay.drawChildren = !hasAnimatedMediaEntities();
                        photoViewer.paintingOverlay.draw(canvas);
                        photoViewer.paintingOverlay.drawChildren = true;
                        canvas.restore();
                    }
                    if (hasAnimatedMediaEntities()) {
                        Matrix matrix = new Matrix();
                        matrix.reset();
                        float f = dp / 2.0f;
                        matrix.preTranslate(f, f);
                        photoViewer.applyTransformToMatrix(matrix);
                        matrix.preTranslate((-photoViewer.centerImage.getImageWidth()) / 2.0f, (-photoViewer.centerImage.getImageHeight()) / 2.0f);
                        matrix.preScale(photoViewer.centerImage.getImageWidth(), photoViewer.centerImage.getImageHeight());
                        ArrayList<VideoEditedInfo.MediaEntity> arrayList2 = new ArrayList<>();
                        Iterator<VideoEditedInfo.MediaEntity> it = photoEntry.mediaEntities.iterator();
                        String str5 = null;
                        while (it.hasNext()) {
                            VideoEditedInfo.MediaEntity copy = it.next().copy();
                            float f2 = copy.x;
                            float f3 = copy.y;
                            float f4 = copy.width + f2;
                            float f5 = copy.height + f3;
                            Iterator<VideoEditedInfo.MediaEntity> it2 = it;
                            float[] fArr = new float[i4];
                            fArr[0] = f2;
                            fArr[c] = f3;
                            fArr[2] = f4;
                            fArr[3] = f3;
                            fArr[4] = f4;
                            fArr[5] = f5;
                            fArr[6] = f2;
                            fArr[7] = f5;
                            matrix.mapPoints(fArr);
                            copy.width = ((float) Math.sqrt(Math.pow(fArr[0] - fArr[2], 2.0d) + Math.pow(fArr[c] - fArr[3], 2.0d))) / dp;
                            float sqrt = ((float) Math.sqrt(Math.pow(fArr[0] - fArr[6], 2.0d) + Math.pow(fArr[1] - fArr[7], 2.0d))) / dp;
                            copy.height = sqrt;
                            copy.x = (((fArr[0] + fArr[4]) / 2.0f) / dp) - (copy.width / 2.0f);
                            copy.y = (((fArr[1] + fArr[5]) / 2.0f) / dp) - (sqrt / 2.0f);
                            copy.scale = 1.0f;
                            copy.customTextView = true;
                            if (photoEntry.isCropped && (cropState = photoEntry.cropState) != null) {
                                double d = copy.rotation;
                                double d2 = cropState.transformRotation / 180.0f;
                                Double.isNaN(d2);
                                Double.isNaN(d);
                                copy.rotation = (float) (d - (d2 * 3.141592653589793d));
                            }
                            double d3 = copy.rotation;
                            photoViewer = this;
                            double d4 = photoViewer.rotate / 180.0f;
                            Double.isNaN(d4);
                            Double.isNaN(d3);
                            copy.rotation = (float) (d3 - (d4 * 3.141592653589793d));
                            arrayList2.add(copy);
                            TLRPC.Document document = copy.document;
                            if (document == null || str5 != null) {
                                obj = null;
                            } else {
                                obj = null;
                                str5 = MessageObject.findAnimatedEmojiEmoticon(document, null);
                            }
                            it = it2;
                            i4 = 8;
                            c = 1;
                        }
                        videoEditedInfo = new VideoEditedInfo();
                        videoEditedInfo.isPhoto = true;
                        videoEditedInfo.resultWidth = 512;
                        videoEditedInfo.originalWidth = 512;
                        videoEditedInfo.resultHeight = 512;
                        videoEditedInfo.originalHeight = 512;
                        videoEditedInfo.mediaEntities = arrayList2;
                        long clamp = Utilities.clamp(photoEntry.averageDuration, 2999L, 800L);
                        videoEditedInfo.estimatedDuration = clamp;
                        videoEditedInfo.originalDuration = clamp;
                        videoEditedInfo.bitrate = 200000;
                        videoEditedInfo.framerate = 30;
                        videoEditedInfo.isSticker = true;
                        videoEditedInfo.estimatedSize = 262144L;
                        str = str5;
                    } else {
                        str = null;
                    }
                    float f6 = 512;
                    final String file = FileLoader.getInstance(UserConfig.selectedAccount).getPathToAttach(ImageLoader.scaleAndSaveImage(createBitmap, Bitmap.CompressFormat.WEBP, f6, f6, 100, false, 101, 101), "webp", true).toString();
                    if (videoEditedInfo != null) {
                        videoEditedInfo.originalPath = file;
                    }
                    if (photoViewer.selectedEmojis == null) {
                        photoViewer.selectedEmojis = new ArrayList();
                    }
                    if (photoViewer.selectedEmojis.isEmpty()) {
                        String str6 = photoViewer.stickerMakerView.detectedEmoji;
                        if (str6 == null || Emoji.getEmojiDrawable(str6) == null) {
                            arrayList = photoViewer.selectedEmojis;
                            if (str != null) {
                                arrayList.add(str);
                            } else {
                                str2 = "👍";
                            }
                        } else {
                            arrayList = photoViewer.selectedEmojis;
                            str2 = photoViewer.stickerMakerView.detectedEmoji;
                        }
                        arrayList.add(str2);
                    }
                    photoViewer.doneButtonPressed = false;
                    final VideoEditedInfo videoEditedInfo2 = videoEditedInfo;
                    ContentPreviewViewer.getInstance().showCustomStickerActions(file, videoEditedInfo, photoViewer.stickerMakerView, photoViewer.selectedEmojis, new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.PhotoViewer.34
                        {
                            PhotoViewer.this = this;
                        }

                        private void generateThumb() {
                            ContentPreviewViewer contentPreviewViewer = ContentPreviewViewer.getInstance();
                            if (photoEntry.thumbPath != null) {
                                try {
                                    new File(photoEntry.thumbPath).delete();
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                                photoEntry.thumbPath = null;
                            }
                            Bitmap createBitmap2 = Bitmap.createBitmap(512, 512, Bitmap.Config.ARGB_8888);
                            Canvas canvas2 = new Canvas(createBitmap2);
                            ImageReceiver imageReceiver = contentPreviewViewer.centerImage;
                            if (imageReceiver != null) {
                                imageReceiver.setAlpha(1.0f);
                                contentPreviewViewer.centerImage.setImageCoords(0.0f, 0.0f, createBitmap2.getWidth(), createBitmap2.getHeight());
                                contentPreviewViewer.centerImage.draw(canvas2);
                            }
                            if (contentPreviewViewer.paintingOverlay != null) {
                                canvas2.save();
                                canvas2.scale(createBitmap2.getWidth() / contentPreviewViewer.paintingOverlay.getWidth(), createBitmap2.getHeight() / contentPreviewViewer.paintingOverlay.getHeight());
                                contentPreviewViewer.paintingOverlay.setAlpha(1.0f);
                                Path path2 = new Path();
                                path2.rewind();
                                RectF rectF2 = AndroidUtilities.rectTmp;
                                rectF2.set(0.0f, 0.0f, contentPreviewViewer.paintingOverlay.getWidth(), contentPreviewViewer.paintingOverlay.getHeight());
                                path2.addRoundRect(rectF2, contentPreviewViewer.paintingOverlay.getWidth() / 8.0f, contentPreviewViewer.paintingOverlay.getHeight() / 8.0f, Path.Direction.CW);
                                canvas2.clipPath(path2);
                                contentPreviewViewer.paintingOverlay.draw(canvas2);
                                canvas2.restore();
                            }
                            TLRPC.PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(createBitmap2, PhotoViewer.this.getCompressFormat(), 512.0f, 512.0f, 83, false, 101, 101);
                            photoEntry.thumbPath = FileLoader.getInstance(PhotoViewer.this.currentAccount).getPathToAttach(scaleAndSaveImage, true).toString();
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void addToFavoriteSelected(String str7) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer.this.stickerMakerView.uploadStickerFile(file, videoEditedInfo2, str7, null, true, null, null, photoEntry.thumbPath, null, null);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean can() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canDeleteSticker(TLRPC.Document document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canDeleteSticker(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canEditSticker() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canEditSticker(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean canSchedule() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSchedule(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ Boolean canSetAsStatus(TLRPC.Document document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void copyEmoji(TLRPC.Document document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void deleteSticker(TLRPC.Document document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$deleteSticker(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void editSticker(TLRPC.Document document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$editSticker(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public long getDialogId() {
                            return PhotoViewer.this.currentDialogId;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ String getQuery(boolean z6) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z6);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void gifAddedOrDeleted() {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean isInScheduleMode() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isInScheduleMode(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean isPhotoEditor() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$isPhotoEditor(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isReplacedSticker() {
                            return PhotoViewer.this.replacedSticker != null;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isSettingIntroSticker() {
                            return PhotoViewer.this.customStickerHandler != null;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public boolean isStickerEditor() {
                            return true;
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needCopy(TLRPC.Document document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needMenu() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needOpen() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needRemove() {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needRemoveFromRecent(TLRPC.Document document2) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ boolean needSend(int i5) {
                            return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needSend(this, i5);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void newStickerPackSelected(CharSequence charSequence, String str7, Utilities.Callback callback) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer.this.stickerMakerView.uploadStickerFile(file, videoEditedInfo2, str7, charSequence, false, null, null, photoEntry.thumbPath, callback, null);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void openSet(TLRPC.InputStickerSet inputStickerSet, boolean z6) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$openSet(this, inputStickerSet, z6);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void removeFromRecent(TLRPC.Document document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void resetTouch() {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendEmoji(TLRPC.Document document2) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, document2);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendGif(Object obj4, Object obj5, boolean z6, int i5) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj4, obj5, z6, i5);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void sendSticker() {
                            if (PhotoViewer.this.placeProvider == null) {
                                return;
                            }
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            photoEntry.imagePath = file;
                            PhotoViewer.this.placeProvider.sendButtonPressed(PhotoViewer.this.currentIndex, videoEditedInfo2, z, i, z3);
                            NotificationCenter.getInstance(UserConfig.selectedAccount).postNotificationNameOnUIThread(NotificationCenter.customStickerCreated, Boolean.TRUE);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void sendSticker(TLRPC.Document document2, String str7, Object obj4, boolean z6, int i5) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendSticker(this, document2, str7, obj4, z6, i5);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public /* synthetic */ void setAsEmojiStatus(TLRPC.Document document2, Integer num) {
                            ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, document2, num);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void setIntroSticker(String str7) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.stickerMakerView.uploadStickerFile(file, videoEditedInfo2, str7, null, false, null, null, photoEntry.thumbPath, null, photoViewer2.customStickerHandler);
                        }

                        @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                        public void stickerSetSelected(TLRPC.StickerSet stickerSet, String str7) {
                            PhotoViewer.this.stickerEmptySent = true;
                            generateThumb();
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.stickerMakerView.uploadStickerFile(file, videoEditedInfo2, str7, null, false, stickerSet, photoViewer2.replacedSticker, photoEntry.thumbPath, null, null);
                        }
                    });
                    return;
                }
            }
            photoViewer.placeProvider.sendButtonPressed(photoViewer.currentIndex, currentVideoEditedInfo, z, i, z3);
        }
        if (photoViewer.closePhotoAfterSelect) {
            photoViewer.closePhoto(false, false);
        }
    }

    public void setCaptionHwLayerEnabled(boolean z) {
        if (this.captionHwLayerEnabled != z) {
            this.captionHwLayerEnabled = z;
            this.captionTextViewSwitcher.setLayerType(2, null);
            this.captionTextViewSwitcher.getCurrentView().setLayerType(2, null);
            this.captionTextViewSwitcher.getNextView().setLayerType(2, null);
        }
    }

    public void setCropBitmap() {
        VideoEditTextureView videoEditTextureView;
        if (this.cropInitied || this.sendPhotoType != 1) {
            return;
        }
        if (!this.isCurrentVideo || ((videoEditTextureView = (VideoEditTextureView) this.videoTextureView) != null && videoEditTextureView.getVideoWidth() > 0 && videoEditTextureView.getVideoHeight() > 0)) {
            this.cropInitied = true;
            Bitmap bitmap = this.centerImage.getBitmap();
            int orientation = this.centerImage.getOrientation();
            if (bitmap == null) {
                bitmap = this.animatingImageView.getBitmap();
                orientation = this.animatingImageView.getOrientation();
            }
            Bitmap bitmap2 = bitmap;
            int i = orientation;
            if (bitmap2 == null && this.videoTextureView == null) {
                return;
            }
            this.photoCropView.setBitmap(bitmap2, i, false, false, this.paintingOverlay, this.cropTransform, this.isCurrentVideo ? (VideoEditTextureView) this.videoTextureView : null, this.editState.cropState);
        }
    }

    private void setCurrentCaption(MessageObject messageObject, CharSequence charSequence, boolean z, boolean z2) {
        int i;
        boolean z3;
        CharSequence spannableStringBuilder;
        TLRPC.Message message;
        CharSequence cloneSpans = AnimatedEmojiSpan.cloneSpans(charSequence, 3);
        showEditCaption(this.editing, z2);
        if (!this.editing) {
            boolean z4 = true;
            if (this.sendPhotoType != 1) {
                this.captionEdit.setVisibility(8);
                if (!this.needCaptionLayout) {
                    if (this.captionScrollView == null) {
                        FrameLayout frameLayout = new FrameLayout(this.containerView.getContext());
                        this.captionContainer = frameLayout;
                        this.captionTextViewSwitcher.setContainer(frameLayout);
                        CaptionScrollView captionScrollView = new CaptionScrollView(this.containerView.getContext(), this.captionTextViewSwitcher, this.captionContainer) { // from class: org.telegram.ui.PhotoViewer.65
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.view.View
                            public void invalidate() {
                                ViewPropertyAnimator duration;
                                super.invalidate();
                                if (PhotoViewer.this.isActionBarVisible) {
                                    int scrollY = getScrollY();
                                    float translationY = PhotoViewer.this.captionTextViewSwitcher.getTranslationY();
                                    boolean z5 = scrollY == 0 && translationY == 0.0f;
                                    boolean z6 = scrollY == 0 && translationY == 0.0f;
                                    if (!z5) {
                                        int y = PhotoViewer.this.photoProgressViews[0].getY() + PhotoViewer.this.photoProgressViews[0].size;
                                        int top = (((PhotoViewer.this.captionContainer.getTop() + ((int) translationY)) - scrollY) + ((isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight())) - AndroidUtilities.dp(12.0f);
                                        z6 = top > ((int) PhotoViewer.this.fullscreenButton[0].getY()) + AndroidUtilities.dp(32.0f);
                                        z5 = top > y;
                                    }
                                    if (PhotoViewer.this.allowShowFullscreenButton) {
                                        if (PhotoViewer.this.fullscreenButton[0].getTag() != null && ((Integer) PhotoViewer.this.fullscreenButton[0].getTag()).intValue() == 3 && z6) {
                                            PhotoViewer.this.fullscreenButton[0].setTag(2);
                                            duration = PhotoViewer.this.fullscreenButton[0].animate().alpha(1.0f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.65.1
                                                {
                                                    65.this = this;
                                                }

                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                public void onAnimationEnd(Animator animator) {
                                                    PhotoViewer.this.fullscreenButton[0].setTag(null);
                                                }
                                            });
                                        } else if (PhotoViewer.this.fullscreenButton[0].getTag() == null && !z6) {
                                            PhotoViewer.this.fullscreenButton[0].setTag(3);
                                            duration = PhotoViewer.this.fullscreenButton[0].animate().alpha(0.0f).setListener(null).setDuration(150L);
                                        }
                                        duration.start();
                                    }
                                    PhotoViewer.this.photoProgressViews[0].setIndexedAlpha(2, z5 ? 1.0f : 0.0f, true);
                                }
                            }

                            @Override // org.telegram.ui.PhotoViewer.CaptionScrollView
                            protected boolean isStatusBarVisible() {
                                return Build.VERSION.SDK_INT >= 21 && !PhotoViewer.this.inBubbleMode;
                            }
                        };
                        this.captionScrollView = captionScrollView;
                        this.captionTextViewSwitcher.setScrollView(captionScrollView);
                        this.captionContainer.setClipChildren(false);
                        this.captionScrollView.addView(this.captionContainer, new ViewGroup.LayoutParams(-1, -2));
                        this.containerView.addView(this.captionScrollView, LayoutHelper.createFrame(-1, -1, 80));
                    }
                    if (this.captionTextViewSwitcher.getParent() != this.captionContainer) {
                        this.pickerView.removeView(this.captionTextViewSwitcher);
                        this.captionTextViewSwitcher.setMeasureAllChildren(true);
                        this.captionContainer.addView(this.captionTextViewSwitcher, -1, -2);
                        this.videoPreviewFrame.bringToFront();
                    }
                    if (messageObject == null || !messageObject.isSponsored()) {
                        FrameLayout frameLayout2 = this.adButtonView;
                        if (frameLayout2 != null) {
                            AndroidUtilities.removeFromParent(frameLayout2);
                            this.captionTextViewSwitcher.setPadding(0, 0, 0, 0);
                        }
                    } else {
                        createAdButtonView();
                        AndroidUtilities.removeFromParent(this.adButtonView);
                        this.adButtonTextView.setText(messageObject.sponsoredButtonText);
                        this.captionContainer.addView(this.adButtonView, LayoutHelper.createFrame(-1, 44.0f, 87, 16.0f, 0.0f, 16.0f, 12.0f));
                        this.captionTextViewSwitcher.setPadding(0, 0, 0, AndroidUtilities.dp(64.0f));
                        this.adButtonView.bringToFront();
                    }
                } else if (this.captionTextViewSwitcher.getParent() != this.pickerView) {
                    FrameLayout frameLayout3 = this.captionContainer;
                    if (frameLayout3 != null) {
                        frameLayout3.removeView(this.captionTextViewSwitcher);
                    }
                    this.captionTextViewSwitcher.setMeasureAllChildren(false);
                    this.pickerView.addView(this.captionTextViewSwitcher, LayoutHelper.createFrame(-1, -2.0f, 83, 0.0f, 0.0f, 76.0f, 48.0f));
                }
                boolean isEmpty = TextUtils.isEmpty(cloneSpans);
                boolean isEmpty2 = TextUtils.isEmpty(this.captionTextViewSwitcher.getCurrentView().getText());
                CaptionTextViewSwitcher captionTextViewSwitcher = this.captionTextViewSwitcher;
                TextView nextView = z2 ? captionTextViewSwitcher.getNextView() : captionTextViewSwitcher.getCurrentView();
                if (!this.isCurrentVideo) {
                    int maxLines = nextView.getMaxLines();
                    if (maxLines == 1) {
                        this.captionTextViewSwitcher.getCurrentView().setSingleLine(false);
                        this.captionTextViewSwitcher.getNextView().setSingleLine(false);
                    }
                    if (this.needCaptionLayout) {
                        Point point = AndroidUtilities.displaySize;
                        i = point.x > point.y ? 5 : 10;
                    } else {
                        i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    }
                    if (maxLines != i) {
                        this.captionTextViewSwitcher.getCurrentView().setMaxLines(i);
                        this.captionTextViewSwitcher.getNextView().setMaxLines(i);
                        this.captionTextViewSwitcher.getCurrentView().setEllipsize(null);
                        this.captionTextViewSwitcher.getNextView().setEllipsize(null);
                    }
                } else if (nextView.getMaxLines() != 1) {
                    this.captionTextViewSwitcher.getCurrentView().setMaxLines(1);
                    this.captionTextViewSwitcher.getNextView().setMaxLines(1);
                    this.captionTextViewSwitcher.getCurrentView().setSingleLine(true);
                    this.captionTextViewSwitcher.getNextView().setSingleLine(true);
                    TextView currentView = this.captionTextViewSwitcher.getCurrentView();
                    TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
                    currentView.setEllipsize(truncateAt);
                    this.captionTextViewSwitcher.getNextView().setEllipsize(truncateAt);
                }
                nextView.setScrollX(0);
                boolean z5 = this.needCaptionLayout;
                this.dontChangeCaptionPosition = !z5 && z2 && isEmpty;
                if (!z5) {
                    this.captionScrollView.dontChangeTopMargin = false;
                }
                if (z2) {
                    if (Build.VERSION.SDK_INT >= 23) {
                        TransitionManager.endTransitions(z5 ? this.pickerView : this.captionScrollView);
                    }
                    if (this.needCaptionLayout) {
                        TransitionSet transitionSet = new TransitionSet();
                        transitionSet.setOrdering(0);
                        transitionSet.addTransition(new ChangeBounds());
                        transitionSet.addTransition(new Fade(2));
                        transitionSet.addTransition(new Fade(1));
                        transitionSet.setDuration(200L);
                        TransitionManager.beginDelayedTransition(this.pickerView, transitionSet);
                    } else {
                        TransitionSet duration = new TransitionSet().addTransition(new 67(2, isEmpty2, isEmpty)).addTransition(new 66(1, isEmpty2, isEmpty)).setDuration(200L);
                        if (!isEmpty2) {
                            this.captionScrollView.dontChangeTopMargin = true;
                            duration.addTransition(new 68());
                        }
                        if (isEmpty2 && !isEmpty) {
                            duration.addTarget((View) this.captionTextViewSwitcher);
                        }
                        TransitionManager.beginDelayedTransition(this.captionScrollView, duration);
                    }
                    z3 = true;
                } else {
                    this.captionTextViewSwitcher.getCurrentView().setText((CharSequence) null);
                    CaptionScrollView captionScrollView2 = this.captionScrollView;
                    if (captionScrollView2 != null) {
                        captionScrollView2.scrollTo(0, 0);
                    }
                    z3 = false;
                }
                if (!isEmpty) {
                    Theme.createChatResources(null, true);
                    if (messageObject == null || !this.captionTranslated || (message = messageObject.messageOwner) == null || message.translatedText == null || !TextUtils.equals(message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
                        if (messageObject == null || messageObject.messageOwner.entities.isEmpty()) {
                            spannableStringBuilder = new SpannableStringBuilder(cloneSpans);
                        } else {
                            spannableStringBuilder = new SpannableString(cloneSpans);
                            messageObject.addEntitiesToText(spannableStringBuilder, true, false);
                            if (messageObject.isVideo()) {
                                MessageObject.addUrlsByPattern(messageObject.isOutOwner(), spannableStringBuilder, false, 3, (int) messageObject.getDuration(), false);
                            }
                        }
                        cloneSpans = Emoji.replaceEmoji(spannableStringBuilder, nextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
                    }
                    if (messageObject != null && messageObject.isSponsored()) {
                        cloneSpans = sponsoredCaption(messageObject, cloneSpans);
                    }
                    this.captionTextViewSwitcher.setTag(cloneSpans);
                    try {
                        this.captionTextViewSwitcher.setText(cloneSpans, z2, this.lastCaptionTranslating != z);
                        CaptionScrollView captionScrollView3 = this.captionScrollView;
                        if (captionScrollView3 != null) {
                            captionScrollView3.updateTopMargin();
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                    nextView.setScrollY(0);
                    nextView.setTextColor(-1);
                    this.captionTextViewSwitcher.setVisibility(this.isActionBarVisible && (!this.isCurrentVideo || this.pickerView.getVisibility() == 0 || this.pageBlocksAdapter != null) ? 0 : 4);
                } else if (this.needCaptionLayout) {
                    this.captionTextViewSwitcher.setText(LocaleController.getString("AddCaption", R.string.AddCaption), z2);
                    this.captionTextViewSwitcher.getCurrentView().setTextColor(-1291845633);
                    this.captionTextViewSwitcher.setTag("empty");
                    this.captionTextViewSwitcher.setVisibility(0);
                } else {
                    this.captionTextViewSwitcher.setText(null, z2);
                    this.captionTextViewSwitcher.getCurrentView().setTextColor(-1);
                    this.captionTextViewSwitcher.setVisibility(4, !z3 || isEmpty2);
                    this.captionTextViewSwitcher.setTag(null);
                }
                if (this.captionTextViewSwitcher.getCurrentView() instanceof CaptionTextView) {
                    ((CaptionTextView) this.captionTextViewSwitcher.getCurrentView()).setLoading(z);
                }
                this.lastCaptionTranslating = (isEmpty || !z) ? false : false;
                return;
            }
        }
        this.captionEdit.setText(cloneSpans);
        this.captionTextViewSwitcher.setVisibility(8);
    }

    private void setDoubleTapEnabled(boolean z) {
        this.doubleTapEnabled = z;
        this.gestureDetector.setOnDoubleTapListener(z ? this : null);
    }

    public void setImageIndex(int i) {
        setImageIndex(i, true, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:459:0x0403  */
    /* JADX WARN: Removed duplicated region for block: B:465:0x0424  */
    /* JADX WARN: Removed duplicated region for block: B:470:0x0433  */
    /* JADX WARN: Removed duplicated region for block: B:487:0x04b4  */
    /* JADX WARN: Removed duplicated region for block: B:489:0x04b7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:492:0x04c0  */
    /* JADX WARN: Removed duplicated region for block: B:493:0x04c2  */
    /* JADX WARN: Removed duplicated region for block: B:498:0x04d7  */
    /* JADX WARN: Removed duplicated region for block: B:501:0x04e3  */
    /* JADX WARN: Removed duplicated region for block: B:505:0x04f1  */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v26, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r3v27 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setImageIndex(int i, boolean z, boolean z2) {
        int i2;
        boolean z3;
        boolean z4;
        Uri uri;
        boolean z5;
        boolean z6;
        Uri uri2;
        String str;
        boolean z7;
        float f;
        float f2;
        boolean z8;
        float f3;
        float f4;
        CropTransform cropTransform;
        float f5;
        float f6;
        float f7;
        int i3;
        float f8;
        float f9;
        float f10;
        boolean z9;
        boolean equals;
        PlaceProviderObject placeProviderObject;
        PlaceProviderObject placeForPhoto;
        boolean z10;
        int i4;
        char c;
        ?? r3;
        char c2;
        MessageObject messageObject;
        MediaController.CropState cropState;
        ImageReceiver.BitmapHolder bitmapHolder;
        boolean z11 = false;
        if (this.currentIndex == i || this.placeProvider == null) {
            return;
        }
        if (!z && (bitmapHolder = this.currentThumb) != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.currentFileNames[0] = getFileName(i);
        this.currentFileNames[1] = getFileName(i + 1);
        this.currentFileNames[2] = getFileName(i - 1);
        this.placeProvider.willSwitchFromPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex);
        this.lastPhotoSetTime = SystemClock.elapsedRealtime();
        int i5 = this.currentIndex;
        this.currentIndex = i;
        setIsAboutToSwitchToIndex(i, z, z2);
        CropTransform clone = this.cropTransform.clone();
        EditState editState = this.editState;
        MediaController.CropState clone2 = (editState == null || (cropState = editState.cropState) == null) ? null : cropState.clone();
        boolean z12 = this.centerImageIsVideo;
        this.editState.reset();
        if (this.imagesArr.isEmpty()) {
            if (this.secureDocuments.isEmpty()) {
                if (!this.imagesArrLocations.isEmpty()) {
                    if (i < 0 || i >= this.imagesArrLocations.size()) {
                        closePhoto(false, false);
                        return;
                    }
                    ImageLocation imageLocation = this.currentFileLocation;
                    ImageLocation imageLocation2 = (ImageLocation) this.imagesArrLocations.get(i);
                    if (z && imageLocation != null && imageLocation2 != null) {
                        TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated = imageLocation.location;
                        int i6 = tL_fileLocationToBeDeprecated.local_id;
                        TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated2 = imageLocation2.location;
                        if (i6 == tL_fileLocationToBeDeprecated2.local_id) {
                            i2 = i5;
                            if (tL_fileLocationToBeDeprecated.volume_id == tL_fileLocationToBeDeprecated2.volume_id) {
                                z3 = true;
                                this.currentFileLocation = (ImageLocation) this.imagesArrLocations.get(i);
                                this.currentFileLocationVideo = (ImageLocation) this.imagesArrLocationsVideo.get(i);
                                z4 = false;
                                uri = null;
                                z5 = true;
                                setMenuItemIcon(z4, z5);
                                placeProviderObject = this.currentPlaceObject;
                                if (placeProviderObject != null) {
                                    if (this.animationInProgress == 0) {
                                        placeProviderObject.imageReceiver.setVisible(z5, z5);
                                    } else {
                                        this.showAfterAnimation = placeProviderObject;
                                    }
                                }
                                placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                                this.currentPlaceObject = placeForPhoto;
                                if (placeForPhoto != null) {
                                    if (this.animationInProgress == 0) {
                                        placeForPhoto.imageReceiver.setVisible(false, true);
                                    } else {
                                        this.hideAfterAnimation = placeForPhoto;
                                    }
                                }
                                if (z3) {
                                    z10 = false;
                                } else {
                                    this.draggingDown = false;
                                    this.translationX = 0.0f;
                                    this.translationY = 0.0f;
                                    this.animateToX = 0.0f;
                                    this.animateToY = 0.0f;
                                    float scale1 = scale1();
                                    this.animateToScale = scale1;
                                    this.scale = scale1;
                                    this.animateToRotate = 0.0f;
                                    this.animationStartTime = 0L;
                                    this.zoomAnimation = false;
                                    this.imageMoveAnimation = null;
                                    this.changeModeAnimation = null;
                                    AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
                                    if (aspectRatioFrameLayout != null) {
                                        aspectRatioFrameLayout.setVisibility(4);
                                    }
                                    this.pinchStartDistance = 0.0f;
                                    this.pinchStartAngle = 0.0f;
                                    this.pinchStartScale = 1.0f;
                                    this.pinchStartRotate = 0.0f;
                                    this.pinchCenterX = 0.0f;
                                    this.pinchCenterY = 0.0f;
                                    this.pinchStartX = 0.0f;
                                    this.pinchStartY = 0.0f;
                                    this.moveStartX = 0.0f;
                                    this.moveStartY = 0.0f;
                                    this.zooming = false;
                                    this.moving = false;
                                    this.paintViewTouched = 0;
                                    this.maskPaintViewTouched = 0;
                                    this.doubleTap = false;
                                    this.invalidCoords = false;
                                    this.canDragDown = true;
                                    this.changingPage = false;
                                    this.switchImageAfterAnimation = 0;
                                    if (this.sharedMediaType != 1) {
                                        this.canZoom = (this.isEmbedVideo || (this.imagesArrLocals.isEmpty() && (this.currentFileNames[0] == null || this.photoProgressViews[0].backgroundState == 0))) ? false : true;
                                    }
                                    updateMinMax(this.scale);
                                    z10 = false;
                                    releasePlayer(false);
                                }
                                if (z11 && uri != null) {
                                    this.isStreaming = z10;
                                    preparePlayer(null, uri, this.sendPhotoType != 1, false, this.editState.savedFilterState);
                                }
                                if (this.imagesArrLocals.isEmpty()) {
                                    this.editState.reset();
                                }
                                this.centerImageIsVideo = z11;
                                i4 = i2;
                                if (i4 == -1) {
                                    setImages();
                                    for (int i7 = 0; i7 < 3; i7++) {
                                        checkProgress(i7, false, false);
                                    }
                                } else {
                                    checkProgress(0, true, false);
                                    int i8 = this.currentIndex;
                                    if (i4 > i8) {
                                        ImageReceiver imageReceiver = this.rightImage;
                                        this.rightImage = this.centerImage;
                                        this.centerImage = this.leftImage;
                                        this.leftImage = imageReceiver;
                                        BlurringShader.ThumbBlurer thumbBlurer = this.rightBlur;
                                        this.rightBlur = this.centerBlur;
                                        this.centerBlur = this.leftBlur;
                                        this.leftBlur = thumbBlurer;
                                        AnimatedFloat[] animatedFloatArr = this.centerImageInsideBlur;
                                        if (animatedFloatArr != null) {
                                            AnimatedFloat animatedFloat = animatedFloatArr[0];
                                            animatedFloatArr[0] = animatedFloatArr[1];
                                            c2 = 2;
                                            animatedFloatArr[1] = animatedFloatArr[2];
                                            animatedFloatArr[2] = animatedFloat;
                                        } else {
                                            c2 = 2;
                                        }
                                        this.rightImageIsVideo = z12;
                                        this.rightCropTransform = clone;
                                        this.rightCropState = clone2;
                                        PhotoProgressView[] photoProgressViewArr = this.photoProgressViews;
                                        PhotoProgressView photoProgressView = photoProgressViewArr[0];
                                        photoProgressViewArr[0] = photoProgressViewArr[c2];
                                        photoProgressViewArr[c2] = photoProgressView;
                                        ImageView[] imageViewArr = this.fullscreenButton;
                                        ImageView imageView = imageViewArr[0];
                                        ImageView imageView2 = imageViewArr[c2];
                                        imageViewArr[0] = imageView2;
                                        imageViewArr[c2] = imageView;
                                        imageView2.setTranslationY(imageView.getTranslationY());
                                        this.leftCropState = null;
                                        setIndexToPaintingOverlay(this.currentIndex - 1, this.leftPaintingOverlay);
                                        setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
                                        setIndexToPaintingOverlay(this.currentIndex + 1, this.rightPaintingOverlay);
                                        setIndexToImage(this.leftImage, this.currentIndex - 1, this.leftCropTransform);
                                        resetIndexForDeferredImageLoading();
                                        updateAccessibilityOverlayVisibility();
                                        checkProgress(1, true, false);
                                        checkProgress(2, true, false);
                                    } else if (i4 < i8) {
                                        ImageReceiver imageReceiver2 = this.leftImage;
                                        this.leftImage = this.centerImage;
                                        this.centerImage = this.rightImage;
                                        this.rightImage = imageReceiver2;
                                        BlurringShader.ThumbBlurer thumbBlurer2 = this.leftBlur;
                                        this.leftBlur = this.centerBlur;
                                        this.centerBlur = this.rightBlur;
                                        this.rightBlur = thumbBlurer2;
                                        AnimatedFloat[] animatedFloatArr2 = this.centerImageInsideBlur;
                                        if (animatedFloatArr2 != null) {
                                            AnimatedFloat animatedFloat2 = animatedFloatArr2[2];
                                            r3 = 1;
                                            animatedFloatArr2[2] = animatedFloatArr2[1];
                                            c = 0;
                                            animatedFloatArr2[1] = animatedFloatArr2[0];
                                            animatedFloatArr2[0] = animatedFloat2;
                                        } else {
                                            c = 0;
                                            r3 = 1;
                                        }
                                        this.leftImageIsVideo = z12;
                                        this.leftCropTransform = clone;
                                        this.leftCropState = clone2;
                                        PhotoProgressView[] photoProgressViewArr2 = this.photoProgressViews;
                                        PhotoProgressView photoProgressView2 = photoProgressViewArr2[c];
                                        photoProgressViewArr2[c] = photoProgressViewArr2[r3];
                                        photoProgressViewArr2[r3] = photoProgressView2;
                                        ImageView[] imageViewArr2 = this.fullscreenButton;
                                        ImageView imageView3 = imageViewArr2[c];
                                        ImageView imageView4 = imageViewArr2[r3];
                                        imageViewArr2[c] = imageView4;
                                        imageViewArr2[r3] = imageView3;
                                        imageView4.setTranslationY(imageView3.getTranslationY());
                                        this.rightCropState = null;
                                        setIndexToPaintingOverlay(this.currentIndex - r3, this.leftPaintingOverlay);
                                        setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
                                        setIndexToPaintingOverlay(this.currentIndex + r3, this.rightPaintingOverlay);
                                        setIndexToImage(this.rightImage, this.currentIndex + r3, this.rightCropTransform);
                                        resetIndexForDeferredImageLoading();
                                        updateAccessibilityOverlayVisibility();
                                        checkProgress(r3, r3, false);
                                        checkProgress(2, r3, false);
                                    }
                                    Bitmap bitmap = this.videoFrameBitmap;
                                    if (bitmap != null) {
                                        bitmap.recycle();
                                        this.videoFrameBitmap = null;
                                    }
                                }
                                detectFaces();
                            }
                            z3 = false;
                            this.currentFileLocation = (ImageLocation) this.imagesArrLocations.get(i);
                            this.currentFileLocationVideo = (ImageLocation) this.imagesArrLocationsVideo.get(i);
                            z4 = false;
                            uri = null;
                            z5 = true;
                            setMenuItemIcon(z4, z5);
                            placeProviderObject = this.currentPlaceObject;
                            if (placeProviderObject != null) {
                            }
                            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                            this.currentPlaceObject = placeForPhoto;
                            if (placeForPhoto != null) {
                            }
                            if (z3) {
                            }
                            if (z11) {
                                this.isStreaming = z10;
                                preparePlayer(null, uri, this.sendPhotoType != 1, false, this.editState.savedFilterState);
                            }
                            if (this.imagesArrLocals.isEmpty()) {
                            }
                            this.centerImageIsVideo = z11;
                            i4 = i2;
                            if (i4 == -1) {
                            }
                            detectFaces();
                        }
                    }
                    i2 = i5;
                    z3 = false;
                    this.currentFileLocation = (ImageLocation) this.imagesArrLocations.get(i);
                    this.currentFileLocationVideo = (ImageLocation) this.imagesArrLocationsVideo.get(i);
                    z4 = false;
                    uri = null;
                    z5 = true;
                    setMenuItemIcon(z4, z5);
                    placeProviderObject = this.currentPlaceObject;
                    if (placeProviderObject != null) {
                    }
                    placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                    this.currentPlaceObject = placeForPhoto;
                    if (placeForPhoto != null) {
                    }
                    if (z3) {
                    }
                    if (z11) {
                    }
                    if (this.imagesArrLocals.isEmpty()) {
                    }
                    this.centerImageIsVideo = z11;
                    i4 = i2;
                    if (i4 == -1) {
                    }
                    detectFaces();
                }
                i2 = i5;
                if (this.imagesArrLocals.isEmpty()) {
                    PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                    if (pageBlocksAdapter != null) {
                        int i9 = this.currentIndex;
                        if (i9 < 0 || i9 >= pageBlocksAdapter.getItemsCount()) {
                            closePhoto(false, false);
                            return;
                        }
                        TLRPC.PageBlock pageBlock = this.pageBlocksAdapter.get(this.currentIndex);
                        TLRPC.PageBlock pageBlock2 = this.currentPageBlock;
                        z3 = pageBlock2 != null && pageBlock2 == pageBlock;
                        this.currentPageBlock = pageBlock;
                        if (this.pageBlocksAdapter.isVideo(this.currentIndex) || this.pageBlocksAdapter.isHardwarePlayer(this.currentIndex)) {
                            z4 = false;
                            uri = null;
                            z5 = true;
                            z11 = true;
                            setMenuItemIcon(z4, z5);
                            placeProviderObject = this.currentPlaceObject;
                            if (placeProviderObject != null) {
                            }
                            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                            this.currentPlaceObject = placeForPhoto;
                            if (placeForPhoto != null) {
                            }
                            if (z3) {
                            }
                            if (z11) {
                            }
                            if (this.imagesArrLocals.isEmpty()) {
                            }
                            this.centerImageIsVideo = z11;
                            i4 = i2;
                            if (i4 == -1) {
                            }
                            detectFaces();
                        }
                        z4 = false;
                        uri = null;
                        z5 = true;
                        z11 = false;
                        setMenuItemIcon(z4, z5);
                        placeProviderObject = this.currentPlaceObject;
                        if (placeProviderObject != null) {
                        }
                        placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
                        this.currentPlaceObject = placeForPhoto;
                        if (placeForPhoto != null) {
                        }
                        if (z3) {
                        }
                        if (z11) {
                        }
                        if (this.imagesArrLocals.isEmpty()) {
                        }
                        this.centerImageIsVideo = z11;
                        i4 = i2;
                        if (i4 == -1) {
                        }
                        detectFaces();
                    }
                } else if (i < 0 || i >= this.imagesArrLocals.size()) {
                    closePhoto(false, false);
                    return;
                } else {
                    Object obj = this.imagesArrLocals.get(i);
                    if (obj instanceof TLRPC.BotInlineResult) {
                        TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) obj;
                        this.currentBotInlineResult = botInlineResult;
                        if (botInlineResult.document != null) {
                            this.currentPathObject = FileLoader.getInstance(this.currentAccount).getPathToAttach(botInlineResult.document).getAbsolutePath();
                            equals = MessageObject.isVideoDocument(botInlineResult.document);
                        } else {
                            if (botInlineResult.photo != null) {
                                this.currentPathObject = FileLoader.getInstance(this.currentAccount).getPathToAttach(FileLoader.getClosestPhotoSizeWithSize(botInlineResult.photo.sizes, AndroidUtilities.getPhotoSize())).getAbsolutePath();
                            } else {
                                TLRPC.WebDocument webDocument = botInlineResult.content;
                                if (webDocument instanceof TLRPC.TL_webDocument) {
                                    this.currentPathObject = webDocument.url;
                                    equals = botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND);
                                }
                            }
                            z3 = false;
                            z6 = false;
                            uri2 = null;
                        }
                        z6 = equals;
                        z3 = false;
                        uri2 = null;
                    } else {
                        if (obj instanceof MediaController.PhotoEntry) {
                            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                            String str2 = photoEntry.path;
                            this.currentPathObject = str2;
                            if (str2 == null) {
                                closePhoto(false, false);
                                return;
                            }
                            boolean z13 = photoEntry.isVideo;
                            EditState editState2 = this.editState;
                            editState2.savedFilterState = photoEntry.savedFilterState;
                            editState2.paintPath = photoEntry.paintPath;
                            editState2.croppedPaintPath = photoEntry.croppedPaintPath;
                            editState2.croppedMediaEntities = photoEntry.croppedMediaEntities;
                            editState2.averageDuration = photoEntry.averageDuration;
                            editState2.mediaEntities = photoEntry.mediaEntities;
                            editState2.cropState = photoEntry.cropState;
                            File file = new File(photoEntry.path);
                            Uri fromFile = Uri.fromFile(file);
                            if (this.isDocumentsPicker) {
                                StringBuilder sb = new StringBuilder();
                                if (photoEntry.width == 0 || photoEntry.height == 0) {
                                    z7 = z13;
                                } else {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    z7 = z13;
                                    sb.append(String.format(Locale.US, "%dx%d", Integer.valueOf(photoEntry.width), Integer.valueOf(photoEntry.height)));
                                }
                                if (photoEntry.isVideo) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    sb.append(AndroidUtilities.formatShortDuration(photoEntry.duration));
                                }
                                if (photoEntry.size != 0) {
                                    if (sb.length() > 0) {
                                        sb.append(", ");
                                    }
                                    sb.append(AndroidUtilities.formatFileSize(photoEntry.size));
                                }
                                this.docNameTextView.setText(file.getName());
                                this.docInfoTextView.setText(sb);
                            } else {
                                z7 = z13;
                            }
                            z6 = z7;
                            uri2 = fromFile;
                            z3 = this.savedState != null;
                        } else {
                            if (obj instanceof MediaController.SearchImage) {
                                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                                this.currentPathObject = searchImage.getPathToAttach();
                                EditState editState3 = this.editState;
                                editState3.savedFilterState = searchImage.savedFilterState;
                                editState3.paintPath = searchImage.paintPath;
                                editState3.croppedPaintPath = searchImage.croppedPaintPath;
                                editState3.croppedMediaEntities = searchImage.croppedMediaEntities;
                                editState3.averageDuration = searchImage.averageDuration;
                                editState3.mediaEntities = searchImage.mediaEntities;
                                editState3.cropState = searchImage.cropState;
                            }
                            z3 = false;
                            z6 = false;
                            uri2 = null;
                        }
                        if (obj instanceof MediaController.MediaEditState) {
                            MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                            if (hasAnimatedMediaEntities()) {
                                str = mediaEditState.imagePath;
                            } else {
                                str = mediaEditState.filterPath;
                                if (str == null) {
                                    str = this.currentPathObject;
                                }
                            }
                            this.currentImagePath = str;
                        }
                    }
                    MediaController.CropState cropState2 = this.editState.cropState;
                    if (cropState2 != null) {
                        this.previousHasTransform = true;
                        float f11 = cropState2.cropPx;
                        this.previousCropPx = f11;
                        float f12 = cropState2.cropPy;
                        this.previousCropPy = f12;
                        float f13 = cropState2.cropScale;
                        this.previousCropScale = f13;
                        float f14 = cropState2.cropRotate;
                        this.previousCropRotation = f14;
                        int i10 = cropState2.transformRotation;
                        this.previousCropOrientation = i10;
                        float f15 = cropState2.cropPw;
                        this.previousCropPw = f15;
                        float f16 = cropState2.cropPh;
                        this.previousCropPh = f16;
                        boolean z14 = cropState2.mirrored;
                        this.previousCropMirrored = z14;
                        f = 0.0f;
                        f2 = 0.0f;
                        z8 = true;
                        f3 = 1.0f;
                        f4 = 1.0f;
                        cropTransform = this.cropTransform;
                        f5 = f11;
                        f6 = f12;
                        f7 = f14;
                        i3 = i10;
                        f8 = f13;
                        f9 = f15;
                        f10 = f16;
                        z9 = z14;
                    } else {
                        this.previousHasTransform = false;
                        CropTransform cropTransform2 = this.cropTransform;
                        float f17 = this.previousCropPx;
                        f = 0.0f;
                        f2 = 0.0f;
                        z8 = false;
                        f3 = 1.0f;
                        f4 = 1.0f;
                        cropTransform = cropTransform2;
                        f5 = f17;
                        f6 = this.previousCropPy;
                        f7 = this.previousCropRotation;
                        i3 = this.previousCropOrientation;
                        f8 = this.previousCropScale;
                        f9 = this.previousCropPw;
                        f10 = this.previousCropPh;
                        z9 = this.previousCropMirrored;
                    }
                    cropTransform.setViewTransform(z8, f5, f6, f7, i3, f8, f3, f4, f9, f10, f, f2, z9);
                    z11 = z6;
                    uri = uri2;
                }
            } else if (i < 0 || i >= this.secureDocuments.size()) {
                closePhoto(false, false);
                return;
            } else {
                this.currentSecureDocument = (SecureDocument) this.secureDocuments.get(i);
                i2 = i5;
            }
            z4 = false;
            z3 = false;
            uri = null;
            z5 = true;
            z11 = false;
            setMenuItemIcon(z4, z5);
            placeProviderObject = this.currentPlaceObject;
            if (placeProviderObject != null) {
            }
            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
            this.currentPlaceObject = placeForPhoto;
            if (placeForPhoto != null) {
            }
            if (z3) {
            }
            if (z11) {
            }
            if (this.imagesArrLocals.isEmpty()) {
            }
            this.centerImageIsVideo = z11;
            i4 = i2;
            if (i4 == -1) {
            }
            detectFaces();
        }
        int i11 = this.currentIndex;
        if (i11 < 0 || i11 >= this.imagesArr.size()) {
            closePhoto(false, false);
            return;
        }
        MessageObject messageObject2 = (MessageObject) this.imagesArr.get(this.currentIndex);
        z3 = z && (messageObject = this.currentMessageObject) != null && messageObject.getId() == messageObject2.getId();
        if (z3) {
            messageObject2.putInDownloadsStore = this.currentMessageObject.putInDownloadsStore;
        }
        this.currentMessageObject = messageObject2;
        boolean isVideo = messageObject2.isVideo();
        if (messageObject2.isSponsored()) {
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
        }
        if (this.sharedMediaType == 1) {
            boolean canPreviewDocument = messageObject2.canPreviewDocument();
            this.canZoom = canPreviewDocument;
            if (canPreviewDocument) {
                if (this.allowShare) {
                    this.menuItem.showSubItem(1);
                } else {
                    this.menuItem.hideSubItem(1);
                }
                setDoubleTapEnabled(true);
            } else {
                this.menuItem.hideSubItem(1);
                setDoubleTapEnabled(false);
            }
        }
        if (isVideo || this.isEmbedVideo) {
            this.speedItem.setVisibility(0);
            this.menuItem.showSubItem(19);
            this.speedGap.setVisibility(this.menuItem.getVisibleSubItemsCount() > 1 ? 0 : 8);
        } else {
            this.speedItem.setVisibility(8);
            this.speedGap.setVisibility(8);
            this.menuItem.checkHideMenuItem();
        }
        updateQualityItems();
        z11 = isVideo;
        uri = null;
        i2 = i5;
        z4 = false;
        z5 = true;
        setMenuItemIcon(z4, z5);
        placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null) {
        }
        placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
        this.currentPlaceObject = placeForPhoto;
        if (placeForPhoto != null) {
        }
        if (z3) {
        }
        if (z11) {
        }
        if (this.imagesArrLocals.isEmpty()) {
        }
        this.centerImageIsVideo = z11;
        i4 = i2;
        if (i4 == -1) {
        }
        detectFaces();
    }

    public void setImages() {
        if (this.animationInProgress == 0) {
            setIndexToImage(this.centerImage, this.currentIndex, null);
            setIndexToPaintingOverlay(this.currentIndex, this.paintingOverlay);
            setIndexToImage(this.rightImage, this.currentIndex + 1, this.rightCropTransform);
            setIndexToPaintingOverlay(this.currentIndex + 1, this.rightPaintingOverlay);
            setIndexToImage(this.leftImage, this.currentIndex - 1, this.leftCropTransform);
            setIndexToPaintingOverlay(this.currentIndex - 1, this.leftPaintingOverlay);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:693:0x0500, code lost:
        if (r2[0] == 0) goto L178;
     */
    /* JADX WARN: Code restructure failed: missing block: B:884:0x07fa, code lost:
        if (r16 != false) goto L211;
     */
    /* JADX WARN: Code restructure failed: missing block: B:889:0x080d, code lost:
        if (r5[0] == 0) goto L178;
     */
    /* JADX WARN: Removed duplicated region for block: B:568:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:589:0x0320  */
    /* JADX WARN: Removed duplicated region for block: B:621:0x03bc  */
    /* JADX WARN: Removed duplicated region for block: B:626:0x03f7  */
    /* JADX WARN: Removed duplicated region for block: B:627:0x03fd  */
    /* JADX WARN: Removed duplicated region for block: B:845:0x0760  */
    /* JADX WARN: Removed duplicated region for block: B:857:0x0796  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setIndexToImage(ImageReceiver imageReceiver, int i, CropTransform cropTransform) {
        Bitmap bitmap;
        MessageObject messageObject;
        TLRPC.PhotoSize photoSize;
        TLObject tLObject;
        ImageLocation imageLocation;
        TLObject tLObject2;
        int i2;
        TLRPC.Document document;
        TLRPC.VideoSize documentVideoThumb;
        TLRPC.Photo photo;
        AnimatedFileDrawable animatedFileDrawable;
        Drawable drawable;
        Object obj;
        ImageLocation forDocument;
        BitmapDrawable bitmapDrawable;
        Object parentObject;
        String str;
        int i3;
        ImageLocation imageLocation2;
        String str2;
        String str3;
        long j;
        ImageReceiver imageReceiver2;
        AnimatedFileDrawable animatedFileDrawable2;
        String str4;
        ImageReceiver.BitmapHolder bitmapHolder;
        WebFile webFile;
        ImageLocation imageLocation3;
        TLRPC.PhotoSize photoSize2;
        TLObject tLObject3;
        TLRPC.Document document2;
        boolean z;
        String str5;
        long j2;
        int i4;
        long j3;
        TLRPC.Document document3;
        MediaController.CropState cropState;
        String format;
        TLRPC.Document document4;
        boolean z2;
        boolean z3;
        boolean z4;
        Drawable drawable2;
        Activity activity;
        Drawable drawable3;
        BitmapDrawable drawable4;
        Activity activity2;
        String str6;
        imageReceiver.setOrientation(0, false);
        if (this.secureDocuments.isEmpty()) {
            if (this.imagesArrLocals.isEmpty()) {
                PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                if (pageBlocksAdapter != null) {
                    int[] iArr = new int[1];
                    TLObject media = pageBlocksAdapter.getMedia(i);
                    TLRPC.PhotoSize fileLocation = this.pageBlocksAdapter.getFileLocation(media, iArr);
                    if (fileLocation == null) {
                        bitmap = null;
                    } else if (media instanceof TLRPC.Photo) {
                        TLRPC.Photo photo2 = (TLRPC.Photo) media;
                        ImageReceiver.BitmapHolder bitmapHolder2 = (this.currentThumb == null || imageReceiver != this.centerImage) ? null : null;
                        if (iArr[0] == 0) {
                            iArr[0] = -1;
                        }
                        boolean z5 = (DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) != 0 || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(fileLocation, true).exists();
                        bitmap = null;
                        imageReceiver.setImage(z5 ? ImageLocation.getForPhoto(fileLocation, photo2) : null, null, ImageLocation.getForPhoto(FileLoader.getClosestPhotoSizeWithSize(photo2.sizes, 80), photo2), "b", bitmapHolder2 != null ? new BitmapDrawable(bitmapHolder2.bitmap) : null, iArr[0], null, this.pageBlocksAdapter.getParentObject(), 1);
                        if (!z5) {
                            i2 = 1;
                            obj = Integer.valueOf(i2);
                        }
                        obj = bitmap;
                    } else if (!this.pageBlocksAdapter.isVideo(i) && !this.pageBlocksAdapter.isHardwarePlayer(i)) {
                        if (imageReceiver != this.centerImage || (animatedFileDrawable2 = this.currentAnimation) == null) {
                            return;
                        }
                        imageReceiver.setImageBitmap(animatedFileDrawable2);
                        this.currentAnimation.addSecondParentView(this.containerView);
                        return;
                    } else if (!(fileLocation.location instanceof TLRPC.TL_fileLocationUnavailable)) {
                        ImageReceiver.BitmapHolder bitmapHolder3 = this.currentThumb;
                        if (bitmapHolder3 == null || imageReceiver != this.centerImage) {
                            bitmapHolder3 = null;
                        }
                        forDocument = bitmapHolder3 == null ? ImageLocation.getForDocument(fileLocation, (TLRPC.Document) media) : null;
                        bitmapDrawable = bitmapHolder3 != null ? new BitmapDrawable(bitmapHolder3.bitmap) : null;
                        parentObject = this.pageBlocksAdapter.getParentObject();
                        str = null;
                        i3 = 1;
                        imageLocation2 = null;
                        str2 = null;
                        str3 = "b";
                        j = 0;
                        imageReceiver2 = imageReceiver;
                    }
                    imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                    return;
                }
                bitmap = null;
                if (this.imagesArr.isEmpty() || i < 0 || i >= this.imagesArr.size()) {
                    messageObject = null;
                } else {
                    imageReceiver.setShouldGenerateQualityThumb(true);
                    messageObject = (MessageObject) this.imagesArr.get(i);
                }
                if (messageObject != null) {
                    if (!TextUtils.isEmpty(MessagesController.getInstance(messageObject.currentAccount).getRestrictionReason(messageObject.messageOwner.restriction_reason))) {
                        drawable = this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder);
                    } else if (messageObject.isVideo()) {
                        ArrayList<TLRPC.PhotoSize> arrayList = messageObject.photoThumbs;
                        if (arrayList == null || arrayList.isEmpty()) {
                            imageReceiver.setImageBitmap(this.parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
                            return;
                        }
                        ImageReceiver.BitmapHolder bitmapHolder4 = this.currentThumb;
                        if (bitmapHolder4 == null || imageReceiver != this.centerImage) {
                            bitmapHolder4 = null;
                        }
                        TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
                        imageReceiver.setNeedsQualityThumb(closestPhotoSizeWithSize.w < 100 && closestPhotoSizeWithSize.h < 100);
                        imageReceiver.setImage(null, null, bitmapHolder4 == null ? ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.photoThumbsObject) : null, "b", bitmapHolder4 != null ? new BitmapDrawable(bitmapHolder4.bitmap) : null, 0L, null, messageObject, 1);
                        ImageReceiver.BitmapHolder bitmapHolder5 = this.currentThumb;
                        if (bitmapHolder5 != null) {
                            imageReceiver.setOrientation(bitmapHolder5.orientation, false);
                            return;
                        }
                        return;
                    } else if (imageReceiver == this.centerImage && (animatedFileDrawable = this.currentAnimation) != null) {
                        animatedFileDrawable.addSecondParentView(this.containerView);
                        drawable = this.currentAnimation;
                    } else if (this.sharedMediaType == 1) {
                        if (!messageObject.canPreviewDocument()) {
                            imageReceiver.setImageBitmap(new OtherDocumentPlaceholderDrawable(this.parentActivity, this.containerView, messageObject));
                            return;
                        }
                        TLRPC.Document document5 = messageObject.getDocument();
                        imageReceiver.setNeedsQualityThumb(true);
                        ImageReceiver.BitmapHolder bitmapHolder6 = this.currentThumb;
                        if (bitmapHolder6 == null || imageReceiver != this.centerImage) {
                            bitmapHolder6 = null;
                        }
                        int i5 = (int) (2048.0f / AndroidUtilities.density);
                        boolean z6 = (DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 8) != 0 || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(document5).exists();
                        imageReceiver.setImage(z6 ? ImageLocation.getForDocument(document5) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(i5), Integer.valueOf(i5)), bitmapHolder6 == null ? ImageLocation.getForDocument(FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100), document5) : null, "b", bitmapHolder6 != null ? new BitmapDrawable(bitmapHolder6.bitmap) : null, document5.size, null, messageObject, 0);
                        imageReceiver.setMark(z6 ? null : 1);
                        return;
                    }
                    imageReceiver.setImageBitmap(drawable);
                    return;
                }
                long[] jArr = new long[1];
                ImageLocation imageLocation4 = getImageLocation(i, jArr);
                TLObject fileLocation2 = getFileLocation(i, jArr);
                imageReceiver.setNeedsQualityThumb(true);
                if (imageLocation4 != null) {
                    ImageReceiver.BitmapHolder bitmapHolder7 = this.currentThumb;
                    if (bitmapHolder7 == null || imageReceiver != this.centerImage) {
                        bitmapHolder7 = null;
                    }
                    if (jArr[0] == 0) {
                        jArr[0] = -1;
                    }
                    if (messageObject != null) {
                        photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 100);
                        tLObject = messageObject.photoThumbsObject;
                    } else {
                        photoSize = null;
                        tLObject = null;
                    }
                    if (photoSize != null && photoSize == fileLocation2) {
                        photoSize = null;
                    }
                    if (photoSize == null && (photo = imageLocation4.photo) != null && photo.sizes != null) {
                        int i6 = 0;
                        while (true) {
                            if (i6 >= imageLocation4.photo.sizes.size()) {
                                break;
                            } else if (imageLocation4.photo.sizes.get(i6) instanceof TLRPC.TL_photoStrippedSize) {
                                photoSize = imageLocation4.photo.sizes.get(i6);
                                tLObject = imageLocation4.photo;
                                break;
                            } else {
                                i6++;
                            }
                        }
                    }
                    int i7 = ((messageObject == null || !messageObject.isWebpage()) && this.avatarsDialogId == 0 && !this.isEvent) ? 0 : 1;
                    if (messageObject == null) {
                        long j4 = this.avatarsDialogId;
                        if (j4 != 0) {
                            int i8 = (j4 > 0L ? 1 : (j4 == 0L ? 0 : -1));
                            MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
                            TLObject user = i8 > 0 ? messagesController.getUser(Long.valueOf(this.avatarsDialogId)) : messagesController.getChat(Long.valueOf(-this.avatarsDialogId));
                            if (tLObject != null) {
                                user = tLObject;
                            }
                            if (bitmapHolder7 == null && (photoSize instanceof TLRPC.TL_photoStrippedSize)) {
                                bitmapHolder7 = new ImageReceiver.BitmapHolder(ImageLoader.getStrippedPhotoBitmap(photoSize.bytes, "b"));
                            }
                            tLObject2 = user;
                            imageLocation = null;
                            String str7 = ImageLoader.AUTOPLAY_FILTER;
                            if (imageLocation == null) {
                            }
                        } else {
                            imageLocation = null;
                            tLObject2 = null;
                            String str72 = ImageLoader.AUTOPLAY_FILTER;
                            if (imageLocation == null) {
                            }
                        }
                    } else if (this.sharedMediaType != 5 || (documentVideoThumb = MessageObject.getDocumentVideoThumb((document = messageObject.getDocument()))) == null) {
                        tLObject2 = messageObject;
                        imageLocation = null;
                        String str722 = ImageLoader.AUTOPLAY_FILTER;
                        if (imageLocation == null) {
                            if (this.sharedMediaType != 5) {
                                str722 = null;
                            }
                            imageReceiver.setImage(imageLocation4, str722, imageLocation, null, bitmapHolder7 == null ? ImageLocation.getForObject(photoSize, tLObject) : null, "b", bitmapHolder7 != null ? new BitmapDrawable(bitmapHolder7.bitmap) : null, jArr[0], null, tLObject2, i7);
                            imageReceiver.setAllowStartAnimation(true);
                            return;
                        }
                        i2 = 1;
                        if (this.avatarsDialogId == 0 || imageLocation4.imageType != 2) {
                            str722 = null;
                        }
                        boolean z7 = (DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) != 0 || this.currentIndex == i || FileLoader.getInstance(this.currentAccount).getPathToAttach(fileLocation2).exists();
                        imageReceiver.setImage(z7 ? imageLocation4 : null, str722, bitmapHolder7 == null ? ImageLocation.getForObject(photoSize, tLObject) : null, "b", bitmapHolder7 != null ? new BitmapDrawable(bitmapHolder7.bitmap) : null, jArr[0], null, tLObject2, i7);
                    } else {
                        imageLocation = ImageLocation.getForDocument(documentVideoThumb, document);
                        tLObject2 = messageObject;
                        String str7222 = ImageLoader.AUTOPLAY_FILTER;
                        if (imageLocation == null) {
                        }
                    }
                }
                imageReceiver.setMark(obj);
                return;
            } else if (i < 0 || i >= this.imagesArrLocals.size()) {
                bitmap = null;
            } else {
                Object obj2 = this.imagesArrLocals.get(i);
                int photoSize3 = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
                ImageReceiver.BitmapHolder bitmapHolder8 = this.currentThumb;
                if (bitmapHolder8 == null || imageReceiver != this.centerImage) {
                    bitmapHolder8 = null;
                }
                if (bitmapHolder8 == null) {
                    bitmapHolder8 = this.placeProvider.getThumbForPhoto(null, null, i);
                }
                if (obj2 instanceof MediaController.PhotoEntry) {
                    MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj2;
                    MediaController.CropState cropState2 = photoEntry.cropState;
                    boolean z8 = photoEntry.isVideo;
                    if (z8) {
                        str6 = photoEntry.thumbPath;
                        if (str6 == null) {
                            str6 = "vthumb://" + photoEntry.imageId + ":" + photoEntry.path;
                        } else if (this.fromCamera) {
                            Bitmap decodeFile = BitmapFactory.decodeFile(str6);
                            if (decodeFile != null) {
                                bitmapHolder8 = new ImageReceiver.BitmapHolder(decodeFile);
                                photoEntry.thumbPath = null;
                            }
                            format = null;
                            str6 = null;
                        }
                        format = null;
                    } else {
                        str6 = photoEntry.filterPath;
                        if (str6 == null) {
                            imageReceiver.setOrientation(photoEntry.orientation, photoEntry.invert, false);
                            str6 = photoEntry.path;
                        }
                        format = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize3), Integer.valueOf(photoSize3));
                    }
                    z = z8;
                    str5 = str6;
                    bitmapHolder = bitmapHolder8;
                    cropState = cropState2;
                    imageLocation3 = null;
                    photoSize2 = null;
                    tLObject3 = null;
                    document2 = null;
                    j2 = 0;
                    i4 = 0;
                } else {
                    str4 = "d";
                    if (obj2 instanceof TLRPC.BotInlineResult) {
                        TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) obj2;
                        if (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(botInlineResult.document)) {
                            TLRPC.Document document6 = botInlineResult.document;
                            if (document6 != null) {
                                TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(document6.thumbs, 90);
                                tLObject3 = botInlineResult.document;
                                bitmapHolder = bitmapHolder8;
                                webFile = null;
                                imageLocation3 = null;
                                document2 = null;
                                z = false;
                                str5 = null;
                                j2 = 0;
                                i4 = 1;
                                cropState = null;
                                photoSize2 = closestPhotoSizeWithSize2;
                                str4 = null;
                            } else {
                                TLRPC.WebDocument webDocument = botInlineResult.thumb;
                                if (webDocument instanceof TLRPC.TL_webDocument) {
                                    webFile = WebFile.createWithWebDocument(webDocument);
                                    bitmapHolder = bitmapHolder8;
                                    str4 = null;
                                    imageLocation3 = null;
                                    photoSize2 = null;
                                    tLObject3 = null;
                                    document2 = null;
                                    z = false;
                                    str5 = null;
                                    j2 = 0;
                                    i4 = 1;
                                    cropState = null;
                                }
                            }
                        } else if (!botInlineResult.type.equals("gif") || (document4 = botInlineResult.document) == null) {
                            TLRPC.Photo photo3 = botInlineResult.photo;
                            if (photo3 != null) {
                                TLRPC.PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(photo3.sizes, AndroidUtilities.getPhotoSize());
                                TLObject tLObject4 = botInlineResult.photo;
                                long j5 = closestPhotoSizeWithSize3.size;
                                format = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize3), Integer.valueOf(photoSize3));
                                bitmapHolder = bitmapHolder8;
                                tLObject3 = tLObject4;
                                imageLocation3 = null;
                                str5 = null;
                                i4 = 1;
                                cropState = null;
                                photoSize2 = closestPhotoSizeWithSize3;
                                j2 = j5;
                                document2 = null;
                                z = false;
                            } else if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
                                if (botInlineResult.type.equals("gif")) {
                                    TLRPC.WebDocument webDocument2 = botInlineResult.thumb;
                                    if ((webDocument2 instanceof TLRPC.TL_webDocument) && "video/mp4".equals(webDocument2.mime_type)) {
                                        imageLocation3 = ImageLocation.getForWebFile(WebFile.createWithWebDocument(botInlineResult.thumb));
                                        webFile = WebFile.createWithWebDocument(botInlineResult.content);
                                        bitmapHolder = bitmapHolder8;
                                        photoSize2 = null;
                                        tLObject3 = null;
                                        document2 = null;
                                        z = false;
                                        str5 = null;
                                        j2 = 0;
                                        i4 = 1;
                                        cropState = null;
                                    }
                                } else {
                                    str4 = String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize3), Integer.valueOf(photoSize3));
                                }
                                imageLocation3 = null;
                                webFile = WebFile.createWithWebDocument(botInlineResult.content);
                                bitmapHolder = bitmapHolder8;
                                photoSize2 = null;
                                tLObject3 = null;
                                document2 = null;
                                z = false;
                                str5 = null;
                                j2 = 0;
                                i4 = 1;
                                cropState = null;
                            }
                        } else {
                            long j6 = document4.size;
                            TLRPC.VideoSize documentVideoThumb2 = MessageObject.getDocumentVideoThumb(document4);
                            bitmapHolder = bitmapHolder8;
                            j2 = j6;
                            photoSize2 = null;
                            tLObject3 = null;
                            z = false;
                            str5 = null;
                            i4 = 1;
                            cropState = null;
                            document2 = document4;
                            imageLocation3 = documentVideoThumb2 != null ? ImageLocation.getForDocument(documentVideoThumb2, document4) : null;
                            webFile = null;
                        }
                        bitmapHolder = bitmapHolder8;
                        webFile = null;
                        str4 = null;
                        imageLocation3 = null;
                        photoSize2 = null;
                        tLObject3 = null;
                        document2 = null;
                        z = false;
                        str5 = null;
                        j2 = 0;
                        i4 = 1;
                        cropState = null;
                    } else if (obj2 instanceof MediaController.SearchImage) {
                        MediaController.SearchImage searchImage = (MediaController.SearchImage) obj2;
                        TLRPC.PhotoSize photoSize4 = searchImage.photoSize;
                        if (photoSize4 != null) {
                            tLObject3 = searchImage.photo;
                            j3 = photoSize4.size;
                            str5 = null;
                        } else {
                            String str8 = searchImage.filterPath;
                            if (str8 != null) {
                                str5 = str8;
                                photoSize4 = null;
                                tLObject3 = null;
                                j3 = 0;
                            } else {
                                TLRPC.Document document7 = searchImage.document;
                                if (document7 != null) {
                                    j3 = document7.size;
                                    document3 = document7;
                                    photoSize4 = null;
                                    tLObject3 = null;
                                    str5 = null;
                                    cropState = searchImage.cropState;
                                    bitmapHolder = bitmapHolder8;
                                    webFile = null;
                                    i4 = 1;
                                    photoSize2 = photoSize4;
                                    imageLocation3 = null;
                                    long j7 = j3;
                                    document2 = document3;
                                    j2 = j7;
                                    z = false;
                                } else {
                                    String str9 = searchImage.imageUrl;
                                    j3 = searchImage.size;
                                    str5 = str9;
                                    photoSize4 = null;
                                    tLObject3 = null;
                                }
                            }
                        }
                        document3 = null;
                        cropState = searchImage.cropState;
                        bitmapHolder = bitmapHolder8;
                        webFile = null;
                        i4 = 1;
                        photoSize2 = photoSize4;
                        imageLocation3 = null;
                        long j72 = j3;
                        document2 = document3;
                        j2 = j72;
                        z = false;
                    } else {
                        bitmapHolder = bitmapHolder8;
                        webFile = null;
                        str4 = null;
                        imageLocation3 = null;
                        photoSize2 = null;
                        tLObject3 = null;
                        document2 = null;
                        z = false;
                        str5 = null;
                        j2 = 0;
                        i4 = 0;
                        cropState = null;
                    }
                    if (document2 == null) {
                        TLRPC.PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(document2.thumbs, 90);
                        if (imageLocation3 != null) {
                            z2 = z;
                            z3 = false;
                            imageReceiver.setImage(ImageLocation.getForDocument(document2), "d", imageLocation3, null, bitmapHolder == null ? ImageLocation.getForDocument(closestPhotoSizeWithSize4, document2) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize3), Integer.valueOf(photoSize3)), bitmapHolder != null ? new BitmapDrawable(bitmapHolder.bitmap) : null, j2, null, obj2, i4);
                        } else {
                            z2 = z;
                            z3 = false;
                            imageReceiver.setImage(ImageLocation.getForDocument(document2), "d", bitmapHolder == null ? ImageLocation.getForDocument(closestPhotoSizeWithSize4, document2) : null, String.format(Locale.US, "%d_%d", Integer.valueOf(photoSize3), Integer.valueOf(photoSize3)), bitmapHolder != null ? new BitmapDrawable(bitmapHolder.bitmap) : null, j2, null, obj2, i4);
                        }
                    } else {
                        z2 = z;
                        z3 = false;
                        if (photoSize2 == null) {
                            if (webFile != null) {
                                ImageLocation forWebFile = ImageLocation.getForWebFile(webFile);
                                if (imageLocation3 != null) {
                                    imageReceiver.setImage(forWebFile, str4, imageLocation3, (String) null, (Drawable) null, obj2, i4);
                                } else {
                                    if (bitmapHolder != null) {
                                        drawable4 = new BitmapDrawable(bitmapHolder.bitmap);
                                        z4 = z2;
                                    } else {
                                        z4 = z2;
                                        drawable4 = (!z4 || (activity2 = this.parentActivity) == null) ? null : activity2.getResources().getDrawable(R.drawable.nophotos);
                                    }
                                    imageReceiver.setImage(forWebFile, str4, drawable4, null, obj2, i4);
                                }
                            } else {
                                z4 = z2;
                                if (bitmapHolder != null) {
                                    drawable3 = new BitmapDrawable(bitmapHolder.bitmap);
                                } else if (!z4 || (activity = this.parentActivity) == null) {
                                    drawable2 = null;
                                    imageReceiver.setImage(str5, str4, drawable2, null, j2);
                                } else {
                                    drawable3 = activity.getResources().getDrawable(R.drawable.nophotos);
                                }
                                drawable2 = drawable3;
                                imageReceiver.setImage(str5, str4, drawable2, null, j2);
                            }
                            MediaController.CropState cropState3 = cropState;
                            if (cropTransform != null) {
                                if (cropState3 != null) {
                                    cropTransform.setViewTransform(true, cropState3.cropPx, cropState3.cropPy, cropState3.cropRotate, cropState3.transformRotation, cropState3.cropScale, 1.0f, 1.0f, cropState3.cropPw, cropState3.cropPh, 0.0f, 0.0f, cropState3.mirrored);
                                } else {
                                    cropTransform.setViewTransform(z3);
                                }
                            }
                            if (imageReceiver == this.leftImage) {
                                this.leftCropState = cropState3;
                                this.leftImageIsVideo = z4;
                                return;
                            } else if (imageReceiver == this.rightImage) {
                                this.rightCropState = cropState3;
                                this.rightImageIsVideo = z4;
                                return;
                            } else {
                                return;
                            }
                        }
                        imageReceiver.setImage(ImageLocation.getForObject(photoSize2, tLObject3), str4, bitmapHolder != null ? new BitmapDrawable(bitmapHolder.bitmap) : null, j2, (String) null, obj2, i4);
                    }
                    z4 = z2;
                    MediaController.CropState cropState32 = cropState;
                    if (cropTransform != null) {
                    }
                    if (imageReceiver == this.leftImage) {
                    }
                }
                str4 = format;
                webFile = null;
                if (document2 == null) {
                }
                z4 = z2;
                MediaController.CropState cropState322 = cropState;
                if (cropTransform != null) {
                }
                if (imageReceiver == this.leftImage) {
                }
            }
            imageReceiver.setImageBitmap(bitmap);
            return;
        } else if (i < 0 || i >= this.secureDocuments.size()) {
            return;
        } else {
            this.secureDocuments.get(i);
            AndroidUtilities.getPhotoSize();
            ImageReceiver.BitmapHolder bitmapHolder9 = this.currentThumb;
            if (bitmapHolder9 == null || imageReceiver != this.centerImage) {
                bitmapHolder9 = null;
            }
            if (bitmapHolder9 == null) {
                bitmapHolder9 = this.placeProvider.getThumbForPhoto(null, null, i);
            }
            SecureDocument secureDocument = (SecureDocument) this.secureDocuments.get(i);
            j = secureDocument.secureFile.size;
            ImageLocation forSecureDocument = ImageLocation.getForSecureDocument(secureDocument);
            bitmapDrawable = bitmapHolder9 != null ? new BitmapDrawable(bitmapHolder9.bitmap) : null;
            parentObject = null;
            i3 = 0;
            imageReceiver2 = imageReceiver;
            imageLocation2 = forSecureDocument;
            str2 = "d";
            forDocument = null;
            str3 = null;
            str = null;
        }
        imageReceiver2.setImage(imageLocation2, str2, forDocument, str3, bitmapDrawable, j, str, parentObject, i3);
    }

    private void setIndexToPaintingOverlay(int i, PaintingOverlay paintingOverlay) {
        String str;
        ArrayList<VideoEditedInfo.MediaEntity> arrayList;
        boolean z;
        if (paintingOverlay == null) {
            return;
        }
        paintingOverlay.reset();
        paintingOverlay.setVisibility(8);
        if (this.imagesArrLocals.isEmpty() || i < 0 || i >= this.imagesArrLocals.size()) {
            return;
        }
        Object obj = this.imagesArrLocals.get(i);
        if (obj instanceof MediaController.PhotoEntry) {
            MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
            boolean z2 = photoEntry.isVideo;
            String str2 = photoEntry.paintPath;
            arrayList = photoEntry.mediaEntities;
            z = z2;
            str = str2;
        } else {
            if (obj instanceof MediaController.SearchImage) {
                MediaController.SearchImage searchImage = (MediaController.SearchImage) obj;
                String str3 = searchImage.paintPath;
                arrayList = searchImage.mediaEntities;
                str = str3;
            } else {
                str = null;
                arrayList = null;
            }
            z = false;
        }
        paintingOverlay.setVisibility(0);
        paintingOverlay.setData(str, arrayList, z, false, this.sendPhotoType != 11);
    }

    /* JADX WARN: Code restructure failed: missing block: B:1412:0x0c67, code lost:
        if (r3.mirrored == false) goto L572;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1415:0x0c6d, code lost:
        if (r3.mirrored != false) goto L572;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1420:0x0c76, code lost:
        if (r3.mirrored != false) goto L572;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1421:0x0c78, code lost:
        r1 = r11;
     */
    /* JADX WARN: Code restructure failed: missing block: B:990:0x03af, code lost:
        if (r2 != null) goto L64;
     */
    /* JADX WARN: Code restructure failed: missing block: B:997:0x03c0, code lost:
        if (r2 != null) goto L64;
     */
    /* JADX WARN: Code restructure failed: missing block: B:999:0x03c3, code lost:
        r2.updateShow(false, r42);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1140:0x0677  */
    /* JADX WARN: Removed duplicated region for block: B:1192:0x07b6  */
    /* JADX WARN: Removed duplicated region for block: B:1205:0x0808  */
    /* JADX WARN: Removed duplicated region for block: B:1208:0x080d  */
    /* JADX WARN: Removed duplicated region for block: B:1211:0x0814  */
    /* JADX WARN: Removed duplicated region for block: B:1218:0x0835  */
    /* JADX WARN: Removed duplicated region for block: B:1219:0x0837  */
    /* JADX WARN: Removed duplicated region for block: B:1229:0x085d  */
    /* JADX WARN: Removed duplicated region for block: B:1230:0x0864  */
    /* JADX WARN: Removed duplicated region for block: B:1350:0x0b66  */
    /* JADX WARN: Removed duplicated region for block: B:1353:0x0b75  */
    /* JADX WARN: Removed duplicated region for block: B:1356:0x0b7d  */
    /* JADX WARN: Removed duplicated region for block: B:1359:0x0b8d  */
    /* JADX WARN: Removed duplicated region for block: B:1362:0x0b92  */
    /* JADX WARN: Removed duplicated region for block: B:1395:0x0c3f  */
    /* JADX WARN: Removed duplicated region for block: B:1396:0x0c41  */
    /* JADX WARN: Removed duplicated region for block: B:1399:0x0c49  */
    /* JADX WARN: Removed duplicated region for block: B:1400:0x0c4b  */
    /* JADX WARN: Removed duplicated region for block: B:1403:0x0c53  */
    /* JADX WARN: Removed duplicated region for block: B:1404:0x0c55  */
    /* JADX WARN: Removed duplicated region for block: B:1407:0x0c5d  */
    /* JADX WARN: Removed duplicated region for block: B:1417:0x0c70  */
    /* JADX WARN: Removed duplicated region for block: B:1500:0x0df7  */
    /* JADX WARN: Removed duplicated region for block: B:1508:0x0e08  */
    /* JADX WARN: Removed duplicated region for block: B:1515:0x0e21  */
    /* JADX WARN: Removed duplicated region for block: B:1521:0x0e2e  */
    /* JADX WARN: Removed duplicated region for block: B:1533:0x0e4b  */
    /* JADX WARN: Removed duplicated region for block: B:886:0x01eb  */
    /* JADX WARN: Removed duplicated region for block: B:887:0x0200  */
    /* JADX WARN: Removed duplicated region for block: B:965:0x034f  */
    /* JADX WARN: Removed duplicated region for block: B:977:0x0375  */
    /* JADX WARN: Removed duplicated region for block: B:989:0x03ad  */
    /* JADX WARN: Removed duplicated region for block: B:992:0x03b3  */
    /* JADX WARN: Type inference failed for: r2v101 */
    /* JADX WARN: Type inference failed for: r2v85 */
    /* JADX WARN: Type inference failed for: r2v86, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setIsAboutToSwitchToIndex(final int i, boolean z, boolean z2) {
        int i2;
        int i3;
        MessageObject messageObject;
        boolean z3;
        CharSequence charSequence;
        String str;
        boolean z4;
        String string;
        MessageObject messageObject2;
        MediaController.CropState cropState;
        boolean z5;
        boolean z6;
        CharSequence charSequence2;
        int i4;
        boolean z7;
        int i5;
        MediaController.CropState cropState2;
        boolean z8;
        int i6;
        boolean z9;
        boolean z10;
        CharSequence charSequence3;
        MediaController.SearchImage searchImage;
        boolean z11;
        int i7;
        boolean z12;
        float f;
        float f2;
        int i8;
        int i9;
        int i10;
        VideoEditedInfo videoEditedInfo;
        PhotoCountView photoCountView;
        ChatActivity chatActivity;
        int i11;
        ImageView imageView;
        PorterDuffColorFilter porterDuffColorFilter;
        int i12;
        TLRPC.User currentUser;
        TLRPC.Chat currentChat;
        int i13;
        int i14;
        ActionBarMenuItem actionBarMenuItem;
        long j;
        String str2;
        MessagesController.DialogPhotos dialogPhotos;
        PhotoCountView photoCountView2;
        CharSequence charSequence4;
        String str3;
        boolean z13;
        boolean z14;
        String str4;
        int i15;
        TLRPC.Photo photo;
        FrameLayout frameLayout;
        Integer num;
        int i16;
        ActionBarMenuItem actionBarMenuItem2;
        ChatActivity chatActivity2;
        int i17;
        boolean z15;
        TLRPC.Message message;
        CharSequence charSequence5;
        ?? r2;
        int i18;
        int id;
        int i19;
        boolean z16;
        PhotoCountView photoCountView3;
        int i20;
        int i21;
        int id2;
        int i22;
        boolean z17;
        PhotoCountView photoCountView4;
        int i23;
        TLRPC.Chat chat;
        boolean z18;
        TLRPC.Message message2;
        TLRPC.Message message3;
        if (z || this.switchingToIndex != i) {
            int i24 = this.switchingToIndex;
            boolean z19 = i >= i24;
            this.switchingToIndex = i;
            getFileName(i);
            if (z2) {
                TransitionSet transitionSet = new TransitionSet();
                transitionSet.addTransition(new Fade());
                transitionSet.addTransition(new ChangeBounds());
                transitionSet.setOrdering(0);
                transitionSet.setDuration(220L);
                transitionSet.setInterpolator((TimeInterpolator) CubicBezierInterpolator.DEFAULT);
                TransitionManager.beginDelayedTransition(this.itemsLayout, transitionSet);
            }
            this.editing = false;
            if (this.imagesArr.isEmpty()) {
                CharSequence charSequence6 = null;
                if (!this.secureDocuments.isEmpty()) {
                    this.allowShare = false;
                    this.menuItem.showSubItem(6);
                    this.menuItem.hideSubItem(1);
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                    PhotoCountView photoCountView5 = this.countView;
                    if (photoCountView5 != null) {
                        photoCountView5.updateShow(this.secureDocuments.size() > 1, true);
                        this.countView.set(this.switchingToIndex + 1, this.secureDocuments.size());
                    }
                    this.actionBarContainer.setTitle("");
                    this.actionBarContainer.setSubtitle("", z2);
                    charSequence = null;
                    str4 = null;
                    messageObject = null;
                } else if (this.imagesArrLocations.isEmpty()) {
                    if (this.imagesArrLocals.isEmpty()) {
                        PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
                        if (pageBlocksAdapter != null) {
                            int itemsCount = pageBlocksAdapter.getItemsCount();
                            int i25 = this.switchingToIndex;
                            if (i25 < 0 || i25 >= itemsCount) {
                                return;
                            }
                            this.menuItem.hideSubItem(21);
                            this.menuItem.hideSubItem(22);
                            this.allowShare = !MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.currentDialogId) && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.hasRevealedExtendedMedia());
                            TLRPC.PageBlock pageBlock = this.pageBlocksAdapter.get(this.switchingToIndex);
                            CharSequence caption = this.pageBlocksAdapter.getCaption(this.switchingToIndex);
                            boolean isVideo = this.pageBlocksAdapter.isVideo(this.switchingToIndex);
                            if (isVideo) {
                                if (this.allowShare) {
                                    i2 = 11;
                                    this.menuItem.showSubItem(11);
                                } else {
                                    i2 = 11;
                                    this.menuItem.hideSubItem(11);
                                }
                                this.menuItem.checkHideMenuItem();
                                if (this.pipAvailable) {
                                    setItemVisible(this.pipItem, true, true);
                                } else {
                                    this.pipItem.setEnabled(false);
                                    setItemVisible(this.pipItem, true, true, 0.5f);
                                }
                            } else {
                                i2 = 11;
                                this.menuItem.hideSubItem(11);
                                setItemVisible(this.pipItem, false, true);
                            }
                            i3 = 8;
                            if (this.bottomLayout.getVisibility() != 8) {
                                this.bottomLayout.setVisibility(8);
                            }
                            messageObject = null;
                            this.bottomLayout.setTag(null);
                            PhotoCountView photoCountView6 = this.countView;
                            if (photoCountView6 != null) {
                                photoCountView6.updateShow(itemsCount > 1, true);
                                this.countView.set(this.switchingToIndex + 1, itemsCount);
                            }
                            if (this.currentAnimation != null || (!this.pageBlocksAdapter.isVideo(i) && this.pageBlocksAdapter.isHardwarePlayer(i))) {
                                this.menuItem.hideSubItem(1);
                                if (this.allowShare) {
                                    this.menuItem.showSubItem(14);
                                } else {
                                    this.menuItem.hideSubItem(14);
                                }
                                this.menuItem.checkHideMenuItem();
                                string = LocaleController.getString("AttachGif", R.string.AttachGif);
                            } else {
                                string = itemsCount == 1 ? isVideo ? LocaleController.getString("AttachVideo", R.string.AttachVideo) : LocaleController.getString("AttachPhoto", R.string.AttachPhoto) : null;
                                this.menuItem.showSubItem(1);
                                this.menuItem.hideSubItem(14);
                                this.menuItem.checkHideMenuItem();
                            }
                            this.groupedPhotosListView.fillList();
                            this.pageBlocksAdapter.updateSlideshowCell(pageBlock);
                            charSequence = caption;
                            z4 = false;
                            str = string;
                            z3 = z2;
                        } else {
                            i2 = 11;
                            i3 = 8;
                            messageObject = null;
                            this.menuItem.hideSubItem(21);
                            this.menuItem.hideSubItem(22);
                            z3 = z2;
                            charSequence = null;
                            str = null;
                            z4 = false;
                        }
                    } else if (i < 0 || i >= this.imagesArrLocals.size()) {
                        return;
                    } else {
                        this.menuItem.hideSubItem(21);
                        this.menuItem.hideSubItem(22);
                        Object obj = this.imagesArrLocals.get(i);
                        if (obj instanceof TLRPC.BotInlineResult) {
                            TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult) obj;
                            this.currentBotInlineResult = botInlineResult;
                            TLRPC.Document document = botInlineResult.document;
                            z8 = document != null ? MessageObject.isVideoDocument(document) : botInlineResult.content instanceof TLRPC.TL_webDocument ? botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) : false;
                            cropState2 = null;
                            z7 = z2;
                            i6 = 0;
                            z9 = false;
                            z10 = false;
                            i4 = 8;
                        } else {
                            boolean z20 = obj instanceof MediaController.PhotoEntry;
                            if (z20) {
                                MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) obj;
                                this.currentPathObject = photoEntry.path;
                                boolean z21 = photoEntry.isVideo;
                                cropState = photoEntry.cropState;
                                z6 = z21;
                                z5 = false;
                            } else {
                                if (obj instanceof MediaController.SearchImage) {
                                    MediaController.SearchImage searchImage2 = (MediaController.SearchImage) obj;
                                    this.currentPathObject = searchImage2.getPathToAttach();
                                    cropState = searchImage2.cropState;
                                    if (searchImage2.type == 1) {
                                        z5 = true;
                                        z6 = false;
                                    }
                                } else {
                                    cropState = null;
                                }
                                z5 = false;
                                z6 = false;
                            }
                            if (z6) {
                                z7 = !this.isCurrentVideo ? false : z2;
                                int i26 = this.sendPhotoType;
                                if (i26 != -1) {
                                    this.isCurrentVideo = true;
                                }
                                if (!z20 || (videoEditedInfo = ((MediaController.PhotoEntry) obj).editedInfo) == null) {
                                    i7 = -1;
                                    z12 = false;
                                    f = 0.0f;
                                    f2 = 1.0f;
                                    i8 = -1;
                                } else {
                                    boolean z22 = videoEditedInfo.muted;
                                    float f3 = videoEditedInfo.start;
                                    float f4 = videoEditedInfo.end;
                                    i8 = videoEditedInfo.compressQuality;
                                    i7 = -1;
                                    f2 = f4;
                                    z12 = z22;
                                    f = f3;
                                }
                                if (i26 != i7) {
                                    i4 = 8;
                                    float f5 = f2;
                                    charSequence2 = null;
                                    processOpenVideo(this.currentPathObject, z12, f, f5, i8);
                                    if (this.isDocumentsPicker) {
                                        showVideoTimeline(false, z2);
                                        this.videoAvatarTooltip.setVisibility(8);
                                        this.cropItem.setVisibility(8);
                                        this.cropItem.setTag(null);
                                        this.tuneItem.setVisibility(8);
                                        this.tuneItem.setTag(null);
                                        this.paintItem.setVisibility(8);
                                        this.paintItem.setTag(null);
                                        this.rotateItem.setVisibility(8);
                                        this.rotateItem.setTag(null);
                                        this.mirrorItem.setVisibility(8);
                                        this.mirrorItem.setTag(null);
                                        AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                                        this.compressItem.setVisibility(8);
                                    } else {
                                        showVideoTimeline(true, z2);
                                        if (this.sendPhotoType != 1) {
                                            this.videoAvatarTooltip.setVisibility(8);
                                            this.cropItem.setVisibility(0);
                                            this.cropItem.setTag(1);
                                            this.rotateItem.setVisibility(8);
                                            this.rotateItem.setTag(null);
                                            this.mirrorItem.setVisibility(8);
                                            this.mirrorItem.setTag(null);
                                            AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, true, 1.0f, z2);
                                            i9 = 0;
                                            this.compressItem.setVisibility(0);
                                            i10 = 1;
                                        } else {
                                            i9 = 0;
                                            this.videoAvatarTooltip.setVisibility(0);
                                            this.cropItem.setVisibility(8);
                                            this.cropItem.setTag(null);
                                            this.rotateItem.setVisibility(0);
                                            i10 = 1;
                                            this.rotateItem.setTag(1);
                                            this.mirrorItem.setVisibility(0);
                                            this.mirrorItem.setTag(1);
                                            AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                                            this.compressItem.setVisibility(8);
                                        }
                                        this.tuneItem.setVisibility(i9);
                                        this.tuneItem.setTag(Integer.valueOf(i10));
                                        this.paintItem.setVisibility(i9);
                                        this.paintItem.setTag(Integer.valueOf(i10));
                                    }
                                } else {
                                    charSequence2 = null;
                                    i4 = 8;
                                }
                            } else {
                                charSequence2 = null;
                                i4 = 8;
                                showVideoTimeline(false, z2);
                                this.videoAvatarTooltip.setVisibility(8);
                                AndroidUtilities.updateViewVisibilityAnimated(this.muteItem, false, 1.0f, z2);
                                boolean z23 = this.isCurrentVideo ? false : z2;
                                this.isCurrentVideo = false;
                                this.compressItem.setVisibility(8);
                                if (z5 || (i5 = this.sendPhotoType) == 10 || this.isDocumentsPicker) {
                                    this.paintItem.setVisibility(8);
                                    this.paintItem.setTag(null);
                                    this.cropItem.setVisibility(8);
                                    this.rotateItem.setVisibility(8);
                                    this.mirrorItem.setVisibility(8);
                                    this.tuneItem.setVisibility(8);
                                    this.tuneItem.setTag(null);
                                } else {
                                    if (i5 == 4 || i5 == 5) {
                                        this.paintItem.setVisibility(8);
                                        this.paintItem.setTag(null);
                                        this.tuneItem.setVisibility(8);
                                        this.tuneItem.setTag(null);
                                    } else {
                                        this.paintItem.setVisibility(0);
                                        this.paintItem.setTag(1);
                                        this.tuneItem.setVisibility(0);
                                        this.tuneItem.setTag(1);
                                    }
                                    this.cropItem.setVisibility(this.sendPhotoType != 1 ? 0 : 8);
                                    this.rotateItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                                    this.mirrorItem.setVisibility(this.sendPhotoType != 1 ? 8 : 0);
                                }
                                if (z2) {
                                    this.actionBar.beginDelayedTransition();
                                }
                                this.actionBarContainer.setSubtitle("");
                                z7 = z23;
                            }
                            if (z20) {
                                MediaController.PhotoEntry photoEntry2 = (MediaController.PhotoEntry) obj;
                                this.fromCamera = photoEntry2.bucketId == 0 && photoEntry2.dateTaken == 0 && this.imagesArrLocals.size() == 1;
                                charSequence3 = this.hasCaptionForAllMedia ? this.captionForAllMedia : photoEntry2.caption;
                                searchImage = photoEntry2;
                            } else if (obj instanceof MediaController.SearchImage) {
                                MediaController.SearchImage searchImage3 = (MediaController.SearchImage) obj;
                                charSequence3 = searchImage3.caption;
                                searchImage = searchImage3;
                            } else {
                                charSequence6 = charSequence2;
                                cropState2 = cropState;
                                z8 = z6;
                                i6 = 0;
                                z9 = false;
                                z10 = false;
                            }
                            i6 = searchImage.ttl;
                            z9 = searchImage.isFiltered;
                            z10 = searchImage.isPainted;
                            z11 = searchImage.isCropped;
                            charSequence6 = charSequence3;
                            cropState2 = cropState;
                            z8 = z6;
                            if (this.bottomLayout.getVisibility() != i4) {
                                this.bottomLayout.setVisibility(i4);
                            }
                            this.bottomLayout.setTag(null);
                            photoCountView = this.countView;
                            if (photoCountView != null) {
                                photoCountView.updateShow(false, z2);
                            }
                            String string2 = !this.fromCamera ? z8 ? LocaleController.getString("AttachVideo", R.string.AttachVideo) : LocaleController.getString("AttachPhoto", R.string.AttachPhoto) : null;
                            chatActivity = this.parentChatActivity;
                            if (chatActivity != null) {
                                if (chatActivity.getChatMode() == 3) {
                                    long savedDialogId = this.parentChatActivity.getSavedDialogId();
                                    int i27 = (savedDialogId > 0L ? 1 : (savedDialogId == 0L ? 0 : -1));
                                    MessagesController messagesController = this.parentChatActivity.getMessagesController();
                                    if (i27 >= 0) {
                                        currentUser = messagesController.getUser(Long.valueOf(savedDialogId));
                                        currentChat = null;
                                    } else {
                                        currentChat = messagesController.getChat(Long.valueOf(-savedDialogId));
                                        currentUser = null;
                                    }
                                } else {
                                    currentUser = this.parentChatActivity.getCurrentUser();
                                    currentChat = this.parentChatActivity.getCurrentChat();
                                }
                                if (currentChat != null) {
                                    string2 = currentChat.title;
                                } else {
                                    if (UserObject.isUserSelf(currentUser)) {
                                        i13 = this.parentChatActivity.getChatMode() == 3 ? R.string.MyNotes : R.string.SavedMessages;
                                    } else if (UserObject.isAnonymous(currentUser)) {
                                        i13 = R.string.AnonymousForward;
                                    } else {
                                        string2 = UserObject.getUserName(currentUser);
                                    }
                                    string2 = LocaleController.getString(i13);
                                }
                            }
                            i11 = this.sendPhotoType;
                            if (i11 != 0 || i11 == 4 || ((i11 == 2 || i11 == 5) && this.imagesArrLocals.size() > 1)) {
                                this.checkImageView.setChecked(this.placeProvider.isPhotoChecked(this.switchingToIndex), false);
                            }
                            updateCaptionTextForCurrentPhoto(obj);
                            PorterDuffColorFilter porterDuffColorFilter2 = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                            this.captionEdit.setIsVideo(z8);
                            this.captionEdit.setTimer(i6);
                            this.paintItem.setColorFilter(!z10 ? porterDuffColorFilter2 : null);
                            this.cropItem.setColorFilter(!z11 ? porterDuffColorFilter2 : null);
                            this.tuneItem.setColorFilter(!z9 ? porterDuffColorFilter2 : null);
                            if (this.fromCamera) {
                                imageView = this.mirrorItem;
                                if (cropState2 != null) {
                                }
                                porterDuffColorFilter = null;
                            } else {
                                imageView = this.mirrorItem;
                                if (cropState2 != null) {
                                    boolean z24 = this.isCurrentVideo;
                                    if (z24) {
                                    }
                                    if (!z24) {
                                    }
                                }
                                porterDuffColorFilter = null;
                            }
                            imageView.setColorFilter(porterDuffColorFilter);
                            this.rotateItem.setColorFilter((cropState2 != null || cropState2.transformRotation == 0) ? null : porterDuffColorFilter2);
                            this.editing = !this.needCaptionLayout && ((i12 = this.sendPhotoType) == 0 || i12 == 2 || i12 == -1);
                            charSequence = charSequence6;
                            str = string2;
                            z3 = z7;
                            z4 = false;
                            i2 = 11;
                            i3 = 8;
                            messageObject = null;
                        }
                        z11 = false;
                        if (this.bottomLayout.getVisibility() != i4) {
                        }
                        this.bottomLayout.setTag(null);
                        photoCountView = this.countView;
                        if (photoCountView != null) {
                        }
                        if (!this.fromCamera) {
                        }
                        chatActivity = this.parentChatActivity;
                        if (chatActivity != null) {
                        }
                        i11 = this.sendPhotoType;
                        if (i11 != 0) {
                        }
                        this.checkImageView.setChecked(this.placeProvider.isPhotoChecked(this.switchingToIndex), false);
                        updateCaptionTextForCurrentPhoto(obj);
                        PorterDuffColorFilter porterDuffColorFilter22 = new PorterDuffColorFilter(getThemedColor(Theme.key_chat_editMediaButton), PorterDuff.Mode.MULTIPLY);
                        this.captionEdit.setIsVideo(z8);
                        this.captionEdit.setTimer(i6);
                        this.paintItem.setColorFilter(!z10 ? porterDuffColorFilter22 : null);
                        this.cropItem.setColorFilter(!z11 ? porterDuffColorFilter22 : null);
                        this.tuneItem.setColorFilter(!z9 ? porterDuffColorFilter22 : null);
                        if (this.fromCamera) {
                        }
                        imageView.setColorFilter(porterDuffColorFilter);
                        this.rotateItem.setColorFilter((cropState2 != null || cropState2.transformRotation == 0) ? null : porterDuffColorFilter22);
                        this.editing = !this.needCaptionLayout && ((i12 = this.sendPhotoType) == 0 || i12 == 2 || i12 == -1);
                        charSequence = charSequence6;
                        str = string2;
                        z3 = z7;
                        z4 = false;
                        i2 = 11;
                        i3 = 8;
                        messageObject = null;
                    }
                    if (this.editing) {
                    }
                    this.fancyShadows = r2;
                    this.actionBar.setBackgroundColor((r2 && this.setAvatarFor == null) ? 2130706432 : 0);
                    this.actionBarContainer.setTextShadows(this.fancyShadows);
                    this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 0);
                    if (this.currentEditMode == 0) {
                    }
                    if (str != null) {
                    }
                    setCurrentCaption(messageObject, charSequence, z4, z3);
                } else if (i < 0 || i >= this.imagesArrLocations.size()) {
                    return;
                } else {
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                    if (!this.canEditAvatar || this.avatarsArr.isEmpty()) {
                        i14 = 6;
                        this.menuItem.hideSubItem(17);
                        this.menuItem.hideSubItem(16);
                        actionBarMenuItem = this.menuItem;
                    } else {
                        this.menuItem.showSubItem(17);
                        if (isCurrentAvatarSet()) {
                            this.menuItem.hideSubItem(16);
                        } else {
                            this.menuItem.showSubItem(16);
                        }
                        if (this.avatarsDialogId <= 0) {
                            TLRPC.Chat chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                            if (!isCurrentAvatarSet() && !MessageObject.canDeleteMessage(this.currentAccount, false, (TLRPC.Message) this.imagesArrMessages.get(i), chat2)) {
                                actionBarMenuItem = this.menuItem;
                                i14 = 6;
                            }
                        }
                        this.menuItem.showSubItem(6);
                        j = this.avatarsDialogId;
                        if (j == 0) {
                            if (j >= 0) {
                                str2 = UserObject.getUserName(MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(this.avatarsDialogId)));
                            } else {
                                TLRPC.Chat chat3 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-this.avatarsDialogId));
                                str2 = chat3 != null ? chat3.title : "";
                            }
                            ImageLocation imageLocation = (ImageLocation) this.imagesArrLocations.get(i);
                            if (imageLocation == null || (photo = imageLocation.photo) == null) {
                                this.actionBarContainer.setSubtitle("", z2);
                            } else {
                                this.actionBarContainer.setSubtitle(LocaleController.formatDateTime(photo.date, true), z2);
                            }
                        } else {
                            str2 = null;
                        }
                        dialogPhotos = this.dialogPhotos;
                        if (dialogPhotos != null) {
                            dialogPhotos.loadAfter(i, z19);
                        }
                        photoCountView2 = this.countView;
                        if (photoCountView2 != null) {
                            photoCountView2.updateShow(this.imagesArrLocations.size() > 1, true);
                            this.countView.set(this.switchingToIndex + 1, this.imagesArrLocations.size());
                        }
                        charSequence4 = this.customTitle;
                        if (charSequence4 == null) {
                            str3 = charSequence4;
                        } else {
                            str3 = str2;
                            if (this.isEvent) {
                                str3 = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                            }
                        }
                        z13 = this.avatarsDialogId == 0 && MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.avatarsDialogId);
                        if (z13) {
                            z14 = true;
                            this.menuItem.showSubItem(1);
                        } else {
                            z14 = true;
                            this.menuItem.hideSubItem(1);
                        }
                        this.allowShare = z13 ^ z14;
                        this.menuItem.showSubItem(10);
                        this.menuItem.checkHideMenuItem();
                        this.groupedPhotosListView.fillList();
                        this.editing = !this.needCaptionLayout && ((i15 = this.sendPhotoType) == 0 || i15 == 2 || i15 == -1);
                        str4 = str3;
                        charSequence = null;
                        messageObject = null;
                    }
                    actionBarMenuItem.hideSubItem(i14);
                    j = this.avatarsDialogId;
                    if (j == 0) {
                    }
                    dialogPhotos = this.dialogPhotos;
                    if (dialogPhotos != null) {
                    }
                    photoCountView2 = this.countView;
                    if (photoCountView2 != null) {
                    }
                    charSequence4 = this.customTitle;
                    if (charSequence4 == null) {
                    }
                    if (this.avatarsDialogId == 0) {
                    }
                    if (z13) {
                    }
                    this.allowShare = z13 ^ z14;
                    this.menuItem.showSubItem(10);
                    this.menuItem.checkHideMenuItem();
                    this.groupedPhotosListView.fillList();
                    this.editing = !this.needCaptionLayout && ((i15 = this.sendPhotoType) == 0 || i15 == 2 || i15 == -1);
                    str4 = str3;
                    charSequence = null;
                    messageObject = null;
                }
                z3 = z2;
                z4 = false;
                str = str4;
            } else {
                int i28 = this.switchingToIndex;
                if (i28 < 0 || i28 >= this.imagesArr.size()) {
                    return;
                }
                final MessageObject messageObject3 = (MessageObject) this.imagesArr.get(this.switchingToIndex);
                messageObject3.updateTranslation();
                boolean isVideo2 = messageObject3.isVideo();
                CharSequence createFromInfoString = FilteredSearchView.createFromInfoString(messageObject3, this.opennedFromMedia && !this.openedFromProfile, 0);
                this.actionBarContainer.setSubtitle((messageObject3.isQuickReply() || messageObject3.isSponsored() || (message3 = messageObject3.messageOwner) == null) ? null : LocaleController.formatDateAudio(message3.date, false), z2);
                boolean isInvoice = messageObject3.isInvoice();
                boolean z25 = MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject3.getChatId()) || ((message2 = messageObject3.messageOwner) != null && message2.noforwards) || messageObject3.hasRevealedExtendedMedia();
                FrameLayout frameLayout2 = this.bottomLayout;
                if (isVideo2) {
                    frameLayout2.setVisibility(0);
                    frameLayout = this.bottomLayout;
                    num = 1;
                } else {
                    frameLayout2.setVisibility(8);
                    frameLayout = this.bottomLayout;
                    num = null;
                }
                frameLayout.setTag(num);
                if (isInvoice) {
                    setItemVisible(this.masksItem, false, z2);
                    setItemVisible(this.editItem, false, z2);
                    this.menuItem.hideSubItem(6);
                    this.menuItem.hideSubItem(11);
                    charSequence = MessageObject.getMedia(messageObject3.messageOwner).description;
                    this.allowShare = false;
                    this.menuItem.hideSubItem(21);
                    this.menuItem.hideSubItem(22);
                } else {
                    final TranslateController translateController = MessagesController.getInstance(this.currentAccount).getTranslateController();
                    if (i24 != this.switchingToIndex) {
                        this.captionTranslated = false;
                        this.captionDetectedLanguage = null;
                    }
                    if (translateController.isContextTranslateEnabled()) {
                        translateController.detectPhotoLanguage(messageObject3, new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda14
                            @Override // org.telegram.messenger.Utilities.Callback
                            public final void run(Object obj2) {
                                PhotoViewer.this.lambda$setIsAboutToSwitchToIndex$91(i, translateController, messageObject3, (String) obj2);
                            }
                        });
                    }
                    if (!translateController.isContextTranslateEnabled() || !translateController.canTranslatePhoto(messageObject3, this.captionDetectedLanguage)) {
                        i16 = 22;
                        this.menuItem.hideSubItem(21);
                    } else if (this.captionTranslated) {
                        this.menuItem.showSubItem(22);
                        actionBarMenuItem2 = this.menuItem;
                        i16 = 21;
                        actionBarMenuItem2.hideSubItem(i16);
                        this.allowShare = !z25;
                        if (messageObject3.isNewGif() && this.allowShare && !DialogObject.isEncryptedDialog(messageObject3.getDialogId())) {
                            this.menuItem.showSubItem(14);
                        }
                        chatActivity2 = this.parentChatActivity;
                        if (messageObject3.canDeleteMessage(chatActivity2 == null && chatActivity2.isInScheduleMode(), null) || this.slideshowMessageId != 0) {
                            this.menuItem.hideSubItem(6);
                        } else {
                            this.menuItem.showSubItem(6);
                        }
                        this.menuItem.checkHideMenuItem();
                        boolean z26 = (messageObject3.getDocument() != null || messageObject3.canPreviewDocument() || messageObject3.getMimeType().startsWith("video/")) && !this.isEmbedVideo && ((i17 = messageObject3.messageOwner.ttl) == 0 || i17 >= 3600) && !z25 && canSendMediaToParentChatActivity() && !this.opennedFromMedia;
                        if (!this.isEmbedVideo) {
                            this.menuItem.showSubItem(11);
                            setItemVisible(this.editItem, false, false);
                            setItemVisible(this.pipItem, true, false);
                        } else if (isVideo2) {
                            if (!z25 || (this.slideshowMessageId != 0 ? !(MessageObject.getMedia(((MessageObject) this.imagesArr.get(0)).messageOwner).webpage == null || MessageObject.getMedia(((MessageObject) this.imagesArr.get(0)).messageOwner).webpage.url == null) : !(MessageObject.getMedia(messageObject3.messageOwner).webpage == null || MessageObject.getMedia(messageObject3.messageOwner).webpage.url == null))) {
                                this.menuItem.showSubItem(11);
                            } else {
                                this.menuItem.hideSubItem(11);
                            }
                            boolean z27 = this.masksItem.getVisibility() == 0;
                            if (z27) {
                                z15 = false;
                                setItemVisible(this.masksItem, false, false);
                            } else {
                                z15 = false;
                            }
                            if (z25) {
                                setItemVisible(this.pipItem, z15, true);
                            } else if (this.pipAvailable) {
                                setItemVisible(this.pipItem, true, !z27 && this.editItem.getAlpha() <= 0.0f);
                            } else {
                                this.pipItem.setEnabled(z15);
                                setItemVisible(this.pipItem, true, !z27 && this.editItem.getAlpha() <= 0.0f, 0.5f);
                            }
                            setItemVisible(this.editItem, false, false);
                            if (!messageObject3.hasAttachedStickers() || DialogObject.isEncryptedDialog(messageObject3.getDialogId())) {
                                this.menuItem.hideSubItem(15);
                            } else {
                                this.menuItem.showSubItem(15);
                            }
                            this.menuItem.checkHideMenuItem();
                        } else {
                            this.speedItem.setVisibility(8);
                            this.qualityItem.setVisibility(8);
                            this.speedGap.setVisibility(8);
                            this.menuItem.hideSubItem(11);
                            this.menuItem.checkHideMenuItem();
                            boolean z28 = this.pipItem.getVisibility() == 0;
                            boolean z29 = messageObject3.hasAttachedStickers() && !DialogObject.isEncryptedDialog(messageObject3.getDialogId());
                            if (z28) {
                                setItemVisible(this.pipItem, false, (z29 || z26) ? false : true);
                            }
                            setItemVisible(this.editItem, z26, (!z2 || z28 || z29) ? false : true);
                            setItemVisible(this.masksItem, z29, !z28);
                        }
                        charSequence = MessagesController.getInstance(messageObject3.currentAccount).getRestrictionReason(messageObject3.messageOwner.restriction_reason);
                        if (TextUtils.isEmpty(charSequence)) {
                            if (!this.captionTranslated || (message = messageObject3.messageOwner) == null || message.translatedText == null || !TextUtils.equals(message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
                                charSequence = messageObject3.caption;
                                z4 = this.captionTranslated;
                                if (this.currentAnimation != null) {
                                    this.menuItem.hideSubItem(1);
                                    this.menuItem.hideSubItem(10);
                                    setItemVisible(this.editItem, false, z2);
                                    ChatActivity chatActivity3 = this.parentChatActivity;
                                    if (chatActivity3 == null || !chatActivity3.isInScheduleMode()) {
                                        chat = null;
                                        z18 = false;
                                    } else {
                                        chat = null;
                                        z18 = true;
                                    }
                                    if (!messageObject3.canDeleteMessage(z18, chat)) {
                                        this.menuItem.hideSubItem(6);
                                    }
                                    this.allowShare = !z25;
                                }
                                if (messageObject3.isSponsored()) {
                                    ChatActivity chatActivity4 = this.parentChatActivity;
                                    if (chatActivity4 != null && chatActivity4.getChatMode() == 5) {
                                        photoCountView4 = this.countView;
                                    } else if (this.currentFiltered && (this.currentFilterTag != null || !TextUtils.isEmpty(this.currentFilterQuery))) {
                                        PhotoCountView photoCountView7 = this.countView;
                                        if (photoCountView7 != null) {
                                            photoCountView7.updateShow(true, z2);
                                            photoCountView3 = this.countView;
                                            i21 = this.switchingToIndex + 1;
                                            i20 = this.imagesArr.size();
                                            photoCountView3.set(i21, i20);
                                        }
                                    } else if (this.totalImagesCount + this.totalImagesCountMerge == 0 || this.needSearchImageInArr) {
                                        if (this.slideshowMessageId == 0 && (MessageObject.getMedia(messageObject3.messageOwner) instanceof TLRPC.TL_messageMediaWebPage)) {
                                            PhotoCountView photoCountView8 = this.countView;
                                            if (photoCountView8 != null) {
                                                photoCountView8.updateShow(false, z2);
                                            }
                                            if (this.isEmbedVideo) {
                                                charSequence5 = "YouTube";
                                            } else {
                                                if (!messageObject3.canPreviewDocument()) {
                                                    charSequence5 = messageObject3.isVideo() ? LocaleController.getString("AttachVideo", R.string.AttachVideo) : messageObject3.isGif() ? LocaleController.getString("AttachGif", R.string.AttachGif) : LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
                                                }
                                                charSequence5 = LocaleController.getString("AttachDocument", R.string.AttachDocument);
                                            }
                                        } else if (isInvoice) {
                                            PhotoCountView photoCountView9 = this.countView;
                                            if (photoCountView9 != null) {
                                                photoCountView9.updateShow(false, z2);
                                            }
                                            charSequence5 = MessageObject.getMedia(messageObject3.messageOwner).title;
                                        } else if (messageObject3.isVideo()) {
                                            PhotoCountView photoCountView10 = this.countView;
                                            if (photoCountView10 != null) {
                                                photoCountView10.updateShow(false, z2);
                                            }
                                        } else if (messageObject3.isGif()) {
                                            PhotoCountView photoCountView11 = this.countView;
                                            if (photoCountView11 != null) {
                                                photoCountView11.updateShow(false, z2);
                                            }
                                        } else if (messageObject3.getDocument() != null) {
                                            PhotoCountView photoCountView12 = this.countView;
                                            if (photoCountView12 != null) {
                                                photoCountView12.updateShow(false, z2);
                                            }
                                            charSequence5 = LocaleController.getString("AttachDocument", R.string.AttachDocument);
                                        }
                                        boolean z30 = (!this.editing && this.setAvatarFor == null) || this.sendPhotoType == i2;
                                        this.fancyShadows = z30;
                                        this.actionBar.setBackgroundColor((z30 && this.setAvatarFor == null) ? 2130706432 : 0);
                                        this.actionBarContainer.setTextShadows(this.fancyShadows);
                                        this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 0);
                                        if (this.currentEditMode == 0) {
                                            this.navigationBar.setBackgroundColor(this.fancyShadows ? this.sendPhotoType == i2 ? 1711276032 : 0 : this.sendPhotoType == i2 ? -16777216 : 2130706432);
                                        }
                                        if (str != null) {
                                            if (!z2) {
                                                this.actionBarContainer.setTitle(str);
                                            } else if (i24 == i) {
                                                this.actionBarContainer.setTitleAnimated(str, true, true);
                                            } else {
                                                this.actionBarContainer.setTitleAnimated(str, false, i24 > i);
                                            }
                                        }
                                        setCurrentCaption(messageObject, charSequence, z4, z3);
                                    } else if (this.opennedFromMedia) {
                                        if (this.startOffset + this.imagesArr.size() < this.totalImagesCount + this.totalImagesCountMerge && !this.loadingMoreImages && this.switchingToIndex > this.imagesArr.size() - 5) {
                                            if (this.imagesArr.isEmpty()) {
                                                id2 = 0;
                                            } else {
                                                ArrayList arrayList = this.imagesArr;
                                                id2 = ((MessageObject) arrayList.get(arrayList.size() - 1)).getId();
                                            }
                                            if (!this.endReached[0] || this.mergeDialogId == 0) {
                                                i22 = id2;
                                                z17 = false;
                                            } else {
                                                if (!this.imagesArr.isEmpty()) {
                                                    ArrayList arrayList2 = this.imagesArr;
                                                    if (((MessageObject) arrayList2.get(arrayList2.size() - 1)).getDialogId() != this.mergeDialogId) {
                                                        z17 = true;
                                                        i22 = 0;
                                                    }
                                                }
                                                i22 = id2;
                                                z17 = true;
                                            }
                                            if (!this.placeProvider.loadMore()) {
                                                MediaDataController.getInstance(this.currentAccount).loadMedia(!z17 ? this.currentDialogId : this.mergeDialogId, 40, i22, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                                this.loadingMoreImages = true;
                                            }
                                        }
                                        if (this.startOffset > 0 && this.switchingToIndex < 5 && !this.imagesArr.isEmpty()) {
                                            int id3 = ((MessageObject) this.imagesArr.get(0)).getId();
                                            if (!this.placeProvider.loadMore()) {
                                                MediaDataController.getInstance(this.currentAccount).loadMedia(this.currentDialogId, 40, 0, id3, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                                this.loadingMoreImages = true;
                                            }
                                        }
                                        PhotoCountView photoCountView13 = this.countView;
                                        if (photoCountView13 != null) {
                                            photoCountView13.updateShow(this.openedFromProfile, z2);
                                            photoCountView3 = this.countView;
                                            i20 = this.totalImagesCount + this.totalImagesCountMerge;
                                            i21 = i20 - (this.startOffset + this.switchingToIndex);
                                            photoCountView3.set(i21, i20);
                                        }
                                    } else {
                                        if (this.imagesArr.size() >= this.totalImagesCount + this.totalImagesCountMerge || this.loadingMoreImages || this.switchingToIndex >= 5) {
                                            r2 = 1;
                                        } else {
                                            if (this.imagesArr.isEmpty()) {
                                                id = 0;
                                                i18 = 0;
                                            } else {
                                                i18 = 0;
                                                id = ((MessageObject) this.imagesArr.get(0)).getId();
                                            }
                                            if (!this.endReached[i18] || this.mergeDialogId == 0) {
                                                i19 = id;
                                                z16 = false;
                                            } else if (this.imagesArr.isEmpty() || ((MessageObject) this.imagesArr.get(i18)).getDialogId() == this.mergeDialogId) {
                                                i19 = id;
                                                z16 = true;
                                            } else {
                                                z16 = true;
                                                i19 = 0;
                                            }
                                            MediaDataController.getInstance(this.currentAccount).loadMedia(!z16 ? this.currentDialogId : this.mergeDialogId, 80, i19, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                                            r2 = 1;
                                            this.loadingMoreImages = true;
                                        }
                                        PhotoCountView photoCountView14 = this.countView;
                                        if (photoCountView14 != 0) {
                                            photoCountView14.updateShow(r2, z2);
                                            this.countView.set(((this.totalImagesCount + this.totalImagesCountMerge) - this.imagesArr.size()) + this.switchingToIndex + r2, this.totalImagesCount + this.totalImagesCountMerge);
                                        }
                                    }
                                    charSequence5 = createFromInfoString;
                                } else {
                                    photoCountView4 = this.countView;
                                }
                                if ((DialogObject.isEncryptedDialog(this.currentDialogId) && !this.isEmbedVideo) || z25) {
                                    setItemVisible(this.sendItem, false, false);
                                }
                                if (!this.isEmbedVideo || (((i23 = messageObject3.messageOwner.ttl) != 0 && i23 < 3600) || z25)) {
                                    this.allowShare = false;
                                    this.menuItem.hideSubItem(1);
                                    this.menuItem.hideSubItem(10);
                                    setItemVisible(this.editItem, false, z2);
                                } else {
                                    this.allowShare = true;
                                    this.menuItem.showSubItem(1);
                                    this.menuItem.showSubItem(10);
                                }
                                this.groupedPhotosListView.fillList();
                                messageObject = messageObject3;
                                str = charSequence5;
                                z3 = z2;
                            } else {
                                charSequence = postProcessTranslated(messageObject3);
                            }
                        }
                    } else {
                        i16 = 22;
                        this.menuItem.showSubItem(21);
                    }
                    actionBarMenuItem2 = this.menuItem;
                    actionBarMenuItem2.hideSubItem(i16);
                    this.allowShare = !z25;
                    if (messageObject3.isNewGif()) {
                        this.menuItem.showSubItem(14);
                    }
                    chatActivity2 = this.parentChatActivity;
                    if (messageObject3.canDeleteMessage(chatActivity2 == null && chatActivity2.isInScheduleMode(), null)) {
                    }
                    this.menuItem.hideSubItem(6);
                    this.menuItem.checkHideMenuItem();
                    if (messageObject3.getDocument() != null) {
                    }
                    if (!this.isEmbedVideo) {
                    }
                    charSequence = MessagesController.getInstance(messageObject3.currentAccount).getRestrictionReason(messageObject3.messageOwner.restriction_reason);
                    if (TextUtils.isEmpty(charSequence)) {
                    }
                }
                z4 = false;
                if (this.currentAnimation != null) {
                }
                if (messageObject3.isSponsored()) {
                }
                if (DialogObject.isEncryptedDialog(this.currentDialogId)) {
                    setItemVisible(this.sendItem, false, false);
                    if (this.isEmbedVideo) {
                    }
                    this.allowShare = false;
                    this.menuItem.hideSubItem(1);
                    this.menuItem.hideSubItem(10);
                    setItemVisible(this.editItem, false, z2);
                    this.groupedPhotosListView.fillList();
                    messageObject = messageObject3;
                    str = charSequence5;
                    z3 = z2;
                }
                setItemVisible(this.sendItem, false, false);
                if (this.isEmbedVideo) {
                }
                this.allowShare = false;
                this.menuItem.hideSubItem(1);
                this.menuItem.hideSubItem(10);
                setItemVisible(this.editItem, false, z2);
                this.groupedPhotosListView.fillList();
                messageObject = messageObject3;
                str = charSequence5;
                z3 = z2;
            }
            i2 = 11;
            i3 = 8;
            if (this.editing) {
            }
            this.fancyShadows = z30;
            this.actionBar.setBackgroundColor((z30 && this.setAvatarFor == null) ? 2130706432 : 0);
            this.actionBarContainer.setTextShadows(this.fancyShadows);
            this.navigationBar.setVisibility((this.fancyShadows || this.sendPhotoType == i2) ? 0 : 0);
            if (this.currentEditMode == 0) {
            }
            if (str != null) {
            }
            setCurrentCaption(messageObject, charSequence, z4, z3);
        }
    }

    private void setItemVisible(View view, boolean z, boolean z2) {
        setItemVisible(view, z, z2, 1.0f);
    }

    private void setItemVisible(final View view, final boolean z, boolean z2, float f) {
        Boolean bool = (Boolean) this.actionBarItemsVisibility.get(view);
        if (bool == null || bool.booleanValue() != z) {
            this.actionBarItemsVisibility.put(view, Boolean.valueOf(z));
            view.animate().cancel();
            float f2 = (z ? 1.0f : 0.0f) * f;
            if (!z2 || bool == null) {
                view.setVisibility(z ? 0 : 8);
                view.setAlpha(f2);
                updateActionBarTitlePadding();
                return;
            }
            if (z) {
                view.setVisibility(0);
            }
            view.animate().alpha(f2).setDuration(100L).setUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda82
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$setItemVisible$88(valueAnimator);
                }
            }).setInterpolator(new LinearInterpolator()).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda83
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$setItemVisible$89(z, view);
                }
            }).start();
        }
    }

    private void setMenuItemIcon(boolean z, boolean z2) {
        ActionBarMenuSubItem actionBarMenuSubItem;
        String formatString;
        int i;
        if (this.speedItem.getVisibility() != 0) {
            this.menuItemIcon.setSpeed(null, z);
            return;
        }
        this.menuItemIcon.setSpeed(Math.abs(this.currentVideoSpeed - 1.0f) >= 0.001f ? Float.valueOf(this.currentVideoSpeed) : null, z);
        if (z2) {
            if (Math.abs(this.currentVideoSpeed - 0.2f) < 0.05f) {
                actionBarMenuSubItem = this.speedItem;
                i = R.string.VideoSpeedVerySlow;
            } else if (Math.abs(this.currentVideoSpeed - 0.5f) < 0.05f) {
                actionBarMenuSubItem = this.speedItem;
                i = R.string.VideoSpeedSlow;
            } else if (Math.abs(this.currentVideoSpeed - 1.0f) < 0.05f) {
                actionBarMenuSubItem = this.speedItem;
                i = R.string.VideoSpeedNormal;
            } else if (Math.abs(this.currentVideoSpeed - 1.5f) < 0.05f) {
                actionBarMenuSubItem = this.speedItem;
                i = R.string.VideoSpeedFast;
            } else if (Math.abs(this.currentVideoSpeed - 2.0f) < 0.05f) {
                actionBarMenuSubItem = this.speedItem;
                i = R.string.VideoSpeedVeryFast;
            } else {
                actionBarMenuSubItem = this.speedItem;
                int i2 = R.string.VideoSpeedCustom;
                formatString = LocaleController.formatString(i2, SpeedIconDrawable.formatNumber(this.currentVideoSpeed) + "x");
                actionBarMenuSubItem.setSubtext(formatString);
            }
            formatString = LocaleController.getString(i);
            actionBarMenuSubItem.setSubtext(formatString);
        }
        this.chooseSpeedLayout.update(this.currentVideoSpeed, z2);
    }

    private void setPhotoChecked() {
        ChatActivity chatActivity;
        TLRPC.Chat currentChat;
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null) {
            if (photoViewerProvider.getSelectedPhotos() != null && this.maxSelectedPhotos > 0 && this.placeProvider.getSelectedPhotos().size() >= this.maxSelectedPhotos && !this.placeProvider.isPhotoChecked(this.currentIndex)) {
                if (!this.allowOrder || (chatActivity = this.parentChatActivity) == null || (currentChat = chatActivity.getCurrentChat()) == null || ChatObject.hasAdminRights(currentChat) || !currentChat.slowmode_enabled) {
                    return;
                }
                AlertsCreator.createSimpleAlert(this.parentActivity, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSelectSendError", R.string.SlowmodeSelectSendError)).show();
                return;
            }
            int photoChecked = this.placeProvider.setPhotoChecked(this.currentIndex, getCurrentVideoEditedInfo());
            boolean isPhotoChecked = this.placeProvider.isPhotoChecked(this.currentIndex);
            this.checkImageView.setChecked(isPhotoChecked, true);
            if (photoChecked >= 0) {
                if (isPhotoChecked) {
                    this.selectedPhotosAdapter.notifyItemInserted(photoChecked);
                    this.selectedPhotosListView.smoothScrollToPosition(photoChecked);
                } else {
                    this.selectedPhotosAdapter.notifyItemRemoved(photoChecked);
                    if (photoChecked == 0) {
                        this.selectedPhotosAdapter.notifyItemChanged(0);
                    }
                }
            }
            updateSelectedCount();
        }
    }

    public void setScaleToFill() {
        float bitmapWidth = this.centerImage.getBitmapWidth();
        float bitmapHeight = this.centerImage.getBitmapHeight();
        if (bitmapWidth == 0.0f || bitmapHeight == 0.0f) {
            return;
        }
        float containerViewWidth = getContainerViewWidth();
        float containerViewHeight = getContainerViewHeight();
        float min = Math.min(containerViewHeight / bitmapHeight, containerViewWidth / bitmapWidth);
        float max = Math.max(containerViewWidth / ((int) (bitmapWidth * min)), containerViewHeight / ((int) (bitmapHeight * min)));
        this.scale = max;
        updateMinMax(max);
    }

    private void setVideoPlayerControlVisible(final boolean z, boolean z2) {
        if (this.videoPlayerControlVisible != z) {
            this.bottomLayout.setTag(z ? 1 : null);
            Animator animator = this.videoPlayerControlAnimator;
            if (animator != null) {
                animator.cancel();
            }
            this.videoPlayerControlVisible = z;
            if (z2) {
                if (z) {
                    this.videoPlayerControlFrameLayout.setVisibility(0);
                }
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.videoPlayerControlFrameLayout.getAlpha(), z ? 1.0f : 0.0f);
                ofFloat.setDuration(200L);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda6
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$setVideoPlayerControlVisible$64(valueAnimator);
                    }
                });
                ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.52
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator2) {
                        if (z) {
                            return;
                        }
                        PhotoViewer.this.videoPlayerControlFrameLayout.setVisibility(8);
                    }
                });
                this.videoPlayerControlAnimator = ofFloat;
                ofFloat.start();
            } else {
                this.videoPlayerControlFrameLayout.setVisibility(z ? 0 : 8);
                this.videoPlayerControlFrameLayout.setAlpha(z ? 1.0f : 0.0f);
            }
            if (this.allowShare && this.pageBlocksAdapter == null) {
                if (z) {
                    this.menuItem.showSubItem(10);
                } else {
                    this.menuItem.hideSubItem(10);
                }
            }
        }
    }

    private boolean shouldIndexAutoPlayed(int i) {
        File file;
        PageBlocksAdapter pageBlocksAdapter = this.pageBlocksAdapter;
        if (pageBlocksAdapter != null) {
            return (pageBlocksAdapter.isVideo(i) || this.pageBlocksAdapter.isHardwarePlayer(i)) && SharedConfig.isAutoplayVideo() && (file = this.pageBlocksAdapter.getFile(i)) != null && file.exists();
        }
        return false;
    }

    public boolean shouldMessageObjectAutoPlayed(MessageObject messageObject) {
        return messageObject != null && messageObject.isVideo() && (messageObject.mediaExists || messageObject.attachPathExists || (messageObject.canStreamVideo() && SharedConfig.streamMedia)) && SharedConfig.isAutoplayVideo();
    }

    public void showDownloadAlert() {
        int i;
        String str;
        AlertDialog.Builder builder = new AlertDialog.Builder(this.parentActivity, this.resourcesProvider);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.isVideo() && FileLoader.getInstance(this.currentMessageObject.currentAccount).isLoadingFile(this.currentFileNames[0])) {
            i = R.string.PleaseStreamDownload;
            str = "PleaseStreamDownload";
        } else {
            i = R.string.PleaseDownload;
            str = "PleaseDownload";
        }
        builder.setMessage(LocaleController.getString(str, i));
        showAlertDialog(builder);
    }

    private void showEditCaption(boolean z, boolean z2) {
        ObjectAnimator objectAnimator;
        if (z2) {
            if (z && this.captionEdit.getTag() == null) {
                if (this.captionEdit.getVisibility() != 0) {
                    this.captionEdit.setVisibility(0);
                    this.captionEdit.setAlpha(this.pickerView.getAlpha());
                    this.captionEdit.setTranslationY(AndroidUtilities.dp(58.0f));
                }
                ObjectAnimator objectAnimator2 = this.captionAnimator;
                if (objectAnimator2 != null) {
                    objectAnimator2.removeAllListeners();
                    this.captionAnimator.cancel();
                }
                CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
                objectAnimator = ObjectAnimator.ofFloat(captionPhotoViewer, View.TRANSLATION_Y, captionPhotoViewer.getTranslationY(), 0.0f);
                this.captionAnimator = objectAnimator;
            } else if (!z && this.captionEdit.getTag() != null) {
                ObjectAnimator objectAnimator3 = this.captionAnimator;
                if (objectAnimator3 != null) {
                    objectAnimator3.removeAllListeners();
                    this.captionAnimator.cancel();
                }
                CaptionPhotoViewer captionPhotoViewer2 = this.captionEdit;
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(captionPhotoViewer2, View.TRANSLATION_Y, captionPhotoViewer2.getTranslationY(), AndroidUtilities.dp(58.0f));
                this.captionAnimator = ofFloat;
                ofFloat.addListener(new HideViewAfterAnimation(this.captionEdit));
                objectAnimator = this.captionAnimator;
            }
            objectAnimator.setDuration(220L);
            this.captionAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.captionAnimator.start();
        } else {
            this.captionEdit.animate().setListener(null).cancel();
            this.captionEdit.setVisibility(z ? 0 : 8);
            this.captionEdit.setTranslationY(0.0f);
            this.captionEdit.setAlpha(this.pickerView.getAlpha());
        }
        this.captionEdit.setTag(z ? 1 : null);
    }

    public void showEditStickerMode(boolean z, boolean z2) {
        ViewPropertyAnimator listener;
        CubicBezierInterpolator cubicBezierInterpolator;
        ViewPropertyAnimator listener2;
        StickerMakerView stickerMakerView;
        MaskPaintView maskPaintView;
        boolean z3 = true;
        if (!z || (stickerMakerView = this.stickerMakerView) == null || (stickerMakerView.empty && !stickerMakerView.overriddenPaths() && ((maskPaintView = this.maskPaintView) == null || !maskPaintView.canUndo()))) {
            z3 = false;
        }
        if (!z2) {
            this.undoBtn.animate().setListener(null).cancel();
            this.undoBtn.setVisibility(z3 ? 0 : 8);
            this.undoBtn.setAlpha(z3 ? 1.0f : 0.0f);
            this.undoBtn.setScaleX(z3 ? 1.0f : 0.8f);
            this.undoBtn.setScaleY(z3 ? 1.0f : 0.8f);
        } else if (z3 && this.undoBtn.getTag() == null) {
            this.undoBtn.animate().setListener(null).cancel();
            if (this.undoBtn.getVisibility() != 0) {
                this.undoBtn.setVisibility(0);
                listener = this.undoBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
                listener.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
            }
        } else if (!z3 && this.undoBtn.getTag() != null) {
            this.undoBtn.animate().setListener(null).cancel();
            listener = this.undoBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.undoBtn));
            listener.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
        }
        this.undoBtn.setTag(z3 ? r1 : null);
        if (!z2) {
            this.eraseBtn.animate().setListener(null).cancel();
            this.eraseBtn.setVisibility(z ? 0 : 8);
            this.eraseBtn.setAlpha(z ? 1.0f : 0.0f);
            this.eraseBtn.setScaleX(z ? 1.0f : 0.8f);
            this.eraseBtn.setScaleY(z ? 1.0f : 0.8f);
            this.restoreBtn.animate().setListener(null).cancel();
            this.restoreBtn.setVisibility(z ? 0 : 8);
            this.restoreBtn.setAlpha(z ? 1.0f : 0.0f);
            this.restoreBtn.setScaleX(z ? 1.0f : 0.8f);
            this.restoreBtn.setScaleY(z ? 1.0f : 0.8f);
        } else if (z && this.eraseBtn.getTag() == null) {
            this.eraseBtn.animate().setListener(null).cancel();
            this.restoreBtn.animate().setListener(null).cancel();
            if (this.eraseBtn.getVisibility() != 0) {
                this.eraseBtn.setVisibility(0);
                ViewPropertyAnimator scaleY = this.eraseBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
                cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
                scaleY.setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
                this.restoreBtn.setVisibility(0);
                listener2 = this.restoreBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
                listener2.setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
            }
        } else if (!z && this.eraseBtn.getTag() != null) {
            this.eraseBtn.animate().setListener(null).cancel();
            ViewPropertyAnimator listener3 = this.eraseBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.eraseBtn));
            cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
            listener3.setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
            this.restoreBtn.animate().setListener(null).cancel();
            listener2 = this.restoreBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.restoreBtn));
            listener2.setInterpolator(cubicBezierInterpolator).setDuration(400L).start();
        }
        this.eraseBtn.setTag(z ? 1 : null);
    }

    private void showQualityView(final boolean z) {
        TextureView textureView;
        if (z && this.textureUploaded && this.videoSizeSet && !this.changingTextureView && (textureView = this.videoTextureView) != null) {
            this.videoFrameBitmap = textureView.getBitmap();
        }
        if (z) {
            this.previousCompression = this.selectedCompression;
        }
        AnimatorSet animatorSet = this.qualityChooseViewAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
        }
        this.qualityChooseViewAnimation = new AnimatorSet();
        if (z) {
            if (this.fancyShadows) {
                this.navigationBar.setVisibility(0);
                this.navigationBar.setAlpha(this.sendPhotoType == 11 ? 1.0f : 0.0f);
                this.navigationBar.setBackgroundColor(this.sendPhotoType == 11 ? 1711276032 : 2130706432);
            }
            this.qualityChooseView.setTag(1);
            AnimatorSet animatorSet2 = this.qualityChooseViewAnimation;
            FrameLayout frameLayout = this.pickerView;
            Property property = View.TRANSLATION_Y;
            ObjectAnimator ofFloat = ObjectAnimator.ofFloat(frameLayout, property, 0.0f, frameLayout.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0));
            FrameLayout frameLayout2 = this.pickerView;
            Property property2 = View.ALPHA;
            animatorSet2.playTogether(ofFloat, ObjectAnimator.ofFloat(frameLayout2, property2, 0.0f), ObjectAnimator.ofFloat(this.pickerViewSendButton, property, 0.0f, AndroidUtilities.dp(158.0f)), ObjectAnimator.ofFloat(this.navigationBar, property2, this.fancyShadows ? 0.0f : 1.0f, 1.0f));
        } else {
            this.qualityChooseView.setTag(null);
            AnimatorSet animatorSet3 = this.qualityChooseViewAnimation;
            QualityChooseView qualityChooseView = this.qualityChooseView;
            Property property3 = View.TRANSLATION_Y;
            animatorSet3.playTogether(ObjectAnimator.ofFloat(qualityChooseView, property3, 0.0f, AndroidUtilities.dp(166.0f)), ObjectAnimator.ofFloat(this.qualityPicker, property3, 0.0f, AndroidUtilities.dp(166.0f)), ObjectAnimator.ofFloat(this.navigationBar, View.ALPHA, 1.0f, this.fancyShadows ? 0.0f : 1.0f));
        }
        this.qualityChooseViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.78
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                PhotoViewer.this.qualityChooseViewAnimation = null;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (animator.equals(PhotoViewer.this.qualityChooseViewAnimation)) {
                    PhotoViewer.this.qualityChooseViewAnimation = new AnimatorSet();
                    if (z) {
                        PhotoViewer.this.qualityChooseView.setVisibility(0);
                        PhotoViewer.this.qualityPicker.setVisibility(0);
                        AnimatorSet animatorSet4 = PhotoViewer.this.qualityChooseViewAnimation;
                        QualityChooseView qualityChooseView2 = PhotoViewer.this.qualityChooseView;
                        Property property4 = View.TRANSLATION_Y;
                        animatorSet4.playTogether(ObjectAnimator.ofFloat(qualityChooseView2, property4, 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this.qualityPicker, property4, 0.0f));
                    } else {
                        if (PhotoViewer.this.fancyShadows) {
                            PhotoViewer.this.navigationBar.setVisibility(8);
                            PhotoViewer.this.navigationBar.setAlpha(0.0f);
                            PhotoViewer.this.navigationBar.setBackgroundColor(PhotoViewer.this.sendPhotoType == 11 ? -16777216 : 2130706432);
                        }
                        PhotoViewer.this.qualityChooseView.setVisibility(4);
                        PhotoViewer.this.qualityPicker.setVisibility(4);
                        AnimatorSet animatorSet5 = PhotoViewer.this.qualityChooseViewAnimation;
                        FrameLayout frameLayout3 = PhotoViewer.this.pickerView;
                        Property property5 = View.TRANSLATION_Y;
                        animatorSet5.playTogether(ObjectAnimator.ofFloat(frameLayout3, property5, 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.pickerViewSendButton, property5, 0.0f));
                    }
                    PhotoViewer.this.qualityChooseViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.78.1
                        {
                            78.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator2) {
                            if (animator2.equals(PhotoViewer.this.qualityChooseViewAnimation)) {
                                PhotoViewer.this.qualityChooseViewAnimation = null;
                            }
                        }
                    });
                    PhotoViewer.this.qualityChooseViewAnimation.setDuration(200L);
                    PhotoViewer.this.qualityChooseViewAnimation.setInterpolator(AndroidUtilities.decelerateInterpolator);
                    PhotoViewer.this.qualityChooseViewAnimation.start();
                }
            }
        });
        this.qualityChooseViewAnimation.setDuration(200L);
        this.qualityChooseViewAnimation.setInterpolator(AndroidUtilities.accelerateInterpolator);
        this.qualityChooseViewAnimation.start();
        if (this.muteItem.getVisibility() == 0) {
            this.muteItem.animate().scaleX(z ? 0.25f : 1.0f).scaleY(z ? 0.25f : 1.0f).alpha(z ? 0.0f : 1.0f).setDuration(200L);
        }
    }

    private void showScheduleDatePickerDialog() {
        if (this.parentChatActivity == null) {
            return;
        }
        AlertsCreator.createScheduleDatePickerDialog(this.parentActivity, this.parentChatActivity.getDialogId(), new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda122
            @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
            public final void didSelectDate(boolean z, int i) {
                PhotoViewer.this.sendPressed(z, i);
            }
        }, new AlertsCreator.ScheduleDatePickerColors(-1, -14342875, -1, 520093695, -1, -115203550, 620756991));
    }

    public void showShareAlert(ArrayList arrayList) {
        boolean z;
        boolean z2;
        FrameLayoutDrawer frameLayoutDrawer = this.containerView;
        requestAdjustToNothing();
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getChatActivityEnterView() == null || this.parentChatActivity.getFragmentView() == null) {
            z = false;
        } else {
            if (this.parentChatActivity.getChatActivityEnterView().isKeyboardVisible()) {
                this.parentChatActivity.getChatActivityEnterView().showEmojiView();
                z2 = true;
            } else {
                z2 = false;
            }
            AndroidUtilities.setAdjustResizeToNothing(this.parentChatActivity.getParentActivity(), this.classGuid);
            this.parentChatActivity.getFragmentView().requestLayout();
            z = z2;
        }
        final 35 r12 = new 35(this.parentActivity, this.parentChatActivity, arrayList, null, null, false, null, null, false, true, false, null, frameLayoutDrawer, z);
        r12.setFocusable(false);
        r12.getWindow().setSoftInputMode(48);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$showShareAlert$56(r12);
            }
        }, 250L);
        r12.show();
    }

    private void showStickerMode(boolean z, boolean z2) {
        showStickerMode(z, z, z2);
    }

    private void showStickerMode(boolean z, boolean z2, boolean z3) {
        ViewPropertyAnimator listener;
        ViewPropertyAnimator listener2;
        ViewPropertyAnimator listener3;
        if (!z3) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerView.setVisibility(z ? 0 : 8);
            this.stickerMakerView.setAlpha(this.pickerView.getAlpha());
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            this.stickerMakerBackgroundView.setVisibility(z ? 0 : 8);
            this.stickerMakerBackgroundView.setAlpha(z ? 1.0f : 0.0f);
        } else if (z && this.stickerMakerView.getTag() == null) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            if (this.stickerMakerView.getVisibility() != 0) {
                this.stickerMakerView.setVisibility(0);
                this.stickerMakerView.animate().alpha(1.0f).start();
                this.stickerMakerBackgroundView.setVisibility(0);
                listener = this.stickerMakerBackgroundView.animate().alpha(1.0f);
                listener.start();
            }
        } else if (!z && this.stickerMakerView.getTag() != null) {
            this.stickerMakerView.animate().setListener(null).cancel();
            this.stickerMakerView.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.stickerMakerView)).start();
            this.stickerMakerBackgroundView.animate().setListener(null).cancel();
            listener = this.stickerMakerBackgroundView.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.stickerMakerBackgroundView));
            listener.start();
        }
        this.stickerMakerView.setTag(z ? 1 : null);
        boolean z4 = (!z || this.cutOutBtn.isUndoCutState() || this.stickerEmpty) ? false : true;
        if (z3) {
            if (z4 && this.cutOutBtn.getTag() == null) {
                this.cutOutBtn.animate().setListener(null).cancel();
                if (this.cutOutBtn.getVisibility() != 0) {
                    this.cutOutBtn.setVisibility(0);
                }
                listener2 = this.cutOutBtn.animate().alpha(1.0f);
            } else if (!z4 && this.cutOutBtn.getTag() != null) {
                this.cutOutBtn.animate().setListener(null).cancel();
                listener2 = this.cutOutBtn.animate().alpha(0.0f).setListener(new HideViewAfterAnimation(this.cutOutBtn));
            }
            listener2.start();
        } else {
            this.cutOutBtn.animate().setListener(null).cancel();
            this.cutOutBtn.setVisibility(z4 ? 0 : 8);
            this.cutOutBtn.setAlpha(z4 ? 1.0f : 0.0f);
        }
        this.cutOutBtn.setTag(z4 ? 1 : null);
        showEditStickerMode(z && this.cutOutBtn.isUndoCutState() && !this.stickerEmpty, z3);
        this.stickerMakerView.setOutlineVisible(z && this.cutOutBtn.isUndoCutState() && this.outlineBtn.isActive() && !this.eraseBtn.isActive() && !this.restoreBtn.isActive());
        boolean z5 = z && this.cutOutBtn.isUndoCutState() && !this.eraseBtn.isActive() && !this.restoreBtn.isActive();
        if (z3) {
            if (z5 && this.outlineBtn.getTag() == null) {
                this.outlineBtn.animate().setListener(null).cancel();
                if (this.outlineBtn.getVisibility() != 0) {
                    this.outlineBtn.setVisibility(0);
                }
                listener3 = this.outlineBtn.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f);
            } else if (!z5 && this.outlineBtn.getTag() != null) {
                this.outlineBtn.animate().setListener(null).cancel();
                listener3 = this.outlineBtn.animate().alpha(0.0f).scaleX(0.8f).scaleY(0.8f).setListener(new HideViewAfterAnimation(this.outlineBtn));
            }
            listener3.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).setDuration(400L).start();
        } else {
            this.outlineBtn.animate().setListener(null).cancel();
            this.outlineBtn.setVisibility(z5 ? 0 : 8);
            this.outlineBtn.setAlpha(z5 ? 1.0f : 0.0f);
            this.outlineBtn.setScaleX(z5 ? 1.0f : 0.8f);
            this.outlineBtn.setScaleY(z5 ? 1.0f : 0.8f);
        }
        this.outlineBtn.setTag(z5 ? 1 : null);
    }

    public void showVideoSeekPreviewPosition(boolean z) {
        PhotoViewerWebView photoViewerWebView;
        if (!z || this.videoPreviewFrame.getTag() == null) {
            if (z || this.videoPreviewFrame.getTag() != null) {
                if (z && !this.videoPreviewFrame.isReady() && ((photoViewerWebView = this.photoViewerWebView) == null || !photoViewerWebView.isYouTube() || !this.photoViewerWebView.hasYoutubeStoryboards())) {
                    this.needShowOnReady = true;
                    return;
                }
                AnimatorSet animatorSet = this.videoPreviewFrameAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                this.videoPreviewFrame.setTag(z ? 1 : null);
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.videoPreviewFrameAnimation = animatorSet2;
                animatorSet2.playTogether(ObjectAnimator.ofFloat(this.videoPreviewFrame, View.ALPHA, z ? 1.0f : 0.0f), ObjectAnimator.ofFloat(this.videoPreviewFrame, View.SCALE_X, z ? 1.0f : 0.5f), ObjectAnimator.ofFloat(this.videoPreviewFrame, View.SCALE_Y, z ? 1.0f : 0.5f), ObjectAnimator.ofFloat(this.videoPreviewFrame, View.TRANSLATION_Y, z ? 0.0f : AndroidUtilities.dp(12.0f)));
                this.videoPreviewFrameAnimation.setDuration(380L);
                this.videoPreviewFrameAnimation.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                this.videoPreviewFrameAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.43
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.videoPreviewFrameAnimation = null;
                    }
                });
                this.videoPreviewFrameAnimation.start();
            }
        }
    }

    private void showVideoTimeline(boolean z, boolean z2) {
        ObjectAnimator objectAnimator;
        if (z2) {
            if (z && this.videoTimelineViewContainer.getTag() == null) {
                if (this.videoTimelineViewContainer.getVisibility() != 0) {
                    this.videoTimelineViewContainer.setVisibility(0);
                    this.videoTimelineViewContainer.setAlpha(this.pickerView.getAlpha());
                    this.videoTimelineView.setTranslationY(AndroidUtilities.dp(58.0f));
                }
                ObjectAnimator objectAnimator2 = this.videoTimelineAnimator;
                if (objectAnimator2 != null) {
                    objectAnimator2.removeAllListeners();
                    this.videoTimelineAnimator.cancel();
                }
                VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
                objectAnimator = ObjectAnimator.ofFloat(videoTimelinePlayView, View.TRANSLATION_Y, videoTimelinePlayView.getTranslationY(), 0.0f);
                this.videoTimelineAnimator = objectAnimator;
            } else if (!z && this.videoTimelineViewContainer.getTag() != null) {
                ObjectAnimator objectAnimator3 = this.videoTimelineAnimator;
                if (objectAnimator3 != null) {
                    objectAnimator3.removeAllListeners();
                    this.videoTimelineAnimator.cancel();
                }
                VideoTimelinePlayView videoTimelinePlayView2 = this.videoTimelineView;
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(videoTimelinePlayView2, View.TRANSLATION_Y, videoTimelinePlayView2.getTranslationY(), AndroidUtilities.dp(58.0f));
                this.videoTimelineAnimator = ofFloat;
                ofFloat.addListener(new HideViewAfterAnimation(this.videoTimelineViewContainer));
                objectAnimator = this.videoTimelineAnimator;
            }
            objectAnimator.setDuration(220L);
            this.videoTimelineAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.videoTimelineAnimator.start();
        } else {
            this.videoTimelineViewContainer.animate().setListener(null).cancel();
            this.videoTimelineViewContainer.setVisibility(z ? 0 : 8);
            this.videoTimelineView.setTranslationY(0.0f);
            this.videoTimelineViewContainer.setAlpha(this.pickerView.getAlpha());
        }
        FrameLayout frameLayout = this.videoTimelineViewContainer;
        if (frameLayout != null && frameLayout.getVisibility() != 8) {
            this.videoTimelineViewContainer.setTranslationY(this.pickerView.getTranslationY() - Math.max(0, this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
        }
        this.videoTimelineViewContainer.setTag(z ? 1 : null);
    }

    private static CharSequence sponsoredCaption(MessageObject messageObject, CharSequence charSequence) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (!TextUtils.isEmpty(messageObject.sponsoredTitle)) {
            spannableStringBuilder.append((CharSequence) messageObject.sponsoredTitle);
            spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder.length(), 33);
            spannableStringBuilder.setSpan(new LineHeightSpan() { // from class: org.telegram.ui.PhotoViewer.80
                @Override // android.text.style.LineHeightSpan
                public void chooseHeight(CharSequence charSequence2, int i, int i2, int i3, int i4, Paint.FontMetricsInt fontMetricsInt) {
                    fontMetricsInt.descent += AndroidUtilities.dp(4.0f);
                    fontMetricsInt.ascent = fontMetricsInt.ascent;
                }
            }, 0, spannableStringBuilder.length(), 33);
            spannableStringBuilder.append((CharSequence) "\n");
        }
        spannableStringBuilder.append(charSequence);
        return spannableStringBuilder;
    }

    private void startVideoPlayer() {
        VideoPlayer videoPlayer;
        if (!this.isCurrentVideo || (videoPlayer = this.videoPlayer) == null || videoPlayer.isPlaying()) {
            return;
        }
        if (!this.muteVideo || this.sendPhotoType == 1) {
            this.videoPlayer.setVolume(0.0f);
        }
        this.manuallyPaused = false;
        toggleVideoPlayer();
    }

    private boolean supportsSendingNewEntities() {
        TLRPC.EncryptedChat encryptedChat;
        ChatActivity chatActivity = this.parentChatActivity;
        return chatActivity != null && ((encryptedChat = chatActivity.currentEncryptedChat) == null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101);
    }

    private void switchToNextIndex(int i, boolean z) {
        if (this.currentMessageObject != null) {
            releasePlayer(false);
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.currentMessageObject.getDocument());
        } else if (this.currentPageBlock != null) {
            TLObject media = this.pageBlocksAdapter.getMedia(this.currentIndex);
            if (media instanceof TLRPC.Document) {
                releasePlayer(false);
                FileLoader.getInstance(this.currentAccount).cancelLoadFile((TLRPC.Document) media);
            }
        }
        GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
        if (groupedPhotosListView != null) {
            groupedPhotosListView.setAnimateBackground(true);
        }
        this.playerAutoStarted = false;
        setImageIndex(this.currentIndex + i, z, true);
        if (shouldMessageObjectAutoPlayed(this.currentMessageObject) || shouldIndexAutoPlayed(this.currentIndex)) {
            this.playerAutoStarted = true;
            onActionClick(true);
            checkProgress(0, false, true);
        }
        checkFullscreenButton();
    }

    /* JADX WARN: Code restructure failed: missing block: B:91:0x00d4, code lost:
        if (r17.cropTransform.getOrientation() != 270) goto L27;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void switchToPaintMode() {
        EditState editState;
        LPhotoPaintView lPhotoPaintView;
        LPhotoPaintView lPhotoPaintView2;
        this.changeModeAnimation = null;
        this.pickerView.setVisibility(8);
        this.pickerViewSendButton.setVisibility(8);
        this.doneButtonFullWidth.setVisibility(8);
        this.muteItem.setVisibility(8);
        PhotoCropView photoCropView = this.photoCropView;
        if (photoCropView != null) {
            photoCropView.setVisibility(4);
        }
        this.selectedPhotosListView.setVisibility(8);
        this.selectedPhotosListView.setAlpha(0.0f);
        this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
        this.photosCounterView.setRotationX(0.0f);
        this.selectedPhotosListView.setEnabled(false);
        this.isPhotosListViewVisible = false;
        if (this.needCaptionLayout) {
            this.captionTextViewSwitcher.setVisibility(4);
        }
        int i = this.sendPhotoType;
        if (i == 0 || i == 4 || ((i == 2 || i == 5) && this.imagesArrLocals.size() > 1)) {
            this.checkImageView.setVisibility(8);
            this.photosCounterView.setVisibility(8);
            updateActionBarTitlePadding();
        }
        showEditCaption(false, true);
        showStickerMode(false, false, true);
        Bitmap bitmap = this.centerImage.getBitmap();
        float f = this.scale;
        if (this.sendPhotoType == 11) {
            this.savedTy = this.translationY;
            this.savedTx = this.translationX;
            this.savedScale = f;
            this.savedRotation = this.rotate;
            this.animateToRotate = 0.0f;
        }
        if (bitmap != null) {
            int bitmapWidth = this.centerImage.getBitmapWidth();
            int bitmapHeight = this.centerImage.getBitmapHeight();
            if (this.sendPhotoType == 1) {
                float dp = AndroidUtilities.dp(12.0f);
                this.animateToY = dp;
                if (this.photoPaintView != null) {
                    this.animateToY = dp + (lPhotoPaintView2.getAdditionalTop() / 2.0f);
                }
                if (this.cropTransform.getOrientation() != 90) {
                }
                int i2 = bitmapHeight;
                bitmapHeight = bitmapWidth;
                bitmapWidth = i2;
                float f2 = bitmapWidth;
                float f3 = bitmapHeight;
                this.animateToScale = (Math.min(getContainerViewWidth(3) / f2, getContainerViewHeight(3) / f3) / Math.min(getContainerViewWidth() / f2, getContainerViewHeight() / f3)) * scale1(false);
                this.animateToX = (getLeftInset() / 2) - (getRightInset() / 2);
                this.animationStartTime = System.currentTimeMillis();
                this.zoomAnimation = true;
            } else {
                float f4 = (-AndroidUtilities.dp(44.0f)) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                this.animateToY = f4;
                if (this.photoPaintView != null) {
                    float additionalTop = f4 + (lPhotoPaintView.getAdditionalTop() / 2.0f);
                    this.animateToY = additionalTop;
                    this.animateToY = additionalTop - (this.photoPaintView.getAdditionalBottom() / 2.0f);
                }
                MediaController.CropState cropState = this.editState.cropState;
                if (cropState != null) {
                    int i3 = cropState.transformRotation;
                    if (i3 != 90 && i3 != 270) {
                        bitmapHeight = bitmapWidth;
                        bitmapWidth = bitmapHeight;
                    }
                    bitmapHeight = (int) (bitmapHeight * cropState.cropPw);
                    bitmapWidth = (int) (bitmapWidth * cropState.cropPh);
                    int i22 = bitmapHeight;
                    bitmapHeight = bitmapWidth;
                    bitmapWidth = i22;
                }
                float f22 = bitmapWidth;
                float f32 = bitmapHeight;
                this.animateToScale = (Math.min(getContainerViewWidth(3) / f22, getContainerViewHeight(3) / f32) / Math.min(getContainerViewWidth() / f22, getContainerViewHeight() / f32)) * scale1(false);
                this.animateToX = (getLeftInset() / 2) - (getRightInset() / 2);
                this.animationStartTime = System.currentTimeMillis();
                this.zoomAnimation = true;
            }
        }
        LPhotoPaintView lPhotoPaintView3 = this.photoPaintView;
        if (lPhotoPaintView3 != null) {
            lPhotoPaintView3.setDrawShadow(this.sendPhotoType == 11 && ((editState = this.editState) == null || editState.cropState == null));
        }
        this.windowView.setClipChildren(true);
        this.navigationBar.setVisibility(4);
        this.imageMoveAnimation = new AnimatorSet();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.dp(126.0f), 0.0f);
        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(-AndroidUtilities.dp(12.0f), 0.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda102
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$switchToPaintMode$85(valueAnimator);
            }
        });
        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda103
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                PhotoViewer.this.lambda$switchToPaintMode$86(valueAnimator);
            }
        });
        this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ofFloat, ofFloat2);
        this.photoPaintView.onAnimationStateChanged(true);
        this.imageMoveAnimation.setDuration(200L);
        this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.61
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                PhotoViewer.this.photoPaintView.onAnimationStateChanged(false);
                PhotoViewer.this.photoPaintView.init();
                PhotoViewer.this.paintingOverlay.hideEntities();
                PhotoViewer.this.imageMoveAnimation = null;
                PhotoViewer.this.currentEditMode = 3;
                PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                if (PhotoViewer.this.paintKeyboardNotifier != null) {
                    PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                }
                PhotoViewer.this.switchingToMode = -1;
                PhotoViewer photoViewer = PhotoViewer.this;
                photoViewer.animateToScale = photoViewer.scale = photoViewer.scale1(false);
                PhotoViewer.this.animateToX = 0.0f;
                PhotoViewer.this.animateToY = 0.0f;
                PhotoViewer photoViewer2 = PhotoViewer.this;
                photoViewer2.updateMinMax(photoViewer2.scale);
                PhotoViewer.this.padImageForHorizontalInsets = true;
                PhotoViewer.this.containerView.invalidate();
                if (PhotoViewer.this.placeProvider == null || !PhotoViewer.this.placeProvider.closeKeyboard()) {
                    PhotoViewer.this.makeFocusable();
                }
            }
        });
        this.imageMoveAnimation.start();
    }

    public void switchToPip(boolean z) {
        float translationY;
        float translationY2;
        final float f;
        CubicBezierInterpolator cubicBezierInterpolator;
        long j;
        if (this.videoPlayer == null || !this.textureUploaded || !checkInlinePermissions() || this.changingTextureView || this.switchingInlineMode || this.isInline) {
            return;
        }
        if (PipInstance != null) {
            PipInstance.destroyPhotoViewer();
        }
        this.openedFullScreenVideo = false;
        PipInstance = Instance;
        Instance = null;
        this.switchingInlineMode = true;
        this.isVisible = false;
        this.isVisibleOrAnimating = false;
        AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
        PlaceProviderObject placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null && !placeProviderObject.imageReceiver.getVisible()) {
            this.currentPlaceObject.imageReceiver.setVisible(true, true);
            AnimatedFileDrawable animation = this.currentPlaceObject.imageReceiver.getAnimation();
            if (animation != null) {
                Bitmap animatedBitmap = animation.getAnimatedBitmap();
                if (animatedBitmap != null) {
                    try {
                        if (this.usedSurfaceView) {
                            AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, animatedBitmap);
                        } else {
                            Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                            new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                            bitmap.recycle();
                        }
                    } catch (Throwable th) {
                        FileLog.e(th);
                    }
                }
                animation.seekTo(this.videoPlayer.getCurrentPosition(), true);
                if (z) {
                    this.currentPlaceObject.imageReceiver.setAlpha(0.0f);
                    final ImageReceiver imageReceiver = this.currentPlaceObject.imageReceiver;
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda29
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            PhotoViewer.lambda$switchToPip$57(ImageReceiver.this, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.37
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            imageReceiver.setAlpha(1.0f);
                        }
                    });
                    ofFloat.setDuration(250L);
                    ofFloat.start();
                }
                this.currentPlaceObject.imageReceiver.setAllowStartAnimation(true);
                this.currentPlaceObject.imageReceiver.startAnimation();
            }
        }
        if (Build.VERSION.SDK_INT >= 21) {
            this.pipAnimationInProgress = true;
            org.telegram.ui.Components.Rect pipRect = PipVideoOverlay.getPipRect(true, this.aspectRatioFrameLayout.getAspectRatio());
            final View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            final float width = pipRect.width / view.getWidth();
            final ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
            if (this.usedSurfaceView) {
                float left = this.aspectRatioFrameLayout.getLeft() + view.getTranslationX();
                float top = this.aspectRatioFrameLayout.getTop() + view.getTranslationY() + this.translationY;
                translationY2 = this.aspectRatioFrameLayout.getTop() + this.textureImageView.getTranslationY() + this.translationY;
                f = left;
                translationY = top;
            } else {
                float translationX = view.getTranslationX();
                translationY = view.getTranslationY() + this.translationY;
                translationY2 = this.textureImageView.getTranslationY() + this.translationY;
                f = translationX;
            }
            final float f2 = pipRect.x;
            final float x = (f2 - this.aspectRatioFrameLayout.getX()) + getLeftInset();
            final float f3 = pipRect.y;
            final float y = f3 - this.aspectRatioFrameLayout.getY();
            if (this.videoSurfaceView != null) {
                this.videoPlayer.player.pause();
                this.textureImageView.setVisibility(0);
                if (this.usedSurfaceView) {
                    Bitmap createBitmap = Bitmaps.createBitmap(this.videoSurfaceView.getWidth(), this.videoSurfaceView.getHeight(), Bitmap.Config.ARGB_8888);
                    AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, createBitmap);
                    this.textureImageView.setImageBitmap(createBitmap);
                }
                this.videoSurfaceView.setVisibility(4);
            }
            this.textureImageView.setTranslationY(translationY2);
            view.setTranslationY(translationY);
            FirstFrameView firstFrameView = this.firstFrameView;
            if (firstFrameView != null) {
                firstFrameView.setTranslationY(translationY);
            }
            this.translationY = 0.0f;
            this.containerView.invalidate();
            if (z) {
                cubicBezierInterpolator = translationY < y ? new CubicBezierInterpolator(0.5d, 0.0d, 0.9d, 0.9d) : new CubicBezierInterpolator(0.0d, 0.5d, 0.9d, 0.9d);
            } else {
                cubicBezierInterpolator = null;
            }
            ViewOutlineProvider viewOutlineProvider = new ViewOutlineProvider() { // from class: org.telegram.ui.PhotoViewer.38
                {
                    PhotoViewer.this = this;
                }

                @Override // android.view.ViewOutlineProvider
                public void getOutline(View view2, Outline outline) {
                    outline.setRoundRect(0, 0, view2.getMeasuredWidth(), view2.getMeasuredHeight(), ((Float) ofFloat2.getAnimatedValue()).floatValue() * AndroidUtilities.dp(10.0f) * (1.0f / width));
                }
            };
            view.setOutlineProvider(viewOutlineProvider);
            view.setClipToOutline(true);
            this.textureImageView.setOutlineProvider(viewOutlineProvider);
            this.textureImageView.setClipToOutline(true);
            FirstFrameView firstFrameView2 = this.firstFrameView;
            if (firstFrameView2 != null) {
                firstFrameView2.setOutlineProvider(viewOutlineProvider);
                this.firstFrameView.setClipToOutline(true);
            }
            final float f4 = translationY;
            final CubicBezierInterpolator cubicBezierInterpolator2 = cubicBezierInterpolator;
            final float f5 = translationY2;
            ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda30
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$switchToPip$58(cubicBezierInterpolator2, f, f2, f5, f3, view, x, f4, y, valueAnimator);
                }
            });
            AnimatorSet animatorSet = new AnimatorSet();
            ValueAnimator ofFloat3 = ValueAnimator.ofFloat(0.0f, 1.0f);
            ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda31
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    PhotoViewer.this.lambda$switchToPip$59(valueAnimator);
                }
            });
            ImageView imageView = this.textureImageView;
            Property property = View.SCALE_X;
            ObjectAnimator ofFloat4 = ObjectAnimator.ofFloat(imageView, property, width);
            ImageView imageView2 = this.textureImageView;
            Property property2 = View.SCALE_Y;
            animatorSet.playTogether(ofFloat3, ofFloat4, ObjectAnimator.ofFloat(imageView2, property2, width), ObjectAnimator.ofFloat(view, property, width), ObjectAnimator.ofFloat(view, property2, width), ObjectAnimator.ofInt(this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, 0), ofFloat2);
            if (z) {
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT);
                j = 300;
            } else {
                animatorSet.setInterpolator(new DecelerateInterpolator());
                j = 250;
            }
            animatorSet.setDuration(j);
            animatorSet.addListener(new 39(view));
            animatorSet.start();
            if (!z) {
                toggleActionBar(false, true, new ActionBarToggleParams().enableStatusBarAnimation(false).enableTranslationAnimation(false).animationDuration(NotificationCenter.liveLocationsChanged).animationInterpolator(new DecelerateInterpolator()));
            }
        } else {
            this.switchToInlineRunnable.run();
            dismissInternal();
        }
        ChatActivity chatActivity = this.parentChatActivity;
        if (chatActivity == null || chatActivity.getFragmentView() == null) {
            return;
        }
        this.parentChatActivity.getFragmentView().invalidate();
    }

    public void toggleActionBar(boolean z, boolean z2) {
        toggleActionBar(z, z2, ActionBarToggleParams.DEFAULT);
    }

    public void toggleActionBar(final boolean z, boolean z2, ActionBarToggleParams actionBarToggleParams) {
        CaptionScrollView captionScrollView;
        CaptionScrollView captionScrollView2;
        if (this.currentEditMode == 0) {
            int i = this.switchingToMode;
            if (i == 0 || i == -1) {
                AnimatorSet animatorSet = this.actionBarAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                }
                if (z) {
                    this.actionBar.setVisibility(0);
                    if (this.bottomLayout.getTag() != null) {
                        this.bottomLayout.setVisibility(0);
                    }
                    if (this.captionTextViewSwitcher.getTag() != null) {
                        this.captionTextViewSwitcher.setVisibility(0);
                        VideoSeekPreviewImage videoSeekPreviewImage = this.videoPreviewFrame;
                        if (videoSeekPreviewImage != null) {
                            videoSeekPreviewImage.requestLayout();
                        }
                    }
                }
                this.isActionBarVisible = z;
                PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
                if (photoViewerWebView != null) {
                    photoViewerWebView.setTouchDisabled(z);
                }
                if (actionBarToggleParams.enableStatusBarAnimation) {
                    updateContainerFlags(z);
                }
                if (this.videoPlayerControlVisible && this.isPlaying && z) {
                    scheduleActionBarHide();
                } else {
                    AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
                }
                if (!z) {
                    Bulletin.hide(this.containerView);
                }
                float dpf2 = AndroidUtilities.dpf2(24.0f);
                this.videoPlayerControlFrameLayout.setSeekBarTransitionEnabled(actionBarToggleParams.enableTranslationAnimation && this.playerLooping);
                this.videoPlayerControlFrameLayout.setTranslationYAnimationEnabled(actionBarToggleParams.enableTranslationAnimation);
                if (!z2) {
                    this.actionBar.setAlpha(z ? 1.0f : 0.0f);
                    if (this.fullscreenButton[0].getTranslationX() != 0.0f && this.allowShowFullscreenButton) {
                        this.fullscreenButton[0].setAlpha(z ? 1.0f : 0.0f);
                    }
                    for (int i2 = 0; i2 < 3; i2++) {
                        this.fullscreenButton[i2].setTranslationY(z ? 0.0f : dpf2);
                    }
                    this.actionBar.setTranslationY(z ? 0.0f : -dpf2);
                    PhotoCountView photoCountView = this.countView;
                    if (photoCountView != null) {
                        photoCountView.setAlpha(z ? 1.0f : 0.0f);
                        this.countView.setTranslationY(z ? 0.0f : -dpf2);
                    }
                    this.bottomLayout.setAlpha(z ? 1.0f : 0.0f);
                    this.bottomLayout.setTranslationY(z ? 0.0f : dpf2);
                    this.navigationBar.setAlpha(z ? 1.0f : 0.0f);
                    this.groupedPhotosListView.setAlpha((!z || this.aboutToSwitchTo == 3) ? 0.0f : 1.0f);
                    this.groupedPhotosListView.setTranslationY((!z || this.aboutToSwitchTo == 3) ? dpf2 : 0.0f);
                    if (!this.needCaptionLayout && (captionScrollView = this.captionScrollView) != null) {
                        captionScrollView.setAlpha(z ? 1.0f : 0.0f);
                        CaptionScrollView captionScrollView3 = this.captionScrollView;
                        if (z) {
                            dpf2 = 0.0f;
                        }
                        captionScrollView3.setTranslationY(dpf2);
                    }
                    this.videoPlayerControlFrameLayout.setProgress(z ? 1.0f : 0.0f);
                    if (this.muteItem.getTag() != null) {
                        this.muteItem.setAlpha(z ? 1.0f : 0.0f);
                    }
                    if (this.videoPlayerControlVisible && this.isPlaying) {
                        this.photoProgressViews[0].setIndexedAlpha(1, z ? 1.0f : 0.0f, false);
                        return;
                    }
                    return;
                }
                ArrayList arrayList = new ArrayList();
                ActionBar actionBar = this.actionBar;
                Property property = View.ALPHA;
                arrayList.add(ObjectAnimator.ofFloat(actionBar, property, z ? 1.0f : 0.0f));
                if (actionBarToggleParams.enableTranslationAnimation) {
                    arrayList.add(ObjectAnimator.ofFloat(this.actionBar, View.TRANSLATION_Y, z ? 0.0f : -dpf2));
                } else {
                    this.actionBar.setTranslationY(0.0f);
                }
                if (this.allowShowFullscreenButton) {
                    arrayList.add(ObjectAnimator.ofFloat(this.fullscreenButton[0], property, z ? 1.0f : 0.0f));
                }
                for (int i3 = 1; i3 < 3; i3++) {
                    this.fullscreenButton[i3].setTranslationY(z ? 0.0f : dpf2);
                }
                if (actionBarToggleParams.enableTranslationAnimation) {
                    arrayList.add(ObjectAnimator.ofFloat(this.fullscreenButton[0], View.TRANSLATION_Y, z ? 0.0f : dpf2));
                } else {
                    this.fullscreenButton[0].setTranslationY(0.0f);
                }
                FrameLayout frameLayout = this.bottomLayout;
                if (frameLayout != null) {
                    arrayList.add(ObjectAnimator.ofFloat(frameLayout, View.ALPHA, z ? 1.0f : 0.0f));
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        arrayList.add(ObjectAnimator.ofFloat(this.bottomLayout, View.TRANSLATION_Y, z ? 0.0f : dpf2));
                    } else {
                        this.bottomLayout.setTranslationY(0.0f);
                    }
                }
                PhotoCountView photoCountView2 = this.countView;
                if (photoCountView2 != null) {
                    arrayList.add(ObjectAnimator.ofFloat(photoCountView2, View.ALPHA, z ? 1.0f : 0.0f));
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        arrayList.add(ObjectAnimator.ofFloat(this.countView, View.TRANSLATION_Y, z ? 0.0f : -dpf2));
                    } else {
                        this.countView.setTranslationY(0.0f);
                    }
                }
                View view = this.navigationBar;
                if (view != null) {
                    arrayList.add(ObjectAnimator.ofFloat(view, View.ALPHA, z ? 1.0f : 0.0f));
                }
                if (this.videoPlayerControlVisible) {
                    arrayList.add(ObjectAnimator.ofFloat(this.videoPlayerControlFrameLayout, VPC_PROGRESS, z ? 1.0f : 0.0f));
                } else {
                    this.videoPlayerControlFrameLayout.setProgress(z ? 1.0f : 0.0f);
                }
                GroupedPhotosListView groupedPhotosListView = this.groupedPhotosListView;
                Property property2 = View.ALPHA;
                arrayList.add(ObjectAnimator.ofFloat(groupedPhotosListView, property2, z ? 1.0f : 0.0f));
                if (actionBarToggleParams.enableTranslationAnimation) {
                    arrayList.add(ObjectAnimator.ofFloat(this.groupedPhotosListView, View.TRANSLATION_Y, z ? 0.0f : dpf2));
                } else {
                    this.groupedPhotosListView.setTranslationY(0.0f);
                }
                if (!this.needCaptionLayout && (captionScrollView2 = this.captionScrollView) != null) {
                    arrayList.add(ObjectAnimator.ofFloat(captionScrollView2, property2, z ? 1.0f : 0.0f));
                    if (actionBarToggleParams.enableTranslationAnimation) {
                        CaptionScrollView captionScrollView4 = this.captionScrollView;
                        Property property3 = View.TRANSLATION_Y;
                        if (z) {
                            dpf2 = 0.0f;
                        }
                        arrayList.add(ObjectAnimator.ofFloat(captionScrollView4, property3, dpf2));
                    } else {
                        this.captionScrollView.setTranslationY(0.0f);
                    }
                }
                if (this.videoPlayerControlVisible && this.isPlaying) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.photoProgressViews[0].animAlphas[1], z ? 1.0f : 0.0f);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda28
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            PhotoViewer.this.lambda$toggleActionBar$87(valueAnimator);
                        }
                    });
                    arrayList.add(ofFloat);
                }
                if (this.muteItem.getTag() != null) {
                    arrayList.add(ObjectAnimator.ofFloat(this.muteItem, property2, z ? 1.0f : 0.0f));
                }
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.actionBarAnimator = animatorSet2;
                animatorSet2.playTogether(arrayList);
                this.actionBarAnimator.setDuration(actionBarToggleParams.animationDuration);
                this.actionBarAnimator.setInterpolator(actionBarToggleParams.animationInterpolator);
                this.actionBarAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.63
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (animator.equals(PhotoViewer.this.actionBarAnimator)) {
                            PhotoViewer.this.actionBarAnimator = null;
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (animator.equals(PhotoViewer.this.actionBarAnimator)) {
                            if (!z) {
                                PhotoViewer.this.actionBar.setVisibility(4);
                                if (PhotoViewer.this.bottomLayout.getTag() != null) {
                                    PhotoViewer.this.bottomLayout.setVisibility(4);
                                }
                                if (PhotoViewer.this.captionTextViewSwitcher.getTag() != null) {
                                    PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                                }
                            }
                            PhotoViewer.this.actionBarAnimator = null;
                        }
                    }
                });
                this.actionBarAnimator.start();
            }
        }
    }

    private void toggleCheckImageView(boolean z) {
        AnimatorSet animatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        float dpf2 = AndroidUtilities.dpf2(24.0f);
        FrameLayout frameLayout = this.pickerView;
        Property property = View.ALPHA;
        arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, z ? 1.0f : 0.0f));
        FrameLayout frameLayout2 = this.pickerView;
        Property property2 = View.TRANSLATION_Y;
        arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, z ? 0.0f : dpf2));
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            arrayList.add(ObjectAnimator.ofFloat(stickerMakerView, property, z ? 1.0f : 0.0f));
        }
        if (this.stickerMakerView != null) {
            arrayList.add(ObjectAnimator.ofFloat(this.stickerMakerBackgroundView, property, z ? 1.0f : 0.0f));
        }
        arrayList.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property, z ? 1.0f : 0.0f));
        arrayList.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property2, z ? 0.0f : dpf2));
        int i = this.sendPhotoType;
        if (i == 0 || i == 4) {
            arrayList.add(ObjectAnimator.ofFloat(this.checkImageView, property, z ? 1.0f : 0.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.checkImageView, property2, z ? 0.0f : -dpf2));
            arrayList.add(ObjectAnimator.ofFloat(this.photosCounterView, property, z ? 1.0f : 0.0f));
            arrayList.add(ObjectAnimator.ofFloat(this.photosCounterView, property2, z ? 0.0f : -dpf2));
        }
        animatorSet.playTogether(arrayList);
        animatorSet.setDuration(200L);
        animatorSet.start();
        if (z || !isCaptionOpen()) {
            return;
        }
        if (this.captionEdit.editText.isPopupShowing()) {
            this.captionEdit.editText.hidePopup(true);
        }
        this.captionEdit.editText.closeKeyboard();
    }

    private void toggleMiniProgress(boolean z, boolean z2) {
        AndroidUtilities.cancelRunOnUIThread(this.miniProgressShowRunnable);
        if (!z2) {
            AnimatorSet animatorSet = this.miniProgressAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.miniProgressAnimator = null;
            }
            this.miniProgressView.setAlpha(z ? 1.0f : 0.0f);
            this.miniProgressView.setVisibility(z ? 0 : 4);
            return;
        }
        toggleMiniProgressInternal(z);
        if (!z) {
            AnimatorSet animatorSet2 = this.miniProgressAnimator;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                toggleMiniProgressInternal(false);
                return;
            }
            return;
        }
        AnimatorSet animatorSet3 = this.miniProgressAnimator;
        if (animatorSet3 != null) {
            animatorSet3.cancel();
            this.miniProgressAnimator = null;
        }
        if (!this.firstAnimationDelay) {
            AndroidUtilities.runOnUIThread(this.miniProgressShowRunnable, 500L);
            return;
        }
        this.firstAnimationDelay = false;
        toggleMiniProgressInternal(true);
    }

    private void toggleMiniProgressInternal(final boolean z) {
        if (z) {
            this.miniProgressView.setVisibility(0);
        }
        AnimatorSet animatorSet = new AnimatorSet();
        this.miniProgressAnimator = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofFloat(this.miniProgressView, View.ALPHA, z ? 1.0f : 0.0f));
        this.miniProgressAnimator.setDuration(200L);
        this.miniProgressAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.62
            {
                PhotoViewer.this = this;
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationCancel(Animator animator) {
                if (animator.equals(PhotoViewer.this.miniProgressAnimator)) {
                    PhotoViewer.this.miniProgressAnimator = null;
                }
            }

            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (animator.equals(PhotoViewer.this.miniProgressAnimator)) {
                    if (!z) {
                        PhotoViewer.this.miniProgressView.setVisibility(4);
                    }
                    PhotoViewer.this.miniProgressAnimator = null;
                }
            }
        });
        this.miniProgressAnimator.start();
    }

    private void togglePhotosListView(boolean z, boolean z2) {
        if (z == this.isPhotosListViewVisible) {
            return;
        }
        if (z) {
            this.selectedPhotosListView.setVisibility(0);
        }
        this.isPhotosListViewVisible = z;
        this.selectedPhotosListView.setEnabled(z);
        if (!z2) {
            this.selectedPhotosListView.setAlpha(z ? 1.0f : 0.0f);
            this.selectedPhotosListView.setTranslationY(z ? 0.0f : -AndroidUtilities.dp(10.0f));
            this.photosCounterView.setRotationX(z ? 1.0f : 0.0f);
            if (z) {
                return;
            }
            this.selectedPhotosListView.setVisibility(8);
            return;
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.ALPHA, z ? 1.0f : 0.0f));
        arrayList.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, View.TRANSLATION_Y, z ? 0.0f : -AndroidUtilities.dp(10.0f)));
        arrayList.add(ObjectAnimator.ofFloat(this.photosCounterView, View.ROTATION_X, z ? 1.0f : 0.0f));
        AnimatorSet animatorSet = new AnimatorSet();
        this.currentListViewAnimation = animatorSet;
        animatorSet.playTogether(arrayList);
        if (!z) {
            this.currentListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.64
                {
                    PhotoViewer.this = this;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (PhotoViewer.this.currentListViewAnimation == null || !PhotoViewer.this.currentListViewAnimation.equals(animator)) {
                        return;
                    }
                    PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                    PhotoViewer.this.currentListViewAnimation = null;
                }
            });
        }
        this.currentListViewAnimation.setDuration(200L);
        this.currentListViewAnimation.start();
    }

    public void toggleVideoPlayer() {
        VideoPlayer videoPlayer;
        VideoPlayer videoPlayer2;
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            boolean isPlaying = this.videoPlayer != null ? this.isPlaying : this.photoViewerWebView.isPlaying();
            cancelVideoPlayRunnable();
            AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
            if (isPlaying) {
                pauseVideoOrWeb();
            } else {
                if (!this.isCurrentVideo) {
                    if (Math.abs(this.videoPlayerSeekbar.getProgress() - this.videoTimelineView.getRightProgress()) < 0.01f || ((videoPlayer = this.videoPlayer) != null && videoPlayer.getCurrentPosition() == this.videoPlayer.getDuration())) {
                        seekVideoOrWebToProgress(0.0f);
                    }
                    scheduleActionBarHide();
                } else if (Math.abs(this.videoTimelineView.getProgress() - this.videoTimelineView.getRightProgress()) < 0.01f || ((videoPlayer2 = this.videoPlayer) != null && videoPlayer2.getCurrentPosition() == this.videoPlayer.getDuration())) {
                    seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                }
                playVideoOrWeb();
            }
            this.containerView.invalidate();
        }
    }

    private void translateY(float f) {
        ValueAnimator valueAnimator = this.translateYAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
            this.translateYAnimator = null;
        }
        if (this.currentEditMode != 3) {
            f = 0.0f;
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(this.translateY, f);
        this.translateYAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda133
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                PhotoViewer.this.lambda$translateY$83(valueAnimator2);
            }
        });
        this.translateYAnimator.setDuration(320L);
        this.translateYAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
        this.translateYAnimator.start();
    }

    public void updateAccessibilityOverlayVisibility() {
        View view;
        int i;
        String str;
        if (this.playButtonAccessibilityOverlay != null) {
            int i2 = this.photoProgressViews[0].backgroundState;
            if (!this.photoProgressViews[0].isVisible() || (i2 != 3 && i2 != 4 && i2 != 2 && i2 != 1)) {
                this.playButtonAccessibilityOverlay.setVisibility(4);
                return;
            }
            if (i2 == 3) {
                view = this.playButtonAccessibilityOverlay;
                i = R.string.AccActionPlay;
                str = "AccActionPlay";
            } else if (i2 == 2) {
                view = this.playButtonAccessibilityOverlay;
                i = R.string.AccActionDownload;
                str = "AccActionDownload";
            } else if (i2 == 1) {
                view = this.playButtonAccessibilityOverlay;
                i = R.string.AccActionCancelDownload;
                str = "AccActionCancelDownload";
            } else {
                view = this.playButtonAccessibilityOverlay;
                i = R.string.AccActionPause;
                str = "AccActionPause";
            }
            view.setContentDescription(LocaleController.getString(str, i));
            this.playButtonAccessibilityOverlay.setVisibility(0);
        }
    }

    public void updateActionBarTitlePadding() {
        if (this.menu == null || this.actionBarContainer == null) {
            return;
        }
        float f = 0.0f;
        for (int i = 0; i < this.menu.getChildCount(); i++) {
            View childAt = this.menu.getChildAt(i);
            if (childAt.getVisibility() == 0) {
                f += Math.min(0.5f, childAt.getAlpha()) * 2.0f * childAt.getWidth();
            }
        }
        CheckBox checkBox = this.checkImageView;
        if (checkBox != null && checkBox.getVisibility() == 0) {
            f = Math.max(f, AndroidUtilities.dp(48.0f));
        }
        CounterView counterView = this.photosCounterView;
        if (counterView != null && counterView.getVisibility() == 0) {
            f = Math.max(f, AndroidUtilities.dp(100.0f));
        }
        this.actionBarContainer.updateRightPadding(f, false);
    }

    private void updateCaptionTextForCurrentPhoto(Object obj) {
        CharSequence charSequence = this.hasCaptionForAllMedia ? this.captionForAllMedia : obj instanceof MediaController.PhotoEntry ? ((MediaController.PhotoEntry) obj).caption : (!(obj instanceof TLRPC.BotInlineResult) && (obj instanceof MediaController.SearchImage)) ? ((MediaController.SearchImage) obj).caption : null;
        if (TextUtils.isEmpty(charSequence)) {
            this.captionEdit.setText("");
        } else {
            this.captionEdit.setText(AnimatedEmojiSpan.cloneSpans(charSequence, 3));
        }
        this.captionEdit.editText.getEditText().setAllowTextEntitiesIntersection(supportsSendingNewEntities());
    }

    public void updateCaptionTranslated() {
        int i;
        MessageObject messageObject;
        CharSequence charSequence;
        boolean z;
        TLRPC.Message message;
        if (this.imagesArr.isEmpty() || (i = this.switchingToIndex) < 0 || i >= this.imagesArr.size() || (messageObject = (MessageObject) this.imagesArr.get(this.switchingToIndex)) == null) {
            return;
        }
        if (!this.captionTranslated || (message = messageObject.messageOwner) == null || message.translatedText == null || !TextUtils.equals(message.translatedToLanguage, TranslateAlert2.getToLanguage())) {
            charSequence = messageObject.caption;
            z = this.captionTranslated;
        } else {
            charSequence = postProcessTranslated(messageObject);
            z = false;
        }
        setCurrentCaption(messageObject, charSequence, z, true);
    }

    public void updateCompressionsCount(int i, int i2) {
        int max = Math.max(i, i2);
        this.compressionsCount = max > 1280 ? 4 : max > 854 ? 3 : max > 640 ? 2 : 1;
    }

    private void updateContainerFlags(boolean z) {
        FrameLayoutDrawer frameLayoutDrawer;
        if (Build.VERSION.SDK_INT < 21 || this.sendPhotoType == 1 || (frameLayoutDrawer = this.containerView) == null) {
            return;
        }
        this.containerView.setSystemUiVisibility(!z ? (frameLayoutDrawer.getPaddingLeft() > 0 || this.containerView.getPaddingRight() > 0) ? 5894 : 1796 : 1792);
    }

    public void updateMinMax(float f) {
        AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
        if (aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == 0 && this.textureUploaded) {
            View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            f *= Math.min(getContainerViewWidth() / view.getMeasuredWidth(), getContainerViewHeight() / view.getMeasuredHeight());
        }
        float imageWidth = this.centerImage.getImageWidth();
        float imageHeight = this.centerImage.getImageHeight();
        MediaController.CropState cropState = this.editState.cropState;
        if (cropState != null) {
            imageWidth *= cropState.cropPw;
            imageHeight *= cropState.cropPh;
        }
        int containerViewWidth = this.sendPhotoType == 11 ? (int) (imageWidth * f) : ((int) ((imageWidth * f) - getContainerViewWidth())) / 2;
        int containerViewHeight = this.sendPhotoType == 11 ? (int) (imageHeight * f) : ((int) ((imageHeight * f) - getContainerViewHeight())) / 2;
        if (containerViewWidth > 0) {
            this.minX = -containerViewWidth;
            this.maxX = containerViewWidth;
        } else {
            this.maxX = 0.0f;
            this.minX = 0.0f;
        }
        if (containerViewHeight > 0) {
            this.minY = -containerViewHeight;
            this.maxY = containerViewHeight;
        } else {
            this.maxY = 0.0f;
            this.minY = 0.0f;
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.updateZoom(f <= 1.1f);
        }
    }

    public void updatePlayerState(boolean z, int i) {
        VideoPlayer videoPlayer;
        MessageObject messageObject;
        TLRPC.MessageMedia messageMedia;
        TLRPC.WebPage webPage;
        PhotoViewerWebView photoViewerWebView;
        if (this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) {
            PhotoViewerWebView photoViewerWebView2 = this.photoViewerWebView;
            if (photoViewerWebView2 != null && photoViewerWebView2.isControllable() && !z) {
                toggleActionBar(true, true);
            }
            PhotoViewerWebView photoViewerWebView3 = this.photoViewerWebView;
            float f = 0.0f;
            if (photoViewerWebView3 != null && photoViewerWebView3.isControllable() && i == 3 && getVideoDuration() >= 10000 && this.shouldSavePositionForCurrentVideo == null && this.shouldSavePositionForCurrentVideoShortTerm == null) {
                if (this.currentMessageObject != null) {
                    long videoDuration = getVideoDuration() / 1000;
                    TLRPC.Message message = this.currentMessageObject.messageOwner;
                    String str = (message == null || (messageMedia = message.media) == null || (webPage = messageMedia.webpage) == null) ? null : webPage.url;
                    if (!TextUtils.isEmpty(str)) {
                        if (videoDuration >= 600) {
                            if (this.currentMessageObject.forceSeekTo < 0.0f) {
                                float f2 = ApplicationLoader.applicationContext.getSharedPreferences("media_saved_pos", 0).getFloat(str, -1.0f);
                                if (f2 > 0.0f && f2 < 0.999f) {
                                    this.currentMessageObject.forceSeekTo = f2;
                                    this.videoPlayerSeekbar.setProgress(f2);
                                }
                            }
                            this.shouldSavePositionForCurrentVideo = str;
                        } else if (videoDuration >= 10) {
                            SavedVideoPosition savedVideoPosition = null;
                            for (int size = this.savedVideoPositions.size() - 1; size >= 0; size--) {
                                SavedVideoPosition savedVideoPosition2 = (SavedVideoPosition) this.savedVideoPositions.valueAt(size);
                                if (savedVideoPosition2.timestamp < SystemClock.elapsedRealtime() - 5000) {
                                    this.savedVideoPositions.removeAt(size);
                                } else if (savedVideoPosition == null && ((String) this.savedVideoPositions.keyAt(size)).equals(str)) {
                                    savedVideoPosition = savedVideoPosition2;
                                }
                            }
                            MessageObject messageObject2 = this.currentMessageObject;
                            if (messageObject2.forceSeekTo < 0.0f && savedVideoPosition != null) {
                                float f3 = savedVideoPosition.position;
                                if (f3 > 0.0f && f3 < 0.999f) {
                                    messageObject2.forceSeekTo = f3;
                                    this.videoPlayerSeekbar.setProgress(f3);
                                }
                            }
                            this.shouldSavePositionForCurrentVideoShortTerm = str;
                        }
                    }
                }
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3 != null) {
                    float f4 = messageObject3.forceSeekTo;
                    if (f4 >= 0.0f) {
                        seekVideoOrWebToProgress(f4);
                        this.currentMessageObject.forceSeekTo = -1.0f;
                    }
                }
            }
            if (this.isStreaming) {
                if (i != 2 || !this.skipFirstBufferingProgress) {
                    boolean z2 = this.seekToProgressPending != 0.0f || i == 2;
                    if (z2) {
                        AndroidUtilities.cancelRunOnUIThread(this.hideActionBarRunnable);
                    } else {
                        scheduleActionBarHide();
                    }
                    toggleMiniProgress(z2, true);
                } else if (z) {
                    this.skipFirstBufferingProgress = false;
                }
            }
            AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            if (aspectRatioFrameLayout != null) {
                aspectRatioFrameLayout.setKeepScreenOn((!z || i == 4 || i == 1) ? false : true);
            }
            try {
                if (!z || i == 4 || i == 1) {
                    this.parentActivity.getWindow().clearFlags(128);
                    this.keepScreenOnFlagSet = false;
                } else {
                    this.parentActivity.getWindow().addFlags(128);
                    this.keepScreenOnFlagSet = true;
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (i == 3 || i == 1) {
                if (this.currentMessageObject != null && (videoPlayer = this.videoPlayer) != null) {
                    this.videoPreviewFrame.open(videoPlayer.getCurrentUri());
                }
                float f5 = this.seekToProgressPending;
                if (f5 != 0.0f) {
                    seekVideoOrWebToProgress(f5);
                    this.seekToProgressPending = 0.0f;
                    MessageObject messageObject4 = this.currentMessageObject;
                    if (messageObject4 != null && !FileLoader.getInstance(messageObject4.currentAccount).isLoadingVideoAny(this.currentMessageObject.getDocument())) {
                        this.skipFirstBufferingProgress = true;
                    }
                }
            }
            if (i == 3) {
                AspectRatioFrameLayout aspectRatioFrameLayout2 = this.aspectRatioFrameLayout;
                if (aspectRatioFrameLayout2 != null && aspectRatioFrameLayout2.getVisibility() != 0) {
                    this.aspectRatioFrameLayout.setVisibility(0);
                }
                if (!this.pipItem.isEnabled() && this.pipItem.getVisibility() == 0) {
                    this.pipAvailable = true;
                    this.pipItem.setEnabled(true);
                    this.pipItem.animate().alpha(1.0f).setDuration(175L).withEndAction(null).start();
                }
                this.playerWasReady = true;
                MessageObject messageObject5 = this.currentMessageObject;
                if (messageObject5 != null && messageObject5.isVideo()) {
                    AndroidUtilities.cancelRunOnUIThread(this.setLoadingRunnable);
                    FileLoader.getInstance(this.currentMessageObject.currentAccount).removeLoadingVideo(this.currentMessageObject.getDocument(), true, false);
                }
            } else if (i == 2 && z && (messageObject = this.currentMessageObject) != null && messageObject.isVideo()) {
                if (this.playerWasReady) {
                    this.setLoadingRunnable.run();
                } else {
                    AndroidUtilities.runOnUIThread(this.setLoadingRunnable, 1000L);
                }
            }
            VideoPlayer videoPlayer2 = this.videoPlayer;
            if (videoPlayer2 == null ? this.photoViewerWebView.isPlaying() : videoPlayer2.isPlaying()) {
                if (i != 4) {
                    if (!this.isPlaying) {
                        this.isPlaying = true;
                        this.photoProgressViews[0].setBackgroundState(this.isCurrentVideo ? -1 : 4, false, true);
                        PhotoProgressView photoProgressView = this.photoProgressViews[0];
                        if (this.isCurrentVideo || ((isAccessibilityEnabled() && !this.playerWasPlaying) || ((!this.playerAutoStarted || this.playerWasPlaying) && this.isActionBarVisible))) {
                            f = 1.0f;
                        }
                        photoProgressView.setIndexedAlpha(1, f, false);
                        this.playerWasPlaying = true;
                        AndroidUtilities.runOnUIThread(this.updateProgressRunnable);
                    }
                    PipVideoOverlay.updatePlayButton();
                    this.videoPlayerSeekbar.updateTimestamps(this.currentMessageObject, getVideoDuration());
                    updateVideoPlayerTime();
                }
            }
            if (this.isPlaying || i == 4) {
                if (this.currentEditMode != 3) {
                    this.photoProgressViews[0].setIndexedAlpha(1, 1.0f, i == 4);
                    PhotoProgressView photoProgressView2 = this.photoProgressViews[0];
                    photoProgressView2.setBackgroundState(3, false, photoProgressView2.animAlphas[1] > 0.0f);
                }
                this.isPlaying = false;
                AndroidUtilities.cancelRunOnUIThread(this.updateProgressRunnable);
                if (i == 4) {
                    if (!this.isCurrentVideo) {
                        this.videoPlayerSeekbar.setProgress(0.0f);
                        this.videoPlayerSeekbarView.invalidate();
                        if (this.inPreview || this.videoTimelineViewContainer.getVisibility() != 0) {
                            seekVideoOrWebToProgress(0.0f);
                        } else {
                            seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                        }
                        this.manuallyPaused = false;
                        pauseVideoOrWeb();
                        if (!this.isActionBarVisible) {
                            toggleActionBar(true, true);
                        }
                    } else if (!this.videoTimelineView.isDragging()) {
                        VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
                        videoTimelinePlayView.setProgress(videoTimelinePlayView.getLeftProgress());
                        if (this.inPreview || (this.currentEditMode == 0 && this.videoTimelineViewContainer.getVisibility() != 0)) {
                            seekVideoOrWebToProgress(0.0f);
                        } else {
                            seekVideoOrWebToProgress(this.videoTimelineView.getLeftProgress());
                        }
                        this.manuallyPaused = false;
                        cancelVideoPlayRunnable();
                        if (this.sendPhotoType == 1 || this.currentEditMode != 0 || this.switchingToMode > 0) {
                            playVideoOrWeb();
                        } else {
                            pauseVideoOrWeb();
                        }
                        this.containerView.invalidate();
                    }
                    PipVideoOverlay.onVideoCompleted();
                }
            }
            PipVideoOverlay.updatePlayButton();
            this.videoPlayerSeekbar.updateTimestamps(this.currentMessageObject, getVideoDuration());
            updateVideoPlayerTime();
        }
    }

    public void updateQualityItems() {
        AnimatedTextView.AnimatedTextDrawable animatedTextDrawable;
        String str;
        ChooseQualityLayout chooseQualityLayout = this.chooseQualityLayout;
        if (chooseQualityLayout == null || this.qualityItem == null) {
            return;
        }
        String str2 = "";
        if (chooseQualityLayout.update(this.videoPlayer)) {
            this.qualityItem.setVisibility(0);
            if (this.videoPlayer.getSelectedQuality() == -1) {
                this.qualityItem.setSubtext(LocaleController.getString(R.string.QualityAuto));
            } else {
                VideoPlayer videoPlayer = this.videoPlayer;
                VideoPlayer.QualityUri quality = videoPlayer.getQuality(videoPlayer.getSelectedQuality());
                ActionBarMenuSubItem actionBarMenuSubItem = this.qualityItem;
                if (quality != null) {
                    str = Math.min(quality.width, quality.height) + "p";
                } else {
                    str = "";
                }
                actionBarMenuSubItem.setSubtext(str);
            }
            VideoPlayer.QualityUri currentQuality = this.videoPlayer.getCurrentQuality();
            if (currentQuality != null) {
                int max = Math.max(currentQuality.width, currentQuality.height);
                int min = Math.min(currentQuality.width, currentQuality.height);
                if (Math.abs(min - 1080) < 30) {
                    min = 1080;
                } else if (Math.abs(min - 720) < 30) {
                    min = 720;
                } else if (Math.abs(min - 360) < 30) {
                    min = 360;
                } else if (Math.abs(min - 240) < 30) {
                    min = NotificationCenter.needSetDayNightTheme;
                } else if (Math.abs(min - 144) < 30) {
                    min = NotificationCenter.messagePlayingProgressDidChanged;
                }
                if (max >= 16000) {
                    animatedTextDrawable = this.qualityIcon.text;
                    str2 = "16K";
                } else if (max >= 8000) {
                    animatedTextDrawable = this.qualityIcon.text;
                    str2 = "8K";
                } else if (max >= 4000) {
                    animatedTextDrawable = this.qualityIcon.text;
                    str2 = "4K";
                } else if (min < 1080) {
                    this.qualityIcon.text.setText(min + "");
                    return;
                } else {
                    animatedTextDrawable = this.qualityIcon.text;
                    str2 = "HD";
                }
                animatedTextDrawable.setText(str2);
            }
        } else {
            this.qualityItem.setVisibility(8);
        }
        animatedTextDrawable = this.qualityIcon.text;
        animatedTextDrawable.setText(str2);
    }

    public void updateResetButtonVisibility(final boolean z) {
        if (this.resetButton.isClickable() != z) {
            this.resetButton.setClickable(z);
            this.resetButton.setVisibility(0);
            this.resetButton.clearAnimation();
            this.resetButton.animate().alpha(z ? 1.0f : 0.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).setDuration(150L).withEndAction(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda79
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$updateResetButtonVisibility$66(z);
                }
            });
        }
    }

    public void updateSelectedCount() {
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider == null) {
            return;
        }
        int selectedCount = photoViewerProvider.getSelectedCount();
        this.photosCounterView.setCount(selectedCount);
        if (selectedCount == 0) {
            togglePhotosListView(false, true);
        }
    }

    public void updateVideoInfo() {
        float f;
        float f2;
        int i;
        if (this.actionBar == null) {
            return;
        }
        if (this.compressionsCount == 0) {
            this.actionBarContainer.setSubtitle(null);
            return;
        }
        this.compressItem.setState(this.videoConvertSupported && this.compressionsCount > 1, this.muteVideo, Math.min(this.resultWidth, this.resultHeight));
        this.itemsLayout.requestLayout();
        this.estimatedDuration = (long) Math.ceil((this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress()) * this.videoDuration);
        this.videoCutStart = this.videoTimelineView.getLeftProgress();
        this.videoCutEnd = this.videoTimelineView.getRightProgress();
        int i2 = this.rotationValue;
        int i3 = (i2 == 90 || i2 == 270) ? this.resultHeight : this.resultWidth;
        int i4 = this.rotationValue;
        int i5 = (i4 == 90 || i4 == 270) ? this.resultWidth : this.resultHeight;
        boolean needEncoding = needEncoding();
        if (this.muteVideo) {
            if (this.sendPhotoType == 1) {
                long j = this.estimatedDuration;
                i = j <= 2000 ? 2600000 : j <= 5000 ? 2200000 : 1560000;
            } else {
                i = 921600;
            }
            long j2 = (i / 8) * (((float) this.estimatedDuration) / 1000.0f);
            this.estimatedSize = j2 + ((j2 / 32768) * 16);
        } else {
            calculateEstimatedVideoSize(needEncoding, this.sendPhotoType == 1);
        }
        if (this.videoCutStart == 0.0f) {
            this.startTime = -1L;
        } else {
            this.startTime = f * this.videoDuration * 1000;
        }
        if (this.videoCutEnd == 1.0f) {
            this.endTime = -1L;
        } else {
            this.endTime = f2 * this.videoDuration * 1000;
        }
        this.currentSubtitle = String.format("%s, %s", String.format("%dx%d", Integer.valueOf(i3), Integer.valueOf(i5)), String.format("%s, ~%s", AndroidUtilities.formatShortDuration((int) (this.estimatedDuration / 1000)), AndroidUtilities.formatFileSize(this.estimatedSize)));
        this.actionBar.beginDelayedTransition();
        if (this.customTitle == null) {
            this.actionBarContainer.setSubtitle(this.muteVideo ? LocaleController.getString("SoundMuted", R.string.SoundMuted) : this.currentSubtitle);
        }
    }

    public void updateVideoPlayerTime() {
        Arrays.fill(this.videoPlayerCurrentTime, 0);
        Arrays.fill(this.videoPlayerTotalTime, 0);
        VideoPlayer videoPlayer = this.videoPlayer;
        long j = 0;
        if (videoPlayer != null) {
            long max = Math.max(0L, videoPlayer.getCurrentPosition());
            if (this.shownControlsByEnd && !this.actionBarWasShownBeforeByEnd) {
                max = 0;
            }
            long max2 = Math.max(0L, this.videoPlayer.getDuration());
            if (!this.inPreview && this.videoTimelineViewContainer.getVisibility() == 0) {
                max2 = ((float) max2) * (this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress());
                max = ((float) max) - (this.videoTimelineView.getLeftProgress() * ((float) max2));
                if (max > max2) {
                    max = max2;
                }
            }
            long j2 = max / 1000;
            long j3 = max2 / 1000;
            int[] iArr = this.videoPlayerCurrentTime;
            iArr[0] = (int) (j2 / 60);
            iArr[1] = (int) (j2 % 60);
            int[] iArr2 = this.videoPlayerTotalTime;
            iArr2[0] = (int) (j3 / 60);
            iArr2[1] = (int) (j3 % 60);
        } else {
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
                long max3 = Math.max(0, this.photoViewerWebView.getCurrentPosition());
                if (!this.shownControlsByEnd || this.actionBarWasShownBeforeByEnd) {
                    j = max3;
                }
                long max4 = Math.max(0, this.photoViewerWebView.getVideoDuration());
                if (!this.inPreview && this.videoTimelineViewContainer.getVisibility() == 0) {
                    max4 = ((float) max4) * (this.videoTimelineView.getRightProgress() - this.videoTimelineView.getLeftProgress());
                    j = ((float) j) - (this.videoTimelineView.getLeftProgress() * ((float) max4));
                    if (j > max4) {
                        j = max4;
                    }
                }
                long j4 = j / 1000;
                long j5 = max4 / 1000;
                int[] iArr3 = this.videoPlayerCurrentTime;
                iArr3[0] = (int) (j4 / 60);
                iArr3[1] = (int) (j4 % 60);
                int[] iArr4 = this.videoPlayerTotalTime;
                iArr4[0] = (int) (j5 / 60);
                iArr4[1] = (int) (j5 % 60);
            }
        }
        int[] iArr5 = this.videoPlayerCurrentTime;
        int i = iArr5[0];
        String format = i >= 60 ? format(i / 60, i % 60, iArr5[1]) : format(i, iArr5[1]);
        int[] iArr6 = this.videoPlayerTotalTime;
        int i2 = iArr6[0];
        String format2 = i2 >= 60 ? format(i2 / 60, i2 % 60, iArr6[1]) : format(i2, iArr6[1]);
        this.videoPlayerTime.setText(format + " / " + format2);
        if (Objects.equals(this.lastControlFrameDuration, format2)) {
            return;
        }
        this.lastControlFrameDuration = format2;
        this.videoPlayerControlFrameLayout.requestLayout();
    }

    public void updateVideoSeekPreviewPosition() {
        int thumbX = (this.videoPlayerSeekbar.getThumbX() + AndroidUtilities.dp(2.0f)) - (this.videoPreviewFrame.getMeasuredWidth() / 2);
        int dp = AndroidUtilities.dp(10.0f);
        int measuredWidth = (this.videoPlayerControlFrameLayout.getMeasuredWidth() - AndroidUtilities.dp(10.0f)) - (this.videoPreviewFrame.getMeasuredWidth() / 2);
        if (thumbX < dp) {
            VideoSeekPreviewImage videoSeekPreviewImage = this.videoPreviewFrame;
            videoSeekPreviewImage.setPivotX(Utilities.clamp((videoSeekPreviewImage.getMeasuredWidth() / 2.0f) - (dp - thumbX), this.videoPreviewFrame.getMeasuredWidth(), 0.0f));
            thumbX = dp;
        } else if (thumbX >= measuredWidth) {
            VideoSeekPreviewImage videoSeekPreviewImage2 = this.videoPreviewFrame;
            videoSeekPreviewImage2.setPivotX(Utilities.clamp((videoSeekPreviewImage2.getMeasuredWidth() / 2.0f) + (thumbX - measuredWidth), this.videoPreviewFrame.getMeasuredWidth(), 0.0f));
            thumbX = measuredWidth;
        } else {
            VideoSeekPreviewImage videoSeekPreviewImage3 = this.videoPreviewFrame;
            videoSeekPreviewImage3.setPivotX(videoSeekPreviewImage3.getMeasuredWidth() / 2.0f);
        }
        this.videoPreviewFrame.setTranslationX(thumbX);
    }

    public void updateWidthHeightBitrateForCompression() {
        int height;
        int extractRealEncoderBitrate;
        if (this.compressionsCount <= 0) {
            return;
        }
        if (this.selectedCompression >= this.compressionsCount) {
            this.selectedCompression = this.compressionsCount - 1;
        }
        if (this.sendPhotoType == 1) {
            float max = Math.max(800.0f / this.originalWidth, 800.0f / this.originalHeight);
            this.resultWidth = Math.round((this.originalWidth * max) / 2.0f) * 2;
            height = Math.round((this.originalHeight * max) / 2.0f) * 2;
        } else {
            Size calculateResultVideoSize = calculateResultVideoSize();
            this.resultWidth = calculateResultVideoSize.getWidth();
            height = calculateResultVideoSize.getHeight();
        }
        this.resultHeight = height;
        if (this.bitrate != 0) {
            if (this.sendPhotoType == 1) {
                this.bitrate = 1560000;
                extractRealEncoderBitrate = this.bitrate;
            } else {
                this.bitrate = (this.resultWidth == this.originalWidth && this.resultHeight == this.originalHeight) ? this.originalBitrate : MediaController.makeVideoBitrate(this.originalHeight, this.originalWidth, this.originalBitrate, this.resultHeight, this.resultWidth);
                extractRealEncoderBitrate = MediaController.extractRealEncoderBitrate(this.resultWidth, this.resultHeight, this.bitrate, false);
            }
            this.videoFramesSize = ((extractRealEncoderBitrate / 8) * this.videoDuration) / 1000.0f;
        }
    }

    public boolean useFullWidthSendButton() {
        ImageUpdater.AvatarFor avatarFor = this.setAvatarFor;
        return (avatarFor == null || !avatarFor.self || avatarFor.isVideo) ? false : true;
    }

    public void addPhoto(MessageObject messageObject, int i) {
        if (i != this.classGuid) {
            return;
        }
        if (this.imagesByIds[0].indexOfKey(messageObject.getId()) < 0) {
            if (this.opennedFromMedia) {
                this.imagesArr.add(messageObject);
            } else {
                this.imagesArr.add(0, messageObject);
            }
            this.imagesByIds[0].put(messageObject.getId(), messageObject);
        }
        this.endReached[0] = this.imagesArr.size() == this.totalImagesCount;
        setImages();
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    public boolean canDoubleTap(MotionEvent motionEvent) {
        MessageObject messageObject;
        PhotoViewerWebView photoViewerWebView;
        if (this.checkImageView.getVisibility() != 0) {
            boolean[] zArr = this.drawPressedDrawable;
            if (zArr[0] || zArr[1]) {
                return true;
            }
            float x = motionEvent.getX();
            int min = Math.min((int) NotificationCenter.fileUploadFailed, this.containerView.getMeasuredWidth() / 8);
            if ((x < min || x > this.containerView.getMeasuredWidth() - min) && (messageObject = this.currentMessageObject) != null) {
                return (messageObject.isVideo() || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) && SystemClock.elapsedRealtime() - this.lastPhotoSetTime >= 500 && canDoubleTapSeekVideo(motionEvent);
            }
            return true;
        }
        return true;
    }

    public void checkCurrentImageVisibility() {
        PlaceProviderObject placeProviderObject = this.currentPlaceObject;
        if (placeProviderObject != null) {
            placeProviderObject.imageReceiver.setVisible(true, true);
        }
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        PlaceProviderObject placeForPhoto = photoViewerProvider == null ? null : photoViewerProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, false);
        this.currentPlaceObject = placeForPhoto;
        if (placeForPhoto != null) {
            placeForPhoto.imageReceiver.setVisible(false, true);
        }
    }

    public void checkFullscreenButton() {
        MessageObject messageObject;
        ImageView imageView;
        TextureView textureView;
        TextureView textureView2;
        float f;
        float f2;
        MessageObject messageObject2;
        if (this.imagesArr.isEmpty() || ((messageObject = this.currentMessageObject) != null && messageObject.isSponsored())) {
            for (int i = 0; i < 3; i++) {
                this.fullscreenButton[i].setVisibility(4);
            }
            return;
        }
        int i2 = 0;
        while (i2 < 3) {
            int i3 = this.currentIndex;
            if (i2 == 1) {
                i3++;
            } else if (i2 == 2) {
                i3--;
            }
            if (i3 < 0 || i3 >= this.imagesArr.size()) {
                imageView = this.fullscreenButton[i2];
            } else {
                MessageObject messageObject3 = (MessageObject) this.imagesArr.get(i3);
                if (messageObject3.isVideo() || messageObject3.isYouTubeVideo()) {
                    boolean z = messageObject3.isYouTubeVideo() && (messageObject2 = this.currentMessageObject) != null && messageObject2.getId() == messageObject3.getId();
                    int measuredWidth = z ? messageObject3.messageOwner.media.webpage.embed_width : (i2 != 0 || (textureView = this.videoTextureView) == null) ? 0 : textureView.getMeasuredWidth();
                    int measuredHeight = z ? messageObject3.messageOwner.media.webpage.embed_height : (i2 != 0 || (textureView2 = this.videoTextureView) == null) ? 0 : textureView2.getMeasuredHeight();
                    TLRPC.Document document = messageObject3.getDocument();
                    if (document != null) {
                        int size = document.attributes.size();
                        int i4 = 0;
                        while (true) {
                            if (i4 >= size) {
                                break;
                            }
                            TLRPC.DocumentAttribute documentAttribute = document.attributes.get(i4);
                            if (documentAttribute instanceof TLRPC.TL_documentAttributeVideo) {
                                measuredWidth = documentAttribute.w;
                                measuredHeight = documentAttribute.h;
                                break;
                            }
                            i4++;
                        }
                    }
                    Point point = AndroidUtilities.displaySize;
                    if (point.y > point.x && measuredWidth > measuredHeight) {
                        if (this.fullscreenButton[i2].getVisibility() != 0) {
                            this.fullscreenButton[i2].setVisibility(0);
                        }
                        if (this.isActionBarVisible) {
                            this.fullscreenButton[i2].setAlpha(1.0f);
                        }
                        ((FrameLayout.LayoutParams) this.fullscreenButton[i2].getLayoutParams()).topMargin = ((this.containerView.getMeasuredHeight() + ((int) (measuredHeight / (measuredWidth / this.containerView.getMeasuredWidth())))) / 2) - AndroidUtilities.dp(48.0f);
                    } else if (this.fullscreenButton[i2].getVisibility() != 4) {
                        this.fullscreenButton[i2].setVisibility(4);
                    }
                    if (this.imageMoveAnimation != null) {
                        float f3 = this.translationX;
                        f = f3 + ((this.animateToX - f3) * this.animationValue);
                    } else {
                        f = this.translationX;
                    }
                    if (i2 != 1) {
                        if (i2 == 2) {
                            f2 = ((-AndroidUtilities.displaySize.x) - AndroidUtilities.dp(15.0f)) + (f - this.maxX);
                        } else {
                            float f4 = this.minX;
                            if (f < f4) {
                                f2 = f - f4;
                            }
                        }
                        this.fullscreenButton[i2].setTranslationX((f2 + AndroidUtilities.displaySize.x) - AndroidUtilities.dp(48.0f));
                        i2++;
                    }
                    f2 = 0.0f;
                    this.fullscreenButton[i2].setTranslationX((f2 + AndroidUtilities.displaySize.x) - AndroidUtilities.dp(48.0f));
                    i2++;
                } else {
                    imageView = this.fullscreenButton[i2];
                }
            }
            imageView.setVisibility(4);
            i2++;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:414:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x01fe  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0226  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x025f  */
    /* JADX WARN: Removed duplicated region for block: B:444:0x0266  */
    /* JADX WARN: Removed duplicated region for block: B:452:0x0290  */
    /* JADX WARN: Removed duplicated region for block: B:455:0x0299  */
    /* JADX WARN: Removed duplicated region for block: B:456:0x02ac  */
    /* JADX WARN: Removed duplicated region for block: B:593:0x0204 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closePhoto(boolean z, boolean z2) {
        float f;
        float f2;
        float f3;
        float f4;
        PhotoViewerProvider photoViewerProvider;
        final PlaceProviderObject placeForPhoto;
        PhotoViewerWebView photoViewerWebView;
        ChatActivity chatActivity;
        VelocityTracker velocityTracker;
        AnimatedFileDrawable animatedFileDrawable;
        RectF rectF;
        float min;
        int[] iArr;
        BaseFragment baseFragment;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        int i;
        int i2;
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.isThanosInProgress = false;
            if (this.cutOutBtn.isCancelState()) {
                this.cutOutBtn.setCutOutState(true);
                showEditStickerMode(false, true);
                this.stickerMakerView.disableClippingMode();
                this.containerView.invalidate();
            }
        }
        if (!z2 && (i2 = this.currentEditMode) != 0) {
            if (i2 == 3 && this.photoPaintView != null) {
                closePaintMode();
                return;
            }
            if (i2 == 1) {
                this.cropTransform.setViewTransform(this.previousHasTransform, this.previousCropPx, this.previousCropPy, this.previousCropRotation, this.previousCropOrientation, this.previousCropScale, 1.0f, 1.0f, this.previousCropPw, this.previousCropPh, 0.0f, 0.0f, this.previousCropMirrored);
            }
            if (this.currentEditMode == 4) {
                applyCurrentEditMode();
            }
            switchToEditMode(0);
            return;
        }
        QualityChooseView qualityChooseView = this.qualityChooseView;
        if (qualityChooseView != null && qualityChooseView.getTag() != null) {
            this.qualityPicker.cancelButton.callOnClick();
            return;
        }
        this.isVisibleOrAnimating = false;
        this.openedFullScreenVideo = false;
        try {
            AlertDialog alertDialog = this.visibleDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
                this.visibleDialog = null;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (Build.VERSION.SDK_INT >= 21 && this.containerView != null) {
            AndroidUtilities.cancelRunOnUIThread(this.updateContainerFlagsRunnable);
            updateContainerFlags(true);
        }
        int i3 = this.currentEditMode;
        if (i3 != 0) {
            if (i3 == 2) {
                this.photoFilterView.shutdown();
                this.containerView.removeView(this.photoFilterView);
                this.photoFilterView = null;
            } else if (i3 == 1) {
                this.editorDoneLayout.setVisibility(8);
                this.photoCropView.setVisibility(8);
            } else if (i3 == 3) {
                this.photoPaintView.shutdown();
                this.containerView.removeView(this.photoPaintView.getView());
                this.photoPaintView = null;
                this.savedState = null;
            } else if (i3 == 4) {
                this.maskPaintViewShuttingDown = true;
                FrameLayoutDrawer frameLayoutDrawer = this.containerView;
                if (frameLayoutDrawer != null) {
                    frameLayoutDrawer.invalidate();
                    final MaskPaintView maskPaintView = this.maskPaintView;
                    this.containerView.post(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda7
                        @Override // java.lang.Runnable
                        public final void run() {
                            PhotoViewer.this.lambda$closePhoto$98(maskPaintView);
                        }
                    });
                } else {
                    this.maskPaintView.shutdown();
                }
                this.maskPaintView = null;
            }
            this.currentEditMode = 0;
            this.captionEdit.keyboardNotifier.ignore(false);
            KeyboardNotifier keyboardNotifier = this.paintKeyboardNotifier;
            if (keyboardNotifier != null) {
                keyboardNotifier.ignore(this.currentEditMode != 3);
            }
        }
        View view = this.navigationBar;
        if (view != null) {
            view.setVisibility(0);
        }
        FrameLayout frameLayout = this.windowView;
        if (frameLayout != null) {
            frameLayout.setClipChildren(false);
        }
        if (this.parentActivity != null) {
            if ((!this.isInline && !this.isVisible) || checkAnimation() || this.placeProvider == null) {
                return;
            }
            Activity activity = this.parentActivity;
            if (activity != null && this.fullscreenedByButton != 0) {
                activity.setRequestedOrientation(this.prevOrientation);
                this.fullscreenedByButton = 0;
                this.wasRotated = false;
            }
            if (!this.doneButtonPressed && !this.imagesArrLocals.isEmpty() && (i = this.currentIndex) >= 0 && i < this.imagesArrLocals.size()) {
                Object obj = this.imagesArrLocals.get(this.currentIndex);
                if (obj instanceof MediaController.MediaEditState) {
                    MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                    mediaEditState.editedInfo = getCurrentVideoEditedInfo();
                    if (this.sendPhotoType == 11) {
                        mediaEditState.reset();
                    }
                }
            }
            BaseFragment baseFragment2 = this.parentFragment;
            if (baseFragment2 == null || baseFragment2.getFragmentView() == null) {
                f = 1.0f;
                f2 = 1.0f;
            } else {
                View fragmentView = this.parentFragment.getFragmentView();
                f = fragmentView.getScaleX();
                float scaleY = fragmentView.getScaleY();
                fragmentView.setScaleX(1.0f);
                fragmentView.setScaleY(1.0f);
                ChatAttachAlert chatAttachAlert = this.parentAlert;
                if (chatAttachAlert != null) {
                    BottomSheet.ContainerView container = chatAttachAlert.getContainer();
                    float scaleX = container.getScaleX();
                    float scaleY2 = container.getScaleY();
                    container.setScaleX(1.0f);
                    container.setScaleY(1.0f);
                    f2 = scaleY;
                    f3 = scaleX;
                    f4 = scaleY2;
                    photoViewerProvider = this.placeProvider;
                    if (photoViewerProvider != null) {
                        photoViewerProvider.onReleasePlayerBeforeClose(this.currentIndex);
                    }
                    placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, true);
                    if (this.videoPlayer != null && placeForPhoto != null && (animation = placeForPhoto.imageReceiver.getAnimation()) != null) {
                        if (this.textureUploaded && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                            if (this.usedSurfaceView) {
                                try {
                                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                                    bitmap.recycle();
                                } catch (Throwable th) {
                                    FileLog.e(th);
                                }
                            } else {
                                AndroidUtilities.getBitmapFromSurface(this.videoSurfaceView, animatedBitmap);
                            }
                        }
                        if (this.currentMessageObject != null) {
                            long startTime = animation.getStartTime();
                            long currentPosition = this.videoPlayer.getCurrentPosition();
                            if (startTime <= 0) {
                                startTime = 0;
                            }
                            animation.seekTo(currentPosition + startTime, !FileLoader.getInstance(this.currentMessageObject.currentAccount).isLoadingVideo(this.currentMessageObject.getDocument(), true));
                        }
                        placeForPhoto.imageReceiver.setAllowStartAnimation(true);
                        placeForPhoto.imageReceiver.startAnimation();
                    }
                    if (!this.doneButtonPressed) {
                        releasePlayer(true);
                    }
                    photoViewerWebView = this.photoViewerWebView;
                    if (photoViewerWebView != null) {
                        photoViewerWebView.release();
                        this.containerView.removeView(this.photoViewerWebView);
                        this.photoViewerWebView = null;
                    }
                    chatActivity = this.parentChatActivity;
                    if (chatActivity != null && chatActivity.getFragmentView() != null) {
                        this.parentChatActivity.getFragmentView().invalidate();
                    }
                    this.parentChatActivity = null;
                    removeObservers();
                    this.isActionBarVisible = false;
                    velocityTracker = this.velocityTracker;
                    if (velocityTracker != null) {
                        velocityTracker.recycle();
                        this.velocityTracker = null;
                    }
                    if (this.isInline) {
                        if (z) {
                            ClippingImageView[] animatingImageViews = getAnimatingImageViews(placeForPhoto);
                            for (int i4 = 0; i4 < animatingImageViews.length; i4++) {
                                animatingImageViews[i4].setAnimationValues(this.animationValues);
                                animatingImageViews[i4].setVisibility(0);
                            }
                            this.animationInProgress = 3;
                            this.containerView.invalidate();
                            AnimatorSet animatorSet = new AnimatorSet();
                            ViewGroup.LayoutParams layoutParams = this.animatingImageView.getLayoutParams();
                            if (placeForPhoto != null) {
                                rectF = placeForPhoto.imageReceiver.getDrawRegion();
                                layoutParams.width = (int) rectF.width();
                                layoutParams.height = (int) rectF.height();
                                int orientation = placeForPhoto.imageReceiver.getOrientation();
                                int animatedOrientation = placeForPhoto.imageReceiver.getAnimatedOrientation();
                                if (animatedOrientation != 0) {
                                    orientation = animatedOrientation;
                                }
                                for (int i5 = 0; i5 < animatingImageViews.length; i5++) {
                                    animatingImageViews[i5].setOrientation(orientation, placeForPhoto.imageReceiver.getInvert());
                                    animatingImageViews[i5].setImageBitmap(placeForPhoto.thumb);
                                }
                            } else {
                                layoutParams.width = (int) this.centerImage.getImageWidth();
                                layoutParams.height = (int) this.centerImage.getImageHeight();
                                for (int i6 = 0; i6 < animatingImageViews.length; i6++) {
                                    animatingImageViews[i6].setOrientation(this.centerImage.getOrientation(), this.centerImage.getInvert());
                                    animatingImageViews[i6].setImageBitmap(this.centerImage.getBitmapSafe());
                                }
                                rectF = null;
                            }
                            if (layoutParams.width <= 0) {
                                layoutParams.width = 100;
                            }
                            if (layoutParams.height <= 0) {
                                layoutParams.height = 100;
                            }
                            if (this.sendPhotoType == 1) {
                                float min2 = Math.min(this.photoCropView.getMeasuredWidth(), (this.photoCropView.getMeasuredHeight() - AndroidUtilities.dp(64.0f)) - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - (AndroidUtilities.dp(16.0f) * 2);
                                min = Math.max(min2 / layoutParams.width, min2 / layoutParams.height);
                            } else {
                                min = Math.min(this.windowView.getMeasuredWidth() / layoutParams.width, (AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) / layoutParams.height);
                            }
                            float f5 = this.scale;
                            float f6 = layoutParams.height * f5 * min;
                            float measuredWidth = (this.windowView.getMeasuredWidth() - ((layoutParams.width * f5) * min)) / 2.0f;
                            float measuredHeight = this.sendPhotoType == 1 ? ((this.photoCropView.getMeasuredHeight() - (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - f6) / 2.0f : ((AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0)) - f6) / 2.0f;
                            for (int i7 = 0; i7 < animatingImageViews.length; i7++) {
                                animatingImageViews[i7].setLayoutParams(layoutParams);
                                animatingImageViews[i7].setTranslationX(this.translationX + measuredWidth);
                                animatingImageViews[i7].setTranslationY(this.translationY + measuredHeight);
                                animatingImageViews[i7].setScaleX(this.scale * min);
                                animatingImageViews[i7].setScaleY(this.scale * min);
                            }
                            if (placeForPhoto != null) {
                                placeForPhoto.imageReceiver.setVisible(false, true);
                                int abs = (int) Math.abs(rectF.left - placeForPhoto.imageReceiver.getImageX());
                                int abs2 = (int) Math.abs(rectF.top - placeForPhoto.imageReceiver.getImageY());
                                if (placeForPhoto.imageReceiver.isAspectFit()) {
                                    abs = 0;
                                }
                                int[] iArr2 = new int[2];
                                placeForPhoto.parentView.getLocationInWindow(iArr2);
                                int i8 = iArr2[1];
                                int i9 = Build.VERSION.SDK_INT;
                                int i10 = i9 >= 21 ? 0 : AndroidUtilities.statusBarHeight;
                                float f7 = rectF.top;
                                float f8 = placeForPhoto.viewY + f7;
                                int i11 = (int) (((i8 - i10) - f8) + placeForPhoto.clipTopAddition);
                                if (i11 < 0) {
                                    i11 = 0;
                                }
                                int height = (int) (((f8 + (rectF.bottom - f7)) - ((i8 + placeForPhoto.parentView.getHeight()) - (i9 >= 21 ? 0 : AndroidUtilities.statusBarHeight))) + placeForPhoto.clipBottomAddition);
                                if (height < 0) {
                                    height = 0;
                                }
                                int max = Math.max(i11, abs2);
                                int max2 = Math.max(height, abs2);
                                this.animationValues[0][0] = this.animatingImageView.getScaleX();
                                this.animationValues[0][1] = this.animatingImageView.getScaleY();
                                this.animationValues[0][2] = this.animatingImageView.getTranslationX();
                                this.animationValues[0][3] = this.animatingImageView.getTranslationY();
                                float[][] fArr = this.animationValues;
                                float[] fArr2 = fArr[0];
                                fArr2[4] = 0.0f;
                                fArr2[5] = 0.0f;
                                fArr2[6] = 0.0f;
                                fArr2[7] = 0.0f;
                                fArr2[8] = 0.0f;
                                fArr2[9] = 0.0f;
                                fArr2[10] = 0.0f;
                                fArr2[11] = 0.0f;
                                fArr2[12] = 0.0f;
                                float[] fArr3 = fArr[1];
                                float f9 = placeForPhoto.scale;
                                fArr3[0] = f9;
                                fArr3[1] = f9;
                                fArr3[2] = placeForPhoto.viewX + (rectF.left * f9);
                                fArr3[3] = placeForPhoto.viewY + (rectF.top * f9);
                                float f10 = abs;
                                fArr3[4] = f10 * f9;
                                fArr3[5] = max * f9;
                                fArr3[6] = max2 * f9;
                                int i12 = 0;
                                for (int i13 = 4; i12 < i13; i13 = 4) {
                                    this.animationValues[1][i12 + 7] = placeForPhoto.radius != null ? iArr[i12] : 0.0f;
                                    i12++;
                                }
                                float[] fArr4 = this.animationValues[1];
                                float f11 = placeForPhoto.scale;
                                fArr4[11] = abs2 * f11;
                                fArr4[12] = f10 * f11;
                                ArrayList arrayList = new ArrayList((this.sendPhotoType == 1 ? 3 : 2) + animatingImageViews.length + (animatingImageViews.length > 1 ? 1 : 0));
                                for (int i14 = 0; i14 < animatingImageViews.length; i14++) {
                                    ObjectAnimator ofFloat = ObjectAnimator.ofFloat(animatingImageViews[i14], AnimationProperties.CLIPPING_IMAGE_VIEW_PROGRESS, 0.0f, 1.0f);
                                    if (i14 == 0) {
                                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda8
                                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                                PhotoViewer.this.lambda$closePhoto$99(valueAnimator);
                                            }
                                        });
                                    }
                                    arrayList.add(ofFloat);
                                }
                                if (animatingImageViews.length > 1) {
                                    arrayList.add(ObjectAnimator.ofFloat(this.animatingImageView, View.ALPHA, 0.0f));
                                    animatingImageViews[1].setAdditionalTranslationX(-getLeftInset());
                                }
                                arrayList.add(ObjectAnimator.ofInt(this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, 0));
                                FrameLayoutDrawer frameLayoutDrawer2 = this.containerView;
                                Property property = View.ALPHA;
                                arrayList.add(ObjectAnimator.ofFloat(frameLayoutDrawer2, property, 0.0f));
                                arrayList.add(ObjectAnimator.ofFloat(this.navigationBar, property, 0.0f));
                                if (this.sendPhotoType == 1) {
                                    arrayList.add(ObjectAnimator.ofFloat(this.photoCropView, property, 0.0f));
                                }
                                animatorSet.playTogether(arrayList);
                            } else {
                                int i15 = AndroidUtilities.displaySize.y + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
                                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda9
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        PhotoViewer.this.lambda$closePhoto$100(valueAnimator);
                                    }
                                });
                                ObjectAnimator ofInt = ObjectAnimator.ofInt(this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, 0);
                                ClippingImageView clippingImageView = this.animatingImageView;
                                Property property2 = View.ALPHA;
                                ObjectAnimator ofFloat3 = ObjectAnimator.ofFloat(clippingImageView, property2, 0.0f);
                                ClippingImageView clippingImageView2 = this.animatingImageView;
                                Property property3 = View.TRANSLATION_Y;
                                if (this.translationY < 0.0f) {
                                    i15 = -i15;
                                }
                                animatorSet.playTogether(ofFloat2, ofInt, ofFloat3, ObjectAnimator.ofFloat(clippingImageView2, property3, i15), ObjectAnimator.ofFloat(this.containerView, property2, 0.0f), ObjectAnimator.ofFloat(this.navigationBar, property2, 0.0f));
                            }
                            PhotoViewerProvider photoViewerProvider2 = this.placeProvider;
                            if (photoViewerProvider2 != null) {
                                photoViewerProvider2.onPreClose();
                            }
                            this.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda10
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.this.lambda$closePhoto$101(placeForPhoto);
                                }
                            };
                            animatorSet.setDuration(200L);
                            animatorSet.addListener(new 73());
                            this.transitionAnimationStartTime = System.currentTimeMillis();
                            this.containerView.setLayerType(2, null);
                            animatorSet.start();
                            animatedFileDrawable = null;
                        } else {
                            AnimatorSet animatorSet2 = new AnimatorSet();
                            ValueAnimator ofFloat4 = ValueAnimator.ofFloat(0.0f, 1.0f);
                            ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda11
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    PhotoViewer.this.lambda$closePhoto$102(valueAnimator);
                                }
                            });
                            ObjectAnimator ofFloat5 = ObjectAnimator.ofFloat(this.containerView, View.SCALE_X, 0.9f);
                            ObjectAnimator ofFloat6 = ObjectAnimator.ofFloat(this.containerView, View.SCALE_Y, 0.9f);
                            ObjectAnimator ofInt2 = ObjectAnimator.ofInt(this.backgroundDrawable, AnimationProperties.COLOR_DRAWABLE_ALPHA, 0);
                            FrameLayoutDrawer frameLayoutDrawer3 = this.containerView;
                            Property property4 = View.ALPHA;
                            animatorSet2.playTogether(ofFloat4, ofFloat5, ofFloat6, ofInt2, ObjectAnimator.ofFloat(frameLayoutDrawer3, property4, 0.0f), ObjectAnimator.ofFloat(this.navigationBar, property4, 0.0f));
                            PhotoViewerProvider photoViewerProvider3 = this.placeProvider;
                            if (photoViewerProvider3 != null) {
                                photoViewerProvider3.onPreClose();
                            }
                            this.animationInProgress = 2;
                            this.animationEndRunnable = new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda12
                                @Override // java.lang.Runnable
                                public final void run() {
                                    PhotoViewer.this.lambda$closePhoto$103(placeForPhoto);
                                }
                            };
                            animatorSet2.setDuration(200L);
                            animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.74
                                {
                                    PhotoViewer.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    PhotoViewer.this.clippingImageProgress = 1.0f;
                                    if (PhotoViewer.this.animationEndRunnable != null) {
                                        ChatActivity chatActivity2 = PhotoViewer.this.parentChatActivity;
                                        if (chatActivity2 == null && PhotoViewer.this.parentAlert != null) {
                                            BaseFragment baseFragment3 = PhotoViewer.this.parentAlert.getBaseFragment();
                                            if (baseFragment3 instanceof ChatActivity) {
                                                chatActivity2 = (ChatActivity) baseFragment3;
                                            }
                                        }
                                        if (chatActivity2 != null) {
                                            chatActivity2.lambda$openDiscussionMessageChat$316(PhotoViewer.this.animationEndRunnable);
                                            return;
                                        }
                                        PhotoViewer.this.animationEndRunnable.run();
                                        PhotoViewer.this.animationEndRunnable = null;
                                    }
                                }
                            });
                            this.transitionAnimationStartTime = System.currentTimeMillis();
                            animatedFileDrawable = null;
                            this.containerView.setLayerType(2, null);
                            animatorSet2.start();
                            if (placeForPhoto != null) {
                                placeForPhoto.imageReceiver.setVisible(true, true);
                            }
                        }
                        AnimatedFileDrawable animatedFileDrawable2 = this.currentAnimation;
                        if (animatedFileDrawable2 != null) {
                            animatedFileDrawable2.removeSecondParentView(this.containerView);
                            this.currentAnimation = animatedFileDrawable;
                            this.centerImage.setImageBitmap(animatedFileDrawable);
                            this.centerBlur.destroy();
                        }
                        PhotoViewerProvider photoViewerProvider4 = this.placeProvider;
                        if (photoViewerProvider4 != null && !photoViewerProvider4.canScrollAway()) {
                            this.placeProvider.cancelButtonPressed();
                        }
                    } else {
                        this.isInline = false;
                        this.animationInProgress = 0;
                        onPhotoClosed(placeForPhoto);
                        this.containerView.setScaleX(1.0f);
                        this.containerView.setScaleY(1.0f);
                    }
                    baseFragment = this.parentFragment;
                    if (baseFragment != null || baseFragment.getFragmentView() == null) {
                    }
                    View fragmentView2 = this.parentFragment.getFragmentView();
                    fragmentView2.setScaleX(f);
                    fragmentView2.setScaleY(f2);
                    ChatAttachAlert chatAttachAlert2 = this.parentAlert;
                    if (chatAttachAlert2 != null) {
                        BottomSheet.ContainerView container2 = chatAttachAlert2.getContainer();
                        container2.setScaleX(f3);
                        container2.setScaleY(f4);
                        return;
                    }
                    return;
                }
                f2 = scaleY;
            }
            f3 = 1.0f;
            f4 = 1.0f;
            photoViewerProvider = this.placeProvider;
            if (photoViewerProvider != null) {
            }
            placeForPhoto = this.placeProvider.getPlaceForPhoto(this.currentMessageObject, getFileLocation(this.currentFileLocation), this.currentIndex, true);
            if (this.videoPlayer != null) {
                if (this.textureUploaded) {
                    if (this.usedSurfaceView) {
                    }
                }
                if (this.currentMessageObject != null) {
                }
                placeForPhoto.imageReceiver.setAllowStartAnimation(true);
                placeForPhoto.imageReceiver.startAnimation();
            }
            if (!this.doneButtonPressed) {
            }
            photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
            }
            chatActivity = this.parentChatActivity;
            if (chatActivity != null) {
                this.parentChatActivity.getFragmentView().invalidate();
            }
            this.parentChatActivity = null;
            removeObservers();
            this.isActionBarVisible = false;
            velocityTracker = this.velocityTracker;
            if (velocityTracker != null) {
            }
            if (this.isInline) {
            }
            baseFragment = this.parentFragment;
            if (baseFragment != null) {
            }
        }
    }

    public void destroyPhotoViewer() {
        if (this.parentActivity == null || this.windowView == null) {
            return;
        }
        if (PipVideoOverlay.isVisible()) {
            PipVideoOverlay.dismiss();
        }
        removeObservers();
        releasePlayer(false);
        try {
            if (this.windowView.getParent() != null) {
                ((WindowManager) this.parentActivity.getSystemService("window")).removeViewImmediate(this.windowView);
                onHideView();
            }
            this.windowView = null;
        } catch (Exception e) {
            FileLog.e(e);
        }
        ImageReceiver.BitmapHolder bitmapHolder = this.currentThumb;
        if (bitmapHolder != null) {
            bitmapHolder.release();
            this.currentThumb = null;
        }
        this.animatingImageView.setImageBitmap(null);
        if (this == PipInstance) {
            PipInstance = null;
        } else {
            Instance = null;
        }
        onHideView();
    }

    /* JADX WARN: Code restructure failed: missing block: B:822:0x05ad, code lost:
        if (((org.telegram.messenger.MessageObject) r1.get(r1.size() - 1)).getDialogId() != r30.mergeDialogId) goto L355;
     */
    /* JADX WARN: Code restructure failed: missing block: B:838:0x05f3, code lost:
        if (((org.telegram.messenger.MessageObject) r30.imagesArrTemp.get(0)).getDialogId() != r30.mergeDialogId) goto L355;
     */
    /* JADX WARN: Code restructure failed: missing block: B:839:0x05f5, code lost:
        r1 = 1;
        r11 = 0;
     */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        int i3;
        Uri fromFile;
        MediaController.SavedFilterState savedFilterState;
        boolean z;
        boolean z2;
        ArrayList arrayList;
        int size;
        int i4;
        int id;
        int i5;
        TLRPC.Chat chat;
        TLRPC.User user;
        ArrayList<TLRPC.PhotoSize> arrayList2;
        int i6;
        MessageObject messageObject;
        TLRPC.BotInlineResult botInlineResult;
        PageBlocksAdapter pageBlocksAdapter;
        float f = 1.0f;
        int i7 = 3;
        int i8 = 2;
        int i9 = 0;
        if (i == NotificationCenter.fileLoadFailed) {
            String str = (String) objArr[0];
            int i10 = 0;
            while (i10 < 3) {
                String str2 = this.currentFileNames[i10];
                if (str2 != null && str2.equals(str)) {
                    this.photoProgressViews[i10].setProgress(1.0f, i10 == 0 || (i10 == 1 && this.sideImage == this.rightImage) || (i10 == 2 && this.sideImage == this.leftImage));
                    checkProgress(i10, false, true);
                    return;
                }
                i10++;
            }
        } else if (i == NotificationCenter.customStickerCreated) {
            closePhoto(false, false);
        } else if (i == NotificationCenter.fileLoaded) {
            String str3 = (String) objArr[0];
            int i11 = 0;
            while (i11 < 3) {
                String str4 = this.currentFileNames[i11];
                if (str4 != null && str4.equals(str3)) {
                    boolean z3 = i11 == 0 || (i11 == 1 && this.sideImage == this.rightImage) || (i11 == 2 && this.sideImage == this.leftImage);
                    this.photoProgressViews[i11].setProgress(1.0f, z3);
                    checkProgress(i11, false, z3);
                    if (this.videoPlayer == null && i11 == 0 && (((messageObject = this.currentMessageObject) != null && messageObject.isVideo()) || (((botInlineResult = this.currentBotInlineResult) != null && (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) || ((pageBlocksAdapter = this.pageBlocksAdapter) != null && (pageBlocksAdapter.isVideo(this.currentIndex) || this.pageBlocksAdapter.isHardwarePlayer(this.currentIndex)))))) {
                        onActionClick(false);
                    }
                    if (i11 != 0 || this.videoPlayer == null) {
                        return;
                    }
                    this.currentVideoFinishedLoading = true;
                    return;
                }
                i11++;
            }
        } else if (i == NotificationCenter.fileLoadProgressChanged) {
            String str5 = (String) objArr[0];
            int i12 = 0;
            while (i12 < i7) {
                String str6 = this.currentFileNames[i12];
                if (str6 != null && str6.equals(str5)) {
                    float min = Math.min(f, ((float) ((Long) objArr[1]).longValue()) / ((float) ((Long) objArr[i8]).longValue()));
                    this.photoProgressViews[i12].setProgress(min, i12 == 0 || (i12 == 1 && this.sideImage == this.rightImage) || (i12 == i8 && this.sideImage == this.leftImage));
                    if (i12 == 0 && this.videoPlayer != null && this.videoPlayerSeekbar != null) {
                        if (!this.currentVideoFinishedLoading) {
                            long elapsedRealtime = SystemClock.elapsedRealtime();
                            if (Math.abs(elapsedRealtime - this.lastBufferedPositionCheck) >= 500) {
                                float f2 = this.seekToProgressPending;
                                if (f2 == 0.0f) {
                                    long duration = this.videoPlayer.getDuration();
                                    long currentPosition = this.videoPlayer.getCurrentPosition();
                                    f2 = (duration < 0 || duration == -9223372036854775807L || currentPosition < 0) ? 0.0f : ((float) currentPosition) / ((float) duration);
                                }
                                f = this.isStreaming ? FileLoader.getInstance(this.currentAccount).getBufferedProgressFromPosition(f2, this.currentFileNames[0]) : 1.0f;
                                this.lastBufferedPositionCheck = elapsedRealtime;
                            } else {
                                f = -1.0f;
                            }
                        }
                        if (f != -1.0f) {
                            this.videoPlayerSeekbar.setBufferedProgress(f);
                            PipVideoOverlay.setBufferedProgress(f);
                            this.videoPlayerSeekbarView.invalidate();
                        }
                        checkBufferedProgress(min);
                    }
                }
                i12++;
                f = 1.0f;
                i7 = 3;
                i8 = 2;
            }
        } else {
            int i13 = -1;
            if (i == NotificationCenter.dialogPhotosUpdate) {
                MessagesController.DialogPhotos dialogPhotos = (MessagesController.DialogPhotos) objArr[0];
                if (this.avatarsDialogId == dialogPhotos.dialogId) {
                    this.dialogPhotos = dialogPhotos;
                    ArrayList arrayList3 = new ArrayList(dialogPhotos.photos);
                    this.imagesArrLocations.clear();
                    this.imagesArrLocationsSizes.clear();
                    this.imagesArrLocationsVideo.clear();
                    this.imagesArrMessages.clear();
                    this.avatarsArr.clear();
                    int i14 = 0;
                    int i15 = -1;
                    while (i14 < arrayList3.size()) {
                        TLRPC.Photo photo = (TLRPC.Photo) arrayList3.get(i14);
                        if (photo == null || (photo instanceof TLRPC.TL_photoEmpty) || (arrayList2 = photo.sizes) == null) {
                            this.imagesArrLocations.add(null);
                            this.imagesArrLocationsSizes.add(null);
                            this.imagesArrLocationsVideo.add(null);
                            this.imagesArrMessages.add(null);
                            this.avatarsArr.add(null);
                        } else {
                            TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList2, 640);
                            TLRPC.VideoSize closestVideoSizeWithSize = photo.video_sizes.isEmpty() ? null : FileLoader.getClosestVideoSizeWithSize(photo.video_sizes, 1000);
                            if (closestPhotoSizeWithSize != null) {
                                if (i15 == i13 && this.currentFileLocation != null) {
                                    int i16 = 0;
                                    while (true) {
                                        if (i16 >= photo.sizes.size()) {
                                            break;
                                        }
                                        TLRPC.FileLocation fileLocation = photo.sizes.get(i16).location;
                                        if (fileLocation != null) {
                                            int i17 = fileLocation.local_id;
                                            TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated = this.currentFileLocation.location;
                                            if (i17 == tL_fileLocationToBeDeprecated.local_id && fileLocation.volume_id == tL_fileLocationToBeDeprecated.volume_id) {
                                                i15 = this.imagesArrLocations.size();
                                                break;
                                            }
                                        }
                                        i16++;
                                    }
                                }
                                if (i15 == i13 && this.currentFileLocation != null) {
                                    int i18 = 0;
                                    while (i18 < photo.video_sizes.size()) {
                                        TLRPC.FileLocation fileLocation2 = photo.video_sizes.get(i18).location;
                                        if (fileLocation2 != null) {
                                            int i19 = fileLocation2.local_id;
                                            TLRPC.TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated2 = this.currentFileLocation.location;
                                            if (i19 == tL_fileLocationToBeDeprecated2.local_id) {
                                                i6 = i15;
                                                if (fileLocation2.volume_id == tL_fileLocationToBeDeprecated2.volume_id) {
                                                    i15 = this.imagesArrLocations.size();
                                                    break;
                                                } else {
                                                    i18++;
                                                    i15 = i6;
                                                }
                                            }
                                        }
                                        i6 = i15;
                                        i18++;
                                        i15 = i6;
                                    }
                                }
                                i15 = i15;
                                int i20 = photo.dc_id;
                                if (i20 != 0) {
                                    TLRPC.FileLocation fileLocation3 = closestPhotoSizeWithSize.location;
                                    fileLocation3.dc_id = i20;
                                    fileLocation3.file_reference = photo.file_reference;
                                }
                                ImageLocation forPhoto = ImageLocation.getForPhoto(closestPhotoSizeWithSize, photo);
                                ImageLocation forPhoto2 = closestVideoSizeWithSize != null ? ImageLocation.getForPhoto(closestVideoSizeWithSize, photo) : forPhoto;
                                if (forPhoto != null) {
                                    this.imagesArrLocations.add(forPhoto);
                                    this.imagesArrLocationsSizes.add(forPhoto2 != null ? Long.valueOf(forPhoto2.currentSize) : null);
                                    this.imagesArrLocationsVideo.add(forPhoto2);
                                    this.imagesArrMessages.add(null);
                                    this.avatarsArr.add(photo);
                                }
                            }
                        }
                        i14++;
                        i13 = -1;
                    }
                    if (this.avatarsArr.isEmpty()) {
                        this.menuItem.hideSubItem(6);
                    } else {
                        this.menuItem.showSubItem(6);
                    }
                    this.needSearchImageInArr = false;
                    this.currentIndex = -1;
                    if (i15 != -1) {
                        setImageIndex(i15);
                        return;
                    }
                    int i21 = (this.avatarsDialogId > 0L ? 1 : (this.avatarsDialogId == 0L ? 0 : -1));
                    MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
                    long j = this.avatarsDialogId;
                    if (i21 > 0) {
                        user = messagesController.getUser(Long.valueOf(j));
                        chat = null;
                    } else {
                        chat = messagesController.getChat(Long.valueOf(-j));
                        user = null;
                    }
                    if (user == null && chat == null) {
                        return;
                    }
                    ImageLocation forUserOrChat = user != null ? ImageLocation.getForUserOrChat(user, 0) : ImageLocation.getForUserOrChat(chat, 0);
                    if (forUserOrChat != null) {
                        if (!this.imagesArrLocations.isEmpty() && this.imagesArrLocations.get(0) != null && ((ImageLocation) this.imagesArrLocations.get(0)).photoId == forUserOrChat.photoId) {
                            this.imagesArrLocations.remove(0);
                            this.avatarsArr.remove(0);
                            this.imagesArrLocationsSizes.remove(0);
                            this.imagesArrLocationsVideo.remove(0);
                            this.imagesArrMessages.remove(0);
                        }
                        this.imagesArrLocations.add(0, forUserOrChat);
                        this.avatarsArr.add(0, new TLRPC.TL_photoEmpty());
                        ArrayList arrayList4 = this.imagesArrLocationsSizes;
                        ImageLocation imageLocation = this.currentFileLocationVideo;
                        arrayList4.add(0, imageLocation != null ? Long.valueOf(imageLocation.currentSize) : null);
                        this.imagesArrLocationsVideo.add(0, this.currentFileLocationVideo);
                        this.imagesArrMessages.add(0, null);
                        setImageIndex(0);
                    }
                }
            } else if (i == NotificationCenter.mediaCountDidLoad) {
                long longValue = ((Long) objArr[0]).longValue();
                long longValue2 = ((Long) objArr[1]).longValue();
                if (this.topicId == longValue2) {
                    if (longValue == this.currentDialogId || longValue == this.mergeDialogId) {
                        MessageObject messageObject2 = this.currentMessageObject;
                        if (messageObject2 == null || MediaDataController.getMediaType(messageObject2.messageOwner) == this.sharedMediaType) {
                            if (longValue == this.currentDialogId) {
                                this.totalImagesCount = ((Integer) objArr[2]).intValue();
                            } else {
                                this.totalImagesCountMerge = ((Integer) objArr[2]).intValue();
                            }
                            if (this.needSearchImageInArr && this.isFirstLoading) {
                                this.isFirstLoading = false;
                                this.loadingMoreImages = true;
                                MediaDataController.getInstance(this.currentAccount).loadMedia(this.currentDialogId, 20, 0, 0, this.sharedMediaType, longValue2, 1, this.classGuid, 0, this.currentFilterTag, null);
                            } else if (!this.imagesArr.isEmpty()) {
                                setIsAboutToSwitchToIndex(this.switchingToIndex, true, true);
                            }
                        }
                    }
                }
            } else {
                if (i != NotificationCenter.mediaDidLoad) {
                    if (i == NotificationCenter.emojiLoaded) {
                        CaptionTextViewSwitcher captionTextViewSwitcher = this.captionTextViewSwitcher;
                        if (captionTextViewSwitcher != null) {
                            captionTextViewSwitcher.invalidateViews();
                            return;
                        }
                        return;
                    }
                    if (i == NotificationCenter.filePreparingFailed) {
                        MessageObject messageObject3 = (MessageObject) objArr[0];
                        if (!this.loadInitialVideo) {
                            if (this.tryStartRequestPreviewOnFinish) {
                                releasePlayer(false);
                                this.tryStartRequestPreviewOnFinish = !MediaController.getInstance().scheduleVideoConvert(this.videoPreviewMessageObject, true, true, false);
                                return;
                            } else if (messageObject3 == this.videoPreviewMessageObject) {
                                this.requestingPreview = false;
                                this.progressView.setVisibility(4);
                                return;
                            } else {
                                return;
                            }
                        }
                        this.loadInitialVideo = false;
                        this.progressView.setVisibility(4);
                        arrayList = this.currentPlayingVideoQualityFiles;
                        fromFile = this.currentPlayingVideoFile;
                        savedFilterState = this.editState.savedFilterState;
                        z = false;
                        z2 = false;
                    } else if (i == NotificationCenter.fileNewChunkAvailable) {
                        if (((MessageObject) objArr[0]) != this.videoPreviewMessageObject) {
                            return;
                        }
                        String str7 = (String) objArr[1];
                        long longValue3 = ((Long) objArr[3]).longValue();
                        this.photoProgressViews[0].setProgress(((Float) objArr[4]).floatValue(), true);
                        if (longValue3 == 0) {
                            return;
                        }
                        this.requestingPreview = false;
                        this.photoProgressViews[0].setProgress(1.0f, true);
                        this.photoProgressViews[0].setBackgroundState(3, true, true);
                        fromFile = Uri.fromFile(new File(str7));
                        savedFilterState = this.editState.savedFilterState;
                        z = false;
                        z2 = true;
                        arrayList = null;
                    } else if (i != NotificationCenter.messagesDeleted) {
                        return;
                    } else {
                        int i22 = 2;
                        if (((Boolean) objArr[2]).booleanValue()) {
                            return;
                        }
                        long longValue4 = ((Long) objArr[1]).longValue();
                        ArrayList arrayList5 = (ArrayList) objArr[0];
                        int i23 = 0;
                        boolean z4 = false;
                        boolean z5 = false;
                        while (i23 < i22) {
                            ArrayList arrayList6 = i23 == 0 ? this.imagesArr : this.imagesArrTemp;
                            SparseArray[] sparseArrayArr = i23 == 0 ? this.imagesByIds : this.imagesByIdsTemp;
                            if (!arrayList6.isEmpty()) {
                                int i24 = 0;
                                for (int i25 = 2; i24 < i25; i25 = 2) {
                                    if (sparseArrayArr[i24].size() > 0 && ((MessageObject) sparseArrayArr[i24].valueAt(i9)).messageOwner.peer_id.channel_id == longValue4) {
                                        int size2 = arrayList5.size();
                                        for (int i26 = 0; i26 < size2; i26++) {
                                            int intValue = ((Integer) arrayList5.get(i26)).intValue();
                                            MessageObject messageObject4 = (MessageObject) sparseArrayArr[i24].get(((Integer) arrayList5.get(i26)).intValue());
                                            if (messageObject4 != null) {
                                                sparseArrayArr[i24].remove(intValue);
                                                arrayList6.remove(messageObject4);
                                                if (i24 == 0) {
                                                    this.totalImagesCount--;
                                                } else {
                                                    this.totalImagesCountMerge--;
                                                }
                                                if (messageObject4 == this.currentMessageObject) {
                                                    z5 = true;
                                                }
                                                z4 = true;
                                            }
                                        }
                                    }
                                    i24++;
                                    i9 = 0;
                                }
                            }
                            i23++;
                            i22 = 2;
                            i9 = 0;
                        }
                        if (!z4) {
                            return;
                        }
                        if (z5 && this == PipInstance) {
                            destroyPhotoViewer();
                            return;
                        } else if (this.imagesArr.isEmpty()) {
                            closePhoto(false, true);
                            return;
                        } else {
                            i3 = this.currentIndex;
                            this.currentIndex = -1;
                            if (i3 >= this.imagesArr.size()) {
                                i3 = this.imagesArr.size() - 1;
                            }
                        }
                    }
                    preparePlayer(arrayList, fromFile, z, z2, savedFilterState);
                    return;
                }
                long longValue5 = ((Long) objArr[0]).longValue();
                int intValue2 = ((Integer) objArr[3]).intValue();
                long j2 = this.currentDialogId;
                if ((longValue5 == j2 || longValue5 == this.mergeDialogId) && intValue2 == this.classGuid) {
                    this.loadingMoreImages = false;
                    char c = longValue5 == j2 ? (char) 0 : (char) 1;
                    ArrayList arrayList7 = (ArrayList) objArr[2];
                    this.endReached[c] = ((Boolean) objArr[5]).booleanValue();
                    boolean booleanValue = ((Boolean) objArr[6]).booleanValue();
                    if (!this.needSearchImageInArr) {
                        int i27 = 0;
                        for (int i28 = 0; i28 < arrayList7.size(); i28++) {
                            MessageObject messageObject5 = (MessageObject) arrayList7.get(booleanValue ? (arrayList7.size() - 1) - i28 : i28);
                            if (this.imagesByIds[c].indexOfKey(messageObject5.getId()) < 0) {
                                i27++;
                                if (this.opennedFromMedia) {
                                    ArrayList arrayList8 = this.imagesArr;
                                    if (booleanValue) {
                                        arrayList8.add(0, messageObject5);
                                        int i29 = this.startOffset - 1;
                                        this.startOffset = i29;
                                        this.currentIndex++;
                                        if (i29 < 0) {
                                            this.startOffset = 0;
                                        }
                                    } else {
                                        arrayList8.add(messageObject5);
                                    }
                                } else {
                                    this.imagesArr.add(0, messageObject5);
                                }
                                this.imagesByIds[c].put(messageObject5.getId(), messageObject5);
                            }
                        }
                        if (this.opennedFromMedia) {
                            if (i27 != 0 || booleanValue) {
                                return;
                            }
                            size = this.startOffset + this.imagesArr.size();
                        } else if (i27 != 0) {
                            int i30 = this.currentIndex;
                            this.currentIndex = -1;
                            i3 = i30 + i27;
                        } else {
                            size = this.imagesArr.size();
                        }
                        this.totalImagesCount = size;
                        this.totalImagesCountMerge = 0;
                        return;
                    } else if ((arrayList7.isEmpty() && (c != 0 || this.mergeDialogId == 0)) || (i4 = this.currentIndex) < 0 || i4 >= this.imagesArr.size()) {
                        this.needSearchImageInArr = false;
                        return;
                    } else {
                        MessageObject messageObject6 = (MessageObject) this.imagesArr.get(this.currentIndex);
                        int i31 = -1;
                        int i32 = 0;
                        for (int i33 = 0; i33 < arrayList7.size(); i33++) {
                            MessageObject messageObject7 = (MessageObject) arrayList7.get(i33);
                            if (this.imagesByIdsTemp[c].indexOfKey(messageObject7.getId()) < 0) {
                                this.imagesByIdsTemp[c].put(messageObject7.getId(), messageObject7);
                                if (this.opennedFromMedia) {
                                    this.imagesArrTemp.add(messageObject7);
                                    if (messageObject7.getId() == messageObject6.getId()) {
                                        i31 = i32;
                                    }
                                    i32++;
                                } else {
                                    i32++;
                                    this.imagesArrTemp.add(0, messageObject7);
                                    if (messageObject7.getId() == messageObject6.getId()) {
                                        i31 = arrayList7.size() - i32;
                                    }
                                }
                            }
                        }
                        if (i32 == 0 && (c != 0 || this.mergeDialogId == 0)) {
                            this.totalImagesCount = this.imagesArr.size();
                            this.totalImagesCountMerge = 0;
                        }
                        if (i31 != -1) {
                            this.imagesArr.clear();
                            this.imagesArr.addAll(this.imagesArrTemp);
                            int i34 = 0;
                            for (int i35 = 2; i34 < i35; i35 = 2) {
                                this.imagesByIds[i34] = this.imagesByIdsTemp[i34].clone();
                                this.imagesByIdsTemp[i34].clear();
                                i34++;
                            }
                            this.imagesArrTemp.clear();
                            this.needSearchImageInArr = false;
                            this.currentIndex = -1;
                            if (i31 >= this.imagesArr.size()) {
                                i31 = this.imagesArr.size() - 1;
                            }
                            setImageIndex(i31);
                            return;
                        }
                        if (this.opennedFromMedia) {
                            if (this.imagesArrTemp.isEmpty()) {
                                id = 0;
                            } else {
                                ArrayList arrayList9 = this.imagesArrTemp;
                                id = ((MessageObject) arrayList9.get(arrayList9.size() - 1)).getId();
                            }
                            if (c == 0 && this.endReached[c] && this.mergeDialogId != 0) {
                                if (!this.imagesArrTemp.isEmpty()) {
                                    ArrayList arrayList10 = this.imagesArrTemp;
                                }
                                i5 = id;
                                c = 1;
                            }
                            i5 = id;
                        } else {
                            id = this.imagesArrTemp.isEmpty() ? 0 : ((MessageObject) this.imagesArrTemp.get(0)).getId();
                            if (c == 0 && this.endReached[c] && this.mergeDialogId != 0) {
                                if (!this.imagesArrTemp.isEmpty()) {
                                }
                                i5 = id;
                                c = 1;
                            }
                            i5 = id;
                        }
                        if (this.endReached[c]) {
                            return;
                        }
                        this.loadingMoreImages = true;
                        MediaDataController.getInstance(this.currentAccount).loadMedia(c == 0 ? this.currentDialogId : this.mergeDialogId, 40, i5, 0, this.sharedMediaType, this.topicId, 1, this.classGuid, 0, this.currentFilterTag, null);
                        return;
                    }
                }
                return;
                setImageIndex(i3);
            }
        }
    }

    public void enableStickerMode(TLRPC.Document document, boolean z, Utilities.Callback2 callback2) {
        this.replacedSticker = document;
        this.stickerEmpty = z;
        this.stickerEmptySent = false;
        this.customStickerHandler = callback2;
        this.rotate = 0.0f;
        this.animateToRotate = 0.0f;
        if (this.stickerMakerView != null) {
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            this.stickerMakerView.clean();
            ArrayList arrayList = this.selectedEmojis;
            if (arrayList != null) {
                arrayList.clear();
            }
        }
        if (this.replacedSticker != null) {
            ArrayList arrayList2 = this.selectedEmojis;
            if (arrayList2 == null) {
                this.selectedEmojis = new ArrayList();
            } else {
                arrayList2.clear();
            }
            ArrayList<String> findStickerEmoticons = MessageObject.findStickerEmoticons(document, Integer.valueOf(this.currentAccount));
            if (findStickerEmoticons != null) {
                this.selectedEmojis.addAll(findStickerEmoticons);
            }
        }
        BlurButton blurButton2 = this.cutOutBtn;
        if (blurButton2 != null) {
            blurButton2.clean();
        }
        showStickerMode(true, false);
        ImageView imageView = this.tuneItem;
        if (imageView != null) {
            imageView.setAlpha(this.stickerEmpty ? 0.4f : 1.0f);
        }
    }

    public void exitFromPip() {
        if (this.isInline) {
            if (Instance != null) {
                Instance.closePhoto(false, true);
            }
            PhotoViewerWebView photoViewerWebView = this.photoViewerWebView;
            if (photoViewerWebView != null) {
                photoViewerWebView.exitFromPip();
            }
            Instance = PipInstance;
            PipInstance = null;
            if (this.photoViewerWebView == null) {
                this.switchingInlineMode = true;
                Bitmap bitmap = this.currentBitmap;
                if (bitmap != null) {
                    bitmap.recycle();
                    this.currentBitmap = null;
                }
                this.changingTextureView = true;
            }
            this.isInline = false;
            View view = this.usedSurfaceView ? this.videoSurfaceView : this.videoTextureView;
            if (this.photoViewerWebView == null && view != null) {
                AndroidUtilities.removeFromParent(view);
                view.setVisibility(4);
                this.aspectRatioFrameLayout.addView(view);
            }
            if (ApplicationLoader.mainInterfacePaused) {
                try {
                    this.parentActivity.startService(new Intent(ApplicationLoader.applicationContext, BringAppForegroundService.class));
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }
            if (this.photoViewerWebView != null) {
                this.clippingImageProgress = 0.0f;
            } else if (Build.VERSION.SDK_INT < 21 || view == null) {
                PipVideoOverlay.dismiss(true);
            } else {
                this.pipAnimationInProgress = true;
                org.telegram.ui.Components.Rect pipRect = PipVideoOverlay.getPipRect(false, this.aspectRatioFrameLayout.getAspectRatio());
                final float f = pipRect.width / this.textureImageView.getLayoutParams().width;
                this.textureImageView.setScaleX(f);
                this.textureImageView.setScaleY(f);
                this.textureImageView.setTranslationX(pipRect.x);
                this.textureImageView.setTranslationY(pipRect.y);
                view.setScaleX(f);
                view.setScaleY(f);
                view.setTranslationX(pipRect.x - this.aspectRatioFrameLayout.getX());
                view.setTranslationY(pipRect.y - this.aspectRatioFrameLayout.getY());
                FirstFrameView firstFrameView = this.firstFrameView;
                if (firstFrameView != null) {
                    firstFrameView.setScaleX(f);
                    this.firstFrameView.setScaleY(f);
                    this.firstFrameView.setTranslationX(view.getTranslationX());
                    this.firstFrameView.setTranslationY(view.getTranslationY());
                }
                this.inlineOutAnimationProgress = 0.0f;
                ViewOutlineProvider viewOutlineProvider = new ViewOutlineProvider() { // from class: org.telegram.ui.PhotoViewer.42
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.view.ViewOutlineProvider
                    public void getOutline(View view2, Outline outline) {
                        outline.setRoundRect(0, 0, view2.getMeasuredWidth(), view2.getMeasuredHeight(), (1.0f - PhotoViewer.this.inlineOutAnimationProgress) * AndroidUtilities.dp(10.0f) * (1.0f / f));
                    }
                };
                view.setOutlineProvider(viewOutlineProvider);
                view.setClipToOutline(true);
                this.textureImageView.setOutlineProvider(viewOutlineProvider);
                this.textureImageView.setClipToOutline(true);
                FirstFrameView firstFrameView2 = this.firstFrameView;
                if (firstFrameView2 != null) {
                    firstFrameView2.setOutlineProvider(viewOutlineProvider);
                    this.firstFrameView.setClipToOutline(true);
                }
            }
            try {
                this.isVisible = true;
                this.isVisibleOrAnimating = true;
                ((WindowManager) this.parentActivity.getSystemService("window")).addView(this.windowView, this.windowLayoutParams);
                onShowView();
                PlaceProviderObject placeProviderObject = this.currentPlaceObject;
                if (placeProviderObject != null) {
                    placeProviderObject.imageReceiver.setVisible(false, false);
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
            if (this.usedSurfaceView) {
                ExoPlayer exoPlayer = this.videoPlayer.player;
                if (exoPlayer != null) {
                    exoPlayer.setVideoTextureView(null);
                }
                this.videoPlayer.setSurfaceView(this.videoSurfaceView);
                this.videoSurfaceView.setVisibility(4);
                this.waitingForFirstTextureUpload = 2;
                this.changingTextureView = false;
                this.containerView.invalidate();
                if (Build.VERSION.SDK_INT < 21) {
                    return;
                }
            } else if (Build.VERSION.SDK_INT < 21) {
                return;
            }
            this.waitingForDraw = 4;
        }
    }

    public float getAnimationValue() {
        return this.animationValue;
    }

    public int getClassGuid() {
        return this.classGuid;
    }

    public int getCurrentIndex() {
        return this.currentIndex;
    }

    public float getCurrentVideoSpeed() {
        return this.currentVideoSpeed;
    }

    public List getImagesArrLocals() {
        return this.imagesArrLocals;
    }

    public int getSelectionLength() {
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer.editText != null) {
            return captionPhotoViewer.getSelectionLength();
        }
        return 0;
    }

    public VideoPlayer getVideoPlayer() {
        return this.videoPlayer;
    }

    public VideoPlayerRewinder getVideoPlayerRewinder() {
        return this.videoPlayerRewinder;
    }

    public SurfaceView getVideoSurfaceView() {
        return this.videoSurfaceView;
    }

    public TextureView getVideoTextureView() {
        return this.videoTextureView;
    }

    public void injectVideoPlayer(VideoPlayer videoPlayer) {
        this.injectingVideoPlayer = videoPlayer;
    }

    public void injectVideoPlayerSurface(SurfaceTexture surfaceTexture) {
        this.injectingVideoPlayerSurface = surfaceTexture;
    }

    public void injectVideoPlayerToMediaController() {
        if (this.videoPlayer.isPlaying()) {
            if (this.playerLooping) {
                this.videoPlayer.setLooping(false);
            }
            MediaController.getInstance().injectVideoPlayer(this.videoPlayer, this.currentMessageObject);
            this.videoPlayer = null;
        }
    }

    public boolean isInjectingVideoPlayer() {
        return this.injectingVideoPlayer != null;
    }

    public boolean isOpenedFullScreenVideo() {
        return this.openedFullScreenVideo;
    }

    public boolean isVisible() {
        return this.isVisible && this.placeProvider != null;
    }

    public boolean isVisibleOrAnimating() {
        return this.isVisibleOrAnimating;
    }

    public void onConfigurationChanged(Configuration configuration) {
    }

    /* JADX WARN: Code restructure failed: missing block: B:145:0x015c, code lost:
        if (r1 > r3) goto L33;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x016b, code lost:
        if (r2 > r3) goto L36;
     */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0060  */
    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onDoubleTap(MotionEvent motionEvent) {
        boolean z;
        PhotoViewerWebView photoViewerWebView;
        long j = 0;
        if ((this.videoPlayer != null || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable())) && this.videoPlayerControlVisible) {
            long currentVideoPosition = getCurrentVideoPosition();
            long videoDuration = getVideoDuration();
            float x = motionEvent.getX();
            int containerViewWidth = getContainerViewWidth() / 3;
            float f = containerViewWidth * 2;
            if (canDoubleTapSeekVideo(motionEvent)) {
                long j2 = x >= f ? currentVideoPosition + 10000 : x < ((float) containerViewWidth) ? currentVideoPosition - 10000 : currentVideoPosition;
                if (currentVideoPosition != j2) {
                    if (j2 > videoDuration) {
                        j = videoDuration;
                    } else if (j2 >= 0) {
                        j = j2;
                    } else if (j2 < -9000) {
                        z = false;
                        if (z) {
                            this.videoForwardDrawable.setOneShootAnimation(true);
                            this.videoForwardDrawable.setLeftSide(x < ((float) containerViewWidth));
                            this.videoForwardDrawable.addTime(10000L);
                            seekVideoOrWebTo(j);
                            this.containerView.invalidate();
                            this.videoPlayerSeekbar.setProgress(((float) j) / ((float) videoDuration), true);
                            this.videoPlayerSeekbarView.invalidate();
                        }
                        return true;
                    }
                    z = true;
                    if (z) {
                    }
                    return true;
                }
            }
        }
        if (this.canZoom && ((this.scale != 1.0f || (this.translationY == 0.0f && this.translationX == 0.0f)) && this.animationStartTime == 0 && this.animationInProgress == 0)) {
            PhotoProgressView photoProgressView = this.photoProgressViews[0];
            if (photoProgressView == null || !photoProgressView.isVisible() || this.photoProgressViews[0].backgroundState == -1 || Math.sqrt(Math.pow((AndroidUtilities.displaySize.x / 2.0f) - motionEvent.getX(), 2.0d) + Math.pow(((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) / 2.0f) - motionEvent.getY(), 2.0d)) >= AndroidUtilities.dp(40.0f)) {
                if (this.scale == 1.0f) {
                    float x2 = (motionEvent.getX() - (getContainerViewWidth() / 2)) - (((motionEvent.getX() - (getContainerViewWidth() / 2)) - this.translationX) * (3.0f / this.scale));
                    float y = (motionEvent.getY() - (getContainerViewHeight() / 2)) - (((motionEvent.getY() - (getContainerViewHeight() / 2)) - this.translationY) * (3.0f / this.scale));
                    updateMinMax(3.0f);
                    float f2 = this.minX;
                    if (x2 >= f2) {
                        f2 = this.maxX;
                    }
                    x2 = f2;
                    float f3 = this.minY;
                    if (y >= f3) {
                        f3 = this.maxY;
                    }
                    y = f3;
                    animateTo(3.0f, x2, y, true);
                } else {
                    animateTo(1.0f, 0.0f, 0.0f, true);
                }
                this.doubleTap = true;
                hidePressedDrawables();
                return true;
            }
            return false;
        }
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    public boolean onDoubleTapEvent(MotionEvent motionEvent) {
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onDown(MotionEvent motionEvent) {
        if (!this.doubleTap && this.checkImageView.getVisibility() != 0) {
            boolean[] zArr = this.drawPressedDrawable;
            if (!zArr[0] && !zArr[1]) {
                float x = motionEvent.getX();
                int min = Math.min((int) NotificationCenter.fileUploadFailed, this.containerView.getMeasuredWidth() / 8);
                if (x < min) {
                    if (this.leftImage.hasImageSet()) {
                        this.drawPressedDrawable[0] = true;
                        this.containerView.invalidate();
                    }
                } else if (x > this.containerView.getMeasuredWidth() - min && this.rightImage.hasImageSet()) {
                    this.drawPressedDrawable[1] = true;
                    this.containerView.invalidate();
                }
            }
        }
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
        if (this.scale == 1.0f || this.sendPhotoType == 11) {
            return false;
        }
        this.scroller.abortAnimation();
        this.scroller.fling(Math.round(this.translationX), Math.round(this.translationY), Math.round(f), Math.round(f2), (int) this.minX, (int) this.maxX, (int) this.minY, (int) this.maxY);
        this.containerView.postInvalidate();
        return false;
    }

    public void onLongPress() {
        boolean z;
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null || !this.videoPlayerControlVisible || this.scale > 1.1f) {
            return;
        }
        long currentPosition = videoPlayer.getCurrentPosition();
        long duration = this.videoPlayer.getDuration();
        if (currentPosition == -9223372036854775807L || duration < 15000) {
            return;
        }
        float f = this.longPressX;
        int containerViewWidth = getContainerViewWidth() / 3;
        if (f >= containerViewWidth * 2) {
            z = true;
        } else if (f >= containerViewWidth) {
            return;
        } else {
            z = false;
        }
        this.videoPlayerRewinder.startRewind(this.videoPlayer, z, this.currentVideoSpeed);
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onLongPress(MotionEvent motionEvent) {
    }

    public void onPause() {
        if (this.currentAnimation != null) {
            closePhoto(false, false);
            return;
        }
        if (this.lastTitle != null) {
            closeCaptionEnter(true);
        }
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer == null || !this.playerLooping) {
            return;
        }
        videoPlayer.setLooping(false);
    }

    public void onResume() {
        redraw(0);
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.seekTo(videoPlayer.getCurrentPosition() + 1);
            if (this.playerLooping) {
                this.videoPlayer.setLooping(true);
            }
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.onResume();
        }
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent2, float f, float f2) {
        return false;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onShowPress(MotionEvent motionEvent) {
    }

    /* JADX WARN: Code restructure failed: missing block: B:313:0x02ae, code lost:
        if (r14.isCurrentVideo != false) goto L151;
     */
    @Override // org.telegram.ui.Components.GestureDetector2.OnDoubleTapListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
        PhotoViewerWebView photoViewerWebView;
        MessageObject messageObject;
        MessageObject messageObject2;
        if (this.discardTap) {
            return false;
        }
        float x = motionEvent.getX();
        float y = motionEvent.getY();
        if (this.checkImageView.getVisibility() != 0 && SharedConfig.nextMediaTap && this.sendPhotoType != 11 && y > ActionBar.getCurrentActionBarHeight() + AndroidUtilities.statusBarHeight + AndroidUtilities.dp(40.0f)) {
            int min = Math.min((int) NotificationCenter.fileUploadFailed, this.containerView.getMeasuredWidth() / 8);
            if (x < min) {
                if (this.leftImage.hasImageSet()) {
                    switchToNextIndex(-1, true);
                    return true;
                }
            } else if (x > this.containerView.getMeasuredWidth() - min && this.rightImage.hasImageSet()) {
                switchToNextIndex(1, true);
                return true;
            }
        }
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null && messageObject3.isSponsored() && x >= (getContainerViewWidth() - this.centerImage.getImageWidth()) / 2.0f && x <= (getContainerViewWidth() + this.centerImage.getImageWidth()) / 2.0f && y >= (getContainerViewHeight() - this.centerImage.getImageHeight()) / 2.0f && y <= (getContainerViewHeight() + this.centerImage.getImageHeight()) / 2.0f) {
            BaseFragment baseFragment = this.parentFragment;
            if (baseFragment instanceof ChatActivity) {
                ((ChatActivity) baseFragment).logSponsoredClicked(this.currentMessageObject, true, true);
            }
            closePhoto(true, false);
            String str = this.currentMessageObject.sponsoredUrl;
            if (str != null) {
                Context context = LaunchActivity.instance;
                if (context == null) {
                    context = this.activityContext;
                }
                Browser.openUrl(context, Uri.parse(str), true, false, false, null, null, false, MessagesController.getInstance(this.currentAccount).sponsoredLinksInappAllow);
            }
            return true;
        }
        PhotoViewerWebView photoViewerWebView2 = this.photoViewerWebView;
        if (photoViewerWebView2 != null && photoViewerWebView2.isControllable() && this.isActionBarVisible) {
            WebView webView = this.photoViewerWebView.getWebView();
            if (x >= webView.getX() && x <= webView.getX() + webView.getWidth() && y >= webView.getY() && y <= webView.getY() + webView.getHeight()) {
                MotionEvent obtain = MotionEvent.obtain(motionEvent);
                obtain.setAction(0);
                obtain.offsetLocation(-webView.getX(), -webView.getY());
                webView.dispatchTouchEvent(obtain);
                obtain.setAction(1);
                webView.dispatchTouchEvent(obtain);
                obtain.recycle();
                scheduleActionBarHide();
                return true;
            }
        }
        if (this.containerView.getTag() != null) {
            AspectRatioFrameLayout aspectRatioFrameLayout = this.aspectRatioFrameLayout;
            boolean z = (aspectRatioFrameLayout != null && aspectRatioFrameLayout.getVisibility() == 0) || ((photoViewerWebView = this.photoViewerWebView) != null && photoViewerWebView.isControllable());
            if (this.sharedMediaType != 1 || (messageObject2 = this.currentMessageObject) == null) {
                PhotoProgressView photoProgressView = this.photoProgressViews[0];
                if (photoProgressView != null && this.containerView != null) {
                    int i = photoProgressView.backgroundState;
                    if (x >= (getContainerViewWidth() - AndroidUtilities.dp(100.0f)) / 2.0f && x <= (getContainerViewWidth() + AndroidUtilities.dp(100.0f)) / 2.0f && y >= (getContainerViewHeight() - AndroidUtilities.dp(100.0f)) / 2.0f && y <= (getContainerViewHeight() + AndroidUtilities.dp(100.0f)) / 2.0f) {
                        if (z) {
                            if ((i == 3 || i == 4) && this.photoProgressViews[0].isVisible()) {
                                this.manuallyPaused = true;
                                toggleVideoPlayer();
                                return true;
                            }
                        } else if (i > 0 && i <= 3) {
                            onActionClick(true);
                            checkProgress(0, false, true);
                            return true;
                        }
                    }
                }
            } else if (!messageObject2.canPreviewDocument()) {
                float containerViewHeight = (getContainerViewHeight() - AndroidUtilities.dp(360.0f)) / 2.0f;
                if (y >= containerViewHeight && y <= containerViewHeight + AndroidUtilities.dp(360.0f)) {
                    onActionClick(true);
                    return true;
                }
            }
            PhotoViewerWebView photoViewerWebView3 = this.photoViewerWebView;
            if ((photoViewerWebView3 == null || !photoViewerWebView3.isControllable() || this.photoViewerWebView.isPlaying() || !this.isActionBarVisible) && ((messageObject = this.currentMessageObject) == null || !messageObject.isSponsored())) {
                toggleActionBar(!this.isActionBarVisible, true);
            }
        } else {
            int i2 = this.sendPhotoType;
            if (i2 != 0 && i2 != 4) {
                TLRPC.BotInlineResult botInlineResult = this.currentBotInlineResult;
                if (botInlineResult != null && (botInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) || MessageObject.isVideoDocument(this.currentBotInlineResult.document))) {
                    int i3 = this.photoProgressViews[0].backgroundState;
                    if (i3 > 0 && i3 <= 3 && x >= (getContainerViewWidth() - AndroidUtilities.dp(100.0f)) / 2.0f && x <= (getContainerViewWidth() + AndroidUtilities.dp(100.0f)) / 2.0f && y >= (getContainerViewHeight() - AndroidUtilities.dp(100.0f)) / 2.0f && y <= (getContainerViewHeight() + AndroidUtilities.dp(100.0f)) / 2.0f) {
                        onActionClick(true);
                        checkProgress(0, false, true);
                        return true;
                    }
                } else if (this.sendPhotoType == 2) {
                }
            } else if (this.isCurrentVideo) {
                VideoPlayer videoPlayer = this.videoPlayer;
                if (videoPlayer != null && !this.muteVideo && i2 != 1) {
                    videoPlayer.setVolume(1.0f);
                }
                this.manuallyPaused = true;
                toggleVideoPlayer();
            } else {
                this.checkImageView.performClick();
            }
        }
        return true;
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public boolean onSingleTapUp(MotionEvent motionEvent) {
        if (this.canZoom || this.doubleTapEnabled) {
            FrameLayoutDrawer frameLayoutDrawer = this.containerView;
            if (frameLayoutDrawer != null && frameLayoutDrawer.getTag() != null && this.photoProgressViews[0] != null) {
                float x = motionEvent.getX();
                float y = motionEvent.getY();
                if ((x < ((float) (getContainerViewWidth() - AndroidUtilities.dp(100.0f))) / 2.0f || x > ((float) (getContainerViewWidth() + AndroidUtilities.dp(100.0f))) / 2.0f || y < ((float) (getContainerViewHeight() - AndroidUtilities.dp(100.0f))) / 2.0f || y > ((float) (getContainerViewHeight() + AndroidUtilities.dp(100.0f))) / 2.0f) ? false : onSingleTapConfirmed(motionEvent)) {
                    this.discardTap = true;
                    return true;
                }
            }
            return false;
        }
        return onSingleTapConfirmed(motionEvent);
    }

    @Override // org.telegram.ui.Components.GestureDetector2.OnGestureListener
    public void onUp(MotionEvent motionEvent) {
        hidePressedDrawables();
    }

    /* JADX WARN: Code restructure failed: missing block: B:91:0x0067, code lost:
        if (r4.startsWith("https://" + org.telegram.messenger.MessagesController.getInstance(r16.currentAccount).linkPrefix) == false) goto L33;
     */
    /* JADX WARN: Removed duplicated region for block: B:142:0x02b7 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x02b8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openAdsMenu() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isSponsored() || this.menuItem.getAlpha() <= 0.5f) {
            return;
        }
        final int i2 = this.currentMessageObject.currentAccount;
        final DarkThemeResourceProvider darkThemeResourceProvider = new DarkThemeResourceProvider();
        final ItemOptions makeOptions = ItemOptions.makeOptions(this.containerView, darkThemeResourceProvider, this.menuItem, true);
        makeOptions.translate(0.0f, -AndroidUtilities.dp(46.0f));
        makeOptions.setGravity(5);
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.sponsoredInfo == null && messageObject2.sponsoredAdditionalInfo == null) {
            String str = messageObject2.sponsoredUrl;
            if (str != null) {
            }
            if (!UserConfig.getInstance(i2).isPremium() && !MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked() && !this.currentMessageObject.sponsoredCanReport) {
                makeOptions.add(R.drawable.msg_block2, LocaleController.getString(R.string.HideAd), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda113
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$openAdsMenu$115(i2, darkThemeResourceProvider);
                    }
                });
            }
            boolean z = this.currentMessageObject.sponsoredCanReport;
            makeOptions.add(R.drawable.msg_info, LocaleController.getString(R.string.AboutRevenueSharingAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda114
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$116(darkThemeResourceProvider);
                }
            });
            if ((this.parentFragment instanceof ChatActivity) && !MessagesController.getInstance(i2).premiumFeaturesBlocked()) {
                makeOptions.addGap();
                makeOptions.add(R.drawable.msg_cancel, LocaleController.getString(R.string.RemoveAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda115
                    @Override // java.lang.Runnable
                    public final void run() {
                        PhotoViewer.this.lambda$openAdsMenu$117(i2, darkThemeResourceProvider);
                    }
                });
            }
            if (makeOptions.getItemsCount() > 0) {
                return;
            }
            makeOptions.show();
            return;
        }
        final ItemOptions makeSwipeback = makeOptions.makeSwipeback();
        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.activityContext, true, false, (Theme.ResourcesProvider) darkThemeResourceProvider);
        actionBarMenuSubItem.setItemHeight(44);
        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString(R.string.Back), R.drawable.msg_arrow_back);
        actionBarMenuSubItem.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda107
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ItemOptions.this.closeSwipeback();
            }
        });
        makeSwipeback.addView(actionBarMenuSubItem, LayoutHelper.createLinear(-1, -2));
        makeSwipeback.addView(new ActionBarPopupWindow.GapView(this.activityContext, darkThemeResourceProvider), LayoutHelper.createLinear(-1, 8));
        ArrayList arrayList = new ArrayList();
        String str2 = this.currentMessageObject.sponsoredUrl;
        if (str2 != null && !TextUtils.equals(AndroidUtilities.getHostAuthority(str2), MessagesController.getInstance(this.currentAccount).linkPrefix)) {
            TextView textView = new TextView(this.activityContext);
            textView.setTextColor(Theme.getColor(Theme.key_chat_messageLinkIn, darkThemeResourceProvider));
            textView.setTextSize(1, 14.0f);
            textView.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView.setMaxWidth(AndroidUtilities.dp(300.0f));
            Uri parse = Uri.parse(this.currentMessageObject.sponsoredUrl);
            textView.setText(Browser.replaceHostname(parse, Browser.IDN_toUnicode(parse.getHost()), null));
            textView.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, this.currentMessageObject.sponsoredAdditionalInfo == null ? 6 : 0));
            textView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda108
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$110(makeOptions, view);
                }
            });
            textView.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda109
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    boolean lambda$openAdsMenu$111;
                    lambda$openAdsMenu$111 = PhotoViewer.this.lambda$openAdsMenu$111(darkThemeResourceProvider, view);
                    return lambda$openAdsMenu$111;
                }
            });
            arrayList.add(textView);
        }
        if (this.currentMessageObject.sponsoredInfo != null) {
            TextView textView2 = new TextView(this.activityContext);
            textView2.setTextColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem, darkThemeResourceProvider));
            textView2.setTextSize(1, 14.0f);
            textView2.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView2.setMaxWidth(AndroidUtilities.dp(300.0f));
            textView2.setText(this.currentMessageObject.sponsoredInfo);
            textView2.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, this.currentMessageObject.sponsoredAdditionalInfo == null ? 6 : 0));
            textView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda110
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$112(darkThemeResourceProvider, view);
                }
            });
            arrayList.add(textView2);
        }
        if (this.currentMessageObject.sponsoredAdditionalInfo != null) {
            TextView textView3 = new TextView(this.activityContext);
            textView3.setTextColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem, darkThemeResourceProvider));
            textView3.setTextSize(1, 14.0f);
            textView3.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
            textView3.setMaxWidth(AndroidUtilities.dp(300.0f));
            textView3.setText(this.currentMessageObject.sponsoredAdditionalInfo);
            textView3.setBackground(Theme.createRadSelectorDrawable(getThemedColor(Theme.key_dialogButtonSelector), 0, 6));
            textView3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda111
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    PhotoViewer.this.lambda$openAdsMenu$113(darkThemeResourceProvider, view);
                }
            });
            arrayList.add(textView3);
        }
        for (int i3 = 0; i3 < arrayList.size(); i3++) {
            View view = (View) arrayList.get(i3);
            if (i3 > 0) {
                FrameLayout frameLayout = new FrameLayout(this.activityContext);
                frameLayout.setBackgroundColor(Theme.getColor(Theme.key_divider, darkThemeResourceProvider));
                i = -1;
                LinearLayout.LayoutParams createLinear = LayoutHelper.createLinear(-1, 1);
                createLinear.height = 1;
                makeSwipeback.addView(frameLayout, createLinear);
            } else {
                i = -1;
            }
            makeSwipeback.addView(view, LayoutHelper.createLinear(i, -2));
        }
        makeOptions.add(R.drawable.msg_channel, LocaleController.getString(R.string.SponsoredMessageSponsorReportable), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda112
            @Override // java.lang.Runnable
            public final void run() {
                ItemOptions.this.openSwipeback(makeSwipeback);
            }
        });
        if (!UserConfig.getInstance(i2).isPremium()) {
            makeOptions.add(R.drawable.msg_block2, LocaleController.getString(R.string.HideAd), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda113
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$115(i2, darkThemeResourceProvider);
                }
            });
        }
        boolean z2 = this.currentMessageObject.sponsoredCanReport;
        makeOptions.add(R.drawable.msg_info, LocaleController.getString(R.string.AboutRevenueSharingAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.lambda$openAdsMenu$116(darkThemeResourceProvider);
            }
        });
        if (this.parentFragment instanceof ChatActivity) {
            makeOptions.addGap();
            makeOptions.add(R.drawable.msg_cancel, LocaleController.getString(R.string.RemoveAds), new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda115
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$openAdsMenu$117(i2, darkThemeResourceProvider);
                }
            });
        }
        if (makeOptions.getItemsCount() > 0) {
        }
    }

    public boolean openPhoto(int i, PageBlocksAdapter pageBlocksAdapter, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, null, null, null, null, null, null, i, photoViewerProvider, null, 0L, 0L, 0L, true, pageBlocksAdapter, null);
    }

    public boolean openPhoto(ArrayList arrayList, int i, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto((MessageObject) arrayList.get(i), null, null, null, arrayList, null, null, i, photoViewerProvider, null, j, j2, j3, true, null, null);
    }

    public boolean openPhoto(ArrayList arrayList, int i, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, null, null, null, null, arrayList, null, i, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhoto(MessageObject messageObject, int i, ChatActivity chatActivity, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, chatActivity, j, j2, j3, true, null, Integer.valueOf(i));
    }

    public boolean openPhoto(MessageObject messageObject, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider, boolean z) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, null, j, j2, j3, z, null, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:278:0x026a, code lost:
        if (r18.getWebPagePhotos(null, null).size() > 1) goto L76;
     */
    /* JADX WARN: Removed duplicated region for block: B:252:0x01fa  */
    /* JADX WARN: Removed duplicated region for block: B:308:0x038e  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x03f8  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean openPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, ImageLocation imageLocation, ImageLocation imageLocation2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, int i, final PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity, long j, long j2, long j3, boolean z, PageBlocksAdapter pageBlocksAdapter, final Integer num) {
        WindowManager.LayoutParams layoutParams;
        int i2;
        TLRPC.Message message;
        PhotoViewerProvider photoViewerProvider2;
        AccessibilityManager accessibilityManager;
        int i3 = 0;
        if (this.parentActivity != null && !this.isVisible && ((photoViewerProvider != null || !checkAnimation()) && (messageObject != null || fileLocation != null || arrayList != null || arrayList3 != null || arrayList2 != null || imageLocation != null || pageBlocksAdapter != null))) {
            PlaceProviderObject placeForPhoto = photoViewerProvider.getPlaceForPhoto(messageObject, fileLocation, i, true);
            if (Build.VERSION.SDK_INT < 21) {
                Rect rect = this.insets;
                rect.top = AndroidUtilities.statusBarHeight;
                rect.bottom = AndroidUtilities.navigationBarHeight;
            }
            WindowManager windowManager = (WindowManager) this.parentActivity.getSystemService("window");
            if (this.attachedToWindow) {
                try {
                    windowManager.removeView(this.windowView);
                    onHideView();
                } catch (Exception unused) {
                }
            }
            try {
                WindowManager.LayoutParams layoutParams2 = this.windowLayoutParams;
                layoutParams2.type = 99;
                if (Build.VERSION.SDK_INT >= 21) {
                    layoutParams2.flags = -2147286784;
                } else {
                    layoutParams2.flags = 131072;
                }
                if ((chatActivity == null || chatActivity.getCurrentEncryptedChat() == null) && ((this.avatarsDialogId == 0 || !MessagesController.getInstance(this.currentAccount).isChatNoForwards(-this.avatarsDialogId)) && ((messageObject == null || (!MessagesController.getInstance(this.currentAccount).isChatNoForwards(messageObject.getChatId()) && ((message = messageObject.messageOwner) == null || !message.noforwards))) && (messageObject == null || !messageObject.hasRevealedExtendedMedia())))) {
                    layoutParams = this.windowLayoutParams;
                    i2 = layoutParams.flags & (-8193);
                } else {
                    layoutParams = this.windowLayoutParams;
                    i2 = layoutParams.flags | LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM;
                }
                layoutParams.flags = i2;
                this.windowLayoutParams.softInputMode = NotificationCenter.onDownloadingFilesChanged;
                this.windowView.setFocusable(false);
                this.containerView.setFocusable(false);
                windowManager.addView(this.windowView, this.windowLayoutParams);
                onShowView();
                this.hasCaptionForAllMedia = false;
                this.doneButtonPressed = false;
                this.closePhotoAfterSelect = true;
                this.allowShowFullscreenButton = true;
                this.usedSurfaceView = false;
                this.parentChatActivity = chatActivity;
                this.lastTitle = null;
                this.isEmbedVideo = num != null;
                this.actionBarContainer.setTitle("");
                this.actionBarContainer.setSubtitle("", false);
                PhotoCountView photoCountView = this.countView;
                if (photoCountView != null) {
                    photoCountView.set(0, 0, false);
                    this.countView.updateShow(false, false);
                }
                this.actionBar.setTitleScrollNonFitText(false);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoadFailed);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoaded);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.customStickerCreated);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileLoadProgressChanged);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.mediaCountDidLoad);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.mediaDidLoad);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.dialogPhotosUpdate);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.messagesDeleted);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.filePreparingFailed);
                NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.fileNewChunkAvailable);
                this.placeProvider = photoViewerProvider;
                this.mergeDialogId = j2;
                this.currentDialogId = j;
                this.currentFilterTag = chatActivity != null ? chatActivity.getFilterTag() : null;
                this.currentFilterQuery = chatActivity != null ? chatActivity.getFilterQuery() : null;
                this.currentFiltered = chatActivity != null && chatActivity.isFiltered();
                this.topicId = j3;
                this.selectedPhotosAdapter.notifyDataSetChanged();
                this.pageBlocksAdapter = pageBlocksAdapter;
                this.setAvatarFor = null;
                if (this.velocityTracker == null) {
                    this.velocityTracker = VelocityTracker.obtain();
                }
                this.isVisible = true;
                this.isVisibleOrAnimating = true;
                togglePhotosListView(false, false);
                boolean z2 = !z;
                this.openedFullScreenVideo = z2;
                if (!z2) {
                    if (this.sendPhotoType != 1) {
                        toggleActionBar(true, false);
                        this.windowView.setClipChildren(false);
                        this.navigationBar.setVisibility(0);
                        this.seekToProgressPending2 = 0.0f;
                        this.skipFirstBufferingProgress = false;
                        this.playerInjected = false;
                        if (placeForPhoto == null) {
                            this.disableShowCheck = true;
                            this.animationInProgress = 1;
                            if (messageObject != null) {
                                AnimatedFileDrawable animation = placeForPhoto.allowTakeAnimation ? placeForPhoto.imageReceiver.getAnimation() : null;
                                this.currentAnimation = animation;
                                if (animation != null) {
                                    if (messageObject.isVideo()) {
                                        placeForPhoto.imageReceiver.setAllowStartAnimation(false);
                                        placeForPhoto.imageReceiver.stopAnimation();
                                        if (MediaController.getInstance().isPlayingMessage(messageObject)) {
                                            this.seekToProgressPending2 = messageObject.audioProgress;
                                        }
                                        this.skipFirstBufferingProgress = this.injectingVideoPlayer == null && !FileLoader.getInstance(messageObject.currentAccount).isLoadingVideo(messageObject.getDocument(), true) && (this.currentAnimation.hasBitmap() || !FileLoader.getInstance(messageObject.currentAccount).isLoadingVideo(messageObject.getDocument(), false));
                                    }
                                    this.currentAnimation = null;
                                }
                            } else if (pageBlocksAdapter != null) {
                                this.currentAnimation = placeForPhoto.imageReceiver.getAnimation();
                            }
                            float f = 0.0f;
                            onPhotoShow(messageObject, fileLocation, imageLocation, imageLocation2, arrayList, arrayList2, arrayList3, i, placeForPhoto);
                            if (this.sendPhotoType == 1) {
                                this.photoCropView.setVisibility(0);
                                this.photoCropView.setAlpha(0.0f);
                                this.photoCropView.setFreeform(false);
                            }
                            RectF drawRegion = placeForPhoto.imageReceiver.getDrawRegion();
                            float f2 = drawRegion.left;
                            float f3 = drawRegion.top;
                            int orientation = placeForPhoto.imageReceiver.getOrientation();
                            int animatedOrientation = placeForPhoto.imageReceiver.getAnimatedOrientation();
                            if (animatedOrientation != 0) {
                                orientation = animatedOrientation;
                            }
                            ClippingImageView[] animatingImageViews = getAnimatingImageViews(placeForPhoto);
                            this.clippingImageProgress = 1.0f;
                            for (int i4 = 0; i4 < animatingImageViews.length; i4++) {
                                animatingImageViews[i4].setAnimationValues(this.animationValues);
                                animatingImageViews[i4].setVisibility(0);
                                animatingImageViews[i4].setRadius(placeForPhoto.radius);
                                animatingImageViews[i4].setOrientation(orientation, placeForPhoto.imageReceiver.getInvert());
                                animatingImageViews[i4].setImageBitmap(placeForPhoto.thumb);
                            }
                            initCropView();
                            if (this.sendPhotoType == 1) {
                                this.photoCropView.setAspectRatio(1.0f);
                            }
                            ViewGroup.LayoutParams layoutParams3 = this.animatingImageView.getLayoutParams();
                            layoutParams3.width = (int) drawRegion.width();
                            int height = (int) drawRegion.height();
                            layoutParams3.height = height;
                            if (layoutParams3.width <= 0) {
                                layoutParams3.width = 100;
                            }
                            if (height <= 0) {
                                layoutParams3.height = 100;
                            }
                            while (i3 < animatingImageViews.length) {
                                if (animatingImageViews.length > 1) {
                                    animatingImageViews[i3].setAlpha(f);
                                } else {
                                    animatingImageViews[i3].setAlpha(1.0f);
                                }
                                animatingImageViews[i3].setPivotX(f);
                                animatingImageViews[i3].setPivotY(f);
                                animatingImageViews[i3].setScaleX(placeForPhoto.scale);
                                animatingImageViews[i3].setScaleY(placeForPhoto.scale);
                                animatingImageViews[i3].setTranslationX(placeForPhoto.viewX + (drawRegion.left * placeForPhoto.scale));
                                animatingImageViews[i3].setTranslationY(placeForPhoto.viewY + (drawRegion.top * placeForPhoto.scale));
                                animatingImageViews[i3].setLayoutParams(layoutParams3);
                                i3++;
                                f = 0.0f;
                            }
                            this.windowView.getViewTreeObserver().addOnPreDrawListener(new 70(animatingImageViews, layoutParams3, f2, placeForPhoto, f3, photoViewerProvider, arrayList3, num));
                        } else {
                            if (arrayList3 != null && this.sendPhotoType != 3 && ((photoViewerProvider2 = this.placeProvider) == null || !photoViewerProvider2.closeKeyboard())) {
                                makeFocusable();
                            }
                            this.containerView.setAlpha(1.0f);
                            onPhotoShow(messageObject, fileLocation, imageLocation, imageLocation2, arrayList, arrayList2, arrayList3, i, placeForPhoto);
                            initCropView();
                            setCropBitmap();
                            ChatActivity chatActivity2 = this.parentChatActivity;
                            if (chatActivity2 != null) {
                                UndoView undoView = chatActivity2.getUndoView();
                                if (undoView != null) {
                                    undoView.hide(false, 1);
                                }
                                this.parentChatActivity.getFragmentView().invalidate();
                            }
                            this.windowView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.PhotoViewer.71
                                {
                                    PhotoViewer.this = this;
                                }

                                @Override // android.view.ViewTreeObserver.OnPreDrawListener
                                public boolean onPreDraw() {
                                    PhotoViewer.this.windowView.getViewTreeObserver().removeOnPreDrawListener(this);
                                    PhotoViewer.this.actionBar.setTranslationY(-AndroidUtilities.dp(32.0f));
                                    ViewPropertyAnimator duration = PhotoViewer.this.actionBar.animate().alpha(1.0f).translationY(0.0f).setDuration(150L);
                                    CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.DEFAULT;
                                    duration.setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.checkImageView.setTranslationY(-AndroidUtilities.dp(32.0f));
                                    PhotoViewer.this.checkImageView.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.photosCounterView.setTranslationY(-AndroidUtilities.dp(32.0f));
                                    PhotoViewer.this.photosCounterView.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.pickerView.setTranslationY(AndroidUtilities.dp(32.0f));
                                    PhotoViewer.this.pickerView.animate().alpha(1.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.pickerViewSendButton.setTranslationY(AndroidUtilities.dp(32.0f));
                                    PhotoViewer.this.pickerViewSendButton.setAlpha(0.0f);
                                    PhotoViewer.this.pickerViewSendButton.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.videoPreviewFrame.setTranslationY(AndroidUtilities.dp(32.0f));
                                    PhotoViewer.this.videoPreviewFrame.animate().alpha(1.0f).translationY(0.0f).setDuration(150L).setInterpolator(cubicBezierInterpolator).start();
                                    PhotoViewer.this.containerView.setAlpha(0.0f);
                                    PhotoViewer.this.backgroundDrawable.setAlpha(0);
                                    PhotoViewer.this.animationInProgress = 4;
                                    PhotoViewer.this.containerView.invalidate();
                                    AnimatorSet animatorSet = new AnimatorSet();
                                    ObjectAnimator duration2 = ObjectAnimator.ofFloat(PhotoViewer.this.pickerView, View.TRANSLATION_Y, PhotoViewer.this.pickerView.getTranslationY(), 0.0f).setDuration(220L);
                                    duration2.setInterpolator(cubicBezierInterpolator);
                                    FrameLayout frameLayout = PhotoViewer.this.pickerView;
                                    Property property = View.ALPHA;
                                    ObjectAnimator duration3 = ObjectAnimator.ofFloat(frameLayout, property, 1.0f).setDuration(220L);
                                    duration3.setInterpolator(cubicBezierInterpolator);
                                    animatorSet.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.containerView, property, 0.0f, 1.0f).setDuration(220L), ObjectAnimator.ofFloat(PhotoViewer.this.navigationBar, property, 0.0f, 1.0f).setDuration(220L), duration2, duration3);
                                    animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.71.1
                                        {
                                            71.this = this;
                                        }

                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationEnd(Animator animator) {
                                            super.onAnimationEnd(animator);
                                            PhotoViewer.this.animationInProgress = 0;
                                            PhotoViewer.this.invalidateBlur();
                                            PhotoViewer.this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
                                            PhotoViewer.this.containerView.invalidate();
                                            PhotoViewer.this.pickerView.setTranslationY(0.0f);
                                            if (PhotoViewer.this.isEmbedVideo) {
                                                71 r2 = 71.this;
                                                PhotoViewer.this.initEmbedVideo(num.intValue());
                                            }
                                            PhotoViewerProvider photoViewerProvider3 = photoViewerProvider;
                                            if (photoViewerProvider3 != null) {
                                                photoViewerProvider3.onOpen();
                                            }
                                        }

                                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                        public void onAnimationStart(Animator animator) {
                                            super.onAnimationStart(animator);
                                            PhotoViewerProvider photoViewerProvider3 = photoViewerProvider;
                                            if (photoViewerProvider3 != null) {
                                                photoViewerProvider3.onPreOpen();
                                            }
                                        }
                                    });
                                    animatorSet.start();
                                    return true;
                                }
                            });
                        }
                        accessibilityManager = (AccessibilityManager) this.parentActivity.getSystemService("accessibility");
                        if (accessibilityManager.isTouchExplorationEnabled()) {
                            AccessibilityEvent obtain = AccessibilityEvent.obtain();
                            obtain.setEventType(LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM);
                            obtain.getText().add(LocaleController.getString("AccDescrPhotoViewer", R.string.AccDescrPhotoViewer));
                            accessibilityManager.sendAccessibilityEvent(obtain);
                        }
                        return true;
                    }
                    createCropView();
                }
                toggleActionBar(false, false);
                this.windowView.setClipChildren(false);
                this.navigationBar.setVisibility(0);
                this.seekToProgressPending2 = 0.0f;
                this.skipFirstBufferingProgress = false;
                this.playerInjected = false;
                if (placeForPhoto == null) {
                }
                accessibilityManager = (AccessibilityManager) this.parentActivity.getSystemService("accessibility");
                if (accessibilityManager.isTouchExplorationEnabled()) {
                }
                return true;
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        return false;
    }

    public boolean openPhoto(MessageObject messageObject, ChatActivity chatActivity, long j, long j2, long j3, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(messageObject, null, null, null, null, null, null, 0, photoViewerProvider, chatActivity, j, j2, j3, true, null, null);
    }

    public boolean openPhoto(TLRPC.FileLocation fileLocation, ImageLocation imageLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, fileLocation, imageLocation, null, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhoto(TLRPC.FileLocation fileLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, fileLocation, null, null, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public boolean openPhotoForSelect(ArrayList arrayList, int i, int i2, boolean z, PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity) {
        return openPhotoForSelect(null, null, arrayList, i, i2, z, photoViewerProvider, chatActivity);
    }

    public boolean openPhotoForSelect(TLRPC.FileLocation fileLocation, ImageLocation imageLocation, ArrayList arrayList, int i, int i2, boolean z, PhotoViewerProvider photoViewerProvider, ChatActivity chatActivity) {
        int dp;
        this.isDocumentsPicker = z;
        ImageView imageView = this.pickerViewSendButton;
        if (imageView != null) {
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) imageView.getLayoutParams();
            if (i2 == 4 || i2 == 5) {
                this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
            } else if (i2 == 1 || i2 == 3 || i2 == 10 || i2 == 11) {
                this.pickerViewSendButton.setImageResource(R.drawable.floating_check);
                this.pickerViewSendButton.setPadding(0, AndroidUtilities.dp(1.0f), 0, 0);
            } else {
                this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
                dp = AndroidUtilities.dp(2.33f);
                layoutParams.bottomMargin = dp;
                this.pickerViewSendButton.setLayoutParams(layoutParams);
            }
            dp = AndroidUtilities.dp(7.33f);
            layoutParams.bottomMargin = dp;
            this.pickerViewSendButton.setLayoutParams(layoutParams);
        }
        if (i2 != 11 && this.stickerMakerView != null) {
            this.stickerEmpty = false;
            ImageView imageView2 = this.tuneItem;
            if (imageView2 != null) {
                imageView2.setAlpha(1.0f);
            }
            BlurButton blurButton = this.outlineBtn;
            if (blurButton != null) {
                blurButton.setActive(false, false);
            }
            this.stickerMakerView.clean();
            ArrayList arrayList2 = this.selectedEmojis;
            if (arrayList2 != null) {
                arrayList2.clear();
            }
        }
        if (this.sendPhotoType == 1 || i2 != 1 || !this.isVisible) {
            this.sendPhotoType = i2;
            if (i2 == 11) {
                this.navigationBar.setBackgroundColor(-16777216);
            }
            return openPhoto(null, fileLocation, imageLocation, null, null, null, arrayList, i, photoViewerProvider, chatActivity, 0L, 0L, 0L, true, null, null);
        }
        this.sendPhotoType = i2;
        this.doneButtonPressed = false;
        this.actionBarContainer.setTitle("");
        this.actionBarContainer.setSubtitle("", false);
        this.placeProvider = photoViewerProvider;
        this.mergeDialogId = 0L;
        this.currentDialogId = 0L;
        this.selectedPhotosAdapter.notifyDataSetChanged();
        this.pageBlocksAdapter = null;
        if (this.velocityTracker == null) {
            this.velocityTracker = VelocityTracker.obtain();
        }
        this.isVisible = true;
        this.isVisibleOrAnimating = true;
        togglePhotosListView(false, false);
        this.openedFullScreenVideo = false;
        createCropView();
        toggleActionBar(false, false);
        this.seekToProgressPending2 = 0.0f;
        this.skipFirstBufferingProgress = false;
        this.playerInjected = false;
        makeFocusable();
        this.backgroundDrawable.setAlpha(NotificationCenter.closeSearchByActiveAction);
        this.containerView.setAlpha(1.0f);
        onPhotoShow(null, fileLocation, imageLocation, null, null, null, arrayList, i, null);
        initCropView();
        setCropBitmap();
        return true;
    }

    public boolean openPhotoWithVideo(TLRPC.FileLocation fileLocation, ImageLocation imageLocation, PhotoViewerProvider photoViewerProvider) {
        return openPhoto(null, fileLocation, null, imageLocation, null, null, null, 0, photoViewerProvider, null, 0L, 0L, 0L, true, null, null);
    }

    public void prepareSegmentImage() {
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView == null || this.sendPhotoType != 11) {
            return;
        }
        if (this.stickerEmpty) {
            stickerMakerView.clean();
        } else {
            stickerMakerView.segmentImage(this.centerImage.getBitmap(), this.centerImage.getOrientation(), getContainerViewWidth(), getContainerViewHeight(), new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda81
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    PhotoViewer.this.lambda$prepareSegmentImage$92((StickerMakerView.SegmentedObject) obj);
                }
            });
        }
    }

    public void setAnimationValue(float f) {
        this.animationValue = f;
        this.containerView.invalidate();
        invalidateBlur();
    }

    public void setAvatarFor(ImageUpdater.AvatarFor avatarFor) {
        int i;
        String str;
        TLRPC.User user;
        PhotoCropView photoCropView;
        String formatString;
        this.setAvatarFor = avatarFor;
        if (this.sendPhotoType == 1) {
            if (useFullWidthSendButton()) {
                this.doneButtonFullWidth.setVisibility(0);
                this.pickerViewSendButton.setVisibility(8);
            } else {
                this.pickerViewSendButton.setVisibility(0);
                this.doneButtonFullWidth.setVisibility(8);
            }
            if (avatarFor == null || (user = avatarFor.fromObject) == null || avatarFor.type != 1 || !this.setAvatarFor.self) {
                this.photoCropView.setSubtitle(null);
            } else {
                if (avatarFor.isVideo) {
                    photoCropView = this.photoCropView;
                    formatString = LocaleController.formatString("SetSuggestedVideoTooltip", R.string.SetSuggestedVideoTooltip, user.first_name);
                } else {
                    photoCropView = this.photoCropView;
                    formatString = LocaleController.formatString("SetSuggestedPhotoTooltip", R.string.SetSuggestedPhotoTooltip, user.first_name);
                }
                photoCropView.setSubtitle(formatString);
            }
        }
        if (avatarFor != null) {
            if (avatarFor.type == 2) {
                if (avatarFor.isVideo) {
                    i = R.string.SuggestVideo;
                    str = "SuggestVideo";
                } else {
                    i = R.string.SuggestPhoto;
                    str = "SuggestPhoto";
                }
                setTitle(LocaleController.getString(str, i));
            }
            if (avatarFor.isVideo) {
                this.videoAvatarTooltip.setText(LocaleController.getString("SetCover", R.string.SetCover));
            }
            this.actionBar.setBackground(null);
            if (Build.VERSION.SDK_INT >= 21) {
                this.actionBar.setElevation(2.0f);
            }
        }
    }

    public void setCaption(CharSequence charSequence) {
        this.hasCaptionForAllMedia = true;
        this.captionForAllMedia = charSequence;
        setCurrentCaption(null, charSequence, false, false);
        updateCaptionTextForCurrentPhoto(null);
    }

    public void setMaxSelectedPhotos(int i, boolean z) {
        this.maxSelectedPhotos = i;
        this.allowOrder = z;
    }

    public void setParentActivity(Activity activity) {
        setParentActivity(activity, null, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v74 */
    /* JADX WARN: Type inference failed for: r1v83 */
    public void setParentActivity(Activity activity, BaseFragment baseFragment, final Theme.ResourcesProvider resourcesProvider) {
        int i;
        Activity parentActivity = activity != null ? activity : baseFragment.getParentActivity();
        Theme.createChatResources(parentActivity, false);
        this.resourcesProvider = resourcesProvider;
        this.parentFragment = baseFragment;
        int i2 = UserConfig.selectedAccount;
        this.currentAccount = i2;
        this.centerImage.setCurrentAccount(i2);
        this.leftImage.setCurrentAccount(this.currentAccount);
        this.rightImage.setCurrentAccount(this.currentAccount);
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer != null) {
            captionPhotoViewer.setAccount(this.currentAccount);
        }
        StickerMakerView stickerMakerView = this.stickerMakerView;
        if (stickerMakerView != null) {
            stickerMakerView.setCurrentAccount(this.currentAccount);
        }
        if (this.parentActivity == parentActivity || parentActivity == null) {
            updateColors();
            return;
        }
        this.inBubbleMode = parentActivity instanceof BubbleActivity;
        this.parentActivity = parentActivity;
        this.activityContext = new ContextThemeWrapper(this.parentActivity, R.style.Theme_TMessages);
        this.touchSlop = ViewConfiguration.get(this.parentActivity).getScaledTouchSlop();
        if (progressDrawables == null) {
            progressDrawables = new Drawable[]{ContextCompat.getDrawable(this.parentActivity, R.drawable.circle_big), ContextCompat.getDrawable(this.parentActivity, R.drawable.cancel_big), ContextCompat.getDrawable(this.parentActivity, R.drawable.load_big)};
        }
        this.scroller = new Scroller(parentActivity);
        13 r2 = new 13(parentActivity);
        this.windowView = r2;
        r2.setBackgroundDrawable(this.backgroundDrawable);
        this.windowView.setFocusable(false);
        ClippingImageView clippingImageView = new ClippingImageView(parentActivity);
        this.animatingImageView = clippingImageView;
        clippingImageView.setAnimationValues(this.animationValues);
        this.windowView.addView(this.animatingImageView, LayoutHelper.createFrame(40, 40.0f));
        FrameLayoutDrawer frameLayoutDrawer = new FrameLayoutDrawer(parentActivity, parentActivity) { // from class: org.telegram.ui.PhotoViewer.14
            {
                PhotoViewer.this = this;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
            public void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
                PhotoViewer.this.textSelectionHelper.getOverlayView(PhotoViewer.this.windowView.getContext()).draw(canvas);
            }

            @Override // android.view.ViewGroup, android.view.View
            public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                PhotoViewer.this.textSelectionHelper.getOverlayView(getContext()).checkCancelAction(motionEvent);
                if (PhotoViewer.this.textSelectionHelper.isInSelectionMode()) {
                    PhotoViewer.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent);
                    return true;
                }
                return super.dispatchTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.PhotoViewer.FrameLayoutDrawer, android.view.ViewGroup
            protected boolean drawChild(Canvas canvas, View view, long j) {
                if (view == PhotoViewer.this.textSelectionHelper.getOverlayView(PhotoViewer.this.windowView.getContext()) || view == PhotoViewer.this.stickerMakerBackgroundView) {
                    return false;
                }
                return super.drawChild(canvas, view, j);
            }

            @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
            public int getBottomPadding() {
                return PhotoViewer.this.pickerView.getHeight();
            }

            @Override // org.telegram.ui.PhotoViewer.FrameLayoutDrawer, org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto, org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
            protected void onLayout(boolean z, int i3, int i4, int i5, int i6) {
                if (PhotoViewer.this.btnLayout != null && PhotoViewer.this.undoBtn != null) {
                    int dp = (i5 - i3) - AndroidUtilities.dp(20.0f);
                    PhotoViewer.this.undoBtn.setTranslationY(((-dp) / 2.0f) - AndroidUtilities.dp(47.0f));
                    float f = dp / 2.0f;
                    PhotoViewer.this.btnLayout.setTranslationY(AndroidUtilities.dp(47.0f) + f);
                    PhotoViewer.this.cutOutBtn.setTranslationY(AndroidUtilities.dp(47.0f) + f);
                    PhotoViewer.this.outlineBtn.setTranslationY(f + AndroidUtilities.dp(95.0f));
                }
                super.onLayout(z, i3, i4, i5, i6);
            }
        };
        this.containerView = frameLayoutDrawer;
        frameLayoutDrawer.setFocusable(false);
        this.containerView.setClipChildren(true);
        this.containerView.setClipToPadding(true);
        this.windowView.setClipChildren(false);
        this.windowView.setClipToPadding(false);
        BlurringShader.BlurManager blurManager = new BlurringShader.BlurManager(this.containerView);
        this.blurManager = blurManager;
        blurManager.padding = 1;
        this.shadowBlurer = new BlurringShader.StoryBlurDrawer(blurManager, this.containerView, 6);
        this.windowView.addView(this.containerView, LayoutHelper.createFrame(-1, -1, 51));
        int i3 = Build.VERSION.SDK_INT;
        if (i3 >= 21) {
            this.containerView.setFitsSystemWindows(true);
            this.containerView.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda32
                @Override // android.view.View.OnApplyWindowInsetsListener
                public final WindowInsets onApplyWindowInsets(View view, WindowInsets windowInsets) {
                    WindowInsets lambda$setParentActivity$6;
                    lambda$setParentActivity$6 = PhotoViewer.this.lambda$setParentActivity$6(view, windowInsets);
                    return lambda$setParentActivity$6;
                }
            });
            this.containerView.setSystemUiVisibility(1792);
        }
        WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
        this.windowLayoutParams = layoutParams;
        layoutParams.height = -1;
        layoutParams.format = -3;
        layoutParams.width = -1;
        layoutParams.gravity = 51;
        layoutParams.type = 99;
        if (i3 >= 28) {
            layoutParams.layoutInDisplayCutoutMode = 1;
        }
        layoutParams.flags = i3 >= 21 ? -2147286784 : 131072;
        PaintingOverlay paintingOverlay = new PaintingOverlay(this.parentActivity);
        this.paintingOverlay = paintingOverlay;
        this.containerView.addView(paintingOverlay, LayoutHelper.createFrame(-2, -2.0f));
        PaintingOverlay paintingOverlay2 = new PaintingOverlay(this.parentActivity);
        this.leftPaintingOverlay = paintingOverlay2;
        this.containerView.addView(paintingOverlay2, LayoutHelper.createFrame(-2, -2.0f));
        PaintingOverlay paintingOverlay3 = new PaintingOverlay(this.parentActivity);
        this.rightPaintingOverlay = paintingOverlay3;
        this.containerView.addView(paintingOverlay3, LayoutHelper.createFrame(-2, -2.0f));
        ActionBar actionBar = new ActionBar(parentActivity) { // from class: org.telegram.ui.PhotoViewer.15
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                PhotoViewer.this.containerView.invalidate();
            }
        };
        this.actionBar = actionBar;
        actionBar.setOverlayTitleAnimation(true);
        this.actionBar.setTitleColor(-1);
        this.actionBar.setSubtitleColor(-1);
        this.actionBar.setBackgroundColor(2130706432);
        this.actionBar.setOccupyStatusBar(isStatusBarVisible());
        this.actionBar.setItemsBackgroundColor(1090519039, false);
        this.actionBar.setItemsColor(-1, false);
        this.actionBar.setBackButtonImage(R.drawable.ic_ab_back);
        PhotoViewerActionBarContainer photoViewerActionBarContainer = new PhotoViewerActionBarContainer(parentActivity);
        this.actionBarContainer = photoViewerActionBarContainer;
        this.actionBar.addView(photoViewerActionBarContainer, LayoutHelper.createFrame(-1, -1, 119));
        this.containerView.addView(this.actionBar, LayoutHelper.createFrame(-1, -2.0f));
        PhotoCountView photoCountView = new PhotoCountView(parentActivity);
        this.countView = photoCountView;
        this.containerView.addView(photoCountView, LayoutHelper.createFrame(-1, -2, 55));
        this.actionBar.setActionBarMenuOnItemClick(new 16(resourcesProvider));
        ActionBarMenu createMenu = this.actionBar.createMenu();
        this.menu = createMenu;
        createMenu.setOnLayoutListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.updateActionBarTitlePadding();
            }
        });
        ActionBarMenuItem addItem = this.menu.addItem(13, R.drawable.msg_mask);
        this.masksItem = addItem;
        addItem.setContentDescription(LocaleController.getString("Masks", R.string.Masks));
        ActionBarMenuItem addItem2 = this.menu.addItem(5, R.drawable.ic_goinline);
        this.pipItem = addItem2;
        addItem2.setContentDescription(LocaleController.getString("AccDescrPipMode", R.string.AccDescrPipMode));
        ActionBarMenuItem addItem3 = this.menu.addItem(20, R.drawable.msg_header_draw);
        this.editItem = addItem3;
        addItem3.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
        ActionBarMenuItem addItem4 = this.menu.addItem(3, R.drawable.msg_header_share);
        this.sendItem = addItem4;
        addItem4.setContentDescription(LocaleController.getString("Forward", R.string.Forward));
        ActionBarMenu actionBarMenu = this.menu;
        OptionsSpeedIconDrawable optionsSpeedIconDrawable = new OptionsSpeedIconDrawable();
        this.menuItemIcon = optionsSpeedIconDrawable;
        ActionBarMenuItem addItem5 = actionBarMenu.addItem(0, optionsSpeedIconDrawable);
        this.menuItem = addItem5;
        addItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda63
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                PhotoViewer.this.lambda$setParentActivity$7(view);
            }
        });
        this.menuItem.setOnMenuDismiss(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda64
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$8((Boolean) obj);
            }
        });
        this.menuItem.getPopupLayout().swipeBackGravityRight = true;
        this.chooseQualityLayout = new ChooseQualityLayout(this.activityContext, this.menuItem.getPopupLayout().getSwipeBack(), new ChooseQualityLayout.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda65
            @Override // org.telegram.ui.ChooseQualityLayout.Callback
            public final void onQualitySelected(int i4, boolean z, boolean z2) {
                PhotoViewer.this.lambda$setParentActivity$9(i4, z, z2);
            }
        });
        ActionBarMenuItem actionBarMenuItem = this.menuItem;
        ChooseQualityLayout.QualityIcon qualityIcon = new ChooseQualityLayout.QualityIcon(this.activityContext);
        this.qualityIcon = qualityIcon;
        ActionBarMenuSubItem addSwipeBackItem = actionBarMenuItem.addSwipeBackItem(0, qualityIcon, LocaleController.getString(R.string.Quality), this.chooseQualityLayout.layout);
        this.qualityItem = addSwipeBackItem;
        addSwipeBackItem.setColors(-328966, -328966);
        this.qualityItem.setVisibility(8);
        this.menuItem.getPopupLayout().getSwipeBack().addOnSwipeBackProgressListener(new PopupSwipeBackLayout.OnSwipeBackProgressListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda66
            @Override // org.telegram.ui.Components.PopupSwipeBackLayout.OnSwipeBackProgressListener
            public final void onSwipeBackProgress(PopupSwipeBackLayout popupSwipeBackLayout, float f, float f2) {
                PhotoViewer.this.lambda$setParentActivity$10(popupSwipeBackLayout, f, f2);
            }
        });
        this.chooseSpeedLayout = new ChooseSpeedLayout(this.activityContext, this.menuItem.getPopupLayout().getSwipeBack(), new ChooseSpeedLayout.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda67
            @Override // org.telegram.ui.ChooseSpeedLayout.Callback
            public final void onSpeedSelected(float f, boolean z, boolean z2) {
                PhotoViewer.this.lambda$setParentActivity$11(f, z, z2);
            }
        });
        this.speedItem = this.menuItem.addSwipeBackItem(R.drawable.msg_speed, null, LocaleController.getString(R.string.Speed), this.chooseSpeedLayout.speedSwipeBackLayout);
        this.menuItem.getPopupLayout().setSwipeBackForegroundColor(-14540254);
        this.speedItem.setSubtext(LocaleController.getString(R.string.SpeedNormal));
        this.speedItem.setColors(-328966, -328966);
        ActionBarPopupWindow.GapView addColoredGap = this.menuItem.addColoredGap();
        this.speedGap = addColoredGap;
        addColoredGap.setColor(-15198184);
        this.menuItem.getPopupLayout().setFitItems(true);
        this.menuItem.addSubItem(11, R.drawable.msg_openin, LocaleController.getString(R.string.OpenInExternalApp)).setColors(-328966, -328966);
        this.menuItem.setContentDescription(LocaleController.getString(R.string.AccDescrMoreOptions));
        ActionBarMenuSubItem addSubItem = this.menuItem.addSubItem(2, R.drawable.msg_media, LocaleController.getString(R.string.ShowAllMedia));
        this.allMediaItem = addSubItem;
        addSubItem.setColors(-328966, -328966);
        this.menuItem.addSubItem(14, R.drawable.msg_gif, LocaleController.getString(R.string.SaveToGIFs)).setColors(-328966, -328966);
        this.menuItem.addSubItem(4, R.drawable.msg_message, LocaleController.getString(R.string.ShowInChat)).setColors(-328966, -328966);
        this.menuItem.addSubItem(1, R.drawable.msg_gallery, LocaleController.getString(R.string.SaveToGallery)).setColors(-328966, -328966);
        this.menuItem.addSubItem(23, R.drawable.menu_reply, LocaleController.getString(R.string.Reply)).setColors(-328966, -328966);
        this.menuItem.addSubItem(10, R.drawable.msg_shareout, LocaleController.getString(R.string.ShareFile)).setColors(-328966, -328966);
        this.menuItem.addSubItem(15, R.drawable.msg_sticker, LocaleController.getString(R.string.ShowStickers)).setColors(-328966, -328966);
        this.menuItem.addSubItem(16, R.drawable.msg_openprofile, LocaleController.getString(R.string.SetAsMain)).setColors(-328966, -328966);
        ActionBarMenuItem actionBarMenuItem2 = this.menuItem;
        int i4 = R.drawable.msg_translate;
        actionBarMenuItem2.addSubItem(21, i4, LocaleController.getString(R.string.TranslateMessage)).setColors(-328966, -328966);
        this.menuItem.addSubItem(22, i4, LocaleController.getString(R.string.HideTranslation)).setColors(-328966, -328966);
        this.menuItem.addSubItem(6, R.drawable.msg_delete, LocaleController.getString(R.string.Delete)).setColors(-328966, -328966);
        this.menuItem.addSubItem(7, R.drawable.msg_cancel, LocaleController.getString(R.string.StopDownload)).setColors(-328966, -328966);
        this.menuItem.redrawPopup(-115203550);
        this.menuItem.hideSubItem(21);
        this.menuItem.hideSubItem(22);
        setMenuItemIcon(false, true);
        this.menuItem.setPopupItemsSelectorColor(268435455);
        this.menuItem.setSubMenuDelegate(new ActionBarMenuItem.ActionBarSubMenuItemDelegate() { // from class: org.telegram.ui.PhotoViewer.17
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarSubMenuItemDelegate
            public void onHideSubMenu() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                    PhotoViewer.this.scheduleActionBarHide();
                }
            }

            @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarSubMenuItemDelegate
            public void onShowSubMenu() {
                if (PhotoViewer.this.videoPlayerControlVisible && PhotoViewer.this.isPlaying) {
                    AndroidUtilities.cancelRunOnUIThread(PhotoViewer.this.hideActionBarRunnable);
                }
            }
        });
        FrameLayout frameLayout = new FrameLayout(this.activityContext) { // from class: org.telegram.ui.PhotoViewer.18
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
            }
        };
        this.bottomLayout = frameLayout;
        frameLayout.setBackgroundColor(2130706432);
        this.containerView.addView(this.bottomLayout, LayoutHelper.createFrame(-1, 48, 83));
        View view = new View(this.activityContext);
        this.navigationBar = view;
        view.setBackgroundColor(this.sendPhotoType == 11 ? -16777216 : 2130706432);
        this.windowView.addView(this.navigationBar, LayoutHelper.createFrame(-1.0f, this.navigationBarHeight / AndroidUtilities.density, 87));
        this.pressedDrawable[0] = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, new int[]{838860800, 0});
        this.pressedDrawable[0].setShape(0);
        this.pressedDrawable[1] = new GradientDrawable(GradientDrawable.Orientation.RIGHT_LEFT, new int[]{838860800, 0});
        this.pressedDrawable[1].setShape(0);
        GroupedPhotosListView groupedPhotosListView = new GroupedPhotosListView(this.activityContext, AndroidUtilities.dp(10.0f));
        this.groupedPhotosListView = groupedPhotosListView;
        this.containerView.addView(groupedPhotosListView, LayoutHelper.createFrame(-1, 68, 83));
        this.groupedPhotosListView.setDelegate(new GroupedPhotosListView.GroupedPhotosListViewDelegate() { // from class: org.telegram.ui.PhotoViewer.19
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public boolean forceAll() {
                return PhotoViewer.this.placeProvider != null && PhotoViewer.this.placeProvider.forceAllInGroup();
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public long getAvatarsDialogId() {
                return PhotoViewer.this.avatarsDialogId;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getCurrentAccount() {
                return PhotoViewer.this.currentAccount;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getCurrentIndex() {
                return PhotoViewer.this.currentIndex;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public ArrayList getImagesArr() {
                return PhotoViewer.this.imagesArr;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public ArrayList getImagesArrLocations() {
                return PhotoViewer.this.imagesArrLocations;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public List getPageBlockArr() {
                if (PhotoViewer.this.pageBlocksAdapter != null) {
                    return PhotoViewer.this.pageBlocksAdapter.getAll();
                }
                return null;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public Object getParentObject() {
                if (PhotoViewer.this.pageBlocksAdapter != null) {
                    return PhotoViewer.this.pageBlocksAdapter.getParentObject();
                }
                return null;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public int getSlideshowMessageId() {
                return PhotoViewer.this.slideshowMessageId;
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void onShowAnimationStart() {
                PhotoViewer.this.containerView.requestLayout();
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void onStopScrolling() {
                PhotoViewer photoViewer = PhotoViewer.this;
                if (photoViewer.shouldMessageObjectAutoPlayed(photoViewer.currentMessageObject)) {
                    PhotoViewer.this.playerAutoStarted = true;
                    PhotoViewer.this.onActionClick(true);
                    PhotoViewer.this.checkProgress(0, false, true);
                }
            }

            @Override // org.telegram.ui.Components.GroupedPhotosListView.GroupedPhotosListViewDelegate
            public void setCurrentIndex(int i5) {
                PhotoViewer.this.currentIndex = -1;
                if (PhotoViewer.this.currentThumb != null) {
                    PhotoViewer.this.currentThumb.release();
                    PhotoViewer.this.currentThumb = null;
                }
                PhotoViewer.this.dontAutoPlay = true;
                PhotoViewer.this.setImageIndex(i5);
                PhotoViewer.this.dontAutoPlay = false;
            }
        });
        for (int i5 = 0; i5 < 3; i5++) {
            this.fullscreenButton[i5] = new ImageView(this.parentActivity);
            this.fullscreenButton[i5].setImageResource(R.drawable.msg_maxvideo);
            this.fullscreenButton[i5].setContentDescription(LocaleController.getString("AccSwitchToFullscreen", R.string.AccSwitchToFullscreen));
            this.fullscreenButton[i5].setScaleType(ImageView.ScaleType.CENTER);
            this.fullscreenButton[i5].setBackground(Theme.createSelectorDrawable(1090519039));
            this.fullscreenButton[i5].setVisibility(4);
            this.fullscreenButton[i5].setAlpha(1.0f);
            this.containerView.addView(this.fullscreenButton[i5], LayoutHelper.createFrame(48, 48.0f));
            this.fullscreenButton[i5].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda68
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    PhotoViewer.this.lambda$setParentActivity$12(view2);
                }
            });
        }
        this.textSelectionHelper = new TextSelectionHelper.SimpleTextSelectionHelper(null, new DarkThemeResourceProvider()) { // from class: org.telegram.ui.PhotoViewer.20
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Cells.TextSelectionHelper
            public int getParentBottomPadding() {
                return 0;
            }
        };
        CaptionTextViewSwitcher captionTextViewSwitcher = new CaptionTextViewSwitcher(this.containerView.getContext());
        this.captionTextViewSwitcher = captionTextViewSwitcher;
        captionTextViewSwitcher.setFactory(new ViewSwitcher.ViewFactory() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda33
            @Override // android.widget.ViewSwitcher.ViewFactory
            public final View makeView() {
                View lambda$setParentActivity$13;
                lambda$setParentActivity$13 = PhotoViewer.this.lambda$setParentActivity$13();
                return lambda$setParentActivity$13;
            }
        });
        this.captionTextViewSwitcher.setVisibility(4);
        setCaptionHwLayerEnabled(true);
        for (int i6 = 0; i6 < 3; i6++) {
            this.photoProgressViews[i6] = new PhotoProgressView(this.containerView) { // from class: org.telegram.ui.PhotoViewer.21
                {
                    PhotoViewer.this = this;
                }

                @Override // org.telegram.ui.PhotoViewer.PhotoProgressView
                protected void onBackgroundStateUpdated(int i7) {
                    if (this == PhotoViewer.this.photoProgressViews[0]) {
                        PhotoViewer.this.updateAccessibilityOverlayVisibility();
                    }
                }

                @Override // org.telegram.ui.PhotoViewer.PhotoProgressView
                protected void onVisibilityChanged(boolean z) {
                    if (this == PhotoViewer.this.photoProgressViews[0]) {
                        PhotoViewer.this.updateAccessibilityOverlayVisibility();
                    }
                }
            };
            this.photoProgressViews[i6].setBackgroundState(0, false, true);
        }
        RadialProgressView radialProgressView = new RadialProgressView(this.activityContext, resourcesProvider) { // from class: org.telegram.ui.PhotoViewer.22
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void invalidate() {
                super.invalidate();
                if (PhotoViewer.this.containerView != null) {
                    PhotoViewer.this.containerView.invalidate();
                }
            }

            @Override // org.telegram.ui.Components.RadialProgressView, android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                if (PhotoViewer.this.containerView != null) {
                    PhotoViewer.this.containerView.invalidate();
                }
            }
        };
        this.miniProgressView = radialProgressView;
        radialProgressView.setUseSelfAlpha(true);
        this.miniProgressView.setProgressColor(-1);
        this.miniProgressView.setSize(AndroidUtilities.dp(54.0f));
        RadialProgressView radialProgressView2 = this.miniProgressView;
        int i7 = R.drawable.circle_big;
        radialProgressView2.setBackgroundResource(i7);
        this.miniProgressView.setVisibility(4);
        this.miniProgressView.setAlpha(0.0f);
        this.containerView.addView(this.miniProgressView, LayoutHelper.createFrame(64, 64, 17));
        createVideoControlsInterface();
        RadialProgressView radialProgressView3 = new RadialProgressView(this.parentActivity, resourcesProvider);
        this.progressView = radialProgressView3;
        radialProgressView3.setProgressColor(-1);
        this.progressView.setBackgroundResource(i7);
        this.progressView.setVisibility(4);
        this.containerView.addView(this.progressView, LayoutHelper.createFrame(54, 54, 17));
        PickerBottomLayoutViewer pickerBottomLayoutViewer = new PickerBottomLayoutViewer(this.parentActivity);
        this.qualityPicker = pickerBottomLayoutViewer;
        pickerBottomLayoutViewer.setBackgroundColor(2130706432);
        this.qualityPicker.updateSelectedCount(0, false);
        this.qualityPicker.setTranslationY(AndroidUtilities.dp(120.0f));
        this.qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
        TextView textView = this.qualityPicker.doneButton;
        int i8 = Theme.key_chat_editMediaButton;
        textView.setTextColor(getThemedColor(i8));
        this.containerView.addView(this.qualityPicker, LayoutHelper.createFrame(-1, 48, 83));
        this.qualityPicker.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda34
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$14(view2);
            }
        });
        this.qualityPicker.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda35
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$15(view2);
            }
        });
        VideoForwardDrawable videoForwardDrawable = new VideoForwardDrawable(false);
        this.videoForwardDrawable = videoForwardDrawable;
        videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.PhotoViewer.23
            {
                PhotoViewer.this = this;
            }

            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
            public void invalidate() {
                PhotoViewer.this.containerView.invalidate();
            }

            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
            public void onAnimationEnd() {
            }
        });
        QualityChooseView qualityChooseView = new QualityChooseView(this.parentActivity);
        this.qualityChooseView = qualityChooseView;
        qualityChooseView.setTranslationY(AndroidUtilities.dp(120.0f));
        this.qualityChooseView.setVisibility(4);
        this.qualityChooseView.setBackgroundColor(2130706432);
        this.containerView.addView(this.qualityChooseView, LayoutHelper.createFrame(-1, 70.0f, 83, 0.0f, 0.0f, 0.0f, 48.0f));
        new Paint().setColor(2130706432);
        FrameLayout frameLayout2 = new FrameLayout(this.activityContext) { // from class: org.telegram.ui.PhotoViewer.24
            private final Paint bgPaint = new Paint(3);
            private final LinearGradient bgGradient = new LinearGradient(0.0f, 0.0f, 0.0f, 16.0f, new int[]{0, 2130706432}, new float[]{0.0f, 1.0f}, Shader.TileMode.CLAMP);
            private final Matrix bgMatrix = new Matrix();

            {
                PhotoViewer.this = this;
            }

            @Override // android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                if (!PhotoViewer.this.fancyShadows) {
                    int measuredHeight = PhotoViewer.this.doneButtonFullWidth.getVisibility() == 0 ? getMeasuredHeight() - AndroidUtilities.dp(48.0f) : 0;
                    if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == -1) {
                        this.bgMatrix.reset();
                        this.bgMatrix.postTranslate(0.0f, measuredHeight);
                        this.bgMatrix.postScale(1.0f, Math.min(AndroidUtilities.dp(40.0f), getMeasuredHeight() - measuredHeight) / 16.0f);
                        this.bgGradient.setLocalMatrix(this.bgMatrix);
                        this.bgPaint.setShader(this.bgGradient);
                    } else {
                        this.bgPaint.setShader(null);
                        this.bgPaint.setColor(2130706432);
                    }
                    canvas.drawRect(0.0f, measuredHeight, getMeasuredWidth(), getMeasuredHeight(), this.bgPaint);
                }
                super.dispatchDraw(canvas);
            }

            @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
            protected void onLayout(boolean z, int i9, int i10, int i11, int i12) {
                super.onLayout(z, i9, i10, i11, i12);
                if (PhotoViewer.this.itemsLayout.getVisibility() != 8) {
                    int dp = (((i11 - i9) - (PhotoViewer.this.pickerViewSendButton.getVisibility() == 0 ? AndroidUtilities.dp(70.0f) : 0)) - PhotoViewer.this.itemsLayout.getMeasuredWidth()) / 2;
                    PhotoViewer.this.itemsLayout.layout(dp, PhotoViewer.this.itemsLayout.getTop(), PhotoViewer.this.itemsLayout.getMeasuredWidth() + dp, PhotoViewer.this.itemsLayout.getTop() + PhotoViewer.this.itemsLayout.getMeasuredHeight());
                }
            }

            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i9, int i10) {
                ((FrameLayout.LayoutParams) PhotoViewer.this.itemsLayout.getLayoutParams()).rightMargin = PhotoViewer.this.pickerViewSendButton.getVisibility() == 0 ? AndroidUtilities.dp(70.0f) : 0;
                super.onMeasure(i9, i10);
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                if (PhotoViewer.this.videoTimelineViewContainer != null && PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 8) {
                    PhotoViewer.this.videoTimelineViewContainer.setAlpha(f);
                }
                if (PhotoViewer.this.captionEdit == null || PhotoViewer.this.captionEdit.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.captionEdit.setAlpha(f);
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                super.setTranslationY(f);
                if (PhotoViewer.this.videoTimelineViewContainer != null && PhotoViewer.this.videoTimelineViewContainer.getVisibility() != 8) {
                    PhotoViewer.this.videoTimelineViewContainer.setTranslationY(f - Math.max(0, PhotoViewer.this.captionEdit.getEditTextHeight() - AndroidUtilities.dp(46.0f)));
                }
                if (PhotoViewer.this.captionEditContainer != null) {
                    PhotoViewer.this.captionEditContainer.setTranslationY(f);
                }
                if (PhotoViewer.this.videoAvatarTooltip == null || PhotoViewer.this.videoAvatarTooltip.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.videoAvatarTooltip.setTranslationY(f);
            }

            @Override // android.view.View
            public void setVisibility(int i9) {
                super.setVisibility(i9);
                if (PhotoViewer.this.videoTimelineViewContainer == null || PhotoViewer.this.videoTimelineViewContainer.getVisibility() == 8) {
                    return;
                }
                PhotoViewer.this.videoTimelineViewContainer.setVisibility(i9 == 0 ? 0 : 4);
            }
        };
        this.pickerView = frameLayout2;
        this.containerView.addView(frameLayout2, LayoutHelper.createFrame(-1, -2, 83));
        TextView textView2 = new TextView(this.containerView.getContext());
        this.docNameTextView = textView2;
        textView2.setTextSize(1, 15.0f);
        this.docNameTextView.setTypeface(AndroidUtilities.bold());
        this.docNameTextView.setSingleLine(true);
        this.docNameTextView.setMaxLines(1);
        TextView textView3 = this.docNameTextView;
        TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
        textView3.setEllipsize(truncateAt);
        this.docNameTextView.setTextColor(-1);
        this.docNameTextView.setGravity(3);
        this.pickerView.addView(this.docNameTextView, LayoutHelper.createFrame(-1, -2.0f, 51, 20.0f, 23.0f, 84.0f, 0.0f));
        TextView textView4 = new TextView(this.containerView.getContext());
        this.docInfoTextView = textView4;
        textView4.setTextSize(1, 14.0f);
        this.docInfoTextView.setSingleLine(true);
        this.docInfoTextView.setMaxLines(1);
        this.docInfoTextView.setEllipsize(truncateAt);
        this.docInfoTextView.setTextColor(-1);
        this.docInfoTextView.setGravity(3);
        this.pickerView.addView(this.docInfoTextView, LayoutHelper.createFrame(-1, -2.0f, 51, 20.0f, 46.0f, 84.0f, 0.0f));
        TextView textView5 = new TextView(this.containerView.getContext());
        this.doneButtonFullWidth = textView5;
        int i9 = Theme.key_featuredStickers_addButton;
        textView5.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(i9), 6.0f));
        TextView textView6 = this.doneButtonFullWidth;
        int i10 = Theme.key_featuredStickers_buttonText;
        textView6.setTextColor(getThemedColor(i10));
        this.doneButtonFullWidth.setEllipsize(truncateAt);
        this.doneButtonFullWidth.setGravity(17);
        this.doneButtonFullWidth.setLines(1);
        this.doneButtonFullWidth.setSingleLine(true);
        this.doneButtonFullWidth.setText(LocaleController.getString("SetAsMyPhoto", R.string.SetAsMyPhoto));
        this.doneButtonFullWidth.setTextSize(1, 15.0f);
        this.doneButtonFullWidth.setTypeface(AndroidUtilities.bold());
        this.doneButtonFullWidth.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda36
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$16(view2);
            }
        });
        this.doneButtonFullWidth.setVisibility(8);
        this.pickerView.addView(this.doneButtonFullWidth, LayoutHelper.createFrame(-1, 48.0f, 51, 20.0f, 0.0f, 20.0f, 64.0f));
        VideoTimelinePlayView videoTimelinePlayView = new VideoTimelinePlayView(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.25
            private final BlurringShader.StoryBlurDrawer blur;
            private final Path path = new Path();

            {
                PhotoViewer.this = this;
                this.blur = new BlurringShader.StoryBlurDrawer(this.blurManager, this, 0);
            }

            @Override // org.telegram.ui.Components.VideoTimelinePlayView
            protected boolean customBlur() {
                return true;
            }

            @Override // org.telegram.ui.Components.VideoTimelinePlayView
            protected void drawBlur(Canvas canvas, RectF rectF) {
                canvas.save();
                canvas.clipRect(rectF);
                canvas.translate((-getX()) - PhotoViewer.this.videoTimelineViewContainer.getX(), (-getY()) - PhotoViewer.this.videoTimelineViewContainer.getY());
                PhotoViewer.this.drawCaptionBlur(canvas, this.blur, -14803426, AndroidUtilities.DARK_STATUS_BAR_OVERLAY, false, true, false);
                canvas.restore();
            }

            @Override // android.view.View
            public void invalidate() {
                if (SharedConfig.photoViewerBlur && (PhotoViewer.this.animationInProgress == 1 || PhotoViewer.this.animationInProgress == 2 || PhotoViewer.this.animationInProgress == 3)) {
                    return;
                }
                super.invalidate();
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                if (getTranslationY() != f) {
                    super.setTranslationY(f);
                    PhotoViewer.this.containerView.invalidate();
                }
            }
        };
        this.videoTimelineView = videoTimelinePlayView;
        videoTimelinePlayView.setDelegate(new 26());
        FrameLayout frameLayout3 = new FrameLayout(this.parentActivity);
        this.videoTimelineViewContainer = frameLayout3;
        frameLayout3.setClipChildren(false);
        this.videoTimelineViewContainer.addView(this.videoTimelineView, LayoutHelper.createFrame(-1, 54, 83));
        showVideoTimeline(false, false);
        this.containerView.addView(this.videoTimelineViewContainer, LayoutHelper.createFrame(-1, 54.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        Context context = this.containerView.getContext();
        FrameLayout frameLayout4 = this.windowView;
        FrameLayoutDrawer frameLayoutDrawer2 = this.containerView;
        final Activity activity2 = parentActivity;
        CaptionPhotoViewer captionPhotoViewer2 = new CaptionPhotoViewer(context, frameLayout4, frameLayoutDrawer2, frameLayoutDrawer2, resourcesProvider, this.blurManager, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                PhotoViewer.this.applyCaption();
            }
        }) { // from class: org.telegram.ui.PhotoViewer.27
            private final Path path = new Path();

            {
                PhotoViewer.this = this;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            public boolean captionLimitToast() {
                if (PhotoViewer.this.limitBulletin == null || Bulletin.getVisibleBulletin() != PhotoViewer.this.limitBulletin) {
                    PhotoViewer photoViewer = PhotoViewer.this;
                    return photoViewer.showCaptionLimitBulletin(photoViewer.containerView);
                }
                return false;
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected boolean customBlur() {
                return true;
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected void drawBlur(BlurringShader.StoryBlurDrawer storyBlurDrawer, Canvas canvas, RectF rectF, float f, boolean z, float f2, float f3, boolean z2) {
                canvas.save();
                this.path.rewind();
                this.path.addRoundRect(rectF, f, f, Path.Direction.CW);
                canvas.clipPath(this.path);
                if (z2) {
                    canvas.translate(((-getX()) - PhotoViewer.this.captionEditContainer.getX()) + f2, ((-getY()) - PhotoViewer.this.captionEditContainer.getY()) + f3);
                } else {
                    canvas.translate(f2, f3);
                }
                PhotoViewer.this.drawCaptionBlur(canvas, storyBlurDrawer, z ? -8882056 : -14277082, z2 ? z ? 0 : AndroidUtilities.DARK_STATUS_BAR_OVERLAY : 1140850688, false, !z, !z && z2);
                canvas.restore();
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected boolean ignoreTouches(float f, float f2) {
                return (this.keyboardShown || PhotoViewer.this.currentEditMode == 0) ? false : true;
            }

            @Override // android.view.View
            public void invalidate() {
                if (SharedConfig.photoViewerBlur && (PhotoViewer.this.animationInProgress == 1 || PhotoViewer.this.animationInProgress == 2 || PhotoViewer.this.animationInProgress == 3)) {
                    return;
                }
                super.invalidate();
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // org.telegram.ui.Components.CaptionPhotoViewer, org.telegram.ui.Stories.recorder.CaptionContainerView
            public void onUpdateShowKeyboard(float f) {
                super.onUpdateShowKeyboard(f);
                float f2 = 1.0f - f;
                PhotoViewer.this.muteItem.setAlpha((PhotoViewer.this.muteItem.getTag() != null ? 1 : 0) * f2);
                PhotoViewer.this.videoTimelineViewContainer.setAlpha(f2 * (PhotoViewer.this.videoTimelineViewContainer.getTag() != null ? 1 : 0));
            }

            @Override // org.telegram.ui.Stories.recorder.CaptionContainerView
            protected void setupMentionContainer() {
                this.mentionContainer.getAdapter().setAllowStickers(false);
                this.mentionContainer.getAdapter().setAllowBots(false);
                this.mentionContainer.getAdapter().setAllowChats(false);
                this.mentionContainer.getAdapter().setSearchInDailogs(true);
                if (PhotoViewer.this.parentChatActivity != null) {
                    this.mentionContainer.getAdapter().setChatInfo(PhotoViewer.this.parentChatActivity.chatInfo);
                    this.mentionContainer.getAdapter().setNeedUsernames(PhotoViewer.this.parentChatActivity.currentChat != null);
                } else {
                    this.mentionContainer.getAdapter().setChatInfo(null);
                    this.mentionContainer.getAdapter().setNeedUsernames(false);
                }
                this.mentionContainer.getAdapter().setNeedBotContext(false);
            }
        };
        this.captionEdit = captionPhotoViewer2;
        captionPhotoViewer2.setOnTimerChange(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda38
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$17((Integer) obj);
            }
        });
        this.captionEdit.setAccount(this.currentAccount);
        this.captionEdit.setOnHeightUpdate(new Utilities.Callback() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda39
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                PhotoViewer.this.lambda$setParentActivity$18((Integer) obj);
            }
        });
        this.captionEdit.setOnAddPhotoClick(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda40
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$19(view2);
            }
        });
        StickerMakerBackgroundView stickerMakerBackgroundView = new StickerMakerBackgroundView(this.activityContext) { // from class: org.telegram.ui.PhotoViewer.28
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setAlpha(float f) {
                super.setAlpha(f);
                PhotoViewer.this.windowView.invalidate();
            }
        };
        this.stickerMakerBackgroundView = stickerMakerBackgroundView;
        stickerMakerBackgroundView.setVisibility(8);
        this.containerView.addView(this.stickerMakerBackgroundView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
        StickerMakerView stickerMakerView2 = new StickerMakerView(this.activityContext, resourcesProvider);
        this.stickerMakerView = stickerMakerView2;
        stickerMakerView2.setCurrentAccount(this.currentAccount);
        FrameLayoutDrawer frameLayoutDrawer3 = this.containerView;
        frameLayoutDrawer3.addView(this.stickerMakerView, frameLayoutDrawer3.indexOfChild(this.actionBar) - 1, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
        BlurButton blurButton = new BlurButton();
        this.cutOutBtn = blurButton;
        blurButton.setRad(18);
        this.cutOutBtn.wrapContentDynamic();
        this.stickerMakerView.setStickerCutOutBtn(this.cutOutBtn);
        this.cutOutBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda41
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$25(view2);
            }
        });
        this.cutOutBtn.setCutOutState(false);
        this.containerView.addView(this.cutOutBtn, LayoutHelper.createFrame(-1, 36, 17));
        LinearLayout linearLayout = new LinearLayout(this.parentActivity);
        this.btnLayout = linearLayout;
        linearLayout.setOrientation(0);
        BlurButton blurButton2 = new BlurButton();
        this.eraseBtn = blurButton2;
        blurButton2.wrapContent();
        this.eraseBtn.setRad(18);
        this.eraseBtn.setEraseState(false);
        this.eraseBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda42
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$26(view2);
            }
        });
        this.btnLayout.addView(this.eraseBtn, LayoutHelper.createLinear(-2, 36));
        this.btnLayout.addView(new Space(this.parentActivity), LayoutHelper.createLinear(12, -1));
        BlurButton blurButton3 = new BlurButton();
        this.restoreBtn = blurButton3;
        blurButton3.wrapContent();
        this.restoreBtn.setRad(18);
        this.restoreBtn.setRestoreState(false);
        this.restoreBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda43
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$27(view2);
            }
        });
        this.btnLayout.addView(this.restoreBtn, LayoutHelper.createLinear(-2, 36));
        this.containerView.addView(this.btnLayout, LayoutHelper.createFrame(-2, 36, 17));
        BlurButton blurButton4 = new BlurButton();
        this.undoBtn = blurButton4;
        blurButton4.setUndoState(false);
        this.undoBtn.setRad(18);
        this.undoBtn.wrapContent();
        this.undoBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda44
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$28(view2);
            }
        });
        this.containerView.addView(this.undoBtn, LayoutHelper.createFrame(-2, 36, 17));
        BlurButton blurButton5 = new BlurButton();
        this.outlineBtn = blurButton5;
        blurButton5.setOutlineState(false);
        this.outlineBtn.setRad(18);
        this.outlineBtn.wrapContent();
        this.outlineBtn.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda45
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$29(view2);
            }
        });
        this.containerView.addView(this.outlineBtn, LayoutHelper.createFrame(-2, 36, 17));
        showEditCaption(false, false);
        showStickerMode(false, false);
        FrameLayout frameLayout5 = new FrameLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.29
            {
                PhotoViewer.this = this;
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                super.setTranslationY(f);
                PhotoViewer.this.invalidateBlur();
            }
        };
        this.captionEditContainer = frameLayout5;
        frameLayout5.addView(this.captionEdit, LayoutHelper.createFrame(-1, -1, 83));
        this.containerView.addView(this.captionEditContainer, LayoutHelper.createFrame(-1, -1.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        TextView textView7 = new TextView(this.parentActivity);
        this.videoAvatarTooltip = textView7;
        textView7.setSingleLine(true);
        this.videoAvatarTooltip.setVisibility(8);
        this.videoAvatarTooltip.setText(LocaleController.getString("ChooseCover", R.string.ChooseCover));
        this.videoAvatarTooltip.setGravity(1);
        this.videoAvatarTooltip.setTextSize(1, 14.0f);
        this.videoAvatarTooltip.setTextColor(-7566196);
        this.containerView.addView(this.videoAvatarTooltip, LayoutHelper.createFrame(-1, -2.0f, 83, 0.0f, 8.0f, 0.0f, 0.0f));
        ImageView imageView = new ImageView(this.parentActivity);
        this.pickerViewSendButton = imageView;
        ImageView.ScaleType scaleType = ImageView.ScaleType.CENTER;
        imageView.setScaleType(scaleType);
        Drawable createSimpleSelectorCircleDrawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(48.0f), getThemedColor(i8), getThemedColor(Build.VERSION.SDK_INT >= 21 ? Theme.key_dialogFloatingButtonPressed : i8));
        this.pickerViewSendDrawable = createSimpleSelectorCircleDrawable;
        this.pickerViewSendButton.setBackgroundDrawable(createSimpleSelectorCircleDrawable);
        this.pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
        this.pickerViewSendButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogFloatingIcon), PorterDuff.Mode.MULTIPLY));
        this.containerView.addView(this.pickerViewSendButton, LayoutHelper.createFrame(48, 48.0f, 85, 0.0f, 0.0f, 14.0f, 2.33f));
        this.pickerViewSendButton.setContentDescription(LocaleController.getString("Send", R.string.Send));
        ScaleStateListAnimator.apply(this.pickerViewSendButton);
        this.pickerViewSendButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda46
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$30(view2);
            }
        });
        this.pickerViewSendButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda47
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view2) {
                boolean lambda$setParentActivity$34;
                lambda$setParentActivity$34 = PhotoViewer.this.lambda$setParentActivity$34(resourcesProvider, view2);
                return lambda$setParentActivity$34;
            }
        });
        LinearLayout linearLayout2 = new LinearLayout(this.parentActivity) { // from class: org.telegram.ui.PhotoViewer.30
            boolean ignoreLayout;

            {
                PhotoViewer.this = this;
            }

            @Override // android.widget.LinearLayout, android.view.View
            protected void onMeasure(int i11, int i12) {
                int childCount = getChildCount();
                int i13 = 0;
                for (int i14 = 0; i14 < childCount; i14++) {
                    if (getChildAt(i14).getVisibility() == 0) {
                        i13++;
                    }
                }
                int size = View.MeasureSpec.getSize(i11);
                int size2 = View.MeasureSpec.getSize(i12);
                if (i13 != 0) {
                    int min = Math.min(AndroidUtilities.dp(70.0f), size / i13);
                    if (PhotoViewer.this.compressItem.getVisibility() == 0) {
                        this.ignoreLayout = true;
                        int max = Math.max(0, (min - AndroidUtilities.dp(PhotoViewer.this.selectedCompression < 2 ? 48 : 64)) / 2);
                        PhotoViewer.this.compressItem.setPadding(max, 0, max, 0);
                        this.ignoreLayout = false;
                    }
                    for (int i15 = 0; i15 < childCount; i15++) {
                        View childAt = getChildAt(i15);
                        if (childAt.getVisibility() != 8) {
                            childAt.measure(View.MeasureSpec.makeMeasureSpec(min, 1073741824), View.MeasureSpec.makeMeasureSpec(size2, 1073741824));
                        }
                    }
                    size = min * i13;
                }
                setMeasuredDimension(size, size2);
            }
        };
        this.itemsLayout = linearLayout2;
        linearLayout2.setOrientation(0);
        this.pickerView.addView(this.itemsLayout, LayoutHelper.createFrame(-2, 48.0f, 81, 0.0f, 0.0f, 70.0f, 0.0f));
        ImageView imageView2 = new ImageView(this.parentActivity);
        this.cropItem = imageView2;
        imageView2.setScaleType(scaleType);
        this.cropItem.setImageResource(R.drawable.media_crop);
        this.cropItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.cropItem, LayoutHelper.createLinear(48, 48));
        this.cropItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda48
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$35(view2);
            }
        });
        this.cropItem.setContentDescription(LocaleController.getString("CropImage", R.string.CropImage));
        ImageView imageView3 = new ImageView(this.parentActivity);
        this.rotateItem = imageView3;
        imageView3.setScaleType(scaleType);
        this.rotateItem.setImageResource(R.drawable.msg_photo_rotate);
        this.rotateItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.rotateItem, LayoutHelper.createLinear(48, 48));
        this.rotateItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda49
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$36(view2);
            }
        });
        this.rotateItem.setContentDescription(LocaleController.getString("AccDescrRotate", R.string.AccDescrRotate));
        ImageView imageView4 = new ImageView(this.parentActivity);
        this.mirrorItem = imageView4;
        imageView4.setScaleType(scaleType);
        this.mirrorItem.setImageResource(R.drawable.media_flip);
        this.mirrorItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.mirrorItem, LayoutHelper.createLinear(48, 48));
        this.mirrorItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda50
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$37(view2);
            }
        });
        this.mirrorItem.setContentDescription(LocaleController.getString("AccDescrMirror", R.string.AccDescrMirror));
        ImageView imageView5 = new ImageView(this.parentActivity);
        this.paintItem = imageView5;
        imageView5.setScaleType(scaleType);
        this.paintItem.setImageResource(R.drawable.media_draw);
        this.paintItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.paintItem, LayoutHelper.createLinear(48, 48));
        this.paintItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda51
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$38(view2);
            }
        });
        this.paintItem.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
        ImageView imageView6 = new ImageView(this.parentActivity);
        this.muteItem = imageView6;
        imageView6.setScaleType(scaleType);
        this.muteItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.containerView.addView(this.muteItem, LayoutHelper.createFrame(48, 48.0f, 83, 16.0f, 0.0f, 0.0f, 0.0f));
        this.muteItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda52
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$39(view2);
            }
        });
        VideoCompressButton videoCompressButton = new VideoCompressButton(this.parentActivity);
        this.compressItem = videoCompressButton;
        videoCompressButton.setTag(1);
        this.compressItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.selectedCompression = selectCompression();
        this.compressItem.setState(this.videoConvertSupported && this.compressionsCount > 1, this.muteVideo, Math.min(this.resultWidth, this.resultHeight));
        this.compressItem.setContentDescription(LocaleController.getString("AccDescrVideoQuality", R.string.AccDescrVideoQuality));
        this.itemsLayout.addView(this.compressItem, LayoutHelper.createLinear(48, 48));
        this.compressItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda53
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$40(activity2, view2);
            }
        });
        ImageView imageView7 = new ImageView(this.parentActivity);
        this.tuneItem = imageView7;
        imageView7.setScaleType(scaleType);
        this.tuneItem.setImageResource(R.drawable.media_settings);
        this.tuneItem.setBackgroundDrawable(Theme.createSelectorDrawable(1090519039));
        this.itemsLayout.addView(this.tuneItem, LayoutHelper.createLinear(48, 48));
        this.tuneItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda54
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$41(view2);
            }
        });
        this.tuneItem.setContentDescription(LocaleController.getString("AccDescrPhotoAdjust", R.string.AccDescrPhotoAdjust));
        PickerBottomLayoutViewer pickerBottomLayoutViewer2 = new PickerBottomLayoutViewer(this.activityContext);
        this.editorDoneLayout = pickerBottomLayoutViewer2;
        pickerBottomLayoutViewer2.setBackgroundColor(-872415232);
        this.editorDoneLayout.updateSelectedCount(0, false);
        this.editorDoneLayout.setVisibility(8);
        this.containerView.addView(this.editorDoneLayout, LayoutHelper.createFrame(-1, 48, 83));
        this.editorDoneLayout.cancelButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda55
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$43(view2);
            }
        });
        this.editorDoneLayout.doneButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda56
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$44(view2);
            }
        });
        TextView textView8 = new TextView(this.activityContext);
        this.resetButton = textView8;
        textView8.setClickable(false);
        this.resetButton.setVisibility(8);
        this.resetButton.setTextSize(1, 14.0f);
        this.resetButton.setTextColor(-1);
        this.resetButton.setGravity(17);
        this.resetButton.setBackgroundDrawable(Theme.createSelectorDrawable(-12763843, 0));
        this.resetButton.setPadding(AndroidUtilities.dp(20.0f), 0, AndroidUtilities.dp(20.0f), 0);
        this.resetButton.setText(LocaleController.getString("Reset", R.string.CropReset).toUpperCase());
        this.resetButton.setTypeface(AndroidUtilities.bold());
        this.editorDoneLayout.addView(this.resetButton, LayoutHelper.createFrame(-2, -1, 49));
        this.resetButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda57
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$46(view2);
            }
        });
        GestureDetector2 gestureDetector2 = new GestureDetector2(this.containerView.getContext(), this);
        this.gestureDetector = gestureDetector2;
        gestureDetector2.setIsLongpressEnabled(false);
        setDoubleTapEnabled(true);
        ImageReceiver.ImageReceiverDelegate imageReceiverDelegate = new ImageReceiver.ImageReceiverDelegate() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda58
            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public final void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
                PhotoViewer.this.lambda$setParentActivity$47(imageReceiver, z, z2, z3);
            }

            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public /* synthetic */ void didSetImageBitmap(int i11, String str, Drawable drawable) {
                ImageReceiver.ImageReceiverDelegate.-CC.$default$didSetImageBitmap(this, i11, str, drawable);
            }

            @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
            public /* synthetic */ void onAnimationReady(ImageReceiver imageReceiver) {
                ImageReceiver.ImageReceiverDelegate.-CC.$default$onAnimationReady(this, imageReceiver);
            }
        };
        this.centerImage.setParentView(this.containerView);
        this.centerImage.setCrossfadeAlpha((byte) 2);
        this.centerImage.setInvalidateAll(true);
        this.centerImage.setDelegate(imageReceiverDelegate);
        this.leftImage.setParentView(this.containerView);
        this.leftImage.setCrossfadeAlpha((byte) 2);
        this.leftImage.setInvalidateAll(true);
        this.leftImage.setDelegate(imageReceiverDelegate);
        this.rightImage.setParentView(this.containerView);
        this.rightImage.setCrossfadeAlpha((byte) 2);
        this.rightImage.setInvalidateAll(true);
        this.rightImage.setDelegate(imageReceiverDelegate);
        int rotation = ((WindowManager) ApplicationLoader.applicationContext.getSystemService("window")).getDefaultDisplay().getRotation();
        CheckBox checkBox = new CheckBox(this.containerView.getContext(), R.drawable.selectphoto_large);
        this.checkImageView = checkBox;
        checkBox.setDrawBackground(true);
        this.checkImageView.setHasBorder(true);
        this.checkImageView.setSize(34);
        this.checkImageView.setCheckOffset(AndroidUtilities.dp(1.0f));
        this.checkImageView.setColor(getThemedColor(i8), -1);
        this.checkImageView.setVisibility(8);
        this.containerView.addView(this.checkImageView, LayoutHelper.createFrame(34, 34.0f, 53, 0.0f, (rotation == 3 || rotation == 1) ? 61.0f : 71.0f, 11.0f, 0.0f));
        if (isStatusBarVisible()) {
            ((FrameLayout.LayoutParams) this.checkImageView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
        }
        this.checkImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda59
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$48(view2);
            }
        });
        CounterView counterView = new CounterView(this.parentActivity);
        this.photosCounterView = counterView;
        this.containerView.addView(counterView, LayoutHelper.createFrame(40, 40.0f, 53, 0.0f, (rotation == 3 || rotation == 1) ? 58.0f : 68.0f, 64.0f, 0.0f));
        if (isStatusBarVisible()) {
            ((FrameLayout.LayoutParams) this.photosCounterView.getLayoutParams()).topMargin += AndroidUtilities.statusBarHeight;
        }
        this.photosCounterView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda60
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                PhotoViewer.this.lambda$setParentActivity$49(view2);
            }
        });
        SelectedPhotosListView selectedPhotosListView = new SelectedPhotosListView(this.parentActivity);
        this.selectedPhotosListView = selectedPhotosListView;
        selectedPhotosListView.setVisibility(8);
        this.selectedPhotosListView.setAlpha(0.0f);
        this.selectedPhotosListView.setLayoutManager(new LinearLayoutManager(this.parentActivity, 0, true) { // from class: org.telegram.ui.PhotoViewer.31
            {
                PhotoViewer.this = this;
            }

            @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
            public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i11) {
                LinearSmoothScrollerEnd linearSmoothScrollerEnd = new LinearSmoothScrollerEnd(recyclerView.getContext()) { // from class: org.telegram.ui.PhotoViewer.31.1
                    {
                        31.this = this;
                    }

                    /* JADX INFO: Access modifiers changed from: protected */
                    @Override // androidx.recyclerview.widget.LinearSmoothScrollerEnd
                    public int calculateTimeForDeceleration(int i12) {
                        return Math.max((int) NotificationCenter.updateBotMenuButton, super.calculateTimeForDeceleration(i12));
                    }
                };
                linearSmoothScrollerEnd.setTargetPosition(i11);
                startSmoothScroll(linearSmoothScrollerEnd);
            }
        });
        SelectedPhotosListView selectedPhotosListView2 = this.selectedPhotosListView;
        ListAdapter listAdapter = new ListAdapter(this.parentActivity);
        this.selectedPhotosAdapter = listAdapter;
        selectedPhotosListView2.setAdapter(listAdapter);
        this.containerView.addView(this.selectedPhotosListView, LayoutHelper.createFrame(-1, 103, 51));
        this.selectedPhotosListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda61
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view2, int i11) {
                PhotoViewer.this.lambda$setParentActivity$50(view2, i11);
            }
        });
        UndoView undoView = new UndoView(this.activityContext, null, false, resourcesProvider);
        this.hintView = undoView;
        undoView.setAdditionalTranslationY(AndroidUtilities.dp(112.0f));
        this.hintView.setColors(-115203550, -1);
        this.containerView.addView(this.hintView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
        if (AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            View view2 = new View(this.activityContext);
            this.playButtonAccessibilityOverlay = view2;
            view2.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
            i = 1;
            this.playButtonAccessibilityOverlay.setFocusable(true);
            this.containerView.addView(this.playButtonAccessibilityOverlay, LayoutHelper.createFrame(64, 64, 17));
        } else {
            i = 1;
        }
        TextView textView9 = this.doneButtonFullWidth;
        int themedColor = getThemedColor(i9);
        float[] fArr = new float[i];
        fArr[0] = 6.0f;
        textView9.setBackground(Theme.AdaptiveRipple.filledRect(themedColor, fArr));
        this.doneButtonFullWidth.setTextColor(getThemedColor(i10));
        TextSelectionHelper.SimpleTextSelectionHelper simpleTextSelectionHelper = this.textSelectionHelper;
        simpleTextSelectionHelper.allowScrollPrentRelative = i;
        simpleTextSelectionHelper.useMovingOffset = false;
        TextSelectionHelper.TextSelectionOverlay overlayView = simpleTextSelectionHelper.getOverlayView(this.windowView.getContext());
        if (overlayView != null) {
            AndroidUtilities.removeFromParent(overlayView);
            this.containerView.addView(overlayView);
        }
        this.textSelectionHelper.setParentView(this.containerView);
        this.textSelectionHelper.setInvalidateParent();
    }

    public void setParentActivity(Activity activity, Theme.ResourcesProvider resourcesProvider) {
        setParentActivity(activity, null, resourcesProvider);
    }

    public void setParentActivity(BaseFragment baseFragment) {
        setParentActivity(baseFragment, (Theme.ResourcesProvider) null);
    }

    public void setParentActivity(BaseFragment baseFragment, Theme.ResourcesProvider resourcesProvider) {
        setParentActivity(null, baseFragment, resourcesProvider);
    }

    public void setParentAlert(ChatAttachAlert chatAttachAlert) {
        this.parentAlert = chatAttachAlert;
    }

    public void setParentChatActivity(ChatActivity chatActivity) {
        this.parentChatActivity = chatActivity;
    }

    public void setTitle(CharSequence charSequence) {
        PhotoViewerActionBarContainer photoViewerActionBarContainer = this.actionBarContainer;
        this.customTitle = charSequence;
        photoViewerActionBarContainer.setTitle(charSequence);
        toggleActionBar(true, false);
    }

    public void showAlertDialog(AlertDialog.Builder builder) {
        if (this.parentActivity == null) {
            return;
        }
        try {
            AlertDialog alertDialog = this.visibleDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
                this.visibleDialog = null;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        try {
            AlertDialog show = builder.show();
            this.visibleDialog = show;
            show.setCanceledOnTouchOutside(true);
            this.visibleDialog.setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda128
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    PhotoViewer.this.lambda$showAlertDialog$65(dialogInterface);
                }
            });
        } catch (Exception e2) {
            FileLog.e(e2);
        }
    }

    public boolean showCaptionLimitBulletin(FrameLayout frameLayout) {
        BaseFragment baseFragment = this.parentFragment;
        if ((baseFragment instanceof ChatActivity) && ChatObject.isChannelAndNotMegaGroup(((ChatActivity) baseFragment).getCurrentChat())) {
            this.limitBulletin = BulletinFactory.of(frameLayout, this.resourcesProvider).createCaptionLimitBulletin(MessagesController.getInstance(this.currentAccount).captionLengthLimitPremium, new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda86
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$showCaptionLimitBulletin$51();
                }
            }).setOnHideListener(new Runnable() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda87
                @Override // java.lang.Runnable
                public final void run() {
                    PhotoViewer.this.lambda$showCaptionLimitBulletin$52();
                }
            }).show();
            return true;
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:513:0x0097, code lost:
        if (r32.sendPhotoType == 11) goto L443;
     */
    /* JADX WARN: Removed duplicated region for block: B:603:0x0238  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x0253  */
    /* JADX WARN: Removed duplicated region for block: B:618:0x0282  */
    /* JADX WARN: Removed duplicated region for block: B:627:0x02a0  */
    /* JADX WARN: Removed duplicated region for block: B:653:0x0324  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x03c0  */
    /* JADX WARN: Removed duplicated region for block: B:778:0x07c8  */
    /* JADX WARN: Removed duplicated region for block: B:779:0x07ce  */
    /* JADX WARN: Removed duplicated region for block: B:783:0x07d7  */
    /* JADX WARN: Removed duplicated region for block: B:818:0x090b  */
    /* JADX WARN: Removed duplicated region for block: B:821:0x0921  */
    /* JADX WARN: Removed duplicated region for block: B:865:0x0a7e  */
    /* JADX WARN: Removed duplicated region for block: B:868:0x0a94  */
    /* JADX WARN: Removed duplicated region for block: B:904:0x0bc6  */
    /* JADX WARN: Removed duplicated region for block: B:907:0x0bdc  */
    /* JADX WARN: Removed duplicated region for block: B:911:0x0c03  */
    /* JADX WARN: Removed duplicated region for block: B:918:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void switchToEditMode(final int i) {
        ActionBar actionBar;
        int i2;
        ObjectAnimator ofFloat;
        AnimatorSet animatorSet;
        AnimatorListenerAdapter animatorListenerAdapter;
        ActionBar actionBar2;
        int i3;
        ObjectAnimator ofFloat2;
        ActionBar actionBar3;
        ObjectAnimator ofFloat3;
        String str;
        MediaController.SavedFilterState savedFilterState;
        int i4;
        Bitmap decodeFile;
        Bitmap bitmap;
        int i5;
        MediaController.CropState cropState;
        int i6;
        AnimatorSet animatorSet2;
        ActionBar actionBar4;
        int i7;
        FrameLayoutDrawer frameLayoutDrawer;
        float scale;
        MediaController.CropState cropState2;
        float min;
        float f;
        float f2;
        MediaController.CropState cropState3;
        int i8;
        LPhotoPaintView lPhotoPaintView;
        float additionalBottom;
        int dp;
        float f3;
        float f4;
        float f5;
        LPhotoPaintView lPhotoPaintView2;
        int i9;
        float f6;
        int dp2;
        LPhotoPaintView lPhotoPaintView3;
        float additionalBottom2;
        ValueAnimator ofFloat4;
        if (this.currentEditMode == i) {
            return;
        }
        if ((this.isCurrentVideo && this.photoProgressViews[0].backgroundState != 3 && !this.isCurrentVideo && (this.centerImage.getBitmap() == null || this.photoProgressViews[0].backgroundState != -1)) || this.changeModeAnimation != null || this.imageMoveAnimation != null || isCaptionOpen()) {
            return;
        }
        PhotoViewerProvider photoViewerProvider = this.placeProvider;
        if (photoViewerProvider != null && (this.currentEditMode == 0 || i == 0)) {
            photoViewerProvider.onEditModeChanged(i != 0);
        }
        this.windowView.setClipChildren(i == 2);
        int i10 = 2130706432;
        int color = this.navigationBar.getBackground() instanceof ColorDrawable ? ((ColorDrawable) this.navigationBar.getBackground()).getColor() : 2130706432;
        if (i == 1) {
            i10 = -872415232;
        } else {
            if (i != 3) {
                if (i == 0 && this.fancyShadows && this.savedState == null) {
                    i10 = this.sendPhotoType == 11 ? 1711276032 : 0;
                }
            }
            i10 = -16777216;
        }
        showEditCaption(this.editing && this.savedState == null && i == 0, true);
        showStickerMode((i == 0 || i == 4 || (i == 3 && this.stickerEmpty)) && this.sendPhotoType == 11, true);
        this.navigationBar.setVisibility(i != 2 ? 0 : 4);
        this.switchingToMode = i;
        if (this.currentEditMode == 0) {
            PhotoCountView photoCountView = this.countView;
            this.wasCountViewShown = photoCountView != null && photoCountView.isShown();
        }
        PhotoCountView photoCountView2 = this.countView;
        if (photoCountView2 != null) {
            photoCountView2.updateShow(i == 0 && this.wasCountViewShown, true);
        }
        if (i == 0) {
            Bitmap bitmap2 = this.centerImage.getBitmap();
            LPhotoPaintView lPhotoPaintView4 = this.photoPaintView;
            if (lPhotoPaintView4 != null) {
                lPhotoPaintView4.setDrawShadow(false);
            }
            if (this.currentEditMode == 4) {
                this.animationStartTime = System.currentTimeMillis();
                float f7 = this.translationY;
                this.savedTy = f7;
                this.animateToY = f7;
                float f8 = this.translationX;
                this.savedTx = f8;
                this.animateToX = f8;
                float f9 = this.rotate;
                this.savedRotation = f9;
                this.animateToRotate = f9;
                this.animateToMirror = this.mirror;
                float f10 = this.scale;
                this.savedScale = f10;
                this.animateToScale = f10;
            } else if (bitmap2 != null) {
                int bitmapWidth = this.centerImage.getBitmapWidth();
                int bitmapHeight = this.centerImage.getBitmapHeight();
                int i11 = this.currentEditMode;
                if (i11 == 3) {
                    if (this.sendPhotoType != 1) {
                        MediaController.CropState cropState4 = this.editState.cropState;
                        if (cropState4 != null) {
                            int i12 = cropState4.transformRotation;
                            if (i12 != 90 && i12 != 270) {
                                bitmapHeight = bitmapWidth;
                                bitmapWidth = bitmapHeight;
                            }
                            bitmapHeight = (int) (bitmapWidth * cropState4.cropPh);
                            bitmapWidth = (int) (bitmapHeight * cropState4.cropPw);
                        }
                    } else if (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270) {
                        bitmapHeight = bitmapWidth;
                        bitmapWidth = bitmapHeight;
                    }
                    float f11 = bitmapWidth;
                    float f12 = bitmapHeight;
                    f2 = Math.min(getContainerViewWidth(0) / f11, getContainerViewHeight(0) / f12);
                    f = Math.min(getContainerViewWidth(3) / f11, getContainerViewHeight(3) / f12);
                } else {
                    if (i11 == 1 || (cropState3 = this.editState.cropState) == null || !((i8 = cropState3.transformRotation) == 90 || i8 == 270)) {
                        if (this.sendPhotoType == 1 && (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270)) {
                            float f13 = bitmapHeight;
                            float containerViewWidth = getContainerViewWidth() / f13;
                            float f14 = bitmapWidth;
                            if (containerViewWidth * f14 > getContainerViewHeight()) {
                                containerViewWidth = getContainerViewHeight() / f14;
                            }
                            scale = 1.0f / ((((this.cropTransform.getScale() / this.cropTransform.getTrueCropScale()) * containerViewWidth) / Math.min(getContainerViewWidth() / f14, getContainerViewHeight() / f13)) / this.cropTransform.getMinScale());
                        }
                        cropState2 = this.editState.cropState;
                        if (cropState2 == null) {
                            int i13 = cropState2.transformRotation;
                            if (i13 != 90 && i13 != 270) {
                                bitmapHeight = bitmapWidth;
                                bitmapWidth = bitmapHeight;
                            }
                            bitmapHeight = (int) (bitmapWidth * cropState2.cropPh);
                            bitmapWidth = (int) (bitmapHeight * cropState2.cropPw);
                        } else if (this.sendPhotoType == 1 && (this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270)) {
                            bitmapHeight = bitmapWidth;
                            bitmapWidth = bitmapHeight;
                        }
                        float f15 = bitmapWidth;
                        float f16 = bitmapHeight;
                        float min2 = Math.min(getContainerViewWidth() / f15, getContainerViewHeight() / f16);
                        if (this.sendPhotoType != 1) {
                            min = getCropFillScale(this.cropTransform.getOrientation() == 90 || this.cropTransform.getOrientation() == 270);
                        } else {
                            min = Math.min(getContainerViewWidth(0) / f15, getContainerViewHeight(0) / f16);
                        }
                        float f17 = min;
                        f = min2;
                        f2 = f17;
                    } else {
                        float f18 = bitmapHeight;
                        float containerViewWidth2 = getContainerViewWidth() / f18;
                        float f19 = bitmapWidth;
                        if (containerViewWidth2 * f19 > getContainerViewHeight()) {
                            containerViewWidth2 = getContainerViewHeight() / f19;
                        }
                        scale = 1.0f / (containerViewWidth2 / Math.min(getContainerViewWidth() / f19, getContainerViewHeight() / f18));
                    }
                    this.scale = scale;
                    cropState2 = this.editState.cropState;
                    if (cropState2 == null) {
                    }
                    float f152 = bitmapWidth;
                    float f162 = bitmapHeight;
                    float min22 = Math.min(getContainerViewWidth() / f152, getContainerViewHeight() / f162);
                    if (this.sendPhotoType != 1) {
                    }
                    float f172 = min;
                    f = min22;
                    f2 = f172;
                }
                if (this.currentEditMode == 4) {
                    this.eraseBtn.setActive(false, true);
                    this.restoreBtn.setActive(false, true);
                }
                if (this.sendPhotoType == 11 && ((i9 = this.currentEditMode) == 3 || i9 == 2 || i9 == 1)) {
                    this.animationStartTime = System.currentTimeMillis();
                    this.animateToX = this.savedTx;
                    int i14 = this.currentEditMode;
                    if (i14 == 1) {
                        f6 = this.savedTy;
                        dp2 = AndroidUtilities.dp(56.0f);
                    } else {
                        if (i14 == 3) {
                            float dp3 = this.savedTy + AndroidUtilities.dp(44.0f);
                            this.animateToY = dp3;
                            if (this.photoPaintView != null) {
                                f6 = dp3 - (lPhotoPaintView3.getAdditionalTop() / 2.0f);
                                this.animateToY = f6;
                                additionalBottom2 = this.photoPaintView.getAdditionalBottom() / 2.0f;
                                this.animateToY = f6 + additionalBottom2;
                            }
                        } else if (i14 == 2) {
                            f6 = this.savedTy;
                            dp2 = AndroidUtilities.dp(93.0f);
                        }
                        if (isStatusBarVisible()) {
                            this.animateToY -= AndroidUtilities.statusBarHeight / 2;
                        }
                        this.animateToScale = (f2 / f) * this.savedScale;
                        this.animateToRotate = this.savedRotation;
                        this.animateToMirror = this.mirror;
                    }
                    additionalBottom2 = dp2;
                    this.animateToY = f6 + additionalBottom2;
                    if (isStatusBarVisible()) {
                    }
                    this.animateToScale = (f2 / f) * this.savedScale;
                    this.animateToRotate = this.savedRotation;
                    this.animateToMirror = this.mirror;
                } else {
                    this.animateToScale = (f2 / f) * scale1();
                    this.animateToX = 0.0f;
                    this.translationX = (getLeftInset() / 2) - (getRightInset() / 2);
                    if (this.sendPhotoType == 1) {
                        int i15 = this.currentEditMode;
                        if (i15 == 2) {
                            f5 = AndroidUtilities.dp(36.0f);
                            this.animateToY = f5;
                        } else if (i15 == 3) {
                            f3 = -AndroidUtilities.dp(12.0f);
                            this.animateToY = f3;
                            if (this.photoPaintView != null) {
                                f4 = lPhotoPaintView2.getAdditionalTop() / 2.0f;
                                f5 = f3 - f4;
                                this.animateToY = f5;
                            }
                        }
                    } else {
                        int i16 = this.currentEditMode;
                        if (i16 == 1) {
                            dp = AndroidUtilities.dp(56.0f);
                        } else if (i16 == 2) {
                            dp = AndroidUtilities.dp(93.0f);
                        } else {
                            if (i16 == 3) {
                                float dp4 = AndroidUtilities.dp(44.0f);
                                this.animateToY = dp4;
                                if (this.photoPaintView != null) {
                                    float additionalTop = dp4 - (lPhotoPaintView.getAdditionalTop() / 2.0f);
                                    this.animateToY = additionalTop;
                                    additionalBottom = additionalTop + (this.photoPaintView.getAdditionalBottom() / 2.0f);
                                    this.animateToY = additionalBottom;
                                }
                            }
                            if (isStatusBarVisible()) {
                                f3 = this.animateToY;
                                f4 = AndroidUtilities.statusBarHeight / 2;
                                f5 = f3 - f4;
                                this.animateToY = f5;
                            }
                        }
                        additionalBottom = dp;
                        this.animateToY = additionalBottom;
                        if (isStatusBarVisible()) {
                        }
                    }
                }
                this.animationStartTime = System.currentTimeMillis();
                this.zoomAnimation = true;
            }
            this.padImageForHorizontalInsets = false;
            this.imageMoveAnimation = new AnimatorSet();
            ArrayList arrayList = new ArrayList(4);
            int i17 = this.currentEditMode;
            if (i17 == 1) {
                arrayList.add(ObjectAnimator.ofFloat(this.editorDoneLayout, View.TRANSLATION_Y, AndroidUtilities.dp(48.0f)));
                arrayList.add(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
                arrayList.add(ObjectAnimator.ofFloat(this.photoCropView, View.ALPHA, 0.0f));
                ofFloat4 = ValueAnimator.ofFloat(0.0f, 1.0f);
                ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda69
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        PhotoViewer.this.lambda$switchToEditMode$70(valueAnimator);
                    }
                });
            } else if (i17 == 2) {
                this.photoFilterView.shutdown();
                arrayList.add(ObjectAnimator.ofFloat(this.photoFilterView.getToolsView(), View.TRANSLATION_Y, AndroidUtilities.dp(186.0f)));
                PhotoFilterCurvesControl curveControl = this.photoFilterView.getCurveControl();
                Property property = View.ALPHA;
                arrayList.add(ObjectAnimator.ofFloat(curveControl, property, 0.0f));
                arrayList.add(ObjectAnimator.ofFloat(this.photoFilterView.getBlurControl(), property, 0.0f));
                ofFloat4 = ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f);
            } else {
                if (i17 == 3) {
                    ValueAnimator ofFloat5 = ValueAnimator.ofFloat(this.photoPaintView.getOffsetTranslationY(), AndroidUtilities.dp(126.0f));
                    ValueAnimator ofFloat6 = ValueAnimator.ofFloat(0.0f, -AndroidUtilities.dp(12.0f));
                    ofFloat5.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda70
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            PhotoViewer.this.lambda$switchToEditMode$71(valueAnimator);
                        }
                    });
                    ofFloat6.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda71
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            PhotoViewer.this.lambda$switchToEditMode$72(valueAnimator);
                        }
                    });
                    this.paintingOverlay.showAll();
                    this.containerView.invalidate();
                    this.photoPaintView.shutdown();
                    arrayList.add(ofFloat5);
                    arrayList.add(ofFloat6);
                    arrayList.add(ObjectAnimator.ofFloat(this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f));
                    this.photoPaintView.onAnimationStateChanged(true);
                } else if (i17 == 4) {
                    arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.buttonsLayout, View.TRANSLATION_Y, AndroidUtilities.dp(18.0f)));
                    FrameLayout frameLayout = this.maskPaintView.buttonsLayout;
                    Property property2 = View.ALPHA;
                    arrayList.add(ObjectAnimator.ofFloat(frameLayout, property2, 0.0f));
                    arrayList.add(ObjectAnimator.ofFloat(this.maskPaintView.weightChooserView, View.TRANSLATION_X, AndroidUtilities.dp(-18.0f)));
                    ofFloat4 = ObjectAnimator.ofFloat(this.maskPaintView.weightChooserView, property2, 0.0f);
                }
                arrayList.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                this.imageMoveAnimation.playTogether(arrayList);
                this.imageMoveAnimation.setDuration(200L);
                this.imageMoveAnimation.addListener(new 54(i));
                animatorSet2 = this.imageMoveAnimation;
            }
            arrayList.add(ofFloat4);
            arrayList.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
            this.imageMoveAnimation.playTogether(arrayList);
            this.imageMoveAnimation.setDuration(200L);
            this.imageMoveAnimation.addListener(new 54(i));
            animatorSet2 = this.imageMoveAnimation;
        } else {
            if (i == 1) {
                startVideoPlayer();
                createCropView();
                this.previousHasTransform = this.cropTransform.hasViewTransform();
                this.previousCropPx = this.cropTransform.getCropPx();
                this.previousCropPy = this.cropTransform.getCropPy();
                this.previousCropScale = this.cropTransform.getScale();
                this.previousCropRotation = this.cropTransform.getRotation();
                this.previousCropOrientation = this.cropTransform.getOrientation();
                this.previousCropPw = this.cropTransform.getCropPw();
                this.previousCropPh = this.cropTransform.getCropPh();
                this.previousCropMirrored = this.cropTransform.isMirrored();
                this.photoCropView.onAppear();
                this.editorDoneLayout.doneButton.setText(LocaleController.getString("Crop", R.string.Crop));
                this.editorDoneLayout.doneButton.setTextColor(getThemedColor(Theme.key_chat_editMediaButton));
                this.changeModeAnimation = new AnimatorSet();
                ArrayList arrayList2 = new ArrayList();
                FrameLayout frameLayout2 = this.pickerView;
                Property property3 = View.TRANSLATION_Y;
                arrayList2.add(ObjectAnimator.ofFloat(frameLayout2, property3, 0.0f, frameLayout2.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0)));
                FrameLayout frameLayout3 = this.pickerView;
                Property property4 = View.ALPHA;
                arrayList2.add(ObjectAnimator.ofFloat(frameLayout3, property4, 0.0f));
                StickerMakerView stickerMakerView = this.stickerMakerView;
                if (stickerMakerView != null) {
                    arrayList2.add(ObjectAnimator.ofFloat(stickerMakerView, property4, 0.0f));
                }
                StickerMakerBackgroundView stickerMakerBackgroundView = this.stickerMakerBackgroundView;
                if (stickerMakerBackgroundView != null) {
                    arrayList2.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView, property4, 0.0f));
                }
                arrayList2.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property3, 0.0f, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                arrayList2.add(ObjectAnimator.ofFloat(this.actionBar, property3, 0.0f, -actionBar4.getHeight()));
                arrayList2.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                if (this.needCaptionLayout) {
                    arrayList2.add(ObjectAnimator.ofFloat(this.captionTextViewSwitcher, property3, 0.0f, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                }
                int i18 = this.sendPhotoType;
                if (i18 == 0 || i18 == 4) {
                    i7 = 2;
                    arrayList2.add(ObjectAnimator.ofFloat(this.checkImageView, property4, 1.0f, 0.0f));
                    arrayList2.add(ObjectAnimator.ofFloat(this.photosCounterView, property4, 1.0f, 0.0f));
                } else {
                    i7 = 2;
                }
                if (this.selectedPhotosListView.getVisibility() == 0) {
                    float[] fArr = new float[i7];
                    // fill-array-data instruction
                    fArr[0] = 1.0f;
                    fArr[1] = 0.0f;
                    arrayList2.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, property4, fArr));
                }
                if (this.muteItem.getTag() != null) {
                    float[] fArr2 = new float[i7];
                    // fill-array-data instruction
                    fArr2[0] = 1.0f;
                    fArr2[1] = 0.0f;
                    arrayList2.add(ObjectAnimator.ofFloat(this.muteItem, property4, fArr2));
                }
                View view = this.navigationBar;
                if (view != null) {
                    arrayList2.add(ObjectAnimator.ofFloat(view, property4, 1.0f));
                }
                this.changeModeAnimation.playTogether(arrayList2);
                this.changeModeAnimation.setDuration(200L);
                animatorSet = this.changeModeAnimation;
                animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.55
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer photoViewer;
                        PhotoViewer.this.changeModeAnimation = null;
                        PhotoViewer.this.pickerView.setVisibility(8);
                        PhotoViewer.this.pickerViewSendButton.setVisibility(8);
                        PhotoViewer.this.doneButtonFullWidth.setVisibility(8);
                        PhotoViewer.this.muteItem.setVisibility(8);
                        PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                        PhotoViewer.this.selectedPhotosListView.setAlpha(0.0f);
                        PhotoViewer.this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
                        PhotoViewer.this.photosCounterView.setRotationX(0.0f);
                        PhotoViewer.this.selectedPhotosListView.setEnabled(false);
                        PhotoViewer.this.isPhotosListViewVisible = false;
                        if (PhotoViewer.this.needCaptionLayout) {
                            PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                        }
                        if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                            PhotoViewer.this.checkImageView.setVisibility(8);
                            PhotoViewer.this.photosCounterView.setVisibility(8);
                            PhotoViewer.this.updateActionBarTitlePadding();
                        }
                        if (PhotoViewer.this.sendPhotoType == 11) {
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.savedTy = photoViewer2.translationY;
                            PhotoViewer photoViewer3 = PhotoViewer.this;
                            photoViewer3.savedTx = photoViewer3.translationX;
                            PhotoViewer photoViewer4 = PhotoViewer.this;
                            photoViewer4.savedScale = photoViewer4.scale;
                            PhotoViewer photoViewer5 = PhotoViewer.this;
                            photoViewer5.savedRotation = photoViewer5.rotate;
                            PhotoViewer.this.animateToRotate = 0.0f;
                        }
                        Bitmap bitmap3 = PhotoViewer.this.centerImage.getBitmap();
                        if (bitmap3 != null || PhotoViewer.this.isCurrentVideo) {
                            PhotoViewer.this.photoCropView.setBitmap(bitmap3, PhotoViewer.this.centerImage.getOrientation(), PhotoViewer.this.sendPhotoType != 1, false, PhotoViewer.this.paintingOverlay, PhotoViewer.this.cropTransform, PhotoViewer.this.isCurrentVideo ? (VideoEditTextureView) PhotoViewer.this.videoTextureView : null, PhotoViewer.this.editState.cropState);
                            PhotoViewer.this.photoCropView.onDisappear();
                            int bitmapWidth2 = PhotoViewer.this.centerImage.getBitmapWidth();
                            int bitmapHeight2 = PhotoViewer.this.centerImage.getBitmapHeight();
                            if (PhotoViewer.this.editState.cropState != null) {
                                if (PhotoViewer.this.editState.cropState.transformRotation != 90 && PhotoViewer.this.editState.cropState.transformRotation != 270) {
                                    bitmapHeight2 = bitmapWidth2;
                                    bitmapWidth2 = bitmapHeight2;
                                }
                                int i19 = (int) (bitmapHeight2 * PhotoViewer.this.editState.cropState.cropPw);
                                bitmapHeight2 = (int) (bitmapWidth2 * PhotoViewer.this.editState.cropState.cropPh);
                                bitmapWidth2 = i19;
                            }
                            float f20 = bitmapWidth2;
                            float f21 = bitmapHeight2;
                            float min3 = Math.min(PhotoViewer.this.getContainerViewWidth() / f20, PhotoViewer.this.getContainerViewHeight() / f21);
                            float min4 = Math.min(PhotoViewer.this.getContainerViewWidth(1) / f20, PhotoViewer.this.getContainerViewHeight(1) / f21);
                            if (PhotoViewer.this.sendPhotoType == 1) {
                                float min5 = Math.min(PhotoViewer.this.getContainerViewWidth(1), PhotoViewer.this.getContainerViewHeight(1));
                                min4 = Math.max(min5 / f20, min5 / f21);
                            }
                            PhotoViewer.this.animateToScale = min4 / min3;
                            PhotoViewer.this.animateToX = (photoViewer.getLeftInset() / 2) - (PhotoViewer.this.getRightInset() / 2);
                            PhotoViewer.this.animateToY = (-AndroidUtilities.dp(56.0f)) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                            PhotoViewer.this.animationStartTime = System.currentTimeMillis();
                            PhotoViewer.this.zoomAnimation = true;
                        }
                        PhotoViewer.this.imageMoveAnimation = new AnimatorSet();
                        PhotoViewer.this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this.editorDoneLayout, View.TRANSLATION_Y, AndroidUtilities.dp(48.0f), 0.0f), ObjectAnimator.ofFloat(PhotoViewer.this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.photoCropView, View.ALPHA, 0.0f, 1.0f));
                        PhotoViewer.this.imageMoveAnimation.setDuration(200L);
                        PhotoViewer.this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.55.1
                            {
                                55.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator2) {
                                PhotoViewer.this.photoCropView.onAppeared();
                                PhotoViewer.this.photoCropView.onShow();
                                PhotoViewer.this.imageMoveAnimation = null;
                                55 r5 = 55.this;
                                PhotoViewer.this.currentEditMode = i;
                                PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                                if (PhotoViewer.this.paintKeyboardNotifier != null) {
                                    PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                                }
                                if (PhotoViewer.this.currentEditMode != 3) {
                                    PhotoViewer.this.translateY = 0.0f;
                                }
                                PhotoViewer.this.switchingToMode = -1;
                                PhotoViewer photoViewer6 = PhotoViewer.this;
                                photoViewer6.scale = photoViewer6.animateToScale = 1.0f;
                                PhotoViewer.this.animateToX = 0.0f;
                                PhotoViewer.this.animateToY = 0.0f;
                                PhotoViewer photoViewer7 = PhotoViewer.this;
                                photoViewer7.updateMinMax(photoViewer7.scale);
                                PhotoViewer.this.padImageForHorizontalInsets = true;
                                PhotoViewer.this.containerView.invalidate();
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationStart(Animator animator2) {
                                PhotoViewer.this.editorDoneLayout.setVisibility(0);
                                PhotoViewer.this.photoCropView.setVisibility(0);
                            }
                        });
                        PhotoViewer.this.imageMoveAnimation.start();
                    }
                };
            } else if (i == 2) {
                startVideoPlayer();
                if (this.photoFilterView == null) {
                    if (this.imagesArrLocals.isEmpty()) {
                        str = null;
                        savedFilterState = null;
                        i4 = 0;
                    } else {
                        Object obj = this.imagesArrLocals.get(this.currentIndex);
                        i4 = obj instanceof MediaController.PhotoEntry ? ((MediaController.PhotoEntry) obj).orientation : 0;
                        MediaController.MediaEditState mediaEditState = (MediaController.MediaEditState) obj;
                        MediaController.SavedFilterState savedFilterState2 = mediaEditState.savedFilterState;
                        str = mediaEditState.getPath();
                        savedFilterState = savedFilterState2;
                    }
                    if (this.videoTextureView != null) {
                        bitmap = null;
                    } else {
                        if (savedFilterState == null) {
                            decodeFile = this.stickerMakerView.isSegmentedState() ? this.stickerMakerView.getSourceBitmap() : this.centerImage.getBitmap();
                            i4 = this.centerImage.getOrientation();
                        } else {
                            decodeFile = BitmapFactory.decodeFile(str);
                        }
                        bitmap = decodeFile;
                    }
                    int i19 = i4;
                    if (this.sendPhotoType != 1) {
                        if (this.isCurrentVideo || (i6 = this.currentImageHasFace) == 2) {
                            i5 = 2;
                        } else if (i6 != 1) {
                            i5 = 0;
                        }
                        Bitmap segmentedDarkMaskImage = this.stickerMakerView.getSegmentedDarkMaskImage();
                        Activity activity = this.parentActivity;
                        TextureView textureView = this.videoTextureView;
                        PhotoFilterView photoFilterView = new PhotoFilterView(activity, textureView == null ? (VideoEditTextureView) textureView : null, bitmap, segmentedDarkMaskImage, i19, savedFilterState, this.isCurrentVideo ? null : this.paintingOverlay, i5, textureView != null && (((cropState = this.editState.cropState) != null && cropState.mirrored) || this.cropTransform.isMirrored()), true, null, this.resourcesProvider);
                        this.photoFilterView = photoFilterView;
                        this.containerView.addView(photoFilterView, LayoutHelper.createFrame(-1, -1.0f));
                        this.photoFilterView.getDoneTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda72
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view2) {
                                PhotoViewer.this.lambda$switchToEditMode$73(view2);
                            }
                        });
                        this.photoFilterView.getCancelTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda73
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view2) {
                                PhotoViewer.this.lambda$switchToEditMode$75(view2);
                            }
                        });
                        this.photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(186.0f));
                    }
                    i5 = 1;
                    Bitmap segmentedDarkMaskImage2 = this.stickerMakerView.getSegmentedDarkMaskImage();
                    Activity activity2 = this.parentActivity;
                    TextureView textureView2 = this.videoTextureView;
                    PhotoFilterView photoFilterView2 = new PhotoFilterView(activity2, textureView2 == null ? (VideoEditTextureView) textureView2 : null, bitmap, segmentedDarkMaskImage2, i19, savedFilterState, this.isCurrentVideo ? null : this.paintingOverlay, i5, textureView2 != null && (((cropState = this.editState.cropState) != null && cropState.mirrored) || this.cropTransform.isMirrored()), true, null, this.resourcesProvider);
                    this.photoFilterView = photoFilterView2;
                    this.containerView.addView(photoFilterView2, LayoutHelper.createFrame(-1, -1.0f));
                    this.photoFilterView.getDoneTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda72
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            PhotoViewer.this.lambda$switchToEditMode$73(view2);
                        }
                    });
                    this.photoFilterView.getCancelTextView().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.PhotoViewer$$ExternalSyntheticLambda73
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            PhotoViewer.this.lambda$switchToEditMode$75(view2);
                        }
                    });
                    this.photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(186.0f));
                }
                this.changeModeAnimation = new AnimatorSet();
                ArrayList arrayList3 = new ArrayList();
                FrameLayout frameLayout4 = this.pickerView;
                Property property5 = View.TRANSLATION_Y;
                arrayList3.add(ObjectAnimator.ofFloat(frameLayout4, property5, 0.0f, frameLayout4.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0)));
                FrameLayout frameLayout5 = this.pickerView;
                Property property6 = View.ALPHA;
                arrayList3.add(ObjectAnimator.ofFloat(frameLayout5, property6, 0.0f));
                StickerMakerView stickerMakerView2 = this.stickerMakerView;
                if (stickerMakerView2 != null) {
                    arrayList3.add(ObjectAnimator.ofFloat(stickerMakerView2, property6, 0.0f));
                }
                StickerMakerBackgroundView stickerMakerBackgroundView2 = this.stickerMakerBackgroundView;
                if (stickerMakerBackgroundView2 != null) {
                    arrayList3.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView2, property6, 0.0f));
                }
                arrayList3.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property5, 0.0f, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                arrayList3.add(ObjectAnimator.ofFloat(this.actionBar, property5, 0.0f, -actionBar3.getHeight()));
                int i20 = this.sendPhotoType;
                if (i20 == 0 || i20 == 4) {
                    arrayList3.add(ObjectAnimator.ofFloat(this.checkImageView, property6, 1.0f, 0.0f));
                    ofFloat3 = ObjectAnimator.ofFloat(this.photosCounterView, property6, 1.0f, 0.0f);
                } else {
                    if (i20 == 1) {
                        ofFloat3 = ObjectAnimator.ofFloat(this.photoCropView, property6, 1.0f, 0.0f);
                    }
                    if (this.selectedPhotosListView.getVisibility() == 0) {
                        arrayList3.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, property6, 1.0f, 0.0f));
                    }
                    if (this.muteItem.getTag() != null) {
                        arrayList3.add(ObjectAnimator.ofFloat(this.muteItem, property6, 1.0f, 0.0f));
                    }
                    arrayList3.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                    this.changeModeAnimation.playTogether(arrayList3);
                    this.changeModeAnimation.setDuration(200L);
                    animatorSet = this.changeModeAnimation;
                    animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            float min3;
                            PhotoViewer photoViewer;
                            PhotoViewer.this.changeModeAnimation = null;
                            PhotoViewer.this.pickerView.setVisibility(8);
                            PhotoViewer.this.pickerViewSendButton.setVisibility(8);
                            PhotoViewer.this.doneButtonFullWidth.setVisibility(8);
                            PhotoViewer.this.actionBar.setVisibility(8);
                            PhotoViewer.this.muteItem.setVisibility(8);
                            if (PhotoViewer.this.photoCropView != null) {
                                PhotoViewer.this.photoCropView.setVisibility(4);
                            }
                            PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                            PhotoViewer.this.selectedPhotosListView.setAlpha(0.0f);
                            PhotoViewer.this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
                            PhotoViewer.this.photosCounterView.setRotationX(0.0f);
                            PhotoViewer.this.selectedPhotosListView.setEnabled(false);
                            PhotoViewer.this.isPhotosListViewVisible = false;
                            if (PhotoViewer.this.needCaptionLayout) {
                                PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                            }
                            if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                                PhotoViewer.this.checkImageView.setVisibility(8);
                                PhotoViewer.this.photosCounterView.setVisibility(8);
                                PhotoViewer.this.updateActionBarTitlePadding();
                            }
                            Bitmap bitmap3 = PhotoViewer.this.centerImage.getBitmap();
                            if (PhotoViewer.this.sendPhotoType == 11) {
                                PhotoViewer photoViewer2 = PhotoViewer.this;
                                photoViewer2.savedTy = photoViewer2.translationY;
                                PhotoViewer photoViewer3 = PhotoViewer.this;
                                photoViewer3.savedTx = photoViewer3.translationX;
                                PhotoViewer photoViewer4 = PhotoViewer.this;
                                photoViewer4.savedScale = photoViewer4.scale;
                                PhotoViewer photoViewer5 = PhotoViewer.this;
                                photoViewer5.savedRotation = photoViewer5.rotate;
                                PhotoViewer.this.animateToRotate = 0.0f;
                            }
                            if (bitmap3 != null) {
                                float bitmapWidth2 = PhotoViewer.this.centerImage.getBitmapWidth();
                                float bitmapHeight2 = PhotoViewer.this.centerImage.getBitmapHeight();
                                float min4 = Math.min(PhotoViewer.this.getContainerViewWidth(2) / bitmapWidth2, PhotoViewer.this.getContainerViewHeight(2) / bitmapHeight2);
                                if (PhotoViewer.this.sendPhotoType == 1) {
                                    PhotoViewer.this.animateToY = -AndroidUtilities.dp(36.0f);
                                    min3 = PhotoViewer.this.getCropFillScale(false);
                                } else {
                                    PhotoViewer.this.animateToY = (-AndroidUtilities.dp(93.0f)) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                                    min3 = (PhotoViewer.this.editState.cropState == null || !(PhotoViewer.this.editState.cropState.transformRotation == 90 || PhotoViewer.this.editState.cropState.transformRotation == 270)) ? Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapWidth2, PhotoViewer.this.getContainerViewHeight() / bitmapHeight2) : Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapHeight2, PhotoViewer.this.getContainerViewHeight() / bitmapWidth2);
                                }
                                PhotoViewer.this.animateToScale = min4 / min3;
                                PhotoViewer.this.animateToX = (photoViewer.getLeftInset() / 2) - (PhotoViewer.this.getRightInset() / 2);
                                PhotoViewer.this.animationStartTime = System.currentTimeMillis();
                                PhotoViewer.this.zoomAnimation = true;
                            }
                            PhotoViewer.this.imageMoveAnimation = new AnimatorSet();
                            PhotoViewer.this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.photoFilterView.getToolsView(), View.TRANSLATION_Y, AndroidUtilities.dp(186.0f), 0.0f));
                            PhotoViewer.this.imageMoveAnimation.setDuration(200L);
                            PhotoViewer.this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56.1
                                {
                                    56.this = this;
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator2) {
                                    PhotoViewer.this.photoFilterView.init();
                                    PhotoViewer.this.imageMoveAnimation = null;
                                    56 r5 = 56.this;
                                    PhotoViewer.this.currentEditMode = i;
                                    PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                                    if (PhotoViewer.this.paintKeyboardNotifier != null) {
                                        PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                                    }
                                    if (PhotoViewer.this.currentEditMode != 3) {
                                        PhotoViewer.this.translateY = 0.0f;
                                    }
                                    PhotoViewer.this.switchingToMode = -1;
                                    PhotoViewer photoViewer6 = PhotoViewer.this;
                                    photoViewer6.scale = photoViewer6.animateToScale = 1.0f;
                                    PhotoViewer.this.animateToX = 0.0f;
                                    PhotoViewer.this.animateToY = 0.0f;
                                    PhotoViewer photoViewer7 = PhotoViewer.this;
                                    photoViewer7.updateMinMax(photoViewer7.scale);
                                    PhotoViewer.this.padImageForHorizontalInsets = true;
                                    PhotoViewer.this.containerView.invalidate();
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationStart(Animator animator2) {
                                }
                            });
                            PhotoViewer.this.imageMoveAnimation.start();
                        }
                    };
                }
                arrayList3.add(ofFloat3);
                if (this.selectedPhotosListView.getVisibility() == 0) {
                }
                if (this.muteItem.getTag() != null) {
                }
                arrayList3.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                this.changeModeAnimation.playTogether(arrayList3);
                this.changeModeAnimation.setDuration(200L);
                animatorSet = this.changeModeAnimation;
                animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        float min3;
                        PhotoViewer photoViewer;
                        PhotoViewer.this.changeModeAnimation = null;
                        PhotoViewer.this.pickerView.setVisibility(8);
                        PhotoViewer.this.pickerViewSendButton.setVisibility(8);
                        PhotoViewer.this.doneButtonFullWidth.setVisibility(8);
                        PhotoViewer.this.actionBar.setVisibility(8);
                        PhotoViewer.this.muteItem.setVisibility(8);
                        if (PhotoViewer.this.photoCropView != null) {
                            PhotoViewer.this.photoCropView.setVisibility(4);
                        }
                        PhotoViewer.this.selectedPhotosListView.setVisibility(8);
                        PhotoViewer.this.selectedPhotosListView.setAlpha(0.0f);
                        PhotoViewer.this.selectedPhotosListView.setTranslationY(-AndroidUtilities.dp(10.0f));
                        PhotoViewer.this.photosCounterView.setRotationX(0.0f);
                        PhotoViewer.this.selectedPhotosListView.setEnabled(false);
                        PhotoViewer.this.isPhotosListViewVisible = false;
                        if (PhotoViewer.this.needCaptionLayout) {
                            PhotoViewer.this.captionTextViewSwitcher.setVisibility(4);
                        }
                        if (PhotoViewer.this.sendPhotoType == 0 || PhotoViewer.this.sendPhotoType == 4 || ((PhotoViewer.this.sendPhotoType == 2 || PhotoViewer.this.sendPhotoType == 5) && PhotoViewer.this.imagesArrLocals.size() > 1)) {
                            PhotoViewer.this.checkImageView.setVisibility(8);
                            PhotoViewer.this.photosCounterView.setVisibility(8);
                            PhotoViewer.this.updateActionBarTitlePadding();
                        }
                        Bitmap bitmap3 = PhotoViewer.this.centerImage.getBitmap();
                        if (PhotoViewer.this.sendPhotoType == 11) {
                            PhotoViewer photoViewer2 = PhotoViewer.this;
                            photoViewer2.savedTy = photoViewer2.translationY;
                            PhotoViewer photoViewer3 = PhotoViewer.this;
                            photoViewer3.savedTx = photoViewer3.translationX;
                            PhotoViewer photoViewer4 = PhotoViewer.this;
                            photoViewer4.savedScale = photoViewer4.scale;
                            PhotoViewer photoViewer5 = PhotoViewer.this;
                            photoViewer5.savedRotation = photoViewer5.rotate;
                            PhotoViewer.this.animateToRotate = 0.0f;
                        }
                        if (bitmap3 != null) {
                            float bitmapWidth2 = PhotoViewer.this.centerImage.getBitmapWidth();
                            float bitmapHeight2 = PhotoViewer.this.centerImage.getBitmapHeight();
                            float min4 = Math.min(PhotoViewer.this.getContainerViewWidth(2) / bitmapWidth2, PhotoViewer.this.getContainerViewHeight(2) / bitmapHeight2);
                            if (PhotoViewer.this.sendPhotoType == 1) {
                                PhotoViewer.this.animateToY = -AndroidUtilities.dp(36.0f);
                                min3 = PhotoViewer.this.getCropFillScale(false);
                            } else {
                                PhotoViewer.this.animateToY = (-AndroidUtilities.dp(93.0f)) + (PhotoViewer.this.isStatusBarVisible() ? AndroidUtilities.statusBarHeight / 2 : 0);
                                min3 = (PhotoViewer.this.editState.cropState == null || !(PhotoViewer.this.editState.cropState.transformRotation == 90 || PhotoViewer.this.editState.cropState.transformRotation == 270)) ? Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapWidth2, PhotoViewer.this.getContainerViewHeight() / bitmapHeight2) : Math.min(PhotoViewer.this.getContainerViewWidth() / bitmapHeight2, PhotoViewer.this.getContainerViewHeight() / bitmapWidth2);
                            }
                            PhotoViewer.this.animateToScale = min4 / min3;
                            PhotoViewer.this.animateToX = (photoViewer.getLeftInset() / 2) - (PhotoViewer.this.getRightInset() / 2);
                            PhotoViewer.this.animationStartTime = System.currentTimeMillis();
                            PhotoViewer.this.zoomAnimation = true;
                        }
                        PhotoViewer.this.imageMoveAnimation = new AnimatorSet();
                        PhotoViewer.this.imageMoveAnimation.playTogether(ObjectAnimator.ofFloat(PhotoViewer.this, AnimationProperties.PHOTO_VIEWER_ANIMATION_VALUE, 0.0f, 1.0f), ObjectAnimator.ofFloat(PhotoViewer.this.photoFilterView.getToolsView(), View.TRANSLATION_Y, AndroidUtilities.dp(186.0f), 0.0f));
                        PhotoViewer.this.imageMoveAnimation.setDuration(200L);
                        PhotoViewer.this.imageMoveAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.56.1
                            {
                                56.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator2) {
                                PhotoViewer.this.photoFilterView.init();
                                PhotoViewer.this.imageMoveAnimation = null;
                                56 r5 = 56.this;
                                PhotoViewer.this.currentEditMode = i;
                                PhotoViewer.this.captionEdit.keyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 0);
                                if (PhotoViewer.this.paintKeyboardNotifier != null) {
                                    PhotoViewer.this.paintKeyboardNotifier.ignore(PhotoViewer.this.currentEditMode != 3);
                                }
                                if (PhotoViewer.this.currentEditMode != 3) {
                                    PhotoViewer.this.translateY = 0.0f;
                                }
                                PhotoViewer.this.switchingToMode = -1;
                                PhotoViewer photoViewer6 = PhotoViewer.this;
                                photoViewer6.scale = photoViewer6.animateToScale = 1.0f;
                                PhotoViewer.this.animateToX = 0.0f;
                                PhotoViewer.this.animateToY = 0.0f;
                                PhotoViewer photoViewer7 = PhotoViewer.this;
                                photoViewer7.updateMinMax(photoViewer7.scale);
                                PhotoViewer.this.padImageForHorizontalInsets = true;
                                PhotoViewer.this.containerView.invalidate();
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationStart(Animator animator2) {
                            }
                        });
                        PhotoViewer.this.imageMoveAnimation.start();
                    }
                };
            } else if (i != 3) {
                if (i == 4) {
                    createMaskPaintView();
                    this.changeModeAnimation = new AnimatorSet();
                    ArrayList arrayList4 = new ArrayList();
                    FrameLayout frameLayout6 = this.pickerView;
                    Property property7 = View.TRANSLATION_Y;
                    arrayList4.add(ObjectAnimator.ofFloat(frameLayout6, property7, frameLayout6.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0)));
                    FrameLayout frameLayout7 = this.pickerView;
                    Property property8 = View.ALPHA;
                    arrayList4.add(ObjectAnimator.ofFloat(frameLayout7, property8, 0.0f));
                    StickerMakerView stickerMakerView3 = this.stickerMakerView;
                    if (stickerMakerView3 != null) {
                        arrayList4.add(ObjectAnimator.ofFloat(stickerMakerView3, property8, 1.0f));
                    }
                    StickerMakerBackgroundView stickerMakerBackgroundView3 = this.stickerMakerBackgroundView;
                    if (stickerMakerBackgroundView3 != null) {
                        arrayList4.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView3, property8, 1.0f));
                    }
                    arrayList4.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property7, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                    arrayList4.add(ObjectAnimator.ofFloat(this.actionBar, property7, -actionBar.getHeight()));
                    arrayList4.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                    if (this.needCaptionLayout) {
                        arrayList4.add(ObjectAnimator.ofFloat(this.captionTextViewSwitcher, property7, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                    }
                    int i21 = this.sendPhotoType;
                    if (i21 == 0 || i21 == 4) {
                        i2 = 2;
                        arrayList4.add(ObjectAnimator.ofFloat(this.checkImageView, property8, 1.0f, 0.0f));
                        ofFloat = ObjectAnimator.ofFloat(this.photosCounterView, property8, 1.0f, 0.0f);
                    } else if (i21 == 1) {
                        i2 = 2;
                        ofFloat = ObjectAnimator.ofFloat(this.photoCropView, property8, 1.0f, 0.0f);
                    } else {
                        i2 = 2;
                        if (this.selectedPhotosListView.getVisibility() == 0) {
                            float[] fArr3 = new float[i2];
                            // fill-array-data instruction
                            fArr3[0] = 1.0f;
                            fArr3[1] = 0.0f;
                            arrayList4.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, property8, fArr3));
                        }
                        if (this.muteItem.getTag() != null) {
                            float[] fArr4 = new float[i2];
                            // fill-array-data instruction
                            fArr4[0] = 1.0f;
                            fArr4[1] = 0.0f;
                            arrayList4.add(ObjectAnimator.ofFloat(this.muteItem, property8, fArr4));
                        }
                        this.changeModeAnimation.playTogether(arrayList4);
                        this.changeModeAnimation.setDuration(200L);
                        animatorSet = this.changeModeAnimation;
                        animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.58
                            {
                                PhotoViewer.this = this;
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                PhotoViewer.this.maskPaintView.init();
                                PhotoViewer.this.currentEditMode = i;
                                PhotoViewer.this.changeModeAnimation = null;
                                PhotoViewer.this.switchingToMode = -1;
                            }
                        };
                    }
                    arrayList4.add(ofFloat);
                    if (this.selectedPhotosListView.getVisibility() == 0) {
                    }
                    if (this.muteItem.getTag() != null) {
                    }
                    this.changeModeAnimation.playTogether(arrayList4);
                    this.changeModeAnimation.setDuration(200L);
                    animatorSet = this.changeModeAnimation;
                    animatorListenerAdapter = new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.58
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            PhotoViewer.this.maskPaintView.init();
                            PhotoViewer.this.currentEditMode = i;
                            PhotoViewer.this.changeModeAnimation = null;
                            PhotoViewer.this.switchingToMode = -1;
                        }
                    };
                }
                frameLayoutDrawer = this.containerView;
                if (frameLayoutDrawer == null) {
                    frameLayoutDrawer.updateExclusionRects();
                    return;
                }
                return;
            } else {
                startVideoPlayer();
                createPaintView();
                this.changeModeAnimation = new AnimatorSet();
                ArrayList arrayList5 = new ArrayList();
                FrameLayout frameLayout8 = this.pickerView;
                Property property9 = View.TRANSLATION_Y;
                arrayList5.add(ObjectAnimator.ofFloat(frameLayout8, property9, frameLayout8.getHeight() + this.captionEdit.getEditTextHeight() + (this.isCurrentVideo ? AndroidUtilities.dp(58.0f) : 0)));
                FrameLayout frameLayout9 = this.pickerView;
                Property property10 = View.ALPHA;
                arrayList5.add(ObjectAnimator.ofFloat(frameLayout9, property10, 0.0f));
                StickerMakerView stickerMakerView4 = this.stickerMakerView;
                if (stickerMakerView4 != null) {
                    arrayList5.add(ObjectAnimator.ofFloat(stickerMakerView4, property10, this.stickerEmpty ? 1.0f : 0.0f));
                }
                StickerMakerBackgroundView stickerMakerBackgroundView4 = this.stickerMakerBackgroundView;
                if (stickerMakerBackgroundView4 != null) {
                    arrayList5.add(ObjectAnimator.ofFloat(stickerMakerBackgroundView4, property10, this.stickerEmpty ? 1.0f : 0.0f));
                }
                arrayList5.add(ObjectAnimator.ofFloat(this.pickerViewSendButton, property9, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                arrayList5.add(ObjectAnimator.ofFloat(this.actionBar, property9, -actionBar2.getHeight()));
                arrayList5.add(ObjectAnimator.ofObject(this.navigationBar, "backgroundColor", new ArgbEvaluator(), Integer.valueOf(color), Integer.valueOf(i10)));
                if (this.needCaptionLayout) {
                    arrayList5.add(ObjectAnimator.ofFloat(this.captionTextViewSwitcher, property9, AndroidUtilities.dp(this.isCurrentVideo ? 154.0f : 96.0f)));
                }
                int i22 = this.sendPhotoType;
                if (i22 == 0 || i22 == 4) {
                    i3 = 2;
                    arrayList5.add(ObjectAnimator.ofFloat(this.checkImageView, property10, 1.0f, 0.0f));
                    ofFloat2 = ObjectAnimator.ofFloat(this.photosCounterView, property10, 1.0f, 0.0f);
                } else if (i22 == 1) {
                    i3 = 2;
                    ofFloat2 = ObjectAnimator.ofFloat(this.photoCropView, property10, 1.0f, 0.0f);
                } else {
                    i3 = 2;
                    if (this.selectedPhotosListView.getVisibility() == 0) {
                        float[] fArr5 = new float[i3];
                        // fill-array-data instruction
                        fArr5[0] = 1.0f;
                        fArr5[1] = 0.0f;
                        arrayList5.add(ObjectAnimator.ofFloat(this.selectedPhotosListView, property10, fArr5));
                    }
                    if (this.muteItem.getTag() != null) {
                        float[] fArr6 = new float[i3];
                        // fill-array-data instruction
                        fArr6[0] = 1.0f;
                        fArr6[1] = 0.0f;
                        arrayList5.add(ObjectAnimator.ofFloat(this.muteItem, property10, fArr6));
                    }
                    this.changeModeAnimation.playTogether(arrayList5);
                    this.changeModeAnimation.setDuration(200L);
                    this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.57
                        {
                            PhotoViewer.this = this;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            PhotoViewer.this.switchToPaintMode();
                        }
                    });
                    animatorSet2 = this.changeModeAnimation;
                }
                arrayList5.add(ofFloat2);
                if (this.selectedPhotosListView.getVisibility() == 0) {
                }
                if (this.muteItem.getTag() != null) {
                }
                this.changeModeAnimation.playTogether(arrayList5);
                this.changeModeAnimation.setDuration(200L);
                this.changeModeAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.PhotoViewer.57
                    {
                        PhotoViewer.this = this;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        PhotoViewer.this.switchToPaintMode();
                    }
                });
                animatorSet2 = this.changeModeAnimation;
            }
            animatorSet.addListener(animatorListenerAdapter);
            animatorSet2 = this.changeModeAnimation;
        }
        animatorSet2.start();
        frameLayoutDrawer = this.containerView;
        if (frameLayoutDrawer == null) {
        }
    }

    public void updateColors() {
        int i = Theme.key_chat_editMediaButton;
        int themedColor = getThemedColor(i);
        ImageView imageView = this.pickerViewSendButton;
        if (imageView != null) {
            Drawable background = imageView.getBackground();
            Theme.setSelectorDrawableColor(background, themedColor, false);
            Theme.setSelectorDrawableColor(background, getThemedColor(Build.VERSION.SDK_INT >= 21 ? Theme.key_dialogFloatingButtonPressed : i), true);
            this.pickerViewSendButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_dialogFloatingIcon), PorterDuff.Mode.MULTIPLY));
        }
        CheckBox checkBox = this.checkImageView;
        if (checkBox != null) {
            checkBox.setColor(getThemedColor(i), -1);
        }
        PorterDuffColorFilter porterDuffColorFilter = new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY);
        ImageView imageView2 = this.paintItem;
        if (imageView2 != null && imageView2.getColorFilter() != null) {
            this.paintItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView3 = this.cropItem;
        if (imageView3 != null && imageView3.getColorFilter() != null) {
            this.cropItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView4 = this.tuneItem;
        if (imageView4 != null && imageView4.getColorFilter() != null) {
            this.tuneItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView5 = this.rotateItem;
        if (imageView5 != null && imageView5.getColorFilter() != null) {
            this.rotateItem.setColorFilter(porterDuffColorFilter);
        }
        ImageView imageView6 = this.mirrorItem;
        if (imageView6 != null && imageView6.getColorFilter() != null) {
            this.mirrorItem.setColorFilter(porterDuffColorFilter);
        }
        PickerBottomLayoutViewer pickerBottomLayoutViewer = this.editorDoneLayout;
        if (pickerBottomLayoutViewer != null) {
            pickerBottomLayoutViewer.doneButton.setTextColor(themedColor);
        }
        PickerBottomLayoutViewer pickerBottomLayoutViewer2 = this.qualityPicker;
        if (pickerBottomLayoutViewer2 != null) {
            pickerBottomLayoutViewer2.doneButton.setTextColor(themedColor);
        }
        LPhotoPaintView lPhotoPaintView = this.photoPaintView;
        if (lPhotoPaintView != null) {
            lPhotoPaintView.updateColors();
        }
        PhotoFilterView photoFilterView = this.photoFilterView;
        if (photoFilterView != null) {
            photoFilterView.updateColors();
        }
        CaptionPhotoViewer captionPhotoViewer = this.captionEdit;
        if (captionPhotoViewer != null) {
            captionPhotoViewer.updateColors(this.resourcesProvider);
        }
        VideoTimelinePlayView videoTimelinePlayView = this.videoTimelineView;
        if (videoTimelinePlayView != null) {
            videoTimelinePlayView.invalidate();
        }
        SelectedPhotosListView selectedPhotosListView = this.selectedPhotosListView;
        if (selectedPhotosListView != null) {
            int childCount = selectedPhotosListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.selectedPhotosListView.getChildAt(i2);
                if (childAt instanceof PhotoPickerPhotoCell) {
                    ((PhotoPickerPhotoCell) childAt).updateColors();
                }
            }
        }
        StickersAlert stickersAlert = this.masksAlert;
        if (stickersAlert != null) {
            stickersAlert.updateColors(true);
        }
    }

    public void updateMuteButton() {
        VideoPlayer videoPlayer = this.videoPlayer;
        if (videoPlayer != null) {
            videoPlayer.setMute(this.muteVideo);
        }
        if (this.videoConvertSupported) {
            this.muteItem.setEnabled(true);
            this.muteItem.setClickable(true);
            this.muteItem.animate().alpha(1.0f).setDuration(180L).start();
            if (this.muteVideo) {
                if (this.customTitle == null) {
                    this.actionBarContainer.setSubtitle(LocaleController.getString("SoundMuted", R.string.SoundMuted));
                }
                this.muteItem.setImageResource(R.drawable.video_send_mute);
                if (this.compressItem.getTag() != null) {
                    this.compressItem.setAlpha(0.5f);
                    this.compressItem.setEnabled(false);
                }
                if (this.sendPhotoType == 1) {
                    this.videoTimelineView.setMaxProgressDiff(9600.0f / this.videoDuration);
                    this.videoTimelineView.setMode(1);
                    updateVideoInfo();
                } else {
                    this.videoTimelineView.setMaxProgressDiff(1.0f);
                    this.videoTimelineView.setMode(0);
                }
                this.muteItem.setContentDescription(LocaleController.getString("NoSound", R.string.NoSound));
                return;
            }
            this.actionBarContainer.setSubtitle(this.currentSubtitle);
            this.muteItem.setImageResource(R.drawable.video_send_unmute);
            this.muteItem.setContentDescription(LocaleController.getString("Sound", R.string.Sound));
            if (this.compressItem.getTag() != null) {
                this.compressItem.setAlpha(1.0f);
                this.compressItem.setEnabled(true);
            }
            this.videoTimelineView.setMaxProgressDiff(1.0f);
        } else {
            this.muteItem.setEnabled(false);
            this.muteItem.setClickable(false);
            this.muteItem.animate().alpha(0.5f).setDuration(180L).start();
        }
        this.videoTimelineView.setMode(0);
    }

    public void updateWebPlayerState(boolean z, int i) {
        updatePlayerState(z, i);
    }

    public void zoomOut() {
        animateTo(1.0f, 0.0f, 0.0f, false);
    }
}

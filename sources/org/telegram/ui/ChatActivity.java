package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.os.Vibrator;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.Space;
import android.widget.TextView;
import android.widget.Toast;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.math.MathUtils;
import androidx.core.util.Consumer;
import androidx.dynamicanimation.animation.DynamicAnimation;
import androidx.dynamicanimation.animation.FloatValueHolder;
import androidx.dynamicanimation.animation.SpringAnimation;
import androidx.dynamicanimation.animation.SpringForce;
import androidx.recyclerview.widget.ChatListItemAnimator;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerCustom;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import j$.util.Comparator$-CC;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.net.IDN;
import java.net.URLDecoder;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BotWebViewVibrationEffect;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatMessagesMetadataController;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ChatThemeController;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiData;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FlagSecureReason;
import org.telegram.messenger.ForwardingMessagesParams;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LanguageDetector;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.R;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.TranslateController;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.utils.PhotoUtilities;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.ResultCallback;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$BotInlineResult;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatInvite;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EmojiStatus;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputStickerSet;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageExtendedMedia;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessagePeerReaction;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PhoneCallDiscardReason;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$StoryItem;
import org.telegram.tgnet.TLRPC$TL_attachMenuBot;
import org.telegram.tgnet.TLRPC$TL_attachMenuBotsBot;
import org.telegram.tgnet.TLRPC$TL_availableReaction;
import org.telegram.tgnet.TLRPC$TL_botCommand;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaAuto;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_clickSponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_channels_exportMessageLink;
import org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers;
import org.telegram.tgnet.TLRPC$TL_channels_viewSponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_chatReactionsNone;
import org.telegram.tgnet.TLRPC$TL_contacts_acceptContact;
import org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_document;
import org.telegram.tgnet.TLRPC$TL_emojiStatus;
import org.telegram.tgnet.TLRPC$TL_emojiStatusUntil;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatDiscarded;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_exportedMessageLink;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_groupCall;
import org.telegram.tgnet.TLRPC$TL_help_premiumPromo;
import org.telegram.tgnet.TLRPC$TL_inlineBotSwitchPM;
import org.telegram.tgnet.TLRPC$TL_inlineBotWebView;
import org.telegram.tgnet.TLRPC$TL_inputMediaPoll;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_inputPhoto;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetShortName;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRequestPeer;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUserProfile;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelMigrateFrom;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatJoinedByRequest;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageActionEmpty;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionGiftPremium;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCallScheduled;
import org.telegram.tgnet.TLRPC$TL_messageActionInviteToGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionSecureValuesSent;
import org.telegram.tgnet.TLRPC$TL_messageActionSetChatTheme;
import org.telegram.tgnet.TLRPC$TL_messageActionSetMessagesTTL;
import org.telegram.tgnet.TLRPC$TL_messageActionSetSameChatWallPaper;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityBold;
import org.telegram.tgnet.TLRPC$TL_messageEntityCode;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityItalic;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageEntityPre;
import org.telegram.tgnet.TLRPC$TL_messageEntitySpoiler;
import org.telegram.tgnet.TLRPC$TL_messageEntityStrike;
import org.telegram.tgnet.TLRPC$TL_messageEntityTextUrl;
import org.telegram.tgnet.TLRPC$TL_messageEntityUnderline;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messages_acceptUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_discussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_editMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getAttachMenuBot;
import org.telegram.tgnet.TLRPC$TL_messages_getDiscussionMessage;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessageEditData;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_rateTranscribedAudio;
import org.telegram.tgnet.TLRPC$TL_messages_requestUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_sendScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_toggleBotInAttachMenu;
import org.telegram.tgnet.TLRPC$TL_payments_bankCardData;
import org.telegram.tgnet.TLRPC$TL_payments_getBankCardData;
import org.telegram.tgnet.TLRPC$TL_payments_getPaymentReceipt;
import org.telegram.tgnet.TLRPC$TL_payments_paymentReceipt;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_poll;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_premiumGiftOption;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardForceReply;
import org.telegram.tgnet.TLRPC$TL_sponsoredWebPage;
import org.telegram.tgnet.TLRPC$TL_storyItemDeleted;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultAccepted;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultDefault;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultRequest;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStory;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AdjustPanLayoutHelper;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.EmojiThemes;
import org.telegram.ui.ActionBar.INavigationLayout;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MessagesSearchAdapter;
import org.telegram.ui.AvatarPreviewer;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AttachBotIntroTopView;
import org.telegram.ui.Components.AudioPlayerAlert;
import org.telegram.ui.Components.AutoDeletePopupWrapper;
import org.telegram.ui.Components.BackButtonMenu;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BluredView;
import org.telegram.ui.Components.BlurredFrameLayout;
import org.telegram.ui.Components.BotCommandsMenuContainer;
import org.telegram.ui.Components.BotCommandsMenuView;
import org.telegram.ui.Components.BotWebViewSheet;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ChatActivityEnterTopView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatActivityInterface;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlertDocumentLayout;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.ChatGreetingsView;
import org.telegram.ui.Components.ChatNotificationsPopupWrapper;
import org.telegram.ui.Components.ChatScrimPopupContainerLayout;
import org.telegram.ui.Components.ChatThemeBottomSheet;
import org.telegram.ui.Components.ChecksHintView;
import org.telegram.ui.Components.CircularProgressDrawable;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CounterView;
import org.telegram.ui.Components.CrossfadeDrawable;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EditTextCaption;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiPacksAlert;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FireworksOverlay;
import org.telegram.ui.Components.FloatingDebug.FloatingDebugController;
import org.telegram.ui.Components.FloatingDebug.FloatingDebugProvider;
import org.telegram.ui.Components.Forum.ForumUtilities;
import org.telegram.ui.Components.ForwardingPreviewView;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.GigagroupConvertAlert;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.ImportingAlert;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.InviteMembersBottomSheet;
import org.telegram.ui.Components.JoinGroupAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MessageContainsEmojiButton;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PhonebookShareAlert;
import org.telegram.ui.Components.PinnedLineView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.PollVotesAlert;
import org.telegram.ui.Components.PopupSwipeBackLayout;
import org.telegram.ui.Components.Premium.GiftPremiumBottomSheet;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.Premium.PremiumPreviewBottomSheet;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.ReactedHeaderView;
import org.telegram.ui.Components.ReactedUsersListView;
import org.telegram.ui.Components.ReactionTabHolderView;
import org.telegram.ui.Components.Reactions.ChatSelectionReactionMenuOverlay;
import org.telegram.ui.Components.Reactions.ReactionsEffectOverlay;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.ReactionsContainerLayout;
import org.telegram.ui.Components.RecyclerAnimationScrollHelper;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ReportAlert;
import org.telegram.ui.Components.SearchCounterView;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.SuggestEmojiView;
import org.telegram.ui.Components.TextSelectionHint;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.ThemeEditorView;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TranslateAlert2;
import org.telegram.ui.Components.TranslateButton;
import org.telegram.ui.Components.TrendingStickersAlert;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.UnreadCounterTextView;
import org.telegram.ui.Components.ViewHelper;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.Components.voip.CellFlickerDrawable;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.ContactAddActivity;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.GroupCreateActivity;
import org.telegram.ui.LocationActivity;
import org.telegram.ui.PhotoAlbumPickerActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.PollCreateActivity;
import org.telegram.ui.Stories.StoriesListPlaceProvider;
import org.telegram.ui.Stories.StoriesUtilities;
import org.telegram.ui.Stories.StoryViewer;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes3.dex */
public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate, ChatActivityInterface, FloatingDebugProvider, InstantCameraView.Delegate {
    private static int SKELETON_LIGHT_OVERLAY_ALPHA = 22;
    private static float SKELETON_SATURATION = 1.4f;
    private static int lastStableId = 10;
    public static Pattern privateMsgUrlPattern;
    public static Pattern publicMsgUrlPattern;
    private static ArrayList<ChatActivityTextSelectionHelper> textSelectionHelpersCache;
    public static Pattern voiceChatUrlPattern;
    private Paint actionBarBackgroundPaint;
    private ArrayList<View> actionModeViews;
    private long activityResumeTime;
    private ActionBarMenuItem.Item addContactItem;
    private TextView addToContactsButton;
    private boolean addToContactsButtonArchive;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private float alertViewEnterProgress;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond;
    public boolean allowExpandPreviewByClick;
    private boolean allowStickersPanel;
    private HashMap<MessageObject, Boolean> alreadyPlayedStickers;
    boolean animateProgressViewTo;
    private ArrayList<ChatMessageCell> animateSendingViews;
    private HashMap<TLRPC$Document, Integer> animatingDocuments;
    private ClippingImageView animatingImageView;
    public ArrayList<MessageObject> animatingMessageObjects;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenu.LazyItem attachItem;
    private String attachMenuBotStartCommand;
    private String attachMenuBotToOpen;
    private ActionBarMenu.LazyItem audioCallIconItem;
    private ChatAvatarContainer avatarContainer;
    private ChatActivity backToPreviousFragment;
    private ChatBigEmptyView bigEmptyView;
    private BluredView blurredView;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private MessageObject botButtons;
    private PhotoViewer.PhotoViewerProvider botContextProvider;
    private ArrayList<Object> botContextResults;
    private LongSparseArray<TLRPC$BotInfo> botInfo;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private BlurredFrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private BlurredFrameLayout bottomOverlayChat;
    private UnreadCounterTextView bottomOverlayChatText;
    private boolean bottomOverlayChatWaitsReply;
    private ImageView bottomOverlayImage;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayStartButton;
    private TextView bottomOverlayText;
    private float bottomPanelTranslationY;
    private float bottomPanelTranslationYReverse;
    Bulletin.Delegate bulletinDelegate;
    private boolean[] cacheEndReached;
    private int canEditMessagesCount;
    private int canForwardMessagesCount;
    private int canSaveDocumentsCount;
    private int canSaveMusicCount;
    private boolean canShowPagedownButton;
    private Runnable cancelFixedPositionRunnable;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    private int cantSaveMessagesCount;
    private ValueAnimator changeBoundAnimator;
    private ChatActivityDelegate chatActivityDelegate;
    private ChatActivityEnterTopView chatActivityEnterTopView;
    protected ChatActivityEnterView chatActivityEnterView;
    private boolean chatActivityEnterViewAnimateBeforeSending;
    private int chatActivityEnterViewAnimateFromTop;
    private ChatActivityAdapter chatAdapter;
    public ChatAttachAlert chatAttachAlert;
    private int chatEmojiViewPadding;
    private long chatEnterTime;
    protected TLRPC$ChatFull chatInfo;
    private TLRPC$ChatInvite chatInvite;
    private Runnable chatInviteRunnable;
    private long chatInviterId;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private ChatListItemAnimator chatListItemAnimator;
    private RecyclerListView chatListView;
    private boolean chatListViewAttached;
    private float chatListViewPaddingTop;
    private int chatListViewPaddingVisibleOffset;
    private ArrayList<ChatMessageCell> chatMessageCellsCache;
    private final ChatMessagesMetadataController chatMessagesMetadataController;
    private int chatMode;
    private ChatNotificationsPopupWrapper chatNotificationsPopupWrapper;
    private RecyclerAnimationScrollHelper chatScrollHelper;
    private final ChatScrollCallback chatScrollHelperCallback;
    private ChatThemeBottomSheet chatThemeBottomSheet;
    private boolean chatWasReset;
    private TextView chatWithAdminTextView;
    private Runnable checkPaddingsRunnable;
    private boolean checkTextureViewPosition;
    private Runnable checkTranslationRunnable;
    private ChecksHintView checksHintView;
    private ActionBarMenuItem.Item clearHistoryItem;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private ActionBarMenuItem.Item closeTopicItem;
    private int commentLoadingGuid;
    private int commentLoadingMessageId;
    private int commentMessagesLoadingGuid;
    private int commentMessagesRequestId;
    private int commentRequestId;
    private int contentPaddingTop;
    private float contentPanTranslation;
    public ChatActivityFragmentView contentView;
    private boolean createGroupCall;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC$Chat currentChat;
    protected TLRPC$EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    private int currentPinnedMessageId;
    private int[] currentPinnedMessageIndex;
    protected TLRPC$User currentUser;
    private Runnable delayedReadRunnable;
    private Runnable destroyTextureViewRunnable;
    int dialogFilterId;
    int dialogFolderId;
    private long dialog_id;
    private Long dialog_id_Long;
    private int distanceToPeer;
    private ChatMessageCell drawLaterRoundProgressCell;
    public float drawingChatLisViewYoffset;
    private ChatMessageCell dummyMessageCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenu.LazyItem editTextItem;
    private int editTextStart;
    private MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    public EmojiAnimationsOverlay emojiAnimationsOverlay;
    private View emojiButtonRed;
    private HintView emojiHintTextView;
    private LinkSpanDrawable.LinksTextView emojiStatusSpamHint;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private boolean[] endReached;
    private boolean filledEditTextItemMenu;
    private FireworksOverlay fireworksOverlay;
    private boolean first;
    private boolean firstLoading;
    boolean firstOpen;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private int fixedKeyboardHeight;
    private FlagSecureReason flagSecure;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private float floatingDateViewOffset;
    public boolean forceDisallowApplyWallpeper;
    public boolean forceDisallowRedrawThemeDescriptions;
    private boolean forceHistoryEmpty;
    private int forceNextPinnedMessageId;
    private boolean forceScrollToFirst;
    private boolean forceScrollToTop;
    private TLRPC$TL_forumTopic forumTopic;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private boolean[] forwardEndReached;
    private HintView forwardHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    private ForwardingMessagesParams forwardingMessages;
    ForwardingPreviewView forwardingPreviewView;
    private ArrayList<CharSequence> foundUrls;
    private TLRPC$WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    public boolean fragmentOpened;
    private AnimatorSet fragmentTransition;
    private Runnable fragmentTransitionRunnable;
    private boolean fromPullingDownTransition;
    private HintView fwdRestrictedBottomHint;
    private HintView fwdRestrictedTopHint;
    private HintView gifHintTextView;
    private boolean globalIgnoreLayout;
    private ChatGreetingsView greetingsViewContainer;
    private ChatObject.Call groupCall;
    private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap;
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private int hideDateDelay;
    private boolean hideForwardEndReached;
    public int highlightMessageId;
    private MessageObject hintMessageObject;
    private int hintMessageType;
    private boolean ignoreAttachOnPause;
    private ChatActionCell infoTopView;
    private Animator infoTopViewAnimator;
    private String inlineQueryForInput;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean invalidateChatListViewTopPadding;
    private boolean invalidateMessagesVisiblePart;
    private boolean isComments;
    private boolean isFullyVisible;
    private boolean isPauseOnThemePreview;
    public boolean isTopic;
    public boolean justCreatedChat;
    public boolean justCreatedTopic;
    private boolean lastCallCheckFromServer;
    private int lastLoadIndex;
    private int lastSkeletonCount;
    private int lastSkeletonMessageCount;
    private float lastTouchY;
    private long lastTranslationCheck;
    private int last_message_id;
    private int linkSearchRequestId;
    private Boolean liteModeChat;
    private boolean livestream;
    private int loadedPinnedMessagesCount;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private SparseArray<Boolean> loadingPinnedMessages;
    private boolean loadingPinnedMessagesList;
    private int loadsCount;
    private boolean locationAlertShown;
    private int[] maxDate;
    private int[] maxMessageId;
    private boolean maybeStartTrackingSlidingView;
    private HintView mediaBanTooltip;
    public MentionsContainerView mentionContainer;
    private AnimatorSet mentionListAnimation;
    private FrameLayout mentiondownButton;
    private ValueAnimator mentiondownButtonAnimation;
    private SimpleTextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private float mentionsButtonEnterProgress;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private ActionBarMenuSubItem menuDeleteItem;
    private long mergeDialogId;
    private Animator messageEditTextAnimator;
    public MessageEnterTransitionContainer messageEnterTransitionContainer;
    private Bulletin messageSeenPrivacyBulletin;
    private List<MessageSkeleton> messageSkeletons;
    public ArrayList<MessageObject> messages;
    private HashMap<String, ArrayList<MessageObject>> messagesByDays;
    private SparseArray<MessageObject>[] messagesDict;
    private MessagesSearchAdapter messagesSearchAdapter;
    private RecyclerListView messagesSearchListView;
    private AnimatorSet messagesSearchListViewAnimation;
    private int[] minDate;
    private int[] minMessageId;
    private ActionBarMenuItem.Item muteItem;
    private ActionBarMenuItem.Item muteItemGap;
    private MessageObject needAnimateToMessage;
    private boolean needRemovePreviousSameChatActivity;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private boolean nextScrollForce;
    private int nextScrollForcePinnedMessageId;
    private int nextScrollFromMessageId;
    private int nextScrollLoadIndex;
    private boolean nextScrollSelect;
    private int nextScrollToMessageId;
    private HintView noSoundHintView;
    private ArrayList<MessageObject> notPushedSponsoredMessages;
    private Runnable onChatMessagesLoaded;
    RecyclerListView.OnItemClickListenerExtended onItemClickListener;
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener;
    public Runnable onThemeChange;
    public boolean openAnimationEnded;
    private long openAnimationStartTime;
    private boolean openImport;
    protected boolean openKeyboardOnAttachMenuClose;
    private boolean openSearchKeyboard;
    private View overlayView;
    private ValueAnimator pagedownAnimator;
    private FrameLayout pagedownButton;
    private ValueAnimator pagedownButtonAnimation;
    private ImageView pagedownButtonArrow;
    private CounterView pagedownButtonCounter;
    private float pagedownButtonEnterProgress;
    private ImageView pagedownButtonImage;
    private ImageView pagedownButtonLoading;
    private CircularProgressDrawable pagedownButtonLoadingDrawable;
    private boolean pagedownButtonShowedByScroll;
    private float pagedownLoadingT;
    private boolean paused;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private ChatActivityMemberRequestsDelegate pendingRequestsDelegate;
    private ArrayList<MessageObject> pendingSendMessages;
    private SparseArray<MessageObject> pendingSendMessagesDict;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider;
    private int pinBullerinTag;
    private Bulletin pinBulletin;
    private PinchToZoomHelper pinchToZoomHelper;
    private NumberTextView pinnedCounterTextView;
    private int pinnedCounterTextViewX;
    private boolean pinnedEndReached;
    private int pinnedImageCacheType;
    private boolean pinnedImageHasBlur;
    private TLRPC$PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC$PhotoSize pinnedImageThumbLocation;
    private PinnedLineView pinnedLineView;
    private AnimatorSet pinnedListAnimator;
    private ImageView pinnedListButton;
    private PinnedMessageButton[] pinnedMessageButton;
    private boolean pinnedMessageButtonShown;
    private float pinnedMessageEnterOffset;
    private ArrayList<Integer> pinnedMessageIds;
    private BackupImageView[] pinnedMessageImageView;
    private HashMap<Integer, MessageObject> pinnedMessageObjects;
    private SimpleTextView[] pinnedMessageTextView;
    private BlurredFrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private TrackingWidthSimpleTextView[] pinnedNameTextView;
    private AnimatorSet[] pinnedNextAnimation;
    private RadialProgressView pinnedProgress;
    private boolean pinnedProgressIsShowing;
    private ChatMessageCell pollHintCell;
    private HintView pollHintView;
    private int pollHintX;
    private int pollHintY;
    private LongSparseArray<ArrayList<MessageObject>> polls;
    private ArrayList<MessageObject> pollsToCheck;
    private NotificationCenter.PostponeNotificationCallback postponeNotificationsWhileLoadingCallback;
    private final DialogInterface.OnCancelListener postponedScrollCancelListener;
    private boolean postponedScrollIsCanceled;
    private int postponedScrollMessageId;
    private int postponedScrollMinMessageId;
    private int postponedScrollToLastMessageQueryIndex;
    private TLRPC$Document preloadedGreetingsSticker;
    private boolean premiumInvoiceBot;
    private int prevSetUnreadCount;
    private RadialProgressView progressBar;
    private AlertDialog progressDialog;
    private int progressDialogAtMessageId;
    private int progressDialogAtMessageType;
    private String progressDialogBotButtonUrl;
    private Browser.Progress progressDialogCurrent;
    private CharacterStyle progressDialogLinkSpan;
    private FrameLayout progressView;
    private View progressView2;
    private float pullingBottomOffset;
    private float pullingDownAnimateProgress;
    private ChatActivity pullingDownAnimateToActivity;
    private Animator pullingDownBackAnimator;
    private ChatPullingDownDrawable pullingDownDrawable;
    private float pullingDownOffset;
    private ValueAnimator reactionsMentionButtonAnimation;
    private float reactionsMentionButtonEnterProgress;
    private int reactionsMentionCount;
    private FrameLayout reactionsMentiondownButton;
    private CounterView reactionsMentiondownButtonCounter;
    private ImageView reactionsMentiondownButtonImage;
    private SparseArray<MessageObject> repliesMessagesDict;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private boolean replyImageHasMediaSpoiler;
    private TLRPC$PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC$PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private int replyMaxReadId;
    private MessageObject replyMessageHeaderObject;
    private SparseArray<ArrayList<Integer>> replyMessageOwners;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectHintTextView;
    private SimpleTextView replyObjectTextView;
    private TLRPC$Chat replyOriginalChat;
    private int replyOriginalMessageId;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private AnimatorSet reportSpamViewAnimator;
    private int reportType;
    private TextView restartTopicButton;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private TLRPC$TL_messages_discussionMessage savedDiscussionMessage;
    private TLRPC$messages_Messages savedHistory;
    private boolean savedNoDiscussion;
    private boolean savedNoHistory;
    private int scheduledMessagesCount;
    private HintView scheduledOrNoSoundHint;
    private AnimatorSet scrimAnimatorSet;
    private Paint scrimPaint;
    private float scrimPaintAlpha;
    public ActionBarPopupWindow scrimPopupWindow;
    private boolean scrimPopupWindowHideDimOnDismiss;
    private ActionBarMenuSubItem[] scrimPopupWindowItems;
    private int scrimPopupX;
    private int scrimPopupY;
    private View scrimView;
    private float scrimViewAlpha;
    private ValueAnimator scrimViewAlphaAnimator;
    private String scrimViewReaction;
    private int scrollAnimationIndex;
    private boolean scrollByTouch;
    private int scrollCallbackAnimationIndex;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition;
    private int scrollToOffsetOnRecreate;
    private int scrollToPositionOnRecreate;
    private boolean scrollToThreadMessage;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private HintView searchAsListHint;
    private boolean searchAsListHintShown;
    private View searchAsListTogglerView;
    private ImageView searchCalendarButton;
    private BlurredFrameLayout searchContainer;
    private SearchCounterView searchCountText;
    private ImageView searchDownButton;
    private ValueAnimator searchExpandAnimator;
    private float searchExpandProgress;
    private ActionBarMenuItem searchIconItem;
    private ActionBarMenuItem searchItem;
    private SearchItemListener searchItemListener;
    private boolean searchItemVisible;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private TLRPC$Chat searchingChatMessages;
    private boolean searchingForUser;
    private TLRPC$User searchingUserMessages;
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds;
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds;
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray<MessageObject>[] selectedMessagesIds;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private MessageObject selectedObjectToEditCaption;
    private ChatSelectionReactionMenuOverlay selectionReactionsOverlay;
    private TLRPC$TL_channels_sendAsPeers sendAsPeersObj;
    private boolean sentBotStart;
    private boolean setPinnedTextTranslationX;
    public int shareAlertDebugMode;
    public boolean shareAlertDebugTopicsSlowMotion;
    private boolean showAudioCallAsIcon;
    private boolean showCloseChatDialogLater;
    private boolean showPinBulletin;
    private final Runnable showScheduledOrNoSoundRunnable;
    private boolean showScrollToMessageError;
    private boolean showSearchAsIcon;
    private boolean showTapForForwardingOptionsHit;
    private boolean shownRestartTopic;
    private boolean shownTranslateTopic;
    private Theme.MessageDrawable.PathDrawParams skeletonBackgroundCacheParams;
    private Theme.MessageDrawable skeletonBackgroundDrawable;
    private int skeletonColor0;
    private int skeletonColor1;
    private ColorMatrix skeletonColorMatrix;
    private LinearGradient skeletonGradient;
    private int skeletonGradientWidth;
    private long skeletonLastUpdateTime;
    private Matrix skeletonMatrix;
    private LinearGradient skeletonOutlineGradient;
    private Matrix skeletonOutlineMatrix;
    private Paint skeletonOutlinePaint;
    private Paint skeletonPaint;
    private Paint skeletonServicePaint;
    private int skeletonTotalTranslation;
    private ChatMessageCell slidingView;
    private HintView slowModeHint;
    private boolean sponsoredMessagesAdded;
    private int sponsoredMessagesPostsBetween;
    private int startFromVideoMessageId;
    private int startFromVideoTimestamp;
    private int startLoadFromDate;
    private int startLoadFromMessageId;
    private int startLoadFromMessageOffset;
    private long startMessageAppearTransitionMs;
    private String startVideoEdit;
    private boolean startedTrackingSlidingView;
    private SuggestEmojiView suggestEmojiPanel;
    private boolean swipeBackEnabled;
    private boolean switchFromTopics;
    private boolean switchingFromTopics;
    private float switchingFromTopicsProgress;
    private Runnable tapForForwardingOptionsHitRunnable;
    private ChatActivityTextSelectionHelper textSelectionHelper;
    private TextSelectionHint textSelectionHint;
    private boolean textSelectionHintWasShowed;
    public ThemeDelegate themeDelegate;
    private int threadMaxInboxReadId;
    private int threadMaxOutboxReadId;
    private boolean threadMessageAdded;
    private int threadMessageId;
    private MessageObject threadMessageObject;
    private ArrayList<MessageObject> threadMessageObjects;
    private boolean threadMessageVisible;
    private int threadUnreadMessagesCount;
    private ActionBarMenuItem.Item timeItem2;
    private HintView timerHintView;
    private boolean toPullingDownTransition;
    private BlurredFrameLayout topChatPanelView;
    private float topChatPanelViewOffset;
    private UndoView topUndoView;
    private float topViewOffset;
    private View topViewSeparator1;
    private View topViewSeparator2;
    private View topViewSeparator3;
    private int topViewWasVisible;
    private MessageObject topicStarterMessageObject;
    private int totalPinnedMessagesCount;
    private int transitionAnimationGlobalIndex;
    private int transitionAnimationIndex;
    private TranslateButton translateButton;
    private ActionBarMenuItem.Item translateItem;
    private UndoView undoView;
    private MessageObject unreadMessageObject;
    private Runnable unselectRunnable;
    private Runnable updateDeleteItemRunnable;
    Runnable updatePinnedProgressRunnable;
    Runnable updateReactionRunnable;
    private boolean userBlocked;
    protected TLRPC$UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private ActionBarMenuItem.Item viewAsTopics;
    private String voiceChatHash;
    private HintView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private ArrayList<Integer> waitingForLoad;
    private SparseArray<MessageObject> waitingForReplies;
    private boolean waitingForReplyMessageLoad;
    private boolean waitingForSendingMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;
    private static final int[] allowedNotificationsDuringChatListAnimations = {NotificationCenter.messagesRead, NotificationCenter.threadMessagesRead, NotificationCenter.commentsRead, NotificationCenter.messagesReadEncrypted, NotificationCenter.messagesReadContent, NotificationCenter.didLoadPinnedMessages, NotificationCenter.newDraftReceived, NotificationCenter.updateMentionsCount, NotificationCenter.didUpdateConnectionState, NotificationCenter.updateDefaultSendAsPeer, NotificationCenter.closeChats, NotificationCenter.chatInfoCantLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.pinnedInfoDidLoad, NotificationCenter.didSetNewWallpapper, NotificationCenter.didApplyNewTheme};
    private static boolean replacingChatActivity = false;

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public interface ChatActivityDelegate {

        /* loaded from: classes3.dex */
        public final /* synthetic */ class -CC {
            public static void $default$onReport(ChatActivityDelegate chatActivityDelegate) {
            }

            public static void $default$onUnpin(ChatActivityDelegate chatActivityDelegate, boolean z, boolean z2) {
            }

            public static void $default$openReplyMessage(ChatActivityDelegate chatActivityDelegate, int i) {
            }

            public static void $default$openSearch(ChatActivityDelegate chatActivityDelegate, String str) {
            }
        }

        void onReport();

        void onUnpin(boolean z, boolean z2);

        void openReplyMessage(int i);

        void openSearch(String str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createActionMode$67(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createEmptyView$208(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$createView$43(View view, MotionEvent motionEvent) {
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$markSponsoredAsRead$273(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$showChatThemeBottomSheet$277(MotionEvent motionEvent) {
        return true;
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public /* synthetic */ void startMusicSelectActivity() {
        ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate.-CC.$default$startMusicSelectActivity(this);
    }

    static /* synthetic */ float access$13616(ChatActivity chatActivity, float f) {
        float f2 = chatActivity.pullingDownOffset + f;
        chatActivity.pullingDownOffset = f2;
        return f2;
    }

    static /* synthetic */ int access$16316(ChatActivity chatActivity, float f) {
        int i = (int) (chatActivity.skeletonTotalTranslation + f);
        chatActivity.skeletonTotalTranslation = i;
        return i;
    }

    static /* synthetic */ int access$21110(ChatActivity chatActivity) {
        int i = chatActivity.newMentionsCount;
        chatActivity.newMentionsCount = i - 1;
        return i;
    }

    static /* synthetic */ int access$27304(ChatActivity chatActivity) {
        int i = chatActivity.pinBullerinTag + 1;
        chatActivity.pinBullerinTag = i;
        return i;
    }

    static /* synthetic */ int access$3608(ChatActivity chatActivity) {
        int i = chatActivity.scheduledMessagesCount;
        chatActivity.scheduledMessagesCount = i + 1;
        return i;
    }

    static /* synthetic */ int access$3612(ChatActivity chatActivity, int i) {
        int i2 = chatActivity.scheduledMessagesCount + i;
        chatActivity.scheduledMessagesCount = i2;
        return i2;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void access$43600(ChatActivity chatActivity) {
        chatActivity.resetProgressDialogLoading();
    }

    static /* synthetic */ int access$47308() {
        int i = lastStableId;
        lastStableId = i + 1;
        return i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$1(DialogInterface dialogInterface) {
        this.postponedScrollIsCanceled = true;
        this.postponedScrollMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceNextPinnedMessageId = 0;
        invalidateMessagesVisiblePart();
        showPinnedProgress(false);
    }

    public static ChatActivity of(long j) {
        Bundle bundle = new Bundle();
        if (j >= 0) {
            bundle.putLong("user_id", j);
        } else {
            bundle.putLong("chat_id", -j);
        }
        return new ChatActivity(bundle);
    }

    public void deleteHistory(final int i, final int i2, final boolean z) {
        this.chatAdapter.frozenMessages.clear();
        for (int i3 = 0; i3 < this.messages.size(); i3++) {
            MessageObject messageObject = this.messages.get(i3);
            int i4 = messageObject.messageOwner.date;
            if (i4 <= i || i4 >= i2) {
                this.chatAdapter.frozenMessages.add(messageObject);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        if (this.chatAdapter.frozenMessages.isEmpty()) {
            showProgressView(true);
        }
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = true;
        chatActivityAdapter.notifyDataSetChanged(true);
        UndoView undoView = getUndoView();
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 81, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda190
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$3(i, i2, z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda153
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$3(int i, int i2, boolean z) {
        getMessagesController().deleteMessagesRange(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.dialog_id : 0L, i, i2, z, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda165
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$deleteHistory$2();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$2() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteHistory$4() {
        this.chatAdapter.frozenMessages.clear();
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        chatActivityAdapter.isFrozen = false;
        chatActivityAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    public void showHeaderItem(boolean z) {
        if (z) {
            if (this.chatActivityEnterView.hasText() && TextUtils.isEmpty(this.chatActivityEnterView.getSlowModeTimer())) {
                ActionBarMenu.LazyItem lazyItem = this.attachItem;
                if (lazyItem != null) {
                    lazyItem.setVisibility(0);
                }
                ActionBarMenuItem actionBarMenuItem = this.headerItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(8);
                    return;
                }
                return;
            }
            ActionBarMenu.LazyItem lazyItem2 = this.attachItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(0);
                return;
            }
            return;
        }
        ActionBarMenu.LazyItem lazyItem3 = this.attachItem;
        if (lazyItem3 != null) {
            lazyItem3.setVisibility(8);
        }
        ActionBarMenuItem actionBarMenuItem3 = this.headerItem;
        if (actionBarMenuItem3 != null) {
            actionBarMenuItem3.setVisibility(8);
        }
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public int getTopicId() {
        if (this.isTopic) {
            return this.threadMessageId;
        }
        return 0;
    }

    @Override // org.telegram.ui.Components.FloatingDebug.FloatingDebugProvider
    public List<FloatingDebugController.DebugItem> onGetDebugItems() {
        String string;
        ArrayList arrayList = new ArrayList();
        if (ChatObject.isChannel(this.currentChat)) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugShareAlert)));
            int i = this.shareAlertDebugMode;
            if (i == 1) {
                string = LocaleController.getString(R.string.DebugShareAlertDialogsModeLess);
            } else if (i != 2) {
                string = LocaleController.getString(R.string.DebugShareAlertDialogsModeNormal);
            } else {
                string = LocaleController.getString(R.string.DebugShareAlertDialogsModeMore);
            }
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.formatString(R.string.DebugShareAlertSwitchDialogsMode, string), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda133
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$5();
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugShareAlertTopicsSlowMotion), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda129
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onGetDebugItems$6();
                }
            }));
        }
        if (this.currentUser == null) {
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletons)));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletonsLightOverlayAlpha), 0.0f, 255.0f, new AnimationProperties.FloatProperty(this, "") { // from class: org.telegram.ui.ChatActivity.5
                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    int unused = ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA = (int) f;
                }

                @Override // android.util.Property
                public Float get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
                }
            }));
            arrayList.add(new FloatingDebugController.DebugItem(LocaleController.getString(R.string.DebugMessageSkeletonsSaturation), 1.0f, 10.0f, new AnimationProperties.FloatProperty("") { // from class: org.telegram.ui.ChatActivity.6
                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                public void setValue(Object obj, float f) {
                    float unused = ChatActivity.SKELETON_SATURATION = f;
                    ChatActivity.this.skeletonColorMatrix.setSaturation(f);
                    ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                }

                @Override // android.util.Property
                public Float get(Object obj) {
                    return Float.valueOf(ChatActivity.SKELETON_SATURATION);
                }
            }));
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$5() {
        int i = this.shareAlertDebugMode + 1;
        this.shareAlertDebugMode = i;
        this.shareAlertDebugMode = i % 3;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onGetDebugItems$6() {
        this.shareAlertDebugTopicsSlowMotion = !this.shareAlertDebugTopicsSlowMotion;
    }

    public boolean allowSendPhotos() {
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        return tLRPC$Chat == null || ChatObject.canSendPhoto(tLRPC$Chat);
    }

    public void updateMessages(ArrayList<MessageObject> arrayList, boolean z) {
        for (int i = 0; i < arrayList.size(); i++) {
            this.chatAdapter.updateRowWithMessageObject(arrayList.get(i), false, z);
        }
    }

    public RecyclerListView getChatListView() {
        return this.chatListView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMultiselect(int i) {
        int i2 = i - this.chatAdapter.messagesStartRow;
        if (i2 < 0 || i2 >= this.messages.size()) {
            return;
        }
        MessageObject messageObject = this.messages.get(i2);
        final boolean z = this.selectedMessagesIds[0].get(messageObject.getId(), null) == null && this.selectedMessagesIds[1].get(messageObject.getId(), null) == null;
        final SparseArray sparseArray = new SparseArray();
        for (int i3 = 0; i3 < this.selectedMessagesIds[0].size(); i3++) {
            sparseArray.put(this.selectedMessagesIds[0].keyAt(i3), this.selectedMessagesIds[0].valueAt(i3));
        }
        for (int i4 = 0; i4 < this.selectedMessagesIds[1].size(); i4++) {
            sparseArray.put(this.selectedMessagesIds[1].keyAt(i4), this.selectedMessagesIds[1].valueAt(i4));
        }
        this.chatListView.startMultiselect(i, false, new RecyclerListView.onMultiSelectionChanged() { // from class: org.telegram.ui.ChatActivity.10
            boolean limitReached;

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void onSelectionChanged(int i5, boolean z2, float f, float f2) {
                int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (z) {
                    z2 = !z2;
                }
                if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                    return;
                }
                MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                if (!z2 || (ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) < 0 && ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) < 0)) {
                    if ((z2 || ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) >= 0) && messageObject2.contentType == 0) {
                        if (z2 && ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() >= 100) {
                            this.limitReached = true;
                        } else {
                            this.limitReached = false;
                        }
                        RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i5);
                        if (findViewHolderForAdapterPosition != null) {
                            View view = findViewHolderForAdapterPosition.itemView;
                            if (view instanceof ChatMessageCell) {
                                ChatActivity.this.processRowSelect(view, false, f, f2);
                                return;
                            }
                        }
                        ChatActivity.this.addToSelectedMessages(messageObject2, false);
                        ChatActivity.this.updateActionModeTitle();
                        ChatActivity.this.updateVisibleRows();
                    }
                }
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public boolean canSelect(int i5) {
                int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (i6 < 0 || i6 >= ChatActivity.this.messages.size()) {
                    return false;
                }
                MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                if (messageObject2.contentType == 0) {
                    if (z || sparseArray.get(messageObject2.getId(), null) != null) {
                        return z && sparseArray.get(messageObject2.getId(), null) != null;
                    }
                    return true;
                }
                return false;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public int checkPosition(int i5, boolean z2) {
                MessageObject.GroupedMessages groupedMessages;
                int i6 = i5 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (i6 >= 0 && i6 < ChatActivity.this.messages.size()) {
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i6);
                    if (messageObject2.contentType == 0 && messageObject2.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject2.getGroupId())) != null) {
                        ArrayList<MessageObject> arrayList = groupedMessages.messages;
                        return ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(arrayList.get(z2 ? 0 : arrayList.size() - 1));
                    }
                }
                return i5;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public boolean limitReached() {
                return this.limitReached;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void getPaddings(int[] iArr) {
                iArr[0] = (int) ChatActivity.this.chatListViewPaddingTop;
                iArr[1] = ChatActivity.this.blurredViewBottomOffset;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void scrollBy(int i5) {
                ChatActivity.this.chatListView.scrollBy(0, i5);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 11 implements RecyclerListView.OnItemClickListenerExtended {
        11() {
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onItemClick(View view, int i, float f, float f2) {
            if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                return;
            }
            ChatActivity.this.wasManualScroll = true;
            boolean z = view instanceof ChatActionCell;
            boolean z2 = false;
            if (z) {
                ChatActionCell chatActionCell = (ChatActionCell) view;
                if (chatActionCell.getMessageObject().isDateObject) {
                    Bundle bundle = new Bundle();
                    int i2 = chatActionCell.getMessageObject().messageOwner.date;
                    bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                    bundle.putInt("topic_id", ChatActivity.this.getTopicId());
                    bundle.putInt("type", 0);
                    ChatActivity.this.presentFragment(new CalendarActivity(bundle, 0, i2));
                    return;
                }
            }
            if (z) {
                ChatActionCell chatActionCell2 = (ChatActionCell) view;
                if (chatActionCell2.getMessageObject() != null && (chatActionCell2.getMessageObject().messageOwner.action instanceof TLRPC$TL_messageActionSetSameChatWallPaper)) {
                    final int replyMsgId = chatActionCell2.getMessageObject().getReplyMsgId();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$11$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.11.this.lambda$onItemClick$0(replyMsgId);
                        }
                    }, 16L);
                    return;
                }
            }
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                ChatActivity.this.createMenu(view, true, false, f, f2);
                return;
            }
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                if (ChatActivity.this.textSelectionHelper.isSelected(chatMessageCell.getMessageObject())) {
                    return;
                }
                z2 = !chatMessageCell.isInsideBackground(f, f2);
            }
            ChatActivity.this.processRowSelect(view, z2, f, f2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public boolean hasDoubleTap(View view, int i) {
            TLRPC$ChatFull tLRPC$ChatFull;
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
            if (tLRPC$TL_availableReaction != null || (doubleTapReaction != null && doubleTapReaction.startsWith("animated_"))) {
                boolean z = ChatActivity.this.dialog_id >= 0;
                if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                    if (tLRPC$TL_availableReaction != null) {
                        doubleTapReaction = tLRPC$TL_availableReaction.reaction;
                    }
                    z = ChatObject.reactionIsAvailable(tLRPC$ChatFull, doubleTapReaction);
                }
                if (z && (view instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                    return (chatMessageCell.getMessageObject().isSending() || chatMessageCell.getMessageObject().isEditing() || chatMessageCell.getMessageObject().type == 16 || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || chatMessageCell.getMessageObject().isSponsored()) ? false : true;
                }
                return false;
            }
            return false;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onDoubleTap(View view, int i, float f, float f2) {
            boolean z;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$ChatFull tLRPC$ChatFull2;
            if (!(view instanceof ChatMessageCell) || ChatActivity.this.getParentActivity() == null || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || ChatActivity.this.isInPreviewMode()) {
                return;
            }
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject primaryMessageObject = chatMessageCell.getPrimaryMessageObject();
            if (primaryMessageObject.isSecretMedia() || primaryMessageObject.isExpiredStory()) {
                return;
            }
            ReactionsEffectOverlay.removeCurrent(false);
            String doubleTapReaction = ChatActivity.this.getMediaDataController().getDoubleTapReaction();
            if (doubleTapReaction.startsWith("animated_")) {
                z = ChatActivity.this.dialog_id >= 0;
                if (!z && (tLRPC$ChatFull2 = ChatActivity.this.chatInfo) != null) {
                    z = ChatObject.reactionIsAvailable(tLRPC$ChatFull2, doubleTapReaction);
                }
                if (z) {
                    ChatActivity.this.selectReaction(primaryMessageObject, null, null, f, f2, ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(doubleTapReaction), true, false, false);
                    return;
                }
                return;
            }
            TLRPC$TL_availableReaction tLRPC$TL_availableReaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(doubleTapReaction);
            if (tLRPC$TL_availableReaction == null || chatMessageCell.getMessageObject().isSponsored()) {
                return;
            }
            z = ChatActivity.this.dialog_id >= 0;
            if (!z && (tLRPC$ChatFull = ChatActivity.this.chatInfo) != null) {
                z = ChatObject.reactionIsAvailable(tLRPC$ChatFull, tLRPC$TL_availableReaction.reaction);
            }
            if (z) {
                ChatActivity.this.selectReaction(primaryMessageObject, null, null, f, f2, ReactionsLayoutInBubble.VisibleReaction.fromEmojicon(tLRPC$TL_availableReaction), true, false, false);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class ChatActivityEnterViewDelegate implements ChatActivityEnterView.ChatActivityEnterViewDelegate {
        boolean isEditTextItemVisibilitySuppressed;
        int lastSize;

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public /* synthetic */ TLRPC$StoryItem getReplyToStory() {
            return ChatActivityEnterView.ChatActivityEnterViewDelegate.-CC.$default$getReplyToStory(this);
        }

        private ChatActivityEnterViewDelegate() {
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int getContentViewHeight() {
            return ChatActivity.this.contentView.getHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int measureKeyboardHeight() {
            return ChatActivity.this.contentView.measureKeyboardHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public TLRPC$TL_channels_sendAsPeers getSendAsPeers() {
            return ChatActivity.this.sendAsPeersObj;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageSend(CharSequence charSequence, boolean z, int i) {
            TLRPC$Message tLRPC$Message;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().addHashtagsFromMessage(charSequence);
            }
            if (i != 0) {
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                if (charSequence != null) {
                    ChatActivity.access$3608(ChatActivity.this);
                }
                if (ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty()) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivity.access$3612(chatActivity2, chatActivity2.forwardingMessages.messages.size());
                }
                ChatActivity.this.updateScheduledInterface(false);
            }
            if (!TextUtils.isEmpty(charSequence) && ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty()) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                ChatActivity.this.forwardingMessages.getSelectedMessages(arrayList);
                boolean z2 = arrayList.size() > 0;
                TLRPC$Peer peer = ChatActivity.this.getMessagesController().getPeer(ChatActivity.this.dialog_id);
                int i2 = 0;
                while (true) {
                    if (i2 >= arrayList.size()) {
                        break;
                    }
                    MessageObject messageObject = arrayList.get(i2);
                    if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && !MessageObject.peersEqual(tLRPC$Message.peer_id, peer)) {
                        z2 = false;
                        break;
                    }
                    i2++;
                }
                if (z2) {
                    ChatActivity.this.checkTopUndoView();
                    if (ChatActivity.this.topUndoView != null) {
                        ChatActivity.this.topUndoView.showWithAction(0L, 85, null, null);
                    }
                }
            }
            if (ChatObject.isForum(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity3 = ChatActivity.this;
                if (!chatActivity3.isTopic && chatActivity3.replyingMessageObject != null) {
                    int topicId = ChatActivity.this.replyingMessageObject.replyToForumTopic != null ? ChatActivity.this.replyingMessageObject.replyToForumTopic.id : MessageObject.getTopicId(ChatActivity.this.replyingMessageObject.messageOwner, true);
                    if (topicId != 0) {
                        ChatActivity.this.getMediaDataController().cleanDraft(ChatActivity.this.dialog_id, topicId, false);
                    }
                }
            }
            ChatActivity.this.hideFieldPanel(z, i, true);
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.getEmojiView() != null) {
                ChatActivity.this.chatActivityEnterView.getEmojiView().onMessageSend();
            }
            if (ChatActivity.this.getMessagesController().premiumLocked || ChatActivity.this.getMessagesController().didPressTranscribeButtonEnough() || ChatActivity.this.getUserConfig().isPremium() || TextUtils.isEmpty(charSequence) || ChatActivity.this.messages == null) {
                return;
            }
            for (int i3 = 1; i3 < Math.min(5, ChatActivity.this.messages.size()); i3++) {
                MessageObject messageObject2 = ChatActivity.this.messages.get(i3);
                if (messageObject2 != null && !messageObject2.isOutOwner() && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && messageObject2.isContentUnread())) {
                    TranscribeButton.showOffTranscribe(messageObject2);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onEditTextScroll() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuOpen() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.forceClose();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onContextMenuClose() {
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.fireUpdate();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSwitchRecordMode(boolean z) {
            ChatActivity.this.showVoiceHint(false, z);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onUpdateSlowModeButton(View view, boolean z, CharSequence charSequence) {
            ChatActivity.this.showSlowModeHint(view, z, charSequence);
            if (ChatActivity.this.headerItem == null || ChatActivity.this.headerItem.getVisibility() == 0) {
                return;
            }
            ChatActivity.this.headerItem.setVisibility(0);
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSelectionChanged(int i, int i2) {
            if (ChatActivity.this.editTextItem == null) {
                return;
            }
            final ActionBarMenu createMenu = ((BaseFragment) ChatActivity.this).actionBar.createMenu();
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.onTextSelectionChanged(i, i2);
            }
            if (i2 - i > 0) {
                if (ChatActivity.this.editTextItem.getTag() == null) {
                    ChatActivity.this.editTextItem.setTag(1);
                    if (ChatActivity.this.editTextItem.getVisibility() != 0) {
                        if (ChatActivity.this.chatMode == 0 && ((ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0)) {
                            ChatActivity.this.editTextItem.setVisibility(0);
                            ChatActivity.this.checkEditTextItemMenu();
                            ChatActivity.this.headerItem.setVisibility(8);
                            ChatActivity.this.attachItem.setVisibility(8);
                        } else {
                            ValueAnimator ofFloat = ValueAnimator.ofFloat(AndroidUtilities.dp(48.0f), 0.0f);
                            ofFloat.setDuration(220L);
                            ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                            ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.1
                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationStart(Animator animator) {
                                    ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                                    ChatActivity.this.checkEditTextItemMenu();
                                    ChatActivity.this.editTextItem.setVisibility(0);
                                    createMenu.translateXItems(AndroidUtilities.dp(48.0f));
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animator) {
                                    ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                                }
                            });
                            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda1
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                    ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$0(ActionBarMenu.this, valueAnimator);
                                }
                            });
                            ofFloat.start();
                        }
                    }
                }
                ChatActivity.this.editTextStart = i;
                ChatActivity.this.editTextEnd = i2;
            } else if (ChatActivity.this.editTextItem.getTag() != null) {
                ChatActivity.this.editTextItem.setTag(null);
                if (ChatActivity.this.editTextItem.getVisibility() != 8) {
                    if (ChatActivity.this.chatMode == 0 && ((ChatActivity.this.threadMessageId == 0 || ChatActivity.this.isTopic) && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0)) {
                        ChatActivity.this.editTextItem.setVisibility(8);
                        if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                            ChatActivity.this.headerItem.setVisibility(0);
                            ChatActivity.this.attachItem.setVisibility(8);
                            return;
                        }
                        ChatActivity.this.headerItem.setVisibility(8);
                        ChatActivity.this.attachItem.setVisibility(0);
                        return;
                    }
                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, AndroidUtilities.dp(48.0f));
                    ofFloat2.setDuration(220L);
                    ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    ofFloat2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationStart(Animator animator) {
                            ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(true);
                            ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = true;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.editTextItem.setVisibility(8);
                            createMenu.translateXItems(0.0f);
                            ((BaseFragment) ChatActivity.this).actionBar.setMenuOffsetSuppressed(false);
                            ChatActivityEnterViewDelegate.this.isEditTextItemVisibilitySuppressed = false;
                        }
                    });
                    ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ChatActivityEnterViewDelegate.lambda$onTextSelectionChanged$1(ActionBarMenu.this, valueAnimator);
                        }
                    });
                    ofFloat2.start();
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$0(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onTextSelectionChanged$1(ActionBarMenu actionBarMenu, ValueAnimator valueAnimator) {
            actionBarMenu.translateXItems(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextChanged(final CharSequence charSequence, boolean z) {
            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(charSequence) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(charSequence, ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false, false);
            }
            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }
            TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
            if ((tLRPC$Chat == null || ChatObject.canSendEmbed(tLRPC$Chat)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled() && (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption())) {
                if (z) {
                    ChatActivity.this.searchLinks(charSequence, true);
                } else {
                    ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.ChatActivityEnterViewDelegate.3
                        @Override // java.lang.Runnable
                        public void run() {
                            if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                ChatActivity.this.searchLinks(charSequence, false);
                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                            }
                        }
                    };
                    AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000L : 1000L);
                }
            }
            EmojiAnimationsOverlay emojiAnimationsOverlay = ChatActivity.this.emojiAnimationsOverlay;
            if (emojiAnimationsOverlay != null) {
                emojiAnimationsOverlay.cancelAllAnimations();
            }
            ReactionsEffectOverlay.dismissAll();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSpansChanged(CharSequence charSequence) {
            ChatActivity.this.searchLinks(charSequence, true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needSendTyping() {
            ChatActivity.this.getMessagesController().sendTyping(ChatActivity.this.dialog_id, ChatActivity.this.threadMessageId, 0, ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonHidden() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonShow() {
            if (((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible()) {
                return;
            }
            if (ChatActivity.this.headerItem != null) {
                ChatActivity.this.headerItem.setVisibility(0);
            }
            if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                ChatActivity.this.editTextItem.setVisibility(8);
            }
            if (ChatActivity.this.attachItem != null) {
                ChatActivity.this.attachItem.setVisibility(8);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageEditEnd(boolean z) {
            boolean z2;
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (z) {
                return;
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null) {
                mentionsContainerView.getAdapter().setNeedBotContext(true);
            }
            if (ChatActivity.this.editingMessageObject != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onMessageEditEnd$2();
                    }
                }, 30L);
            }
            if (ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                ChatActivity.this.chatActivityEnterView.setFieldFocused();
                z2 = true;
            } else {
                z2 = false;
            }
            ChatActivity.this.chatActivityEnterView.setAllowStickersAndGifs(true, true, true, z2);
            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                ChatActivity.this.getConnectionsManager().cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                ChatActivity.this.editingMessageObjectReqId = 0;
            }
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updateVisibleRows();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMessageEditEnd$2() {
            ChatActivity.this.hideFieldPanel(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onWindowSizeChanged(int i) {
            if (i < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                ChatActivity.this.allowStickersPanel = false;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 0) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(4);
                }
            } else {
                ChatActivity.this.allowStickersPanel = true;
                if (ChatActivity.this.suggestEmojiPanel.getVisibility() == 4) {
                    ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                }
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.allowContextBotPanel = !chatActivity.chatActivityEnterView.isPopupShowing();
            int i2 = i + (ChatActivity.this.chatActivityEnterView.isPopupShowing() ? 65536 : 0);
            if (this.lastSize != i2) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
            }
            this.lastSize = i2;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersTab(boolean z) {
            if (ChatActivity.this.emojiButtonRed != null) {
                ChatActivity.this.emojiButtonRed.setVisibility(8);
            }
            ChatActivity.this.allowContextBotPanelSecond = !z;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void didPressAttachButton() {
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordVideo(int i, boolean z, int i2) {
            ChatActivity.this.checkInstantCameraView();
            if (ChatActivity.this.instantCameraView != null) {
                if (i == 0) {
                    ChatActivity.this.instantCameraView.showCamera();
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatAdapter.updateRowsSafe();
                    return;
                }
                if (i == 1 || i == 3 || i == 4) {
                    ChatActivity.this.instantCameraView.send(i, z, i2);
                } else if (i == 2 || i == 5) {
                    ChatActivity.this.instantCameraView.cancel(i == 2);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needChangeVideoPreviewState(int i, float f) {
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.changeVideoPreviewState(i, f);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordAudio(int i) {
            int i2 = i == 0 ? 8 : 0;
            if (ChatActivity.this.overlayView.getVisibility() != i2) {
                ChatActivity.this.overlayView.setVisibility(i2);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
            if (ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                if (Bulletin.getVisibleBulletin() != null && Bulletin.getVisibleBulletin().isShowing()) {
                    Bulletin.getVisibleBulletin().hide();
                }
            } else {
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            }
            MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
            if (mentionsContainerView != null) {
                mentionsContainerView.animate().alpha(ChatActivity.this.chatActivityEnterView.isStickersExpanded() ? 0.0f : 1.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
            }
            if (ChatActivity.this.suggestEmojiPanel != null) {
                ChatActivity.this.suggestEmojiPanel.setVisibility(0);
                ChatActivity.this.suggestEmojiPanel.animate().alpha(ChatActivity.this.chatActivityEnterView.isStickersExpanded() ? 0.0f : 1.0f).setInterpolator(CubicBezierInterpolator.DEFAULT).withEndAction(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityEnterViewDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatActivityEnterViewDelegate.this.lambda$onStickersExpandedChange$3();
                    }
                }).start();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onStickersExpandedChange$3() {
            if (ChatActivity.this.suggestEmojiPanel == null || !ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                return;
            }
            ChatActivity.this.suggestEmojiPanel.setVisibility(8);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void scrollToSendingMessage() {
            int sendingMessageId = ChatActivity.this.getSendMessagesHelper().getSendingMessageId(ChatActivity.this.dialog_id);
            if (sendingMessageId != 0) {
                ChatActivity.this.scrollToMessageId(sendingMessageId, 0, true, 0, true, 0);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasScheduledMessages() {
            return ChatActivity.this.scheduledMessagesCount > 0 && ChatActivity.this.chatMode == 0;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSendLongClick() {
            if (ChatActivity.this.scheduledOrNoSoundHint != null) {
                ChatActivity.this.scheduledOrNoSoundHint.hide();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openScheduledMessages() {
            ChatActivity.this.openScheduledMessages();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAudioVideoInterfaceUpdated() {
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void bottomPanelTranslationYChanged(float f) {
            if (f != 0.0f) {
                ChatActivity.this.wasManualScroll = true;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.bottomPanelTranslationY = chatActivity.chatActivityEnterView.panelAnimationInProgress() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() - f : 0.0f;
            ChatActivity chatActivity2 = ChatActivity.this;
            chatActivity2.bottomPanelTranslationYReverse = chatActivity2.chatActivityEnterView.panelAnimationInProgress() ? f : 0.0f;
            ChatActivity.this.chatActivityEnterView.setTranslationY(f);
            ChatActivity.this.mentionContainer.setTranslationY(f);
            ChatActivity chatActivity3 = ChatActivity.this;
            chatActivity3.contentView.setEmojiOffset(chatActivity3.chatActivityEnterView.panelAnimationInProgress(), ChatActivity.this.bottomPanelTranslationY);
            float topViewTranslation = f + ChatActivity.this.chatActivityEnterView.getTopViewTranslation();
            ChatActivity.this.mentionContainer.setTranslationY(topViewTranslation);
            ChatActivity.this.chatListView.setTranslationY(topViewTranslation);
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.updateBulletinLayout();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void prepareMessageSending() {
            ChatActivity.this.waitingForSendingMessageLoad = true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTrendingStickersShowed(boolean z) {
            if (z) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasForwardingMessages() {
            return (ChatActivity.this.forwardingMessages == null || ChatActivity.this.forwardingMessages.messages.isEmpty()) ? false : true;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$7() {
        ChatActivityEnterView chatActivityEnterView;
        View sendButton;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || (sendButton = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField() == null || this.chatActivityEnterView.getEditField().getText().length() < 5) {
            return;
        }
        SharedConfig.increaseScheduledOrNoSuoundHintShowed();
        if (this.scheduledOrNoSoundHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledOrNoSoundHint = hintView;
            hintView.setShowingDuration(5000L);
            this.scheduledOrNoSoundHint.setAlpha(0.0f);
            this.scheduledOrNoSoundHint.setVisibility(4);
            this.scheduledOrNoSoundHint.setText(LocaleController.getString("ScheduledOrNoSoundHint", R.string.ScheduledOrNoSoundHint));
            this.contentView.addView(this.scheduledOrNoSoundHint, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        this.scheduledOrNoSoundHint.showForView(sendButton, true);
    }

    public ChatActivity(Bundle bundle) {
        super(bundle);
        this.shareAlertDebugMode = 0;
        this.justCreatedTopic = false;
        this.justCreatedChat = false;
        this.chatMessageCellsCache = new ArrayList<>();
        this.alreadyPlayedStickers = new HashMap<>();
        this.actionModeViews = new ArrayList<>();
        this.pinnedMessageImageView = new BackupImageView[2];
        this.pinnedNameTextView = new TrackingWidthSimpleTextView[2];
        this.pinnedMessageTextView = new SimpleTextView[2];
        this.pinnedMessageButton = new PinnedMessageButton[2];
        this.pinnedNextAnimation = new AnimatorSet[2];
        this.pinnedMessageButtonShown = false;
        this.hideDateDelay = 500;
        this.scheduledMessagesCount = -1;
        this.reportType = -1;
        this.threadMessageVisible = true;
        this.pendingSendMessagesDict = new SparseArray<>();
        this.pendingSendMessages = new ArrayList<>();
        this.animatingMessageObjects = new ArrayList<>();
        this.animatingDocuments = new HashMap<>();
        this.scrollToPositionOnRecreate = -1;
        this.scrollToOffsetOnRecreate = 0;
        this.pollsToCheck = new ArrayList<>(10);
        this.pinnedMessageIds = new ArrayList<>();
        this.pinnedMessageObjects = new HashMap<>();
        this.loadingPinnedMessages = new SparseArray<>();
        this.currentPinnedMessageIndex = new int[1];
        this.allowContextBotPanelSecond = true;
        this.paused = true;
        this.firstOpen = true;
        this.lastLoadIndex = 1;
        this.selectedMessagesIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.selectedMessagesCanStarIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.waitingForLoad = new ArrayList<>();
        this.needRemovePreviousSameChatActivity = true;
        this.prevSetUnreadCount = Integer.MIN_VALUE;
        this.animateSendingViews = new ArrayList<>();
        this.messagesDict = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
        this.repliesMessagesDict = new SparseArray<>();
        this.replyMessageOwners = new SparseArray<>();
        this.messagesByDays = new HashMap<>();
        this.messages = new ArrayList<>();
        this.waitingForReplies = new SparseArray<>();
        this.polls = new LongSparseArray<>();
        this.groupedMessagesMap = new LongSparseArray<>();
        this.maxMessageId = new int[]{ConnectionsManager.DEFAULT_DATACENTER_ID, ConnectionsManager.DEFAULT_DATACENTER_ID};
        this.minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
        this.minDate = new int[2];
        this.endReached = new boolean[2];
        this.cacheEndReached = new boolean[2];
        this.forwardEndReached = new boolean[]{true, true};
        this.firstLoading = true;
        this.last_message_id = 0;
        this.messageSkeletons = new ArrayList();
        this.skeletonPaint = new Paint(1);
        this.skeletonServicePaint = new Paint(1);
        this.skeletonColorMatrix = new ColorMatrix();
        this.skeletonBackgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.skeletonBackgroundDrawable = new Theme.MessageDrawable(0, false, false, new Theme.ResourcesProvider() { // from class: org.telegram.ui.ChatActivity.1
            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
                ColorFilter colorFilter;
                colorFilter = Theme.chat_animatedEmojiTextColorFilter;
                return colorFilter;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getColorOrDefault(int i) {
                int color;
                color = getColor(i);
                return color;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ int getCurrentColor(int i) {
                int color;
                color = getColor(i);
                return color;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Drawable getDrawable(String str) {
                return Theme.ResourcesProvider.-CC.$default$getDrawable(this, str);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ Paint getPaint(String str) {
                Paint themePaint;
                themePaint = Theme.getThemePaint(str);
                return themePaint;
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ boolean hasGradientService() {
                return Theme.ResourcesProvider.-CC.$default$hasGradientService(this);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public /* synthetic */ void setAnimatedColor(int i, int i2) {
                Theme.ResourcesProvider.-CC.$default$setAnimatedColor(this, i, i2);
            }

            @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
            public int getColor(int i) {
                return ChatActivity.this.getThemedColor(i);
            }
        });
        this.skeletonMatrix = new Matrix();
        this.skeletonOutlinePaint = new Paint(1);
        this.skeletonOutlineMatrix = new Matrix();
        this.skeletonOutlinePaint.setStyle(Paint.Style.STROKE);
        this.skeletonOutlinePaint.setStrokeWidth(AndroidUtilities.dp(1.0f));
        this.startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.startFromVideoTimestamp = -1;
        this.first = true;
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.scrollToMessagePosition = -10000;
        this.botInfo = new LongSparseArray<>();
        this.destroyTextureViewRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda142
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$0();
            }
        };
        this.actionBarBackgroundPaint = new Paint(1);
        this.scrimPaintAlpha = 0.0f;
        this.scrimViewAlpha = 1.0f;
        this.scrimPopupWindowHideDimOnDismiss = true;
        this.updateDeleteItemRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.2
            @Override // java.lang.Runnable
            public void run() {
                String formatPluralString;
                if (ChatActivity.this.selectedObject == null || ChatActivity.this.menuDeleteItem == null) {
                    return;
                }
                int max = Math.max(0, ChatActivity.this.selectedObject.messageOwner.ttl_period - (ChatActivity.this.getConnectionsManager().getCurrentTime() - ChatActivity.this.selectedObject.messageOwner.date));
                if (max < 86400) {
                    formatPluralString = AndroidUtilities.formatDuration(max, false);
                } else {
                    formatPluralString = LocaleController.formatPluralString("Days", Math.round(max / 86400.0f), new Object[0]);
                }
                ChatActivity.this.menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", R.string.AutoDeleteIn, formatPluralString));
                AndroidUtilities.runOnUIThread(ChatActivity.this.updateDeleteItemRunnable, 1000L);
            }
        };
        this.swipeBackEnabled = true;
        this.fragmentTransitionRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.3
            @Override // java.lang.Runnable
            public void run() {
                if (ChatActivity.this.fragmentTransition == null || ChatActivity.this.fragmentTransition.isRunning()) {
                    return;
                }
                ChatActivity.this.fragmentTransition.start();
            }
        };
        this.chatMessagesMetadataController = new ChatMessagesMetadataController(this);
        this.postponedScrollCancelListener = new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda20
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$new$1(dialogInterface);
            }
        };
        this.postponeNotificationsWhileLoadingCallback = new NotificationCenter.PostponeNotificationCallback() { // from class: org.telegram.ui.ChatActivity.4
            @Override // org.telegram.messenger.NotificationCenter.PostponeNotificationCallback
            public boolean needPostpone(int i, int i2, Object[] objArr) {
                if (i == NotificationCenter.didReceiveNewMessages) {
                    long longValue = ((Long) objArr[0]).longValue();
                    if (ChatActivity.this.firstLoading && longValue == ChatActivity.this.dialog_id) {
                        return true;
                    }
                }
                return false;
            }
        };
        this.fixedKeyboardHeight = -1;
        this.photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.7
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                return ChatActivity.this.getPlaceForPhoto(messageObject, tLRPC$FileLocation, z, false);
            }
        };
        this.botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.8
            /* JADX WARN: Removed duplicated region for block: B:26:0x008f A[LOOP:0: B:12:0x0035->B:26:0x008f, LOOP_END] */
            /* JADX WARN: Removed duplicated region for block: B:29:0x0058 A[SYNTHETIC] */
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                MentionsContainerView mentionsContainerView;
                ImageReceiver imageReceiver;
                if (i >= 0 && i < ChatActivity.this.botContextResults.size() && (mentionsContainerView = ChatActivity.this.mentionContainer) != null && mentionsContainerView.getListView() != null) {
                    int childCount = ChatActivity.this.mentionContainer.getListView().getChildCount();
                    Object obj = ChatActivity.this.botContextResults.get(i);
                    for (int i2 = 0; i2 < childCount; i2++) {
                        View childAt = ChatActivity.this.mentionContainer.getListView().getChildAt(i2);
                        if (childAt instanceof ContextLinkCell) {
                            ContextLinkCell contextLinkCell = (ContextLinkCell) childAt;
                            if (contextLinkCell.getResult() == obj) {
                                imageReceiver = contextLinkCell.getPhotoImage();
                                if (imageReceiver == null) {
                                    int[] iArr = new int[2];
                                    childAt.getLocationInWindow(iArr);
                                    PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                                    placeProviderObject.viewX = iArr[0];
                                    placeProviderObject.viewY = iArr[1] - (Build.VERSION.SDK_INT < 21 ? AndroidUtilities.statusBarHeight : 0);
                                    placeProviderObject.parentView = ChatActivity.this.mentionContainer.getListView();
                                    placeProviderObject.imageReceiver = imageReceiver;
                                    placeProviderObject.thumb = imageReceiver.getBitmapSafe();
                                    placeProviderObject.radius = imageReceiver.getRoundRadius();
                                    return placeProviderObject;
                                }
                            }
                        }
                        imageReceiver = null;
                        if (imageReceiver == null) {
                        }
                    }
                }
                return null;
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                if (i < 0 || i >= ChatActivity.this.botContextResults.size()) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.lambda$createView$32((TLRPC$BotInlineResult) chatActivity.botContextResults.get(i), z, i2);
            }
        };
        this.onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() { // from class: org.telegram.ui.ChatActivity.9
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onLongClickRelease() {
                RecyclerListView.OnItemLongClickListenerExtended.-CC.$default$onLongClickRelease(this);
            }

            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            public /* synthetic */ void onMove(float f, float f2) {
                RecyclerListView.OnItemLongClickListenerExtended.-CC.$default$onMove(this, f, f2);
            }

            /* JADX WARN: Removed duplicated region for block: B:28:0x007a  */
            /* JADX WARN: Removed duplicated region for block: B:32:0x008d  */
            /* JADX WARN: Removed duplicated region for block: B:33:0x0093  */
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public boolean onItemClick(View view, int i, float f, float f2) {
                boolean z;
                boolean z2;
                if (ChatActivity.this.textSelectionHelper.isTryingSelect() || ChatActivity.this.textSelectionHelper.isSelectionMode() || ((BaseFragment) ChatActivity.this).inPreviewMode) {
                    return false;
                }
                ChatActivity.this.wasManualScroll = true;
                if (view instanceof ChatActionCell) {
                    ChatActionCell chatActionCell = (ChatActionCell) view;
                    if (!(chatActionCell.getMessageObject().messageOwner.action instanceof TLRPC$TL_messageActionSetMessagesTTL) && chatActionCell.getMessageObject().type != 21 && !chatActionCell.getMessageObject().isWallpaperAction()) {
                        z = false;
                        if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || (ChatActivity.this.reportType >= 0 && !z)) {
                            ChatActivity.this.processRowSelect(view, view instanceof ChatMessageCell ? !((ChatMessageCell) view).isInsideBackground(f, f2) : false, f, f2);
                            z2 = true;
                        } else {
                            z2 = ChatActivity.this.createMenu(view, false, true, f, f2);
                        }
                        if (view instanceof ChatMessageCell) {
                            return z2;
                        }
                        ChatActivity.this.startMultiselect(i);
                        return true;
                    }
                }
                z = true;
                if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                }
                ChatActivity.this.processRowSelect(view, view instanceof ChatMessageCell ? !((ChatMessageCell) view).isInsideBackground(f, f2) : false, f, f2);
                z2 = true;
                if (view instanceof ChatMessageCell) {
                }
            }
        };
        this.onItemClickListener = new 11();
        this.chatScrollHelperCallback = new ChatScrollCallback();
        this.showScheduledOrNoSoundRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$7();
            }
        };
        this.filledEditTextItemMenu = false;
        this.checkTranslationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda130
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$new$135();
            }
        };
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x05c1  */
    /* JADX WARN: Removed duplicated region for block: B:109:0x067e  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x06a5  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x06a7  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x06af  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x072e  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x07ca  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x07f0  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x0807  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x081c  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x082e  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0840  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x087f  */
    /* JADX WARN: Removed duplicated region for block: B:212:0x0953  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x09a1  */
    /* JADX WARN: Removed duplicated region for block: B:254:0x0a67  */
    /* JADX WARN: Removed duplicated region for block: B:263:0x0a9c  */
    /* JADX WARN: Removed duplicated region for block: B:266:0x0aa9  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0acd  */
    /* JADX WARN: Removed duplicated region for block: B:293:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x02d1  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x03f1  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x03fe  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onFragmentCreate() {
        int i;
        int i2;
        char c;
        String str;
        boolean z;
        boolean z2;
        boolean z3;
        TLRPC$ChatFull tLRPC$ChatFull;
        ThemeDelegate themeDelegate;
        TLRPC$ChatInvite tLRPC$ChatInvite;
        TLRPC$Chat chat;
        int i3;
        boolean z4;
        final long j = this.arguments.getLong("chat_id", 0L);
        final long j2 = this.arguments.getLong("user_id", 0L);
        final int i4 = this.arguments.getInt("enc_id", 0);
        this.dialogFolderId = this.arguments.getInt("dialog_folder_id", 0);
        this.dialogFilterId = this.arguments.getInt("dialog_filter_id", 0);
        this.chatMode = this.arguments.getInt("chatMode", 0);
        this.voiceChatHash = this.arguments.getString("voicechat", null);
        this.livestream = !TextUtils.isEmpty(this.arguments.getString("livestream", null));
        this.attachMenuBotToOpen = this.arguments.getString("attach_bot", null);
        this.attachMenuBotStartCommand = this.arguments.getString("attach_bot_start_command", null);
        this.inlineReturn = this.arguments.getLong("inline_return", 0L);
        String string = this.arguments.getString("inline_query");
        this.inlineQueryForInput = this.arguments.getString("inline_query_input");
        this.premiumInvoiceBot = this.arguments.getBoolean("premium_bot", false);
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        this.startLoadFromDate = this.arguments.getInt("start_from_date", 0);
        this.startFromVideoTimestamp = this.arguments.getInt("video_timestamp", -1);
        this.threadUnreadMessagesCount = this.arguments.getInt("unread_count", 0);
        if (this.startFromVideoTimestamp >= 0) {
            this.startFromVideoMessageId = this.startLoadFromMessageId;
        }
        this.reportType = this.arguments.getInt("report", -1);
        this.arguments.getBoolean("pulled", false);
        boolean z5 = this.arguments.getBoolean("historyPreloaded", false);
        int i5 = this.highlightMessageId;
        if (i5 != 0 && i5 != Integer.MAX_VALUE) {
            this.startLoadFromMessageId = i5;
        }
        int i6 = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        this.needRemovePreviousSameChatActivity = this.arguments.getBoolean("need_remove_previous_same_chat_activity", true);
        this.justCreatedChat = this.arguments.getBoolean("just_created_chat", false);
        if (j != 0) {
            TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(j));
            this.currentChat = chat2;
            if (chat2 == null) {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = getMessagesStorage();
                i = i6;
                messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda209
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$onFragmentCreate$8(messagesStorage, j, countDownLatch);
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.currentChat == null) {
                    return false;
                }
                getMessagesController().putChat(this.currentChat, true);
                z4 = false;
            } else {
                i = i6;
                z4 = false;
            }
            this.dialog_id = -j;
            if (ChatObject.isChannel(this.currentChat)) {
                getMessagesController().startShortPoll(this.currentChat, this.classGuid, z4);
            }
        } else {
            i = i6;
            if (j2 != 0) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
                this.currentUser = user;
                if (user == null) {
                    final MessagesStorage messagesStorage2 = getMessagesStorage();
                    final CountDownLatch countDownLatch2 = new CountDownLatch(1);
                    str = string;
                    messagesStorage2.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda208
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$9(messagesStorage2, j2, countDownLatch2);
                        }
                    });
                    try {
                        countDownLatch2.await();
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    getMessagesController().putUser(this.currentUser, true);
                } else {
                    str = string;
                }
                this.dialog_id = j2;
                String string2 = this.arguments.getString("botUser");
                this.botUser = string2;
                if (str != null) {
                    getMessagesController().sendBotStart(this.currentUser, str);
                } else if (this.premiumInvoiceBot && !TextUtils.isEmpty(string2)) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                    this.botUser = null;
                    this.premiumInvoiceBot = false;
                }
            } else if (i4 == 0) {
                return false;
            } else {
                this.currentEncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(i4));
                final MessagesStorage messagesStorage3 = getMessagesStorage();
                if (this.currentEncryptedChat == null) {
                    final CountDownLatch countDownLatch3 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda207
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$10(messagesStorage3, i4, countDownLatch3);
                        }
                    });
                    try {
                        countDownLatch3.await();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                    if (this.currentEncryptedChat == null) {
                        return false;
                    }
                    getMessagesController().putEncryptedChat(this.currentEncryptedChat, true);
                }
                TLRPC$User user2 = getMessagesController().getUser(Long.valueOf(this.currentEncryptedChat.user_id));
                this.currentUser = user2;
                if (user2 == null) {
                    final CountDownLatch countDownLatch4 = new CountDownLatch(1);
                    messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda210
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$onFragmentCreate$11(messagesStorage3, countDownLatch4);
                        }
                    });
                    try {
                        countDownLatch4.await();
                    } catch (Exception e4) {
                        FileLog.e(e4);
                    }
                    if (this.currentUser == null) {
                        return false;
                    }
                    c = 1;
                    getMessagesController().putUser(this.currentUser, true);
                    i2 = 0;
                } else {
                    i2 = 0;
                    c = 1;
                }
                this.dialog_id = DialogObject.makeEncryptedDialogId(i4);
                int[] iArr = this.maxMessageId;
                iArr[c] = Integer.MIN_VALUE;
                iArr[i2] = Integer.MIN_VALUE;
                int[] iArr2 = this.minMessageId;
                iArr2[c] = Integer.MAX_VALUE;
                iArr2[i2] = Integer.MAX_VALUE;
                this.dialog_id_Long = Long.valueOf(this.dialog_id);
                this.transitionAnimationGlobalIndex = NotificationCenter.getGlobalInstance().setAnimationInProgress(this.transitionAnimationGlobalIndex, new int[i2]);
                if (this.currentUser != null && Build.VERSION.SDK_INT < 23) {
                    MediaController.getInstance().startMediaObserver();
                }
                getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
                if (this.chatMode != 1) {
                    if (this.threadMessageId == 0) {
                        getNotificationCenter().addObserver(this, NotificationCenter.screenshotTook);
                        getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
                        getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
                        getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                        getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
                        getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
                        getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
                        getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                        getNotificationCenter().addObserver(this, NotificationCenter.commentsRead);
                        getNotificationCenter().addObserver(this, NotificationCenter.changeRepliesCounter);
                        getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
                        getNotificationCenter().addObserver(this, NotificationCenter.didLoadChatInviter);
                        getNotificationCenter().addObserver(this, NotificationCenter.groupCallUpdated);
                    } else {
                        getNotificationCenter().addObserver(this, NotificationCenter.threadMessagesRead);
                        if (this.isTopic) {
                            getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                            getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                        }
                    }
                    getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
                    getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
                    getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
                    getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
                    getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
                    getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
                    getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
                    if (this.currentEncryptedChat != null) {
                        getNotificationCenter().addObserver(this, NotificationCenter.didVerifyMessagesStickers);
                    }
                }
                getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
                getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
                getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
                getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
                if (this.chatMode != 2) {
                    getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
                }
                if (this.chatMode == 0) {
                    getNotificationCenter().addObserver(this, NotificationCenter.didLoadSponsoredMessages);
                }
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
                getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
                getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
                getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
                getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
                getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
                getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
                getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
                getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
                getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
                getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
                getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
                getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
                getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
                getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
                getNotificationCenter().addObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
                getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
                getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
                getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
                getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.topicsDidLoaded);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
                NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
                getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
                getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
                getNotificationCenter().addObserver(this, NotificationCenter.didUpdateExtendedMedia);
                getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
                getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
                getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
                getNotificationCenter().addObserver(this, NotificationCenter.groupStickersDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.dialogTranslate);
                getNotificationCenter().addObserver(this, NotificationCenter.dialogIsTranslatable);
                getNotificationCenter().addObserver(this, NotificationCenter.messageTranslated);
                getNotificationCenter().addObserver(this, NotificationCenter.messageTranslating);
                super.onFragmentCreate();
                int i7 = 15;
                if (this.chatMode != 2) {
                    ArrayList arrayList = new ArrayList();
                    int size = this.pinnedMessageIds.size();
                    for (int i8 = 0; i8 < size; i8++) {
                        MessageObject messageObject = this.pinnedMessageObjects.get(this.pinnedMessageIds.get(i8));
                        if (messageObject != null) {
                            MessageObject messageObject2 = new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, false);
                            messageObject2.replyMessageObject = messageObject.replyMessageObject;
                            messageObject2.mediaExists = messageObject.mediaExists;
                            messageObject2.attachPathExists = messageObject.attachPathExists;
                            arrayList.add(messageObject2);
                        }
                    }
                    int i9 = this.lastLoadIndex;
                    this.lastLoadIndex = i9 + 1;
                    this.waitingForLoad.add(Integer.valueOf(i9));
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(this.dialog_id), Integer.valueOf(arrayList.size()), arrayList, Boolean.FALSE, 0, Integer.valueOf(this.last_message_id), 0, 0, 2, Boolean.TRUE, Integer.valueOf(this.classGuid), Integer.valueOf(i9), this.pinnedMessageIds.get(0), 0, 2);
                    z = true;
                } else {
                    z = true;
                    if (!this.forceHistoryEmpty) {
                        this.loading = true;
                    }
                }
                if (!isThreadChat() && !this.isTopic) {
                    if (this.highlightMessageId == this.startLoadFromMessageId) {
                        this.needSelectFromMessageId = z;
                    }
                } else {
                    getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode != z, z);
                    if (this.chatMode == 0) {
                        if (this.currentEncryptedChat == null) {
                            getMediaDataController().loadBotKeyboard(MessagesStorage.TopicKey.of(this.dialog_id, getTopicId()));
                        }
                        getMessagesController().loadPeerSettings(this.currentUser, this.currentChat);
                        if (this.startLoadFromMessageId == 0) {
                            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                            int i10 = notificationsSettings.getInt("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), 0);
                            if (i10 != 0) {
                                this.wasManualScroll = true;
                                this.loadingFromOldPosition = true;
                                this.startLoadFromMessageOffset = notificationsSettings.getInt("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), 0);
                                this.startLoadFromMessageId = i10;
                            }
                        } else {
                            this.showScrollToMessageError = true;
                            this.needSelectFromMessageId = true;
                        }
                    }
                }
                if (this.currentChat == null) {
                    this.chatInfo = getMessagesController().getChatFull(this.currentChat.id);
                    this.groupCall = getMessagesController().getGroupCall(this.currentChat.id, true);
                    if (ChatObject.isChannel(this.currentChat) && !getMessagesController().isChannelAdminsLoaded(this.currentChat.id)) {
                        getMessagesController().loadChannelAdmins(this.currentChat.id, true);
                    }
                    fillInviterId(false);
                    if (this.chatMode != 2) {
                        MessagesStorage messagesStorage4 = getMessagesStorage();
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        messagesStorage4.loadChatInfo(tLRPC$Chat.id, ChatObject.isChannel(tLRPC$Chat), null, true, false, this.startLoadFromMessageId);
                    }
                    if (this.chatMode == 0 && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && this.chatInfo.migrated_from_chat_id != 0 && !isThreadChat()) {
                        TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                        this.mergeDialogId = -tLRPC$ChatFull2.migrated_from_chat_id;
                        this.maxMessageId[1] = tLRPC$ChatFull2.migrated_from_max_id;
                    }
                    z3 = this.chatInfo == null;
                    checkGroupCallJoin(false);
                } else if (this.currentUser != null) {
                    if (this.chatMode != 2) {
                        getMessagesController().loadUserInfo(this.currentUser, true, this.classGuid, this.startLoadFromMessageId);
                    }
                    z3 = this.userInfo == null;
                } else {
                    z2 = false;
                    if (this.forceHistoryEmpty) {
                        boolean[] zArr = this.endReached;
                        zArr[1] = true;
                        zArr[0] = true;
                        boolean[] zArr2 = this.forwardEndReached;
                        zArr2[1] = true;
                        zArr2[0] = true;
                        this.firstLoading = false;
                        checkDispatchHideSkeletons(false);
                    }
                    if (this.chatMode != 2 && !this.forceHistoryEmpty) {
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        if (!SharedConfig.deviceIsHigh()) {
                            i3 = (!isThreadChat() || this.isTopic) ? 25 : 30;
                        } else {
                            if (isThreadChat() && !this.isTopic) {
                                i7 = 20;
                            }
                            i3 = i7;
                        }
                        if (this.startLoadFromDate == 0) {
                            MessagesController messagesController = getMessagesController();
                            long j3 = this.dialog_id;
                            long j4 = this.mergeDialogId;
                            int i11 = this.startLoadFromDate;
                            int i12 = this.classGuid;
                            int i13 = this.chatMode;
                            int i14 = this.threadMessageId;
                            int i15 = this.replyMaxReadId;
                            int i16 = this.lastLoadIndex;
                            this.lastLoadIndex = i16 + 1;
                            messagesController.loadMessages(j3, j4, false, 30, 0, i11, true, 0, i12, 4, 0, i13, i14, i15, i16, this.isTopic);
                        } else if (this.startLoadFromMessageId == 0 || !(!isThreadChat() || this.startLoadFromMessageId == this.highlightMessageId || this.isTopic)) {
                            if (z5) {
                                this.lastLoadIndex++;
                            } else {
                                MessagesController messagesController2 = getMessagesController();
                                long j5 = this.dialog_id;
                                long j6 = this.mergeDialogId;
                                int i17 = this.startLoadFromMessageId;
                                int i18 = this.classGuid;
                                int i19 = this.chatMode;
                                int i20 = this.threadMessageId;
                                int i21 = this.replyMaxReadId;
                                int i22 = this.lastLoadIndex;
                                this.lastLoadIndex = i22 + 1;
                                messagesController2.loadMessages(j5, j6, z2, i3, i17, 0, true, 0, i18, 2, 0, i19, i20, i21, i22, this.isTopic);
                            }
                        } else if (i != 0) {
                            this.mergeDialogId = i;
                            MessagesController messagesController3 = getMessagesController();
                            long j7 = this.mergeDialogId;
                            int i23 = this.startLoadFromMessageId;
                            int i24 = this.classGuid;
                            int i25 = this.chatMode;
                            int i26 = this.threadMessageId;
                            int i27 = this.replyMaxReadId;
                            int i28 = this.lastLoadIndex;
                            this.lastLoadIndex = i28 + 1;
                            messagesController3.loadMessages(j7, 0L, z2, i3, i23, 0, true, 0, i24, 3, 0, i25, i26, i27, i28, this.isTopic);
                        } else {
                            MessagesController messagesController4 = getMessagesController();
                            long j8 = this.dialog_id;
                            long j9 = this.mergeDialogId;
                            int i29 = this.startLoadFromMessageId;
                            int i30 = this.classGuid;
                            int i31 = this.chatMode;
                            int i32 = this.threadMessageId;
                            int i33 = this.replyMaxReadId;
                            int i34 = this.lastLoadIndex;
                            this.lastLoadIndex = i34 + 1;
                            messagesController4.loadMessages(j8, j9, z2, i3, i29, 0, true, 0, i30, 3, 0, i31, i32, i33, i34, this.isTopic);
                        }
                    }
                    if (this.chatMode == 0 && !isThreadChat()) {
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        MessagesController messagesController5 = getMessagesController();
                        long j10 = this.dialog_id;
                        long j11 = this.mergeDialogId;
                        int i35 = this.classGuid;
                        int i36 = this.threadMessageId;
                        int i37 = this.replyMaxReadId;
                        int i38 = this.lastLoadIndex;
                        this.lastLoadIndex = i38 + 1;
                        messagesController5.loadMessages(j10, j11, false, 1, 0, 0, true, 0, i35, 2, 0, 1, i36, i37, i38, this.isTopic);
                    }
                    if (this.chatMode == 0) {
                        if (j2 != 0 && this.currentUser.bot) {
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda195
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$onFragmentCreate$12(j2);
                                }
                            });
                        } else if (this.chatInfo instanceof TLRPC$TL_chatFull) {
                            for (int i39 = 0; i39 < this.chatInfo.participants.participants.size(); i39++) {
                                TLRPC$User user3 = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i39).user_id));
                                if (user3 != null && user3.bot) {
                                    getMediaDataController().loadBotInfo(user3.id, -this.chatInfo.id, true, this.classGuid);
                                }
                            }
                        }
                        if (AndroidUtilities.isTablet() && !this.isComments) {
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Integer.valueOf(getTopicId()), Boolean.FALSE);
                        }
                        TLRPC$User tLRPC$User = this.currentUser;
                        if (tLRPC$User != null && !UserObject.isReplyUser(tLRPC$User)) {
                            this.userBlocked = getMessagesController().blockePeers.indexOfKey(this.currentUser.id) >= 0;
                        }
                        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
                        if (tLRPC$EncryptedChat != null && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                            getSecretChatHelper().sendNotifyLayerMessage(this.currentEncryptedChat, null);
                        }
                    }
                    tLRPC$ChatFull = this.chatInfo;
                    if (tLRPC$ChatFull != null && tLRPC$ChatFull.linked_chat_id != 0 && (chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id))) != null && chat.megagroup) {
                        getMessagesController().startShortPoll(chat, this.classGuid, false);
                    }
                    themeDelegate = new ThemeDelegate();
                    this.themeDelegate = themeDelegate;
                    if (themeDelegate.isThemeChangeAvailable()) {
                        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.needSetDayNightTheme);
                    }
                    tLRPC$ChatInvite = this.chatInvite;
                    if (tLRPC$ChatInvite != null) {
                        int currentTime = tLRPC$ChatInvite.expires - getConnectionsManager().getCurrentTime();
                        int i40 = currentTime < 0 ? 10 : currentTime;
                        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda169
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$onFragmentCreate$15();
                            }
                        };
                        this.chatInviteRunnable = runnable;
                        AndroidUtilities.runOnUIThread(runnable, i40 * 1000);
                    }
                    if (this.isTopic) {
                        getMessagesController().getTopicsController().getTopicRepliesCount(this.dialog_id, getTopicId());
                        return true;
                    }
                    return true;
                }
                z2 = z3;
                if (this.forceHistoryEmpty) {
                }
                if (this.chatMode != 2) {
                    this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                    if (!SharedConfig.deviceIsHigh()) {
                    }
                    if (this.startLoadFromDate == 0) {
                    }
                }
                if (this.chatMode == 0) {
                    this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                    MessagesController messagesController52 = getMessagesController();
                    long j102 = this.dialog_id;
                    long j112 = this.mergeDialogId;
                    int i352 = this.classGuid;
                    int i362 = this.threadMessageId;
                    int i372 = this.replyMaxReadId;
                    int i382 = this.lastLoadIndex;
                    this.lastLoadIndex = i382 + 1;
                    messagesController52.loadMessages(j102, j112, false, 1, 0, 0, true, 0, i352, 2, 0, 1, i362, i372, i382, this.isTopic);
                }
                if (this.chatMode == 0) {
                }
                tLRPC$ChatFull = this.chatInfo;
                if (tLRPC$ChatFull != null) {
                    getMessagesController().startShortPoll(chat, this.classGuid, false);
                }
                themeDelegate = new ThemeDelegate();
                this.themeDelegate = themeDelegate;
                if (themeDelegate.isThemeChangeAvailable()) {
                }
                tLRPC$ChatInvite = this.chatInvite;
                if (tLRPC$ChatInvite != null) {
                }
                if (this.isTopic) {
                }
            }
        }
        i2 = 0;
        this.dialog_id_Long = Long.valueOf(this.dialog_id);
        this.transitionAnimationGlobalIndex = NotificationCenter.getGlobalInstance().setAnimationInProgress(this.transitionAnimationGlobalIndex, new int[i2]);
        if (this.currentUser != null) {
            MediaController.getInstance().startMediaObserver();
        }
        getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        if (this.chatMode != 1) {
        }
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        if (this.chatMode != 2) {
        }
        if (this.chatMode == 0) {
        }
        getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.topicsDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().addObserver(this, NotificationCenter.messageTranslating);
        super.onFragmentCreate();
        int i72 = 15;
        if (this.chatMode != 2) {
        }
        if (!isThreadChat()) {
        }
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode != z, z);
        if (this.chatMode == 0) {
        }
        if (this.currentChat == null) {
        }
        z2 = z3;
        if (this.forceHistoryEmpty) {
        }
        if (this.chatMode != 2) {
        }
        if (this.chatMode == 0) {
        }
        if (this.chatMode == 0) {
        }
        tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull != null) {
        }
        themeDelegate = new ThemeDelegate();
        this.themeDelegate = themeDelegate;
        if (themeDelegate.isThemeChangeAvailable()) {
        }
        tLRPC$ChatInvite = this.chatInvite;
        if (tLRPC$ChatInvite != null) {
        }
        if (this.isTopic) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$8(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentChat = messagesStorage.getChat(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$9(MessagesStorage messagesStorage, long j, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(j);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$10(MessagesStorage messagesStorage, int i, CountDownLatch countDownLatch) {
        this.currentEncryptedChat = messagesStorage.getEncryptedChat(i);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$11(MessagesStorage messagesStorage, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(this.currentEncryptedChat.user_id);
        countDownLatch.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$12(long j) {
        getMediaDataController().loadBotInfo(j, j, true, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$15() {
        this.chatInviteRunnable = null;
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
            builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
            builder.setTitle(LocaleController.getString("JoinByPeekChannelTitle", R.string.JoinByPeekChannelTitle));
        } else {
            builder.setMessage(LocaleController.getString("JoinByPeekGroupText", R.string.JoinByPeekGroupText));
            builder.setTitle(LocaleController.getString("JoinByPeekGroupTitle", R.string.JoinByPeekGroupTitle));
        }
        builder.setPositiveButton(LocaleController.getString("JoinByPeekJoin", R.string.JoinByPeekJoin), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda33
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$onFragmentCreate$13(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda27
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$onFragmentCreate$14(dialogInterface, i);
            }
        });
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$13(DialogInterface dialogInterface, int i) {
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        if (unreadCounterTextView != null) {
            unreadCounterTextView.callOnClick();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onFragmentCreate$14(DialogInterface dialogInterface, int i) {
        finishFragment();
    }

    private void fillInviterId(boolean z) {
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat == null || this.chatInfo == null || ChatObject.isNotInChat(tLRPC$Chat) || this.currentChat.creator) {
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull.inviterId;
        if (j != 0) {
            this.chatInviterId = j;
            return;
        }
        TLRPC$ChatParticipants tLRPC$ChatParticipants = tLRPC$ChatFull.participants;
        if (tLRPC$ChatParticipants != null) {
            TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatParticipants.self_participant;
            if (tLRPC$ChatParticipant != null) {
                this.chatInviterId = tLRPC$ChatParticipant.inviter_id;
                return;
            }
            long clientUserId = getUserConfig().getClientUserId();
            int size = this.chatInfo.participants.participants.size();
            for (int i = 0; i < size; i++) {
                TLRPC$ChatParticipant tLRPC$ChatParticipant2 = this.chatInfo.participants.participants.get(i);
                if (tLRPC$ChatParticipant2.user_id == clientUserId) {
                    this.chatInviterId = tLRPC$ChatParticipant2.inviter_id;
                    return;
                }
            }
        }
        if (z && this.chatInviterId == 0) {
            getMessagesController().checkChatInviter(this.currentChat.id, false);
        }
    }

    private void hideUndoViews() {
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        UndoView undoView2 = this.topUndoView;
        if (undoView2 != null) {
            undoView2.hide(true, 0);
        }
    }

    public int getOtherSameChatsDiff() {
        INavigationLayout iNavigationLayout = this.parentLayout;
        int i = 0;
        if (iNavigationLayout == null || iNavigationLayout.getFragmentStack() == null) {
            return 0;
        }
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        if (indexOf == -1) {
            indexOf = this.parentLayout.getFragmentStack().size();
        }
        while (true) {
            if (i >= this.parentLayout.getFragmentStack().size()) {
                i = indexOf;
                break;
            }
            BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(i);
            if (baseFragment != this && (baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.dialog_id) {
                break;
            }
            i++;
        }
        return i - indexOf;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBeginSlide() {
        super.onBeginSlide();
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay == null || !chatSelectionReactionMenuOverlay.isVisible()) {
            return;
        }
        this.selectionReactionsOverlay.setHiddenByScroll(true);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
        getNotificationCenter().onAnimationFinish(this.scrollAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollCallbackAnimationIndex);
        hideUndoViews();
        Runnable runnable = this.chatInviteRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.chatInviteRunnable = null;
        }
        getNotificationCenter().removePostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, false);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.threadMessagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.commentsRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.changeRepliesCounter);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadChatInviter);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupCallUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.animatedEmojiDocumentLoaded);
        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateMessagesViews);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadPinnedMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.topicsDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateExtendedMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSponsoredMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogTranslate);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogIsTranslatable);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageTranslating);
        if (this.currentEncryptedChat != null) {
            getNotificationCenter().removeObserver(this, NotificationCenter.didVerifyMessagesStickers);
        }
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.needSetDayNightTheme);
        if (this.chatMode == 0 && AndroidUtilities.isTablet()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Integer.valueOf(getTopicId()), Boolean.TRUE);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.detach();
        }
        if (this.currentUser != null) {
            getMessagesController().cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            getMessagesController().startShortPoll(this.currentChat, this.classGuid, true);
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull != null && tLRPC$ChatFull.linked_chat_id != 0) {
                getMessagesController().startShortPoll(getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id)), this.classGuid, true);
            }
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.onDestroy();
        }
        PinchToZoomHelper pinchToZoomHelper = this.pinchToZoomHelper;
        if (pinchToZoomHelper != null) {
            pinchToZoomHelper.clear();
        }
        this.chatThemeBottomSheet = null;
        INavigationLayout parentLayout = getParentLayout();
        if (parentLayout != null && parentLayout.getFragmentStack() != null) {
            BackButtonMenu.clearPulledDialogs(this, parentLayout.getFragmentStack().indexOf(this) - (!replacingChatActivity ? 1 : 0));
        }
        replacingChatActivity = false;
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.chatMessagesMetadataController.onFragmentDestroy();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class ChatActivityTextSelectionHelper extends TextSelectionHelper.ChatListTextSelectionHelper {
        ChatActivity chatActivity;

        private ChatActivityTextSelectionHelper() {
        }

        public void setChatActivity(ChatActivity chatActivity) {
            cancelAllAnimators();
            clear();
            this.textSelectionOverlay = null;
            this.chatActivity = chatActivity;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentTopPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return (int) chatActivity.chatListViewPaddingTop;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        public int getParentBottomPadding() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity == null) {
                return 0;
            }
            return chatActivity.blurredViewBottomOffset;
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected int getThemedColor(int i) {
            return Theme.getColor(i, this.chatActivity.themeDelegate);
        }

        @Override // org.telegram.ui.Cells.TextSelectionHelper
        protected Theme.ResourcesProvider getResourcesProvider() {
            ChatActivity chatActivity = this.chatActivity;
            if (chatActivity != null) {
                return chatActivity.themeDelegate;
            }
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:213:0x05bc  */
    /* JADX WARN: Removed duplicated region for block: B:294:0x07b7  */
    /* JADX WARN: Removed duplicated region for block: B:297:0x08f5  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x0a21  */
    /* JADX WARN: Removed duplicated region for block: B:306:0x0a23  */
    /* JADX WARN: Removed duplicated region for block: B:309:0x0a3b  */
    /* JADX WARN: Removed duplicated region for block: B:310:0x0a3e  */
    /* JADX WARN: Removed duplicated region for block: B:313:0x0a77  */
    /* JADX WARN: Removed duplicated region for block: B:314:0x0a96  */
    /* JADX WARN: Removed duplicated region for block: B:317:0x0bd3  */
    /* JADX WARN: Removed duplicated region for block: B:318:0x0bf2  */
    /* JADX WARN: Removed duplicated region for block: B:321:0x0cfd  */
    /* JADX WARN: Removed duplicated region for block: B:322:0x0d1c  */
    /* JADX WARN: Removed duplicated region for block: B:325:0x0de3  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x0eec  */
    /* JADX WARN: Removed duplicated region for block: B:338:0x0f2c  */
    /* JADX WARN: Removed duplicated region for block: B:341:0x0f38  */
    /* JADX WARN: Removed duplicated region for block: B:349:0x0ffd  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x112d  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x13a6  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x13c3  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x1408  */
    /* JADX WARN: Removed duplicated region for block: B:391:0x14b1  */
    /* JADX WARN: Removed duplicated region for block: B:394:0x14cb  */
    /* JADX WARN: Removed duplicated region for block: B:400:0x1501  */
    /* JADX WARN: Removed duplicated region for block: B:402:0x1508  */
    /* JADX WARN: Removed duplicated region for block: B:403:0x1517  */
    /* JADX WARN: Removed duplicated region for block: B:406:0x1555  */
    /* JADX WARN: Removed duplicated region for block: B:407:0x1560  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public View createView(final Context context) {
        ActionBarMenu actionBarMenu;
        int i;
        int i2;
        CharSequence charSequence;
        MentionsContainerView mentionsContainerView;
        15 r0;
        TLRPC$Chat tLRPC$Chat;
        CharSequence charSequence2;
        int i3;
        Drawable createCircleDrawable;
        Drawable createCircleDrawable2;
        Drawable createCircleDrawable3;
        TLRPC$ChatFull tLRPC$ChatFull;
        String str;
        int i4;
        TLRPC$User tLRPC$User;
        int i5;
        boolean z;
        TextSelectionHelper<Cell>.TextSelectionOverlay overlayView;
        MessageObject messageObject;
        ViewGroup viewGroup;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        boolean z2;
        boolean z3;
        TLRPC$User tLRPC$User2;
        TLRPC$User tLRPC$User3;
        MessageObject messageObject2;
        if (this.textSelectionHelper == null) {
            ArrayList<ChatActivityTextSelectionHelper> arrayList = textSelectionHelpersCache;
            if (arrayList != null && !arrayList.isEmpty()) {
                this.textSelectionHelper = textSelectionHelpersCache.remove(0);
            } else {
                this.textSelectionHelper = new ChatActivityTextSelectionHelper();
            }
            this.textSelectionHelper.setChatActivity(this);
        }
        if (this.reportType >= 0) {
            this.actionBar.setBackgroundColor(getThemedColor(Theme.key_actionBarActionModeDefault));
            ActionBar actionBar = this.actionBar;
            int i6 = Theme.key_actionBarActionModeDefaultIcon;
            actionBar.setItemsColor(getThemedColor(i6), false);
            this.actionBar.setItemsBackgroundColor(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), false);
            this.actionBar.setTitleColor(getThemedColor(i6));
            this.actionBar.setSubtitleColor(getThemedColor(i6));
        }
        this.actionBarBackgroundPaint.setColor(getThemedColor(Theme.key_actionBarDefault));
        if (this.chatMessageCellsCache.isEmpty()) {
            for (int i7 = 0; i7 < 15; i7++) {
                this.chatMessageCellsCache.add(new ChatMessageCell(context, true, this.themeDelegate));
            }
        }
        for (int i8 = 1; i8 >= 0; i8--) {
            this.selectedMessagesIds[i8].clear();
            this.selectedMessagesCanCopyIds[i8].clear();
            this.selectedMessagesCanStarIds[i8].clear();
        }
        this.scheduledOrNoSoundHint = null;
        this.infoTopView = null;
        this.aspectRatioFrameLayout = null;
        this.videoTextureView = null;
        this.searchAsListHint = null;
        this.mediaBanTooltip = null;
        this.noSoundHintView = null;
        this.forwardHintView = null;
        this.checksHintView = null;
        this.textSelectionHint = null;
        this.emojiButtonRed = null;
        this.gifHintTextView = null;
        this.emojiHintTextView = null;
        this.pollHintView = null;
        this.timerHintView = null;
        this.videoPlayerContainer = null;
        this.voiceHintTextView = null;
        this.blurredView = null;
        this.dummyMessageCell = null;
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canForwardMessagesCount = 0;
        this.cantSaveMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.hasOwnBackground = true;
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            try {
                if (chatAttachAlert.isShowing()) {
                    this.chatAttachAlert.dismiss();
                }
            } catch (Exception unused) {
            }
            this.chatAttachAlert.onDestroy();
            this.chatAttachAlert = null;
        }
        Theme.createChatResources(context, false);
        this.actionBar.setAddToContainer(false);
        if (this.inPreviewMode) {
            this.actionBar.setBackButtonDrawable(null);
        } else {
            this.actionBar.setBackButtonDrawable(new BackDrawable(this.reportType >= 0));
        }
        this.actionBar.setActionBarMenuOnItemClick(new 12(context));
        ImageView backButton = this.actionBar.getBackButton();
        backButton.setOnTouchListener(new 13(backButton));
        this.actionBar.setInterceptTouchEventListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda116
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view, MotionEvent motionEvent) {
                boolean lambda$createView$16;
                lambda$createView$16 = ChatActivity.this.lambda$createView$16(view, motionEvent);
                return lambda$createView$16;
            }
        });
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer2 = new ChatAvatarContainer(context, this, this.currentEncryptedChat != null, this.themeDelegate);
        this.avatarContainer = chatAvatarContainer2;
        chatAvatarContainer2.allowShorterStatus = true;
        AndroidUtilities.updateViewVisibilityAnimated(chatAvatarContainer2, true, 1.0f, false);
        updateTopicTitleIcon();
        if (this.inPreviewMode || this.inBubbleMode) {
            this.avatarContainer.setOccupyStatusBar(false);
        }
        int i9 = this.reportType;
        if (i9 >= 0) {
            if (i9 == 0) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatSpam", R.string.ReportChatSpam));
            } else if (i9 == 1) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatViolence", R.string.ReportChatViolence));
            } else if (i9 == 2) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatChild", R.string.ReportChatChild));
            } else if (i9 == 5) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatPornography", R.string.ReportChatPornography));
            } else if (i9 == 3) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatIllegalDrugs", R.string.ReportChatIllegalDrugs));
            } else if (i9 == 4) {
                this.actionBar.setTitle(LocaleController.getString("ReportChatPersonalDetails", R.string.ReportChatPersonalDetails));
            }
            this.actionBar.setSubtitle(LocaleController.getString("ReportSelectMessages", R.string.ReportSelectMessages));
        } else {
            final int i10 = this.startLoadFromDate;
            if (i10 != 0) {
                this.actionBar.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda91
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createView$17(i10, view);
                    }
                });
                this.actionBar.setTitle(LocaleController.formatDateChat(this.startLoadFromDate, false));
                this.actionBar.setSubtitle(LocaleController.getString("Loading", R.string.Loading));
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tLRPC$TL_messages_getHistory.offset_date = this.startLoadFromDate;
                tLRPC$TL_messages_getHistory.limit = 1;
                tLRPC$TL_messages_getHistory.add_offset = -1;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda251
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$createView$21(tLObject, tLRPC$TL_error);
                    }
                }), this.classGuid);
            } else {
                this.actionBar.addView(this.avatarContainer, 0, LayoutHelper.createFrame(-2, -1.0f, 51, this.inPreviewMode ? this.chatMode == 2 ? 10 : 0 : 56.0f, 0.0f, 40.0f, 0.0f));
            }
        }
        ActionBarMenu createMenu = this.actionBar.createMenu();
        if (this.currentEncryptedChat == null && this.chatMode == 0 && this.reportType < 0) {
            int i11 = R.drawable.ic_ab_search;
            ActionBarMenuItem addItem = createMenu.addItem(40, i11);
            this.searchIconItem = addItem;
            int i12 = R.string.Search;
            addItem.setContentDescription(LocaleController.getString("Search", i12));
            ActionBarMenuItem addItem2 = createMenu.addItem(-1, i11, this.themeDelegate);
            this.searchItem = addItem2;
            addItem2.setIsSearchField(true);
            this.searchItem.setActionBarMenuItemSearchListener(getSearchItemListener());
            this.searchItem.setSearchFieldHint(LocaleController.getString("Search", i12));
            if ((this.threadMessageId == 0 && !UserObject.isReplyUser(this.currentUser)) || ((messageObject2 = this.threadMessageObject) != null && messageObject2.getRepliesCount() < 10)) {
                this.searchItem.setVisibility(8);
            } else {
                this.searchItem.setVisibility(0);
            }
            this.searchItemVisible = false;
        }
        if (this.chatMode == 0 && ((this.threadMessageId == 0 || this.isTopic) && !UserObject.isReplyUser(this.currentUser) && this.reportType < 0 && this.currentUser != null)) {
            ActionBarMenu.LazyItem lazilyAddItem = createMenu.lazilyAddItem(32, R.drawable.ic_call, this.themeDelegate);
            this.audioCallIconItem = lazilyAddItem;
            lazilyAddItem.setContentDescription(LocaleController.getString("Call", R.string.Call));
            TLRPC$UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull != null && userFull.phone_calls_available) {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            } else {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            }
            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
            if (chatAvatarContainer3 != null) {
                chatAvatarContainer3.setTitleExpand(this.showAudioCallAsIcon);
            }
        }
        int i13 = R.drawable.ic_ab_other;
        ActionBarMenu.LazyItem lazilyAddItem2 = createMenu.lazilyAddItem(-3, i13, this.themeDelegate);
        this.editTextItem = lazilyAddItem2;
        int i14 = R.string.AccDescrMoreOptions;
        lazilyAddItem2.setContentDescription(LocaleController.getString("AccDescrMoreOptions", i14));
        this.editTextItem.setTag(null);
        this.editTextItem.setVisibility(8);
        if (this.chatMode != 0 || (!(this.threadMessageId == 0 || this.isTopic) || UserObject.isReplyUser(this.currentUser) || this.reportType >= 0)) {
            actionBarMenu = createMenu;
            i = 32;
        } else {
            TLRPC$UserFull userFull2 = this.currentUser != null ? getMessagesController().getUserFull(this.currentUser.id) : null;
            ActionBarMenuItem addItem3 = createMenu.addItem(-2, i13, this.themeDelegate);
            this.headerItem = addItem3;
            addItem3.setContentDescription(LocaleController.getString("AccDescrMoreOptions", i14));
            TLRPC$User tLRPC$User4 = this.currentUser;
            if (tLRPC$User4 == null || !tLRPC$User4.self) {
                i = 32;
                actionBarMenu = createMenu;
                ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = new ChatNotificationsPopupWrapper(context, this.currentAccount, this.headerItem.getPopupLayout().getSwipeBack(), false, false, new ChatNotificationsPopupWrapper.Callback() { // from class: org.telegram.ui.ChatActivity.14
                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public /* synthetic */ void openExceptions() {
                        ChatNotificationsPopupWrapper.Callback.-CC.$default$openExceptions(this);
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void dismiss() {
                        ChatActivity.this.headerItem.toggleSubMenu();
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void toggleSound() {
                        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount);
                        boolean z4 = !notificationsSettings.getBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), true);
                        notificationsSettings.edit().putBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), z4).apply();
                        if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            BulletinFactory.createSoundEnabledBulletin(chatActivity, !z4, chatActivity.getResourceProvider()).show();
                        }
                        ChatActivity.this.updateTitleIcons();
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void muteFor(int i15) {
                        if (i15 == 0) {
                            if (ChatActivity.this.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId())) {
                                ChatActivity.this.toggleMute(true);
                            }
                            if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
                                ChatActivity chatActivity = ChatActivity.this;
                                BulletinFactory.createMuteBulletin(chatActivity, 4, i15, chatActivity.getResourceProvider()).show();
                                return;
                            }
                            return;
                        }
                        ChatActivity.this.getNotificationsController().muteUntil(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), i15);
                        if (BulletinFactory.canShowBulletin(ChatActivity.this)) {
                            ChatActivity chatActivity2 = ChatActivity.this;
                            BulletinFactory.createMuteBulletin(chatActivity2, 5, i15, chatActivity2.getResourceProvider()).show();
                        }
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void showCustomize() {
                        if (ChatActivity.this.dialog_id != 0) {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.currentUser != null) {
                                chatActivity.getMessagesController().putUser(ChatActivity.this.currentUser, true);
                            }
                            Bundle bundle = new Bundle();
                            bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                            if (ChatActivity.this.getTopicId() != 0) {
                                bundle.putInt("topic_id", ChatActivity.this.getTopicId());
                            }
                            ChatActivity chatActivity2 = ChatActivity.this;
                            chatActivity2.presentFragment(new ProfileNotificationsActivity(bundle, chatActivity2.themeDelegate));
                        }
                    }

                    @Override // org.telegram.ui.Components.ChatNotificationsPopupWrapper.Callback
                    public void toggleMute() {
                        ChatActivity.this.toggleMute(true);
                        ChatActivity chatActivity = ChatActivity.this;
                        BulletinFactory.createMuteBulletin(chatActivity, chatActivity.getMessagesController().isDialogMuted(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId()), ChatActivity.this.themeDelegate).show();
                    }
                }, getResourceProvider());
                this.chatNotificationsPopupWrapper = chatNotificationsPopupWrapper;
                ActionBarMenuItem.Item lazilyAddSwipeBackItem = this.headerItem.lazilyAddSwipeBackItem(R.drawable.msg_mute, null, null, chatNotificationsPopupWrapper.windowLayout);
                this.muteItem = lazilyAddSwipeBackItem;
                lazilyAddSwipeBackItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda66
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createView$23(view);
                    }
                });
                this.muteItemGap = this.headerItem.lazilyAddColoredGap();
            } else {
                actionBarMenu = createMenu;
                i = 32;
            }
            if (this.currentUser != null) {
                this.headerItem.lazilyAddSubItem(i, R.drawable.msg_callback, LocaleController.getString("Call", R.string.Call));
                if (Build.VERSION.SDK_INT >= 18) {
                    this.headerItem.lazilyAddSubItem(33, R.drawable.msg_videocall, LocaleController.getString("VideoCall", R.string.VideoCall));
                }
                if (userFull2 != null && userFull2.phone_calls_available) {
                    this.headerItem.showSubItem(i);
                    if (userFull2.video_calls_available) {
                        this.headerItem.showSubItem(33);
                    } else {
                        this.headerItem.hideSubItem(33);
                    }
                } else {
                    this.headerItem.hideSubItem(i);
                    this.headerItem.hideSubItem(33);
                }
            }
            if (this.searchItem != null) {
                this.headerItem.lazilyAddSubItem(40, R.drawable.msg_search, LocaleController.getString("Search", R.string.Search));
            }
            this.translateItem = this.headerItem.lazilyAddSubItem(62, R.drawable.msg_translate, LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
            updateTranslateItemVisibility();
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (tLRPC$Chat2 != null && !tLRPC$Chat2.creator && !ChatObject.hasAdminRights(tLRPC$Chat2)) {
                this.headerItem.lazilyAddSubItem(21, R.drawable.msg_report, LocaleController.getString("ReportChat", R.string.ReportChat));
            }
            if (this.currentUser != null) {
                this.addContactItem = this.headerItem.lazilyAddSubItem(17, R.drawable.msg_addcontact, "");
            }
            if (this.currentEncryptedChat != null) {
                this.timeItem2 = this.headerItem.lazilyAddSubItem(13, R.drawable.msg_autodelete, LocaleController.getString("SetTimer", R.string.SetTimer));
            }
            if (this.currentChat != null && !this.isTopic) {
                this.viewAsTopics = this.headerItem.lazilyAddSubItem(58, R.drawable.msg_topics, LocaleController.getString("TopicViewAsTopics", R.string.TopicViewAsTopics));
            }
            if (this.themeDelegate.isThemeChangeAvailable()) {
                this.headerItem.lazilyAddSubItem(27, R.drawable.msg_colors, LocaleController.getString("SetWallpapers", R.string.SetWallpapers));
            }
            if (!this.isTopic) {
                this.clearHistoryItem = this.headerItem.lazilyAddSubItem(15, R.drawable.msg_clear, LocaleController.getString("ClearHistory", R.string.ClearHistory));
            }
            if (!this.isTopic) {
                if (ChatObject.isChannel(this.currentChat)) {
                    TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                    if (!tLRPC$Chat3.creator) {
                        if (!ChatObject.isNotInChat(tLRPC$Chat3)) {
                            if (this.currentChat.megagroup) {
                                this.headerItem.lazilyAddSubItem(16, R.drawable.msg_leave, LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu));
                            } else {
                                this.headerItem.lazilyAddSubItem(16, R.drawable.msg_leave, LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu));
                            }
                        }
                    }
                }
                if (!ChatObject.isChannel(this.currentChat)) {
                    if (this.currentChat != null) {
                        this.headerItem.lazilyAddSubItem(16, R.drawable.msg_leave, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
                    } else {
                        TLRPC$User tLRPC$User5 = this.currentUser;
                        if (tLRPC$User5 != null && tLRPC$User5.bot) {
                            this.headerItem.lazilyAddSubItem(31, R.drawable.msg_settings_old, LocaleController.getString("BotSettings", R.string.BotSettings));
                            ActionBarMenuItem.Item lazilyAddSubItem = this.headerItem.lazilyAddSubItem(16, R.drawable.msg_block2, LocaleController.getString(R.string.DeleteAndBlock));
                            int i15 = Theme.key_text_RedRegular;
                            lazilyAddSubItem.setColors(getThemedColor(i15), getThemedColor(i15));
                            z3 = true;
                            tLRPC$User2 = this.currentUser;
                            if (tLRPC$User2 != null && tLRPC$User2.self) {
                                this.headerItem.lazilyAddSubItem(24, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
                            }
                            tLRPC$User3 = this.currentUser;
                            if (tLRPC$User3 != null && this.currentEncryptedChat == null && tLRPC$User3.bot) {
                                if (!z3) {
                                    this.headerItem.lazilyAddSubItem(31, R.drawable.msg_settings_old, LocaleController.getString("BotSettings", R.string.BotSettings));
                                }
                                this.headerItem.lazilyAddSubItem(30, R.drawable.msg_help, LocaleController.getString("BotHelp", R.string.BotHelp));
                                updateBotButtons();
                            }
                        } else {
                            this.headerItem.lazilyAddSubItem(16, R.drawable.msg_delete, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser));
                        }
                    }
                }
            }
            z3 = false;
            tLRPC$User2 = this.currentUser;
            if (tLRPC$User2 != null) {
                this.headerItem.lazilyAddSubItem(24, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
            }
            tLRPC$User3 = this.currentUser;
            if (tLRPC$User3 != null) {
                if (!z3) {
                }
                this.headerItem.lazilyAddSubItem(30, R.drawable.msg_help, LocaleController.getString("BotHelp", R.string.BotHelp));
                updateBotButtons();
            }
        }
        if (ChatObject.isForum(this.currentChat) && this.isTopic && getParentLayout() != null && getParentLayout().getFragmentStack() != null) {
            int i16 = 0;
            while (true) {
                if (i16 >= getParentLayout().getFragmentStack().size()) {
                    z2 = false;
                    break;
                }
                BaseFragment baseFragment = getParentLayout().getFragmentStack().get(i16);
                if ((baseFragment instanceof TopicsFragment) && ((TopicsFragment) baseFragment).getDialogId() == this.dialog_id) {
                    z2 = true;
                    break;
                }
                i16++;
            }
            if (!z2) {
                this.headerItem.lazilyAddSubItem(61, R.drawable.msg_discussion, LocaleController.getString("OpenAllTopics", R.string.OpenAllTopics));
            }
        }
        if (this.currentChat != null && this.forumTopic != null) {
            ActionBarMenuItem.Item lazilyAddSubItem2 = this.headerItem.lazilyAddSubItem(60, R.drawable.msg_topic_close, LocaleController.getString("CloseTopic", R.string.CloseTopic));
            this.closeTopicItem = lazilyAddSubItem2;
            TLRPC$Chat tLRPC$Chat4 = this.currentChat;
            lazilyAddSubItem2.setVisibility((tLRPC$Chat4 == null || !ChatObject.canManageTopic(this.currentAccount, tLRPC$Chat4, this.forumTopic) || (tLRPC$TL_forumTopic = this.forumTopic) == null || tLRPC$TL_forumTopic.closed) ? 8 : 0);
        }
        actionBarMenu.setVisibility(this.inMenuMode ? 8 : 0);
        updateTitle(false);
        this.avatarContainer.updateOnlineCount();
        this.avatarContainer.updateSubtitle();
        updateTitleIcons();
        if (this.chatMode != 0 || ((isThreadChat() && !this.isTopic) || this.reportType >= 0)) {
            i2 = 8;
        } else {
            ActionBarMenu.LazyItem lazilyAddItem3 = actionBarMenu.lazilyAddItem(14, R.drawable.ic_ab_other, this.themeDelegate);
            this.attachItem = lazilyAddItem3;
            lazilyAddItem3.setOverrideMenuClick(true);
            this.attachItem.setAllowCloseAnimation(false);
            this.attachItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
            i2 = 8;
            this.attachItem.setVisibility(8);
        }
        if (this.inPreviewMode) {
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(0.0f);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setAlpha(0.0f);
            }
        }
        this.actionModeViews.clear();
        this.selectedMessagesCountTextView = null;
        checkActionBarMenu(false);
        this.scrimPaint = new Paint();
        ChatActivityFragmentView chatActivityFragmentView = new ChatActivityFragmentView(context, this.parentLayout);
        this.contentView = chatActivityFragmentView;
        this.fragmentView = chatActivityFragmentView;
        chatActivityFragmentView.needBlur = true;
        chatActivityFragmentView.needBlurBottom = true;
        if (this.inBubbleMode) {
            chatActivityFragmentView.setOccupyStatusBar(false);
        }
        updateBackground();
        this.emptyViewContainer = null;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
            if (!this.chatActivityEnterView.isEditingMessage()) {
                charSequence = this.chatActivityEnterView.getFieldText();
                mentionsContainerView = this.mentionContainer;
                if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
                    this.mentionContainer.getAdapter().onDestroy();
                }
                r0 = new 15(context, this.themeDelegate);
                this.chatListView = r0;
                if (this.currentEncryptedChat != null && Build.VERSION.SDK_INT >= 19) {
                    r0.setImportantForAccessibility(4);
                }
                this.chatListView.setAccessibilityEnabled(false);
                this.chatListView.setNestedScrollingEnabled(false);
                this.chatListView.setInstantClick(true);
                this.chatListView.setDisableHighlightState(true);
                this.chatListView.setTag(1);
                this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
                RecyclerListView recyclerListView = this.chatListView;
                ChatActivityAdapter chatActivityAdapter = new ChatActivityAdapter(context);
                this.chatAdapter = chatActivityAdapter;
                recyclerListView.setAdapter(chatActivityAdapter);
                this.chatListView.setClipToPadding(false);
                this.chatListView.setAnimateEmptyView(true, 1);
                this.chatListView.setScrollBarStyle(ConnectionsManager.FileTypeVideo);
                this.chatListViewPaddingTop = 0.0f;
                invalidateChatListViewTopPadding();
                if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
                    this.chatListItemAnimator = new 16(this, this.chatListView, this.themeDelegate);
                }
                17 r6 = new 17(context, 1000, 1, true);
                this.chatLayoutManager = r6;
                r6.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() { // from class: org.telegram.ui.ChatActivity.18
                    @Override // androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
                    public int getSpanSize(int i17) {
                        int i18;
                        if (i17 < ChatActivity.this.chatAdapter.messagesStartRow || i17 >= ChatActivity.this.chatAdapter.messagesEndRow || (i18 = i17 - ChatActivity.this.chatAdapter.messagesStartRow) < 0 || i18 >= ChatActivity.this.messages.size()) {
                            return 1000;
                        }
                        MessageObject messageObject3 = ChatActivity.this.messages.get(i18);
                        MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject3);
                        if (validGroupedMessage != null) {
                            return validGroupedMessage.positions.get(messageObject3).spanSize;
                        }
                        return 1000;
                    }
                });
                this.chatListView.setLayoutManager(this.chatLayoutManager);
                this.chatListView.addItemDecoration(new RecyclerView.ItemDecoration(this) { // from class: org.telegram.ui.ChatActivity.19
                    @Override // androidx.recyclerview.widget.RecyclerView.ItemDecoration
                    public void getItemOffsets(Rect rect, View view, RecyclerView recyclerView, RecyclerView.State state) {
                        ChatMessageCell chatMessageCell;
                        MessageObject.GroupedMessages currentMessagesGroup;
                        MessageObject.GroupedMessagePosition currentPosition;
                        int i17 = 0;
                        rect.bottom = 0;
                        if (!(view instanceof ChatMessageCell) || (currentMessagesGroup = (chatMessageCell = (ChatMessageCell) view).getCurrentMessagesGroup()) == null || (currentPosition = chatMessageCell.getCurrentPosition()) == null || currentPosition.siblingHeights == null) {
                            return;
                        }
                        Point point = AndroidUtilities.displaySize;
                        float max = Math.max(point.x, point.y) * 0.5f;
                        int extraInsetHeight = chatMessageCell.getExtraInsetHeight();
                        int i18 = 0;
                        while (true) {
                            float[] fArr = currentPosition.siblingHeights;
                            if (i18 >= fArr.length) {
                                break;
                            }
                            extraInsetHeight += (int) Math.ceil(fArr[i18] * max);
                            i18++;
                        }
                        int round = extraInsetHeight + ((currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f));
                        int size = currentMessagesGroup.posArray.size();
                        while (true) {
                            if (i17 < size) {
                                MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(i17);
                                byte b = groupedMessagePosition.minY;
                                byte b2 = currentPosition.minY;
                                if (b == b2 && ((groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || b != b2 || groupedMessagePosition.maxY != currentPosition.maxY) && b == b2)) {
                                    round -= ((int) Math.ceil(max * groupedMessagePosition.ph)) - AndroidUtilities.dp(4.0f);
                                    break;
                                }
                                i17++;
                            } else {
                                break;
                            }
                        }
                        rect.bottom = -round;
                    }
                });
                this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
                this.chatListView.setOnItemClickListener(this.onItemClickListener);
                this.chatListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.20
                    private boolean scrollUp;
                    private float totalDy = 0.0f;
                    private final int scrollValue = AndroidUtilities.dp(100.0f);

                    @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
                    public void onScrollStateChanged(RecyclerView recyclerView, int i17) {
                        Integer valueOf = Integer.valueOf((int) LiteMode.FLAG_CALLS_ANIMATIONS);
                        if (i17 == 0) {
                            if (ChatActivity.this.pollHintCell != null) {
                                ChatActivity.this.pollHintView.showForMessageCell(ChatActivity.this.pollHintCell, -1, ChatActivity.this.pollHintX, ChatActivity.this.pollHintY, true);
                                ChatActivity.this.pollHintCell = null;
                            }
                            ChatActivity.this.scrollingFloatingDate = false;
                            ChatActivity.this.scrollingChatListView = false;
                            ChatActivity.this.checkTextureViewPosition = false;
                            ChatActivity.this.hideFloatingDateView(true);
                            if (SharedConfig.getDevicePerformanceClass() == 0) {
                                NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startAllHeavyOperations, valueOf);
                            }
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startSpoilers, new Object[0]);
                            ChatActivity.this.chatListView.setOverScrollMode(0);
                            ChatActivity.this.textSelectionHelper.stopScrolling();
                            ChatActivity.this.updateVisibleRows();
                            ChatActivity.this.scrollByTouch = false;
                            return;
                        }
                        if (i17 == 2) {
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollingChatListView = true;
                        } else if (i17 == 1) {
                            ChatActivity.this.pollHintCell = null;
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollingFloatingDate = true;
                            ChatActivity.this.checkTextureViewPosition = true;
                            ChatActivity.this.scrollingChatListView = true;
                        }
                        if (SharedConfig.getDevicePerformanceClass() == 0) {
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopAllHeavyOperations, valueOf);
                        }
                        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopSpoilers, new Object[0]);
                        if (ChatActivity.this.selectionReactionsOverlay == null || !ChatActivity.this.selectionReactionsOverlay.isVisible()) {
                            return;
                        }
                        ChatActivity.this.selectionReactionsOverlay.setHiddenByScroll(true);
                    }

                    @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
                    public void onScrolled(RecyclerView recyclerView, int i17, int i18) {
                        boolean z4;
                        ChatActivity.this.chatListView.invalidate();
                        this.scrollUp = i18 < 0;
                        int findFirstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                        if (((i18 != 0 && ChatActivity.this.scrollByTouch && recyclerView.getScrollState() == 2) || recyclerView.getScrollState() == 1) && ChatActivity.this.forceNextPinnedMessageId != 0) {
                            if (!this.scrollUp || ChatActivity.this.forceScrollToFirst) {
                                ChatActivity.this.forceNextPinnedMessageId = 0;
                            } else if (!ChatActivity.this.chatListView.isFastScrollAnimationRunning() && findFirstVisibleItemPosition != -1) {
                                int findLastVisibleItemPosition = ChatActivity.this.chatLayoutManager.findLastVisibleItemPosition();
                                MessageObject messageObject3 = null;
                                while (true) {
                                    if (findLastVisibleItemPosition < findFirstVisibleItemPosition) {
                                        z4 = false;
                                        break;
                                    }
                                    View findViewByPosition = ChatActivity.this.chatLayoutManager.findViewByPosition(findLastVisibleItemPosition);
                                    if (findViewByPosition instanceof ChatMessageCell) {
                                        messageObject3 = ((ChatMessageCell) findViewByPosition).getMessageObject();
                                    } else if (findViewByPosition instanceof ChatActionCell) {
                                        messageObject3 = ((ChatActionCell) findViewByPosition).getMessageObject();
                                    }
                                    if (messageObject3 != null && ChatActivity.this.forceNextPinnedMessageId == messageObject3.getId()) {
                                        z4 = true;
                                        break;
                                    }
                                    findLastVisibleItemPosition--;
                                }
                                if (!z4 && messageObject3 != null && messageObject3.getId() < ChatActivity.this.forceNextPinnedMessageId) {
                                    ChatActivity.this.forceNextPinnedMessageId = 0;
                                }
                            }
                        }
                        if (recyclerView.getScrollState() == 1) {
                            ChatActivity.this.forceScrollToFirst = false;
                            if (!ChatActivity.this.wasManualScroll && i18 != 0) {
                                ChatActivity.this.wasManualScroll = true;
                            }
                        }
                        if (i18 != 0) {
                            ChatActivity.this.hideHints(true);
                        }
                        if (i18 != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                chatActivity.removeSelectedMessageHighlight();
                                ChatActivity.this.updateVisibleRows();
                            }
                            ChatActivity.this.showFloatingDateView(true);
                        }
                        ChatActivity.this.checkScrollForLoad(true);
                        if (findFirstVisibleItemPosition != -1) {
                            ChatActivity.this.chatAdapter.getItemCount();
                            if (findFirstVisibleItemPosition == 0 && ChatActivity.this.forwardEndReached[0]) {
                                if (i18 >= 0) {
                                    ChatActivity.this.canShowPagedownButton = false;
                                    ChatActivity.this.updatePagedownButtonVisibility(true);
                                }
                            } else if (i18 > 0) {
                                if (ChatActivity.this.pagedownButton.getTag() == null) {
                                    float f = this.totalDy + i18;
                                    this.totalDy = f;
                                    if (f > this.scrollValue) {
                                        this.totalDy = 0.0f;
                                        ChatActivity.this.canShowPagedownButton = true;
                                        ChatActivity.this.updatePagedownButtonVisibility(true);
                                        ChatActivity.this.pagedownButtonShowedByScroll = true;
                                    }
                                }
                            } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                                float f2 = this.totalDy + i18;
                                this.totalDy = f2;
                                if (f2 < (-this.scrollValue)) {
                                    ChatActivity.this.canShowPagedownButton = false;
                                    ChatActivity.this.updatePagedownButtonVisibility(true);
                                    this.totalDy = 0.0f;
                                }
                            }
                        }
                        ChatActivity.this.invalidateMessagesVisiblePart();
                        ChatActivity.this.textSelectionHelper.onParentScrolled();
                        ChatActivity.this.emojiAnimationsOverlay.onScrolled(i18);
                        ReactionsEffectOverlay.onScrolled(i18);
                        ChatActivity.this.checkTranslation(false);
                    }
                });
                this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
                ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = new ChatSelectionReactionMenuOverlay(this, context);
                this.selectionReactionsOverlay = chatSelectionReactionMenuOverlay;
                this.contentView.addView(chatSelectionReactionMenuOverlay, LayoutHelper.createFrame(-1, -1.0f));
                ClippingImageView clippingImageView = new ClippingImageView(context);
                this.animatingImageView = clippingImageView;
                clippingImageView.setVisibility(i2);
                this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
                FrameLayout frameLayout = new FrameLayout(context);
                this.progressView = frameLayout;
                frameLayout.setVisibility(4);
                this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
                View view = new View(context);
                this.progressView2 = view;
                view.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(18.0f), this.progressView2, this.contentView, getThemedPaint("paintChatActionBackground")));
                this.progressView.addView(this.progressView2, LayoutHelper.createFrame(36, 36, 17));
                RadialProgressView radialProgressView = new RadialProgressView(context, this.themeDelegate);
                this.progressBar = radialProgressView;
                radialProgressView.setSize(AndroidUtilities.dp(28.0f));
                this.progressBar.setProgressColor(getThemedColor(Theme.key_chat_serviceText));
                this.progressView.addView(this.progressBar, LayoutHelper.createFrame(i, i, 17));
                ChatActionCell chatActionCell = new ChatActionCell(context, false, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.21
                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        if (getTranslationY() != f) {
                            invalidate();
                        }
                        super.setTranslationY(f);
                    }

                    @Override // android.view.ViewGroup
                    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                        if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                            return false;
                        }
                        return super.onInterceptTouchEvent(motionEvent);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public boolean onTouchEvent(MotionEvent motionEvent) {
                        if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                            return false;
                        }
                        return super.onTouchEvent(motionEvent);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    protected void onDraw(Canvas canvas) {
                        float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - getY()) - AndroidUtilities.dp(4.0f);
                        if (y > 0.0f) {
                            if (y < getMeasuredHeight()) {
                                canvas.save();
                                canvas.clipRect(0.0f, y, getMeasuredWidth(), getMeasuredHeight());
                                super.onDraw(canvas);
                                canvas.restore();
                                return;
                            }
                            return;
                        }
                        super.onDraw(canvas);
                    }
                };
                this.floatingDateView = chatActionCell;
                chatActionCell.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
                this.floatingDateView.setAlpha(0.0f);
                this.floatingDateView.setImportantForAccessibility(2);
                this.floatingDateView.setInvalidateColors(true);
                this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                this.floatingDateView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda85
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$24(view2);
                    }
                });
                tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null) {
                    ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = new ChatActivityMemberRequestsDelegate(this, tLRPC$Chat, new ChatActivityMemberRequestsDelegate.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda288
                        @Override // org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate.Callback
                        public final void onEnterOffsetChanged() {
                            ChatActivity.this.invalidateChatListViewTopPadding();
                        }
                    });
                    this.pendingRequestsDelegate = chatActivityMemberRequestsDelegate;
                    chatActivityMemberRequestsDelegate.setChatInfo(this.chatInfo, false);
                    this.contentView.addView(this.pendingRequestsDelegate.getView(), -1, this.pendingRequestsDelegate.getViewHeight());
                }
                this.pinnedMessageView = null;
                this.undoView = null;
                this.topUndoView = null;
                this.topChatPanelView = null;
                this.reportSpamButton = null;
                this.emojiStatusSpamHint = null;
                this.topViewSeparator1 = null;
                this.topViewSeparator2 = null;
                this.topViewSeparator3 = null;
                this.addToContactsButton = null;
                this.restartTopicButton = null;
                this.closeReportSpam = null;
                this.translateButton = null;
                FrameLayout frameLayout2 = new FrameLayout(context);
                this.pagedownButton = frameLayout2;
                frameLayout2.setVisibility(4);
                this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                this.pagedownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda82
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$25(view2);
                    }
                });
                FrameLayout frameLayout3 = new FrameLayout(context);
                this.mentiondownButton = frameLayout3;
                frameLayout3.setVisibility(4);
                this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                this.mentiondownButton.setOnClickListener(new 22());
                this.mentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda112
                    @Override // android.view.View.OnLongClickListener
                    public final boolean onLongClick(View view2) {
                        boolean lambda$createView$28;
                        lambda$createView$28 = ChatActivity.this.lambda$createView$28(view2);
                        return lambda$createView$28;
                    }
                });
                updateMessageListAccessibilityVisibility();
                FrameLayout frameLayout4 = new FrameLayout(context);
                this.reactionsMentiondownButton = frameLayout4;
                this.contentView.addView(frameLayout4, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                charSequence2 = charSequence;
                MentionsContainerView mentionsContainerView2 = new MentionsContainerView(context, this.dialog_id, this.threadMessageId, this, this.contentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.23
                    private boolean wasAtTop = true;

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected boolean canOpen() {
                        return ChatActivity.this.bottomOverlay.getVisibility() != 0 || ChatActivity.this.searchingForUser;
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onOpen() {
                        if (ChatActivity.this.allowStickersPanel && ((!getAdapter().isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond) && ChatActivity.this.currentEncryptedChat != null && getAdapter().isBotContext())) {
                            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                            if (!globalMainSettings.getBoolean("secretbot", false)) {
                                AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", R.string.SecretChatContextBotAlert));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                ChatActivity.this.showDialog(builder.create());
                                globalMainSettings.edit().putBoolean("secretbot", true).commit();
                            }
                        }
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onClose() {
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onContextSearch(boolean z4) {
                        ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView2 != null) {
                            chatActivityEnterView2.setCaption(getAdapter().getBotCaption());
                            ChatActivity.this.chatActivityEnterView.showContextProgress(z4);
                        }
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onContextClick(TLRPC$BotInlineResult tLRPC$BotInlineResult) {
                        if (ChatActivity.this.getParentActivity() == null || tLRPC$BotInlineResult.content == null) {
                            return;
                        }
                        if (!tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && !tLRPC$BotInlineResult.type.equals("web_player_video")) {
                            ChatActivity.this.processExternalUrl(0, tLRPC$BotInlineResult.content.url, null, null, false);
                            return;
                        }
                        int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                        ChatActivity chatActivity = ChatActivity.this;
                        PhotoViewer.PhotoViewerProvider photoViewerProvider = chatActivity.botContextProvider;
                        String str2 = tLRPC$BotInlineResult.title;
                        if (str2 == null) {
                            str2 = "";
                        }
                        String str3 = tLRPC$BotInlineResult.description;
                        String str4 = tLRPC$BotInlineResult.content.url;
                        EmbedBottomSheet.show(chatActivity, null, photoViewerProvider, str2, str3, str4, str4, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1], ChatActivity.this.isKeyboardVisible());
                    }

                    @Override // org.telegram.ui.Components.MentionsContainerView
                    protected void onScrolled(boolean z4, boolean z5) {
                        if (this.wasAtTop != z4) {
                            AndroidUtilities.updateViewShow(ChatActivity.this.suggestEmojiPanel, z4, false, true);
                            this.wasAtTop = z4;
                        }
                    }
                };
                this.mentionContainer = mentionsContainerView2;
                this.contentView.addView(mentionsContainerView2, LayoutHelper.createFrame(-1, 110, 83));
                final ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.ChatActivity.24
                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean can() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ Boolean canSetAsStatus(TLRPC$Document tLRPC$Document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void copyEmoji(TLRPC$Document tLRPC$Document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ String getQuery(boolean z4) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z4);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void gifAddedOrDeleted() {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needCopy(TLRPC$Document tLRPC$Document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needMenu() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needOpen() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needRemove() {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ boolean needRemoveFromRecent(TLRPC$Document tLRPC$Document) {
                        return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean needSend(int i17) {
                        return true;
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void removeFromRecent(TLRPC$Document tLRPC$Document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void resetTouch() {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void sendEmoji(TLRPC$Document tLRPC$Document) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, tLRPC$Document);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void sendGif(Object obj, Object obj2, boolean z4, int i17) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj, obj2, z4, i17);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public /* synthetic */ void setAsEmojiStatus(TLRPC$Document tLRPC$Document, Integer num) {
                        ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, tLRPC$Document, num);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public void sendSticker(TLRPC$Document tLRPC$Document, String str2, Object obj, boolean z4, int i17) {
                        ChatActivity.this.chatActivityEnterView.lambda$onStickerSelected$47(tLRPC$Document, str2, obj, null, true, z4, i17);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean canSchedule() {
                        return ChatActivity.this.canScheduleMessage();
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public boolean isInScheduleMode() {
                        return ChatActivity.this.chatMode == 1;
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public void openSet(TLRPC$InputStickerSet tLRPC$InputStickerSet, boolean z4) {
                        if (tLRPC$InputStickerSet == null || ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        TLRPC$TL_inputStickerSetID tLRPC$TL_inputStickerSetID = new TLRPC$TL_inputStickerSetID();
                        tLRPC$TL_inputStickerSetID.access_hash = tLRPC$InputStickerSet.access_hash;
                        tLRPC$TL_inputStickerSetID.id = tLRPC$InputStickerSet.id;
                        Activity parentActivity = ChatActivity.this.getParentActivity();
                        ChatActivity chatActivity = ChatActivity.this;
                        StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tLRPC$TL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
                        stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                        stickersAlert.setClearsInputField(z4);
                        ChatActivity.this.showDialog(stickersAlert);
                    }

                    @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
                    public long getDialogId() {
                        return ChatActivity.this.dialog_id;
                    }
                };
                this.mentionContainer.getListView().setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda117
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view2, MotionEvent motionEvent) {
                        boolean lambda$createView$29;
                        lambda$createView$29 = ChatActivity.this.lambda$createView$29(contentPreviewViewerDelegate, view2, motionEvent);
                        return lambda$createView$29;
                    }
                });
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
                }
                this.mentionContainer.getAdapter().setParentFragment(this);
                this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
                this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
                this.mentionContainer.getAdapter().setNeedBotContext(true);
                this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
                MentionsContainerView.MentionsListView listView = this.mentionContainer.getListView();
                RecyclerListView.OnItemClickListener onItemClickListener = new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda283
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                    public final void onItemClick(View view2, int i17) {
                        ChatActivity.this.lambda$createView$33(view2, i17);
                    }
                };
                this.mentionsOnItemClickListener = onItemClickListener;
                listView.setOnItemClickListener(onItemClickListener);
                this.mentionContainer.getListView().setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda286
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener
                    public final boolean onItemClick(View view2, int i17) {
                        boolean lambda$createView$35;
                        lambda$createView$35 = ChatActivity.this.lambda$createView$35(view2, i17);
                        return lambda$createView$35;
                    }
                });
                ImageView imageView = new ImageView(context);
                this.pagedownButtonImage = imageView;
                imageView.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                i3 = Build.VERSION.SDK_INT;
                if (i3 < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new ViewOutlineProvider(this) { // from class: org.telegram.ui.ChatActivity.25
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Resources resources = context.getResources();
                int i17 = R.drawable.pagedown_shadow;
                Drawable mutate = resources.getDrawable(i17).mutate();
                mutate.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable = new CombinedDrawable(mutate, createCircleDrawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.pagedownButtonImage.setBackground(combinedDrawable);
                this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
                this.pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", R.string.AccDescrPageDown));
                ImageView imageView2 = new ImageView(context);
                this.pagedownButtonArrow = imageView2;
                imageView2.setImageResource(R.drawable.pagedown);
                this.pagedownButtonArrow.setScaleType(ImageView.ScaleType.CENTER);
                ImageView imageView3 = this.pagedownButtonArrow;
                int i18 = Theme.key_chat_goDownButtonIcon;
                imageView3.setColorFilter(new PorterDuffColorFilter(getThemedColor(i18), PorterDuff.Mode.MULTIPLY));
                this.pagedownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.pagedownButtonArrow.setPivotX(AndroidUtilities.dp(23.0f));
                this.pagedownButtonArrow.setPivotY(AndroidUtilities.dp(33.0f));
                this.pagedownButton.addView(this.pagedownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
                this.pagedownButtonLoading = new ImageView(context);
                CircularProgressDrawable circularProgressDrawable = new CircularProgressDrawable(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(1.7f), getThemedColor(i18));
                this.pagedownButtonLoadingDrawable = circularProgressDrawable;
                circularProgressDrawable.setAngleOffset(90.0f);
                this.pagedownButtonLoading.setImageDrawable(this.pagedownButtonLoadingDrawable);
                this.pagedownButtonLoading.setAlpha(0.0f);
                this.pagedownButtonLoading.setVisibility(i2);
                this.pagedownButton.addView(this.pagedownButtonLoading, LayoutHelper.createFrame(46, 46, 81));
                CounterView counterView = new CounterView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.26
                    @Override // android.view.View
                    public void invalidate() {
                        if (isInOutAnimation()) {
                            ChatActivity.this.contentView.invalidate();
                        }
                        super.invalidate();
                    }
                };
                this.pagedownButtonCounter = counterView;
                counterView.setReverse(true);
                this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
                ImageView imageView4 = new ImageView(context);
                this.mentiondownButtonImage = imageView4;
                imageView4.setImageResource(R.drawable.mentionbutton);
                this.mentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
                this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i18), PorterDuff.Mode.MULTIPLY));
                this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                if (i3 < 21) {
                    this.pagedownButtonImage.setOutlineProvider(new ViewOutlineProvider(this) { // from class: org.telegram.ui.ChatActivity.27
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable2 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable2 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate2 = context.getResources().getDrawable(i17).mutate();
                mutate2.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable2 = new CombinedDrawable(mutate2, createCircleDrawable2, 0, 0);
                combinedDrawable2.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable2);
                this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                SimpleTextView simpleTextView = new SimpleTextView(context);
                this.mentiondownButtonCounter = simpleTextView;
                simpleTextView.setVisibility(4);
                this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.mentiondownButtonCounter.setTextSize(13);
                this.mentiondownButtonCounter.setTextColor(getThemedColor(Theme.key_chat_goDownButtonCounter));
                this.mentiondownButtonCounter.setGravity(17);
                this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor(Theme.key_chat_goDownButtonCounterBackground)));
                this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f), AndroidUtilities.dp(8.0f), 0);
                this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
                this.mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", R.string.AccDescrMentionDown));
                this.reactionsMentiondownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda86
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ChatActivity.this.lambda$createView$37(view2);
                    }
                });
                this.reactionsMentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
                    @Override // android.view.View.OnLongClickListener
                    public final boolean onLongClick(View view2) {
                        boolean lambda$createView$40;
                        lambda$createView$40 = ChatActivity.this.lambda$createView$40(view2);
                        return lambda$createView$40;
                    }
                });
                this.reactionsMentiondownButton.setVisibility(4);
                ImageView imageView5 = new ImageView(context);
                this.reactionsMentiondownButtonImage = imageView5;
                imageView5.setImageResource(R.drawable.reactionbutton);
                this.reactionsMentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
                this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i18), PorterDuff.Mode.MULTIPLY));
                if (i3 < 21) {
                    this.reactionsMentiondownButtonImage.setOutlineProvider(new ViewOutlineProvider(this) { // from class: org.telegram.ui.ChatActivity.28
                        @Override // android.view.ViewOutlineProvider
                        public void getOutline(View view2, Outline outline) {
                            outline.setOval(0, 0, AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                        }
                    });
                    createCircleDrawable3 = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton), getThemedColor(Theme.key_listSelector));
                } else {
                    createCircleDrawable3 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), getThemedColor(Theme.key_chat_goDownButton));
                }
                Drawable mutate3 = context.getResources().getDrawable(i17).mutate();
                mutate3.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
                CombinedDrawable combinedDrawable3 = new CombinedDrawable(mutate3, createCircleDrawable3, 0, 0);
                combinedDrawable3.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable3);
                this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
                CounterView counterView2 = new CounterView(context, this.themeDelegate);
                this.reactionsMentiondownButtonCounter = counterView2;
                this.reactionsMentiondownButton.addView(counterView2, LayoutHelper.createFrame(-1, 28, 51));
                this.reactionsMentiondownButton.setContentDescription(LocaleController.getString("AccDescrReactionMentionDown", R.string.AccDescrReactionMentionDown));
                this.fragmentLocationContextView = new FragmentContextView(context, this, true, this.themeDelegate);
                this.fragmentContextView = new FragmentContextView(context, this, false, this.themeDelegate);
                this.contentView.addView(this.fragmentLocationContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                this.contentView.addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                this.fragmentContextView.setAdditionalContextView(this.fragmentLocationContextView);
                this.fragmentLocationContextView.setAdditionalContextView(this.fragmentContextView);
                this.fragmentContextView.setEnabled(!this.inPreviewMode);
                this.fragmentLocationContextView.setEnabled(!this.inPreviewMode);
                if (this.chatMode != 0) {
                    this.fragmentContextView.setSupportsCalls(false);
                }
                RecyclerListView recyclerListView2 = new RecyclerListView(context, this.themeDelegate);
                this.messagesSearchListView = recyclerListView2;
                recyclerListView2.setBackgroundColor(getThemedColor(Theme.key_windowBackgroundWhite));
                final LinearLayoutManager linearLayoutManager = new LinearLayoutManager(context);
                linearLayoutManager.setOrientation(1);
                this.messagesSearchListView.setLayoutManager(linearLayoutManager);
                this.messagesSearchListView.setVisibility(i2);
                this.messagesSearchListView.setAlpha(0.0f);
                RecyclerListView recyclerListView3 = this.messagesSearchListView;
                MessagesSearchAdapter messagesSearchAdapter = new MessagesSearchAdapter(context, this.themeDelegate);
                this.messagesSearchAdapter = messagesSearchAdapter;
                recyclerListView3.setAdapter(messagesSearchAdapter);
                this.contentView.addView(this.messagesSearchListView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
                this.messagesSearchListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda284
                    @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                    public final void onItemClick(View view2, int i19) {
                        ChatActivity.this.lambda$createView$41(view2, i19);
                    }
                });
                this.messagesSearchListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.29
                    @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
                    public void onScrolled(RecyclerView recyclerView, int i19, int i20) {
                        int findLastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();
                        if ((findLastVisibleItemPosition == -1 ? 0 : findLastVisibleItemPosition) <= 0 || findLastVisibleItemPosition <= linearLayoutManager.getItemCount() - 5) {
                            return;
                        }
                        ChatActivity.this.getMediaDataController().loadMoreSearchMessages();
                    }
                });
                this.contentView.addView(this.actionBar);
                View view2 = new View(context);
                this.overlayView = view2;
                view2.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda115
                    @Override // android.view.View.OnTouchListener
                    public final boolean onTouch(View view3, MotionEvent motionEvent) {
                        boolean lambda$createView$42;
                        lambda$createView$42 = ChatActivity.this.lambda$createView$42(view3, motionEvent);
                        return lambda$createView$42;
                    }
                });
                this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
                this.overlayView.setVisibility(i2);
                this.contentView.setClipChildren(false);
                this.instantCameraView = null;
                BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.30
                    @Override // android.view.View
                    public void onDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        Rect rect = AndroidUtilities.rectTmp2;
                        rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                        ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
                    }
                };
                this.bottomMessagesActionContainer = blurredFrameLayout;
                blurredFrameLayout.drawBlur = false;
                blurredFrameLayout.isTopView = false;
                blurredFrameLayout.setVisibility(4);
                this.bottomMessagesActionContainer.setWillNotDraw(false);
                this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
                this.bottomMessagesActionContainer.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda120.INSTANCE);
                this.replyButton = null;
                this.forwardButton = null;
                31 r8 = new 31(getParentActivity(), this.contentView, this, true, this.themeDelegate);
                this.chatActivityEnterView = r8;
                r8.setDelegate(new ChatActivityEnterViewDelegate());
                this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
                tLRPC$ChatFull = this.chatInfo;
                if (tLRPC$ChatFull != null) {
                    this.chatActivityEnterView.setChatInfo(tLRPC$ChatFull);
                }
                this.chatActivityEnterView.setId(1000);
                this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, false);
                this.chatActivityEnterView.updateBotWebView(false);
                this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
                chatActivityEnterView2.setAllowStickersAndGifs(true, true, tLRPC$EncryptedChat != null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 46);
                str = this.inlineQueryForInput;
                if (str != null) {
                    this.chatActivityEnterView.setFieldText(str);
                    this.inlineQueryForInput = null;
                }
                if (this.inPreviewMode) {
                    this.chatActivityEnterView.setVisibility(4);
                }
                if (ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                    this.chatActivityEnterView.setBotInfo(this.botInfo, false);
                }
                this.contentView.addView(this.chatActivityEnterView, LayoutHelper.createFrame(-1, -2, 83));
                this.chatActivityEnterView.checkChannelRights();
                this.chatActivityEnterTopView = new ChatActivityEnterTopView(context) { // from class: org.telegram.ui.ChatActivity.32
                    @Override // android.view.View
                    public boolean hasOverlappingRendering() {
                        return false;
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null) {
                            chatActivityEnterView3.invalidate();
                        }
                        if (getVisibility() != 8) {
                            ChatActivity.this.hideHints(true);
                            if (ChatActivity.this.chatListView != null) {
                                ChatActivity.this.chatListView.setTranslationY(f);
                            }
                            if (ChatActivity.this.progressView != null) {
                                ChatActivity.this.progressView.setTranslationY(f);
                            }
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                            if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                                ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                            }
                        }
                    }

                    @Override // android.view.View
                    public void setVisibility(int i19) {
                        super.setVisibility(i19);
                        if (i19 == 8) {
                            if (ChatActivity.this.chatListView != null) {
                                ChatActivity.this.chatListView.setTranslationY(0.0f);
                            }
                            if (ChatActivity.this.progressView != null) {
                                ChatActivity.this.progressView.setTranslationY(0.0f);
                            }
                        }
                    }
                };
                View view3 = new View(context);
                this.replyLineView = view3;
                view3.setBackgroundColor(getThemedColor(Theme.key_chat_replyPanelLine));
                this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
                final FrameLayout frameLayout5 = new FrameLayout(context);
                this.chatActivityEnterTopView.addReplyView(frameLayout5, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
                frameLayout5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda84
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$44(view4);
                    }
                });
                ImageView imageView6 = new ImageView(context);
                this.replyIconImageView = imageView6;
                imageView6.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelIcons), PorterDuff.Mode.MULTIPLY));
                this.replyIconImageView.setScaleType(ImageView.ScaleType.CENTER);
                frameLayout5.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
                ImageView imageView7 = new ImageView(context);
                this.replyCloseImageView = imageView7;
                imageView7.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelClose), PorterDuff.Mode.MULTIPLY));
                this.replyCloseImageView.setImageResource(R.drawable.input_clear);
                this.replyCloseImageView.setScaleType(ImageView.ScaleType.CENTER);
                if (i3 >= 21) {
                    this.replyCloseImageView.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615, 1, AndroidUtilities.dp(18.0f)));
                }
                this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                this.replyCloseImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda72
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$45(view4);
                    }
                });
                SimpleTextView simpleTextView2 = new SimpleTextView(context);
                this.replyNameTextView = simpleTextView2;
                simpleTextView2.setTextSize(14);
                this.replyNameTextView.setTextColor(getThemedColor(Theme.key_chat_replyPanelName));
                this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                frameLayout5.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView3 = new SimpleTextView(context);
                this.replyObjectTextView = simpleTextView3;
                simpleTextView3.setTextSize(14);
                SimpleTextView simpleTextView4 = this.replyObjectTextView;
                int i19 = Theme.key_windowBackgroundWhiteGrayText;
                simpleTextView4.setTextColor(getThemedColor(i19));
                frameLayout5.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                SimpleTextView simpleTextView5 = new SimpleTextView(context);
                this.replyObjectHintTextView = simpleTextView5;
                simpleTextView5.setTextSize(14);
                this.replyObjectHintTextView.setTextColor(getThemedColor(i19));
                this.replyObjectHintTextView.setText(LocaleController.getString("TapForForwardingOptions", R.string.TapForForwardingOptions));
                this.replyObjectHintTextView.setAlpha(0.0f);
                frameLayout5.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
                final SpoilerEffect spoilerEffect = new SpoilerEffect();
                BackupImageView backupImageView = new BackupImageView(context) { // from class: org.telegram.ui.ChatActivity.33
                    Path path = new Path();

                    @Override // android.view.View
                    public void draw(Canvas canvas) {
                        super.draw(canvas);
                        if (ChatActivity.this.replyImageHasMediaSpoiler) {
                            this.path.rewind();
                            RectF rectF = AndroidUtilities.rectTmp;
                            rectF.set(this.imageReceiver.getImageX(), this.imageReceiver.getImageY(), this.imageReceiver.getImageX2(), this.imageReceiver.getImageY2());
                            this.path.addRoundRect(rectF, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Path.Direction.CW);
                            canvas.save();
                            canvas.clipPath(this.path);
                            spoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                            spoilerEffect.setBounds((int) this.imageReceiver.getImageX(), (int) this.imageReceiver.getImageY(), (int) this.imageReceiver.getImageX2(), (int) this.imageReceiver.getImageY2());
                            spoilerEffect.draw(canvas);
                            invalidate();
                            canvas.restore();
                        }
                    }
                };
                this.replyImageView = backupImageView;
                backupImageView.setRoundRadius(AndroidUtilities.dp(2.0f));
                frameLayout5.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                ChatActivityFragmentView chatActivityFragmentView2 = this.contentView;
                SuggestEmojiView suggestEmojiView = new SuggestEmojiView(context, this.currentAccount, this.chatActivityEnterView, this.themeDelegate);
                this.suggestEmojiPanel = suggestEmojiView;
                chatActivityFragmentView2.addView(suggestEmojiView, LayoutHelper.createFrame(-1, 160, 83));
                ChatActivityEnterTopView.EditView editView = new ChatActivityEnterTopView.EditView(context);
                editView.setMotionEventSplittingEnabled(false);
                editView.setOrientation(0);
                editView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda64
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$46(view4);
                    }
                });
                this.chatActivityEnterTopView.addEditView(editView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
                i4 = 0;
                while (i4 < 2) {
                    final boolean z4 = i4 == 0;
                    final ChatActivityEnterTopView.EditViewButton editViewButton = new ChatActivityEnterTopView.EditViewButton(context) { // from class: org.telegram.ui.ChatActivity.34
                        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
                        public void setEditButton(boolean z5) {
                            super.setEditButton(z5);
                            if (z4) {
                                getTextView().setMaxWidth(z5 ? AndroidUtilities.dp(116.0f) : ConnectionsManager.DEFAULT_DATACENTER_ID);
                            }
                        }

                        @Override // org.telegram.ui.Components.ChatActivityEnterTopView.EditViewButton
                        public void updateColors() {
                            int dp = z4 ? AndroidUtilities.dp(14.0f) : 0;
                            ChatActivity chatActivity = ChatActivity.this;
                            int i20 = Theme.key_chat_replyPanelName;
                            setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i20) & 436207615, dp, 0));
                            getImageView().setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(i20), PorterDuff.Mode.MULTIPLY));
                            getTextView().setTextColor(ChatActivity.this.getThemedColor(i20));
                        }
                    };
                    editViewButton.setOrientation(0);
                    ViewHelper.setPadding(editViewButton, 10.0f, 0.0f, 10.0f, 0.0f);
                    editView.addButton(editViewButton, LayoutHelper.createLinear(-2, -1));
                    ImageView imageView8 = new ImageView(context);
                    imageView8.setScaleType(ImageView.ScaleType.CENTER);
                    imageView8.setImageResource(z4 ? R.drawable.msg_photoeditor : R.drawable.msg_replace);
                    editViewButton.addImageView(imageView8, LayoutHelper.createLinear(24, -1));
                    editViewButton.addView(new Space(context), LayoutHelper.createLinear(10, -1));
                    TextView textView = new TextView(context);
                    textView.setMaxLines(1);
                    textView.setSingleLine(true);
                    textView.setTextSize(1, 14.0f);
                    textView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                    textView.setGravity(19);
                    textView.setEllipsize(TextUtils.TruncateAt.END);
                    editViewButton.addTextView(textView, LayoutHelper.createLinear(-2, -1));
                    editViewButton.updateColors();
                    editViewButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda103
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view4) {
                            ChatActivity.this.lambda$createView$47(editViewButton, frameLayout5, view4);
                        }
                    });
                    i4++;
                }
                this.searchContainer = null;
                FrameLayout frameLayout6 = new FrameLayout(context) { // from class: org.telegram.ui.ChatActivity.35
                    @Override // android.view.View
                    public void onDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                    }
                };
                this.bottomOverlay = frameLayout6;
                frameLayout6.setWillNotDraw(false);
                this.bottomOverlay.setVisibility(4);
                this.bottomOverlay.setFocusable(true);
                this.bottomOverlay.setFocusableInTouchMode(true);
                this.bottomOverlay.setClickable(true);
                this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                TextView textView2 = new TextView(context);
                this.bottomOverlayText = textView2;
                textView2.setTextSize(1, 14.0f);
                this.bottomOverlayText.setGravity(17);
                this.bottomOverlayText.setMaxLines(2);
                this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
                this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
                this.bottomOverlayText.setTextColor(getThemedColor(Theme.key_chat_secretChatStatusText));
                this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                BlurredFrameLayout blurredFrameLayout2 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.36
                    @Override // android.widget.FrameLayout, android.view.View
                    protected void onMeasure(int i20, int i21) {
                        ((FrameLayout.LayoutParams) ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = View.MeasureSpec.getSize(i20);
                        super.onMeasure(i20, i21);
                    }

                    @Override // org.telegram.ui.Components.BlurredFrameLayout, android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                        Theme.chat_composeShadowDrawable.draw(canvas);
                        if (SharedConfig.chatBlurEnabled()) {
                            if (this.backgroundPaint == null) {
                                this.backgroundPaint = new Paint();
                            }
                            this.backgroundPaint.setColor(ChatActivity.this.getThemedColor(Theme.key_chat_messagePanelBackground));
                            Rect rect = AndroidUtilities.rectTmp2;
                            rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                            ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, this.backgroundPaint, false);
                        } else {
                            canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                        }
                        super.dispatchDraw(canvas);
                    }
                };
                this.bottomOverlayChat = blurredFrameLayout2;
                blurredFrameLayout2.isTopView = false;
                blurredFrameLayout2.drawBlur = false;
                blurredFrameLayout2.setWillNotDraw(false);
                this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
                this.bottomOverlayChat.setVisibility(4);
                this.bottomOverlayChat.setClipChildren(false);
                this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                TextView textView3 = new TextView(context) { // from class: org.telegram.ui.ChatActivity.37
                    CellFlickerDrawable cellFlickerDrawable;

                    @Override // android.widget.TextView, android.view.View
                    protected void onDraw(Canvas canvas) {
                        super.onDraw(canvas);
                        if (this.cellFlickerDrawable == null) {
                            CellFlickerDrawable cellFlickerDrawable = new CellFlickerDrawable();
                            this.cellFlickerDrawable = cellFlickerDrawable;
                            cellFlickerDrawable.drawFrame = false;
                            cellFlickerDrawable.repeatProgress = 2.0f;
                        }
                        this.cellFlickerDrawable.setParentWidth(getMeasuredWidth());
                        RectF rectF = AndroidUtilities.rectTmp;
                        rectF.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                        this.cellFlickerDrawable.draw(canvas, rectF, AndroidUtilities.dp(4.0f), null);
                        invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int i20) {
                        super.setVisibility(i20);
                        ChatActivity.this.bottomOverlayChat.getLayoutParams().height = AndroidUtilities.dp(i20 == 0 ? 67.0f : 51.0f);
                    }
                };
                this.bottomOverlayStartButton = textView3;
                textView3.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(Theme.key_featuredStickers_addButton), 8.0f));
                this.bottomOverlayStartButton.setTextColor(getThemedColor(Theme.key_featuredStickers_buttonText));
                this.bottomOverlayStartButton.setText(LocaleController.getString(R.string.BotStart));
                this.bottomOverlayStartButton.setTextSize(1, 16.0f);
                this.bottomOverlayStartButton.setGravity(17);
                this.bottomOverlayStartButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.bottomOverlayStartButton.setVisibility(8);
                this.bottomOverlayStartButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda63
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$48(view4);
                    }
                });
                this.bottomOverlayChat.addView(this.bottomOverlayStartButton, LayoutHelper.createFrame(-1, -1.0f, 17, 8.0f, 8.0f, 8.0f, 8.0f));
                tLRPC$User = this.currentUser;
                if (tLRPC$User != null && tLRPC$User.bot && !UserObject.isReplyUser(tLRPC$User) && !isInScheduleMode() && this.chatMode != 2) {
                    this.bottomOverlayStartButton.setVisibility(0);
                    this.bottomOverlayChat.setVisibility(0);
                }
                UnreadCounterTextView unreadCounterTextView = new UnreadCounterTextView(context) { // from class: org.telegram.ui.ChatActivity.38
                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected boolean isTouchFullWidth() {
                        return ChatActivity.this.botInfo != null;
                    }

                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected Theme.ResourcesProvider getResourceProvider() {
                        return ChatActivity.this.themeDelegate;
                    }

                    @Override // org.telegram.ui.Components.UnreadCounterTextView
                    protected float getTopOffset() {
                        return -AndroidUtilities.dp(2.0f);
                    }
                };
                this.bottomOverlayChatText = unreadCounterTextView;
                this.bottomOverlayChat.addView(unreadCounterTextView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayChatText.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda96
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$54(context, view4);
                    }
                });
                RadialProgressView radialProgressView2 = new RadialProgressView(context, this.themeDelegate);
                this.bottomOverlayProgress = radialProgressView2;
                radialProgressView2.setSize(AndroidUtilities.dp(22.0f));
                RadialProgressView radialProgressView3 = this.bottomOverlayProgress;
                int i20 = Theme.key_chat_fieldOverlayText;
                radialProgressView3.setProgressColor(getThemedColor(i20));
                this.bottomOverlayProgress.setVisibility(4);
                this.bottomOverlayProgress.setScaleX(0.1f);
                this.bottomOverlayProgress.setScaleY(0.1f);
                this.bottomOverlayProgress.setAlpha(1.0f);
                this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
                this.bottomOverlayImage = new ImageView(context);
                int themedColor = getThemedColor(i20);
                this.bottomOverlayImage.setImageResource(R.drawable.msg_help);
                this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY));
                this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
                i5 = Build.VERSION.SDK_INT;
                if (i5 < 21) {
                    this.bottomOverlayImage.setBackgroundDrawable(Theme.createSelectorDrawable(Color.argb(24, Color.red(themedColor), Color.green(themedColor), Color.blue(themedColor)), 1));
                }
                this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
                this.bottomOverlayImage.setContentDescription(LocaleController.getString("SettingsHelp", R.string.SettingsHelp));
                this.bottomOverlayImage.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda74
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view4) {
                        ChatActivity.this.lambda$createView$55(view4);
                    }
                });
                ChatActivityFragmentView chatActivityFragmentView3 = this.contentView;
                MessageEnterTransitionContainer messageEnterTransitionContainer = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
                this.messageEnterTransitionContainer = messageEnterTransitionContainer;
                chatActivityFragmentView3.addView(messageEnterTransitionContainer);
                if (this.currentChat != null) {
                    HintView hintView = new HintView(getParentActivity(), 2, this.themeDelegate);
                    this.slowModeHint = hintView;
                    hintView.setAlpha(0.0f);
                    this.slowModeHint.setVisibility(4);
                    this.contentView.addView(this.slowModeHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                }
                this.chatAdapter.updateRowsSafe();
                if (this.loading || !this.messages.isEmpty()) {
                    z = false;
                    showProgressView(false);
                    createEmptyView();
                    this.chatListView.setEmptyView(this.emptyViewContainer);
                } else {
                    showProgressView(this.chatAdapter.botInfoRow < 0);
                    this.chatListView.setEmptyView(null);
                    z = false;
                }
                checkBotKeyboard();
                updateBottomOverlay();
                updateSecretStatus();
                updateTopPanel(z);
                updatePinnedMessageView(z);
                updateInfoTopView(z);
                RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager);
                this.chatScrollHelper = recyclerAnimationScrollHelper;
                recyclerAnimationScrollHelper.setScrollListener(new RecyclerAnimationScrollHelper.ScrollListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda281
                    @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.ScrollListener
                    public final void onScroll() {
                        ChatActivity.this.invalidateMessagesVisiblePart();
                    }
                });
                this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
                this.flagSecure = new FlagSecureReason(getParentActivity().getWindow(), new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda240
                    @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
                    public final boolean run() {
                        boolean lambda$createView$56;
                        lambda$createView$56 = ChatActivity.this.lambda$createView$56();
                        return lambda$createView$56;
                    }
                });
                if (charSequence2 != null) {
                    this.chatActivityEnterView.setFieldText(charSequence2);
                }
                fixLayoutInternal();
                this.textSelectionHelper.setCallback(new TextSelectionHelper.Callback() { // from class: org.telegram.ui.ChatActivity.40
                    @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
                    public void onStateChanged(boolean z5) {
                        ChatActivity.this.swipeBackEnabled = !z5;
                        if (z5) {
                            if (ChatActivity.this.slidingView != null) {
                                ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                                ChatActivity.this.slidingView = null;
                            }
                            ChatActivity.this.maybeStartTrackingSlidingView = false;
                            ChatActivity.this.startedTrackingSlidingView = false;
                            if (ChatActivity.this.textSelectionHint != null) {
                                ChatActivity.this.textSelectionHint.hide();
                            }
                        }
                        ChatActivity.this.updatePagedownButtonVisibility(true);
                    }

                    @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
                    public void onTextCopied() {
                        if (((BaseFragment) ChatActivity.this).actionBar != null && ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                            ChatActivity.this.clearSelectionMode();
                        }
                        ChatActivity.this.createUndoView();
                        ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                    }
                });
                overlayView = this.textSelectionHelper.getOverlayView(context);
                if (overlayView != null) {
                    if (overlayView.getParent() instanceof ViewGroup) {
                        ((ViewGroup) overlayView.getParent()).removeView(overlayView);
                    }
                    this.contentView.addView(overlayView);
                }
                this.textSelectionHelper.setParentView(this.chatListView);
                ChatActivityFragmentView chatActivityFragmentView4 = this.contentView;
                FireworksOverlay fireworksOverlay = new FireworksOverlay(context);
                this.fireworksOverlay = fireworksOverlay;
                chatActivityFragmentView4.addView(fireworksOverlay, LayoutHelper.createFrame(-1, -1.0f));
                checkInstantSearch();
                messageObject = this.replyingMessageObject;
                if (messageObject != null) {
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject);
                }
                if (i5 < 21) {
                    viewGroup = (ViewGroup) getParentActivity().getWindow().getDecorView();
                } else {
                    viewGroup = this.contentView;
                }
                PinchToZoomHelper pinchToZoomHelper = new PinchToZoomHelper(this, viewGroup, this.contentView) { // from class: org.telegram.ui.ChatActivity.41
                    @Override // org.telegram.ui.PinchToZoomHelper
                    protected void drawOverlays(Canvas canvas, float f, float f2, float f3, float f4, float f5) {
                        if (f > 0.0f) {
                            View child = getChild();
                            if (child instanceof ChatMessageCell) {
                                ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                                RectF rectF = AndroidUtilities.rectTmp;
                                rectF.set(f2, (int) Math.max(f4, f3), chatMessageCell.getMeasuredWidth() + f2, (int) Math.min(f5, chatMessageCell.getMeasuredHeight() + f3));
                                canvas.saveLayerAlpha(rectF, (int) (f * 255.0f), 31);
                                canvas.translate(f2, f3);
                                chatMessageCell.drawFromPinchToZoom = true;
                                chatMessageCell.drawOverlays(canvas);
                                if (chatMessageCell.shouldDrawTimeOnMedia() && chatMessageCell.getCurrentMessagesGroup() == null) {
                                    chatMessageCell.drawTime(canvas, 1.0f, false);
                                }
                                chatMessageCell.drawFromPinchToZoom = false;
                                canvas.restore();
                            }
                        }
                    }
                };
                this.pinchToZoomHelper = pinchToZoomHelper;
                pinchToZoomHelper.setCallback(new PinchToZoomHelper.Callback() { // from class: org.telegram.ui.ChatActivity.42
                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public TextureView getCurrentTextureView() {
                        return ChatActivity.this.videoTextureView;
                    }

                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public void onZoomStarted(MessageObject messageObject3) {
                        ChatActivity.this.chatListView.cancelClickRunnables(true);
                        ChatActivity.this.chatListView.stopScroll();
                        if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            chatActivity.contentView.removeView(chatActivity.videoPlayerContainer);
                            ChatActivity.this.videoPlayerContainer = null;
                            ChatActivity.this.videoTextureView = null;
                            ChatActivity.this.aspectRatioFrameLayout = null;
                        }
                        for (int i21 = 0; i21 < ChatActivity.this.chatListView.getChildCount(); i21++) {
                            if (ChatActivity.this.chatListView.getChildAt(i21) instanceof ChatMessageCell) {
                                ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i21);
                                if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                    chatMessageCell.getPhotoImage().setVisible(false, true);
                                }
                            }
                        }
                    }

                    @Override // org.telegram.ui.PinchToZoomHelper.Callback
                    public void onZoomFinished(MessageObject messageObject3) {
                        if (messageObject3 == null) {
                            return;
                        }
                        if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                            for (int i21 = 0; i21 < ChatActivity.this.chatListView.getChildCount(); i21++) {
                                if (ChatActivity.this.chatListView.getChildAt(i21) instanceof ChatMessageCell) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i21);
                                    if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                        AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                        if (animation.isRunning()) {
                                            animation.stop();
                                        }
                                        Bitmap animatedBitmap = animation.getAnimatedBitmap();
                                        if (animatedBitmap != null) {
                                            try {
                                                Bitmap videoBitmap = ChatActivity.this.pinchToZoomHelper.getVideoBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                                new Canvas(animatedBitmap).drawBitmap(videoBitmap, 0.0f, 0.0f, (Paint) null);
                                                videoBitmap.recycle();
                                            } catch (Throwable th) {
                                                FileLog.e(th);
                                            }
                                        }
                                    }
                                }
                            }
                            ChatActivity.this.createTextureView(true);
                            MediaController.getInstance().setTextureView(ChatActivity.this.videoTextureView, ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
                        }
                        ChatActivity.this.chatListView.invalidate();
                    }
                });
                this.pinchToZoomHelper.setClipBoundsListener(new PinchToZoomHelper.ClipBoundsListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda290
                    @Override // org.telegram.ui.PinchToZoomHelper.ClipBoundsListener
                    public final void getClipTopBottom(float[] fArr) {
                        ChatActivity.this.lambda$createView$57(fArr);
                    }
                });
                this.emojiAnimationsOverlay = new EmojiAnimationsOverlay(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId) { // from class: org.telegram.ui.ChatActivity.43
                    @Override // org.telegram.ui.EmojiAnimationsOverlay
                    public void onAllEffectsEnd() {
                        ChatActivity.this.updateMessagesVisiblePart(false);
                    }
                };
                this.actionBar.setDrawBlurBackground(this.contentView);
                if (!this.isTopic) {
                    this.reactionsMentionCount = this.forumTopic.unread_reactions_count;
                    updateReactionsMentionButton(false);
                } else {
                    TLRPC$Dialog tLRPC$Dialog = getMessagesController().dialogs_dict.get(this.dialog_id);
                    if (tLRPC$Dialog != null) {
                        this.reactionsMentionCount = tLRPC$Dialog.unread_reactions_count;
                        updateReactionsMentionButton(false);
                    }
                }
                return this.fragmentView;
            }
        }
        charSequence = null;
        mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        r0 = new 15(context, this.themeDelegate);
        this.chatListView = r0;
        if (this.currentEncryptedChat != null) {
            r0.setImportantForAccessibility(4);
        }
        this.chatListView.setAccessibilityEnabled(false);
        this.chatListView.setNestedScrollingEnabled(false);
        this.chatListView.setInstantClick(true);
        this.chatListView.setDisableHighlightState(true);
        this.chatListView.setTag(1);
        this.chatListView.setVerticalScrollBarEnabled(!SharedConfig.chatBlurEnabled());
        RecyclerListView recyclerListView4 = this.chatListView;
        ChatActivityAdapter chatActivityAdapter2 = new ChatActivityAdapter(context);
        this.chatAdapter = chatActivityAdapter2;
        recyclerListView4.setAdapter(chatActivityAdapter2);
        this.chatListView.setClipToPadding(false);
        this.chatListView.setAnimateEmptyView(true, 1);
        this.chatListView.setScrollBarStyle(ConnectionsManager.FileTypeVideo);
        this.chatListViewPaddingTop = 0.0f;
        invalidateChatListViewTopPadding();
        if (MessagesController.getGlobalMainSettings().getBoolean("view_animations", true)) {
        }
        17 r62 = new 17(context, 1000, 1, true);
        this.chatLayoutManager = r62;
        r62.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() { // from class: org.telegram.ui.ChatActivity.18
            @Override // androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
            public int getSpanSize(int i172) {
                int i182;
                if (i172 < ChatActivity.this.chatAdapter.messagesStartRow || i172 >= ChatActivity.this.chatAdapter.messagesEndRow || (i182 = i172 - ChatActivity.this.chatAdapter.messagesStartRow) < 0 || i182 >= ChatActivity.this.messages.size()) {
                    return 1000;
                }
                MessageObject messageObject3 = ChatActivity.this.messages.get(i182);
                MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject3);
                if (validGroupedMessage != null) {
                    return validGroupedMessage.positions.get(messageObject3).spanSize;
                }
                return 1000;
            }
        });
        this.chatListView.setLayoutManager(this.chatLayoutManager);
        this.chatListView.addItemDecoration(new RecyclerView.ItemDecoration(this) { // from class: org.telegram.ui.ChatActivity.19
            @Override // androidx.recyclerview.widget.RecyclerView.ItemDecoration
            public void getItemOffsets(Rect rect, View view4, RecyclerView recyclerView, RecyclerView.State state) {
                ChatMessageCell chatMessageCell;
                MessageObject.GroupedMessages currentMessagesGroup;
                MessageObject.GroupedMessagePosition currentPosition;
                int i172 = 0;
                rect.bottom = 0;
                if (!(view4 instanceof ChatMessageCell) || (currentMessagesGroup = (chatMessageCell = (ChatMessageCell) view4).getCurrentMessagesGroup()) == null || (currentPosition = chatMessageCell.getCurrentPosition()) == null || currentPosition.siblingHeights == null) {
                    return;
                }
                Point point = AndroidUtilities.displaySize;
                float max = Math.max(point.x, point.y) * 0.5f;
                int extraInsetHeight = chatMessageCell.getExtraInsetHeight();
                int i182 = 0;
                while (true) {
                    float[] fArr = currentPosition.siblingHeights;
                    if (i182 >= fArr.length) {
                        break;
                    }
                    extraInsetHeight += (int) Math.ceil(fArr[i182] * max);
                    i182++;
                }
                int round = extraInsetHeight + ((currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f));
                int size = currentMessagesGroup.posArray.size();
                while (true) {
                    if (i172 < size) {
                        MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(i172);
                        byte b = groupedMessagePosition.minY;
                        byte b2 = currentPosition.minY;
                        if (b == b2 && ((groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || b != b2 || groupedMessagePosition.maxY != currentPosition.maxY) && b == b2)) {
                            round -= ((int) Math.ceil(max * groupedMessagePosition.ph)) - AndroidUtilities.dp(4.0f);
                            break;
                        }
                        i172++;
                    } else {
                        break;
                    }
                }
                rect.bottom = -round;
            }
        });
        this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
        this.chatListView.setOnItemClickListener(this.onItemClickListener);
        this.chatListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.20
            private boolean scrollUp;
            private float totalDy = 0.0f;
            private final int scrollValue = AndroidUtilities.dp(100.0f);

            @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
            public void onScrollStateChanged(RecyclerView recyclerView, int i172) {
                Integer valueOf = Integer.valueOf((int) LiteMode.FLAG_CALLS_ANIMATIONS);
                if (i172 == 0) {
                    if (ChatActivity.this.pollHintCell != null) {
                        ChatActivity.this.pollHintView.showForMessageCell(ChatActivity.this.pollHintCell, -1, ChatActivity.this.pollHintX, ChatActivity.this.pollHintY, true);
                        ChatActivity.this.pollHintCell = null;
                    }
                    ChatActivity.this.scrollingFloatingDate = false;
                    ChatActivity.this.scrollingChatListView = false;
                    ChatActivity.this.checkTextureViewPosition = false;
                    ChatActivity.this.hideFloatingDateView(true);
                    if (SharedConfig.getDevicePerformanceClass() == 0) {
                        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startAllHeavyOperations, valueOf);
                    }
                    NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.startSpoilers, new Object[0]);
                    ChatActivity.this.chatListView.setOverScrollMode(0);
                    ChatActivity.this.textSelectionHelper.stopScrolling();
                    ChatActivity.this.updateVisibleRows();
                    ChatActivity.this.scrollByTouch = false;
                    return;
                }
                if (i172 == 2) {
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivity.this.scrollingChatListView = true;
                } else if (i172 == 1) {
                    ChatActivity.this.pollHintCell = null;
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivity.this.scrollingFloatingDate = true;
                    ChatActivity.this.checkTextureViewPosition = true;
                    ChatActivity.this.scrollingChatListView = true;
                }
                if (SharedConfig.getDevicePerformanceClass() == 0) {
                    NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopAllHeavyOperations, valueOf);
                }
                NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.stopSpoilers, new Object[0]);
                if (ChatActivity.this.selectionReactionsOverlay == null || !ChatActivity.this.selectionReactionsOverlay.isVisible()) {
                    return;
                }
                ChatActivity.this.selectionReactionsOverlay.setHiddenByScroll(true);
            }

            @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
            public void onScrolled(RecyclerView recyclerView, int i172, int i182) {
                boolean z42;
                ChatActivity.this.chatListView.invalidate();
                this.scrollUp = i182 < 0;
                int findFirstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                if (((i182 != 0 && ChatActivity.this.scrollByTouch && recyclerView.getScrollState() == 2) || recyclerView.getScrollState() == 1) && ChatActivity.this.forceNextPinnedMessageId != 0) {
                    if (!this.scrollUp || ChatActivity.this.forceScrollToFirst) {
                        ChatActivity.this.forceNextPinnedMessageId = 0;
                    } else if (!ChatActivity.this.chatListView.isFastScrollAnimationRunning() && findFirstVisibleItemPosition != -1) {
                        int findLastVisibleItemPosition = ChatActivity.this.chatLayoutManager.findLastVisibleItemPosition();
                        MessageObject messageObject3 = null;
                        while (true) {
                            if (findLastVisibleItemPosition < findFirstVisibleItemPosition) {
                                z42 = false;
                                break;
                            }
                            View findViewByPosition = ChatActivity.this.chatLayoutManager.findViewByPosition(findLastVisibleItemPosition);
                            if (findViewByPosition instanceof ChatMessageCell) {
                                messageObject3 = ((ChatMessageCell) findViewByPosition).getMessageObject();
                            } else if (findViewByPosition instanceof ChatActionCell) {
                                messageObject3 = ((ChatActionCell) findViewByPosition).getMessageObject();
                            }
                            if (messageObject3 != null && ChatActivity.this.forceNextPinnedMessageId == messageObject3.getId()) {
                                z42 = true;
                                break;
                            }
                            findLastVisibleItemPosition--;
                        }
                        if (!z42 && messageObject3 != null && messageObject3.getId() < ChatActivity.this.forceNextPinnedMessageId) {
                            ChatActivity.this.forceNextPinnedMessageId = 0;
                        }
                    }
                }
                if (recyclerView.getScrollState() == 1) {
                    ChatActivity.this.forceScrollToFirst = false;
                    if (!ChatActivity.this.wasManualScroll && i182 != 0) {
                        ChatActivity.this.wasManualScroll = true;
                    }
                }
                if (i182 != 0) {
                    ChatActivity.this.hideHints(true);
                }
                if (i182 != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                        chatActivity.removeSelectedMessageHighlight();
                        ChatActivity.this.updateVisibleRows();
                    }
                    ChatActivity.this.showFloatingDateView(true);
                }
                ChatActivity.this.checkScrollForLoad(true);
                if (findFirstVisibleItemPosition != -1) {
                    ChatActivity.this.chatAdapter.getItemCount();
                    if (findFirstVisibleItemPosition == 0 && ChatActivity.this.forwardEndReached[0]) {
                        if (i182 >= 0) {
                            ChatActivity.this.canShowPagedownButton = false;
                            ChatActivity.this.updatePagedownButtonVisibility(true);
                        }
                    } else if (i182 > 0) {
                        if (ChatActivity.this.pagedownButton.getTag() == null) {
                            float f = this.totalDy + i182;
                            this.totalDy = f;
                            if (f > this.scrollValue) {
                                this.totalDy = 0.0f;
                                ChatActivity.this.canShowPagedownButton = true;
                                ChatActivity.this.updatePagedownButtonVisibility(true);
                                ChatActivity.this.pagedownButtonShowedByScroll = true;
                            }
                        }
                    } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                        float f2 = this.totalDy + i182;
                        this.totalDy = f2;
                        if (f2 < (-this.scrollValue)) {
                            ChatActivity.this.canShowPagedownButton = false;
                            ChatActivity.this.updatePagedownButtonVisibility(true);
                            this.totalDy = 0.0f;
                        }
                    }
                }
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.textSelectionHelper.onParentScrolled();
                ChatActivity.this.emojiAnimationsOverlay.onScrolled(i182);
                ReactionsEffectOverlay.onScrolled(i182);
                ChatActivity.this.checkTranslation(false);
            }
        });
        this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0f));
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay2 = new ChatSelectionReactionMenuOverlay(this, context);
        this.selectionReactionsOverlay = chatSelectionReactionMenuOverlay2;
        this.contentView.addView(chatSelectionReactionMenuOverlay2, LayoutHelper.createFrame(-1, -1.0f));
        ClippingImageView clippingImageView2 = new ClippingImageView(context);
        this.animatingImageView = clippingImageView2;
        clippingImageView2.setVisibility(i2);
        this.contentView.addView(this.animatingImageView, LayoutHelper.createFrame(-1, -1.0f));
        FrameLayout frameLayout7 = new FrameLayout(context);
        this.progressView = frameLayout7;
        frameLayout7.setVisibility(4);
        this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
        View view4 = new View(context);
        this.progressView2 = view4;
        view4.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(18.0f), this.progressView2, this.contentView, getThemedPaint("paintChatActionBackground")));
        this.progressView.addView(this.progressView2, LayoutHelper.createFrame(36, 36, 17));
        RadialProgressView radialProgressView4 = new RadialProgressView(context, this.themeDelegate);
        this.progressBar = radialProgressView4;
        radialProgressView4.setSize(AndroidUtilities.dp(28.0f));
        this.progressBar.setProgressColor(getThemedColor(Theme.key_chat_serviceText));
        this.progressView.addView(this.progressBar, LayoutHelper.createFrame(i, i, 17));
        ChatActionCell chatActionCell2 = new ChatActionCell(context, false, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.21
            @Override // android.view.View
            public void setTranslationY(float f) {
                if (getTranslationY() != f) {
                    invalidate();
                }
                super.setTranslationY(f);
            }

            @Override // android.view.ViewGroup
            public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
                if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    return false;
                }
                return super.onInterceptTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
            public boolean onTouchEvent(MotionEvent motionEvent) {
                if (getAlpha() == 0.0f || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    return false;
                }
                return super.onTouchEvent(motionEvent);
            }

            @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
            protected void onDraw(Canvas canvas) {
                float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - getY()) - AndroidUtilities.dp(4.0f);
                if (y > 0.0f) {
                    if (y < getMeasuredHeight()) {
                        canvas.save();
                        canvas.clipRect(0.0f, y, getMeasuredWidth(), getMeasuredHeight());
                        super.onDraw(canvas);
                        canvas.restore();
                        return;
                    }
                    return;
                }
                super.onDraw(canvas);
            }
        };
        this.floatingDateView = chatActionCell2;
        chatActionCell2.setCustomDate((int) (System.currentTimeMillis() / 1000), false, false);
        this.floatingDateView.setAlpha(0.0f);
        this.floatingDateView.setImportantForAccessibility(2);
        this.floatingDateView.setInvalidateColors(true);
        this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
        this.floatingDateView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda85
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$24(view22);
            }
        });
        tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
        }
        this.pinnedMessageView = null;
        this.undoView = null;
        this.topUndoView = null;
        this.topChatPanelView = null;
        this.reportSpamButton = null;
        this.emojiStatusSpamHint = null;
        this.topViewSeparator1 = null;
        this.topViewSeparator2 = null;
        this.topViewSeparator3 = null;
        this.addToContactsButton = null;
        this.restartTopicButton = null;
        this.closeReportSpam = null;
        this.translateButton = null;
        FrameLayout frameLayout22 = new FrameLayout(context);
        this.pagedownButton = frameLayout22;
        frameLayout22.setVisibility(4);
        this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 61.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        this.pagedownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda82
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$25(view22);
            }
        });
        FrameLayout frameLayout32 = new FrameLayout(context);
        this.mentiondownButton = frameLayout32;
        frameLayout32.setVisibility(4);
        this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        this.mentiondownButton.setOnClickListener(new 22());
        this.mentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda112
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view22) {
                boolean lambda$createView$28;
                lambda$createView$28 = ChatActivity.this.lambda$createView$28(view22);
                return lambda$createView$28;
            }
        });
        updateMessageListAccessibilityVisibility();
        FrameLayout frameLayout42 = new FrameLayout(context);
        this.reactionsMentiondownButton = frameLayout42;
        this.contentView.addView(frameLayout42, LayoutHelper.createFrame(46, 61.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        charSequence2 = charSequence;
        MentionsContainerView mentionsContainerView22 = new MentionsContainerView(context, this.dialog_id, this.threadMessageId, this, this.contentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.23
            private boolean wasAtTop = true;

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected boolean canOpen() {
                return ChatActivity.this.bottomOverlay.getVisibility() != 0 || ChatActivity.this.searchingForUser;
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onOpen() {
                if (ChatActivity.this.allowStickersPanel && ((!getAdapter().isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond) && ChatActivity.this.currentEncryptedChat != null && getAdapter().isBotContext())) {
                    SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                    if (!globalMainSettings.getBoolean("secretbot", false)) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", R.string.SecretChatContextBotAlert));
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                        ChatActivity.this.showDialog(builder.create());
                        globalMainSettings.edit().putBoolean("secretbot", true).commit();
                    }
                }
                ChatActivity.this.updateMessageListAccessibilityVisibility();
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onClose() {
                ChatActivity.this.updateMessageListAccessibilityVisibility();
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onContextSearch(boolean z42) {
                ChatActivityEnterView chatActivityEnterView22 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView22 != null) {
                    chatActivityEnterView22.setCaption(getAdapter().getBotCaption());
                    ChatActivity.this.chatActivityEnterView.showContextProgress(z42);
                }
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onContextClick(TLRPC$BotInlineResult tLRPC$BotInlineResult) {
                if (ChatActivity.this.getParentActivity() == null || tLRPC$BotInlineResult.content == null) {
                    return;
                }
                if (!tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && !tLRPC$BotInlineResult.type.equals("web_player_video")) {
                    ChatActivity.this.processExternalUrl(0, tLRPC$BotInlineResult.content.url, null, null, false);
                    return;
                }
                int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                ChatActivity chatActivity = ChatActivity.this;
                PhotoViewer.PhotoViewerProvider photoViewerProvider = chatActivity.botContextProvider;
                String str2 = tLRPC$BotInlineResult.title;
                if (str2 == null) {
                    str2 = "";
                }
                String str3 = tLRPC$BotInlineResult.description;
                String str4 = tLRPC$BotInlineResult.content.url;
                EmbedBottomSheet.show(chatActivity, null, photoViewerProvider, str2, str3, str4, str4, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1], ChatActivity.this.isKeyboardVisible());
            }

            @Override // org.telegram.ui.Components.MentionsContainerView
            protected void onScrolled(boolean z42, boolean z5) {
                if (this.wasAtTop != z42) {
                    AndroidUtilities.updateViewShow(ChatActivity.this.suggestEmojiPanel, z42, false, true);
                    this.wasAtTop = z42;
                }
            }
        };
        this.mentionContainer = mentionsContainerView22;
        this.contentView.addView(mentionsContainerView22, LayoutHelper.createFrame(-1, 110, 83));
        final ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate2 = new ContentPreviewViewer.ContentPreviewViewerDelegate() { // from class: org.telegram.ui.ChatActivity.24
            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean can() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$can(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ Boolean canSetAsStatus(TLRPC$Document tLRPC$Document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$canSetAsStatus(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void copyEmoji(TLRPC$Document tLRPC$Document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$copyEmoji(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ String getQuery(boolean z42) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$getQuery(this, z42);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void gifAddedOrDeleted() {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$gifAddedOrDeleted(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needCopy(TLRPC$Document tLRPC$Document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needCopy(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needMenu() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needMenu(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needOpen() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needOpen(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needRemove() {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemove(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ boolean needRemoveFromRecent(TLRPC$Document tLRPC$Document) {
                return ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$needRemoveFromRecent(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean needSend(int i172) {
                return true;
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void remove(SendMessagesHelper.ImportingSticker importingSticker) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$remove(this, importingSticker);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void removeFromRecent(TLRPC$Document tLRPC$Document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$removeFromRecent(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void resetTouch() {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$resetTouch(this);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void sendEmoji(TLRPC$Document tLRPC$Document) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendEmoji(this, tLRPC$Document);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void sendGif(Object obj, Object obj2, boolean z42, int i172) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$sendGif(this, obj, obj2, z42, i172);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public /* synthetic */ void setAsEmojiStatus(TLRPC$Document tLRPC$Document, Integer num) {
                ContentPreviewViewer.ContentPreviewViewerDelegate.-CC.$default$setAsEmojiStatus(this, tLRPC$Document, num);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public void sendSticker(TLRPC$Document tLRPC$Document, String str2, Object obj, boolean z42, int i172) {
                ChatActivity.this.chatActivityEnterView.lambda$onStickerSelected$47(tLRPC$Document, str2, obj, null, true, z42, i172);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean canSchedule() {
                return ChatActivity.this.canScheduleMessage();
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public boolean isInScheduleMode() {
                return ChatActivity.this.chatMode == 1;
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public void openSet(TLRPC$InputStickerSet tLRPC$InputStickerSet, boolean z42) {
                if (tLRPC$InputStickerSet == null || ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                TLRPC$TL_inputStickerSetID tLRPC$TL_inputStickerSetID = new TLRPC$TL_inputStickerSetID();
                tLRPC$TL_inputStickerSetID.access_hash = tLRPC$InputStickerSet.access_hash;
                tLRPC$TL_inputStickerSetID.id = tLRPC$InputStickerSet.id;
                Activity parentActivity = ChatActivity.this.getParentActivity();
                ChatActivity chatActivity = ChatActivity.this;
                StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity, tLRPC$TL_inputStickerSetID, null, chatActivity.chatActivityEnterView, chatActivity.themeDelegate);
                stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                stickersAlert.setClearsInputField(z42);
                ChatActivity.this.showDialog(stickersAlert);
            }

            @Override // org.telegram.ui.ContentPreviewViewer.ContentPreviewViewerDelegate
            public long getDialogId() {
                return ChatActivity.this.dialog_id;
            }
        };
        this.mentionContainer.getListView().setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda117
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view22, MotionEvent motionEvent) {
                boolean lambda$createView$29;
                lambda$createView$29 = ChatActivity.this.lambda$createView$29(contentPreviewViewerDelegate2, view22, motionEvent);
                return lambda$createView$29;
            }
        });
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.mentionContainer.getAdapter().setBotInfo(this.botInfo);
        this.mentionContainer.getAdapter().setParentFragment(this);
        this.mentionContainer.getAdapter().setChatInfo(this.chatInfo);
        this.mentionContainer.getAdapter().setNeedUsernames(this.currentChat == null);
        this.mentionContainer.getAdapter().setNeedBotContext(true);
        this.mentionContainer.getAdapter().setBotsCount(this.currentChat == null ? this.botsCount : 1);
        MentionsContainerView.MentionsListView listView2 = this.mentionContainer.getListView();
        RecyclerListView.OnItemClickListener onItemClickListener2 = new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda283
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view22, int i172) {
                ChatActivity.this.lambda$createView$33(view22, i172);
            }
        };
        this.mentionsOnItemClickListener = onItemClickListener2;
        listView2.setOnItemClickListener(onItemClickListener2);
        this.mentionContainer.getListView().setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda286
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener
            public final boolean onItemClick(View view22, int i172) {
                boolean lambda$createView$35;
                lambda$createView$35 = ChatActivity.this.lambda$createView$35(view22, i172);
                return lambda$createView$35;
            }
        });
        ImageView imageView9 = new ImageView(context);
        this.pagedownButtonImage = imageView9;
        imageView9.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        i3 = Build.VERSION.SDK_INT;
        if (i3 < 21) {
        }
        Resources resources2 = context.getResources();
        int i172 = R.drawable.pagedown_shadow;
        Drawable mutate4 = resources2.getDrawable(i172).mutate();
        mutate4.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable4 = new CombinedDrawable(mutate4, createCircleDrawable, 0, 0);
        combinedDrawable4.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.pagedownButtonImage.setBackground(combinedDrawable4);
        this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
        this.pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", R.string.AccDescrPageDown));
        ImageView imageView22 = new ImageView(context);
        this.pagedownButtonArrow = imageView22;
        imageView22.setImageResource(R.drawable.pagedown);
        this.pagedownButtonArrow.setScaleType(ImageView.ScaleType.CENTER);
        ImageView imageView32 = this.pagedownButtonArrow;
        int i182 = Theme.key_chat_goDownButtonIcon;
        imageView32.setColorFilter(new PorterDuffColorFilter(getThemedColor(i182), PorterDuff.Mode.MULTIPLY));
        this.pagedownButtonArrow.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.pagedownButtonArrow.setPivotX(AndroidUtilities.dp(23.0f));
        this.pagedownButtonArrow.setPivotY(AndroidUtilities.dp(33.0f));
        this.pagedownButton.addView(this.pagedownButtonArrow, LayoutHelper.createFrame(46, 46, 81));
        this.pagedownButtonLoading = new ImageView(context);
        CircularProgressDrawable circularProgressDrawable2 = new CircularProgressDrawable(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(1.7f), getThemedColor(i182));
        this.pagedownButtonLoadingDrawable = circularProgressDrawable2;
        circularProgressDrawable2.setAngleOffset(90.0f);
        this.pagedownButtonLoading.setImageDrawable(this.pagedownButtonLoadingDrawable);
        this.pagedownButtonLoading.setAlpha(0.0f);
        this.pagedownButtonLoading.setVisibility(i2);
        this.pagedownButton.addView(this.pagedownButtonLoading, LayoutHelper.createFrame(46, 46, 81));
        CounterView counterView3 = new CounterView(context, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.26
            @Override // android.view.View
            public void invalidate() {
                if (isInOutAnimation()) {
                    ChatActivity.this.contentView.invalidate();
                }
                super.invalidate();
            }
        };
        this.pagedownButtonCounter = counterView3;
        counterView3.setReverse(true);
        this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-1, 28, 51));
        ImageView imageView42 = new ImageView(context);
        this.mentiondownButtonImage = imageView42;
        imageView42.setImageResource(R.drawable.mentionbutton);
        this.mentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
        this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i182), PorterDuff.Mode.MULTIPLY));
        this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        if (i3 < 21) {
        }
        Drawable mutate22 = context.getResources().getDrawable(i172).mutate();
        mutate22.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable22 = new CombinedDrawable(mutate22, createCircleDrawable2, 0, 0);
        combinedDrawable22.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable22);
        this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        SimpleTextView simpleTextView6 = new SimpleTextView(context);
        this.mentiondownButtonCounter = simpleTextView6;
        simpleTextView6.setVisibility(4);
        this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.mentiondownButtonCounter.setTextSize(13);
        this.mentiondownButtonCounter.setTextColor(getThemedColor(Theme.key_chat_goDownButtonCounter));
        this.mentiondownButtonCounter.setGravity(17);
        this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), getThemedColor(Theme.key_chat_goDownButtonCounterBackground)));
        this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f), AndroidUtilities.dp(8.0f), 0);
        this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
        this.mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", R.string.AccDescrMentionDown));
        this.reactionsMentiondownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda86
            @Override // android.view.View.OnClickListener
            public final void onClick(View view22) {
                ChatActivity.this.lambda$createView$37(view22);
            }
        });
        this.reactionsMentiondownButton.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
            @Override // android.view.View.OnLongClickListener
            public final boolean onLongClick(View view22) {
                boolean lambda$createView$40;
                lambda$createView$40 = ChatActivity.this.lambda$createView$40(view22);
                return lambda$createView$40;
            }
        });
        this.reactionsMentiondownButton.setVisibility(4);
        ImageView imageView52 = new ImageView(context);
        this.reactionsMentiondownButtonImage = imageView52;
        imageView52.setImageResource(R.drawable.reactionbutton);
        this.reactionsMentiondownButtonImage.setScaleType(ImageView.ScaleType.CENTER);
        this.reactionsMentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(getThemedColor(i182), PorterDuff.Mode.MULTIPLY));
        if (i3 < 21) {
        }
        Drawable mutate32 = context.getResources().getDrawable(i172).mutate();
        mutate32.setColorFilter(new PorterDuffColorFilter(-16777216, PorterDuff.Mode.MULTIPLY));
        CombinedDrawable combinedDrawable32 = new CombinedDrawable(mutate32, createCircleDrawable3, 0, 0);
        combinedDrawable32.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        this.reactionsMentiondownButtonImage.setBackgroundDrawable(combinedDrawable32);
        this.reactionsMentiondownButton.addView(this.reactionsMentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
        CounterView counterView22 = new CounterView(context, this.themeDelegate);
        this.reactionsMentiondownButtonCounter = counterView22;
        this.reactionsMentiondownButton.addView(counterView22, LayoutHelper.createFrame(-1, 28, 51));
        this.reactionsMentiondownButton.setContentDescription(LocaleController.getString("AccDescrReactionMentionDown", R.string.AccDescrReactionMentionDown));
        this.fragmentLocationContextView = new FragmentContextView(context, this, true, this.themeDelegate);
        this.fragmentContextView = new FragmentContextView(context, this, false, this.themeDelegate);
        this.contentView.addView(this.fragmentLocationContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        this.contentView.addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 38.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        this.fragmentContextView.setAdditionalContextView(this.fragmentLocationContextView);
        this.fragmentLocationContextView.setAdditionalContextView(this.fragmentContextView);
        this.fragmentContextView.setEnabled(!this.inPreviewMode);
        this.fragmentLocationContextView.setEnabled(!this.inPreviewMode);
        if (this.chatMode != 0) {
        }
        RecyclerListView recyclerListView22 = new RecyclerListView(context, this.themeDelegate);
        this.messagesSearchListView = recyclerListView22;
        recyclerListView22.setBackgroundColor(getThemedColor(Theme.key_windowBackgroundWhite));
        final LinearLayoutManager linearLayoutManager2 = new LinearLayoutManager(context);
        linearLayoutManager2.setOrientation(1);
        this.messagesSearchListView.setLayoutManager(linearLayoutManager2);
        this.messagesSearchListView.setVisibility(i2);
        this.messagesSearchListView.setAlpha(0.0f);
        RecyclerListView recyclerListView32 = this.messagesSearchListView;
        MessagesSearchAdapter messagesSearchAdapter2 = new MessagesSearchAdapter(context, this.themeDelegate);
        this.messagesSearchAdapter = messagesSearchAdapter2;
        recyclerListView32.setAdapter(messagesSearchAdapter2);
        this.contentView.addView(this.messagesSearchListView, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 48.0f));
        this.messagesSearchListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda284
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view22, int i192) {
                ChatActivity.this.lambda$createView$41(view22, i192);
            }
        });
        this.messagesSearchListView.setOnScrollListener(new RecyclerView.OnScrollListener() { // from class: org.telegram.ui.ChatActivity.29
            @Override // androidx.recyclerview.widget.RecyclerView.OnScrollListener
            public void onScrolled(RecyclerView recyclerView, int i192, int i202) {
                int findLastVisibleItemPosition = linearLayoutManager2.findLastVisibleItemPosition();
                if ((findLastVisibleItemPosition == -1 ? 0 : findLastVisibleItemPosition) <= 0 || findLastVisibleItemPosition <= linearLayoutManager2.getItemCount() - 5) {
                    return;
                }
                ChatActivity.this.getMediaDataController().loadMoreSearchMessages();
            }
        });
        this.contentView.addView(this.actionBar);
        View view22 = new View(context);
        this.overlayView = view22;
        view22.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda115
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view32, MotionEvent motionEvent) {
                boolean lambda$createView$42;
                lambda$createView$42 = ChatActivity.this.lambda$createView$42(view32, motionEvent);
                return lambda$createView$42;
            }
        });
        this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
        this.overlayView.setVisibility(i2);
        this.contentView.setClipChildren(false);
        this.instantCameraView = null;
        BlurredFrameLayout blurredFrameLayout3 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.30
            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                Rect rect = AndroidUtilities.rectTmp2;
                rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
            }
        };
        this.bottomMessagesActionContainer = blurredFrameLayout3;
        blurredFrameLayout3.drawBlur = false;
        blurredFrameLayout3.isTopView = false;
        blurredFrameLayout3.setVisibility(4);
        this.bottomMessagesActionContainer.setWillNotDraw(false);
        this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
        this.bottomMessagesActionContainer.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda120.INSTANCE);
        this.replyButton = null;
        this.forwardButton = null;
        31 r82 = new 31(getParentActivity(), this.contentView, this, true, this.themeDelegate);
        this.chatActivityEnterView = r82;
        r82.setDelegate(new ChatActivityEnterViewDelegate());
        this.chatActivityEnterView.setDialogId(this.dialog_id, this.currentAccount);
        tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull != null) {
        }
        this.chatActivityEnterView.setId(1000);
        this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands, false);
        this.chatActivityEnterView.updateBotWebView(false);
        this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
        ChatActivityEnterView chatActivityEnterView22 = this.chatActivityEnterView;
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = this.currentEncryptedChat;
        chatActivityEnterView22.setAllowStickersAndGifs(true, true, tLRPC$EncryptedChat2 != null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat2.layer) >= 46);
        str = this.inlineQueryForInput;
        if (str != null) {
        }
        if (this.inPreviewMode) {
        }
        if (ChatObject.isChannel(this.currentChat)) {
        }
        this.chatActivityEnterView.setBotInfo(this.botInfo, false);
        this.contentView.addView(this.chatActivityEnterView, LayoutHelper.createFrame(-1, -2, 83));
        this.chatActivityEnterView.checkChannelRights();
        this.chatActivityEnterTopView = new ChatActivityEnterTopView(context) { // from class: org.telegram.ui.ChatActivity.32
            @Override // android.view.View
            public boolean hasOverlappingRendering() {
                return false;
            }

            @Override // android.view.View
            public void setTranslationY(float f) {
                super.setTranslationY(f);
                ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView3 != null) {
                    chatActivityEnterView3.invalidate();
                }
                if (getVisibility() != 8) {
                    ChatActivity.this.hideHints(true);
                    if (ChatActivity.this.chatListView != null) {
                        ChatActivity.this.chatListView.setTranslationY(f);
                    }
                    if (ChatActivity.this.progressView != null) {
                        ChatActivity.this.progressView.setTranslationY(f);
                    }
                    ChatActivity.this.invalidateChatListViewTopPadding();
                    ChatActivity.this.invalidateMessagesVisiblePart();
                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                    }
                }
            }

            @Override // android.view.View
            public void setVisibility(int i192) {
                super.setVisibility(i192);
                if (i192 == 8) {
                    if (ChatActivity.this.chatListView != null) {
                        ChatActivity.this.chatListView.setTranslationY(0.0f);
                    }
                    if (ChatActivity.this.progressView != null) {
                        ChatActivity.this.progressView.setTranslationY(0.0f);
                    }
                }
            }
        };
        View view32 = new View(context);
        this.replyLineView = view32;
        view32.setBackgroundColor(getThemedColor(Theme.key_chat_replyPanelLine));
        this.chatActivityEnterView.addTopView(this.chatActivityEnterTopView, this.replyLineView, 48);
        final FrameLayout frameLayout52 = new FrameLayout(context);
        this.chatActivityEnterTopView.addReplyView(frameLayout52, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 52.0f, 0.0f));
        frameLayout52.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda84
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$44(view42);
            }
        });
        ImageView imageView62 = new ImageView(context);
        this.replyIconImageView = imageView62;
        imageView62.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelIcons), PorterDuff.Mode.MULTIPLY));
        this.replyIconImageView.setScaleType(ImageView.ScaleType.CENTER);
        frameLayout52.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
        ImageView imageView72 = new ImageView(context);
        this.replyCloseImageView = imageView72;
        imageView72.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_replyPanelClose), PorterDuff.Mode.MULTIPLY));
        this.replyCloseImageView.setImageResource(R.drawable.input_clear);
        this.replyCloseImageView.setScaleType(ImageView.ScaleType.CENTER);
        if (i3 >= 21) {
        }
        this.chatActivityEnterTopView.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
        this.replyCloseImageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda72
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$45(view42);
            }
        });
        SimpleTextView simpleTextView22 = new SimpleTextView(context);
        this.replyNameTextView = simpleTextView22;
        simpleTextView22.setTextSize(14);
        this.replyNameTextView.setTextColor(getThemedColor(Theme.key_chat_replyPanelName));
        this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        frameLayout52.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView32 = new SimpleTextView(context);
        this.replyObjectTextView = simpleTextView32;
        simpleTextView32.setTextSize(14);
        SimpleTextView simpleTextView42 = this.replyObjectTextView;
        int i192 = Theme.key_windowBackgroundWhiteGrayText;
        simpleTextView42.setTextColor(getThemedColor(i192));
        frameLayout52.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        SimpleTextView simpleTextView52 = new SimpleTextView(context);
        this.replyObjectHintTextView = simpleTextView52;
        simpleTextView52.setTextSize(14);
        this.replyObjectHintTextView.setTextColor(getThemedColor(i192));
        this.replyObjectHintTextView.setText(LocaleController.getString("TapForForwardingOptions", R.string.TapForForwardingOptions));
        this.replyObjectHintTextView.setAlpha(0.0f);
        frameLayout52.addView(this.replyObjectHintTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 0.0f, 0.0f));
        final SpoilerEffect spoilerEffect2 = new SpoilerEffect();
        BackupImageView backupImageView2 = new BackupImageView(context) { // from class: org.telegram.ui.ChatActivity.33
            Path path = new Path();

            @Override // android.view.View
            public void draw(Canvas canvas) {
                super.draw(canvas);
                if (ChatActivity.this.replyImageHasMediaSpoiler) {
                    this.path.rewind();
                    RectF rectF = AndroidUtilities.rectTmp;
                    rectF.set(this.imageReceiver.getImageX(), this.imageReceiver.getImageY(), this.imageReceiver.getImageX2(), this.imageReceiver.getImageY2());
                    this.path.addRoundRect(rectF, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Path.Direction.CW);
                    canvas.save();
                    canvas.clipPath(this.path);
                    spoilerEffect2.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                    spoilerEffect2.setBounds((int) this.imageReceiver.getImageX(), (int) this.imageReceiver.getImageY(), (int) this.imageReceiver.getImageX2(), (int) this.imageReceiver.getImageY2());
                    spoilerEffect2.draw(canvas);
                    invalidate();
                    canvas.restore();
                }
            }
        };
        this.replyImageView = backupImageView2;
        backupImageView2.setRoundRadius(AndroidUtilities.dp(2.0f));
        frameLayout52.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        ChatActivityFragmentView chatActivityFragmentView22 = this.contentView;
        SuggestEmojiView suggestEmojiView2 = new SuggestEmojiView(context, this.currentAccount, this.chatActivityEnterView, this.themeDelegate);
        this.suggestEmojiPanel = suggestEmojiView2;
        chatActivityFragmentView22.addView(suggestEmojiView2, LayoutHelper.createFrame(-1, 160, 83));
        ChatActivityEnterTopView.EditView editView2 = new ChatActivityEnterTopView.EditView(context);
        editView2.setMotionEventSplittingEnabled(false);
        editView2.setOrientation(0);
        editView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda64
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$46(view42);
            }
        });
        this.chatActivityEnterTopView.addEditView(editView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 48.0f, 0.0f));
        i4 = 0;
        while (i4 < 2) {
        }
        this.searchContainer = null;
        FrameLayout frameLayout62 = new FrameLayout(context) { // from class: org.telegram.ui.ChatActivity.35
            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
            }
        };
        this.bottomOverlay = frameLayout62;
        frameLayout62.setWillNotDraw(false);
        this.bottomOverlay.setVisibility(4);
        this.bottomOverlay.setFocusable(true);
        this.bottomOverlay.setFocusableInTouchMode(true);
        this.bottomOverlay.setClickable(true);
        this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
        TextView textView22 = new TextView(context);
        this.bottomOverlayText = textView22;
        textView22.setTextSize(1, 14.0f);
        this.bottomOverlayText.setGravity(17);
        this.bottomOverlayText.setMaxLines(2);
        this.bottomOverlayText.setEllipsize(TextUtils.TruncateAt.END);
        this.bottomOverlayText.setLineSpacing(AndroidUtilities.dp(2.0f), 1.0f);
        this.bottomOverlayText.setTextColor(getThemedColor(Theme.key_chat_secretChatStatusText));
        this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
        BlurredFrameLayout blurredFrameLayout22 = new BlurredFrameLayout(context, this.contentView) { // from class: org.telegram.ui.ChatActivity.36
            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i202, int i21) {
                ((FrameLayout.LayoutParams) ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = View.MeasureSpec.getSize(i202);
                super.onMeasure(i202, i21);
            }

            @Override // org.telegram.ui.Components.BlurredFrameLayout, android.view.ViewGroup, android.view.View
            protected void dispatchDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                Theme.chat_composeShadowDrawable.draw(canvas);
                if (SharedConfig.chatBlurEnabled()) {
                    if (this.backgroundPaint == null) {
                        this.backgroundPaint = new Paint();
                    }
                    this.backgroundPaint.setColor(ChatActivity.this.getThemedColor(Theme.key_chat_messagePanelBackground));
                    Rect rect = AndroidUtilities.rectTmp2;
                    rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                    ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, this.backgroundPaint, false);
                } else {
                    canvas.drawRect(0.0f, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.getThemedPaint("paintChatComposeBackground"));
                }
                super.dispatchDraw(canvas);
            }
        };
        this.bottomOverlayChat = blurredFrameLayout22;
        blurredFrameLayout22.isTopView = false;
        blurredFrameLayout22.drawBlur = false;
        blurredFrameLayout22.setWillNotDraw(false);
        this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(1.5f), 0, 0);
        this.bottomOverlayChat.setVisibility(4);
        this.bottomOverlayChat.setClipChildren(false);
        this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
        TextView textView32 = new TextView(context) { // from class: org.telegram.ui.ChatActivity.37
            CellFlickerDrawable cellFlickerDrawable;

            @Override // android.widget.TextView, android.view.View
            protected void onDraw(Canvas canvas) {
                super.onDraw(canvas);
                if (this.cellFlickerDrawable == null) {
                    CellFlickerDrawable cellFlickerDrawable = new CellFlickerDrawable();
                    this.cellFlickerDrawable = cellFlickerDrawable;
                    cellFlickerDrawable.drawFrame = false;
                    cellFlickerDrawable.repeatProgress = 2.0f;
                }
                this.cellFlickerDrawable.setParentWidth(getMeasuredWidth());
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                this.cellFlickerDrawable.draw(canvas, rectF, AndroidUtilities.dp(4.0f), null);
                invalidate();
            }

            @Override // android.view.View
            public void setVisibility(int i202) {
                super.setVisibility(i202);
                ChatActivity.this.bottomOverlayChat.getLayoutParams().height = AndroidUtilities.dp(i202 == 0 ? 67.0f : 51.0f);
            }
        };
        this.bottomOverlayStartButton = textView32;
        textView32.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(Theme.key_featuredStickers_addButton), 8.0f));
        this.bottomOverlayStartButton.setTextColor(getThemedColor(Theme.key_featuredStickers_buttonText));
        this.bottomOverlayStartButton.setText(LocaleController.getString(R.string.BotStart));
        this.bottomOverlayStartButton.setTextSize(1, 16.0f);
        this.bottomOverlayStartButton.setGravity(17);
        this.bottomOverlayStartButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.bottomOverlayStartButton.setVisibility(8);
        this.bottomOverlayStartButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda63
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$48(view42);
            }
        });
        this.bottomOverlayChat.addView(this.bottomOverlayStartButton, LayoutHelper.createFrame(-1, -1.0f, 17, 8.0f, 8.0f, 8.0f, 8.0f));
        tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            this.bottomOverlayStartButton.setVisibility(0);
            this.bottomOverlayChat.setVisibility(0);
        }
        UnreadCounterTextView unreadCounterTextView2 = new UnreadCounterTextView(context) { // from class: org.telegram.ui.ChatActivity.38
            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected boolean isTouchFullWidth() {
                return ChatActivity.this.botInfo != null;
            }

            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected Theme.ResourcesProvider getResourceProvider() {
                return ChatActivity.this.themeDelegate;
            }

            @Override // org.telegram.ui.Components.UnreadCounterTextView
            protected float getTopOffset() {
                return -AndroidUtilities.dp(2.0f);
            }
        };
        this.bottomOverlayChatText = unreadCounterTextView2;
        this.bottomOverlayChat.addView(unreadCounterTextView2, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayChatText.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda96
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$54(context, view42);
            }
        });
        RadialProgressView radialProgressView22 = new RadialProgressView(context, this.themeDelegate);
        this.bottomOverlayProgress = radialProgressView22;
        radialProgressView22.setSize(AndroidUtilities.dp(22.0f));
        RadialProgressView radialProgressView32 = this.bottomOverlayProgress;
        int i202 = Theme.key_chat_fieldOverlayText;
        radialProgressView32.setProgressColor(getThemedColor(i202));
        this.bottomOverlayProgress.setVisibility(4);
        this.bottomOverlayProgress.setScaleX(0.1f);
        this.bottomOverlayProgress.setScaleY(0.1f);
        this.bottomOverlayProgress.setAlpha(1.0f);
        this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
        this.bottomOverlayImage = new ImageView(context);
        int themedColor2 = getThemedColor(i202);
        this.bottomOverlayImage.setImageResource(R.drawable.msg_help);
        this.bottomOverlayImage.setColorFilter(new PorterDuffColorFilter(themedColor2, PorterDuff.Mode.MULTIPLY));
        this.bottomOverlayImage.setScaleType(ImageView.ScaleType.CENTER);
        i5 = Build.VERSION.SDK_INT;
        if (i5 < 21) {
        }
        this.bottomOverlayChat.addView(this.bottomOverlayImage, LayoutHelper.createFrame(48, 48.0f, 53, 3.0f, 1.5f, 0.0f, 0.0f));
        this.bottomOverlayImage.setContentDescription(LocaleController.getString("SettingsHelp", R.string.SettingsHelp));
        this.bottomOverlayImage.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda74
            @Override // android.view.View.OnClickListener
            public final void onClick(View view42) {
                ChatActivity.this.lambda$createView$55(view42);
            }
        });
        ChatActivityFragmentView chatActivityFragmentView32 = this.contentView;
        MessageEnterTransitionContainer messageEnterTransitionContainer2 = new MessageEnterTransitionContainer(this.contentView, this.currentAccount);
        this.messageEnterTransitionContainer = messageEnterTransitionContainer2;
        chatActivityFragmentView32.addView(messageEnterTransitionContainer2);
        if (this.currentChat != null) {
        }
        this.chatAdapter.updateRowsSafe();
        if (this.loading) {
        }
        z = false;
        showProgressView(false);
        createEmptyView();
        this.chatListView.setEmptyView(this.emptyViewContainer);
        checkBotKeyboard();
        updateBottomOverlay();
        updateSecretStatus();
        updateTopPanel(z);
        updatePinnedMessageView(z);
        updateInfoTopView(z);
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper2 = new RecyclerAnimationScrollHelper(this.chatListView, this.chatLayoutManager);
        this.chatScrollHelper = recyclerAnimationScrollHelper2;
        recyclerAnimationScrollHelper2.setScrollListener(new RecyclerAnimationScrollHelper.ScrollListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda281
            @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.ScrollListener
            public final void onScroll() {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        });
        this.chatScrollHelper.setAnimationCallback(this.chatScrollHelperCallback);
        this.flagSecure = new FlagSecureReason(getParentActivity().getWindow(), new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda240
            @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
            public final boolean run() {
                boolean lambda$createView$56;
                lambda$createView$56 = ChatActivity.this.lambda$createView$56();
                return lambda$createView$56;
            }
        });
        if (charSequence2 != null) {
        }
        fixLayoutInternal();
        this.textSelectionHelper.setCallback(new TextSelectionHelper.Callback() { // from class: org.telegram.ui.ChatActivity.40
            @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
            public void onStateChanged(boolean z5) {
                ChatActivity.this.swipeBackEnabled = !z5;
                if (z5) {
                    if (ChatActivity.this.slidingView != null) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    ChatActivity.this.maybeStartTrackingSlidingView = false;
                    ChatActivity.this.startedTrackingSlidingView = false;
                    if (ChatActivity.this.textSelectionHint != null) {
                        ChatActivity.this.textSelectionHint.hide();
                    }
                }
                ChatActivity.this.updatePagedownButtonVisibility(true);
            }

            @Override // org.telegram.ui.Cells.TextSelectionHelper.Callback
            public void onTextCopied() {
                if (((BaseFragment) ChatActivity.this).actionBar != null && ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                    ChatActivity.this.clearSelectionMode();
                }
                ChatActivity.this.createUndoView();
                ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
            }
        });
        overlayView = this.textSelectionHelper.getOverlayView(context);
        if (overlayView != null) {
        }
        this.textSelectionHelper.setParentView(this.chatListView);
        ChatActivityFragmentView chatActivityFragmentView42 = this.contentView;
        FireworksOverlay fireworksOverlay2 = new FireworksOverlay(context);
        this.fireworksOverlay = fireworksOverlay2;
        chatActivityFragmentView42.addView(fireworksOverlay2, LayoutHelper.createFrame(-1, -1.0f));
        checkInstantSearch();
        messageObject = this.replyingMessageObject;
        if (messageObject != null) {
        }
        if (i5 < 21) {
        }
        PinchToZoomHelper pinchToZoomHelper2 = new PinchToZoomHelper(this, viewGroup, this.contentView) { // from class: org.telegram.ui.ChatActivity.41
            @Override // org.telegram.ui.PinchToZoomHelper
            protected void drawOverlays(Canvas canvas, float f, float f2, float f3, float f4, float f5) {
                if (f > 0.0f) {
                    View child = getChild();
                    if (child instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                        RectF rectF = AndroidUtilities.rectTmp;
                        rectF.set(f2, (int) Math.max(f4, f3), chatMessageCell.getMeasuredWidth() + f2, (int) Math.min(f5, chatMessageCell.getMeasuredHeight() + f3));
                        canvas.saveLayerAlpha(rectF, (int) (f * 255.0f), 31);
                        canvas.translate(f2, f3);
                        chatMessageCell.drawFromPinchToZoom = true;
                        chatMessageCell.drawOverlays(canvas);
                        if (chatMessageCell.shouldDrawTimeOnMedia() && chatMessageCell.getCurrentMessagesGroup() == null) {
                            chatMessageCell.drawTime(canvas, 1.0f, false);
                        }
                        chatMessageCell.drawFromPinchToZoom = false;
                        canvas.restore();
                    }
                }
            }
        };
        this.pinchToZoomHelper = pinchToZoomHelper2;
        pinchToZoomHelper2.setCallback(new PinchToZoomHelper.Callback() { // from class: org.telegram.ui.ChatActivity.42
            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public TextureView getCurrentTextureView() {
                return ChatActivity.this.videoTextureView;
            }

            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public void onZoomStarted(MessageObject messageObject3) {
                ChatActivity.this.chatListView.cancelClickRunnables(true);
                ChatActivity.this.chatListView.stopScroll();
                if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.contentView.removeView(chatActivity.videoPlayerContainer);
                    ChatActivity.this.videoPlayerContainer = null;
                    ChatActivity.this.videoTextureView = null;
                    ChatActivity.this.aspectRatioFrameLayout = null;
                }
                for (int i21 = 0; i21 < ChatActivity.this.chatListView.getChildCount(); i21++) {
                    if (ChatActivity.this.chatListView.getChildAt(i21) instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i21);
                        if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                            chatMessageCell.getPhotoImage().setVisible(false, true);
                        }
                    }
                }
            }

            @Override // org.telegram.ui.PinchToZoomHelper.Callback
            public void onZoomFinished(MessageObject messageObject3) {
                if (messageObject3 == null) {
                    return;
                }
                if (MediaController.getInstance().isPlayingMessage(messageObject3)) {
                    for (int i21 = 0; i21 < ChatActivity.this.chatListView.getChildCount(); i21++) {
                        if (ChatActivity.this.chatListView.getChildAt(i21) instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) ChatActivity.this.chatListView.getChildAt(i21);
                            if (chatMessageCell.getMessageObject().getId() == messageObject3.getId()) {
                                AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                if (animation.isRunning()) {
                                    animation.stop();
                                }
                                Bitmap animatedBitmap = animation.getAnimatedBitmap();
                                if (animatedBitmap != null) {
                                    try {
                                        Bitmap videoBitmap = ChatActivity.this.pinchToZoomHelper.getVideoBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                        new Canvas(animatedBitmap).drawBitmap(videoBitmap, 0.0f, 0.0f, (Paint) null);
                                        videoBitmap.recycle();
                                    } catch (Throwable th) {
                                        FileLog.e(th);
                                    }
                                }
                            }
                        }
                    }
                    ChatActivity.this.createTextureView(true);
                    MediaController.getInstance().setTextureView(ChatActivity.this.videoTextureView, ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
                }
                ChatActivity.this.chatListView.invalidate();
            }
        });
        this.pinchToZoomHelper.setClipBoundsListener(new PinchToZoomHelper.ClipBoundsListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda290
            @Override // org.telegram.ui.PinchToZoomHelper.ClipBoundsListener
            public final void getClipTopBottom(float[] fArr) {
                ChatActivity.this.lambda$createView$57(fArr);
            }
        });
        this.emojiAnimationsOverlay = new EmojiAnimationsOverlay(this, this.contentView, this.chatListView, this.currentAccount, this.dialog_id, this.threadMessageId) { // from class: org.telegram.ui.ChatActivity.43
            @Override // org.telegram.ui.EmojiAnimationsOverlay
            public void onAllEffectsEnd() {
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
        };
        this.actionBar.setDrawBlurBackground(this.contentView);
        if (!this.isTopic) {
        }
        return this.fragmentView;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 12 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Context val$context;

        12(Context context) {
            this.val$context = context;
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public void onItemClick(final int i) {
            TLRPC$User tLRPC$User;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$User tLRPC$User2;
            if (i == -1) {
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed()) {
                    ChatActivity.this.clearSelectionMode();
                } else if (!ChatActivity.this.checkRecordLocked(true)) {
                    ChatActivity.this.finishFragment();
                }
            } else if (i == 58) {
                TopicsFragment.prepareToSwitchAnimation(ChatActivity.this);
            } else {
                MessageObject messageObject = null;
                if (i == 10) {
                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                    long j = 0;
                    for (int i2 = 1; i2 >= 0; i2--) {
                        ArrayList arrayList = new ArrayList();
                        for (int i3 = 0; i3 < ChatActivity.this.selectedMessagesCanCopyIds[i2].size(); i3++) {
                            arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[i2].keyAt(i3)));
                        }
                        if (ChatActivity.this.currentEncryptedChat == null) {
                            Collections.sort(arrayList);
                        } else {
                            Collections.sort(arrayList, Collections.reverseOrder());
                        }
                        for (int i4 = 0; i4 < arrayList.size(); i4++) {
                            MessageObject messageObject2 = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[i2].get(((Integer) arrayList.get(i4)).intValue());
                            if (spannableStringBuilder.length() != 0) {
                                spannableStringBuilder.append((CharSequence) "\n\n");
                            }
                            spannableStringBuilder.append(ChatActivity.this.getMessageContent(messageObject2, j, arrayList.size() != 1 && ((tLRPC$User2 = ChatActivity.this.currentUser) == null || !tLRPC$User2.self)));
                            j = messageObject2.getFromChatId();
                        }
                    }
                    if (spannableStringBuilder.length() != 0) {
                        AndroidUtilities.addToClipboard(spannableStringBuilder);
                        ChatActivity.this.createUndoView();
                        ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                    }
                    ChatActivity.this.clearSelectionMode();
                } else if (i == 12) {
                    if (ChatActivity.this.getParentActivity() == null) {
                        return;
                    }
                    ChatActivity.this.createDeleteMessagesAlert(null, null);
                } else if (i == 11) {
                    ChatActivity.this.openForward(true);
                } else if (i == 25) {
                    ArrayList arrayList2 = new ArrayList();
                    for (int i5 = 1; i5 >= 0; i5--) {
                        for (int i6 = 0; i6 < ChatActivity.this.selectedMessagesIds[i5].size(); i6++) {
                            arrayList2.add((MessageObject) ChatActivity.this.selectedMessagesIds[i5].valueAt(i6));
                        }
                        ChatActivity.this.selectedMessagesIds[i5].clear();
                        ChatActivity.this.selectedMessagesCanCopyIds[i5].clear();
                        ChatActivity.this.selectedMessagesCanStarIds[i5].clear();
                    }
                    final boolean z = ChatActivity.this.canSaveMusicCount > 0;
                    ChatActivity.this.hideActionMode();
                    ChatActivity.this.updatePinnedMessageView(true);
                    ChatActivity.this.updateVisibleRows();
                    MediaController.saveFilesFromMessages(ChatActivity.this.getParentActivity(), ChatActivity.this.getAccountInstance(), arrayList2, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$12$$ExternalSyntheticLambda2
                        @Override // org.telegram.messenger.MessagesStorage.IntCallback
                        public final void run(int i7) {
                            ChatActivity.12.this.lambda$onItemClick$0(z, i7);
                        }
                    });
                } else if (i == 13) {
                    if (ChatActivity.this.getParentActivity() == null) {
                        return;
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    Activity parentActivity = chatActivity.getParentActivity();
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity.showDialog(AlertsCreator.createTTLAlert(parentActivity, chatActivity2.currentEncryptedChat, chatActivity2.themeDelegate).create());
                } else if (i == 15 || i == 16 || i == 26) {
                    if (ChatActivity.this.getParentActivity() == null) {
                        return;
                    }
                    ChatActivity chatActivity3 = ChatActivity.this;
                    TLRPC$ChatFull tLRPC$ChatFull2 = chatActivity3.chatInfo;
                    final boolean z2 = tLRPC$ChatFull2 != null && tLRPC$ChatFull2.can_delete_channel;
                    if (i == 26 || (i == 15 && chatActivity3.currentEncryptedChat == null && (((tLRPC$User = chatActivity3.currentUser) != null && !UserObject.isUserSelf(tLRPC$User) && !UserObject.isDeleted(ChatActivity.this.currentUser)) || ((tLRPC$ChatFull = ChatActivity.this.chatInfo) != null && tLRPC$ChatFull.can_delete_channel)))) {
                        ChatActivity chatActivity4 = ChatActivity.this;
                        AlertsCreator.createClearDaysDialogAlert(chatActivity4, -1, chatActivity4.currentUser, chatActivity4.currentChat, z2, new 1(z2), ChatActivity.this.getResourceProvider());
                        return;
                    }
                    ChatActivity chatActivity5 = ChatActivity.this;
                    AlertsCreator.createClearOrDeleteDialogAlert(chatActivity5, i == 15, chatActivity5.currentChat, chatActivity5.currentUser, chatActivity5.currentEncryptedChat != null, true, z2, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$12$$ExternalSyntheticLambda1
                        @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                        public final void run(boolean z3) {
                            ChatActivity.12.this.lambda$onItemClick$1(i, z2, z3);
                        }
                    }, ChatActivity.this.themeDelegate);
                } else if (i == 17) {
                    ChatActivity chatActivity6 = ChatActivity.this;
                    if (chatActivity6.currentUser == null || chatActivity6.getParentActivity() == null) {
                        return;
                    }
                    if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getTag() != null) {
                        ChatActivity chatActivity7 = ChatActivity.this;
                        chatActivity7.shareMyContact(((Integer) chatActivity7.addToContactsButton.getTag()).intValue(), null);
                        return;
                    }
                    Bundle bundle = new Bundle();
                    bundle.putLong("user_id", ChatActivity.this.currentUser.id);
                    bundle.putBoolean("addContact", true);
                    ChatActivity.this.presentFragment(new ContactAddActivity(bundle));
                } else if (i == 18) {
                    ChatActivity.this.toggleMute(false);
                } else if (i == 24) {
                    try {
                        ChatActivity.this.getMediaDataController().installShortcut(ChatActivity.this.currentUser.id);
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                } else if (i == 21) {
                    Activity parentActivity2 = ChatActivity.this.getParentActivity();
                    long j2 = ChatActivity.this.dialog_id;
                    ChatActivity chatActivity8 = ChatActivity.this;
                    AlertsCreator.createReportAlert(parentActivity2, j2, 0, 0, chatActivity8, chatActivity8.themeDelegate, null);
                } else if (i == 22) {
                    for (int i7 = 0; i7 < 2; i7++) {
                        for (int i8 = 0; i8 < ChatActivity.this.selectedMessagesCanStarIds[i7].size(); i8++) {
                            MessageObject messageObject3 = (MessageObject) ChatActivity.this.selectedMessagesCanStarIds[i7].valueAt(i8);
                            ChatActivity.this.getMediaDataController().addRecentSticker(2, messageObject3, messageObject3.getDocument(), (int) (System.currentTimeMillis() / 1000), !ChatActivity.this.hasUnfavedSelected);
                        }
                    }
                    ChatActivity.this.clearSelectionMode();
                } else if (i == 23) {
                    for (int i9 = 1; i9 >= 0; i9--) {
                        if (messageObject == null && ChatActivity.this.selectedMessagesIds[i9].size() == 1) {
                            ArrayList arrayList3 = new ArrayList();
                            for (int i10 = 0; i10 < ChatActivity.this.selectedMessagesIds[i9].size(); i10++) {
                                arrayList3.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[i9].keyAt(i10)));
                            }
                            messageObject = (MessageObject) ChatActivity.this.messagesDict[i9].get(((Integer) arrayList3.get(0)).intValue());
                        }
                        ChatActivity.this.selectedMessagesIds[i9].clear();
                        ChatActivity.this.selectedMessagesCanCopyIds[i9].clear();
                        ChatActivity.this.selectedMessagesCanStarIds[i9].clear();
                    }
                    ChatActivity.this.startEditingMessageObject(messageObject);
                    ChatActivity.this.hideActionMode();
                    ChatActivity.this.updatePinnedMessageView(true);
                    ChatActivity.this.updateVisibleRows();
                } else if (i == 14) {
                    ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(this.val$context, false, true, true, ChatActivity.this.getResourceProvider());
                    actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("AttachMenu", R.string.AttachMenu), R.drawable.input_attach);
                    actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$12$$ExternalSyntheticLambda0
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.12.this.lambda$onItemClick$2(view);
                        }
                    });
                    ChatActivity.this.headerItem.toggleSubMenu(actionBarMenuSubItem, ChatActivity.this.attachItem.createView());
                } else if (i == 30) {
                    ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/help", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
                } else if (i == 31) {
                    ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/settings", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
                } else if (i == 40) {
                    ChatActivity.this.openSearchWithText(null);
                } else if (i == 62) {
                    ChatActivity.this.getMessagesController().getTranslateController().setHideTranslateDialog(ChatActivity.this.getDialogId(), false, true);
                    if (ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId(), true)) {
                        return;
                    }
                    ChatActivity.this.updateTopPanel(true);
                } else if (i == 32 || i == 33) {
                    ChatActivity chatActivity9 = ChatActivity.this;
                    if (chatActivity9.currentUser == null || chatActivity9.getParentActivity() == null) {
                        return;
                    }
                    ChatActivity chatActivity10 = ChatActivity.this;
                    TLRPC$User tLRPC$User3 = chatActivity10.currentUser;
                    boolean z3 = i == 33;
                    TLRPC$UserFull tLRPC$UserFull = chatActivity10.userInfo;
                    VoIPHelper.startCall(tLRPC$User3, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity10.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
                } else if (i == 50) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                } else if (i == 51) {
                    ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                } else if (i == 57) {
                    ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView3 == null || chatActivityEnterView3.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedSpoiler();
                } else if (i == 52) {
                    ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView4 == null || chatActivityEnterView4.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                } else if (i == 55) {
                    ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView5 == null || chatActivityEnterView5.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedStrike();
                } else if (i == 56) {
                    ChatActivityEnterView chatActivityEnterView6 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView6 == null || chatActivityEnterView6.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUnderline();
                } else if (i == 53) {
                    ChatActivityEnterView chatActivityEnterView7 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView7 == null || chatActivityEnterView7.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                } else if (i == 54) {
                    ChatActivityEnterView chatActivityEnterView8 = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView8 == null || chatActivityEnterView8.getEditField() == null) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                } else if (i == 27) {
                    ChatActivity.this.showChatThemeBottomSheet();
                } else if (i != 60) {
                    if (i == 61) {
                        TopicsFragment.prepareToSwitchAnimation(ChatActivity.this);
                    }
                } else {
                    TopicsController topicsController = ChatActivity.this.getMessagesController().getTopicsController();
                    ChatActivity chatActivity11 = ChatActivity.this;
                    long j3 = chatActivity11.currentChat.id;
                    int i11 = chatActivity11.forumTopic.id;
                    ChatActivity.this.forumTopic.closed = true;
                    topicsController.toggleCloseTopic(j3, i11, true);
                    ChatActivity.this.updateTopicButtons();
                    ChatActivity.this.updateBottomOverlay();
                    ChatActivity.this.updateTopPanel(true);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$0(boolean z, int i) {
            if (i <= 0 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            BulletinFactory.of(ChatActivity.this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, ChatActivity.this.themeDelegate).show();
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes3.dex */
        public class 1 implements MessagesStorage.BooleanCallback {
            final /* synthetic */ boolean val$canDeleteHistory;

            1(boolean z) {
                this.val$canDeleteHistory = z;
            }

            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
            public void run(boolean z) {
                if (z) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.currentUser != null || this.val$canDeleteHistory) {
                        MessagesStorage messagesStorage = chatActivity.getMessagesStorage();
                        long j = ChatActivity.this.dialog_id;
                        final boolean z2 = this.val$canDeleteHistory;
                        messagesStorage.getMessagesCount(j, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$12$1$$ExternalSyntheticLambda1
                            @Override // org.telegram.messenger.MessagesStorage.IntCallback
                            public final void run(int i) {
                                ChatActivity.12.1.this.lambda$run$1(z2, i);
                            }
                        });
                        return;
                    }
                }
                ChatActivity.this.performHistoryClear(z, this.val$canDeleteHistory);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(boolean z, boolean z2) {
                ChatActivity.this.performHistoryClear(true, z);
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$1(final boolean z, int i) {
                if (i >= 50) {
                    ChatActivity chatActivity = ChatActivity.this;
                    AlertsCreator.createClearOrDeleteDialogAlert(chatActivity, true, false, true, chatActivity.currentChat, chatActivity.currentUser, false, false, z, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$12$1$$ExternalSyntheticLambda0
                        @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                        public final void run(boolean z2) {
                            ChatActivity.12.1.this.lambda$run$0(z, z2);
                        }
                    }, ChatActivity.this.themeDelegate);
                    return;
                }
                ChatActivity.this.performHistoryClear(true, z);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$1(int i, boolean z, boolean z2) {
            if (i == 15 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = ChatActivity.this.currentChat;
                if (!tLRPC$Chat.megagroup || ChatObject.isPublic(tLRPC$Chat)) {
                    ChatActivity.this.getMessagesController().deleteDialog(ChatActivity.this.dialog_id, 2, z2);
                    return;
                }
            }
            if (i != 15) {
                NotificationCenter notificationCenter = ChatActivity.this.getNotificationCenter();
                ChatActivity chatActivity = ChatActivity.this;
                int i2 = NotificationCenter.closeChats;
                notificationCenter.removeObserver(chatActivity, i2);
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i2, new Object[0]);
                ChatActivity.this.finishFragment();
                NotificationCenter notificationCenter2 = ChatActivity.this.getNotificationCenter();
                int i3 = NotificationCenter.needDeleteDialog;
                ChatActivity chatActivity2 = ChatActivity.this;
                notificationCenter2.lambda$postNotificationNameOnUIThread$1(i3, Long.valueOf(ChatActivity.this.dialog_id), chatActivity2.currentUser, chatActivity2.currentChat, Boolean.valueOf(z2));
                return;
            }
            ChatActivity.this.performHistoryClear(z2, z);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onItemClick$2(View view) {
            ChatActivity.this.headerItem.closeSubMenu();
            ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
            if (chatAttachAlert != null) {
                chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 13 extends LongPressListenerWithMovingGesture {
        final /* synthetic */ View val$backButton;

        13(View view) {
            this.val$backButton = view;
        }

        @Override // org.telegram.ui.LongPressListenerWithMovingGesture
        public void onLongPress() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = BackButtonMenu.show(chatActivity, this.val$backButton, chatActivity.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.themeDelegate);
            ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
            if (actionBarPopupWindow != null) {
                setSubmenu(actionBarPopupWindow);
                ChatActivity.this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda0
                    @Override // android.widget.PopupWindow.OnDismissListener
                    public final void onDismiss() {
                        ChatActivity.13.this.lambda$onLongPress$0();
                    }
                });
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.dimBehindView(this.val$backButton, 0.3f);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.hide(true, 1);
                }
                if (ChatActivity.this.undoView != null) {
                    ChatActivity.this.undoView.hide(true, 1);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLongPress$0() {
            setSubmenu(null);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrimPopupWindow = null;
            chatActivity.menuDeleteItem = null;
            ChatActivity.this.scrimPopupWindowItems = null;
            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
            } else {
                ChatActivity.this.dimBehindView(false);
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                return;
            }
            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$16(View view, MotionEvent motionEvent) {
        ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
        if (chatThemeBottomSheet != null) {
            chatThemeBottomSheet.close();
            return true;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$17(int i, View view) {
        jumpToDate(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$21(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$messages_Messages) {
            if (!((TLRPC$messages_Messages) tLObject).messages.isEmpty()) {
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getMessagesController().getInputPeer(this.dialog_id);
                tLRPC$TL_messages_getHistory.offset_date = this.startLoadFromDate + 86400;
                tLRPC$TL_messages_getHistory.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda261
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                        ChatActivity.this.lambda$createView$20(tLObject, tLObject2, tLRPC$TL_error2);
                    }
                });
                return;
            }
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", R.string.NoMessagesForThisDay));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$20(TLObject tLObject, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        final int i;
        if (tLObject2 instanceof TLRPC$messages_Messages) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject2;
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset - tLRPC$messages_Messages.offset_id_offset;
            } else {
                i = ((TLRPC$messages_Messages) tLObject).offset_id_offset;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda185
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$19(i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$18(int i) {
        this.actionBar.setSubtitle(LocaleController.formatPluralString("messages", i, new Object[0]));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$19(final int i) {
        if (i != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda182
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$18(i);
                }
            });
        } else {
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", R.string.NoMessagesForThisDay));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$23(View view) {
        if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id, getTopicId())) {
            updateTitleIcons(true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda164
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$createView$22();
                }
            }, 150L);
            this.headerItem.toggleSubMenu();
            if (getParentActivity() != null) {
                BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
                return;
            }
            return;
        }
        this.muteItem.openSwipeBack();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$22() {
        toggleMute(true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 15 extends RecyclerListViewInternal {
        private final ArrayList<ChatMessageCell> drawCaptionAfter;
        private final ArrayList<ChatMessageCell> drawNamesAfter;
        private final ArrayList<ChatMessageCell> drawTimeAfter;
        private final ArrayList<MessageObject.GroupedMessages> drawingGroups;
        private float endTrackingX;
        private boolean ignoreLayout;
        int lastH;
        private long lastTrackingAnimationTime;
        private int lastWidth;
        private Paint outlineActionBackgroundDarkenPaint;
        private Paint outlineActionBackgroundPaint;
        private Path path;
        private boolean slidingBeyondMax;
        private FloatValueHolder slidingDrawableVisibilityProgress;
        private SpringAnimation slidingDrawableVisibilitySpring;
        private FloatValueHolder slidingFillProgress;
        private SpringAnimation slidingFillProgressSpring;
        private FloatValueHolder slidingOuterRingProgress;
        private SpringAnimation slidingOuterRingSpring;
        private float springMultiplier;
        private int startedTrackingPointerId;
        private int startedTrackingX;
        private int startedTrackingY;
        private float trackAnimationProgress;
        private boolean wasTrackingVibrate;

        15(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
            this.drawTimeAfter = new ArrayList<>();
            this.drawNamesAfter = new ArrayList<>();
            this.drawCaptionAfter = new ArrayList<>();
            this.drawingGroups = new ArrayList<>(10);
            this.springMultiplier = 2000.0f;
            this.outlineActionBackgroundPaint = new Paint(1);
            this.outlineActionBackgroundDarkenPaint = new Paint(1);
            this.slidingDrawableVisibilityProgress = new FloatValueHolder(0.0f);
            this.slidingDrawableVisibilitySpring = new SpringAnimation(this.slidingDrawableVisibilityProgress).setMinValue(0.0f).setMaxValue(this.springMultiplier).setSpring(new SpringForce(0.0f).setStiffness(1500.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda5
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.15.this.lambda$$0(dynamicAnimation, f, f2);
                }
            });
            this.slidingFillProgress = new FloatValueHolder(0.0f);
            this.slidingFillProgressSpring = new SpringAnimation(this.slidingFillProgress).setMinValue(0.0f).setSpring(new SpringForce(0.0f).setStiffness(400.0f).setDampingRatio(0.5f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda6
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.15.this.lambda$$1(dynamicAnimation, f, f2);
                }
            });
            this.slidingOuterRingProgress = new FloatValueHolder(0.0f);
            this.slidingOuterRingSpring = new SpringAnimation(this.slidingOuterRingProgress).setMinValue(0.0f).setSpring(new SpringForce(0.0f).setStiffness(200.0f).setDampingRatio(1.0f)).addUpdateListener(new DynamicAnimation.OnAnimationUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda4
                @Override // androidx.dynamicanimation.animation.DynamicAnimation.OnAnimationUpdateListener
                public final void onAnimationUpdate(DynamicAnimation dynamicAnimation, float f, float f2) {
                    ChatActivity.15.this.lambda$$2(dynamicAnimation, f, f2);
                }
            });
            this.path = new Path();
            this.lastH = 0;
            this.outlineActionBackgroundPaint.setStyle(Paint.Style.STROKE);
            this.outlineActionBackgroundPaint.setStrokeCap(Paint.Cap.ROUND);
            this.outlineActionBackgroundPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
            this.outlineActionBackgroundDarkenPaint.setStyle(Paint.Style.STROKE);
            this.outlineActionBackgroundDarkenPaint.setStrokeCap(Paint.Cap.ROUND);
            this.outlineActionBackgroundDarkenPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$0(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$1(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$$2(DynamicAnimation dynamicAnimation, float f, float f2) {
            invalidate();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.View
        public void setTranslationY(float f) {
            BotCommandsMenuContainer botCommandsMenuContainer;
            if (f != getTranslationY()) {
                super.setTranslationY(f);
                if (ChatActivity.this.emptyViewContainer != null) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView == null || !chatActivityEnterView.panelAnimationInProgress()) {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 1.7f);
                    } else {
                        ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                    }
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && (botCommandsMenuContainer = chatActivityEnterView2.botCommandsMenuContainer) != null) {
                    botCommandsMenuContainer.setTranslationY(f);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onMeasure(int i, int i2) {
            ChatActivity.this.saveScrollPosition();
            super.onMeasure(i, i2);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onLayout(boolean z, int i, int i2, int i3, int i4) {
            super.onLayout(z, i, i2, i3, i4);
            int i5 = i3 - i;
            if (this.lastWidth != i5) {
                this.lastWidth = i5;
                ChatActivity.this.hideHints(false);
            }
            int measuredHeight = getMeasuredHeight();
            if (this.lastH != measuredHeight) {
                this.ignoreLayout = true;
                if (ChatActivity.this.chatListItemAnimator != null) {
                    ChatActivity.this.chatListItemAnimator.endAnimations();
                }
                ChatActivity.this.chatScrollHelper.cancel();
                this.ignoreLayout = false;
                this.lastH = measuredHeight;
            }
            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.textSelectionHelper != null && ChatActivity.this.textSelectionHelper.isSelectionMode()) {
                ChatActivity.this.textSelectionHelper.invalidate();
            }
            ChatActivity.this.isSkeletonVisible();
        }

        private void setGroupTranslationX(ChatMessageCell chatMessageCell, float f) {
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup == null) {
                return;
            }
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = getChildAt(i);
                if (childAt != chatMessageCell && (childAt instanceof ChatMessageCell)) {
                    ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                        chatMessageCell2.setSlidingOffset(f);
                        chatMessageCell2.invalidate();
                    }
                }
            }
            invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public boolean requestChildRectangleOnScreen(View view, Rect rect, boolean z) {
            if (ChatActivity.this.scrimPopupWindow != null) {
                return false;
            }
            return super.requestChildRectangleOnScreen(view, rect, z);
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onInterceptTouchEvent = super.onInterceptTouchEvent(motionEvent);
            if (!((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                processTouchEvent(motionEvent);
            }
            return onInterceptTouchEvent;
        }

        @Override // androidx.recyclerview.widget.RecyclerView
        public void setItemAnimator(RecyclerView.ItemAnimator itemAnimator) {
            if (isFastScrollAnimationRunning()) {
                return;
            }
            super.setItemAnimator(itemAnimator);
        }

        /* JADX WARN: Removed duplicated region for block: B:77:0x031e  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x0345  */
        /* JADX WARN: Removed duplicated region for block: B:86:0x0410  */
        /* JADX WARN: Removed duplicated region for block: B:92:0x0437  */
        /* JADX WARN: Removed duplicated region for block: B:99:0x045d  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        private void drawReplyButton(Canvas canvas) {
            int i;
            float value;
            float f;
            if (ChatActivity.this.slidingView == null || Thread.currentThread() != Looper.getMainLooper().getThread()) {
                return;
            }
            Paint themedPaint = getThemedPaint("paintChatActionBackground");
            Paint paint = Theme.chat_actionBackgroundGradientDarkenPaint;
            if (this.outlineActionBackgroundPaint.getColor() != themedPaint.getColor()) {
                this.outlineActionBackgroundPaint.setColor(themedPaint.getColor());
            }
            if (this.outlineActionBackgroundDarkenPaint.getColor() != paint.getColor()) {
                this.outlineActionBackgroundDarkenPaint.setColor(paint.getColor());
            }
            if (this.outlineActionBackgroundPaint.getShader() != themedPaint.getShader()) {
                this.outlineActionBackgroundPaint.setShader(themedPaint.getShader());
            }
            if (this.outlineActionBackgroundDarkenPaint.getShader() != paint.getShader()) {
                this.outlineActionBackgroundDarkenPaint.setShader(paint.getShader());
            }
            float value2 = this.slidingFillProgress.getValue() / this.springMultiplier;
            int color = this.outlineActionBackgroundDarkenPaint.getColor();
            if (value2 > 1.0f) {
                this.slidingBeyondMax = true;
            }
            float nonAnimationTranslationX = ChatActivity.this.slidingView.getNonAnimationTranslationX(false);
            if (this.slidingDrawableVisibilityProgress.getValue() == 0.0f) {
                this.slidingFillProgressSpring.cancel();
                this.slidingFillProgressSpring.getSpring().setFinalPosition(0.0f);
                this.slidingFillProgress.setValue(0.0f);
                this.slidingOuterRingSpring.cancel();
                this.slidingOuterRingSpring.getSpring().setFinalPosition(0.0f);
                this.slidingOuterRingProgress.setValue(0.0f);
                this.slidingBeyondMax = false;
            }
            float clamp = this.slidingFillProgressSpring.getSpring().getFinalPosition() != this.springMultiplier ? MathUtils.clamp(((-nonAnimationTranslationX) - AndroidUtilities.dp(20.0f)) / AndroidUtilities.dp(30.0f), 0.0f, 1.0f) : 1.0f;
            if (clamp == 1.0f && this.slidingFillProgressSpring.getSpring().getFinalPosition() != this.springMultiplier) {
                this.slidingFillProgressSpring.getSpring().setFinalPosition(this.springMultiplier);
                this.slidingFillProgressSpring.start();
                this.slidingOuterRingSpring.getSpring().setFinalPosition(this.springMultiplier);
                this.slidingOuterRingSpring.start();
            }
            float f2 = (nonAnimationTranslationX > ((float) (-AndroidUtilities.dp(20.0f))) ? 1 : (nonAnimationTranslationX == ((float) (-AndroidUtilities.dp(20.0f))) ? 0 : -1)) <= 0 ? this.springMultiplier : 0.0f;
            if (f2 != this.slidingDrawableVisibilitySpring.getSpring().getFinalPosition()) {
                this.slidingDrawableVisibilitySpring.getSpring().setFinalPosition(f2);
                if (!this.slidingDrawableVisibilitySpring.isRunning()) {
                    this.slidingDrawableVisibilitySpring.start();
                }
            }
            float value3 = this.slidingDrawableVisibilityProgress.getValue() / this.springMultiplier;
            float measuredWidth = getMeasuredWidth() + (nonAnimationTranslationX * ((ChatActivity.this.slidingView.getMessageObject() == null || !ChatActivity.this.slidingView.getMessageObject().isOut()) ? 1.0f : 0.5f));
            float top = ChatActivity.this.slidingView.getTop() + (ChatActivity.this.slidingView.getMeasuredHeight() / 2.0f);
            boolean z = this.slidingBeyondMax;
            float f3 = z ? value2 : value3;
            float f4 = z ? 0.0f : 1.0f - value2;
            boolean z2 = ColorUtils.calculateLuminance(getThemedColor(Theme.key_windowBackgroundWhite)) <= 0.5d;
            if (value3 != 0.0f) {
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set((int) ((measuredWidth - (AndroidUtilities.dp(16.0f) * f3)) + (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) ((top - (AndroidUtilities.dp(16.0f) * f3)) + (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) (((AndroidUtilities.dp(16.0f) * f3) + measuredWidth) - (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)), (int) ((top + (AndroidUtilities.dp(16.0f) * f3)) - (this.outlineActionBackgroundPaint.getStrokeWidth() / 2.0f)));
                Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF.top);
                if (value2 == 0.0f) {
                    int alpha = this.outlineActionBackgroundPaint.getAlpha();
                    this.outlineActionBackgroundPaint.setAlpha((int) (alpha * value3));
                    float f5 = clamp * 360.0f;
                    canvas.drawArc(rectF, -90.0f, f5, false, this.outlineActionBackgroundPaint);
                    this.outlineActionBackgroundPaint.setAlpha(alpha);
                    if (ChatActivity.this.themeDelegate.hasGradientService()) {
                        int alpha2 = this.outlineActionBackgroundDarkenPaint.getAlpha();
                        if (z2) {
                            i = -1;
                            this.outlineActionBackgroundDarkenPaint.setColor(-1);
                        } else {
                            i = -1;
                        }
                        this.outlineActionBackgroundDarkenPaint.setAlpha((int) (alpha2 * value3));
                        canvas.drawArc(rectF, -90.0f, f5, false, this.outlineActionBackgroundDarkenPaint);
                        RectF rectF2 = AndroidUtilities.rectTmp;
                        rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
                        Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                        this.path.rewind();
                        this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, Path.Direction.CW);
                        int alpha3 = themedPaint.getAlpha();
                        float f6 = 0.6f * value3 * clamp;
                        themedPaint.setAlpha((int) (alpha3 * f6));
                        canvas.drawPath(this.path, themedPaint);
                        themedPaint.setAlpha(alpha3);
                        if (ChatActivity.this.themeDelegate.hasGradientService()) {
                            int alpha4 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            if (z2) {
                                Theme.chat_actionBackgroundGradientDarkenPaint.setColor(i);
                            }
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f6 * alpha4));
                            canvas.drawPath(this.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha4);
                        }
                        if (f4 != 0.0f) {
                            rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f4)), (int) (top - (AndroidUtilities.dp(16.0f) * f4)), (int) ((AndroidUtilities.dp(16.0f) * f4) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f4)));
                            this.path.rewind();
                            this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Path.Direction.CW);
                            canvas.save();
                            canvas.clipPath(this.path, Region.Op.DIFFERENCE);
                        }
                        rectF2.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
                        Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                        this.path.rewind();
                        this.path.addRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, Path.Direction.CW);
                        int alpha5 = themedPaint.getAlpha();
                        float f7 = 0.4f * value3;
                        themedPaint.setAlpha((int) (alpha5 * f7));
                        canvas.drawPath(this.path, themedPaint);
                        themedPaint.setAlpha(alpha5);
                        if (ChatActivity.this.themeDelegate.hasGradientService()) {
                            int alpha6 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            if (z2) {
                                Theme.chat_actionBackgroundGradientDarkenPaint.setColor(i);
                            }
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f7 * alpha6));
                            canvas.drawPath(this.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha6);
                        }
                        if (f4 != 0.0f) {
                            canvas.restore();
                        }
                        value = this.slidingOuterRingProgress.getValue() / this.springMultiplier;
                        if (value != 0.0f && value != 1.0f) {
                            float f8 = value + 1.0f;
                            float strokeWidth = this.outlineActionBackgroundPaint.getStrokeWidth();
                            f = (1.0f - value) * strokeWidth;
                            if (f != 0.0f) {
                                rectF2.set((int) ((measuredWidth - (AndroidUtilities.dp(16.0f) * f8)) + f), (int) ((top - (AndroidUtilities.dp(16.0f) * f8)) + f), (int) (((AndroidUtilities.dp(16.0f) * f8) + measuredWidth) - f), (int) ((top + (AndroidUtilities.dp(16.0f) * f8)) - f));
                                Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF2.top);
                                int alpha7 = this.outlineActionBackgroundPaint.getAlpha();
                                this.outlineActionBackgroundPaint.setAlpha((int) (alpha7 * value3));
                                this.outlineActionBackgroundPaint.setStrokeWidth(f);
                                canvas.drawRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f8, AndroidUtilities.dp(16.0f) * f8, this.outlineActionBackgroundPaint);
                                this.outlineActionBackgroundPaint.setStrokeWidth(strokeWidth);
                                this.outlineActionBackgroundPaint.setAlpha(alpha7);
                                if (ChatActivity.this.themeDelegate.hasGradientService()) {
                                    int alpha8 = this.outlineActionBackgroundDarkenPaint.getAlpha();
                                    if (z2) {
                                        this.outlineActionBackgroundDarkenPaint.setColor(i);
                                    }
                                    this.outlineActionBackgroundDarkenPaint.setAlpha((int) (alpha8 * value3));
                                    this.outlineActionBackgroundDarkenPaint.setStrokeWidth(f);
                                    canvas.drawRoundRect(rectF2, AndroidUtilities.dp(16.0f) * f8, AndroidUtilities.dp(16.0f) * f8, this.outlineActionBackgroundDarkenPaint);
                                    this.outlineActionBackgroundDarkenPaint.setStrokeWidth(strokeWidth);
                                }
                            }
                        }
                        Drawable themedDrawable = getThemedDrawable("drawableReplyIcon");
                        themedDrawable.setAlpha((int) (value3 * 255.0f));
                        themedDrawable.setBounds((int) (measuredWidth - (AndroidUtilities.dp(7.0f) * f3)), (int) (top - (AndroidUtilities.dp(6.0f) * f3)), (int) (measuredWidth + (AndroidUtilities.dp(7.0f) * f3)), (int) (top + (AndroidUtilities.dp(5.0f) * f3)));
                        themedDrawable.draw(canvas);
                        themedDrawable.setAlpha(255);
                        this.outlineActionBackgroundDarkenPaint.setColor(color);
                        paint.setColor(color);
                    }
                }
            }
            i = -1;
            RectF rectF22 = AndroidUtilities.rectTmp;
            rectF22.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF22.top);
            this.path.rewind();
            this.path.addRoundRect(rectF22, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, Path.Direction.CW);
            int alpha32 = themedPaint.getAlpha();
            float f62 = 0.6f * value3 * clamp;
            themedPaint.setAlpha((int) (alpha32 * f62));
            canvas.drawPath(this.path, themedPaint);
            themedPaint.setAlpha(alpha32);
            if (ChatActivity.this.themeDelegate.hasGradientService()) {
            }
            if (f4 != 0.0f) {
            }
            rectF22.set((int) (measuredWidth - (AndroidUtilities.dp(16.0f) * f3)), (int) (top - (AndroidUtilities.dp(16.0f) * f3)), (int) ((AndroidUtilities.dp(16.0f) * f3) + measuredWidth), (int) (top + (AndroidUtilities.dp(16.0f) * f3)));
            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + rectF22.top);
            this.path.rewind();
            this.path.addRoundRect(rectF22, AndroidUtilities.dp(16.0f) * f3, AndroidUtilities.dp(16.0f) * f3, Path.Direction.CW);
            int alpha52 = themedPaint.getAlpha();
            float f72 = 0.4f * value3;
            themedPaint.setAlpha((int) (alpha52 * f72));
            canvas.drawPath(this.path, themedPaint);
            themedPaint.setAlpha(alpha52);
            if (ChatActivity.this.themeDelegate.hasGradientService()) {
            }
            if (f4 != 0.0f) {
            }
            value = this.slidingOuterRingProgress.getValue() / this.springMultiplier;
            if (value != 0.0f) {
                float f82 = value + 1.0f;
                float strokeWidth2 = this.outlineActionBackgroundPaint.getStrokeWidth();
                f = (1.0f - value) * strokeWidth2;
                if (f != 0.0f) {
                }
            }
            Drawable themedDrawable2 = getThemedDrawable("drawableReplyIcon");
            themedDrawable2.setAlpha((int) (value3 * 255.0f));
            themedDrawable2.setBounds((int) (measuredWidth - (AndroidUtilities.dp(7.0f) * f3)), (int) (top - (AndroidUtilities.dp(6.0f) * f3)), (int) (measuredWidth + (AndroidUtilities.dp(7.0f) * f3)), (int) (top + (AndroidUtilities.dp(5.0f) * f3)));
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(255);
            this.outlineActionBackgroundDarkenPaint.setColor(color);
            paint.setColor(color);
        }

        private void processTouchEvent(MotionEvent motionEvent) {
            TLRPC$Chat tLRPC$Chat;
            TLRPC$TL_forumTopic findTopic;
            if (motionEvent != null) {
                ChatActivity.this.wasManualScroll = true;
            }
            if (motionEvent == null || motionEvent.getAction() != 0 || ChatActivity.this.startedTrackingSlidingView || ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.slidingView != null || ((BaseFragment) ChatActivity.this).inPreviewMode) {
                if (ChatActivity.this.slidingView == null || motionEvent == null || motionEvent.getAction() != 2 || motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                    if (ChatActivity.this.slidingView != null) {
                        if (motionEvent != null) {
                            if (motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                                return;
                            }
                            if (motionEvent.getAction() != 3 && motionEvent.getAction() != 1 && motionEvent.getAction() != 6) {
                                return;
                            }
                        }
                        if (motionEvent != null && motionEvent.getAction() != 3 && Math.abs(ChatActivity.this.slidingView.getNonAnimationTranslationX(false)) >= AndroidUtilities.dp(50.0f)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            chatActivity.showFieldPanelForReply(chatActivity.slidingView.getMessageObject());
                        }
                        float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                        this.endTrackingX = slidingOffsetX;
                        if (slidingOffsetX == 0.0f) {
                            ChatActivity.this.slidingView = null;
                        }
                        this.lastTrackingAnimationTime = System.currentTimeMillis();
                        this.trackAnimationProgress = 0.0f;
                        invalidate();
                        ChatActivity.this.maybeStartTrackingSlidingView = false;
                        ChatActivity.this.startedTrackingSlidingView = false;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        return;
                    }
                    return;
                }
                int max = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (motionEvent.getX() - this.startedTrackingX)));
                int abs = Math.abs(((int) motionEvent.getY()) - this.startedTrackingY);
                if (getScrollState() != 0 || !ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.startedTrackingSlidingView || max > (-AndroidUtilities.getPixelsInCM(0.4f, true)) || Math.abs(max) / 3 <= abs) {
                    if (ChatActivity.this.startedTrackingSlidingView) {
                        if (Math.abs(max) >= AndroidUtilities.dp(50.0f)) {
                            if (!this.wasTrackingVibrate) {
                                try {
                                    performHapticFeedback(3, 2);
                                } catch (Exception unused) {
                                }
                                this.wasTrackingVibrate = true;
                            }
                        } else {
                            this.wasTrackingVibrate = false;
                        }
                        float f = max;
                        ChatActivity.this.slidingView.setSlidingOffset(f);
                        MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                        if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                            ChatActivity.this.updateTextureViewPosition(false, false);
                        }
                        setGroupTranslationX(ChatActivity.this.slidingView, f);
                        invalidate();
                        return;
                    }
                    return;
                }
                MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                ChatActivity.this.slidingView.onTouchEvent(obtain);
                super.onInterceptTouchEvent(obtain);
                obtain.recycle();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.maybeStartTrackingSlidingView = false;
                ChatActivity.this.startedTrackingSlidingView = true;
                this.startedTrackingX = (int) motionEvent.getX();
                if (getParent() != null) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    return;
                }
                return;
            }
            View pressedChildView = getPressedChildView();
            if (pressedChildView instanceof ChatMessageCell) {
                if (ChatActivity.this.slidingView != null) {
                    ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                }
                ChatActivity.this.slidingView = (ChatMessageCell) pressedChildView;
                MessageObject messageObject2 = ChatActivity.this.slidingView.getMessageObject();
                boolean z = messageObject2 != null && ChatObject.isForum(ChatActivity.this.currentChat) && (findTopic = ChatActivity.this.getMessagesController().getTopicsController().findTopic(ChatActivity.this.currentChat.id, MessageObject.getTopicId(messageObject2.messageOwner, true))) != null && (!findTopic.closed || ChatObject.canManageTopic(((BaseFragment) ChatActivity.this).currentAccount, ChatActivity.this.currentChat, findTopic));
                if (ChatActivity.this.chatMode != 0 || ((ChatActivity.this.threadMessageObjects != null && ChatActivity.this.threadMessageObjects.contains(messageObject2)) || ((ChatActivity.this.getMessageType(messageObject2) == 1 && (messageObject2.getDialogId() == ChatActivity.this.mergeDialogId || messageObject2.needDrawBluredPreview())) || ((ChatActivity.this.currentEncryptedChat == null && messageObject2.getId() < 0) || ((ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && ((!ChatActivity.this.bottomOverlayChatWaitsReply || !z) && !messageObject2.wasJustSent)) || (((tLRPC$Chat = ChatActivity.this.currentChat) != null && ((ChatObject.isNotInChat(tLRPC$Chat) && !ChatActivity.this.isThreadChat()) || ((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || !ChatObject.canSendMessages(ChatActivity.this.currentChat)))) || ChatActivity.this.textSelectionHelper.isSelectionMode())))))) {
                    ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                    ChatActivity.this.slidingView = null;
                    return;
                }
                this.startedTrackingPointerId = motionEvent.getPointerId(0);
                ChatActivity.this.maybeStartTrackingSlidingView = true;
                this.startedTrackingX = (int) motionEvent.getX();
                this.startedTrackingY = (int) motionEvent.getY();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(motionEvent);
            if (motionEvent.getAction() == 0) {
                ChatActivity.this.scrollByTouch = true;
            }
            if (ChatActivity.this.pullingDownOffset != 0.0f && (motionEvent.getAction() == 1 || motionEvent.getAction() == 3)) {
                float min = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f));
                if (motionEvent.getAction() != 1 || min != 1.0f || ChatActivity.this.pullingDownDrawable == null || ChatActivity.this.pullingDownDrawable.emptyStub) {
                    if (ChatActivity.this.pullingDownDrawable == null || !ChatActivity.this.pullingDownDrawable.emptyStub || System.currentTimeMillis() - ChatActivity.this.pullingDownDrawable.lastShowingReleaseTime >= 500 || !ChatActivity.this.pullingDownDrawable.animateSwipeToRelease) {
                        ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, 0.0f);
                        ChatActivity.this.pullingDownBackAnimator = ofFloat;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda0
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.15.this.lambda$onTouchEvent$7(valueAnimator);
                            }
                        });
                        ofFloat.setDuration(250L);
                        ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        ofFloat.start();
                    } else {
                        AnimatorSet animatorSet = new AnimatorSet();
                        ChatActivity.this.pullingDownBackAnimator = animatorSet;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ValueAnimator ofFloat2 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, AndroidUtilities.dp(111.0f));
                        ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda2
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.15.this.lambda$onTouchEvent$5(valueAnimator);
                            }
                        });
                        ofFloat2.setDuration(400L);
                        ofFloat2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ValueAnimator ofFloat3 = ValueAnimator.ofFloat(AndroidUtilities.dp(111.0f), 0.0f);
                        ofFloat3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda3
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.15.this.lambda$onTouchEvent$6(valueAnimator);
                            }
                        });
                        ofFloat3.setStartDelay(600L);
                        ofFloat3.setDuration(250L);
                        ofFloat3.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animatorSet.playSequentially(ofFloat2, ofFloat3);
                        animatorSet.start();
                    }
                } else if (ChatActivity.this.pullingDownDrawable.animationIsRunning()) {
                    ValueAnimator ofFloat4 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, ChatActivity.this.pullingDownOffset + AndroidUtilities.dp(8.0f));
                    ChatActivity.this.pullingDownBackAnimator = ofFloat4;
                    ofFloat4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda1
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.15.this.lambda$onTouchEvent$3(valueAnimator);
                        }
                    });
                    ofFloat4.setDuration(200L);
                    ofFloat4.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    ofFloat4.start();
                    ChatActivity.this.pullingDownDrawable.runOnAnimationFinish(new Runnable() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda7
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.15.this.lambda$onTouchEvent$4();
                        }
                    });
                } else {
                    ChatActivity.this.animateToNextChat();
                }
            }
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean onTouchEvent = super.onTouchEvent(motionEvent);
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return onTouchEvent;
            }
            processTouchEvent(motionEvent);
            return ChatActivity.this.startedTrackingSlidingView || onTouchEvent;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$3(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$4() {
            ChatActivity.this.animateToNextChat();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$5(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$6(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onTouchEvent$7(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public void requestDisallowInterceptTouchEvent(boolean z) {
            super.requestDisallowInterceptTouchEvent(z);
            if (ChatActivity.this.slidingView != null) {
                processTouchEvent(null);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView
        public void onChildPressed(View view, float f, float f2, boolean z) {
            MessageObject.GroupedMessages currentMessagesGroup;
            super.onChildPressed(view, f, f2, z);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (messageObject.isMusic() || messageObject.isDocument() || (currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup()) == null) {
                    return;
                }
                int childCount = getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = getChildAt(i);
                    if (childAt != view && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                            chatMessageCell2.setPressed(z);
                        }
                    }
                }
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas canvas) {
            float f;
            super.onDraw(canvas);
            if (ChatActivity.this.slidingView != null) {
                float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                if (!ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && this.endTrackingX != 0.0f && slidingOffsetX != 0.0f) {
                    long currentTimeMillis = System.currentTimeMillis();
                    float f2 = this.trackAnimationProgress + (((float) (currentTimeMillis - this.lastTrackingAnimationTime)) / 180.0f);
                    this.trackAnimationProgress = f2;
                    if (f2 > 1.0f) {
                        this.trackAnimationProgress = 1.0f;
                    }
                    this.lastTrackingAnimationTime = currentTimeMillis;
                    float interpolation = this.endTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                    if (interpolation == 0.0f) {
                        this.endTrackingX = 0.0f;
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, interpolation);
                    ChatActivity.this.slidingView.setSlidingOffset(interpolation);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false, false);
                    }
                    float f3 = this.trackAnimationProgress;
                    if (f3 == 1.0f || f3 == 0.0f) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    invalidate();
                }
                drawReplyButton(canvas);
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f || ChatActivity.this.isInPreviewMode()) {
                if (ChatActivity.this.pullingDownDrawable != null) {
                    ChatActivity.this.pullingDownDrawable.reset();
                    return;
                }
                return;
            }
            canvas.save();
            if (ChatActivity.this.pullingDownAnimateProgress != 0.0f) {
                f = ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) + (ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset)) * ChatActivity.this.pullingDownAnimateProgress;
            } else {
                f = 0.0f;
            }
            canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset) - f);
            if (ChatActivity.this.pullingDownDrawable == null) {
                ChatActivity chatActivity = ChatActivity.this;
                int i = ((BaseFragment) chatActivity).currentAccount;
                View view = ((BaseFragment) ChatActivity.this).fragmentView;
                long j = ChatActivity.this.dialog_id;
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.pullingDownDrawable = new ChatPullingDownDrawable(i, view, j, chatActivity2.dialogFolderId, chatActivity2.dialogFilterId, chatActivity2.themeDelegate);
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.pullingDownDrawable.setWidth(getMeasuredWidth());
            ChatActivity.this.pullingDownDrawable.draw(canvas, ChatActivity.this.chatListView, Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f)), 1.0f - ChatActivity.this.pullingDownAnimateProgress);
            canvas.restore();
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(0.0f, 0.0f, ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredWidth(), ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                canvas.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.pullingDownOffset) - f);
                ChatActivity.this.pullingDownAnimateToActivity.chatListView.draw(canvas);
                canvas.restore();
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void draw(Canvas canvas) {
            ChatActivity chatActivity;
            MessageSkeleton messageSkeleton;
            int lerp;
            MessageObject.GroupedMessages.TransitionParams transitionParams;
            long j = 0;
            if ((ChatActivity.this.startMessageAppearTransitionMs == 0 || System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs <= 200) && !AndroidUtilities.isTablet() && !ChatActivity.this.isComments) {
                ChatActivity chatActivity2 = ChatActivity.this;
                if (chatActivity2.currentUser == null) {
                    TLRPC$Chat tLRPC$Chat = chatActivity2.currentChat;
                    int i = 0;
                    boolean z = true;
                    boolean z2 = tLRPC$Chat == null || ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat);
                    if (ChatActivity.this.pullingDownOffset != 0.0f) {
                        canvas.save();
                        canvas.translate(0.0f, -ChatActivity.this.pullingDownOffset);
                    }
                    updateSkeletonColors();
                    updateSkeletonGradient();
                    int height = getHeight() - ChatActivity.this.blurredViewBottomOffset;
                    int i2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    for (int i3 = 0; i3 < getChildCount(); i3++) {
                        int top = getChildAt(i3).getTop();
                        if (top < i2) {
                            i2 = top;
                        }
                    }
                    if (ChatActivity.this.startMessageAppearTransitionMs == 0 && i2 <= 0) {
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity3.checkDispatchHideSkeletons(((BaseFragment) chatActivity3).fragmentBeginToShow);
                    }
                    Paint themedPaint = getThemedPaint("paintChatActionBackground");
                    if (ChatActivity.this.skeletonServicePaint.getColor() != themedPaint.getColor()) {
                        ChatActivity.this.skeletonServicePaint.setColor(themedPaint.getColor());
                    }
                    if (ChatActivity.this.skeletonServicePaint.getShader() != themedPaint.getShader()) {
                        ChatActivity.this.skeletonServicePaint.setShader(themedPaint.getShader());
                        ChatActivity.this.skeletonColorMatrix.setSaturation(ChatActivity.SKELETON_SATURATION);
                        ChatActivity.this.skeletonServicePaint.setColorFilter(new ColorMatrixColorFilter(ChatActivity.this.skeletonColorMatrix));
                    }
                    int i4 = 0;
                    while (true) {
                        if (i4 >= getChildCount()) {
                            break;
                        }
                        View childAt = getChildAt(i4);
                        if (childAt instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                            lerp = (int) (childAt.getTop() + chatMessageCell.getCurrentBackgroundDrawable(z).getBounds().top + (currentMessagesGroup != null ? transitionParams.top + currentMessagesGroup.transitionParams.offsetTop : 0.0f));
                            if (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) {
                                lerp = AndroidUtilities.lerp(height, lerp, childAt.getAlpha());
                            } else if (childAt.getAlpha() != 1.0f) {
                                lerp = height;
                            }
                            if (lerp >= height) {
                                i4++;
                                z = true;
                            }
                            height = lerp;
                            i4++;
                            z = true;
                        } else {
                            if (childAt instanceof ChatActionCell) {
                                lerp = (ChatActivity.this.startMessageAppearTransitionMs == 0 && ChatActivity.this.isSkeletonVisible()) ? AndroidUtilities.lerp(height, childAt.getTop(), childAt.getAlpha()) : childAt.getAlpha() == 1.0f ? childAt.getTop() : height;
                                if (lerp >= height) {
                                }
                                height = lerp;
                            }
                            i4++;
                            z = true;
                        }
                    }
                    if (!ChatActivity.this.isSkeletonVisible()) {
                        if (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs > 200) {
                            ChatActivity.this.messageSkeletons.clear();
                        }
                    } else {
                        boolean z3 = SharedConfig.getDevicePerformanceClass() != 0 && Theme.hasGradientService();
                        int i5 = Theme.key_windowBackgroundWhite;
                        boolean z4 = ColorUtils.calculateLuminance(getThemedColor(i5)) <= 0.699999988079071d && Theme.hasGradientService();
                        boolean z5 = ColorUtils.calculateLuminance(getThemedColor(i5)) <= 0.009999999776482582d && Theme.hasGradientService();
                        if (z3) {
                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() - ChatActivity.this.contentPanTranslation);
                        }
                        int alpha = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        if (z5) {
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha * 4.0f));
                        }
                        float currentTimeMillis = ChatActivity.this.startMessageAppearTransitionMs != 0 ? 1.0f - (((float) (System.currentTimeMillis() - ChatActivity.this.startMessageAppearTransitionMs)) / 200.0f) : 1.0f;
                        int alpha2 = ChatActivity.this.skeletonPaint.getAlpha();
                        int alpha3 = ChatActivity.this.skeletonServicePaint.getAlpha();
                        int alpha4 = ChatActivity.this.skeletonOutlinePaint.getAlpha();
                        ChatActivity.this.skeletonServicePaint.setAlpha((int) (currentTimeMillis * 255.0f));
                        int i6 = (int) (currentTimeMillis * alpha2);
                        ChatActivity.this.skeletonPaint.setAlpha(i6);
                        ChatActivity.this.skeletonOutlinePaint.setAlpha(i6);
                        int i7 = 0;
                        while (true) {
                            chatActivity = ChatActivity.this;
                            if (height <= chatActivity.blurredViewTopOffset) {
                                break;
                            }
                            int dp = height - AndroidUtilities.dp(3.0f);
                            if (i7 >= ChatActivity.this.messageSkeletons.size()) {
                                messageSkeleton = ChatActivity.this.getNewSkeleton(z2);
                                ChatActivity.this.messageSkeletons.add(messageSkeleton);
                            } else {
                                messageSkeleton = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i7);
                            }
                            messageSkeleton.lastBottom = ChatActivity.this.startMessageAppearTransitionMs != j ? ChatActivity.this.messages.size() <= 2 ? Math.min(messageSkeleton.lastBottom, dp) : messageSkeleton.lastBottom : dp;
                            height = dp - messageSkeleton.height;
                            i7++;
                            j = 0;
                        }
                        int height2 = chatActivity.messageSkeletons.isEmpty() ? getHeight() - ChatActivity.this.blurredViewBottomOffset : ((MessageSkeleton) ChatActivity.this.messageSkeletons.get(0)).lastBottom + AndroidUtilities.dp(3.0f);
                        while (i < ChatActivity.this.messageSkeletons.size() && height2 > ChatActivity.this.blurredViewTopOffset) {
                            int dp2 = height2 - AndroidUtilities.dp(3.0f);
                            MessageSkeleton messageSkeleton2 = (MessageSkeleton) ChatActivity.this.messageSkeletons.get(i);
                            int i8 = messageSkeleton2.lastBottom;
                            int i9 = alpha;
                            ChatActivity.this.skeletonBackgroundDrawable.setBounds(z2 ? AndroidUtilities.dp(3.0f) : AndroidUtilities.dp(51.0f), i8 - messageSkeleton2.height, messageSkeleton2.width, i8);
                            if (z3) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonServicePaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonPaint);
                            if (z4) {
                                ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, Theme.chat_actionBackgroundGradientDarkenPaint);
                            }
                            ChatActivity.this.skeletonBackgroundDrawable.drawCached(canvas, ChatActivity.this.skeletonBackgroundCacheParams, ChatActivity.this.skeletonOutlinePaint);
                            if (!z2) {
                                float f = 27.0f;
                                if (z3) {
                                    canvas.drawCircle(AndroidUtilities.dp(27.0f), i8 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonServicePaint);
                                    f = 27.0f;
                                }
                                canvas.drawCircle(AndroidUtilities.dp(f), i8 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonPaint);
                                float f2 = 27.0f;
                                if (z4) {
                                    canvas.drawCircle(AndroidUtilities.dp(27.0f), i8 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                                    f2 = 27.0f;
                                }
                                canvas.drawCircle(AndroidUtilities.dp(f2), i8 - AndroidUtilities.dp(21.0f), AndroidUtilities.dp(21.0f), ChatActivity.this.skeletonOutlinePaint);
                            }
                            height2 = dp2 - messageSkeleton2.height;
                            i++;
                            alpha = i9;
                        }
                        ChatActivity.this.skeletonServicePaint.setAlpha(alpha3);
                        ChatActivity.this.skeletonPaint.setAlpha(alpha2);
                        ChatActivity.this.skeletonOutlinePaint.setAlpha(alpha4);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha);
                        invalidate();
                    }
                    ChatActivity chatActivity4 = ChatActivity.this;
                    chatActivity4.lastSkeletonCount = chatActivity4.messageSkeletons.size();
                    ChatActivity chatActivity5 = ChatActivity.this;
                    chatActivity5.lastSkeletonMessageCount = chatActivity5.messages.size();
                    if (ChatActivity.this.pullingDownOffset != 0.0f) {
                        canvas.restore();
                    }
                }
            }
            super.draw(canvas);
        }

        private void updateSkeletonColors() {
            boolean z = ColorUtils.calculateLuminance(getThemedColor(Theme.key_windowBackgroundWhite)) <= 0.699999988079071d;
            int i = Theme.key_listSelector;
            int blendARGB = ColorUtils.blendARGB(getThemedColor(i), Color.argb(z ? 33 : 3, 255, 255, 255), z ? 0.9f : 0.5f);
            int alphaComponent = ColorUtils.setAlphaComponent(getThemedColor(i), z ? 24 : ChatActivity.SKELETON_LIGHT_OVERLAY_ALPHA);
            if (ChatActivity.this.skeletonColor1 == alphaComponent && ChatActivity.this.skeletonColor0 == blendARGB) {
                return;
            }
            ChatActivity.this.skeletonColor0 = blendARGB;
            ChatActivity.this.skeletonColor1 = alphaComponent;
            ChatActivity.this.skeletonGradient = new LinearGradient(0.0f, 0.0f, ChatActivity.this.skeletonGradientWidth = AndroidUtilities.dp(200.0f), 0.0f, new int[]{alphaComponent, blendARGB, blendARGB, alphaComponent}, new float[]{0.0f, 0.4f, 0.6f, 1.0f}, Shader.TileMode.CLAMP);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.skeletonTotalTranslation = (-chatActivity.skeletonGradientWidth) * 2;
            ChatActivity.this.skeletonPaint.setShader(ChatActivity.this.skeletonGradient);
            int argb = Color.argb(z ? 43 : 96, 255, 255, 255);
            ChatActivity.this.skeletonOutlineGradient = new LinearGradient(0.0f, 0.0f, ChatActivity.this.skeletonGradientWidth, 0.0f, new int[]{0, argb, argb, 0}, new float[]{0.0f, 0.4f, 0.6f, 1.0f}, Shader.TileMode.CLAMP);
            ChatActivity.this.skeletonOutlinePaint.setShader(ChatActivity.this.skeletonOutlineGradient);
        }

        private void updateSkeletonGradient() {
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long abs = Math.abs(ChatActivity.this.skeletonLastUpdateTime - elapsedRealtime);
            if (abs > 17) {
                abs = 16;
            }
            if (abs < 4) {
                abs = 0;
            }
            int width = getWidth();
            ChatActivity.this.skeletonLastUpdateTime = elapsedRealtime;
            ChatActivity.access$16316(ChatActivity.this, ((float) (abs * width)) / 400.0f);
            if (ChatActivity.this.skeletonTotalTranslation >= width * 2) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.skeletonTotalTranslation = (-chatActivity.skeletonGradientWidth) * 2;
            }
            ChatActivity.this.skeletonMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, 0.0f);
            if (ChatActivity.this.skeletonGradient != null) {
                ChatActivity.this.skeletonGradient.setLocalMatrix(ChatActivity.this.skeletonMatrix);
            }
            ChatActivity.this.skeletonOutlineMatrix.setTranslate(ChatActivity.this.skeletonTotalTranslation, 0.0f);
            if (ChatActivity.this.skeletonOutlineGradient != null) {
                ChatActivity.this.skeletonOutlineGradient.setLocalMatrix(ChatActivity.this.skeletonOutlineMatrix);
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            canvas.save();
            if (ChatActivity.this.fragmentTransition == null || (ChatActivity.this.fromPullingDownTransition && !ChatActivity.this.toPullingDownTransition)) {
                canvas.clipRect(0.0f, (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), getMeasuredWidth(), getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset);
            }
            this.selectorRect.setEmpty();
            if (ChatActivity.this.pullingDownOffset != 0.0f) {
                int save = canvas.save();
                float measuredHeight = ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f;
                ChatActivity chatActivity = ChatActivity.this;
                float f = (-chatActivity.pullingDownOffset) - measuredHeight;
                chatActivity.drawingChatLisViewYoffset = f;
                canvas.translate(0.0f, f);
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
                canvas.restoreToCount(save);
            } else {
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                drawChatForegroundElements(canvas);
            }
            canvas.restore();
        }

        private void drawChatForegroundElements(Canvas canvas) {
            int size = this.drawTimeAfter.size();
            boolean z = false;
            if (size > 0) {
                for (int i = 0; i < size; i++) {
                    ChatMessageCell chatMessageCell = this.drawTimeAfter.get(i);
                    canvas.save();
                    canvas.translate(chatMessageCell.getLeft() + chatMessageCell.getNonAnimationTranslationX(false), chatMessageCell.getY());
                    chatMessageCell.drawTime(canvas, chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f, true);
                    canvas.restore();
                }
                this.drawTimeAfter.clear();
            }
            int size2 = this.drawNamesAfter.size();
            if (size2 > 0) {
                for (int i2 = 0; i2 < size2; i2++) {
                    ChatMessageCell chatMessageCell2 = this.drawNamesAfter.get(i2);
                    float left = chatMessageCell2.getLeft() + chatMessageCell2.getNonAnimationTranslationX(false);
                    float y = chatMessageCell2.getY();
                    float alpha = chatMessageCell2.shouldDrawAlphaLayer() ? chatMessageCell2.getAlpha() : 1.0f;
                    canvas.save();
                    canvas.translate(left, y);
                    chatMessageCell2.setInvalidatesParent(true);
                    chatMessageCell2.drawNamesLayout(canvas, alpha);
                    chatMessageCell2.setInvalidatesParent(false);
                    canvas.restore();
                }
                this.drawNamesAfter.clear();
            }
            int size3 = this.drawCaptionAfter.size();
            if (size3 > 0) {
                int i3 = 0;
                while (i3 < size3) {
                    ChatMessageCell chatMessageCell3 = this.drawCaptionAfter.get(i3);
                    boolean z2 = chatMessageCell3.getCurrentPosition() != null && (chatMessageCell3.getCurrentPosition().flags & 1) == 0;
                    float alpha2 = chatMessageCell3.shouldDrawAlphaLayer() ? chatMessageCell3.getAlpha() : 1.0f;
                    float left2 = chatMessageCell3.getLeft() + chatMessageCell3.getNonAnimationTranslationX(z);
                    float y2 = chatMessageCell3.getY();
                    canvas.save();
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell3.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null && currentMessagesGroup.transitionParams.backgroundChangeBounds) {
                        float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(true);
                        MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                        float f = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                        float f2 = transitionParams.top + transitionParams.offsetTop;
                        float f3 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                        float f4 = transitionParams.bottom + transitionParams.offsetBottom;
                        if (!transitionParams.backgroundChangeBounds) {
                            f2 += chatMessageCell3.getTranslationY();
                            f4 += chatMessageCell3.getTranslationY();
                        }
                        canvas.clipRect(f + AndroidUtilities.dp(8.0f), f2 + AndroidUtilities.dp(8.0f), f3 - AndroidUtilities.dp(8.0f), f4 - AndroidUtilities.dp(8.0f));
                    }
                    if (chatMessageCell3.getTransitionParams().wasDraw) {
                        canvas.translate(left2, y2);
                        chatMessageCell3.setInvalidatesParent(true);
                        chatMessageCell3.drawCaptionLayout(canvas, z2, alpha2);
                        chatMessageCell3.setInvalidatesParent(false);
                        canvas.restore();
                    }
                    i3++;
                    z = false;
                }
                this.drawCaptionAfter.clear();
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:126:0x0361, code lost:
            if (r2.messages.size() != 1) goto L42;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        private void drawChatBackgroundElements(Canvas canvas) {
            float f;
            int i;
            boolean z;
            int i2;
            MessageObject.GroupedMessages currentMessagesGroup;
            MessageObject.GroupedMessages groupedMessages;
            ChatMessageCell chatMessageCell;
            int i3;
            boolean z2;
            Canvas canvas2 = canvas;
            int childCount = getChildCount();
            MessageObject.GroupedMessages groupedMessages2 = null;
            int i4 = 0;
            while (true) {
                f = 0.0f;
                i = 2;
                if (i4 >= childCount) {
                    break;
                }
                View childAt = getChildAt(i4);
                if (ChatActivity.this.chatAdapter.isBot && (childAt instanceof BotHelpCell)) {
                    float measuredHeight = ((((getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.blurredViewBottomOffset) / 2.0f) - (childAt.getMeasuredHeight() / 2)) + ChatActivity.this.chatListViewPaddingTop;
                    if (!((BotHelpCell) childAt).animating() && !ChatActivity.this.chatListView.fastScrollAnimationRunning) {
                        if (childAt.getTop() > measuredHeight) {
                            childAt.setTranslationY(measuredHeight - childAt.getTop());
                        } else {
                            childAt.setTranslationY(0.0f);
                        }
                    }
                } else {
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup2 = chatMessageCell2.getCurrentMessagesGroup();
                        if (currentMessagesGroup2 == null || currentMessagesGroup2 != groupedMessages2) {
                            MessageObject.GroupedMessagePosition currentPosition = chatMessageCell2.getCurrentPosition();
                            MessageBackgroundDrawable backgroundDrawable = chatMessageCell2.getBackgroundDrawable();
                            if ((backgroundDrawable.isAnimationInProgress() || chatMessageCell2.isDrawingSelectionBackground()) && (currentPosition == null || (currentPosition.flags & 2) != 0)) {
                                if (!chatMessageCell2.isHighlighted() && !chatMessageCell2.isHighlightedAnimated()) {
                                    int y = (int) chatMessageCell2.getY();
                                    canvas.save();
                                    if (currentPosition == null) {
                                        i3 = chatMessageCell2.getMeasuredHeight();
                                    } else {
                                        int measuredHeight2 = chatMessageCell2.getMeasuredHeight() + y;
                                        long j = 0;
                                        float f2 = 0.0f;
                                        for (int i5 = 0; i5 < childCount; i5++) {
                                            View childAt2 = getChildAt(i5);
                                            if (childAt2 instanceof ChatMessageCell) {
                                                ChatMessageCell chatMessageCell3 = (ChatMessageCell) childAt2;
                                                if (chatMessageCell3.getCurrentMessagesGroup() == currentMessagesGroup2) {
                                                    MessageBackgroundDrawable backgroundDrawable2 = chatMessageCell3.getBackgroundDrawable();
                                                    y = Math.min(y, (int) chatMessageCell3.getY());
                                                    measuredHeight2 = Math.max(measuredHeight2, ((int) chatMessageCell3.getY()) + chatMessageCell3.getMeasuredHeight());
                                                    long lastTouchTime = backgroundDrawable2.getLastTouchTime();
                                                    if (lastTouchTime > j) {
                                                        j = lastTouchTime;
                                                        f = backgroundDrawable2.getTouchX() + chatMessageCell3.getX();
                                                        f2 = backgroundDrawable2.getTouchY() + chatMessageCell3.getY();
                                                    }
                                                }
                                            }
                                        }
                                        backgroundDrawable.setTouchCoordsOverride(f, f2 - y);
                                        i3 = measuredHeight2 - y;
                                    }
                                    int i6 = i3 + y;
                                    canvas2.clipRect(0, y, getMeasuredWidth(), i6);
                                    Paint themedPaint = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate = ChatActivity.this.themeDelegate;
                                    if (themeDelegate != null && !themeDelegate.isDark && themedPaint != null) {
                                        backgroundDrawable.setCustomPaint(themedPaint);
                                        float top = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate2 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate2 != null) {
                                            themeDelegate2.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell2.getX(), top);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY, chatMessageCell2.getX(), top);
                                        }
                                    } else {
                                        backgroundDrawable.setCustomPaint(null);
                                        backgroundDrawable.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                    }
                                    backgroundDrawable.setBounds(0, y, getMeasuredWidth(), i6);
                                    backgroundDrawable.draw(canvas2);
                                    canvas.restore();
                                } else if (currentPosition == null) {
                                    Paint themedPaint2 = getThemedPaint("paintChatMessageBackgroundSelected");
                                    ThemeDelegate themeDelegate3 = ChatActivity.this.themeDelegate;
                                    if ((themeDelegate3 != null && themeDelegate3.isDark) || themedPaint2 == null) {
                                        themedPaint2 = Theme.chat_replyLinePaint;
                                        themedPaint2.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                    } else {
                                        float top2 = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundSizeY2 = ChatActivity.this.contentView.getBackgroundSizeY();
                                        ThemeDelegate themeDelegate4 = ChatActivity.this.themeDelegate;
                                        if (themeDelegate4 != null) {
                                            themeDelegate4.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell2.getX(), top2);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundSizeY2, chatMessageCell2.getX(), top2);
                                        }
                                    }
                                    Paint paint = themedPaint2;
                                    canvas.save();
                                    canvas2.translate(0.0f, chatMessageCell2.getTranslationY());
                                    int alpha = paint.getAlpha();
                                    paint.setAlpha((int) (alpha * chatMessageCell2.getHighlightAlpha() * chatMessageCell2.getAlpha()));
                                    groupedMessages = currentMessagesGroup2;
                                    chatMessageCell = chatMessageCell2;
                                    canvas.drawRect(0.0f, chatMessageCell2.getTop(), getMeasuredWidth(), chatMessageCell2.getBottom(), paint);
                                    paint.setAlpha(alpha);
                                    canvas.restore();
                                    groupedMessages2 = groupedMessages;
                                }
                            }
                            groupedMessages = currentMessagesGroup2;
                            chatMessageCell = chatMessageCell2;
                            groupedMessages2 = groupedMessages;
                        } else {
                            groupedMessages = currentMessagesGroup2;
                            chatMessageCell = chatMessageCell2;
                        }
                        if (ChatActivity.this.scrimView != chatMessageCell && groupedMessages == null && chatMessageCell.drawBackgroundInParent()) {
                            canvas.save();
                            canvas2.translate(chatMessageCell.getX(), chatMessageCell.getY());
                            if (chatMessageCell.getScaleX() != 1.0f) {
                                z2 = true;
                                canvas2.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getPivotX(), chatMessageCell.getHeight() >> 1);
                            } else {
                                z2 = true;
                            }
                            chatMessageCell.drawBackgroundInternal(canvas2, z2);
                            canvas.restore();
                        }
                    } else if (childAt instanceof ChatActionCell) {
                        ChatActionCell chatActionCell = (ChatActionCell) childAt;
                        if (chatActionCell.hasGradientService()) {
                            canvas.save();
                            canvas2.translate(chatActionCell.getX(), chatActionCell.getY());
                            canvas2.scale(chatActionCell.getScaleX(), chatActionCell.getScaleY(), chatActionCell.getMeasuredWidth() / 2.0f, chatActionCell.getMeasuredHeight() / 2.0f);
                            chatActionCell.drawBackground(canvas2, true);
                            canvas.restore();
                        }
                    }
                    i4++;
                }
            }
            MessageObject.GroupedMessages currentMessagesGroup3 = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
            int i7 = 0;
            while (i7 < 3) {
                this.drawingGroups.clear();
                if (i7 != i || ChatActivity.this.chatListView.isFastScrollAnimationRunning()) {
                    for (int i8 = 0; i8 < childCount; i8++) {
                        View childAt3 = ChatActivity.this.chatListView.getChildAt(i8);
                        if (childAt3 instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell4 = (ChatMessageCell) childAt3;
                            if (childAt3.getY() <= ChatActivity.this.chatListView.getHeight() && childAt3.getY() + childAt3.getHeight() >= f && (currentMessagesGroup = chatMessageCell4.getCurrentMessagesGroup()) != null) {
                                int i9 = i7 == 0 ? 1 : 1;
                                if ((i7 != i9 || currentMessagesGroup.transitionParams.drawBackgroundForDeletedItems) && ((i7 != 0 || !chatMessageCell4.getMessageObject().deleted) && ((i7 != 1 || chatMessageCell4.getMessageObject().deleted) && ((i7 != i || chatMessageCell4.willRemovedAfterAnimation()) && (i7 == i || !chatMessageCell4.willRemovedAfterAnimation()))))) {
                                    if (!this.drawingGroups.contains(currentMessagesGroup)) {
                                        MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                        transitionParams.left = 0;
                                        transitionParams.top = 0;
                                        transitionParams.right = 0;
                                        transitionParams.bottom = 0;
                                        transitionParams.pinnedBotton = false;
                                        transitionParams.pinnedTop = false;
                                        transitionParams.cell = chatMessageCell4;
                                        this.drawingGroups.add(currentMessagesGroup);
                                    }
                                    currentMessagesGroup.transitionParams.pinnedTop = chatMessageCell4.isPinnedTop();
                                    currentMessagesGroup.transitionParams.pinnedBotton = chatMessageCell4.isPinnedBottom();
                                    int left = chatMessageCell4.getLeft() + chatMessageCell4.getBackgroundDrawableLeft();
                                    int left2 = chatMessageCell4.getLeft() + chatMessageCell4.getBackgroundDrawableRight();
                                    int top3 = chatMessageCell4.getTop() + chatMessageCell4.getBackgroundDrawableTop();
                                    int top4 = chatMessageCell4.getTop() + chatMessageCell4.getBackgroundDrawableBottom();
                                    if ((chatMessageCell4.getCurrentPosition().flags & 4) == 0) {
                                        top3 -= AndroidUtilities.dp(10.0f);
                                    }
                                    if ((chatMessageCell4.getCurrentPosition().flags & 8) == 0) {
                                        top4 += AndroidUtilities.dp(10.0f);
                                    }
                                    if (chatMessageCell4.willRemovedAfterAnimation()) {
                                        currentMessagesGroup.transitionParams.cell = chatMessageCell4;
                                    }
                                    MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                    int i10 = transitionParams2.top;
                                    if (i10 == 0 || top3 < i10) {
                                        transitionParams2.top = top3;
                                    }
                                    int i11 = transitionParams2.bottom;
                                    if (i11 == 0 || top4 > i11) {
                                        transitionParams2.bottom = top4;
                                    }
                                    int i12 = transitionParams2.left;
                                    if (i12 == 0 || left < i12) {
                                        transitionParams2.left = left;
                                    }
                                    int i13 = transitionParams2.right;
                                    if (i13 == 0 || left2 > i13) {
                                        transitionParams2.right = left2;
                                    }
                                }
                            }
                        }
                    }
                    int i14 = 0;
                    while (i14 < this.drawingGroups.size()) {
                        MessageObject.GroupedMessages groupedMessages3 = this.drawingGroups.get(i14);
                        if (groupedMessages3 == currentMessagesGroup3) {
                            i2 = i14;
                        } else {
                            float nonAnimationTranslationX = groupedMessages3.transitionParams.cell.getNonAnimationTranslationX(true);
                            MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages3.transitionParams;
                            float f3 = transitionParams3.left + nonAnimationTranslationX + transitionParams3.offsetLeft;
                            float f4 = transitionParams3.top + transitionParams3.offsetTop;
                            float f5 = transitionParams3.right + nonAnimationTranslationX + transitionParams3.offsetRight;
                            float f6 = transitionParams3.bottom + transitionParams3.offsetBottom;
                            if (!transitionParams3.backgroundChangeBounds) {
                                f4 += transitionParams3.cell.getTranslationY();
                                f6 += groupedMessages3.transitionParams.cell.getTranslationY();
                            }
                            if (f4 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                f4 = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                            }
                            float f7 = f4;
                            if (f6 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                f6 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                            }
                            float f8 = f6;
                            boolean z3 = (groupedMessages3.transitionParams.cell.getScaleX() == 1.0f && groupedMessages3.transitionParams.cell.getScaleY() == 1.0f) ? false : true;
                            if (z3) {
                                canvas.save();
                                canvas2.scale(groupedMessages3.transitionParams.cell.getScaleX(), groupedMessages3.transitionParams.cell.getScaleY(), ((f5 - f3) / 2.0f) + f3, f7 + ((f8 - f7) / 2.0f));
                            }
                            int size = groupedMessages3.messages.size();
                            int i15 = 0;
                            while (true) {
                                if (i15 >= size) {
                                    z = true;
                                    break;
                                }
                                MessageObject messageObject = groupedMessages3.messages.get(i15);
                                if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                    z = false;
                                    break;
                                }
                                i15++;
                            }
                            MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages3.transitionParams;
                            i2 = i14;
                            transitionParams4.cell.drawBackground(canvas, (int) f3, (int) f7, (int) f5, (int) f8, transitionParams4.pinnedTop, transitionParams4.pinnedBotton, z, ChatActivity.this.contentView.getKeyboardHeight());
                            MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages3.transitionParams;
                            transitionParams5.cell = null;
                            transitionParams5.drawCaptionLayout = groupedMessages3.hasCaption;
                            if (z3) {
                                canvas.restore();
                                for (int i16 = 0; i16 < childCount; i16++) {
                                    View childAt4 = ChatActivity.this.chatListView.getChildAt(i16);
                                    if (childAt4 instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell5 = (ChatMessageCell) childAt4;
                                        if (chatMessageCell5.getCurrentMessagesGroup() == groupedMessages3) {
                                            int left3 = chatMessageCell5.getLeft();
                                            int top5 = chatMessageCell5.getTop();
                                            childAt4.setPivotX((f3 - left3) + ((f5 - f3) / 2.0f));
                                            childAt4.setPivotY((f7 - top5) + ((f8 - f7) / 2.0f));
                                        }
                                    }
                                }
                            }
                        }
                        i14 = i2 + 1;
                        canvas2 = canvas;
                    }
                }
                i7++;
                canvas2 = canvas;
                i = 2;
                f = 0.0f;
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:299:0x05b2  */
        /* JADX WARN: Removed duplicated region for block: B:37:0x00a4  */
        /* JADX WARN: Removed duplicated region for block: B:39:0x00ab  */
        /* JADX WARN: Removed duplicated region for block: B:47:0x00cc  */
        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean drawChild(Canvas canvas, View view, long j) {
            ChatMessageCell chatMessageCell;
            ChatActionCell chatActionCell;
            int i;
            int i2;
            boolean z;
            float f;
            boolean z2;
            int adapterPosition;
            int top;
            ChatMessageCell chatMessageCell2;
            int adapterPosition2;
            int i3;
            int i4;
            ChatMessageCell chatMessageCell3;
            if (ChatActivity.this.isSkeletonVisible()) {
                invalidate();
            }
            boolean z3 = view == ChatActivity.this.scrimView;
            z3 = (view.getY() > ((float) getMeasuredHeight()) || view.getY() + ((float) view.getMeasuredHeight()) < (ChatActivity.this.chatListViewPaddingTop - ((float) ChatActivity.this.chatListViewPaddingVisibleOffset)) - ((float) AndroidUtilities.dp(4.0f))) ? true : true;
            MessageObject.GroupedMessages groupedMessages = null;
            if (view instanceof ChatMessageCell) {
                chatMessageCell = (ChatMessageCell) view;
                if (ChatActivity.this.animateSendingViews.contains(chatMessageCell)) {
                    z3 = true;
                }
                MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentPosition != null) {
                    int i5 = currentPosition.pw;
                    int i6 = currentPosition.spanSize;
                    if (i5 != i6 && i6 == 1000 && currentPosition.siblingHeights == null && currentMessagesGroup.hasSibling) {
                        i4 = chatMessageCell.getBackgroundDrawableLeft();
                        i2 = 0;
                        if (chatMessageCell.needDelayRoundProgressDraw()) {
                        }
                        if (!z3) {
                            chatMessageCell3 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell3.getCurrentMessagesGroup() != null) {
                                z3 = true;
                            }
                        }
                        if (z3) {
                        }
                        int i7 = i4;
                        chatActionCell = null;
                        groupedMessages = currentMessagesGroup;
                        i = i7;
                    } else if (currentPosition.siblingHeights != null) {
                        i2 = view.getBottom() - AndroidUtilities.dp((chatMessageCell.isPinnedBottom() ? 1 : 0) + 1);
                        i4 = 0;
                        if (chatMessageCell.needDelayRoundProgressDraw()) {
                            ChatActivity.this.drawLaterRoundProgressCell = chatMessageCell;
                        }
                        if (!z3 && (ChatActivity.this.scrimView instanceof ChatMessageCell)) {
                            chatMessageCell3 = (ChatMessageCell) ChatActivity.this.scrimView;
                            if (chatMessageCell3.getCurrentMessagesGroup() != null && chatMessageCell3.getCurrentMessagesGroup() == currentMessagesGroup) {
                                z3 = true;
                            }
                        }
                        if (z3) {
                            chatMessageCell.getPhotoImage().skipDraw();
                        }
                        int i72 = i4;
                        chatActionCell = null;
                        groupedMessages = currentMessagesGroup;
                        i = i72;
                    }
                }
                i4 = 0;
                i2 = 0;
                if (chatMessageCell.needDelayRoundProgressDraw()) {
                }
                if (!z3) {
                }
                if (z3) {
                }
                int i722 = i4;
                chatActionCell = null;
                groupedMessages = currentMessagesGroup;
                i = i722;
            } else {
                if (view instanceof ChatActionCell) {
                    chatActionCell = (ChatActionCell) view;
                    chatMessageCell = null;
                } else {
                    chatMessageCell = null;
                    chatActionCell = null;
                }
                i = 0;
                i2 = 0;
            }
            if (i != 0) {
                canvas.save();
            } else if (i2 != 0) {
                canvas.save();
            }
            if (z3) {
                z = false;
            } else {
                boolean z4 = groupedMessages != null && groupedMessages.transitionParams.backgroundChangeBounds;
                if (z4) {
                    canvas.save();
                    float nonAnimationTranslationX = chatMessageCell.getNonAnimationTranslationX(true);
                    MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
                    canvas.clipRect(transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft + AndroidUtilities.dp(4.0f), transitionParams.top + transitionParams.offsetTop + AndroidUtilities.dp(4.0f), ((transitionParams.right + nonAnimationTranslationX) + transitionParams.offsetRight) - AndroidUtilities.dp(4.0f), (transitionParams.bottom + transitionParams.offsetBottom) - AndroidUtilities.dp(4.0f));
                }
                if (chatMessageCell != null && z4) {
                    z = super.drawChild(canvas, view, j);
                } else {
                    z = super.drawChild(canvas, view, j);
                }
                if (z4) {
                    canvas.restore();
                }
                if (chatMessageCell != null && chatMessageCell.hasOutboundsContent()) {
                    canvas.save();
                    canvas.translate(chatMessageCell.getX(), chatMessageCell.getY());
                    chatMessageCell.drawOutboundsContent(canvas);
                    canvas.restore();
                } else if (chatActionCell != null) {
                    canvas.save();
                    canvas.translate(chatActionCell.getX(), chatActionCell.getY());
                    chatActionCell.drawOutboundsContent(canvas);
                    canvas.restore();
                }
            }
            if (i != 0 || i2 != 0) {
                canvas.restore();
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, view.getTranslationY());
            }
            if (chatMessageCell != null) {
                chatMessageCell.drawCheckBox(canvas);
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.restore();
            }
            if (view.getTranslationY() != 0.0f) {
                canvas.save();
                canvas.translate(0.0f, view.getTranslationY());
            }
            if (chatMessageCell != null) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                MessageObject.GroupedMessagePosition currentPosition2 = chatMessageCell.getCurrentPosition();
                if (!z3) {
                    if (currentPosition2 != null || chatMessageCell.getTransitionParams().animateBackgroundBoundsInner) {
                        if (currentPosition2 == null || currentPosition2.last || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) {
                            if (currentPosition2 == null || currentPosition2.last) {
                                this.drawTimeAfter.add(chatMessageCell);
                            }
                            if ((currentPosition2 == null || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) && chatMessageCell.hasNameLayout()) {
                                this.drawNamesAfter.add(chatMessageCell);
                            }
                        }
                        if ((currentPosition2 != null || chatMessageCell.getTransitionParams().transformGroupToSingleMessage || chatMessageCell.getTransitionParams().animateBackgroundBoundsInner) && (currentPosition2 == null || (currentPosition2.flags & 8) != 0)) {
                            this.drawCaptionAfter.add(chatMessageCell);
                        }
                    }
                    if (ChatActivity.this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && !messageObject.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject))) {
                        ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                        float imageX = photoImage.getImageX() + chatMessageCell.getX();
                        float y = ((chatMessageCell.getY() + photoImage.getImageY()) + ChatActivity.this.chatListView.getY()) - ChatActivity.this.videoPlayerContainer.getTop();
                        if (ChatActivity.this.videoPlayerContainer.getTranslationX() != imageX || ChatActivity.this.videoPlayerContainer.getTranslationY() != y) {
                            ChatActivity.this.videoPlayerContainer.setTranslationX(imageX);
                            ChatActivity.this.videoPlayerContainer.setTranslationY(y);
                            ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                            ChatActivity.this.videoPlayerContainer.invalidate();
                        }
                    }
                }
                ImageReceiver avatarImage = chatMessageCell.getAvatarImage();
                if (avatarImage != null) {
                    MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                    if (!chatMessageCell.getMessageObject().deleted) {
                        boolean z5 = ChatActivity.this.chatListView.isFastScrollAnimationRunning() || (validGroupedMessage != null && validGroupedMessage.transitionParams.backgroundChangeBounds);
                        int top2 = z5 ? view.getTop() : (int) view.getY();
                        if (chatMessageCell.drawPinnedBottom()) {
                            if (chatMessageCell.willRemovedAfterAnimation()) {
                                adapterPosition2 = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                                if (adapterPosition2 >= 0) {
                                    adapterPosition2 = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(adapterPosition2);
                                }
                            } else {
                                adapterPosition2 = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                            }
                            if (adapterPosition2 >= 0) {
                                if (validGroupedMessage == null || currentPosition2 == null) {
                                    i3 = adapterPosition2 - 1;
                                } else {
                                    int indexOf = validGroupedMessage.posArray.indexOf(currentPosition2);
                                    int size = validGroupedMessage.posArray.size();
                                    if ((currentPosition2.flags & 8) != 0) {
                                        i3 = (adapterPosition2 - size) + indexOf;
                                    } else {
                                        i3 = adapterPosition2 - 1;
                                        for (int i8 = indexOf + 1; i8 < size && validGroupedMessage.posArray.get(i8).minY <= currentPosition2.maxY; i8++) {
                                            i3--;
                                        }
                                    }
                                }
                                if (chatMessageCell.willRemovedAfterAnimation()) {
                                    if (ChatActivity.this.chatScrollHelper.positionToOldView.get(i3) != null) {
                                        if (view.getTranslationY() != 0.0f) {
                                            canvas.restore();
                                        }
                                        avatarImage.setVisible(false, false);
                                        return z;
                                    }
                                } else if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i3) != null) {
                                    if (view.getTranslationY() != 0.0f) {
                                        canvas.restore();
                                    }
                                    avatarImage.setVisible(false, false);
                                    return z;
                                }
                            }
                        }
                        float slidingOffsetX = chatMessageCell.getSlidingOffsetX() + chatMessageCell.getCheckBoxTranslation();
                        int top3 = (int) ((z5 ? view.getTop() : view.getY()) + chatMessageCell.getLayoutHeight() + chatMessageCell.getTransitionParams().deltaBottom);
                        int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                        if (chatMessageCell.isPlayingRound() || chatMessageCell.getTransitionParams().animatePlayingRound) {
                            if (chatMessageCell.getTransitionParams().animatePlayingRound) {
                                float f2 = chatMessageCell.getTransitionParams().animateChangeProgress;
                                if (!chatMessageCell.isPlayingRound()) {
                                    f2 = 1.0f - f2;
                                }
                                top3 = (int) ((top3 * f2) + (Math.min(top3, measuredHeight) * (1.0f - f2)));
                            }
                        } else if (top3 > measuredHeight) {
                            top3 = measuredHeight;
                        }
                        if (!z5 && view.getTranslationY() != 0.0f) {
                            canvas.restore();
                        }
                        if (chatMessageCell.drawPinnedTop()) {
                            if (chatMessageCell.willRemovedAfterAnimation()) {
                                adapterPosition = ChatActivity.this.chatScrollHelper.positionToOldView.indexOfValue(view);
                                if (adapterPosition >= 0) {
                                    adapterPosition = ChatActivity.this.chatScrollHelper.positionToOldView.keyAt(adapterPosition);
                                }
                            } else {
                                adapterPosition = ChatActivity.this.chatListView.getChildViewHolder(view).getAdapterPosition();
                            }
                            if (adapterPosition >= 0) {
                                int i9 = adapterPosition;
                                int i10 = top2;
                                ChatMessageCell chatMessageCell4 = chatMessageCell;
                                int i11 = 0;
                                while (i11 < 20) {
                                    i11++;
                                    if (validGroupedMessage == null || currentPosition2 == null) {
                                        i9++;
                                    } else {
                                        int indexOf2 = validGroupedMessage.posArray.indexOf(currentPosition2);
                                        if (indexOf2 < 0) {
                                            break;
                                        }
                                        validGroupedMessage.posArray.size();
                                        if ((currentPosition2.flags & 4) != 0) {
                                            i9 = i9 + indexOf2 + 1;
                                        } else {
                                            i9++;
                                            for (int i12 = indexOf2 - 1; i12 >= 0 && validGroupedMessage.posArray.get(i12).maxY >= currentPosition2.minY; i12--) {
                                                i9++;
                                            }
                                        }
                                    }
                                    if (chatMessageCell4.willRemovedAfterAnimation()) {
                                        View view2 = ChatActivity.this.chatScrollHelper.positionToOldView.get(i9);
                                        if (view2 == null) {
                                            break;
                                        }
                                        top = view2.getTop();
                                        if (!(view2 instanceof ChatMessageCell)) {
                                            chatMessageCell = chatMessageCell4;
                                            top2 = top;
                                            break;
                                        }
                                        chatMessageCell2 = (ChatMessageCell) view2;
                                        if (!chatMessageCell2.drawPinnedTop()) {
                                            chatMessageCell = chatMessageCell2;
                                            top2 = top;
                                            break;
                                        }
                                        chatMessageCell4 = chatMessageCell2;
                                        i10 = top;
                                    } else {
                                        RecyclerView.ViewHolder findViewHolderForAdapterPosition = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(i9);
                                        if (findViewHolderForAdapterPosition == null) {
                                            break;
                                        }
                                        top = findViewHolderForAdapterPosition.itemView.getTop();
                                        View view3 = findViewHolderForAdapterPosition.itemView;
                                        if (!(view3 instanceof ChatMessageCell)) {
                                            chatMessageCell = chatMessageCell4;
                                            top2 = top;
                                            break;
                                        }
                                        chatMessageCell2 = (ChatMessageCell) view3;
                                        if (!chatMessageCell2.drawPinnedTop()) {
                                            chatMessageCell = chatMessageCell2;
                                            top2 = top;
                                            break;
                                        }
                                        chatMessageCell4 = chatMessageCell2;
                                        i10 = top;
                                    }
                                    if (view.getTranslationY() != f) {
                                        canvas.restore();
                                    }
                                    return z;
                                }
                                chatMessageCell = chatMessageCell4;
                                top2 = i10;
                            }
                        }
                        if (top3 - AndroidUtilities.dp(48.0f) < top2) {
                            top3 = top2 + AndroidUtilities.dp(48.0f);
                        }
                        if (!chatMessageCell.drawPinnedBottom()) {
                            int bottom = z5 ? chatMessageCell.getBottom() : (int) (chatMessageCell.getY() + chatMessageCell.getMeasuredHeight() + chatMessageCell.getTransitionParams().deltaBottom);
                            if (top3 > bottom) {
                                top3 = bottom;
                            }
                        }
                        canvas.save();
                        if (slidingOffsetX != 0.0f) {
                            canvas.translate(slidingOffsetX, 0.0f);
                        }
                        if (chatMessageCell.getCurrentMessagesGroup() != null && chatMessageCell.getCurrentMessagesGroup().transitionParams.backgroundChangeBounds) {
                            top3 = (int) (top3 - chatMessageCell.getTranslationY());
                        }
                        avatarImage.setImageY(top3 - AndroidUtilities.dp(44.0f));
                        if (chatMessageCell.shouldDrawAlphaLayer()) {
                            avatarImage.setAlpha(chatMessageCell.getAlpha());
                            z2 = true;
                            canvas.scale(chatMessageCell.getScaleX(), chatMessageCell.getScaleY(), chatMessageCell.getX() + chatMessageCell.getPivotX(), chatMessageCell.getY() + (chatMessageCell.getHeight() >> 1));
                        } else {
                            z2 = true;
                            avatarImage.setAlpha(1.0f);
                        }
                        avatarImage.setVisible(z2, false);
                        avatarImage.draw(canvas);
                        canvas.restore();
                        if (!z5) {
                            f = 0.0f;
                            if (view.getTranslationY() != 0.0f) {
                                canvas.save();
                            }
                            if (view.getTranslationY() != f) {
                            }
                            return z;
                        }
                    } else {
                        if (view.getTranslationY() != 0.0f) {
                            canvas.restore();
                        }
                        avatarImage.setVisible(false, false);
                        return z;
                    }
                }
            }
            f = 0.0f;
            if (view.getTranslationY() != f) {
            }
            return z;
        }

        @Override // android.view.View
        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
            AccessibilityNodeInfo.CollectionInfo collectionInfo;
            if (ChatActivity.this.currentEncryptedChat != null) {
                return;
            }
            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
            if (Build.VERSION.SDK_INT < 19 || (collectionInfo = accessibilityNodeInfo.getCollectionInfo()) == null) {
                return;
            }
            accessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo.obtain(collectionInfo.getRowCount(), 1, false));
        }

        @Override // android.view.View
        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return null;
            }
            return super.createAccessibilityNodeInfo();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            ChatActivity.this.chatListViewAttached = true;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            ChatActivity.this.chatListViewAttached = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 16 extends ChatListItemAnimator {
        Runnable finishRunnable;

        16(ChatActivity chatActivity, RecyclerListView recyclerListView, Theme.ResourcesProvider resourcesProvider) {
            super(chatActivity, recyclerListView, resourcesProvider);
        }

        @Override // androidx.recyclerview.widget.DefaultItemAnimator
        public void checkIsRunning() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator
        public void onAnimationStart() {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator disable notifications");
            }
            ChatActivity.this.chatActivityEnterView.getAdjustPanLayoutHelper().runDelayedAnimation();
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator
        protected void onAllAnimationsDone() {
            super.onAllAnimationsDone();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$16$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.16.this.lambda$onAllAnimationsDone$0();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAllAnimationsDone$0() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator, androidx.recyclerview.widget.RecyclerView.ItemAnimator
        public void endAnimations() {
            super.endAnimations();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$16$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.16.this.lambda$endAnimations$1();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$endAnimations$1() {
            this.finishRunnable = null;
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 17 extends GridLayoutManagerFixed {
        boolean computingScroll;

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public boolean supportsPredictiveItemAnimations() {
            return true;
        }

        17(Context context, int i, int i2, boolean z) {
            super(context, i, i2, z);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public int getStartForFixGap() {
            int i = (int) ChatActivity.this.chatListViewPaddingTop;
            if (ChatActivity.this.isThreadChat()) {
                ChatActivity chatActivity = ChatActivity.this;
                return ((chatActivity.isTopic && chatActivity.topicStarterMessageObject == null) || ChatActivity.this.pinnedMessageView == null || ChatActivity.this.pinnedMessageView.getVisibility() != 0) ? i : (int) (i - Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset));
            }
            return i;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        protected int getParentStart() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return 0;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getStartAfterPadding() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return super.getStartAfterPadding();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getTotalSpace() {
            if (this.computingScroll) {
                return (int) ((getHeight() - ChatActivity.this.chatListViewPaddingTop) - getPaddingBottom());
            }
            return super.getTotalSpace();
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollExtent(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollExtent = super.computeVerticalScrollExtent(state);
            this.computingScroll = false;
            return computeVerticalScrollExtent;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollOffset(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollOffset = super.computeVerticalScrollOffset(state);
            this.computingScroll = false;
            return computeVerticalScrollOffset;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollRange(RecyclerView.State state) {
            this.computingScroll = true;
            int computeVerticalScrollRange = super.computeVerticalScrollRange(state);
            this.computingScroll = false;
            return computeVerticalScrollRange;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int i, int i2, boolean z) {
            if (!z) {
                i2 = (int) ((i2 - getPaddingTop()) + ChatActivity.this.chatListViewPaddingTop);
            }
            super.scrollToPositionWithOffset(i, i2, z);
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int i) {
            ChatActivity.this.scrollByTouch = false;
            LinearSmoothScrollerCustom linearSmoothScrollerCustom = new LinearSmoothScrollerCustom(recyclerView.getContext(), 0);
            linearSmoothScrollerCustom.setTargetPosition(i);
            startSmoothScroll(linearSmoothScrollerCustom);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        public boolean shouldLayoutChildFromOpositeSide(View view) {
            if (view instanceof ChatMessageCell) {
                return !((ChatMessageCell) view).getMessageObject().isOutOwner();
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        protected boolean hasSiblingChild(int i) {
            int i2;
            byte b;
            if (i >= ChatActivity.this.chatAdapter.messagesStartRow && i < ChatActivity.this.chatAdapter.messagesEndRow && (i2 = i - ChatActivity.this.chatAdapter.messagesStartRow) >= 0 && i2 < ChatActivity.this.messages.size()) {
                MessageObject messageObject = ChatActivity.this.messages.get(i2);
                MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                if (validGroupedMessage != null) {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(messageObject);
                    if (groupedMessagePosition.minX != groupedMessagePosition.maxX && (b = groupedMessagePosition.minY) == groupedMessagePosition.maxY && b != 0) {
                        int size = validGroupedMessage.posArray.size();
                        for (int i3 = 0; i3 < size; i3++) {
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = validGroupedMessage.posArray.get(i3);
                            if (groupedMessagePosition2 != groupedMessagePosition) {
                                byte b2 = groupedMessagePosition2.minY;
                                byte b3 = groupedMessagePosition.minY;
                                if (b2 <= b3 && groupedMessagePosition2.maxY >= b3) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                super.onLayoutChildren(recycler, state);
                return;
            }
            try {
                super.onLayoutChildren(recycler, state);
            } catch (Exception e) {
                FileLog.e(e);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$17$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.17.this.lambda$onLayoutChildren$0();
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onLayoutChildren$0() {
            ChatActivity.this.chatAdapter.notifyDataSetChanged(false);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollVerticallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
            int i2;
            boolean z;
            float f;
            float f2;
            boolean z2 = false;
            if (i < 0 && ChatActivity.this.pullingDownOffset != 0.0f) {
                ChatActivity.access$13616(ChatActivity.this, i);
                if (ChatActivity.this.pullingDownOffset < 0.0f) {
                    i = (int) ChatActivity.this.pullingDownOffset;
                    ChatActivity.this.pullingDownOffset = 0.0f;
                    ChatActivity.this.chatListView.invalidate();
                } else {
                    i = 0;
                }
            }
            int childCount = ChatActivity.this.chatListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    i2 = 0;
                    z = false;
                    break;
                }
                View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                float f3 = ChatActivity.this.chatListViewPaddingTop;
                if (ChatActivity.this.isThreadChat()) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if ((!chatActivity.isTopic || chatActivity.topicStarterMessageObject != null) && ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getVisibility() == 0) {
                        f3 -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset);
                    }
                }
                if (ChatActivity.this.chatListView.getChildAdapterPosition(childAt) == ChatActivity.this.chatAdapter.getItemCount() - 1) {
                    i2 = super.scrollVerticallyBy(((float) (childAt.getTop() - i)) > f3 ? (int) (childAt.getTop() - f3) : i, recycler, state);
                    z = true;
                } else {
                    i3++;
                }
            }
            if (!z) {
                i2 = super.scrollVerticallyBy(i, recycler, state);
            }
            if (i > 0 && i2 == 0 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity2 = ChatActivity.this;
                if (!chatActivity2.currentChat.megagroup && chatActivity2.chatListView.getScrollState() == 1 && !ChatActivity.this.chatListView.isFastScrollAnimationRunning() && !ChatActivity.this.chatListView.isMultiselect() && ChatActivity.this.reportType < 0) {
                    if (ChatActivity.this.pullingDownOffset == 0.0f && ChatActivity.this.pullingDownDrawable != null) {
                        ChatActivity.this.pullingDownDrawable.updateDialog();
                    }
                    if (ChatActivity.this.pullingDownBackAnimator != null) {
                        ChatActivity.this.pullingDownBackAnimator.removeAllListeners();
                        ChatActivity.this.pullingDownBackAnimator.cancel();
                    }
                    float f4 = 0.05f;
                    if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(110.0f)) {
                        float dp = ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f);
                        f = (1.0f - dp) * 0.65f;
                        f2 = dp * 0.45f;
                    } else {
                        if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(160.0f)) {
                            float dp2 = (ChatActivity.this.pullingDownOffset - AndroidUtilities.dp(110.0f)) / AndroidUtilities.dp(50.0f);
                            f = (1.0f - dp2) * 0.45f;
                            f2 = dp2 * 0.05f;
                        }
                        float f5 = i * f4;
                        ChatActivity.access$13616(ChatActivity.this, f5);
                        ReactionsEffectOverlay.onScrolled((int) f5);
                        ChatActivity.this.chatListView.invalidate();
                    }
                    f4 = f + f2;
                    float f52 = i * f4;
                    ChatActivity.access$13616(ChatActivity.this, f52);
                    ReactionsEffectOverlay.onScrolled((int) f52);
                    ChatActivity.this.chatListView.invalidate();
                }
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f) {
                ChatActivity.this.chatListView.setOverScrollMode(0);
            } else {
                ChatActivity.this.chatListView.setOverScrollMode(2);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatPullingDownDrawable chatPullingDownDrawable = ChatActivity.this.pullingDownDrawable;
                if (ChatActivity.this.pullingDownOffset > 0.0f && ChatActivity.this.chatListView.getScrollState() == 1) {
                    z2 = true;
                }
                chatPullingDownDrawable.showBottomPanel(z2);
            }
            return i2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$24(View view) {
        if (this.floatingDateView.getAlpha() == 0.0f || this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(this.floatingDateView.getCustomDate() * 1000);
        int i = calendar.get(1);
        int i2 = calendar.get(2);
        int i3 = calendar.get(5);
        calendar.clear();
        calendar.set(i, i2, i3);
        jumpToDate((int) (calendar.getTime().getTime() / 1000));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$25(View view) {
        onPageDownClicked();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 22 implements View.OnClickListener {
        22() {
        }

        private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
                ChatActivity.this.getMessagesStorage().getUnreadMention(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i) {
                        ChatActivity.22.this.lambda$loadLastUnreadMention$0(i);
                    }
                });
                return;
            }
            final MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
            TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
            tLRPC$TL_messages_getUnreadMentions.peer = ChatActivity.this.getMessagesController().getInputPeer(ChatActivity.this.dialog_id);
            tLRPC$TL_messages_getUnreadMentions.limit = 1;
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.isTopic) {
                tLRPC$TL_messages_getUnreadMentions.top_msg_id = chatActivity.threadMessageId;
                tLRPC$TL_messages_getUnreadMentions.flags |= 1;
            }
            tLRPC$TL_messages_getUnreadMentions.add_offset = ChatActivity.this.newMentionsCount - 1;
            ChatActivity.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda2
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.22.this.lambda$loadLastUnreadMention$2(messagesStorage, tLObject, tLRPC$TL_error);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$0(int i) {
            if (i == 0) {
                ChatActivity.this.hasAllMentionsLocal = false;
                loadLastUnreadMention();
                return;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$2(final MessagesStorage messagesStorage, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$22$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.22.this.lambda$loadLastUnreadMention$1(tLObject, tLRPC$TL_error, messagesStorage);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadLastUnreadMention$1(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, MessagesStorage messagesStorage) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$TL_error != null || tLRPC$messages_Messages.messages.isEmpty()) {
                if (tLRPC$messages_Messages != null) {
                    ChatActivity.this.newMentionsCount = tLRPC$messages_Messages.count;
                } else {
                    ChatActivity.this.newMentionsCount = 0;
                }
                messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.getTopicId(), ChatActivity.this.newMentionsCount);
                if (ChatActivity.this.newMentionsCount == 0) {
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                    return;
                }
                ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                loadLastUnreadMention();
                return;
            }
            int i = tLRPC$messages_Messages.messages.get(0).id;
            MessageObject messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(i);
            messagesStorage.markMessageAsMention(ChatActivity.this.dialog_id, i);
            if (messageObject != null) {
                TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                tLRPC$Message.media_unread = true;
                tLRPC$Message.mentioned = true;
            }
            ChatActivity.this.scrollToMessageId(i, 0, false, 0, true, 0);
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            loadLastUnreadMention();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$28(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(1, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$26();
            }
        });
        dimBehindView((View) this.mentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda121
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$27();
            }
        });
        view.performHapticFeedback(0, 2);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$26() {
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = this.messages.get(i);
            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                messageObject.setContentIsRead();
            }
        }
        this.newMentionsCount = 0;
        getMessagesController().markMentionsAsRead(this.dialog_id, getTopicId());
        this.hasAllMentionsLocal = true;
        showMentionDownButton(false, true);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$27() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$29(ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate, View view, MotionEvent motionEvent) {
        ContentPreviewViewer contentPreviewViewer = ContentPreviewViewer.getInstance();
        MentionsContainerView.MentionsListView listView = this.mentionContainer.getListView();
        RecyclerListView.OnItemClickListener onItemClickListener = this.mentionsOnItemClickListener;
        if (!this.mentionContainer.getAdapter().isStickers()) {
            contentPreviewViewerDelegate = null;
        }
        return contentPreviewViewer.onTouch(motionEvent, listView, 0, onItemClickListener, contentPreviewViewerDelegate, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$33(View view, int i) {
        AnimatedEmojiSpan animatedEmojiSpan;
        char c;
        BlurredFrameLayout blurredFrameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        if (i == 0 || this.mentionContainer.getAdapter().isBannedInline()) {
            return;
        }
        int i2 = i - 1;
        final Object item = this.mentionContainer.getAdapter().getItem(i2);
        int resultStartPosition = this.mentionContainer.getAdapter().getResultStartPosition();
        int resultLength = this.mentionContainer.getAdapter().getResultLength();
        Paint.FontMetricsInt fontMetricsInt = null;
        if (item instanceof TLRPC$TL_document) {
            if (this.chatMode == 0 && checkSlowMode(view)) {
                return;
            }
            MessageObject.SendAnimationData sendAnimationData = view instanceof StickerCell ? ((StickerCell) view).getSendAnimationData() : null;
            final TLRPC$TL_document tLRPC$TL_document = (TLRPC$TL_document) item;
            final Object itemParent = this.mentionContainer.getAdapter().getItemParent(i2);
            final String findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(tLRPC$TL_document);
            if (this.chatMode == 1) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda275
                    @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z, int i3) {
                        ChatActivity.this.lambda$createView$30(tLRPC$TL_document, findAnimatedEmojiEmoticon, itemParent, z, i3);
                    }
                }, this.themeDelegate);
            } else {
                getSendMessagesHelper().sendSticker(tLRPC$TL_document, findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, sendAnimationData, true, 0, false, itemParent);
            }
            hideFieldPanel(false);
            this.chatActivityEnterView.addStickerToRecent(tLRPC$TL_document);
            this.chatActivityEnterView.setFieldText("");
        } else if (item instanceof TLRPC$Chat) {
            TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) item;
            if (this.searchingForUser && (blurredFrameLayout2 = this.searchContainer) != null && blurredFrameLayout2.getVisibility() == 0) {
                searchUserMessages(null, tLRPC$Chat);
                return;
            }
            String publicUsername = ChatObject.getPublicUsername(tLRPC$Chat);
            if (publicUsername != null) {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + publicUsername + " ", false);
            }
        } else if (item instanceof TLRPC$User) {
            TLRPC$User tLRPC$User = (TLRPC$User) item;
            if (this.searchingForUser && (blurredFrameLayout = this.searchContainer) != null && blurredFrameLayout.getVisibility() == 0) {
                searchUserMessages(tLRPC$User, null);
            } else if (UserObject.getPublicUsername(tLRPC$User) != null) {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, "@" + UserObject.getPublicUsername(tLRPC$User) + " ", false);
            } else {
                SpannableString spannableString = new SpannableString(UserObject.getFirstName(tLRPC$User, false) + " ");
                spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.id, 3), 0, spannableString.length(), 33);
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString, false);
            }
        } else if (item instanceof String) {
            if (this.mentionContainer.getAdapter().isBotCommands()) {
                if (this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda272
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i3) {
                            ChatActivity.this.lambda$createView$31(item, z, i3);
                        }
                    }, this.themeDelegate);
                    return;
                } else if (checkSlowMode(view)) {
                    return;
                } else {
                    getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of((String) item, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, true, 0, null, false));
                    this.chatActivityEnterView.setFieldText("");
                    hideFieldPanel(false);
                    return;
                }
            }
            this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, item + " ", false);
        } else if (item instanceof TLRPC$BotInlineResult) {
            if (this.chatActivityEnterView.getFieldText() != null) {
                if (this.chatMode == 1 || !checkSlowMode(view)) {
                    final TLRPC$BotInlineResult tLRPC$BotInlineResult = (TLRPC$BotInlineResult) item;
                    if (this.currentEncryptedChat != null) {
                        if ((tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaAuto) && "game".equals(tLRPC$BotInlineResult.type)) {
                            c = 1;
                        } else {
                            c = tLRPC$BotInlineResult.send_message instanceof TLRPC$TL_botInlineMessageMediaInvoice ? (char) 2 : (char) 0;
                        }
                        if (c != 0) {
                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder.setTitle(LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle));
                            if (c == 1) {
                                builder.setMessage(LocaleController.getString("GameCantSendSecretChat", R.string.GameCantSendSecretChat));
                            } else {
                                builder.setMessage(LocaleController.getString("InvoiceCantSendSecretChat", R.string.InvoiceCantSendSecretChat));
                            }
                            builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                            showDialog(builder.create());
                            return;
                        }
                    }
                    if ((tLRPC$BotInlineResult.type.equals("photo") && (tLRPC$BotInlineResult.photo != null || tLRPC$BotInlineResult.content != null)) || ((tLRPC$BotInlineResult.type.equals("gif") && (tLRPC$BotInlineResult.document != null || tLRPC$BotInlineResult.content != null)) || (tLRPC$BotInlineResult.type.equals(MediaStreamTrack.VIDEO_TRACK_KIND) && tLRPC$BotInlineResult.document != null))) {
                        ArrayList<Object> arrayList = new ArrayList<>(this.mentionContainer.getAdapter().getSearchResultBotContext());
                        this.botContextResults = arrayList;
                        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                        PhotoViewer.getInstance().openPhotoForSelect(arrayList, this.mentionContainer.getAdapter().getItemPosition(i2), 3, false, this.botContextProvider, this);
                    } else if (this.chatMode == 1) {
                        AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda274
                            @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                            public final void didSelectDate(boolean z, int i3) {
                                ChatActivity.this.lambda$createView$32(tLRPC$BotInlineResult, z, i3);
                            }
                        }, this.themeDelegate);
                    } else {
                        lambda$createView$32(tLRPC$BotInlineResult, true, 0);
                    }
                }
            }
        } else if (item instanceof TLRPC$TL_inlineBotWebView) {
            processInlineBotWebView((TLRPC$TL_inlineBotWebView) item);
        } else if (item instanceof TLRPC$TL_inlineBotSwitchPM) {
            processInlineBotContextPM((TLRPC$TL_inlineBotSwitchPM) item);
        } else if (item instanceof MediaDataController.KeywordResult) {
            String str = ((MediaDataController.KeywordResult) item).emoji;
            this.chatActivityEnterView.addEmojiToRecent(str);
            if (str != null && str.startsWith("animated_")) {
                try {
                    try {
                        fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                    } catch (Exception e) {
                        FileLog.e((Throwable) e, false);
                    }
                    long parseLong = Long.parseLong(str.substring(9));
                    TLRPC$Document findDocument = AnimatedEmojiDrawable.findDocument(this.currentAccount, parseLong);
                    SpannableString spannableString2 = new SpannableString(MessageObject.findAnimatedEmojiEmoticon(findDocument));
                    if (findDocument != null) {
                        animatedEmojiSpan = new AnimatedEmojiSpan(findDocument, fontMetricsInt);
                    } else {
                        animatedEmojiSpan = new AnimatedEmojiSpan(parseLong, fontMetricsInt);
                    }
                    spannableString2.setSpan(animatedEmojiSpan, 0, spannableString2.length(), 33);
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, spannableString2, false);
                } catch (Exception unused) {
                    this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
                }
            } else {
                this.chatActivityEnterView.replaceWithText(resultStartPosition, resultLength, str, true);
            }
            this.mentionContainer.updateVisibility(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$30(TLRPC$TL_document tLRPC$TL_document, String str, Object obj, boolean z, int i) {
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$TL_document, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, z, i, false, obj);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$31(Object obj, boolean z, int i) {
        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of((String) obj, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, z, i, null, false));
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$35(View view, int i) {
        boolean z = false;
        if (getParentActivity() != null && this.mentionContainer.getAdapter().isLongClickEnabled() && i != 0 && !this.mentionContainer.getAdapter().isBannedInline()) {
            Object item = this.mentionContainer.getAdapter().getItem(i - 1);
            if (item instanceof String) {
                if (this.mentionContainer.getAdapter().isBotCommands()) {
                    if (URLSpanBotCommand.enabled) {
                        this.chatActivityEnterView.setFieldText("");
                        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        String str = (String) item;
                        TLRPC$Chat tLRPC$Chat = this.currentChat;
                        if (tLRPC$Chat != null && tLRPC$Chat.megagroup) {
                            z = true;
                        }
                        chatActivityEnterView.setCommand(null, str, true, z);
                        return true;
                    }
                    return false;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda34
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i2) {
                        ChatActivity.this.lambda$createView$34(dialogInterface, i2);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder.create());
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$34(DialogInterface dialogInterface, int i) {
        this.mentionContainer.getAdapter().clearRecentHashtags();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$37(View view) {
        this.wasManualScroll = true;
        getMessagesController().getNextReactionMention(this.dialog_id, getTopicId(), this.reactionsMentionCount, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda123
            @Override // androidx.core.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.this.lambda$createView$36((Integer) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$36(Integer num) {
        if (num.intValue() == 0) {
            this.reactionsMentionCount = 0;
            updateReactionsMentionButton(true);
            getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
            return;
        }
        updateReactionsMentionButton(true);
        scrollToMessageId(num.intValue(), 0, false, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$40(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(0, getParentActivity(), getParentLayout(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda138
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createView$38();
            }
        });
        dimBehindView((View) this.reactionsMentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda122
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.lambda$createView$39();
            }
        });
        view.performHapticFeedback(0, 2);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$38() {
        for (int i = 0; i < this.messages.size(); i++) {
            this.messages.get(i).markReactionsAsRead();
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$39() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$41(View view, int i) {
        getMediaDataController().jumpToSearchedMessage(this.classGuid, i);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$42(View view, MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0) {
            checkRecordLocked(false);
        }
        this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 31 extends ChatActivityEnterView {
        int lastContentViewHeight;
        int messageEditTextPredrawHeigth;
        int messageEditTextPredrawScrollY;

        31(Activity activity, SizeNotifierFrameLayout sizeNotifierFrameLayout, ChatActivity chatActivity, boolean z, Theme.ResourcesProvider resourcesProvider) {
            super(activity, sizeNotifierFrameLayout, chatActivity, z, resourcesProvider);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onInterceptTouchEvent(motionEvent);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.dispatchTouchEvent(motionEvent);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected boolean pannelAnimationEnabled() {
            return ChatActivity.this.openAnimationEnded;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        public void checkAnimation() {
            View view;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                this.shouldAnimateEditTextWithBounds = false;
                return;
            }
            int backgroundTop = getBackgroundTop();
            if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0 && backgroundTop != ChatActivity.this.chatActivityEnterViewAnimateFromTop && this.lastContentViewHeight == ChatActivity.this.contentView.getMeasuredHeight()) {
                int i = (this.animatedTop + ChatActivity.this.chatActivityEnterViewAnimateFromTop) - backgroundTop;
                this.animatedTop = i;
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.removeAllListeners();
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                float f = i;
                ChatActivity.this.chatListView.setTranslationY(f);
                View view2 = this.topView;
                if (view2 != null && view2.getVisibility() == 0) {
                    this.topView.setTranslationY(this.animatedTop + ((1.0f - this.topViewEnterProgress) * view.getLayoutParams().height));
                    View view3 = this.topLineView;
                    if (view3 != null) {
                        view3.setTranslationY(this.animatedTop);
                    }
                }
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(f);
                }
                ChatActivity.this.changeBoundAnimator = ValueAnimator.ofFloat(f, 0.0f);
                ChatActivity.this.changeBoundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$31$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.31.this.lambda$checkAnimation$0(valueAnimator);
                    }
                });
                ChatActivity.this.changeBoundAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.31.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ((ChatActivityEnterView) 31.this).animatedTop = 0;
                        if (((ChatActivityEnterView) 31.this).topView == null || ((ChatActivityEnterView) 31.this).topView.getVisibility() != 0) {
                            ChatActivity.this.chatListView.setTranslationY(0.0f);
                            MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                            if (mentionsContainerView2 != null) {
                                mentionsContainerView2.setTranslationY(0.0f);
                            }
                        } else {
                            ((ChatActivityEnterView) 31.this).topView.setTranslationY(((ChatActivityEnterView) 31.this).animatedTop + ((1.0f - ((ChatActivityEnterView) 31.this).topViewEnterProgress) * ((ChatActivityEnterView) 31.this).topView.getLayoutParams().height));
                            if (((ChatActivityEnterView) 31.this).topLineView != null) {
                                ((ChatActivityEnterView) 31.this).topLineView.setTranslationY(((ChatActivityEnterView) 31.this).animatedTop);
                            }
                        }
                        ChatActivity.this.changeBoundAnimator = null;
                    }
                });
                ChatActivity.this.changeBoundAnimator.setDuration(250L);
                ChatActivity.this.changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                if (!ChatActivity.this.waitingForSendingMessageLoad) {
                    ChatActivity.this.changeBoundAnimator.start();
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            } else if (this.lastContentViewHeight != ChatActivity.this.contentView.getMeasuredHeight()) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            }
            if (this.shouldAnimateEditTextWithBounds) {
                EditTextCaption editTextCaption = this.messageEditText;
                editTextCaption.setOffsetY(editTextCaption.getOffsetY() - ((this.messageEditTextPredrawHeigth - this.messageEditText.getMeasuredHeight()) + (this.messageEditTextPredrawScrollY - this.messageEditText.getScrollY())));
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.messageEditText.getOffsetY(), 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$31$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.31.this.lambda$checkAnimation$1(valueAnimator);
                    }
                });
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                ChatActivity.this.messageEditTextAnimator = ofFloat;
                ofFloat.setDuration(250L);
                ofFloat.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                ofFloat.start();
                this.shouldAnimateEditTextWithBounds = false;
            }
            this.lastContentViewHeight = ChatActivity.this.contentView.getMeasuredHeight();
            ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$0(ValueAnimator valueAnimator) {
            float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            this.animatedTop = (int) floatValue;
            View view = this.topView;
            if (view != null && view.getVisibility() == 0) {
                View view2 = this.topView;
                view2.setTranslationY(((1.0f - this.topViewEnterProgress) * view2.getLayoutParams().height) + floatValue);
                View view3 = this.topLineView;
                if (view3 != null) {
                    view3.setTranslationY(floatValue);
                }
            } else {
                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                if (mentionsContainerView != null) {
                    mentionsContainerView.setTranslationY(floatValue);
                }
                ChatActivity.this.chatListView.setTranslationY(floatValue);
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            invalidate();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$checkAnimation$1(ValueAnimator valueAnimator) {
            this.messageEditText.setOffsetY(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected void onLineCountChanged(int i, int i2) {
            if (ChatActivity.this.chatActivityEnterView != null) {
                this.shouldAnimateEditTextWithBounds = true;
                this.messageEditTextPredrawHeigth = this.messageEditText.getMeasuredHeight();
                this.messageEditTextPredrawScrollY = this.messageEditText.getScrollY();
                ChatActivity.this.contentView.invalidate();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$44(View view) {
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams != null && !forwardingMessagesParams.messages.isEmpty()) {
            SharedConfig.forwardingOptionsHintHintShowed();
            openForwardingPreview();
        } else if (this.replyingMessageObject != null && (!isThreadChat() || this.replyingMessageObject.getId() != this.threadMessageId)) {
            scrollToMessageId(this.replyingMessageObject.getId(), 0, true, 0, true, 0);
        } else {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject != null) {
                if (messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
                    if (this.chatAttachAlert == null) {
                        createChatAttachView();
                    }
                    this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
                    openAttachMenu();
                    return;
                }
                scrollToMessageId(this.editingMessageObject.getId(), 0, true, 0, true, 0);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$45(View view) {
        MessageObject messageObject;
        int topicId;
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || forwardingMessagesParams.messages.isEmpty()) {
            if (ChatObject.isForum(this.currentChat) && !this.isTopic && (messageObject = this.replyingMessageObject) != null && (topicId = MessageObject.getTopicId(messageObject.messageOwner, true)) != 0) {
                getMediaDataController().cleanDraft(this.dialog_id, topicId, false);
            }
            showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
            return;
        }
        openAnotherForward();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$46(View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null) {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$47(ChatActivityEnterTopView.EditViewButton editViewButton, FrameLayout frameLayout, View view) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (editViewButton.isEditButton()) {
                openEditingMessageInPhotoEditor();
            } else {
                frameLayout.callOnClick();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$48(View view) {
        this.bottomOverlayChatText.callOnClick();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$54(final Context context, View view) {
        String str;
        if (getParentActivity() == null || this.pullingDownOffset != 0.0f) {
            return;
        }
        if (this.reportType >= 0) {
            showDialog(new ReportAlert(getParentActivity(), this.reportType, getResourceProvider()) { // from class: org.telegram.ui.ChatActivity.39
                @Override // org.telegram.ui.Components.ReportAlert
                protected void onSend(int i, String str2) {
                    ArrayList arrayList = new ArrayList();
                    for (int i2 = 0; i2 < ChatActivity.this.selectedMessagesIds[0].size(); i2++) {
                        arrayList.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[0].keyAt(i2)));
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC$User tLRPC$User = chatActivity.currentUser;
                    AlertsCreator.sendReport(tLRPC$User != null ? MessagesController.getInputPeer(tLRPC$User) : MessagesController.getInputPeer(chatActivity.currentChat), ChatActivity.this.reportType, str2, arrayList, 0);
                    ChatActivity.this.finishFragment();
                    ChatActivity.this.chatActivityDelegate.onReport();
                }
            });
            return;
        }
        if (this.chatMode == 2) {
            finishFragment();
            this.chatActivityDelegate.onUnpin(true, this.bottomOverlayChatText.getTag() == null);
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && this.userBlocked) {
            if (tLRPC$User.bot) {
                final String str2 = this.botUser;
                this.botUser = null;
                getMessagesController().unblockPeer(this.currentUser.id, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda199
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$createView$49(str2);
                    }
                });
                return;
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda30
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$createView$50(dialogInterface, i);
                }
            });
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (UserObject.isReplyUser(tLRPC$User)) {
            toggleMute(true);
        } else {
            TLRPC$User tLRPC$User2 = this.currentUser;
            if (tLRPC$User2 != null && tLRPC$User2.bot && (str = this.botUser) != null) {
                if (str.length() != 0) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                } else {
                    getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
                }
                this.botUser = null;
                updateBottomOverlay();
                return;
            }
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (!(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
                    if (ChatObject.isNotInChat(tLRPC$Chat)) {
                        if (this.currentChat.join_request) {
                            showBottomOverlayProgress(true, true);
                            MessagesController.getInstance(this.currentAccount).addUserToChat(this.currentChat.id, UserConfig.getInstance(this.currentAccount).getCurrentUser(), 0, null, null, true, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda136
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$createView$51();
                                }
                            }, new MessagesController.ErrorDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda245
                                @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                                public final boolean run(TLRPC$TL_error tLRPC$TL_error) {
                                    boolean lambda$createView$52;
                                    lambda$createView$52 = ChatActivity.this.lambda$createView$52(context, tLRPC$TL_error);
                                    return lambda$createView$52;
                                }
                            });
                            return;
                        }
                        Runnable runnable = this.chatInviteRunnable;
                        if (runnable != null) {
                            AndroidUtilities.cancelRunOnUIThread(runnable);
                            this.chatInviteRunnable = null;
                        }
                        showBottomOverlayProgress(true, true);
                        getMessagesController().addUserToChat(this.currentChat.id, getUserConfig().getCurrentUser(), 0, null, this, null);
                        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                        if (!hasReportSpam() || this.reportSpamButton.getTag(R.id.object_tag) == null) {
                            return;
                        }
                        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                        edit.putInt("dialog_bar_vis3" + this.dialog_id, 3).commit();
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(this.dialog_id));
                        return;
                    }
                    toggleMute(true);
                    return;
                }
            }
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            AlertsCreator.createClearOrDeleteDialogAlert(this, false, this.currentChat, this.currentUser, this.currentEncryptedChat != null, true, tLRPC$ChatFull != null && tLRPC$ChatFull.can_delete_channel, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda246
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z) {
                    ChatActivity.this.lambda$createView$53(z);
                }
            }, this.themeDelegate);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$49(String str) {
        if (str != null && str.length() != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
        } else {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null, false));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$50(DialogInterface dialogInterface, int i) {
        getMessagesController().unblockPeer(this.currentUser.id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$51() {
        showBottomOverlayProgress(false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$52(Context context, TLRPC$TL_error tLRPC$TL_error) {
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putLong("dialog_join_requested_time_" + this.dialog_id, System.currentTimeMillis()).commit();
        if (tLRPC$TL_error != null && "INVITE_REQUEST_SENT".equals(tLRPC$TL_error.text)) {
            JoinGroupAlert.showBulletin(context, this, ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup);
        }
        showBottomOverlayProgress(false, true);
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$53(boolean z) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.closeChats;
        notificationCenter.removeObserver(this, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i, new Object[0]);
        finishFragment();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needDeleteDialog, Long.valueOf(this.dialog_id), this.currentUser, this.currentChat, Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$55(View view) {
        createUndoView();
        this.undoView.showWithAction(this.dialog_id, 18, LocaleController.getString("BroadcastGroupInfo", R.string.BroadcastGroupInfo));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createView$56() {
        return this.currentEncryptedChat != null || getMessagesController().isChatNoForwards(this.currentChat);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createView$57(float[] fArr) {
        fArr[1] = this.chatListView.getBottom() - this.blurredViewBottomOffset;
        fArr[0] = (this.chatListView.getTop() + this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
    }

    private void createBottomMessagesActionButtons() {
        if (this.replyButton != null || getContext() == null) {
            return;
        }
        TextView textView = new TextView(getContext());
        this.replyButton = textView;
        textView.setText(LocaleController.getString("Reply", R.string.Reply));
        this.replyButton.setGravity(16);
        this.replyButton.setTextSize(1, 15.0f);
        this.replyButton.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(21.0f), 0);
        TextView textView2 = this.replyButton;
        int i = Theme.key_actionBarActionModeDefaultSelector;
        textView2.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i), 3));
        TextView textView3 = this.replyButton;
        int i2 = Theme.key_actionBarActionModeDefaultIcon;
        textView3.setTextColor(getThemedColor(i2));
        this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0f));
        this.replyButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        Drawable mutate = getContext().getResources().getDrawable(R.drawable.input_reply).mutate();
        mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(i2), PorterDuff.Mode.MULTIPLY));
        this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate, (Drawable) null, (Drawable) null, (Drawable) null);
        this.replyButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda76
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createBottomMessagesActionButtons$58(view);
            }
        });
        this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
        TextView textView4 = new TextView(getContext());
        this.forwardButton = textView4;
        textView4.setText(LocaleController.getString("Forward", R.string.Forward));
        this.forwardButton.setGravity(16);
        this.forwardButton.setTextSize(1, 15.0f);
        this.forwardButton.setPadding(AndroidUtilities.dp(21.0f), 0, AndroidUtilities.dp(21.0f), 0);
        this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0f));
        this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i), 3));
        this.forwardButton.setTextColor(getThemedColor(i2));
        this.forwardButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        Drawable mutate2 = getContext().getResources().getDrawable(R.drawable.input_forward).mutate();
        mutate2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i2), PorterDuff.Mode.MULTIPLY));
        this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate2, (Drawable) null, (Drawable) null, (Drawable) null);
        this.forwardButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda62
            @Override // android.view.View.OnClickListener
            public final void onClick(View view) {
                ChatActivity.this.lambda$createBottomMessagesActionButtons$59(view);
            }
        });
        this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$58(View view) {
        int i;
        MessageObject messageObject = null;
        for (int i2 = 1; i2 >= 0; i2--) {
            if (messageObject == null && this.selectedMessagesIds[i2].size() != 0) {
                messageObject = this.messagesDict[i2].get(this.selectedMessagesIds[i2].keyAt(0));
            }
            this.selectedMessagesIds[i2].clear();
            this.selectedMessagesCanCopyIds[i2].clear();
            this.selectedMessagesCanStarIds[i2].clear();
        }
        hideActionMode();
        if (messageObject != null && ((i = messageObject.messageOwner.id) > 0 || (i < 0 && this.currentEncryptedChat != null))) {
            showFieldPanelForReply(messageObject);
        }
        updatePinnedMessageView(true);
        updateVisibleRows();
        updateSelectedMessageReactions();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createBottomMessagesActionButtons$59(View view) {
        openForward(false);
    }

    private void checkInstantSearch() {
        TLRPC$Chat chat;
        long j = getArguments().getInt("search_from_user_id", 0);
        if (j != 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
            if (user != null) {
                openSearchWithText("");
                ImageView imageView = this.searchUserButton;
                if (imageView != null) {
                    imageView.callOnClick();
                }
                searchUserMessages(user, null);
                return;
            }
            return;
        }
        long j2 = getArguments().getInt("search_from_chat_id", 0);
        if (j2 == 0 || (chat = getMessagesController().getChat(Long.valueOf(j2))) == null) {
            return;
        }
        openSearchWithText("");
        ImageView imageView2 = this.searchUserButton;
        if (imageView2 != null) {
            imageView2.callOnClick();
        }
        searchUserMessages(null, chat);
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x00af  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0232  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x02b7  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0303  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createTopPanel() {
        int i;
        int i2;
        if (this.topChatPanelView != null || getContext() == null) {
            return;
        }
        BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(getContext(), this.contentView) { // from class: org.telegram.ui.ChatActivity.44
            private boolean ignoreLayout;

            @Override // android.widget.FrameLayout, android.view.View
            protected void onMeasure(int i3, int i4) {
                int size = View.MeasureSpec.getSize(i3);
                if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0 && ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                    size = (size - AndroidUtilities.dp(31.0f)) / 2;
                }
                this.ignoreLayout = true;
                if (ChatActivity.this.reportSpamButton != null && ChatActivity.this.reportSpamButton.getVisibility() == 0) {
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.reportSpamButton.getLayoutParams();
                    layoutParams.width = size;
                    if (ChatActivity.this.addToContactsButton == null || ChatActivity.this.addToContactsButton.getVisibility() != 0) {
                        ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                        layoutParams.leftMargin = 0;
                    } else {
                        ChatActivity.this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                        layoutParams.leftMargin = size;
                        layoutParams.width -= AndroidUtilities.dp(15.0f);
                    }
                }
                if (ChatActivity.this.addToContactsButton != null && ChatActivity.this.addToContactsButton.getVisibility() == 0) {
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) ChatActivity.this.addToContactsButton.getLayoutParams();
                    layoutParams2.width = size;
                    if (ChatActivity.this.reportSpamButton == null || ChatActivity.this.reportSpamButton.getVisibility() != 0) {
                        ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(48.0f), 0, AndroidUtilities.dp(48.0f), 0);
                        layoutParams2.leftMargin = 0;
                    } else {
                        ChatActivity.this.addToContactsButton.setPadding(AndroidUtilities.dp(11.0f), 0, AndroidUtilities.dp(4.0f), 0);
                    }
                }
                this.ignoreLayout = false;
                super.onMeasure(i3, i4);
            }

            @Override // android.view.View, android.view.ViewParent
            public void requestLayout() {
                if (this.ignoreLayout) {
                    return;
                }
                super.requestLayout();
            }
        };
        this.topChatPanelView = blurredFrameLayout;
        int i3 = Theme.key_chat_topPanelBackground;
        blurredFrameLayout.backgroundColor = getThemedColor(i3);
        this.topChatPanelView.backgroundPaddingBottom = AndroidUtilities.dp(2.0f);
        this.topChatPanelView.setTag(1);
        this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
        invalidateChatListViewTopPadding();
        this.topChatPanelView.setClickable(true);
        this.topChatPanelView.setVisibility(8);
        this.topChatPanelView.setBackgroundResource(R.drawable.blockpanel);
        this.topChatPanelView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(i3), PorterDuff.Mode.MULTIPLY));
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            ViewParent parent = blurredFrameLayout2.getParent();
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (parent == chatActivityFragmentView) {
                i = chatActivityFragmentView.indexOfChild(this.pinnedMessageView) + 1;
                this.contentView.addView(this.topChatPanelView, i, LayoutHelper.createFrame(-1, 50, 51));
                TextView textView = new TextView(getContext());
                this.reportSpamButton = textView;
                int i4 = Theme.key_text_RedBold;
                textView.setTextColor(getThemedColor(i4));
                i2 = Build.VERSION.SDK_INT;
                if (i2 >= 21) {
                    this.reportSpamButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i4) & 436207615, 3));
                }
                this.reportSpamButton.setTag(Integer.valueOf(i4));
                this.reportSpamButton.setTextSize(1, 14.0f);
                this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.reportSpamButton.setSingleLine(true);
                this.reportSpamButton.setMaxLines(1);
                this.reportSpamButton.setGravity(17);
                this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.reportSpamButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda80
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.this.lambda$createTopPanel$61(view);
                    }
                });
                LinkSpanDrawable.LinksTextView linksTextView = new LinkSpanDrawable.LinksTextView(getContext(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.45
                    PorterDuffColorFilter colorFilter;
                    int lastColor;
                    Layout lastLayout;
                    AnimatedEmojiSpan.EmojiGroupedSpans stack;

                    @Override // android.view.View
                    protected void onDetachedFromWindow() {
                        super.onDetachedFromWindow();
                        AnimatedEmojiSpan.release(this, this.stack);
                        this.lastLayout = null;
                    }

                    @Override // android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (this.lastLayout != getLayout()) {
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.stack;
                            Layout layout = getLayout();
                            this.lastLayout = layout;
                            this.stack = AnimatedEmojiSpan.update(7, this, emojiGroupedSpans, layout);
                        }
                        int themedColor = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon);
                        if (this.lastColor != themedColor || this.colorFilter == null) {
                            this.colorFilter = new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY);
                            this.lastColor = themedColor;
                        }
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.stack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, this.colorFilter);
                    }
                };
                this.emojiStatusSpamHint = linksTextView;
                linksTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
                this.emojiStatusSpamHint.setTextSize(1, 13.3f);
                this.emojiStatusSpamHint.setGravity(17);
                this.emojiStatusSpamHint.setVisibility(8);
                this.emojiStatusSpamHint.setLinkTextColor(getThemedColor(Theme.key_windowBackgroundWhiteLinkText));
                this.topChatPanelView.addView(this.emojiStatusSpamHint, LayoutHelper.createFrame(-1, -2.0f, 51, 25.0f, 0.0f, 25.0f, 1.0f));
                View view = new View(getContext());
                this.topViewSeparator1 = view;
                view.setVisibility(8);
                View view2 = this.topViewSeparator1;
                int i5 = Theme.key_divider;
                view2.setBackgroundColor(getThemedColor(i5));
                this.topViewSeparator1.setAlpha(0.5f);
                this.topChatPanelView.addView(this.topViewSeparator1, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 2.0f));
                View view3 = new View(getContext());
                this.topViewSeparator2 = view3;
                view3.setVisibility(8);
                this.topViewSeparator2.setBackgroundColor(getThemedColor(i5));
                this.topChatPanelView.addView(this.topViewSeparator2, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 51, 10.0f, 48.0f, 10.0f, 1.0f));
                View view4 = new View(getContext());
                this.topViewSeparator3 = view4;
                view4.setVisibility(8);
                this.topViewSeparator3.setBackgroundColor(getThemedColor(i5));
                this.topChatPanelView.addView(this.topViewSeparator3, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                TextView textView2 = new TextView(getContext());
                this.addToContactsButton = textView2;
                int i6 = Theme.key_chat_addContact;
                textView2.setTextColor(getThemedColor(i6));
                this.addToContactsButton.setVisibility(8);
                this.addToContactsButton.setTextSize(1, 14.0f);
                this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.addToContactsButton.setSingleLine(true);
                this.addToContactsButton.setMaxLines(1);
                this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                this.addToContactsButton.setGravity(17);
                if (i2 >= 21) {
                    this.addToContactsButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i6) & 436207615, 3));
                }
                this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.addToContactsButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda81
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$64(view5);
                    }
                });
                TextView textView3 = new TextView(getContext());
                this.restartTopicButton = textView3;
                textView3.setTextColor(getThemedColor(i6));
                this.restartTopicButton.setVisibility(8);
                this.restartTopicButton.setTextSize(1, 14.0f);
                this.restartTopicButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.restartTopicButton.setSingleLine(true);
                this.restartTopicButton.setMaxLines(1);
                this.restartTopicButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                this.restartTopicButton.setGravity(17);
                this.restartTopicButton.setText(LocaleController.getString("RestartTopic", R.string.RestartTopic).toUpperCase());
                if (i2 >= 21) {
                    this.restartTopicButton.setBackground(Theme.createSelectorDrawable(getThemedColor(i6) & 436207615, 3));
                }
                this.topChatPanelView.addView(this.restartTopicButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
                this.restartTopicButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda71
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$65(view5);
                    }
                });
                ImageView imageView = new ImageView(getContext());
                this.closeReportSpam = imageView;
                imageView.setImageResource(R.drawable.miniplayer_close);
                this.closeReportSpam.setContentDescription(LocaleController.getString("Close", R.string.Close));
                if (i2 >= 21) {
                    this.closeReportSpam.setBackground(Theme.AdaptiveRipple.circle(getThemedColor(Theme.key_chat_topPanelClose)));
                }
                this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.MULTIPLY));
                this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
                this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 36.0f, 53, 0.0f, 6.0f, 2.0f, 0.0f));
                this.closeReportSpam.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda61
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view5) {
                        ChatActivity.this.lambda$createTopPanel$66(view5);
                    }
                });
            }
        }
        i = 8;
        this.contentView.addView(this.topChatPanelView, i, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView4 = new TextView(getContext());
        this.reportSpamButton = textView4;
        int i42 = Theme.key_text_RedBold;
        textView4.setTextColor(getThemedColor(i42));
        i2 = Build.VERSION.SDK_INT;
        if (i2 >= 21) {
        }
        this.reportSpamButton.setTag(Integer.valueOf(i42));
        this.reportSpamButton.setTextSize(1, 14.0f);
        this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.reportSpamButton.setSingleLine(true);
        this.reportSpamButton.setMaxLines(1);
        this.reportSpamButton.setGravity(17);
        this.topChatPanelView.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.reportSpamButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda80
            @Override // android.view.View.OnClickListener
            public final void onClick(View view5) {
                ChatActivity.this.lambda$createTopPanel$61(view5);
            }
        });
        LinkSpanDrawable.LinksTextView linksTextView2 = new LinkSpanDrawable.LinksTextView(getContext(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.45
            PorterDuffColorFilter colorFilter;
            int lastColor;
            Layout lastLayout;
            AnimatedEmojiSpan.EmojiGroupedSpans stack;

            @Override // android.view.View
            protected void onDetachedFromWindow() {
                super.onDetachedFromWindow();
                AnimatedEmojiSpan.release(this, this.stack);
                this.lastLayout = null;
            }

            @Override // android.view.View
            protected void dispatchDraw(Canvas canvas) {
                super.dispatchDraw(canvas);
                if (this.lastLayout != getLayout()) {
                    AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.stack;
                    Layout layout = getLayout();
                    this.lastLayout = layout;
                    this.stack = AnimatedEmojiSpan.update(7, this, emojiGroupedSpans, layout);
                }
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhiteBlueIcon);
                if (this.lastColor != themedColor || this.colorFilter == null) {
                    this.colorFilter = new PorterDuffColorFilter(themedColor, PorterDuff.Mode.MULTIPLY);
                    this.lastColor = themedColor;
                }
                AnimatedEmojiSpan.drawAnimatedEmojis(canvas, getLayout(), this.stack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, this.colorFilter);
            }
        };
        this.emojiStatusSpamHint = linksTextView2;
        linksTextView2.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
        this.emojiStatusSpamHint.setTextSize(1, 13.3f);
        this.emojiStatusSpamHint.setGravity(17);
        this.emojiStatusSpamHint.setVisibility(8);
        this.emojiStatusSpamHint.setLinkTextColor(getThemedColor(Theme.key_windowBackgroundWhiteLinkText));
        this.topChatPanelView.addView(this.emojiStatusSpamHint, LayoutHelper.createFrame(-1, -2.0f, 51, 25.0f, 0.0f, 25.0f, 1.0f));
        View view5 = new View(getContext());
        this.topViewSeparator1 = view5;
        view5.setVisibility(8);
        View view22 = this.topViewSeparator1;
        int i52 = Theme.key_divider;
        view22.setBackgroundColor(getThemedColor(i52));
        this.topViewSeparator1.setAlpha(0.5f);
        this.topChatPanelView.addView(this.topViewSeparator1, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 2.0f));
        View view32 = new View(getContext());
        this.topViewSeparator2 = view32;
        view32.setVisibility(8);
        this.topViewSeparator2.setBackgroundColor(getThemedColor(i52));
        this.topChatPanelView.addView(this.topViewSeparator2, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 51, 10.0f, 48.0f, 10.0f, 1.0f));
        View view42 = new View(getContext());
        this.topViewSeparator3 = view42;
        view42.setVisibility(8);
        this.topViewSeparator3.setBackgroundColor(getThemedColor(i52));
        this.topChatPanelView.addView(this.topViewSeparator3, LayoutHelper.createFrame(-1, 1.0f / AndroidUtilities.density, 83, 0.0f, 0.0f, 0.0f, 38.0f));
        TextView textView22 = new TextView(getContext());
        this.addToContactsButton = textView22;
        int i62 = Theme.key_chat_addContact;
        textView22.setTextColor(getThemedColor(i62));
        this.addToContactsButton.setVisibility(8);
        this.addToContactsButton.setTextSize(1, 14.0f);
        this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.addToContactsButton.setSingleLine(true);
        this.addToContactsButton.setMaxLines(1);
        this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        this.addToContactsButton.setGravity(17);
        if (i2 >= 21) {
        }
        this.topChatPanelView.addView(this.addToContactsButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.addToContactsButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda81
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$64(view52);
            }
        });
        TextView textView32 = new TextView(getContext());
        this.restartTopicButton = textView32;
        textView32.setTextColor(getThemedColor(i62));
        this.restartTopicButton.setVisibility(8);
        this.restartTopicButton.setTextSize(1, 14.0f);
        this.restartTopicButton.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.restartTopicButton.setSingleLine(true);
        this.restartTopicButton.setMaxLines(1);
        this.restartTopicButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        this.restartTopicButton.setGravity(17);
        this.restartTopicButton.setText(LocaleController.getString("RestartTopic", R.string.RestartTopic).toUpperCase());
        if (i2 >= 21) {
        }
        this.topChatPanelView.addView(this.restartTopicButton, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 1.0f));
        this.restartTopicButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda71
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$65(view52);
            }
        });
        ImageView imageView2 = new ImageView(getContext());
        this.closeReportSpam = imageView2;
        imageView2.setImageResource(R.drawable.miniplayer_close);
        this.closeReportSpam.setContentDescription(LocaleController.getString("Close", R.string.Close));
        if (i2 >= 21) {
        }
        this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.MULTIPLY));
        this.closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
        this.topChatPanelView.addView(this.closeReportSpam, LayoutHelper.createFrame(36, 36.0f, 53, 0.0f, 6.0f, 2.0f, 0.0f));
        this.closeReportSpam.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda61
            @Override // android.view.View.OnClickListener
            public final void onClick(View view52) {
                ChatActivity.this.lambda$createTopPanel$66(view52);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$61(View view) {
        AlertsCreator.showBlockReportSpamAlert(this, this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat, this.reportSpamButton.getTag(R.id.object_tag) != null, this.chatInfo, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda247
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public final void run(int i) {
                ChatActivity.this.lambda$createTopPanel$60(i);
            }
        }, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$60(int i) {
        if (i == 0) {
            updateTopPanel(true);
        } else {
            finishFragment();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$64(View view) {
        if (this.addToContactsButtonArchive) {
            getMessagesController().addDialogToFolder(this.dialog_id, 0, 0, 0L);
            createUndoView();
            this.undoView.showWithAction(this.dialog_id, 23, (Runnable) null);
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putBoolean("dialog_bar_archived" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_block" + this.dialog_id, false);
            edit.putBoolean("dialog_bar_report" + this.dialog_id, false);
            edit.commit();
            updateTopPanel(false);
            getNotificationsController().clearDialogNotificationsSettings(this.dialog_id, getTopicId());
        } else if (this.addToContactsButton.getTag() != null && ((Integer) this.addToContactsButton.getTag()).intValue() == 4) {
            TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
            if (tLRPC$ChatFull == null || tLRPC$ChatFull.participants == null) {
                return;
            }
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                longSparseArray.put(this.chatInfo.participants.participants.get(i).user_id, null);
            }
            long j = this.chatInfo.id;
            InviteMembersBottomSheet inviteMembersBottomSheet = new InviteMembersBottomSheet(getContext(), this.currentAccount, longSparseArray, this.chatInfo.id, this, this.themeDelegate);
            inviteMembersBottomSheet.setDelegate(new GroupCreateActivity.ContactsAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda289
                @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                public final void didSelectUsers(ArrayList arrayList, int i2) {
                    ChatActivity.this.lambda$createTopPanel$62(arrayList, i2);
                }

                @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                public /* synthetic */ void needAddBot(TLRPC$User tLRPC$User) {
                    GroupCreateActivity.ContactsAddActivityDelegate.-CC.$default$needAddBot(this, tLRPC$User);
                }
            });
            inviteMembersBottomSheet.show();
        } else if (this.addToContactsButton.getTag() != null) {
            shareMyContact(1, null);
        } else {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", this.currentUser.id);
            bundle.putBoolean("addContact", true);
            ContactAddActivity contactAddActivity = new ContactAddActivity(bundle);
            contactAddActivity.setDelegate(new ContactAddActivity.ContactAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda287
                @Override // org.telegram.ui.ContactAddActivity.ContactAddActivityDelegate
                public final void didAddToContacts() {
                    ChatActivity.this.lambda$createTopPanel$63();
                }
            });
            presentFragment(contactAddActivity);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$62(ArrayList arrayList, int i) {
        getMessagesController().addUsersToChat(this.currentChat, this, arrayList, i, null, null, null);
        getMessagesController().hidePeerSettingsBar(this.dialog_id, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$63() {
        createUndoView();
        this.undoView.showWithAction(this.dialog_id, 8, this.currentUser);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$65(View view) {
        TopicsController topicsController = getMessagesController().getTopicsController();
        long j = this.currentChat.id;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic = this.forumTopic;
        int i = tLRPC$TL_forumTopic.id;
        tLRPC$TL_forumTopic.closed = false;
        topicsController.toggleCloseTopic(j, i, false);
        updateTopicButtons();
        updateBottomOverlay();
        updateTopPanel(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTopPanel$66(View view) {
        long j = this.dialog_id;
        if (this.currentEncryptedChat != null) {
            j = this.currentUser.id;
        }
        getMessagesController().hidePeerSettingsBar(j, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    private void createTranslateButton() {
        if (this.translateButton != null || getContext() == null) {
            return;
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
            return;
        }
        TranslateButton translateButton = new TranslateButton(getContext(), this, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.46
            @Override // org.telegram.ui.Components.TranslateButton
            protected void onButtonClick() {
                if (!ChatActivity.this.getUserConfig().isPremium()) {
                    SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                    edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), 14).commit();
                    ChatActivity.this.showDialog(new PremiumFeatureBottomSheet(ChatActivity.this, 13, false));
                } else {
                    ChatActivity.this.getMessagesController().getTranslateController().toggleTranslatingDialog(ChatActivity.this.getDialogId());
                }
                ChatActivity.this.updateTopPanel(true);
            }

            @Override // org.telegram.ui.Components.TranslateButton
            protected void onCloseClick() {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.putInt("dialog_show_translate_count" + ChatActivity.this.getDialogId(), 140).commit();
                ChatActivity.this.updateTopPanel(true);
            }
        };
        this.translateButton = translateButton;
        this.topChatPanelView.addView(translateButton, LayoutHelper.createFrame(-1, 36.0f, 83, 0.0f, 0.0f, 0.0f, 2.0f));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createUndoView() {
        if (this.undoView != null || getContext() == null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, false, this.themeDelegate);
        this.undoView = undoView;
        undoView.setAdditionalTranslationY(AndroidUtilities.dp(51.0f));
        this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
    }

    private void createActionMode() {
        if (this.selectedMessagesCountTextView != null || getContext() == null) {
            return;
        }
        ActionBarMenu createActionMode = this.actionBar.createActionMode();
        NumberTextView numberTextView = new NumberTextView(createActionMode.getContext());
        this.selectedMessagesCountTextView = numberTextView;
        numberTextView.setTextSize(18);
        this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.selectedMessagesCountTextView.setTextColor(getThemedColor(Theme.key_actionBarActionModeDefaultIcon));
        this.selectedMessagesCountTextView.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda119.INSTANCE);
        createActionMode.addView(this.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        if (this.currentEncryptedChat == null) {
            this.actionModeViews.add(createActionMode.addItemWithWidth(25, R.drawable.msg_download, AndroidUtilities.dp(54.0f), LocaleController.getString("SaveToMusic", R.string.SaveToMusic)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, R.drawable.msg_edit, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", R.string.Edit)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, R.drawable.msg_fave, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, R.drawable.msg_copy, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", R.string.Copy)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(11, R.drawable.msg_forward, AndroidUtilities.dp(54.0f), LocaleController.getString("Forward", R.string.Forward)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, R.drawable.msg_delete, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", R.string.Delete)));
        } else {
            this.actionModeViews.add(createActionMode.addItemWithWidth(23, R.drawable.msg_edit, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", R.string.Edit)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(22, R.drawable.msg_fave, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(10, R.drawable.msg_copy, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", R.string.Copy)));
            this.actionModeViews.add(createActionMode.addItemWithWidth(12, R.drawable.msg_delete, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", R.string.Delete)));
        }
        createActionMode.getItem(23).setVisibility((this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) ? 0 : 8);
        createActionMode.getItem(10).setVisibility((getMessagesController().isChatNoForwards(this.currentChat) || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
        createActionMode.getItem(22).setVisibility(this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0 ? 0 : 8);
        createActionMode.getItem(12).setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createSearchContainer() {
        if (this.searchContainer != null || getContext() == null) {
            return;
        }
        BlurredFrameLayout blurredFrameLayout = new BlurredFrameLayout(getContext(), this.contentView) { // from class: org.telegram.ui.ChatActivity.47
            @Override // android.view.View
            public void onDraw(Canvas canvas) {
                int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                if (ChatActivity.this.chatActivityEnterView.getVisibility() != 0) {
                    Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), intrinsicHeight);
                    Theme.chat_composeShadowDrawable.draw(canvas);
                }
                Rect rect = AndroidUtilities.rectTmp2;
                rect.set(0, intrinsicHeight, getMeasuredWidth(), getMeasuredHeight());
                ChatActivity.this.contentView.drawBlurRect(canvas, getY(), rect, ChatActivity.this.getThemedPaint("paintChatComposeBackground"), false);
            }

            @Override // android.view.ViewGroup
            protected void measureChildWithMargins(View view, int i, int i2, int i3, int i4) {
                if (view == ChatActivity.this.searchCountText) {
                    int i5 = 14;
                    if (ChatActivity.this.searchCalendarButton != null && ChatActivity.this.searchCalendarButton.getVisibility() != 8) {
                        i5 = 62;
                    }
                    if (ChatActivity.this.searchUserButton != null && ChatActivity.this.searchUserButton.getVisibility() != 8) {
                        i5 += 48;
                    }
                    ((ViewGroup.MarginLayoutParams) view.getLayoutParams()).leftMargin = AndroidUtilities.dp(i5);
                }
                super.measureChildWithMargins(view, i, i2, i3, i4);
            }
        };
        this.searchContainer = blurredFrameLayout;
        blurredFrameLayout.drawBlur = false;
        blurredFrameLayout.isTopView = false;
        blurredFrameLayout.setWillNotDraw(false);
        this.searchContainer.setVisibility(4);
        this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        this.searchContainer.setClipToPadding(false);
        View view = new View(getContext());
        this.searchAsListTogglerView = view;
        view.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda114
            @Override // android.view.View.OnTouchListener
            public final boolean onTouch(View view2, MotionEvent motionEvent) {
                boolean lambda$createSearchContainer$68;
                lambda$createSearchContainer$68 = ChatActivity.this.lambda$createSearchContainer$68(view2, motionEvent);
                return lambda$createSearchContainer$68;
            }
        });
        if (Build.VERSION.SDK_INT >= 21) {
            this.searchAsListTogglerView.setBackground(Theme.getSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), false));
        }
        this.searchAsListTogglerView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda78
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$69(view2);
            }
        });
        this.searchContainer.addView(this.searchAsListTogglerView, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, (Theme.chat_composeShadowDrawable.getIntrinsicHeight() / AndroidUtilities.density) - 3.0f, 0.0f, 0.0f));
        ImageView imageView = new ImageView(getContext());
        this.searchUpButton = imageView;
        imageView.setScaleType(ImageView.ScaleType.CENTER);
        this.searchUpButton.setImageResource(R.drawable.msg_go_up);
        ImageView imageView2 = this.searchUpButton;
        int i = Theme.key_chat_searchPanelIcons;
        imageView2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        ImageView imageView3 = this.searchUpButton;
        int i2 = Theme.key_actionBarActionModeDefaultSelector;
        imageView3.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
        this.searchUpButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda65
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$70(view2);
            }
        });
        this.searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", R.string.AccDescrSearchNext));
        ImageView imageView4 = new ImageView(getContext());
        this.searchDownButton = imageView4;
        imageView4.setScaleType(ImageView.ScaleType.CENTER);
        this.searchDownButton.setImageResource(R.drawable.msg_go_down);
        this.searchDownButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
        this.searchDownButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda68
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$71(view2);
            }
        });
        this.searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", R.string.AccDescrSearchPrev));
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && (!ChatObject.isChannel(tLRPC$Chat) || this.currentChat.megagroup)) {
            ImageView imageView5 = new ImageView(getContext());
            this.searchUserButton = imageView5;
            imageView5.setScaleType(ImageView.ScaleType.CENTER);
            this.searchUserButton.setImageResource(R.drawable.msg_usersearch);
            this.searchUserButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
            this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
            this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
            this.searchUserButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda88
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ChatActivity.this.lambda$createSearchContainer$72(view2);
                }
            });
            this.searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", R.string.AccDescrSearchByUser));
        }
        ImageView imageView6 = new ImageView(getContext());
        this.searchCalendarButton = imageView6;
        imageView6.setScaleType(ImageView.ScaleType.CENTER);
        this.searchCalendarButton.setImageResource(R.drawable.msg_calendar);
        this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(getThemedColor(i), PorterDuff.Mode.MULTIPLY));
        this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(i2), 1));
        this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
        this.searchCalendarButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda67
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$createSearchContainer$73(view2);
            }
        });
        this.searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", R.string.JumpToDate));
        SearchCounterView searchCounterView = new SearchCounterView(getContext(), this.themeDelegate);
        this.searchCountText = searchCounterView;
        searchCounterView.setGravity(3);
        this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 16, 0.0f, 0.0f, 108.0f, 0.0f));
        this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createSearchContainer$68(View view, MotionEvent motionEvent) {
        return getMediaDataController().getFoundMessageObjects().size() <= 1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$69(View view) {
        if (getMediaDataController().getFoundMessageObjects().size() > 1) {
            HintView hintView = this.searchAsListHint;
            if (hintView != null) {
                hintView.hide();
            }
            toggleMesagesSearchListView();
            if (SharedConfig.searchMessagesAsListUsed) {
                return;
            }
            SharedConfig.setSearchMessagesAsListUsed(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$70(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 1, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
        if (SharedConfig.searchMessagesAsListUsed || SharedConfig.searchMessagesAsListHintShows >= 3 || this.searchAsListHintShown || Math.random() > 0.25d) {
            return;
        }
        showSearchAsListHint();
        this.searchAsListHintShown = true;
        SharedConfig.increaseSearchAsListHintShows();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$71(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 2, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$72(View view) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.setReversed(true);
            this.mentionContainer.getAdapter().setSearchingMentions(true);
        }
        this.searchCalendarButton.setVisibility(8);
        this.searchUserButton.setVisibility(8);
        this.searchingForUser = true;
        this.searchingUserMessages = null;
        this.searchingChatMessages = null;
        this.searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", R.string.SearchMembers));
        this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", R.string.SearchFrom));
        AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
        this.searchItem.clearSearchText();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createSearchContainer$73(View view) {
        if (getParentActivity() == null) {
            return;
        }
        AndroidUtilities.hideKeyboard(this.searchItem.getSearchField());
        showDialog(AlertsCreator.createCalendarPickerDialog(getParentActivity(), 1375315200000L, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity.48
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public void run(int i) {
                ChatActivity.this.jumpToDate(i);
            }
        }, this.themeDelegate).create());
    }

    public void onPageDownClicked() {
        this.wasManualScroll = true;
        this.textSelectionHelper.cancelTextSelectionRunnable();
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda158
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$onPageDownClicked$74();
            }
        };
        int i = this.createUnreadMessageAfterId;
        if (i != 0) {
            scrollToMessageId(i, 0, false, this.returnToLoadIndex, true, 0, runnable);
            return;
        }
        int i2 = this.returnToMessageId;
        if (i2 > 0) {
            scrollToMessageId(i2, 0, true, this.returnToLoadIndex, true, 0, runnable);
            return;
        }
        scrollToLastMessage(false, true, runnable);
        if (this.pinnedMessageIds.isEmpty()) {
            return;
        }
        this.forceScrollToFirst = true;
        this.forceNextPinnedMessageId = this.pinnedMessageIds.get(0).intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onPageDownClicked$74() {
        setPagedownLoading(true, true);
    }

    private void playReactionAnimation(Integer num) {
        ChatMessageCell findMessageCell;
        if (this.fragmentView == null || (findMessageCell = findMessageCell(num.intValue(), false)) == null) {
            return;
        }
        TLRPC$MessagePeerReaction randomUnreadReaction = findMessageCell.getMessageObject().getRandomUnreadReaction();
        if (randomUnreadReaction != null && findMessageCell.reactionsLayoutInBubble.hasUnreadReactions) {
            ReactionsEffectOverlay.show(this, null, findMessageCell, null, 0.0f, 0.0f, ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(randomUnreadReaction.reaction), this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
            ReactionsEffectOverlay.startAnimation();
        }
        findMessageCell.markReactionsAsRead();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, boolean z) {
        setScrimView(view);
        dimBehindView(z ? 0.2f : 0.0f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void dimBehindView(View view, float f) {
        setScrimView(view);
        dimBehindView(f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setScrimView(View view) {
        View view2 = this.scrimView;
        if (view2 == view) {
            return;
        }
        if (view2 != null && (view2 instanceof ChatActionCell)) {
            ((ChatActionCell) view2).setInvalidateWithParent(null);
        }
        this.scrimView = view;
        if (view instanceof ChatActionCell) {
            ((ChatActionCell) view).setInvalidateWithParent(this.fragmentView);
        }
    }

    public void dimBehindView(boolean z) {
        dimBehindView(z ? 0.2f : 0.0f, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkInstantCameraView() {
        if (this.instantCameraView != null || getContext() == null) {
            return;
        }
        InstantCameraView instantCameraView = new InstantCameraView(getContext(), this, this.themeDelegate);
        this.instantCameraView = instantCameraView;
        this.contentView.addView(instantCameraView, 21, LayoutHelper.createFrame(-1, -1, 51));
    }

    private void dimBehindView(float f, boolean z) {
        ValueAnimator ofFloat;
        final boolean z2 = f > 0.0f;
        View view = this.scrimView;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            chatMessageCell.setInvalidatesParent(z2);
            if (z2) {
                restartSticker(chatMessageCell);
            }
        }
        this.contentView.invalidate();
        this.chatListView.invalidate();
        AnimatorSet animatorSet = this.scrimAnimatorSet;
        if (animatorSet != null) {
            animatorSet.removeAllListeners();
            this.scrimAnimatorSet.cancel();
        }
        this.scrimAnimatorSet = new AnimatorSet();
        ArrayList arrayList = new ArrayList();
        if (z2) {
            this.scrimViewAlpha = 1.0f;
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            ofFloat = ValueAnimator.ofFloat(0.0f, f);
            arrayList.add(ofFloat);
        } else {
            ofFloat = ValueAnimator.ofFloat(this.scrimPaintAlpha, 0.0f);
            arrayList.add(ofFloat);
        }
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda5
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$dimBehindView$75(valueAnimator2);
            }
        });
        if (!z2 || z) {
            FrameLayout frameLayout = this.pagedownButton;
            if (frameLayout != null) {
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
            }
            FrameLayout frameLayout2 = this.mentiondownButton;
            if (frameLayout2 != null) {
                Property property2 = View.ALPHA;
                float[] fArr2 = new float[1];
                fArr2[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout2, property2, fArr2));
            }
            FrameLayout frameLayout3 = this.reactionsMentiondownButton;
            if (frameLayout3 != null) {
                Property property3 = View.ALPHA;
                float[] fArr3 = new float[1];
                fArr3[0] = z2 ? 0.0f : 1.0f;
                arrayList.add(ObjectAnimator.ofFloat(frameLayout3, property3, fArr3));
            }
        }
        this.scrimAnimatorSet.playTogether(arrayList);
        this.scrimAnimatorSet.setDuration(z2 ? 150L : 220L);
        this.scrimAnimatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.49
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (z2) {
                    return;
                }
                ChatActivity.this.setScrimView(null);
                ChatActivity.this.scrimViewReaction = null;
                ChatActivity.this.contentView.invalidate();
                ChatActivity.this.chatListView.invalidate();
            }
        });
        if (this.scrimView != null && this.scrimViewAlpha <= 0.0f) {
            setScrimView(null);
        }
        this.scrimAnimatorSet.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$dimBehindView$75(ValueAnimator valueAnimator) {
        this.scrimPaintAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class PinnedMessageButton extends TextView {
        public PinnedMessageButton(ChatActivity chatActivity, Context context) {
            super(context);
            setSingleLine(true);
            setLines(1);
            setMaxLines(1);
            setEllipsize(TextUtils.TruncateAt.END);
            setTextColor(chatActivity.getThemedColor(Theme.key_featuredStickers_buttonText));
            setBackground(Theme.AdaptiveRipple.filledRect(chatActivity.getThemedColor(Theme.key_featuredStickers_addButton), 16.0f));
            setTextSize(1, 14.0f);
            setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            setGravity(17);
            setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(14.0f), 0);
        }

        @Override // android.widget.TextView, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(i), (int) (AndroidUtilities.displaySize.x * 0.45f)), Integer.MIN_VALUE), i2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTextItemMenu() {
        if (this.filledEditTextItemMenu) {
            return;
        }
        ActionBarMenuItem createView = this.editTextItem.createView();
        createView.addSubItem(57, LocaleController.getString("Spoiler", R.string.Spoiler));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, spannableStringBuilder.length(), 33);
        createView.addSubItem(50, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        createView.addSubItem(51, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        createView.addSubItem(52, spannableStringBuilder3);
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            createView.addSubItem(55, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            createView.addSubItem(56, spannableStringBuilder5);
        }
        createView.addSubItem(53, LocaleController.getString("CreateLink", R.string.CreateLink));
        createView.addSubItem(54, LocaleController.getString("Regular", R.string.Regular));
        this.filledEditTextItemMenu = true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonsPosition() {
        float animatedTop = this.chatActivityEnterView.getAnimatedTop() + this.chatActivityEnterView.getTranslationY() + (this.chatActivityEnterTopView.getVisibility() == 0 ? this.chatActivityEnterTopView.getTranslationY() : 0.0f);
        FrameLayout frameLayout = this.pagedownButton;
        if (frameLayout != null) {
            frameLayout.setTranslationY((AndroidUtilities.dp(100.0f) * (1.0f - this.pagedownButtonEnterProgress)) + animatedTop);
        }
        FrameLayout frameLayout2 = this.mentiondownButton;
        if (frameLayout2 != null) {
            frameLayout2.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.mentionsButtonEnterProgress)) + animatedTop) - ((AndroidUtilities.dp(72.0f) * this.pagedownButtonEnterProgress) * this.mentionsButtonEnterProgress));
        }
        FrameLayout frameLayout3 = this.reactionsMentiondownButton;
        if (frameLayout3 != null) {
            frameLayout3.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.reactionsMentionButtonEnterProgress)) + animatedTop) - ((((AndroidUtilities.dp(50.0f) + (AndroidUtilities.dp(22.0f) * this.pagedownButtonCounter.getEnterProgress())) * this.pagedownButtonEnterProgress) + (AndroidUtilities.dp(72.0f) * this.mentionsButtonEnterProgress)) * this.reactionsMentionButtonEnterProgress));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.setTranslationY(animatedTop);
        }
    }

    private void updateReactionsMentionButton(boolean z) {
        if (this.reactionsMentiondownButtonCounter == null || getParentActivity() == null) {
            return;
        }
        int i = this.reactionsMentionCount;
        boolean z2 = i > 0 && this.chatMode == 0;
        this.reactionsMentiondownButtonCounter.setCount(i, z);
        if (z2 && this.reactionsMentiondownButton.getTag() == null) {
            this.reactionsMentiondownButton.setTag(1);
            ValueAnimator valueAnimator = this.reactionsMentionButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 1.0f);
                this.reactionsMentionButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda10
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.this.lambda$updateReactionsMentionButton$76(valueAnimator2);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.50
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.reactionsMentionButtonEnterProgress = 1.0f;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            this.reactionsMentionButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
        } else if (z2 || this.reactionsMentiondownButton.getTag() == null) {
        } else {
            this.reactionsMentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.reactionsMentionButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (z) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 0.0f);
                this.reactionsMentionButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda2
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$updateReactionsMentionButton$77(valueAnimator3);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.51
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.reactionsMentiondownButton.setVisibility(4);
                        ChatActivity.this.reactionsMentionButtonEnterProgress = 0.0f;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(4);
            this.reactionsMentionButtonEnterProgress = 0.0f;
            this.contentView.invalidate();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$76(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateReactionsMentionButton$77(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 52 extends ForwardingPreviewView {
        final /* synthetic */ boolean val$keyboardVisible;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        52(Context context, ForwardingMessagesParams forwardingMessagesParams, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, int i, ForwardingPreviewView.ResourcesDelegate resourcesDelegate, boolean z) {
            super(context, forwardingMessagesParams, tLRPC$User, tLRPC$Chat, i, resourcesDelegate);
            this.val$keyboardVisible = z;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        protected void onDismiss(boolean z) {
            ChatActivity.this.checkShowBlur(true);
            if (ChatActivity.this.forwardingMessages != null) {
                ArrayList<MessageObject> arrayList = new ArrayList<>();
                ChatActivity.this.forwardingMessages.getSelectedMessages(arrayList);
                ChatActivity.this.showFieldPanelForForward(true, arrayList);
            }
            if (this.val$keyboardVisible && z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$52$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.52.this.lambda$onDismiss$0();
                    }
                }, 50L);
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onDismiss$0() {
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.openKeyboard();
            }
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        protected void selectAnotherChat() {
            super.selectAnotherChat();
            dismiss(false);
            if (ChatActivity.this.forwardingMessages != null) {
                int size = ChatActivity.this.forwardingMessages.messages.size();
                int i = 0;
                boolean z = false;
                for (int i2 = 0; i2 < size; i2++) {
                    MessageObject messageObject = ChatActivity.this.forwardingMessages.messages.get(i2);
                    if (messageObject.isPoll()) {
                        if (i != 2) {
                            i = messageObject.isPublicPoll() ? 2 : 1;
                        }
                    } else if (messageObject.isInvoice()) {
                        z = true;
                    }
                    ChatActivity.this.selectedMessagesIds[0].put(messageObject.getId(), messageObject);
                }
                Bundle bundle = new Bundle();
                bundle.putBoolean("onlySelect", true);
                bundle.putInt("dialogsType", 3);
                bundle.putInt("hasPoll", i);
                bundle.putBoolean("hasInvoice", z);
                bundle.putInt("messagesCount", ChatActivity.this.forwardingMessages.messages.size());
                bundle.putBoolean("canSelectTopics", true);
                DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                dialogsActivity.setDelegate(ChatActivity.this);
                ChatActivity.this.presentFragment(dialogsActivity);
            }
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        protected void didSendPressed() {
            super.didSendPressed();
            dismiss(true);
            ChatActivity.this.chatActivityEnterView.getSendButton().callOnClick();
        }
    }

    private void openForwardingPreview() {
        TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers;
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        this.forwardingPreviewView = new 52(this.contentView.getContext(), this.forwardingMessages, this.currentUser, this.currentChat, this.currentAccount, this.themeDelegate, isKeyboardVisible);
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        TLRPC$Peer tLRPC$Peer = tLRPC$ChatFull != null ? tLRPC$ChatFull.default_send_as : null;
        if (tLRPC$Peer == null && (tLRPC$TL_channels_sendAsPeers = this.sendAsPeersObj) != null && !tLRPC$TL_channels_sendAsPeers.peers.isEmpty()) {
            tLRPC$Peer = this.sendAsPeersObj.peers.get(0).peer;
        }
        this.forwardingPreviewView.setSendAsPeer(tLRPC$Peer);
        checkShowBlur(true);
        this.contentView.addView(this.forwardingPreviewView);
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void animateToNextChat() {
        if (this.pullingDownDrawable == null) {
            return;
        }
        addToPulledDialogsMyself();
        ChatPullingDownDrawable chatPullingDownDrawable = this.pullingDownDrawable;
        addToPulledDialogs(chatPullingDownDrawable.nextChat, chatPullingDownDrawable.nextDialogId, chatPullingDownDrawable.dialogFolderId, chatPullingDownDrawable.dialogFilterId);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", this.pullingDownDrawable.getChatId());
        bundle.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
        bundle.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
        bundle.putBoolean("pulled", true);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.remove("diditem" + this.pullingDownDrawable.nextDialogId).apply();
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.setPullingDownTransition(true);
        replacingChatActivity = true;
        presentFragment(chatActivity, true);
    }

    private void addToPulledDialogsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), this.currentChat, this.currentUser, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    private void addToPulledDialogs(TLRPC$Chat tLRPC$Chat, long j, int i, int i2) {
        if (getParentLayout() == null) {
            return;
        }
        BackButtonMenu.addToPulledDialogs(this, getParentLayout().getFragmentStack().indexOf(this), tLRPC$Chat, null, j, i, i2);
    }

    private void setPullingDownTransition(boolean z) {
        this.fromPullingDownTransition = z;
    }

    public void setSwitchFromTopics(boolean z) {
        this.switchFromTopics = z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBulletinLayout() {
        Bulletin visibleBulletin = Bulletin.getVisibleBulletin();
        if (visibleBulletin == null || this.bulletinDelegate == null) {
            return;
        }
        visibleBulletin.updatePosition();
    }

    private void searchUserMessages(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        String str;
        this.searchingUserMessages = tLRPC$User;
        this.searchingChatMessages = tLRPC$Chat;
        if (this.searchItem == null || this.mentionContainer == null) {
            return;
        }
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            str = tLRPC$User.first_name;
            if (TextUtils.isEmpty(str)) {
                str = this.searchingUserMessages.last_name;
            }
        } else {
            str = tLRPC$Chat.title;
        }
        if (str == null) {
            return;
        }
        if (str.length() > 10) {
            str = str.substring(0, 10);
        }
        this.searchingForUser = false;
        String string = LocaleController.getString("SearchFrom", R.string.SearchFrom);
        SpannableString spannableString = new SpannableString(string + " " + str);
        spannableString.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)), string.length() + 1, spannableString.length(), 33);
        this.searchItem.setSearchFieldCaption(spannableString);
        this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
        this.searchItem.setSearchFieldHint(null);
        this.searchItem.clearSearchText();
        getMediaDataController().searchMessagesInChat("", this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
    }

    private void updateTranslateItemVisibility() {
        ActionBarMenuItem.Item item = this.translateItem;
        if (item == null) {
            return;
        }
        item.setVisibility((getMessagesController().getTranslateController().isTranslateDialogHidden(getDialogId()) && getMessagesController().getTranslateController().isDialogTranslatable(getDialogId())) ? 0 : 8);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v8, types: [java.lang.CharSequence] */
    private void updateInfoTopView(boolean z) {
        View.OnClickListener onClickListener;
        View.OnClickListener onClickListener2;
        int i;
        String str;
        TLRPC$User tLRPC$User;
        if (this.contentView == null) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_bar_distance" + this.dialog_id, -1);
        this.distanceToPeer = i2;
        String str2 = null;
        if (i2 >= 0 && (tLRPC$User = this.currentUser) != null) {
            str2 = LocaleController.formatString("ChatDistanceToPeer", R.string.ChatDistanceToPeer, tLRPC$User.first_name, LocaleController.formatDistance(i2, 0));
            onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda79
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$updateInfoTopView$78(view);
                }
            };
        } else {
            if (this.currentChat != null && this.chatInviterId != 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("dialog_bar_vis3");
                sb.append(this.dialog_id);
                boolean z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
                boolean z3 = notificationsSettings.getBoolean("dialog_bar_report" + this.dialog_id, false);
                boolean z4 = notificationsSettings.getBoolean("dialog_bar_block" + this.dialog_id, false);
                if (z2 && (z3 || z4)) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInviterId));
                    if (user != null) {
                        if (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                            i = R.string.ActionUserInvitedToGroup;
                            str = "ActionUserInvitedToGroup";
                        } else {
                            i = R.string.ActionUserInvitedToChannel;
                            str = "ActionUserInvitedToChannel";
                        }
                        ?? replaceWithLink = MessageObject.replaceWithLink(LocaleController.getString(str, i), "un1", user);
                        onClickListener2 = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda83
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.this.lambda$updateInfoTopView$79(view);
                            }
                        };
                        str2 = replaceWithLink;
                    } else {
                        onClickListener2 = null;
                    }
                    onClickListener = onClickListener2;
                } else {
                    hideInfoView();
                }
            }
            onClickListener = null;
        }
        if (str2 != null) {
            Animator animator = this.infoTopViewAnimator;
            if (animator != null) {
                animator.cancel();
            }
            if (this.infoTopView == null) {
                ChatActionCell chatActionCell = new ChatActionCell(this.contentView.getContext(), false, this.themeDelegate);
                this.infoTopView = chatActionCell;
                chatActionCell.setCustomText(str2);
                this.infoTopView.setInvalidateColors(true);
                this.infoTopView.setOnClickListener(onClickListener);
                this.contentView.addView(this.infoTopView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 0.0f, 0.0f, 0.0f));
            }
            if (z) {
                if (this.infoTopView.getTag() == null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                    this.infoTopView.setTag(1);
                    this.infoTopView.setAlpha(0.0f);
                    final ChatActionCell chatActionCell2 = this.infoTopView;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda15
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.this.lambda$updateInfoTopView$80(chatActionCell2, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.53
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator2) {
                            ChatActivity.this.topViewOffset = AndroidUtilities.dp(30.0f);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                        }
                    });
                    ofFloat.setDuration(150L);
                    this.infoTopViewAnimator = ofFloat;
                    ofFloat.start();
                    return;
                }
                return;
            }
            this.infoTopView.setTag(1);
            this.topViewOffset = AndroidUtilities.dp(30.0f);
            invalidateChatListViewTopPadding();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$78(View view) {
        presentFragment(new PeopleNearbyActivity());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$79(View view) {
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", this.chatInviterId);
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInfoTopView$80(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTopUndoView() {
        if (this.topUndoView != null) {
            return;
        }
        UndoView undoView = new UndoView(getContext(), this, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.54
            @Override // org.telegram.ui.Components.UndoView
            public void didPressUrl(CharacterStyle characterStyle) {
                ChatActivity.this.didPressMessageUrl(characterStyle, false, null, null);
            }

            @Override // org.telegram.ui.Components.UndoView
            public void showWithAction(long j, int i, Object obj, Object obj2, Runnable runnable, Runnable runnable2) {
                setAdditionalTranslationY((ChatActivity.this.fragmentContextView == null || !ChatActivity.this.fragmentContextView.isCallTypeVisible()) ? 0.0f : AndroidUtilities.dp(ChatActivity.this.fragmentContextView.getStyleHeight()));
                super.showWithAction(j, i, obj, obj2, runnable, runnable2);
            }
        };
        this.topUndoView = undoView;
        this.contentView.addView(undoView, 17, LayoutHelper.createFrame(-1, -2.0f, 51, 8.0f, 8.0f, 8.0f, 0.0f));
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x027e  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x032a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createPinnedMessageView() {
        int i;
        int i2;
        int i3;
        if (this.currentEncryptedChat == null && this.pinnedMessageView == null && getContext() != null) {
            55 r1 = new 55(getContext(), this.contentView);
            this.pinnedMessageView = r1;
            r1.setTag(1);
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
            BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
            int i4 = Theme.key_chat_topPanelBackground;
            blurredFrameLayout.backgroundColor = getThemedColor(i4);
            this.pinnedMessageView.backgroundPaddingBottom = AndroidUtilities.dp(2.0f);
            this.pinnedMessageView.getBackground().mutate().setColorFilter(new PorterDuffColorFilter(getThemedColor(i4), PorterDuff.Mode.MULTIPLY));
            BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
            if (blurredFrameLayout2 != null) {
                ViewParent parent = blurredFrameLayout2.getParent();
                ChatActivityFragmentView chatActivityFragmentView = this.contentView;
                if (parent == chatActivityFragmentView) {
                    i = chatActivityFragmentView.indexOfChild(this.topChatPanelView);
                    this.contentView.addView(this.pinnedMessageView, i, LayoutHelper.createFrame(-1, 50, 51));
                    this.pinnedMessageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.this.lambda$createPinnedMessageView$81(view);
                        }
                    });
                    this.pinnedMessageView.setEnabled(!isInPreviewMode());
                    View view = new View(getContext());
                    view.setBackground(Theme.getSelectorDrawable(false));
                    this.pinnedMessageView.addView(view, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 2.0f));
                    PinnedLineView pinnedLineView = new PinnedLineView(getContext(), this.themeDelegate);
                    this.pinnedLineView = pinnedLineView;
                    this.pinnedMessageView.addView(pinnedLineView, LayoutHelper.createFrame(2, 48.0f, 51, 8.0f, 0.0f, 0.0f, 0.0f));
                    this.pinnedMessageView.setClipChildren(false);
                    NumberTextView numberTextView = new NumberTextView(getContext());
                    this.pinnedCounterTextView = numberTextView;
                    numberTextView.setAddNumber();
                    this.pinnedCounterTextView.setTextSize(14);
                    this.pinnedCounterTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
                    this.pinnedCounterTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                    this.pinnedMessageView.addView(this.pinnedCounterTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.0f, 44.0f, 0.0f));
                    for (i2 = 0; i2 < 2; i2++) {
                        this.pinnedNameTextView[i2] = new TrackingWidthSimpleTextView(getContext());
                        this.pinnedNameTextView[i2].setTextSize(14);
                        this.pinnedNameTextView[i2].setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
                        this.pinnedNameTextView[i2].setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                        this.pinnedMessageView.addView(this.pinnedNameTextView[i2], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.3f, 44.0f, 0.0f));
                        this.pinnedMessageTextView[i2] = new SimpleTextView(getContext()) { // from class: org.telegram.ui.ChatActivity.56
                            @Override // android.view.View
                            public void setTranslationY(float f) {
                                super.setTranslationY(f);
                                if (this != ChatActivity.this.pinnedMessageTextView[0] || ChatActivity.this.pinnedNextAnimation[1] == null) {
                                    return;
                                }
                                if (!ChatActivity.this.forceScrollToFirst || f >= 0.0f) {
                                    ChatActivity.this.pinnedLineView.setTranslationY(0.0f);
                                } else {
                                    ChatActivity.this.pinnedLineView.setTranslationY(f / 2.0f);
                                }
                            }
                        };
                        this.pinnedMessageTextView[i2].setTextSize(14);
                        this.pinnedMessageTextView[i2].setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
                        this.pinnedMessageView.addView(this.pinnedMessageTextView[i2], LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 25.3f, 44.0f, 0.0f));
                        this.pinnedMessageButton[i2] = new PinnedMessageButton(this, getContext());
                        this.pinnedMessageView.addView(this.pinnedMessageButton[i2], LayoutHelper.createFrame(-2, 28.0f, 53, 0.0f, 10.0f, 14.0f, 0.0f));
                        this.pinnedMessageImageView[i2] = new BackupImageView(this, getContext()) { // from class: org.telegram.ui.ChatActivity.57
                            private SpoilerEffect spoilerEffect = new SpoilerEffect();
                            private Path path = new Path();
                            private float[] radii = new float[8];

                            @Override // org.telegram.ui.Components.BackupImageView, android.view.View
                            protected void onDraw(Canvas canvas) {
                                super.onDraw(canvas);
                                if (this.hasBlur) {
                                    canvas.save();
                                    RectF rectF = AndroidUtilities.rectTmp;
                                    rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                                    int[] roundRadius = this.imageReceiver.getRoundRadius();
                                    float[] fArr = this.radii;
                                    float f = roundRadius[0];
                                    fArr[1] = f;
                                    fArr[0] = f;
                                    float f2 = roundRadius[1];
                                    fArr[3] = f2;
                                    fArr[2] = f2;
                                    float f3 = roundRadius[2];
                                    fArr[5] = f3;
                                    fArr[4] = f3;
                                    float f4 = roundRadius[3];
                                    fArr[7] = f4;
                                    fArr[6] = f4;
                                    this.path.rewind();
                                    this.path.addRoundRect(rectF, this.radii, Path.Direction.CW);
                                    canvas.clipPath(this.path);
                                    this.spoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                                    this.spoilerEffect.setBounds(0, 0, getWidth(), getHeight());
                                    this.spoilerEffect.draw(canvas);
                                    canvas.restore();
                                    invalidate();
                                }
                            }
                        };
                        this.pinnedMessageImageView[i2].setBlurAllowed(true);
                        this.pinnedMessageImageView[i2].setRoundRadius(AndroidUtilities.dp(2.0f));
                        this.pinnedMessageView.addView(this.pinnedMessageImageView[i2], LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                        if (i2 == 1) {
                            this.pinnedNameTextView[i2].setVisibility(4);
                            this.pinnedMessageButton[i2].setVisibility(4);
                            this.pinnedMessageTextView[i2].setVisibility(4);
                            this.pinnedMessageImageView[i2].setVisibility(4);
                        }
                    }
                    ImageView imageView = new ImageView(getContext());
                    this.pinnedListButton = imageView;
                    imageView.setImageResource(R.drawable.msg_pinnedlist);
                    ImageView imageView2 = this.pinnedListButton;
                    int i5 = Theme.key_chat_topPanelClose;
                    imageView2.setColorFilter(new PorterDuffColorFilter(getThemedColor(i5), PorterDuff.Mode.MULTIPLY));
                    this.pinnedListButton.setScaleType(ImageView.ScaleType.CENTER);
                    this.pinnedListButton.setContentDescription(LocaleController.getString("AccPinnedMessagesList", R.string.AccPinnedMessagesList));
                    this.pinnedListButton.setVisibility(4);
                    this.pinnedListButton.setAlpha(0.0f);
                    this.pinnedListButton.setScaleX(0.4f);
                    this.pinnedListButton.setScaleY(0.4f);
                    i3 = Build.VERSION.SDK_INT;
                    if (i3 >= 21) {
                        this.pinnedListButton.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615));
                    }
                    this.pinnedMessageView.addView(this.pinnedListButton, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 7.0f, 0.0f));
                    this.pinnedListButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda89
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            ChatActivity.this.lambda$createPinnedMessageView$82(view2);
                        }
                    });
                    ImageView imageView3 = new ImageView(getContext());
                    this.closePinned = imageView3;
                    imageView3.setImageResource(R.drawable.miniplayer_close);
                    this.closePinned.setColorFilter(new PorterDuffColorFilter(getThemedColor(i5), PorterDuff.Mode.MULTIPLY));
                    this.closePinned.setScaleType(ImageView.ScaleType.CENTER);
                    this.closePinned.setVisibility(8);
                    this.closePinned.setContentDescription(LocaleController.getString("Close", R.string.Close));
                    RadialProgressView radialProgressView = new RadialProgressView(getContext(), this.themeDelegate);
                    this.pinnedProgress = radialProgressView;
                    radialProgressView.setVisibility(8);
                    this.pinnedProgress.setSize(AndroidUtilities.dp(16.0f));
                    this.pinnedProgress.setStrokeWidth(2.0f);
                    this.pinnedProgress.setProgressColor(getThemedColor(Theme.key_chat_topPanelLine));
                    this.pinnedMessageView.addView(this.pinnedProgress, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    if (i3 >= 21) {
                        this.closePinned.setBackgroundDrawable(Theme.createSelectorDrawable(getThemedColor(Theme.key_inappPlayerClose) & 436207615, 1, AndroidUtilities.dp(14.0f)));
                    }
                    this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
                    this.closePinned.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda77
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            ChatActivity.this.lambda$createPinnedMessageView$84(view2);
                        }
                    });
                    updatePinnedListButton(false);
                }
            }
            i = 8;
            this.contentView.addView(this.pinnedMessageView, i, LayoutHelper.createFrame(-1, 50, 51));
            this.pinnedMessageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ChatActivity.this.lambda$createPinnedMessageView$81(view2);
                }
            });
            this.pinnedMessageView.setEnabled(!isInPreviewMode());
            View view2 = new View(getContext());
            view2.setBackground(Theme.getSelectorDrawable(false));
            this.pinnedMessageView.addView(view2, LayoutHelper.createFrame(-1, -1.0f, 51, 0.0f, 0.0f, 0.0f, 2.0f));
            PinnedLineView pinnedLineView2 = new PinnedLineView(getContext(), this.themeDelegate);
            this.pinnedLineView = pinnedLineView2;
            this.pinnedMessageView.addView(pinnedLineView2, LayoutHelper.createFrame(2, 48.0f, 51, 8.0f, 0.0f, 0.0f, 0.0f));
            this.pinnedMessageView.setClipChildren(false);
            NumberTextView numberTextView2 = new NumberTextView(getContext());
            this.pinnedCounterTextView = numberTextView2;
            numberTextView2.setAddNumber();
            this.pinnedCounterTextView.setTextSize(14);
            this.pinnedCounterTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
            this.pinnedCounterTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            this.pinnedMessageView.addView(this.pinnedCounterTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 18.0f, 7.0f, 44.0f, 0.0f));
            while (i2 < 2) {
            }
            ImageView imageView4 = new ImageView(getContext());
            this.pinnedListButton = imageView4;
            imageView4.setImageResource(R.drawable.msg_pinnedlist);
            ImageView imageView22 = this.pinnedListButton;
            int i52 = Theme.key_chat_topPanelClose;
            imageView22.setColorFilter(new PorterDuffColorFilter(getThemedColor(i52), PorterDuff.Mode.MULTIPLY));
            this.pinnedListButton.setScaleType(ImageView.ScaleType.CENTER);
            this.pinnedListButton.setContentDescription(LocaleController.getString("AccPinnedMessagesList", R.string.AccPinnedMessagesList));
            this.pinnedListButton.setVisibility(4);
            this.pinnedListButton.setAlpha(0.0f);
            this.pinnedListButton.setScaleX(0.4f);
            this.pinnedListButton.setScaleY(0.4f);
            i3 = Build.VERSION.SDK_INT;
            if (i3 >= 21) {
            }
            this.pinnedMessageView.addView(this.pinnedListButton, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 7.0f, 0.0f));
            this.pinnedListButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda89
                @Override // android.view.View.OnClickListener
                public final void onClick(View view22) {
                    ChatActivity.this.lambda$createPinnedMessageView$82(view22);
                }
            });
            ImageView imageView32 = new ImageView(getContext());
            this.closePinned = imageView32;
            imageView32.setImageResource(R.drawable.miniplayer_close);
            this.closePinned.setColorFilter(new PorterDuffColorFilter(getThemedColor(i52), PorterDuff.Mode.MULTIPLY));
            this.closePinned.setScaleType(ImageView.ScaleType.CENTER);
            this.closePinned.setVisibility(8);
            this.closePinned.setContentDescription(LocaleController.getString("Close", R.string.Close));
            RadialProgressView radialProgressView2 = new RadialProgressView(getContext(), this.themeDelegate);
            this.pinnedProgress = radialProgressView2;
            radialProgressView2.setVisibility(8);
            this.pinnedProgress.setSize(AndroidUtilities.dp(16.0f));
            this.pinnedProgress.setStrokeWidth(2.0f);
            this.pinnedProgress.setProgressColor(getThemedColor(Theme.key_chat_topPanelLine));
            this.pinnedMessageView.addView(this.pinnedProgress, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
            if (i3 >= 21) {
            }
            this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48.0f, 53, 0.0f, 0.0f, 2.0f, 0.0f));
            this.closePinned.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda77
                @Override // android.view.View.OnClickListener
                public final void onClick(View view22) {
                    ChatActivity.this.lambda$createPinnedMessageView$84(view22);
                }
            });
            updatePinnedListButton(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 55 extends BlurredFrameLayout {
        float lastY;
        float startY;

        55(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$55$$ExternalSyntheticLambda0
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    boolean lambda$new$0;
                    lambda$new$0 = ChatActivity.55.this.lambda$new$0(view);
                    return lambda$new$0;
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$new$0(View view) {
            if (AndroidUtilities.isTablet() || ChatActivity.this.isThreadChat()) {
                return false;
            }
            this.startY = this.lastY;
            ChatActivity.this.openPinnedMessagesList(true);
            return true;
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent motionEvent) {
            this.lastY = motionEvent.getY();
            if (motionEvent.getAction() == 1) {
                ChatActivity.this.finishPreviewFragment();
            } else if (motionEvent.getAction() == 2) {
                float f = this.startY - this.lastY;
                ChatActivity.this.movePreviewFragment(f);
                if (f < 0.0f) {
                    this.startY = this.lastY;
                }
            }
            return super.onTouchEvent(motionEvent);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int i, int i2) {
            super.onMeasure(i, i2);
            if (ChatActivity.this.setPinnedTextTranslationX) {
                for (int i3 = 0; i3 < ChatActivity.this.pinnedNextAnimation.length; i3++) {
                    if (ChatActivity.this.pinnedNextAnimation[i3] != null) {
                        ChatActivity.this.pinnedNextAnimation[i3].start();
                    }
                }
                ChatActivity.this.setPinnedTextTranslationX = false;
            }
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View view, long j) {
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), AndroidUtilities.dp(48.0f));
            }
            if (view == ChatActivity.this.pinnedMessageTextView[0] || view == ChatActivity.this.pinnedMessageTextView[1]) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth() - AndroidUtilities.dp(38.0f), getMeasuredHeight());
                boolean drawChild = super.drawChild(canvas, view, j);
                canvas.restore();
                return drawChild;
            }
            boolean drawChild2 = super.drawChild(canvas, view, j);
            if (view == ChatActivity.this.pinnedLineView) {
                canvas.restore();
                return drawChild2;
            }
            return drawChild2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$81(View view) {
        int i;
        this.wasManualScroll = true;
        if (isThreadChat() && !this.isTopic) {
            scrollToMessageId(this.threadMessageId, 0, true, 0, true, 0);
            return;
        }
        int i2 = this.currentPinnedMessageId;
        if (i2 != 0) {
            if (this.pinnedMessageIds.isEmpty()) {
                i = 0;
            } else {
                ArrayList<Integer> arrayList = this.pinnedMessageIds;
                if (i2 == arrayList.get(arrayList.size() - 1).intValue()) {
                    i = this.pinnedMessageIds.get(0).intValue() + 1;
                    this.forceScrollToFirst = true;
                } else {
                    i = i2 - 1;
                    this.forceScrollToFirst = false;
                }
            }
            this.forceNextPinnedMessageId = i;
            scrollToMessageId(i2, 0, true, 0, true, !this.forceScrollToFirst ? -i : i);
            updateMessagesVisiblePart(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$82(View view) {
        openPinnedMessagesList(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$84(View view) {
        boolean z;
        TLRPC$UserFull tLRPC$UserFull;
        if (getParentActivity() == null) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            z = ChatObject.canPinMessages(tLRPC$Chat);
        } else {
            z = (this.currentEncryptedChat != null || (tLRPC$UserFull = this.userInfo) == null) ? false : tLRPC$UserFull.can_pin_message;
        }
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", R.string.UnpinMessageAlertTitle));
            builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
            builder.setPositiveButton(LocaleController.getString("UnpinMessage", R.string.UnpinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda31
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$createPinnedMessageView$83(dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (this.pinnedMessageIds.isEmpty()) {
        } else {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            updatePinnedMessageView(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPinnedMessageView$83(DialogInterface dialogInterface, int i) {
        MessageObject messageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
        if (messageObject == null) {
            messageObject = this.messagesDict[0].get(this.currentPinnedMessageId);
        }
        unpinMessage(messageObject);
    }

    private void openAnotherForward() {
        ArrayList<MessageObject> arrayList;
        String formatString;
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || (arrayList = forwardingMessagesParams.messages) == null) {
            return;
        }
        int size = arrayList.size();
        long j = 0;
        long j2 = 0;
        for (int i = 0; i < size; i++) {
            MessageObject messageObject = this.forwardingMessages.messages.get(i);
            if (j == 0) {
                j2 = messageObject.getDialogId();
                j = messageObject.getFromChatId();
            } else if (j != messageObject.getFromChatId()) {
                break;
            }
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setButtonsVertical(true);
        if (j2 > 0) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(j2));
            if (user == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardPrivate", R.string.CancelForwardPrivate, LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]), ContactsController.formatName(user.first_name, user.last_name));
        } else {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-j2));
            if (chat == null) {
                return;
            }
            formatString = LocaleController.formatString("CancelForwardChat", R.string.CancelForwardChat, LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]), chat.title);
        }
        builder.setMessage(AndroidUtilities.replaceTags(formatString));
        builder.setTitle(LocaleController.formatPluralString("messages", this.forwardingMessages.messages.size(), new Object[0]));
        builder.setPositiveButton(LocaleController.getString("CancelForwarding", R.string.CancelForwarding), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda32
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$openAnotherForward$85(dialogInterface, i2);
            }
        });
        builder.setNegativeButton(LocaleController.getString("ShowForwardingOptions", R.string.ShowForwardingOptions), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda26
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i2) {
                ChatActivity.this.lambda$openAnotherForward$86(dialogInterface, i2);
            }
        });
        AlertDialog create = builder.create();
        showDialog(create);
        TextView textView = (TextView) create.getButton(-1);
        if (textView != null) {
            textView.setTextColor(getThemedColor(Theme.key_text_RedBold));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$85(DialogInterface dialogInterface, int i) {
        if (this.forwardingMessages != null) {
            this.forwardingMessages = null;
        }
        showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAnotherForward$86(DialogInterface dialogInterface, int i) {
        openForwardingPreview();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openPinnedMessagesList(boolean z) {
        INavigationLayout iNavigationLayout;
        if (getParentActivity() == null || (iNavigationLayout = this.parentLayout) == null || iNavigationLayout.getLastFragment() != this || this.pinnedMessageIds.isEmpty()) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null) {
            bundle.putLong("chat_id", tLRPC$Chat.id);
        } else {
            bundle.putLong("user_id", this.currentUser.id);
        }
        bundle.putInt("chatMode", 2);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.pinnedMessageIds = new ArrayList<>(this.pinnedMessageIds);
        chatActivity.pinnedMessageObjects = new HashMap<>(this.pinnedMessageObjects);
        int size = this.pinnedMessageIds.size();
        for (int i = 0; i < size; i++) {
            Integer num = this.pinnedMessageIds.get(i);
            MessageObject messageObject = this.pinnedMessageObjects.get(num);
            MessageObject messageObject2 = this.messagesDict[0].get(num.intValue());
            if (messageObject == null) {
                messageObject = messageObject2;
            } else if (messageObject2 != null) {
                messageObject.mediaExists = messageObject2.mediaExists;
                messageObject.attachPathExists = messageObject2.attachPathExists;
            }
            if (messageObject != null) {
                chatActivity.pinnedMessageObjects.put(num, messageObject);
                chatActivity.updatePinnedTopicStarterMessage();
            }
        }
        chatActivity.loadedPinnedMessagesCount = this.loadedPinnedMessagesCount;
        chatActivity.totalPinnedMessagesCount = this.isTopic ? this.pinnedMessageIds.size() : this.totalPinnedMessagesCount;
        chatActivity.pinnedEndReached = this.pinnedEndReached;
        chatActivity.userInfo = this.userInfo;
        chatActivity.chatInfo = this.chatInfo;
        chatActivity.chatActivityDelegate = new 58();
        if (z) {
            presentFragmentAsPreview(chatActivity);
            checkShowBlur(true);
            return;
        }
        presentFragment(chatActivity, false);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 58 implements ChatActivityDelegate {
        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onReport() {
            ChatActivityDelegate.-CC.$default$onReport(this);
        }

        58() {
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int i) {
            ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openSearch(String str) {
            ChatActivity.this.openSearchWithText(str);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void onUnpin(boolean z, final boolean z2) {
            if (!z) {
                MessageObject messageObject = (MessageObject) ChatActivity.this.pinnedMessageObjects.get(Integer.valueOf(ChatActivity.this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(ChatActivity.this.currentPinnedMessageId);
                }
                ChatActivity.this.unpinMessage(messageObject);
                return;
            }
            final ArrayList arrayList = new ArrayList(ChatActivity.this.pinnedMessageIds);
            final ArrayList arrayList2 = new ArrayList(ChatActivity.this.pinnedMessageObjects.values());
            if (z2) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.putInt("pin_" + ChatActivity.this.dialog_id, ((Integer) ChatActivity.this.pinnedMessageIds.get(0)).intValue()).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.FALSE, null, null, 0, 0, Boolean.TRUE);
            }
            if (ChatActivity.this.pinBulletin != null) {
                ChatActivity.this.pinBulletin.hide();
            }
            ChatActivity.this.showPinBulletin = true;
            final int access$27304 = ChatActivity.access$27304(ChatActivity.this);
            final int pinnedMessagesCount = ChatActivity.this.getPinnedMessagesCount();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.pinBulletin = BulletinFactory.createUnpinAllMessagesBulletin(chatActivity, pinnedMessagesCount, z2, new Runnable() { // from class: org.telegram.ui.ChatActivity$58$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.58.this.lambda$onUnpin$0(z2, arrayList, arrayList2, pinnedMessagesCount, access$27304);
                }
            }, new Runnable() { // from class: org.telegram.ui.ChatActivity$58$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.58.this.lambda$onUnpin$1(z2, access$27304);
                }
            }, ChatActivity.this.themeDelegate);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$0(boolean z, ArrayList arrayList, ArrayList arrayList2, int i, int i2) {
            if (z) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(((BaseFragment) ChatActivity.this).currentAccount).edit();
                edit.remove("pin_" + ChatActivity.this.dialog_id).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), arrayList, Boolean.TRUE, arrayList2, null, 0, Integer.valueOf(i), Boolean.valueOf(ChatActivity.this.pinnedEndReached));
            }
            if (i2 == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUnpin$1(boolean z, int i) {
            if (!z) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.isTopic) {
                    for (int i2 = 0; i2 < ChatActivity.this.pinnedMessageIds.size(); i2++) {
                        MessagesController messagesController = ChatActivity.this.getMessagesController();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        messagesController.pinMessage(chatActivity2.currentChat, chatActivity2.currentUser, ((Integer) chatActivity2.pinnedMessageIds.get(i2)).intValue(), true, false, false);
                    }
                } else {
                    MessagesController messagesController2 = chatActivity.getMessagesController();
                    ChatActivity chatActivity3 = ChatActivity.this;
                    messagesController2.unpinAllMessages(chatActivity3.currentChat, chatActivity3.currentUser);
                }
            }
            if (i == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkShowBlur(boolean z) {
        ForwardingPreviewView forwardingPreviewView;
        BluredView bluredView;
        BluredView bluredView2;
        INavigationLayout iNavigationLayout = this.parentLayout;
        boolean z2 = !(iNavigationLayout == null || !iNavigationLayout.isInPreviewMode() || this.parentLayout.hasIntegratedBlurInPreview() || this.inPreviewMode) || ((forwardingPreviewView = this.forwardingPreviewView) != null && forwardingPreviewView.isShowing());
        if (!z2 || ((bluredView2 = this.blurredView) != null && bluredView2.getTag() != null)) {
            if (z2 || (bluredView = this.blurredView) == null || bluredView.getTag() == null) {
                return;
            }
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().setListener(new HideViewAfterAnimation(this.blurredView)).alpha(0.0f).start();
            this.blurredView.setTag(null);
            this.chatListView.invalidate();
            this.fragmentView.invalidate();
            return;
        }
        BluredView bluredView3 = this.blurredView;
        if (bluredView3 == null) {
            BluredView bluredView4 = new BluredView(this.fragmentView.getContext(), this.fragmentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.59
                @Override // android.view.View
                public void setAlpha(float f) {
                    super.setAlpha(f);
                    ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                }

                @Override // android.view.View
                public void setVisibility(int i) {
                    super.setVisibility(i);
                    ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                }
            };
            this.blurredView = bluredView4;
            this.contentView.addView(bluredView4, LayoutHelper.createFrame(-1, -1.0f));
        } else {
            if (this.contentView.indexOfChild(bluredView3) != this.contentView.getChildCount() - 1) {
                this.contentView.removeView(this.blurredView);
                this.contentView.addView(this.blurredView);
            }
            this.blurredView.update();
            this.blurredView.setVisibility(0);
        }
        this.blurredView.setAlpha(0.0f);
        this.blurredView.animate().setListener(null).cancel();
        this.blurredView.animate().alpha(1.0f).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.60
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (((BaseFragment) ChatActivity.this).fragmentView == null || ChatActivity.this.chatListView == null) {
                    return;
                }
                ChatActivity.this.chatListView.invalidate();
                ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
            }
        }).start();
        this.blurredView.setTag(1);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getPreviewHeight() {
        if (this.chatMode == 2 && this.messages.size() == 2) {
            return getHeightForMessage(this.messages.get(0)) + AndroidUtilities.dp(80.0f) + ActionBar.getCurrentActionBarHeight();
        }
        return super.getPreviewHeight();
    }

    private boolean getLiteModeChat() {
        if (this.liteModeChat == null) {
            this.liteModeChat = Boolean.valueOf(LiteMode.isEnabled(LiteMode.FLAGS_CHAT));
        }
        return this.liteModeChat.booleanValue();
    }

    private void showProgressView(boolean z) {
        if (this.progressView == null) {
            return;
        }
        if (!AndroidUtilities.isTablet() && !this.isComments && this.currentUser == null && getLiteModeChat()) {
            this.animateProgressViewTo = z;
            return;
        }
        if (this.fragmentOpened && SharedConfig.animationsEnabled()) {
            if (z == this.animateProgressViewTo) {
                return;
            }
            this.animateProgressViewTo = z;
            if (z) {
                if (this.progressView.getVisibility() != 0) {
                    this.progressView.setVisibility(0);
                    this.progressView.setAlpha(0.0f);
                    this.progressView.setScaleX(0.3f);
                    this.progressView.setScaleY(0.3f);
                }
                this.progressView.animate().setListener(null).cancel();
                this.progressView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
                return;
            }
            this.progressView.animate().setListener(null).cancel();
            this.progressView.animate().alpha(0.0f).scaleX(0.3f).scaleY(0.3f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.61
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    ChatActivity.this.progressView.setVisibility(4);
                }
            }).start();
            return;
        }
        this.animateProgressViewTo = z;
        this.progressView.setVisibility(z ? 0 : 4);
    }

    private void hideInfoView() {
        if (this.distanceToPeer >= 0) {
            this.distanceToPeer = -1;
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_bar_distance" + this.dialog_id, -2).commit();
        }
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell == null || chatActionCell.getTag() == null) {
            return;
        }
        this.infoTopView.setTag(null);
        final ChatActionCell chatActionCell2 = this.infoTopView;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda16
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.this.lambda$hideInfoView$87(chatActionCell2, valueAnimator);
            }
        });
        ofFloat.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.62
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator2) {
                ChatActivity.this.topViewOffset = 0.0f;
                if (animator2 == ChatActivity.this.infoTopViewAnimator) {
                    ViewGroup viewGroup = (ViewGroup) chatActionCell2.getParent();
                    if (viewGroup != null) {
                        viewGroup.removeView(chatActionCell2);
                    }
                    ChatActivity.this.infoTopView = null;
                    ChatActivity.this.infoTopViewAnimator = null;
                }
            }
        });
        ofFloat.setDuration(150L);
        this.infoTopViewAnimator = ofFloat;
        ofFloat.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hideInfoView$87(View view, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * floatValue;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        view.setAlpha(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateChatListViewTopPadding() {
        float f;
        TranslateButton translateButton;
        View childAt;
        BlurredFrameLayout blurredFrameLayout;
        int i;
        ChatActivityEnterView chatActivityEnterView;
        if (!this.invalidateChatListViewTopPadding || this.chatListView == null) {
            return;
        }
        if (this.fixedKeyboardHeight <= 0 || this.searchExpandProgress != 0.0f) {
            BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
            float max = Math.max(0, (blurredFrameLayout2 == null || blurredFrameLayout2.getVisibility() != 0) ? 0 : this.topChatPanelView.getLayoutParams().height - AndroidUtilities.dp(2.0f));
            float max2 = max + Math.max(-max, this.topChatPanelViewOffset);
            BlurredFrameLayout blurredFrameLayout3 = this.pinnedMessageView;
            float max3 = (blurredFrameLayout3 == null || blurredFrameLayout3.getVisibility() != 0) ? 0.0f : Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            MessageObject messageObject = null;
            View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
            float max4 = (view == null || view.getVisibility() != 0) ? 0.0f : Math.max(0.0f, view.getHeight() + this.pendingRequestsDelegate.getViewEnterOffset());
            float f2 = this.chatListViewPaddingTop;
            float dp = AndroidUtilities.dp(4.0f) + this.contentPaddingTop + max2 + max3 + max4;
            this.chatListViewPaddingTop = dp;
            float f3 = dp + this.blurredViewTopOffset;
            this.chatListViewPaddingTop = f3;
            this.chatListViewPaddingVisibleOffset = 0;
            this.chatListViewPaddingTop = f3 + this.contentPanTranslation + this.bottomPanelTranslationY;
            if (this.searchExpandProgress == 0.0f || this.chatActivityEnterView.getVisibility() != 0) {
                f = 0.0f;
            } else {
                float f4 = this.chatListViewPaddingTop;
                f = this.searchExpandProgress * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f));
                this.chatListViewPaddingTop = f4 - f;
            }
            if (this.bottomPanelTranslationY == 0.0f && !this.chatActivityEnterView.panelAnimationInProgress() && (this.contentView.getLayoutParams().height < 0 || (this.contentView.getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()))) {
                this.chatListViewPaddingTop += (this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || this.inBubbleMode) ? this.contentView.getKeyboardHeight() : this.chatActivityEnterView.getEmojiPadding();
            }
            if (!this.inPreviewMode && (chatActivityEnterView = this.chatActivityEnterView) != null) {
                if (chatActivityEnterView.getAnimatedTop() != 0) {
                    this.chatListViewPaddingTop += (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f)) - this.chatActivityEnterView.getAnimatedTop();
                } else if (!this.chatActivityEnterView.panelAnimationInProgress()) {
                    float heightWithTopView = this.chatListViewPaddingTop + (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f));
                    this.chatListViewPaddingTop = heightWithTopView;
                    if (this.chatActivityEnterView.currentTopViewAnimation == null) {
                        this.chatListViewPaddingTop = heightWithTopView - this.chatListView.getTranslationY();
                    }
                }
            }
            ChatActionCell chatActionCell = this.infoTopView;
            if (chatActionCell != null) {
                chatActionCell.setTranslationY((this.chatListViewPaddingTop - AndroidUtilities.dp(30.0f)) + this.topViewOffset);
                float f5 = this.chatListViewPaddingTop;
                float f6 = this.topViewOffset;
                this.chatListViewPaddingTop = f5 + f6;
                this.chatListViewPaddingVisibleOffset = (int) (this.chatListViewPaddingVisibleOffset + f6);
            }
            ChatActionCell chatActionCell2 = this.floatingDateView;
            if (chatActionCell2 != null) {
                chatActionCell2.setTranslationY((((this.chatListView.getTranslationY() - f) + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
            }
            int measuredHeight = (this.chatListView.getMeasuredHeight() * 2) / 3;
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null && this.chatLayoutManager != null && this.chatAdapter != null) {
                if (recyclerListView.getPaddingTop() != measuredHeight) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= this.chatListView.getChildCount()) {
                            i = 0;
                            break;
                        }
                        View childAt2 = this.chatListView.getChildAt(i2);
                        if (childAt2 instanceof ChatMessageCell) {
                            messageObject = ((ChatMessageCell) childAt2).getMessageObject();
                            i = getScrollingOffsetForView(childAt2);
                            break;
                        } else if (childAt2 instanceof ChatActionCell) {
                            messageObject = ((ChatActionCell) childAt2).getMessageObject();
                            i = getScrollingOffsetForView(childAt2);
                            break;
                        } else {
                            i2++;
                        }
                    }
                    this.chatListView.setPadding(0, measuredHeight, 0, AndroidUtilities.dp(3.0f) + this.blurredViewBottomOffset);
                    if (messageObject != null) {
                        this.chatAdapter.updateRowsSafe();
                        int indexOf = this.messages.indexOf(messageObject);
                        if (indexOf >= 0) {
                            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf, i);
                        }
                    }
                    invalidateMessagesVisiblePart();
                }
                this.chatListView.setTopGlowOffset((int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f)));
                if (f2 != this.chatListViewPaddingTop) {
                    int childCount = this.chatListView.getChildCount();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= childCount) {
                            break;
                        }
                        if (this.chatListView.getChildAdapterPosition(this.chatListView.getChildAt(i3)) == this.chatAdapter.getItemCount() - 1) {
                            float f7 = this.chatListViewPaddingTop;
                            if (isThreadChat() && ((!this.isTopic || this.topicStarterMessageObject != null) && (blurredFrameLayout = this.pinnedMessageView) != null && blurredFrameLayout.getVisibility() == 0)) {
                                f7 -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
                            }
                            if (childAt.getTop() > f7) {
                                this.chatListView.scrollBy(0, (int) (childAt.getTop() - f7));
                            }
                        } else {
                            i3++;
                        }
                    }
                }
                if (!isThreadChat() && !this.wasManualScroll && this.unreadMessageObject != null && this.chatListView != null && ((translateButton = this.translateButton) == null || translateButton.getVisibility() != 0)) {
                    this.chatListView.scrollBy(0, (int) (f2 - this.chatListViewPaddingTop));
                }
            }
            this.invalidateChatListViewTopPadding = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void invalidateChatListViewTopPadding() {
        int i;
        if (!this.invalidateChatListViewTopPadding) {
            this.invalidateChatListViewTopPadding = true;
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (chatActivityFragmentView != null) {
                chatActivityFragmentView.invalidate();
            }
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0) {
            i = 0;
        } else {
            i = (this.topChatPanelView.getLayoutParams() == null ? AndroidUtilities.dp(50.0f) : this.topChatPanelView.getLayoutParams().height) - AndroidUtilities.dp(2.0f);
        }
        float max = this.contentPanTranslation + this.contentPaddingTop + Math.max(0, i + ((int) Math.max(-i, this.topChatPanelViewOffset)));
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            float f = max + this.pinnedMessageEnterOffset;
            blurredFrameLayout2.setTranslationY(f);
            max = f + AndroidUtilities.dp(48.0f);
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        View view = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        if (view != null) {
            view.setTranslationY(max + this.pendingRequestsDelegate.getViewEnterOffset());
        }
        float f2 = 0.0f;
        if (this.fragmentContextView != null) {
            FragmentContextView fragmentContextView = this.fragmentLocationContextView;
            float dp = (fragmentContextView == null || fragmentContextView.getVisibility() != 0) ? 0.0f : AndroidUtilities.dp(36.0f) + 0.0f;
            FragmentContextView fragmentContextView2 = this.fragmentContextView;
            fragmentContextView2.setTranslationY(this.contentPanTranslation + dp + fragmentContextView2.getTopPadding());
        }
        if (this.fragmentLocationContextView != null) {
            FragmentContextView fragmentContextView3 = this.fragmentContextView;
            if (fragmentContextView3 != null && fragmentContextView3.getVisibility() == 0) {
                f2 = 0.0f + AndroidUtilities.dp(this.fragmentContextView.getStyleHeight()) + this.fragmentContextView.getTopPadding();
            }
            FragmentContextView fragmentContextView4 = this.fragmentLocationContextView;
            fragmentContextView4.setTranslationY(this.contentPanTranslation + f2 + fragmentContextView4.getTopPadding());
        }
        BlurredFrameLayout blurredFrameLayout3 = this.topChatPanelView;
        if (blurredFrameLayout3 != null) {
            blurredFrameLayout3.setTranslationY(this.contentPanTranslation + this.contentPaddingTop + this.topChatPanelViewOffset);
        }
        FrameLayout frameLayout = this.alertView;
        if (frameLayout != null && frameLayout.getVisibility() == 0) {
            this.alertView.setTranslationY((this.contentPanTranslation + this.contentPaddingTop) - (AndroidUtilities.dp(50.0f) * (1.0f - this.alertViewEnterProgress)));
        }
        BlurredFrameLayout blurredFrameLayout4 = this.bottomOverlayChat;
        if (blurredFrameLayout4 != null) {
            blurredFrameLayout4.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        BlurredFrameLayout blurredFrameLayout5 = this.bottomMessagesActionContainer;
        if (blurredFrameLayout5 != null) {
            blurredFrameLayout5.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.setAdditionalTranslationY(this.chatActivityEnterView.getHeightWithTopView() - this.chatActivityEnterView.getAnimatedTop());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public TextureView createTextureView(boolean z) {
        if (this.parentLayout == null) {
            return null;
        }
        AndroidUtilities.cancelRunOnUIThread(this.destroyTextureViewRunnable);
        if (this.videoPlayerContainer == null) {
            if (Build.VERSION.SDK_INT >= 21) {
                FrameLayout frameLayout = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.63
                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.videoPlayerContainer = frameLayout;
                frameLayout.setOutlineProvider(new ViewOutlineProvider(this) { // from class: org.telegram.ui.ChatActivity.64
                    @Override // android.view.ViewOutlineProvider
                    @TargetApi(21)
                    public void getOutline(View view, Outline outline) {
                        ImageReceiver imageReceiver = (ImageReceiver) view.getTag(R.id.parent_tag);
                        if (imageReceiver != null) {
                            int[] roundRadius = imageReceiver.getRoundRadius();
                            int i = 0;
                            for (int i2 = 0; i2 < 4; i2++) {
                                i = Math.max(i, roundRadius[i2]);
                            }
                            outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), i);
                            return;
                        }
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        outline.setOval(0, 0, i3, i3);
                    }
                });
                this.videoPlayerContainer.setClipToOutline(true);
            } else {
                this.videoPlayerContainer = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.65
                    RectF rect = new RectF();

                    @Override // android.view.View
                    protected void onSizeChanged(int i, int i2, int i3, int i4) {
                        super.onSizeChanged(i, i2, i3, i4);
                        ChatActivity.this.aspectPath.reset();
                        ImageReceiver imageReceiver = (ImageReceiver) getTag(R.id.parent_tag);
                        if (imageReceiver == null) {
                            float f = i / 2;
                            ChatActivity.this.aspectPath.addCircle(f, i2 / 2, f, Path.Direction.CW);
                        } else {
                            int[] roundRadius = imageReceiver.getRoundRadius();
                            int i5 = 0;
                            for (int i6 = 0; i6 < 4; i6++) {
                                i5 = Math.max(i5, roundRadius[i6]);
                            }
                            this.rect.set(0.0f, 0.0f, i, i2);
                            ChatActivity.this.aspectPath.addRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                        }
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    @Override // android.view.View
                    public void setTranslationY(float f) {
                        super.setTranslationY(f);
                        ChatActivity.this.contentView.invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int i) {
                        super.setVisibility(i);
                        if (i == 0) {
                            setLayerType(2, null);
                        }
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (getTag() == null) {
                            canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                        }
                    }
                };
                this.aspectPath = new Path();
                Paint paint = new Paint(1);
                this.aspectPaint = paint;
                paint.setColor(-16777216);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout = aspectRatioFrameLayout;
            aspectRatioFrameLayout.setBackgroundColor(0);
            if (z) {
                this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }
            TextureView textureView = new TextureView(getParentActivity());
            this.videoTextureView = textureView;
            textureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup viewGroup = (ViewGroup) this.videoPlayerContainer.getParent();
        if (viewGroup != null && viewGroup != this.contentView) {
            viewGroup.removeView(this.videoPlayerContainer);
            viewGroup = null;
        }
        if (viewGroup == null) {
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            FrameLayout frameLayout2 = this.videoPlayerContainer;
            int i = AndroidUtilities.roundPlayingMessageSize;
            chatActivityFragmentView.addView(frameLayout2, 1, new FrameLayout.LayoutParams(i, i));
        }
        this.videoPlayerContainer.setTag(null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: destroyTextureView */
    public void lambda$new$0() {
        FrameLayout frameLayout = this.videoPlayerContainer;
        if (frameLayout == null || frameLayout.getParent() == null) {
            return;
        }
        this.chatListView.invalidateViews();
        this.aspectRatioFrameLayout.setDrawingReady(false);
        this.videoPlayerContainer.setTag(null);
        if (Build.VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, null);
        }
        this.contentView.removeView(this.videoPlayerContainer);
    }

    private boolean hasSelectedNoforwardsMessage() {
        TLRPC$Message tLRPC$Message;
        for (int i = 0; i < this.selectedMessagesIds.length; i++) {
            try {
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    MessageObject valueAt = this.selectedMessagesIds[i].valueAt(i2);
                    if (valueAt != null && (tLRPC$Message = valueAt.messageOwner) != null && tLRPC$Message.noforwards) {
                        return true;
                    }
                }
            } catch (Exception unused) {
            }
        }
        return false;
    }

    private void setPagedownLoading(final boolean z, boolean z2) {
        if (!z2 || Math.abs(this.pagedownLoadingT - (z ? 1.0f : 0.0f)) <= 0.01f) {
            if (z) {
                this.pagedownButtonArrow.setScaleX(0.0f);
                this.pagedownButtonArrow.setScaleY(0.0f);
                this.pagedownButtonArrow.setVisibility(8);
                this.pagedownButtonLoading.setVisibility(0);
                return;
            }
            this.pagedownButtonArrow.setScaleX(1.0f);
            this.pagedownButtonArrow.setScaleY(1.0f);
            this.pagedownButtonArrow.setVisibility(0);
            this.pagedownButtonLoading.setVisibility(8);
            return;
        }
        ValueAnimator valueAnimator = this.pagedownAnimator;
        if (valueAnimator != null) {
            valueAnimator.cancel();
        }
        final boolean[] zArr = new boolean[1];
        this.pagedownButtonArrow.setVisibility(0);
        float[] fArr = new float[2];
        fArr[0] = this.pagedownLoadingT;
        fArr[1] = z ? 1.0f : 0.0f;
        ValueAnimator ofFloat = ValueAnimator.ofFloat(fArr);
        this.pagedownAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda18
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$setPagedownLoading$88(zArr, z, valueAnimator2);
            }
        });
        this.pagedownAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.66
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                if (z) {
                    ChatActivity.this.pagedownButtonArrow.setVisibility(8);
                    if (zArr[0]) {
                        return;
                    }
                    ChatActivity.this.pagedownButtonLoadingDrawable.reset();
                    ChatActivity.this.pagedownButtonLoading.setVisibility(0);
                    return;
                }
                ChatActivity.this.pagedownButtonLoading.setVisibility(8);
            }
        });
        this.pagedownAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT);
        this.pagedownAnimator.setDuration(260L);
        this.pagedownAnimator.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setPagedownLoading$88(boolean[] zArr, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.pagedownLoadingT = floatValue;
        if (!zArr[0] && z && floatValue > 0.5f) {
            zArr[0] = true;
            this.pagedownButtonLoadingDrawable.reset();
            this.pagedownButtonLoading.setVisibility(0);
        }
        this.pagedownButtonLoading.setAlpha(Math.max(0.0f, (this.pagedownLoadingT - 0.5f) * 2.0f));
        this.pagedownButtonArrow.setScaleX(1.0f - this.pagedownLoadingT);
        this.pagedownButtonArrow.setScaleY(1.0f - this.pagedownLoadingT);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openForward(boolean z) {
        String string;
        if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
            if (getMessagesController().isChatNoForwards(this.currentChat)) {
                if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                    string = LocaleController.getString("ForwardsRestrictedInfoChannel", R.string.ForwardsRestrictedInfoChannel);
                } else {
                    string = LocaleController.getString("ForwardsRestrictedInfoGroup", R.string.ForwardsRestrictedInfoGroup);
                }
            } else {
                string = LocaleController.getString("ForwardsRestrictedInfoBot", R.string.ForwardsRestrictedInfoBot);
            }
            if (z) {
                if (this.fwdRestrictedTopHint == null) {
                    SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                    int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    HintView hintView = new HintView((Context) getParentActivity(), 7, true);
                    this.fwdRestrictedTopHint = hintView;
                    sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                    this.fwdRestrictedTopHint.setAlpha(0.0f);
                    this.fwdRestrictedTopHint.setVisibility(4);
                }
                this.fwdRestrictedTopHint.setText(string);
                this.fwdRestrictedTopHint.showForView(this.actionBar.getActionMode().getItem(11), true);
                return;
            }
            if (this.fwdRestrictedBottomHint == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout2 = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild2 = sizeNotifierFrameLayout2.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild2 == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 9);
                this.fwdRestrictedBottomHint = hintView2;
                sizeNotifierFrameLayout2.addView(hintView2, indexOfChild2 + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                this.fwdRestrictedBottomHint.setAlpha(0.0f);
                this.fwdRestrictedBottomHint.setVisibility(4);
            }
            this.fwdRestrictedBottomHint.setText(string);
            this.fwdRestrictedBottomHint.showForView(this.forwardButton, true);
            return;
        }
        int i = 0;
        boolean z2 = false;
        for (int i2 = 0; i2 < 2; i2++) {
            for (int i3 = 0; i3 < this.selectedMessagesIds[i2].size(); i3++) {
                MessageObject valueAt = this.selectedMessagesIds[i2].valueAt(i3);
                if (valueAt.isPoll()) {
                    i = valueAt.isPublicPoll() ? 2 : 1;
                    if (i == 2) {
                        break;
                    }
                } else if (valueAt.isInvoice()) {
                    z2 = true;
                }
            }
            if (i == 2) {
                break;
            }
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
            this.selectionReactionsOverlay.setHiddenByScroll(true);
        }
        Bundle bundle = new Bundle();
        bundle.putBoolean("onlySelect", true);
        bundle.putInt("dialogsType", 3);
        bundle.putInt("messagesCount", this.canForwardMessagesCount);
        bundle.putInt("hasPoll", i);
        bundle.putBoolean("hasInvoice", z2);
        bundle.putBoolean("canSelectTopics", true);
        DialogsActivity dialogsActivity = new DialogsActivity(bundle);
        dialogsActivity.setDelegate(this);
        presentFragment(dialogsActivity);
    }

    private void showBottomOverlayProgress(final boolean z, boolean z2) {
        if (!z || this.bottomOverlayProgress.getTag() == null) {
            if (z || this.bottomOverlayProgress.getTag() != null) {
                AnimatorSet animatorSet = this.bottomOverlayAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.bottomOverlayAnimation = null;
                }
                this.bottomOverlayProgress.setTag(z ? 1 : null);
                if (z2) {
                    this.bottomOverlayAnimation = new AnimatorSet();
                    if (z) {
                        this.bottomOverlayProgress.setVisibility(0);
                        this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 1.0f));
                        this.bottomOverlayAnimation.setStartDelay(200L);
                    } else {
                        this.bottomOverlayChatText.setVisibility(0);
                        this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 1.0f));
                    }
                    this.bottomOverlayAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.67
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                                return;
                            }
                            if (!z) {
                                ChatActivity.this.bottomOverlayProgress.setVisibility(4);
                            } else {
                                ChatActivity.this.bottomOverlayChatText.setVisibility(4);
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (ChatActivity.this.bottomOverlayAnimation == null || !ChatActivity.this.bottomOverlayAnimation.equals(animator)) {
                                return;
                            }
                            ChatActivity.this.bottomOverlayAnimation = null;
                        }
                    });
                    this.bottomOverlayAnimation.setDuration(150L);
                    this.bottomOverlayAnimation.start();
                    return;
                }
                this.bottomOverlayProgress.setVisibility(z ? 0 : 4);
                this.bottomOverlayProgress.setScaleX(z ? 1.0f : 0.1f);
                this.bottomOverlayProgress.setScaleY(z ? 1.0f : 0.1f);
                this.bottomOverlayProgress.setAlpha(1.0f);
                this.bottomOverlayChatText.setVisibility(z ? 4 : 0);
                this.bottomOverlayChatText.setScaleX(z ? 0.1f : 1.0f);
                this.bottomOverlayChatText.setScaleY(z ? 0.1f : 1.0f);
                this.bottomOverlayChatText.setAlpha(z ? 0.0f : 1.0f);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: sendBotInlineResult */
    public void lambda$createView$32(TLRPC$BotInlineResult tLRPC$BotInlineResult, boolean z, int i) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView == null) {
            return;
        }
        long contextBotId = mentionsContainerView.getAdapter().getContextBotId();
        HashMap hashMap = new HashMap();
        hashMap.put("id", tLRPC$BotInlineResult.id);
        hashMap.put("query_id", "" + tLRPC$BotInlineResult.query_id);
        hashMap.put("bot", "" + contextBotId);
        hashMap.put("bot_name", this.mentionContainer.getAdapter().getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(this, getAccountInstance(), tLRPC$BotInlineResult, hashMap, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z, i);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
        getMediaDataController().increaseInlineRaiting(contextBotId);
    }

    private void checkBotCommands() {
        TLRPC$Chat tLRPC$Chat;
        r0 = false;
        r0 = false;
        boolean z = false;
        URLSpanBotCommand.enabled = false;
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && tLRPC$User.bot) {
            URLSpanBotCommand.enabled = !UserObject.isReplyUser(tLRPC$User);
            return;
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
            for (int i = 0; i < this.chatInfo.participants.participants.size(); i++) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.chatInfo.participants.participants.get(i).user_id));
                if (user != null && user.bot) {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
            if (!tLRPC$ChatFull.bot_info.isEmpty() && (tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.megagroup) {
                z = true;
            }
            URLSpanBotCommand.enabled = z;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public MessageObject.GroupedMessages getValidGroupedMessage(MessageObject messageObject) {
        if (messageObject.getGroupId() != 0) {
            MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
            if (groupedMessages == null || (groupedMessages.messages.size() > 1 && groupedMessages.positions.get(messageObject) != null)) {
                return groupedMessages;
            }
            return null;
        }
        return null;
    }

    public void jumpToDate(int i) {
        int i2;
        TLRPC$Message tLRPC$Message;
        if (this.messages.isEmpty()) {
            return;
        }
        ArrayList<MessageObject> arrayList = this.messages;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        if ((this.messages.get(0).messageOwner.date >= i && messageObject.messageOwner.date <= i) || (messageObject.messageOwner.date >= i && this.endReached[0])) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if (messageObject2.messageOwner.date >= i && messageObject2.getId() != 0) {
                    scrollToMessageId(messageObject2.getId(), 0, false, messageObject2.getDialogId() != this.mergeDialogId ? 0 : 1, true, 0);
                    return;
                }
            }
        } else if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
            int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
            int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
            while (true) {
                if (findFirstVisibleItemPosition > findLastVisibleItemPosition) {
                    i2 = -1;
                    break;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (findFirstVisibleItemPosition < chatActivityAdapter.messagesStartRow || findFirstVisibleItemPosition >= chatActivityAdapter.messagesEndRow || (tLRPC$Message = this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow).messageOwner) == null) {
                    findFirstVisibleItemPosition++;
                } else {
                    int i3 = tLRPC$Message.date < i ? 1 : 0;
                    if (isSecretChat()) {
                        i3 ^= 1;
                    }
                    i2 = i3 ^ 1;
                }
            }
            this.chatScrollHelper.setScrollDirection(i2);
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            int i4 = this.lastLoadIndex;
            this.postponedScrollToLastMessageQueryIndex = i4;
            this.waitingForLoad.add(Integer.valueOf(i4));
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i5 = this.classGuid;
            int i6 = this.chatMode;
            int i7 = this.threadMessageId;
            int i8 = this.replyMaxReadId;
            int i9 = this.lastLoadIndex;
            this.lastLoadIndex = i9 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, i, true, 0, i5, 4, 0, i6, i7, i8, i9, this.isTopic);
            this.floatingDateView.setAlpha(0.0f);
            this.floatingDateView.setTag(null);
        }
    }

    public void processInlineBotWebView(TLRPC$TL_inlineBotWebView tLRPC$TL_inlineBotWebView) {
        BotWebViewSheet botWebViewSheet = new BotWebViewSheet(getContext(), getResourceProvider());
        botWebViewSheet.setParentActivity(getParentActivity());
        int i = this.currentAccount;
        TLRPC$User tLRPC$User = this.currentUser;
        botWebViewSheet.requestWebView(i, tLRPC$User != null ? tLRPC$User.id : this.currentChat.id, this.mentionContainer.getAdapter().getFoundContextBot().id, tLRPC$TL_inlineBotWebView.text, tLRPC$TL_inlineBotWebView.url, 1, 0, false, 1);
        botWebViewSheet.show();
    }

    public void processInlineBotContextPM(TLRPC$TL_inlineBotSwitchPM tLRPC$TL_inlineBotSwitchPM) {
        MentionsContainerView mentionsContainerView;
        TLRPC$User contextBotUser;
        if (tLRPC$TL_inlineBotSwitchPM == null || (mentionsContainerView = this.mentionContainer) == null || (contextBotUser = mentionsContainerView.getAdapter().getContextBotUser()) == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        long j = this.dialog_id;
        if (j == contextBotUser.id) {
            this.inlineReturn = j;
            getMessagesController().sendBotStart(this.currentUser, tLRPC$TL_inlineBotSwitchPM.start_param);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("user_id", contextBotUser.id);
        bundle.putString("inline_query", tLRPC$TL_inlineBotSwitchPM.start_param);
        bundle.putLong("inline_return", this.dialog_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    private void createChatAttachView() {
        if (getParentActivity() == null || getContext() == null || this.chatAttachAlert != null) {
            return;
        }
        ChatAttachAlert chatAttachAlert = new ChatAttachAlert(getParentActivity(), this, false, false, true, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.68
            @Override // org.telegram.ui.Components.ChatAttachAlert, org.telegram.ui.ActionBar.BottomSheet
            public void dismissInternal() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null && chatAttachAlert2.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                super.dismissInternal();
                ChatActivity.this.onEditTextDialogClose(false, true);
            }

            @Override // org.telegram.ui.ActionBar.BottomSheet
            public void onDismissAnimationStart() {
                ChatAttachAlert chatAttachAlert2 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.setFocusable(false);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.getEditField() != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().requestFocus();
                }
                ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert3 != null && chatAttachAlert3.isShowing()) {
                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                }
                ChatActivity.this.onEditTextDialogClose(false, false);
            }
        };
        this.chatAttachAlert = chatAttachAlert;
        chatAttachAlert.setDelegate(new ChatAttachAlert.ChatAttachViewDelegate() { // from class: org.telegram.ui.ChatActivity.69
            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void onWallpaperSelected(Object obj) {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$onWallpaperSelected(this, obj);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void openAvatarsSearch() {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$openAvatarsSearch(this);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public /* synthetic */ void sendAudio(ArrayList arrayList, CharSequence charSequence, boolean z, int i) {
                ChatAttachAlert.ChatAttachViewDelegate.-CC.$default$sendAudio(this, arrayList, charSequence, z, i);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didPressedButton(int i, boolean z, boolean z2, int i2, boolean z3) {
                ChatActivity chatActivity;
                ChatAttachAlert chatAttachAlert2;
                boolean z4;
                String str;
                if (ChatActivity.this.getParentActivity() == null || (chatAttachAlert2 = (chatActivity = ChatActivity.this).chatAttachAlert) == null) {
                    return;
                }
                chatActivity.editingMessageObject = chatAttachAlert2.getEditingMessageObject();
                if (i == 8 || i == 7 || (i == 4 && !ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos().isEmpty())) {
                    if (i != 8) {
                        ChatActivity.this.chatAttachAlert.dismiss(true);
                    }
                    HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos();
                    ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotosOrder();
                    if (!selectedPhotos.isEmpty()) {
                        for (int i3 = 0; i3 < Math.ceil(selectedPhotos.size() / 10.0f); i3++) {
                            int i4 = i3 * 10;
                            int min = Math.min(10, selectedPhotos.size() - i4);
                            ArrayList arrayList = new ArrayList();
                            for (int i5 = 0; i5 < min; i5++) {
                                int i6 = i4 + i5;
                                if (i6 < selectedPhotosOrder.size()) {
                                    MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(i6));
                                    SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                                    boolean z5 = photoEntry.isVideo;
                                    if (!z5 && (str = photoEntry.imagePath) != null) {
                                        sendingMediaInfo.path = str;
                                    } else {
                                        String str2 = photoEntry.path;
                                        if (str2 != null) {
                                            sendingMediaInfo.path = str2;
                                        }
                                    }
                                    sendingMediaInfo.thumbPath = photoEntry.thumbPath;
                                    sendingMediaInfo.isVideo = z5;
                                    CharSequence charSequence = photoEntry.caption;
                                    sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                                    sendingMediaInfo.entities = photoEntry.entities;
                                    sendingMediaInfo.masks = photoEntry.stickers;
                                    sendingMediaInfo.ttl = photoEntry.ttl;
                                    sendingMediaInfo.videoEditedInfo = photoEntry.editedInfo;
                                    sendingMediaInfo.canDeleteAfter = photoEntry.canDeleteAfter;
                                    sendingMediaInfo.updateStickersOrder = SendMessagesHelper.checkUpdateStickersOrder(photoEntry.caption);
                                    sendingMediaInfo.hasMediaSpoilers = photoEntry.hasSpoiler;
                                    arrayList.add(sendingMediaInfo);
                                    photoEntry.reset();
                                }
                            }
                            if (i3 == 0) {
                                ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).entities);
                                z4 = ((SendMessagesHelper.SendingMediaInfo) arrayList.get(0)).updateStickersOrder;
                            } else {
                                z4 = false;
                            }
                            SendMessagesHelper.prepareSendingMedia(ChatActivity.this.getAccountInstance(), arrayList, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, i == 4 || z3, z, ChatActivity.this.editingMessageObject, z2, i2, z4, null);
                        }
                        ChatActivity.this.afterMessageSend();
                        ChatActivity.this.chatActivityEnterView.setFieldText("");
                    }
                    if (i2 != 0) {
                        if (ChatActivity.this.scheduledMessagesCount == -1) {
                            ChatActivity.this.scheduledMessagesCount = 0;
                        }
                        ChatActivity.access$3612(ChatActivity.this, selectedPhotos.size());
                        ChatActivity.this.updateScheduledInterface(true);
                        return;
                    }
                    return;
                }
                ChatAttachAlert chatAttachAlert3 = ChatActivity.this.chatAttachAlert;
                if (chatAttachAlert3 != null) {
                    chatAttachAlert3.dismissWithButtonClick(i);
                }
                ChatActivity.this.processSelectedAttach(i);
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void didSelectBot(TLRPC$User tLRPC$User) {
                String publicUsername = UserObject.getPublicUsername(tLRPC$User);
                if (ChatActivity.this.chatActivityEnterView == null || tLRPC$User == null || TextUtils.isEmpty(publicUsername)) {
                    return;
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                chatActivityEnterView.setFieldText("@" + publicUsername + " ");
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void onCameraOpened() {
                ChatActivity.this.chatActivityEnterView.closeKeyboard();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public boolean needEnterComment() {
                return ChatActivity.this.needEnterText();
            }

            @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
            public void doOnIdle(Runnable runnable) {
                ChatActivity.this.lambda$openDiscussionMessageChat$255(runnable);
            }
        });
    }

    public boolean needEnterText() {
        boolean isKeyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        if (isKeyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
        return isKeyboardVisible;
    }

    public void onEditTextDialogClose(boolean z, boolean z2) {
        if (this.openKeyboardOnAttachMenuClose) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda160
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onEditTextDialogClose$89();
                }
            }, 50L);
            if (z2) {
                this.openKeyboardOnAttachMenuClose = false;
            }
        }
        if (z) {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onEditTextDialogClose$89() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* renamed from: doOnIdle */
    public void lambda$openDiscussionMessageChat$255(Runnable runnable) {
        NotificationCenter.getInstance(this.currentAccount).doOnIdle(runnable);
    }

    public void performHistoryClear(final boolean z, boolean z2) {
        this.clearingHistory = true;
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(this.dialog_id, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$90(z);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$performHistoryClear$91();
            }
        });
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$90(boolean z) {
        if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            this.pinnedMessageIds.clear();
            this.pinnedMessageObjects.clear();
            this.currentPinnedMessageId = 0;
            this.loadedPinnedMessagesCount = 0;
            this.totalPinnedMessagesCount = 0;
            updatePinnedMessageView(true);
        }
        getMessagesController().deleteDialog(this.dialog_id, 1, z);
        this.clearingHistory = false;
        clearHistory(false, null);
        this.chatAdapter.notifyDataSetChanged();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performHistoryClear$91() {
        this.clearingHistory = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface, org.telegram.ui.Components.InstantCameraView.Delegate
    public long getDialogId() {
        return this.dialog_id;
    }

    public int getDialogFolderId() {
        return this.dialogFolderId;
    }

    public int getDialogFilterId() {
        return this.dialogFilterId;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public boolean openedWithLivestream() {
        return this.livestream;
    }

    public UndoView getUndoView() {
        createUndoView();
        return this.undoView;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public long getMergeDialogId() {
        return this.mergeDialogId;
    }

    public boolean hasReportSpam() {
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        return (blurredFrameLayout == null || blurredFrameLayout.getTag() != null || this.reportSpamButton.getVisibility() == 8) ? false : true;
    }

    public boolean isReport() {
        return this.reportType >= 0;
    }

    public void setChatInvite(TLRPC$ChatInvite tLRPC$ChatInvite) {
        this.chatInvite = tLRPC$ChatInvite;
    }

    public void setBotUser(String str) {
        if (this.inlineReturn != 0) {
            getMessagesController().sendBotStart(this.currentUser, str);
            return;
        }
        this.botUser = str;
        updateBottomOverlay();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void afterMessageSend() {
        hideFieldPanel(false);
        if (this.chatMode == 0) {
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, true);
        }
    }

    private void toggleMesagesSearchListView() {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            showMessagesSearchListView(recyclerListView.getTag() == null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMessagesSearchListView(final boolean z) {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            if (!z || recyclerListView.getTag() == null) {
                if (z || this.messagesSearchListView.getTag() != null) {
                    AnimatorSet animatorSet = this.messagesSearchListViewAnimation;
                    if (animatorSet != null) {
                        animatorSet.cancel();
                        this.messagesSearchListViewAnimation = null;
                    }
                    if (z) {
                        this.messagesSearchListView.setVisibility(0);
                    }
                    this.messagesSearchListView.setTag(z ? 1 : null);
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.messagesSearchListViewAnimation = animatorSet2;
                    Animator[] animatorArr = new Animator[1];
                    RecyclerListView recyclerListView2 = this.messagesSearchListView;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z ? 1.0f : 0.0f;
                    animatorArr[0] = ObjectAnimator.ofFloat(recyclerListView2, property, fArr);
                    animatorSet2.playTogether(animatorArr);
                    this.messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
                    this.messagesSearchListViewAnimation.setDuration(180L);
                    this.messagesSearchListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.70
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                                if (z) {
                                    return;
                                }
                                ChatActivity.this.messagesSearchListView.setVisibility(8);
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animator) {
                            if (animator.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                                ChatActivity.this.messagesSearchListViewAnimation = null;
                            }
                        }
                    });
                    this.messagesSearchListViewAnimation.start();
                }
            }
        }
    }

    public boolean playFirstUnreadVoiceMessage() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordingAudioVideo()) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject = this.messages.get(size);
                if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                    MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                    return true;
                }
            }
            if (Build.VERSION.SDK_INT < 23 || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
                return false;
            }
            getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
            return true;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openScheduledMessages() {
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null || iNavigationLayout.getLastFragment() != this) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat != null) {
            bundle.putInt("enc_id", tLRPC$EncryptedChat.id);
        } else {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null) {
                bundle.putLong("chat_id", tLRPC$Chat.id);
            } else {
                bundle.putLong("user_id", this.currentUser.id);
            }
        }
        bundle.putInt("chatMode", 1);
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.71
            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onReport() {
                ChatActivityDelegate.-CC.$default$onReport(this);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2) {
                ChatActivityDelegate.-CC.$default$onUnpin(this, z, z2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openReplyMessage(int i) {
                ChatActivity.this.scrollToMessageId(i, 0, true, 0, true, 0);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openSearch(String str) {
                ChatActivity.this.openSearchWithText(str);
            }
        };
        presentFragment(chatActivity, false);
    }

    public void shareMyContact(final int i, final MessageObject messageObject) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null) {
            if (tLRPC$User.bot) {
                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
            } else {
                int i2 = R.string.AreYouSureShareMyContactInfoUser;
                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                TLRPC$User tLRPC$User2 = this.currentUser;
                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", i2, phoneFormat.format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(tLRPC$User2.first_name, tLRPC$User2.last_name))));
            }
        } else {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
        }
        builder.setPositiveButton(LocaleController.getString("ShareContact", R.string.ShareContact), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda35
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i3) {
                ChatActivity.this.lambda$shareMyContact$93(i, messageObject, dialogInterface, i3);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$93(int i, MessageObject messageObject, DialogInterface dialogInterface, int i2) {
        if (i == 1) {
            TLRPC$TL_contacts_acceptContact tLRPC$TL_contacts_acceptContact = new TLRPC$TL_contacts_acceptContact();
            tLRPC$TL_contacts_acceptContact.id = getMessagesController().getInputUser(this.currentUser);
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_acceptContact, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda253
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$shareMyContact$92(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(getUserConfig().getCurrentUser(), this.dialog_id, messageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0));
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        hideFieldPanel(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$shareMyContact$92(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showVoiceHint(boolean z, boolean z2) {
        ChatActivityEnterView chatActivityEnterView;
        int i;
        String str;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if ((z && this.voiceHintTextView == null) || this.chatMode != 0 || (chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getAudioVideoButtonContainer() == null || this.chatActivityEnterView.getAudioVideoButtonContainer().getVisibility() != 0 || isInPreviewMode()) {
            return;
        }
        if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.voiceHintTextView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        if (z) {
            this.voiceHintTextView.hide();
            return;
        }
        if (this.chatActivityEnterView.hasRecordVideo()) {
            HintView hintView2 = this.voiceHintTextView;
            if (z2) {
                i = R.string.HoldToVideo;
                str = "HoldToVideo";
            } else {
                i = R.string.HoldToAudio;
                str = "HoldToAudio";
            }
            hintView2.setText(LocaleController.getString(str, i));
        } else {
            this.voiceHintTextView.setText(LocaleController.getString("HoldToAudioOnly", R.string.HoldToAudioOnly));
        }
        this.voiceHintTextView.showForView(this.chatActivityEnterView.getAudioVideoButtonContainer(), true);
    }

    public boolean checkSlowMode(View view) {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            showSlowModeHint(view, true, slowModeTimer);
            return true;
        }
        return false;
    }

    public boolean checkSlowModeAlert() {
        CharSequence slowModeTimer = this.chatActivityEnterView.getSlowModeTimer();
        if (slowModeTimer != null) {
            new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString("Slowmode", R.string.Slowmode)).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, slowModeTimer))).setPositiveButton(LocaleController.getString("OK", R.string.OK), null).show();
            return false;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideHints(boolean z) {
        if (!z) {
            HintView hintView = this.slowModeHint;
            if (hintView != null) {
                hintView.hide();
            }
            HintView hintView2 = this.searchAsListHint;
            if (hintView2 != null) {
                hintView2.hide();
            }
            HintView hintView3 = this.scheduledOrNoSoundHint;
            if (hintView3 != null) {
                hintView3.hide();
            }
        }
        HintView hintView4 = this.fwdRestrictedBottomHint;
        if (hintView4 != null) {
            hintView4.hide();
        }
        HintView hintView5 = this.fwdRestrictedTopHint;
        if (hintView5 != null) {
            hintView5.hide();
        }
        HintView hintView6 = this.noSoundHintView;
        if (hintView6 != null) {
            hintView6.hide();
        }
        HintView hintView7 = this.forwardHintView;
        if (hintView7 != null) {
            hintView7.hide();
        }
        HintView hintView8 = this.pollHintView;
        if (hintView8 != null) {
            hintView8.hide();
        }
        HintView hintView9 = this.timerHintView;
        if (hintView9 != null) {
            hintView9.hide();
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null) {
            checksHintView.hide();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showSlowModeHint(View view, boolean z, CharSequence charSequence) {
        HintView hintView;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (z || ((hintView = this.slowModeHint) != null && hintView.getVisibility() == 0)) {
            this.slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, charSequence)));
            if (z) {
                this.slowModeHint.showForView(view, true);
            }
        }
    }

    public void showTimerHint() {
        String formatPluralString;
        if (getParentActivity() == null || this.fragmentView == null || this.chatInfo == null) {
            return;
        }
        if (this.timerHintView == null) {
            HintView hintView = new HintView(getParentActivity(), 7, true, this.themeDelegate);
            this.timerHintView = hintView;
            hintView.setAlpha(0.0f);
            this.timerHintView.setVisibility(4);
            this.timerHintView.setShowingDuration(4000L);
            this.contentView.addView(this.timerHintView, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        int i = this.chatInfo.ttl_period;
        if (i > 86400) {
            formatPluralString = LocaleController.formatPluralString("Days", i / 86400, new Object[0]);
        } else if (i >= 3600) {
            formatPluralString = LocaleController.formatPluralString("Hours", i / 3600, new Object[0]);
        } else if (i >= 60) {
            formatPluralString = LocaleController.formatPluralString("Minutes", i / 60, new Object[0]);
        } else {
            formatPluralString = LocaleController.formatPluralString("Seconds", i, new Object[0]);
        }
        this.timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", R.string.AutoDeleteSetInfo, formatPluralString));
        this.timerHintView.showForView(this.avatarContainer.getTimeItem(), true);
    }

    private void showSearchAsListHint() {
        if (getParentActivity() == null || this.fragmentView == null || this.searchCountText == null) {
            return;
        }
        if (this.searchAsListHint == null) {
            HintView hintView = new HintView(getParentActivity(), 3, this.themeDelegate);
            this.searchAsListHint = hintView;
            hintView.setAlpha(0.0f);
            this.searchAsListHint.setVisibility(4);
            this.searchAsListHint.setText(LocaleController.getString("TapToViewAsList", R.string.TapToViewAsList));
            this.contentView.addView(this.searchAsListHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        this.searchAsListHint.showForView(this.searchCountText, true);
    }

    private void showScheduledOrNoSoundHint() {
        TLRPC$ChatFull tLRPC$ChatFull;
        boolean z = UserObject.isUserSelf(this.currentUser) || ((tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        if (SharedConfig.scheduledOrNoSoundHintShows >= 3 || System.currentTimeMillis() % 4 != 0 || z) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledOrNoSoundRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledOrNoSoundRunnable, 200L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMediaBannedHint() {
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        int indexOfChild;
        if (getParentActivity() != null) {
            if ((this.currentChat == null && this.userInfo == null) || this.fragmentView == null) {
                return;
            }
            HintView hintView = this.mediaBanTooltip;
            if ((hintView == null || hintView.getVisibility() != 0) && (indexOfChild = (sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView).indexOfChild(this.chatActivityEnterView)) != -1) {
                try {
                    this.fragmentView.performHapticFeedback(3, 2);
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.mediaBanTooltip == null) {
                    HintView hintView2 = new HintView(getParentActivity(), 9, this.themeDelegate);
                    this.mediaBanTooltip = hintView2;
                    hintView2.setVisibility(8);
                    sizeNotifierFrameLayout.addView(this.mediaBanTooltip, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
                }
                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                if (tLRPC$UserFull != null && tLRPC$UserFull.voice_messages_forbidden) {
                    this.mediaBanTooltip.setText(AndroidUtilities.replaceTags(LocaleController.formatString(this.chatActivityEnterView.isInVideoMode() ? R.string.VideoMessagesRestrictedByPrivacy : R.string.VoiceMessagesRestrictedByPrivacy, this.currentUser.first_name)));
                } else if (!ChatObject.canSendVoice(this.currentChat) && !ChatObject.canSendRoundVideo(this.currentChat)) {
                    if (this.chatActivityEnterView.isInVideoMode()) {
                        this.mediaBanTooltip.setText(ChatObject.getRestrictedErrorText(this.currentChat, 21));
                    } else {
                        this.mediaBanTooltip.setText(ChatObject.getRestrictedErrorText(this.currentChat, 20));
                    }
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 20)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachVoiceRestricted", R.string.GlobalAttachVoiceRestricted));
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 21)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachRoundRestricted", R.string.GlobalAttachRoundRestricted));
                } else if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
                    this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", R.string.GlobalAttachMediaRestricted));
                } else {
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = this.currentChat.banned_rights;
                    if (tLRPC$TL_chatBannedRights == null) {
                        return;
                    }
                    if (AndroidUtilities.isBannedForever(tLRPC$TL_chatBannedRights)) {
                        this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
                    } else {
                        this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                    }
                }
                View sendButton = this.chatActivityEnterView.getSendButton();
                View audioVideoButtonContainer = this.chatActivityEnterView.getAudioVideoButtonContainer();
                if (sendButton.getAlpha() < audioVideoButtonContainer.getAlpha()) {
                    sendButton = audioVideoButtonContainer;
                }
                this.mediaBanTooltip.showForView(sendButton, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showNoSoundHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        AnimatedFileDrawable animation;
        if (this.scrollingChatListView || SharedConfig.noSoundHintShowed || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.noSoundHintView;
        if (hintView == null || hintView.getTag() == null) {
            if (this.noSoundHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 0, this.themeDelegate);
                this.noSoundHintView = hintView2;
                hintView2.setShowingDuration(10000L);
                sizeNotifierFrameLayout.addView(this.noSoundHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                this.noSoundHintView.setAlpha(0.0f);
                this.noSoundHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isVideo() && (animation = chatMessageCell.getPhotoImage().getAnimation()) != null && animation.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(chatMessageCell, true)) {
                    SharedConfig.setNoSoundHintShowed(true);
                    return;
                }
            }
        }
    }

    private void checkChecksHint() {
        if (getMessagesController().pendingSuggestions.contains("NEWCOMER_TICKS")) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda149
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.showChecksHint();
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChecksHint() {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView == null || checksHintView.getTag() == null) {
            if (this.checksHintView == null) {
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                ChecksHintView checksHintView2 = new ChecksHintView(getParentActivity(), this.themeDelegate);
                this.checksHintView = checksHintView2;
                sizeNotifierFrameLayout.addView(checksHintView2, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
                this.checksHintView.setAlpha(0.0f);
                this.checksHintView.setVisibility(4);
            }
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.isOutOwner() && messageObject.isSent() && this.checksHintView.showForMessageCell(chatMessageCell, true)) {
                    getMessagesController().removeSuggestion(0L, "NEWCOMER_TICKS");
                    return;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showForwardHint(ChatMessageCell chatMessageCell) {
        View view;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || (view = this.fragmentView) == null) {
            return;
        }
        if (this.forwardHintView == null) {
            SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
            int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
            if (indexOfChild == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 1, this.themeDelegate);
            this.forwardHintView = hintView;
            sizeNotifierFrameLayout.addView(hintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.forwardHintView.setAlpha(0.0f);
            this.forwardHintView.setVisibility(4);
        }
        this.forwardHintView.showForMessageCell(chatMessageCell, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:24:0x0045  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void showTextSelectionHint(MessageObject messageObject) {
        CharSequence charSequence;
        boolean z;
        if (getParentActivity() == null || getMessagesController().isChatNoForwards(messageObject.getChatId())) {
            return;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message == null || !tLRPC$Message.noforwards) {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = messageObject.textLayoutBlocks;
            if (arrayList != null && !arrayList.isEmpty()) {
                charSequence = messageObject.messageText;
                if (messageObject.textLayoutBlocks.size() > 1) {
                    z = true;
                    if (!z && charSequence != null) {
                        z = charSequence.length() > 200;
                    }
                    if (z || SharedConfig.textSelectionHintShows > 2 || this.textSelectionHintWasShowed || this.lastTouchY > this.chatActivityEnterView.getTop() - AndroidUtilities.dp(60.0f)) {
                        return;
                    }
                    this.textSelectionHintWasShowed = true;
                    SharedConfig.increaseTextSelectionHintShowed();
                    if (this.textSelectionHint == null) {
                        TextSelectionHint textSelectionHint = new TextSelectionHint(getParentActivity(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.72
                            @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                            protected void onMeasure(int i, int i2) {
                                super.onMeasure(i, i2);
                                updatePosition();
                            }

                            @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                            protected void onDraw(Canvas canvas) {
                                super.onDraw(canvas);
                                updatePosition();
                            }

                            public void updatePosition() {
                                int top = ChatActivity.this.chatActivityEnterView.getTop() - ChatActivity.this.contentView.getMeasuredHeight();
                                setTranslationY(top - ((top + (-(getMeasuredHeight() + AndroidUtilities.dp(16.0f)))) * (1.0f - getPrepareProgress())));
                            }
                        };
                        this.textSelectionHint = textSelectionHint;
                        this.contentView.addView(textSelectionHint, LayoutHelper.createFrame(-2, 56.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
                    }
                    this.textSelectionHint.show();
                    return;
                }
            } else {
                charSequence = messageObject.caption;
            }
            z = false;
            if (!z) {
                z = charSequence.length() > 200;
            }
            if (z) {
            }
        }
    }

    private boolean showGifHint() {
        View view;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0) {
            SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
            if (globalMainSettings.getBoolean("gifhint", false)) {
                return false;
            }
            globalMainSettings.edit().putBoolean("gifhint", true).commit();
            if (getParentActivity() != null && (view = this.fragmentView) != null && this.gifHintTextView == null) {
                if (!this.allowContextBotPanelSecond) {
                    ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    if (chatActivityEnterView2 != null) {
                        chatActivityEnterView2.setOpenGifsTabFirst();
                    }
                    return false;
                }
                SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout) view;
                int indexOfChild = sizeNotifierFrameLayout.indexOfChild(this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return false;
                }
                this.chatActivityEnterView.setOpenGifsTabFirst();
                View view2 = new View(getParentActivity());
                this.emojiButtonRed = view2;
                view2.setBackgroundResource(R.drawable.redcircle);
                int i = indexOfChild + 1;
                sizeNotifierFrameLayout.addView(this.emojiButtonRed, i, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
                this.gifHintTextView = hintView;
                hintView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
                sizeNotifierFrameLayout.addView(this.gifHintTextView, i, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                AnimatorSet animatorSet = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(this.gifHintTextView, View.ALPHA, 0.0f, 1.0f), ObjectAnimator.ofFloat(this.emojiButtonRed, View.ALPHA, 0.0f, 1.0f));
                animatorSet.addListener(new 74());
                animatorSet.setDuration(300L);
                animatorSet.start();
                View emojiButton = this.chatActivityEnterView.getEmojiButton();
                if (emojiButton != null) {
                    this.gifHintTextView.showForView(emojiButton, true);
                }
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 74 extends AnimatorListenerAdapter {
        74() {
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$74$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.74.this.lambda$onAnimationEnd$0();
                }
            }, 2000L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            if (ChatActivity.this.gifHintTextView == null) {
                return;
            }
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, 0.0f));
            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.74.1
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.gifHintTextView != null) {
                        ChatActivity.this.gifHintTextView.setVisibility(8);
                    }
                }
            });
            animatorSet.setDuration(300L);
            animatorSet.start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openAttachMenu() {
        if (getParentActivity() != null) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView == null || TextUtils.isEmpty(chatActivityEnterView.getSlowModeTimer())) {
                createChatAttachView();
                this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
                int i = Build.VERSION.SDK_INT;
                if (i == 21 || i == 22) {
                    this.chatActivityEnterView.closeKeyboard();
                }
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                    this.chatAttachAlert.setMaxSelectedPhotos(10, true);
                } else {
                    this.chatAttachAlert.setMaxSelectedPhotos(-1, true);
                }
                this.chatAttachAlert.init();
                this.chatAttachAlert.getCommentTextView().setText(this.chatActivityEnterView.getFieldText());
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                chatAttachAlert.parentThemeDelegate = this.themeDelegate;
                showDialog(chatAttachAlert);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showFloatingDateView(boolean z) {
        ChatActionCell chatActionCell = this.floatingDateView;
        if (chatActionCell == null) {
            return;
        }
        if (chatActionCell.getTag() == null) {
            AnimatorSet animatorSet = this.floatingDateAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            this.floatingDateView.setTag(1);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.floatingDateAnimation = animatorSet2;
            animatorSet2.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 1.0f));
            this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.75
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                        ChatActivity.this.floatingDateAnimation = null;
                    }
                }
            });
            this.floatingDateAnimation.start();
        }
        if (z) {
            return;
        }
        invalidateMessagesVisiblePart();
        this.hideDateDelay = 1000;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideFloatingDateView(boolean z) {
        if (this.floatingDateView.getTag() == null || this.currentFloatingDateOnScreen) {
            return;
        }
        if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
            this.floatingDateView.setTag(null);
            if (z) {
                AnimatorSet animatorSet = new AnimatorSet();
                this.floatingDateAnimation = animatorSet;
                animatorSet.setDuration(150L);
                this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 0.0f));
                this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.76
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                            ChatActivity.this.floatingDateAnimation = null;
                        }
                    }
                });
                this.floatingDateAnimation.setStartDelay(this.hideDateDelay);
                this.floatingDateAnimation.start();
            } else {
                AnimatorSet animatorSet2 = this.floatingDateAnimation;
                if (animatorSet2 != null) {
                    animatorSet2.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
            this.hideDateDelay = 500;
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRemoveFromParent() {
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && playingMessageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void setIgnoreAttachOnPause(boolean z) {
        this.ignoreAttachOnPause = z;
    }

    public ChatActivityEnterView getChatActivityEnterViewForStickers() {
        TLRPC$Chat tLRPC$Chat;
        if (this.bottomOverlayChat.getVisibility() == 0 || !((tLRPC$Chat = this.currentChat) == null || ChatObject.canSendStickers(tLRPC$Chat))) {
            return null;
        }
        return this.chatActivityEnterView;
    }

    public ChatActivityEnterView getChatActivityEnterView() {
        return this.chatActivityEnterView;
    }

    public boolean isKeyboardVisible() {
        return this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkScrollForLoad(boolean z) {
        if (this.chatLayoutManager == null || this.paused || this.chatAdapter.isFrozen) {
            return;
        }
        final int i = -1;
        final int i2 = 0;
        for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
            RecyclerListView recyclerListView = this.chatListView;
            int childAdapterPosition = recyclerListView.getChildAdapterPosition(recyclerListView.getChildAt(i3));
            if (childAdapterPosition != -1) {
                if (i == -1 || childAdapterPosition < i) {
                    i = childAdapterPosition;
                }
                i2++;
            }
        }
        final int itemCount = this.chatAdapter.getItemCount();
        final int i4 = z ? 25 : 5;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkScrollForLoad$94(itemCount, i, i2, i4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkScrollForLoad$94(int i, int i2, int i3, int i4) {
        if ((i - i2) - i3 <= i4 && !this.loading) {
            boolean[] zArr = this.endReached;
            if (!zArr[0]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.messagesByDays.size() != 0) {
                    MessagesController messagesController = getMessagesController();
                    long j = this.dialog_id;
                    long j2 = this.mergeDialogId;
                    int i5 = this.maxMessageId[0];
                    boolean z = !this.cacheEndReached[0];
                    int i6 = this.minDate[0];
                    int i7 = this.classGuid;
                    int i8 = this.chatMode;
                    int i9 = this.threadMessageId;
                    int i10 = this.replyMaxReadId;
                    int i11 = this.lastLoadIndex;
                    this.lastLoadIndex = i11 + 1;
                    messagesController.loadMessages(j, j2, false, 50, i5, 0, z, i6, i7, 0, 0, i8, i9, i10, i11, this.isTopic);
                } else {
                    MessagesController messagesController2 = getMessagesController();
                    long j3 = this.dialog_id;
                    long j4 = this.mergeDialogId;
                    boolean z2 = !this.cacheEndReached[0];
                    int i12 = this.minDate[0];
                    int i13 = this.classGuid;
                    int i14 = this.chatMode;
                    int i15 = this.threadMessageId;
                    int i16 = this.replyMaxReadId;
                    int i17 = this.lastLoadIndex;
                    this.lastLoadIndex = i17 + 1;
                    messagesController2.loadMessages(j3, j4, false, 50, 0, 0, z2, i12, i13, 0, 0, i14, i15, i16, i17, this.isTopic);
                }
            } else if (this.mergeDialogId != 0 && !zArr[1]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController3 = getMessagesController();
                long j5 = this.mergeDialogId;
                int i18 = this.maxMessageId[1];
                boolean z3 = !this.cacheEndReached[1];
                int i19 = this.minDate[1];
                int i20 = this.classGuid;
                int i21 = this.chatMode;
                int i22 = this.threadMessageId;
                int i23 = this.replyMaxReadId;
                int i24 = this.lastLoadIndex;
                this.lastLoadIndex = i24 + 1;
                messagesController3.loadMessages(j5, 0L, false, 50, i18, 0, z3, i19, i20, 0, 0, i21, i22, i23, i24, this.isTopic);
            }
        }
        if (i3 <= 0 || this.loadingForward || i2 > 10) {
            return;
        }
        if (this.mergeDialogId != 0 && !this.forwardEndReached[1]) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController4 = getMessagesController();
            long j6 = this.mergeDialogId;
            int i25 = this.minMessageId[1];
            int i26 = this.maxDate[1];
            int i27 = this.classGuid;
            int i28 = this.chatMode;
            int i29 = this.threadMessageId;
            int i30 = this.replyMaxReadId;
            int i31 = this.lastLoadIndex;
            this.lastLoadIndex = i31 + 1;
            messagesController4.loadMessages(j6, 0L, false, 50, i25, 0, true, i26, i27, 1, 0, i28, i29, i30, i31, this.isTopic);
            this.loadingForward = true;
        } else if (this.forwardEndReached[0]) {
        } else {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController5 = getMessagesController();
            long j7 = this.dialog_id;
            long j8 = this.mergeDialogId;
            int i32 = this.minMessageId[0];
            int i33 = this.maxDate[0];
            int i34 = this.classGuid;
            int i35 = this.chatMode;
            int i36 = this.threadMessageId;
            int i37 = this.replyMaxReadId;
            int i38 = this.lastLoadIndex;
            this.lastLoadIndex = i38 + 1;
            messagesController5.loadMessages(j7, j8, false, 50, i32, 0, true, i33, i34, 1, 0, i35, i36, i37, i38, this.isTopic);
            this.loadingForward = true;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processSelectedAttach(int i) {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        if (i == 0) {
            int i2 = Build.VERSION.SDK_INT;
            if (i2 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
                return;
            }
            try {
                Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
                File generatePicturePath = AndroidUtilities.generatePicturePath();
                if (generatePicturePath != null) {
                    if (i2 >= 24) {
                        Activity parentActivity = getParentActivity();
                        intent.putExtra("output", FileProvider.getUriForFile(parentActivity, ApplicationLoader.getApplicationId() + ".provider", generatePicturePath));
                        intent.addFlags(2);
                        intent.addFlags(1);
                    } else {
                        intent.putExtra("output", Uri.fromFile(generatePicturePath));
                    }
                    this.currentPicturePath = generatePicturePath.getAbsolutePath();
                }
                startActivityForResult(intent, 0);
            } catch (Exception e) {
                FileLog.e(e);
            }
        } else if (i == 1) {
            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
                    return;
                } catch (Throwable unused) {
                    return;
                }
            }
            PhotoAlbumPickerActivity photoAlbumPickerActivity = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_ALL, (ChatObject.isChannel(this.currentChat) && (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) != null && tLRPC$TL_chatBannedRights.send_gifs) ? false : true, true, this);
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            if (tLRPC$Chat != null && !ChatObject.hasAdminRights(tLRPC$Chat) && this.currentChat.slowmode_enabled) {
                photoAlbumPickerActivity.setMaxSelectedPhotos(10, true);
            } else {
                MessageObject messageObject = this.editingMessageObject;
                photoAlbumPickerActivity.setMaxSelectedPhotos(messageObject != null ? 1 : 0, messageObject == null);
            }
            photoAlbumPickerActivity.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() { // from class: org.telegram.ui.ChatActivity.77
                @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i3) {
                }

                @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void startPhotoSelectActivity() {
                    try {
                        Intent intent2 = new Intent();
                        intent2.setType("video/*");
                        intent2.setAction("android.intent.action.GET_CONTENT");
                        intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                        Intent intent3 = new Intent("android.intent.action.PICK");
                        intent3.setType("image/*");
                        Intent createChooser = Intent.createChooser(intent3, null);
                        createChooser.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{intent2});
                        ChatActivity.this.startActivityForResult(createChooser, 1);
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            });
            presentFragment(photoAlbumPickerActivity);
        } else if (i == 2) {
            int i3 = Build.VERSION.SDK_INT;
            if (i3 >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
                    return;
                } catch (Throwable unused2) {
                    return;
                }
            }
            try {
                Intent intent2 = new Intent("android.media.action.VIDEO_CAPTURE");
                File generateVideoPath = AndroidUtilities.generateVideoPath();
                if (generateVideoPath != null) {
                    if (i3 >= 24) {
                        Activity parentActivity2 = getParentActivity();
                        intent2.putExtra("output", FileProvider.getUriForFile(parentActivity2, ApplicationLoader.getApplicationId() + ".provider", generateVideoPath));
                        intent2.addFlags(2);
                        intent2.addFlags(1);
                    } else if (i3 >= 18) {
                        intent2.putExtra("output", Uri.fromFile(generateVideoPath));
                    }
                    intent2.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                    this.currentPicturePath = generateVideoPath.getAbsolutePath();
                }
                startActivityForResult(intent2, 2);
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
    }

    public boolean allowSendGifs() {
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        return (ChatObject.isChannel(this.currentChat) && (tLRPC$TL_chatBannedRights = this.currentChat.banned_rights) != null && tLRPC$TL_chatBannedRights.send_gifs) ? false : true;
    }

    public void openPollCreate(Boolean bool) {
        PollCreateActivity pollCreateActivity = new PollCreateActivity(this, bool);
        pollCreateActivity.setDelegate(new PollCreateActivity.PollCreateActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda291
            @Override // org.telegram.ui.PollCreateActivity.PollCreateActivityDelegate
            public final void sendPoll(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
                ChatActivity.this.lambda$openPollCreate$95(tLRPC$TL_messageMediaPoll, hashMap, z, i);
            }
        });
        presentFragment(pollCreateActivity);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openPollCreate$95(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) hashMap, z, i));
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectFiles(ArrayList<String> arrayList, String str, ArrayList<MessageObject> arrayList2, boolean z, int i) {
        String str2;
        fillEditingMediaWithCaption(str, null);
        if (checkSlowModeAlert()) {
            if (arrayList2.isEmpty() || TextUtils.isEmpty(str)) {
                str2 = str;
            } else {
                SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(str, this.dialog_id, null, null, null, true, null, null, null, true, 0, null, false));
                str2 = null;
            }
            getSendMessagesHelper().sendMessage(arrayList2, this.dialog_id, false, false, true, 0);
            SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), arrayList, arrayList, null, str2, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, z, i, null);
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i) {
        fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, true, false, this.editingMessageObject, z, i, arrayList.get(0).updateStickersOrder, null);
        afterMessageSend();
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    public void didSelectSearchPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, boolean z, int i) {
        boolean z2;
        if (!arrayList.isEmpty() && checkSlowModeAlert()) {
            int i2 = 0;
            while (true) {
                if (i2 >= arrayList.size()) {
                    z2 = false;
                    break;
                }
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i2);
                if (sendingMediaInfo.inlineResult == null && sendingMediaInfo.videoEditedInfo == null) {
                    z2 = true;
                    break;
                }
                i2++;
            }
            if (!z2 && !TextUtils.isEmpty(arrayList.get(0).caption)) {
                SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(arrayList.get(0).caption, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, arrayList.get(0).entities, null, null, z, i, null, false));
            }
            int i3 = 0;
            while (i3 < arrayList.size()) {
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo2 = arrayList.get(i3);
                if (sendingMediaInfo2.inlineResult != null && sendingMediaInfo2.videoEditedInfo == null) {
                    SendMessagesHelper.prepareSendingBotContextResult(this, getAccountInstance(), sendingMediaInfo2.inlineResult, sendingMediaInfo2.params, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z, i);
                    arrayList.remove(i3);
                    i3--;
                }
                i3++;
            }
            if (arrayList.isEmpty()) {
                return;
            }
            fillEditingMediaWithCaption(arrayList.get(0).caption, arrayList.get(0).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, true, this.editingMessageObject, z, i, arrayList.get(0).updateStickersOrder, null);
            afterMessageSend();
            if (i != 0) {
                if (this.scheduledMessagesCount == -1) {
                    this.scheduledMessagesCount = 0;
                }
                this.scheduledMessagesCount += arrayList.size();
                updateScheduledInterface(true);
            }
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void startDocumentSelectActivity() {
        try {
            Intent intent = new Intent("android.intent.action.GET_CONTENT");
            if (Build.VERSION.SDK_INT >= 18) {
                intent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
            }
            intent.setType("*/*");
            startActivityForResult(intent, 21);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean dismissDialogOnPause(Dialog dialog) {
        return (dialog == this.chatAttachAlert || dialog == this.chatThemeBottomSheet || !super.dismissDialogOnPause(dialog)) ? false : true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:38:0x007e A[ADDED_TO_REGION] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void searchLinks(final CharSequence charSequence, final boolean z) {
        TLRPC$WebPage tLRPC$WebPage;
        boolean z2;
        char charAt;
        if (this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview != 0) {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject == null || messageObject.isWebpage()) {
                if (z && (tLRPC$WebPage = this.foundWebPage) != null) {
                    String str = tLRPC$WebPage.url;
                    if (str != null) {
                        int indexOf = TextUtils.indexOf(charSequence, str);
                        if (indexOf == -1) {
                            String str2 = this.foundWebPage.display_url;
                            if (str2 != null) {
                                indexOf = TextUtils.indexOf(charSequence, str2);
                                z2 = (indexOf == -1 || this.foundWebPage.display_url.length() + indexOf != charSequence.length()) ? false : false;
                                if (indexOf != -1 && !z2) {
                                    charAt = charSequence.charAt(this.foundWebPage.display_url.length() + indexOf);
                                    if (indexOf != -1 && (z2 || charAt == ' ' || charAt == ',' || charAt == '.' || charAt == '!' || charAt == '/')) {
                                        return;
                                    }
                                }
                            } else {
                                z2 = false;
                            }
                            charAt = 0;
                            if (indexOf != -1) {
                                return;
                            }
                        } else {
                            z2 = this.foundWebPage.url.length() + indexOf == charSequence.length();
                            if (!z2) {
                                charAt = charSequence.charAt(this.foundWebPage.url.length() + indexOf);
                                if (indexOf != -1) {
                                }
                            }
                            charAt = 0;
                            if (indexOf != -1) {
                            }
                        }
                    }
                    this.pendingLinkSearchString = null;
                    this.foundUrls = null;
                    showFieldPanelForWebPage(false, this.foundWebPage, false);
                }
                final MessagesController messagesController = getMessagesController();
                Utilities.searchQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda197
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$searchLinks$102(charSequence, messagesController, z);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$102(final CharSequence charSequence, final MessagesController messagesController, final boolean z) {
        CharSequence charSequence2;
        URLSpanReplacement[] uRLSpanReplacementArr;
        boolean z2 = true;
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
            this.linkSearchRequestId = 0;
        }
        ArrayList<CharSequence> arrayList = null;
        try {
            Matcher matcher = AndroidUtilities.WEB_URL.matcher(charSequence);
            while (matcher.find()) {
                if (matcher.start() <= 0 || charSequence.charAt(matcher.start() - 1) != '@') {
                    if (arrayList == null) {
                        arrayList = new ArrayList<>();
                    }
                    arrayList.add(charSequence.subSequence(matcher.start(), matcher.end()));
                }
            }
            if ((charSequence instanceof Spannable) && (uRLSpanReplacementArr = (URLSpanReplacement[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class)) != null && uRLSpanReplacementArr.length > 0) {
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                }
                for (URLSpanReplacement uRLSpanReplacement : uRLSpanReplacementArr) {
                    arrayList.add(uRLSpanReplacement.getURL());
                }
            }
            if (arrayList != null && this.foundUrls != null && arrayList.size() == this.foundUrls.size()) {
                for (int i = 0; i < arrayList.size(); i++) {
                    if (!TextUtils.equals(arrayList.get(i), this.foundUrls.get(i))) {
                        z2 = false;
                    }
                }
                if (z2) {
                    return;
                }
            }
            this.foundUrls = arrayList;
        } catch (Exception e) {
            FileLog.e(e);
            String lowerCase = charSequence.toString().toLowerCase();
            if (charSequence.length() < 13 || !(lowerCase.contains("http://") || lowerCase.contains("https://"))) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda148
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$searchLinks$97();
                    }
                });
                return;
            }
            charSequence2 = charSequence;
        }
        if (arrayList == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda146
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$96();
                }
            });
            return;
        }
        charSequence2 = TextUtils.join(" ", arrayList);
        if (this.currentEncryptedChat != null && messagesController.secretWebpagePreview == 2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda206
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$searchLinks$99(messagesController, charSequence, z);
                }
            });
            return;
        }
        final TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
        if (charSequence2 instanceof String) {
            tLRPC$TL_messages_getWebPagePreview.message = (String) charSequence2;
        } else {
            tLRPC$TL_messages_getWebPagePreview.message = charSequence2.toString();
        }
        this.linkSearchRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda262
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$searchLinks$101(tLRPC$TL_messages_getWebPagePreview, tLObject, tLRPC$TL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.linkSearchRequestId, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$96() {
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage != null) {
            showFieldPanelForWebPage(false, tLRPC$WebPage, false);
            this.foundWebPage = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$97() {
        TLRPC$WebPage tLRPC$WebPage = this.foundWebPage;
        if (tLRPC$WebPage != null) {
            showFieldPanelForWebPage(false, tLRPC$WebPage, false);
            this.foundWebPage = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$99(final MessagesController messagesController, final CharSequence charSequence, final boolean z) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda40
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$searchLinks$98(messagesController, charSequence, z, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", R.string.SecretLinkPreviewAlert));
        showDialog(builder.create());
        messagesController.secretWebpagePreview = 0;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$98(MessagesController messagesController, CharSequence charSequence, boolean z, DialogInterface dialogInterface, int i) {
        messagesController.secretWebpagePreview = 1;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
        this.foundUrls = null;
        searchLinks(charSequence, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$101(final TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda218
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$searchLinks$100(tLRPC$TL_error, tLObject, tLRPC$TL_messages_getWebPagePreview);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$searchLinks$100(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview) {
        this.linkSearchRequestId = 0;
        if (tLRPC$TL_error == null) {
            if (tLObject instanceof TLRPC$TL_messageMediaWebPage) {
                TLRPC$WebPage tLRPC$WebPage = ((TLRPC$TL_messageMediaWebPage) tLObject).webpage;
                this.foundWebPage = tLRPC$WebPage;
                if (!(tLRPC$WebPage instanceof TLRPC$TL_webPage) && !(tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                    if (tLRPC$WebPage != null) {
                        showFieldPanelForWebPage(false, tLRPC$WebPage, false);
                        this.foundWebPage = null;
                        return;
                    }
                    return;
                }
                if (tLRPC$WebPage instanceof TLRPC$TL_webPagePending) {
                    this.pendingLinkSearchString = tLRPC$TL_messages_getWebPagePreview.message;
                }
                if (this.currentEncryptedChat != null && (tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                    tLRPC$WebPage.url = tLRPC$TL_messages_getWebPagePreview.message;
                }
                showFieldPanelForWebPage(true, tLRPC$WebPage, false);
                return;
            }
            TLRPC$WebPage tLRPC$WebPage2 = this.foundWebPage;
            if (tLRPC$WebPage2 != null) {
                showFieldPanelForWebPage(false, tLRPC$WebPage2, false);
                this.foundWebPage = null;
            }
        }
    }

    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean z, boolean z2, boolean z3, int i) {
        if (arrayList == null || arrayList.isEmpty() || !checkSlowModeAlert()) {
            return;
        }
        if ((i != 0) == (this.chatMode == 1)) {
            this.waitingForSendingMessageLoad = true;
        }
        int sendMessage = getSendMessagesHelper().sendMessage(arrayList, this.dialog_id, z, z2, z3, i, getThreadMessage());
        AlertsCreator.showSendMediaAlert(sendMessage, this, this.themeDelegate);
        if (sendMessage != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda177
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$forwardMessages$103();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$forwardMessages$103() {
        this.waitingForSendingMessageLoad = false;
        hideFieldPanel(true);
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public boolean shouldShowImport() {
        return this.openImport;
    }

    public void setOpenImport() {
        this.openImport = true;
    }

    private void checkBotKeyboard() {
        MessageObject messageObject;
        StringBuilder sb;
        if (this.chatActivityEnterView == null || (messageObject = this.botButtons) == null || this.userBlocked) {
            return;
        }
        if (messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyKeyboardForceReply) {
            SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
            if (this.isTopic) {
                sb = new StringBuilder();
                sb.append(this.dialog_id);
                sb.append("_");
                sb.append(getTopicId());
            } else {
                sb = new StringBuilder();
                sb.append("");
                sb.append(this.dialog_id);
            }
            String sb2 = sb.toString();
            if (mainSettings.getInt("answered_" + sb2, 0) != this.botButtons.getId()) {
                if (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null) {
                    MessageObject messageObject2 = this.botButtons;
                    this.botReplyButtons = messageObject2;
                    this.chatActivityEnterView.setButtons(messageObject2);
                    showFieldPanelForReply(this.botButtons);
                    return;
                }
                return;
            }
            return;
        }
        MessageObject messageObject3 = this.replyingMessageObject;
        if (messageObject3 != null && this.botReplyButtons == messageObject3) {
            this.botReplyButtons = null;
            hideFieldPanel(true);
        }
        this.chatActivityEnterView.setButtons(this.botButtons);
    }

    public void hideFieldPanel(boolean z) {
        showFieldPanel(false, null, null, null, null, true, 0, false, z);
    }

    public void hideFieldPanel(boolean z, int i, boolean z2) {
        showFieldPanel(false, null, null, null, null, z, i, false, z2);
    }

    public void showFieldPanelForWebPage(boolean z, TLRPC$WebPage tLRPC$WebPage, boolean z2) {
        showFieldPanel(z, null, null, null, tLRPC$WebPage, true, 0, z2, true);
    }

    public void showFieldPanelForForward(boolean z, ArrayList<MessageObject> arrayList) {
        showFieldPanel(z, null, null, arrayList, null, true, 0, false, true);
    }

    public void showFieldPanelForReply(MessageObject messageObject) {
        showFieldPanel(true, messageObject, null, null, null, true, 0, false, true);
    }

    public void showFieldPanelForEdit(boolean z, MessageObject messageObject) {
        showFieldPanel(z, null, messageObject, null, null, true, 0, false, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:160:0x0374  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x0814  */
    /* JADX WARN: Removed duplicated region for block: B:397:0x0891  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void showFieldPanel(boolean z, MessageObject messageObject, MessageObject messageObject2, ArrayList<MessageObject> arrayList, TLRPC$WebPage tLRPC$WebPage, boolean z2, int i, boolean z3, boolean z4) {
        MessageObject messageObject3;
        StringBuilder sb;
        ArrayList<MessageObject> arrayList2;
        boolean z5;
        boolean z6;
        TLRPC$Chat chat;
        TLRPC$User tLRPC$User;
        long j;
        long j2;
        TLRPC$Chat chat2;
        String str;
        CharSequence charSequence;
        ArrayList<TLRPC$MessageEntity> arrayList3;
        FrameLayout.LayoutParams layoutParams;
        FrameLayout.LayoutParams layoutParams2;
        FrameLayout.LayoutParams layoutParams3;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i2;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        TLObject tLObject;
        String string;
        String str2;
        MessageObject messageObject4 = messageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        boolean z7 = false;
        if (z) {
            if (messageObject4 == null && arrayList == null && messageObject2 == null && tLRPC$WebPage == null) {
                return;
            }
            hideHints(false);
            if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
                this.actionBar.closeSearchField(false);
                this.chatActivityEnterView.setFieldFocused();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda139
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showFieldPanel$104();
                    }
                }, 100L);
            }
            if (messageObject4 == null || messageObject.getDialogId() == this.dialog_id) {
                arrayList2 = arrayList;
                z5 = false;
            } else {
                arrayList2 = new ArrayList<>();
                arrayList2.add(messageObject4);
                messageObject4 = null;
                z5 = true;
            }
            this.chatActivityEnterTopView.setEditMode(false);
            if (messageObject2 != null) {
                this.forwardingMessages = null;
                if (this.threadMessageId == 0 || this.isTopic) {
                    if (this.isTopic) {
                        this.replyingMessageObject = this.threadMessageObject;
                    } else {
                        this.replyingMessageObject = null;
                    }
                    this.chatActivityEnterView.setReplyingMessageObject(null);
                    updateBottomOverlay();
                }
                this.editingMessageObject = messageObject2;
                boolean isMediaEmpty = messageObject2.isMediaEmpty();
                this.chatActivityEnterView.setEditingMessageObject(messageObject2, !isMediaEmpty);
                if (this.foundWebPage != null) {
                    return;
                }
                this.chatActivityEnterView.setForceShowSendButton(false, false);
                boolean canEditMedia = messageObject2.canEditMedia();
                this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelEdit", R.string.AccDescrCancelEdit));
                if (!isMediaEmpty && canEditMedia) {
                    if (messageObject2.isPhoto()) {
                        str2 = LocaleController.getString("EditMessageEditPhoto", R.string.EditMessageEditPhoto);
                        string = LocaleController.getString("EditMessageReplacePhoto", R.string.EditMessageReplacePhoto);
                    } else if (messageObject2.isVideo()) {
                        str2 = LocaleController.getString("EditMessageEditVideo", R.string.EditMessageEditVideo);
                        string = LocaleController.getString("EditMessageReplaceVideo", R.string.EditMessageReplaceVideo);
                    } else {
                        if (messageObject2.isGif()) {
                            string = LocaleController.getString("EditMessageReplaceGif", R.string.EditMessageReplaceGif);
                        } else if (messageObject2.isMusic()) {
                            string = LocaleController.getString("EditMessageReplaceAudio", R.string.EditMessageReplaceAudio);
                        } else {
                            string = LocaleController.getString("EditMessageReplaceFile", R.string.EditMessageReplaceFile);
                        }
                        str2 = null;
                    }
                    ChatActivityEnterTopView.EditViewButton[] buttons = this.chatActivityEnterTopView.getEditView().getButtons();
                    buttons[0].setEditButton(str2 != null);
                    buttons[0].getTextView().setText(str2 != null ? str2 : string);
                    buttons[0].getImageView().setImageResource(str2 != null ? R.drawable.msg_photoeditor : R.drawable.msg_replace);
                    buttons[1].setVisibility(str2 != null ? 0 : 8);
                    if (str2 != null) {
                        buttons[1].getTextView().setText(string);
                    }
                    this.chatActivityEnterTopView.setEditMode(true);
                } else {
                    this.replyIconImageView.setImageResource(R.drawable.group_edit);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrEditing", R.string.AccDescrEditing));
                    if (isMediaEmpty) {
                        this.replyNameTextView.setText(LocaleController.getString("EditMessage", R.string.EditMessage));
                    } else {
                        this.replyNameTextView.setText(LocaleController.getString("EditCaption", R.string.EditCaption));
                    }
                    if (canEditMedia) {
                        this.replyObjectTextView.setText(LocaleController.getString("EditMessageMedia", R.string.EditMessageMedia));
                    } else {
                        CharSequence charSequence2 = messageObject2.messageText;
                        if (charSequence2 != null || messageObject2.caption != null) {
                            CharSequence charSequence3 = messageObject2.caption;
                            String charSequence4 = charSequence3 != null ? charSequence3.toString() : charSequence2.toString();
                            if (charSequence4.length() > 150) {
                                charSequence4 = charSequence4.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                            }
                            Spannable spannableStringBuilder = new SpannableStringBuilder(Emoji.replaceEmoji(charSequence4.replace('\n', ' '), this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            MediaDataController.addTextStyleRuns(messageObject2, spannableStringBuilder);
                            TLRPC$Message tLRPC$Message = messageObject2.messageOwner;
                            if (tLRPC$Message != null) {
                                spannableStringBuilder = MessageObject.replaceAnimatedEmoji(spannableStringBuilder, tLRPC$Message.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                            this.replyObjectTextView.setText(AnimatedEmojiSpan.cloneSpans(spannableStringBuilder));
                        }
                    }
                }
            } else {
                long j3 = 0;
                if (messageObject4 != null) {
                    this.editingMessageObject = null;
                    this.replyingMessageObject = messageObject4;
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject4);
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    if (this.foundWebPage != null) {
                        return;
                    }
                    CharSequence restrictionReason = MessagesController.getRestrictionReason(messageObject4.messageOwner.restriction_reason);
                    this.chatActivityEnterView.setForceShowSendButton(false, false);
                    if (messageObject4.isFromUser()) {
                        if (messageObject4.messageOwner.from_id.channel_id != 0) {
                            TLRPC$Chat chat3 = getMessagesController().getChat(Long.valueOf(messageObject4.messageOwner.from_id.channel_id));
                            if (chat3 == null) {
                                return;
                            }
                            str = chat3.title;
                        } else {
                            TLRPC$User user = getMessagesController().getUser(Long.valueOf(messageObject4.messageOwner.from_id.user_id));
                            if (user == null) {
                                return;
                            }
                            str = UserObject.getUserName(user);
                        }
                    } else {
                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup && messageObject4.isForwardedChannelPost()) {
                            chat2 = getMessagesController().getChat(Long.valueOf(messageObject4.messageOwner.fwd_from.from_id.channel_id));
                        } else {
                            chat2 = getMessagesController().getChat(Long.valueOf(-messageObject4.getSenderId()));
                        }
                        if (chat2 == null) {
                            return;
                        }
                        str = chat2.title;
                    }
                    this.replyIconImageView.setImageResource(R.drawable.msg_panel_reply);
                    this.replyNameTextView.setText(str);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrReplying", R.string.AccDescrReplying));
                    this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelReply", R.string.AccDescrCancelReply));
                    if (TextUtils.isEmpty(restrictionReason)) {
                        if (MessageObject.isTopicActionMessage(messageObject4)) {
                            ForumUtilities.applyTopicToMessage(messageObject4);
                            restrictionReason = messageObject4.messageTextForReply;
                            if (restrictionReason == null) {
                                restrictionReason = messageObject4.messageTextShort;
                            }
                            AnimatedEmojiSpan.applyFontMetricsForString(restrictionReason, this.replyObjectTextView.getPaint());
                        } else {
                            TLRPC$TL_forumTopic tLRPC$TL_forumTopic = messageObject4.replyToForumTopic;
                            if (tLRPC$TL_forumTopic != null) {
                                restrictionReason = ForumUtilities.getTopicSpannedName(tLRPC$TL_forumTopic, this.replyObjectTextView.getPaint());
                            } else {
                                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject4.messageOwner.media;
                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame) {
                                    restrictionReason = Emoji.replaceEmoji(tLRPC$MessageMedia.game.title, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                    charSequence = messageObject4.messageOwner.media.game.title;
                                } else {
                                    CharSequence charSequence5 = messageObject4.messageText;
                                    if (charSequence5 == null && messageObject4.caption == null) {
                                        restrictionReason = null;
                                    } else {
                                        CharSequence charSequence6 = messageObject4.caption;
                                        CharSequence charSequence7 = charSequence6 != null ? charSequence6.toString() : charSequence5.toString();
                                        CharSequence replaceNewLines = AndroidUtilities.replaceNewLines(charSequence7.length() > 150 ? charSequence7.subSequence(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION) : charSequence7);
                                        TLRPC$Message tLRPC$Message2 = messageObject4.messageOwner;
                                        if (tLRPC$Message2 != null && (arrayList3 = tLRPC$Message2.entities) != null) {
                                            replaceNewLines = MessageObject.replaceAnimatedEmoji(replaceNewLines, arrayList3, this.replyObjectTextView.getPaint().getFontMetricsInt());
                                        }
                                        CharSequence replaceEmoji = Emoji.replaceEmoji(replaceNewLines, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                        charSequence = charSequence7;
                                        restrictionReason = replaceEmoji;
                                    }
                                }
                                if (restrictionReason != null) {
                                    if ((restrictionReason instanceof Spannable) && charSequence != null) {
                                        MediaDataController.addTextStyleRuns(messageObject4.messageOwner.entities, charSequence, (Spannable) restrictionReason);
                                    }
                                    this.replyObjectTextView.setText(AnimatedEmojiSpan.cloneSpans(restrictionReason));
                                }
                                updateBottomOverlay();
                            }
                        }
                        charSequence = null;
                        if (restrictionReason != null) {
                        }
                        updateBottomOverlay();
                    }
                    charSequence = restrictionReason;
                    if (restrictionReason != null) {
                    }
                    updateBottomOverlay();
                } else if (arrayList2 != null) {
                    if (arrayList2.isEmpty()) {
                        return;
                    }
                    if (this.threadMessageId == 0 || this.isTopic) {
                        if (this.isTopic) {
                            this.replyingMessageObject = this.threadMessageObject;
                        } else {
                            this.replyingMessageObject = null;
                        }
                        this.chatActivityEnterView.setReplyingMessageObject(this.replyingMessageObject);
                        updateBottomOverlay();
                    }
                    this.editingMessageObject = null;
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    if (this.forwardingMessages == null) {
                        this.forwardingMessages = new ForwardingMessagesParams(arrayList2, this.dialog_id);
                    }
                    if (this.foundWebPage != null) {
                        return;
                    }
                    this.chatActivityEnterView.setForceShowSendButton(true, false);
                    ArrayList arrayList4 = new ArrayList();
                    this.replyIconImageView.setImageResource(R.drawable.msg_panel_forward);
                    this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrForwarding", R.string.AccDescrForwarding));
                    this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelForward", R.string.AccDescrCancelForward));
                    MessageObject messageObject5 = arrayList2.get(0);
                    if (messageObject5.isFromUser()) {
                        arrayList4.add(Long.valueOf(messageObject5.messageOwner.from_id.user_id));
                    } else {
                        TLRPC$Chat chat4 = getMessagesController().getChat(Long.valueOf(messageObject5.messageOwner.peer_id.channel_id));
                        if (ChatObject.isChannel(chat4) && chat4.megagroup && messageObject5.isForwardedChannelPost()) {
                            arrayList4.add(Long.valueOf(-messageObject5.messageOwner.fwd_from.from_id.channel_id));
                        } else {
                            arrayList4.add(Long.valueOf(-messageObject5.messageOwner.peer_id.channel_id));
                        }
                    }
                    int i3 = (messageObject5.isAnimatedEmoji() || messageObject5.isDice()) ? 0 : messageObject5.type;
                    for (int i4 = 1; i4 < arrayList2.size(); i4++) {
                        MessageObject messageObject6 = arrayList2.get(i4);
                        if (messageObject6.isFromUser()) {
                            j2 = messageObject6.messageOwner.from_id.user_id;
                        } else {
                            TLRPC$Chat chat5 = getMessagesController().getChat(Long.valueOf(messageObject6.messageOwner.peer_id.channel_id));
                            if (ChatObject.isChannel(chat5) && chat5.megagroup && messageObject6.isForwardedChannelPost()) {
                                j = messageObject6.messageOwner.fwd_from.from_id.channel_id;
                            } else {
                                j = messageObject6.messageOwner.peer_id.channel_id;
                            }
                            j2 = -j;
                        }
                        if (!arrayList4.contains(Long.valueOf(j2))) {
                            arrayList4.add(Long.valueOf(j2));
                        }
                        if (arrayList2.get(i4).type != i3) {
                            i3 = -1;
                        }
                    }
                    StringBuilder sb2 = new StringBuilder();
                    int i5 = 0;
                    while (true) {
                        if (i5 >= arrayList4.size()) {
                            break;
                        }
                        Long l = (Long) arrayList4.get(i5);
                        if (l.longValue() > j3) {
                            tLRPC$User = getMessagesController().getUser(l);
                            chat = null;
                        } else {
                            chat = getMessagesController().getChat(Long.valueOf(-l.longValue()));
                            tLRPC$User = null;
                        }
                        if (tLRPC$User != null || chat != null) {
                            if (arrayList4.size() != 1) {
                                if (arrayList4.size() == 2 || sb2.length() == 0) {
                                    if (sb2.length() > 0) {
                                        sb2.append(", ");
                                    }
                                    if (tLRPC$User != null) {
                                        if (!TextUtils.isEmpty(tLRPC$User.first_name)) {
                                            sb2.append(tLRPC$User.first_name);
                                        } else if (!TextUtils.isEmpty(tLRPC$User.last_name)) {
                                            sb2.append(tLRPC$User.last_name);
                                        } else {
                                            sb2.append(" ");
                                        }
                                    } else {
                                        sb2.append(chat.title);
                                    }
                                } else {
                                    sb2.append(" ");
                                    sb2.append(LocaleController.formatPluralString("AndOther", arrayList4.size() - 1, new Object[0]));
                                    break;
                                }
                            } else if (tLRPC$User != null) {
                                sb2.append(UserObject.getUserName(tLRPC$User));
                            } else {
                                sb2.append(chat.title);
                            }
                        }
                        i5++;
                        j3 = 0;
                    }
                    if (i3 == -1 || i3 == 0 || i3 == 10 || i3 == 11 || i3 == 19) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardMessagesCount", arrayList2.size(), new Object[0]));
                    } else if (i3 == 1) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardPhoto", arrayList2.size(), new Object[0]));
                        if (arrayList2.size() == 1) {
                            messageObject4 = arrayList2.get(0);
                        }
                    } else if (i3 == 4) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardLocation", arrayList2.size(), new Object[0]));
                    } else if (i3 == 3) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardVideo", arrayList2.size(), new Object[0]));
                        if (arrayList2.size() == 1) {
                            messageObject4 = arrayList2.get(0);
                        }
                    } else if (i3 == 12) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardContact", arrayList2.size(), new Object[0]));
                    } else if (i3 == 2) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardAudio", arrayList2.size(), new Object[0]));
                    } else if (i3 == 5) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardRound", arrayList2.size(), new Object[0]));
                    } else if (i3 == 14) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardMusic", arrayList2.size(), new Object[0]));
                    } else if (i3 == 13 || i3 == 15) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardSticker", arrayList2.size(), new Object[0]));
                    } else if (i3 == 17) {
                        this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardPoll", arrayList2.size(), new Object[0]));
                    } else if (i3 == 8 || i3 == 9) {
                        if ((i3 == 9) & (arrayList2.size() == 1)) {
                            messageObject4 = arrayList2.get(0);
                        }
                        if (arrayList2.size() == 1 && i3 == 8) {
                            this.replyNameTextView.setText(LocaleController.getString("AttachGif", R.string.AttachGif));
                        } else {
                            this.replyNameTextView.setText(LocaleController.formatPluralString("PreviewForwardFile", arrayList2.size(), new Object[0]));
                        }
                    } else if (i3 == 23) {
                        if (arrayList2.size() == 1) {
                            this.replyNameTextView.setText(LocaleController.getString("Story", R.string.Story));
                        } else {
                            this.replyNameTextView.setText(LocaleController.formatPluralString("Stories", arrayList2.size(), new Object[0]));
                        }
                    }
                    if (this.forwardingMessages.hideForwardSendersName) {
                        this.replyObjectTextView.setText(LocaleController.getString("HiddenSendersNameDescription", R.string.HiddenSendersNameDescription));
                    } else if ((i3 == -1 || i3 == 0 || i3 == 10 || i3 == 11 || i3 == 19) && arrayList2.size() == 1 && arrayList2.get(0).messageText != null) {
                        MessageObject messageObject7 = arrayList2.get(0);
                        CharSequence spannableStringBuilder2 = new SpannableStringBuilder(messageObject7.messageText.toString());
                        if (spannableStringBuilder2.length() > 150) {
                            spannableStringBuilder2 = spannableStringBuilder2.subSequence(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                        }
                        CharSequence replaceEmoji2 = Emoji.replaceEmoji(spannableStringBuilder2, this.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                        if (replaceEmoji2 instanceof Spannable) {
                            MediaDataController.addTextStyleRuns(messageObject7.messageOwner.entities, messageObject7.messageText, (Spannable) replaceEmoji2);
                            TLRPC$Message tLRPC$Message3 = messageObject7.messageOwner;
                            if (tLRPC$Message3 != null) {
                                replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, tLRPC$Message3.entities, this.replyObjectTextView.getPaint().getFontMetricsInt());
                            }
                        }
                        this.replyObjectTextView.setText(replaceEmoji2);
                    } else {
                        this.replyObjectTextView.setText(LocaleController.formatString("ForwardingFromNames", R.string.ForwardingFromNames, sb2));
                    }
                    z6 = !SharedConfig.forwardingOptionsHintShown;
                    if (messageObject4 == null) {
                        messageObject4 = (messageObject2 == null || this.chatActivityEnterTopView.isEditMode()) ? null : messageObject2;
                    }
                    layoutParams = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
                    layoutParams2 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
                    layoutParams3 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
                    if (messageObject4 == null && TextUtils.isEmpty(MessagesController.getRestrictionReason(messageObject4.messageOwner.restriction_reason))) {
                        tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, 320);
                        tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs2, AndroidUtilities.dp(40.0f));
                        TLObject tLObject2 = messageObject4.photoThumbsObject2;
                        if (tLRPC$PhotoSize == null) {
                            if (messageObject4.mediaExists) {
                                tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.getPhotoSize());
                                if (tLRPC$PhotoSize != null) {
                                    i2 = tLRPC$PhotoSize.size;
                                    tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.dp(40.0f));
                                    tLObject = messageObject4.photoThumbsObject;
                                }
                            } else {
                                tLRPC$PhotoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, 320);
                            }
                            i2 = 0;
                            tLRPC$PhotoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject4.photoThumbs, AndroidUtilities.dp(40.0f));
                            tLObject = messageObject4.photoThumbsObject;
                        } else {
                            tLObject = tLObject2;
                            i2 = 0;
                        }
                    } else {
                        tLRPC$PhotoSize = null;
                        i2 = 0;
                        tLRPC$PhotoSize2 = null;
                        tLObject = null;
                    }
                    if (tLRPC$PhotoSize == tLRPC$PhotoSize2) {
                        tLRPC$PhotoSize2 = null;
                    }
                    if (tLRPC$PhotoSize != null || (tLRPC$PhotoSize instanceof TLRPC$TL_photoSizeEmpty) || (tLRPC$PhotoSize.location instanceof TLRPC$TL_fileLocationUnavailable) || messageObject4.isAnyKindOfSticker() || messageObject4.isSecretMedia() || messageObject4.isWebpageDocument()) {
                        this.replyImageView.setImageBitmap(null);
                        this.replyImageLocation = null;
                        this.replyImageLocationObject = null;
                        this.replyImageView.setVisibility(4);
                        int dp = AndroidUtilities.dp(52.0f);
                        layoutParams3.leftMargin = dp;
                        layoutParams2.leftMargin = dp;
                        layoutParams.leftMargin = dp;
                    } else {
                        if (messageObject4.isRoundVideo()) {
                            this.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0f));
                        } else {
                            this.replyImageView.setRoundRadius(AndroidUtilities.dp(2.0f));
                        }
                        this.replyImageSize = i2;
                        this.replyImageCacheType = 1;
                        this.replyImageLocation = tLRPC$PhotoSize;
                        this.replyImageThumbLocation = tLRPC$PhotoSize2;
                        this.replyImageLocationObject = tLObject;
                        this.replyImageHasMediaSpoiler = messageObject4.hasMediaSpoilers();
                        this.replyImageView.setImage(ImageLocation.getForObject(this.replyImageLocation, tLObject), this.replyImageHasMediaSpoiler ? "5_5_b" : "50_50", ImageLocation.getForObject(tLRPC$PhotoSize2, tLObject), this.replyImageHasMediaSpoiler ? "5_5_b" : "50_50_b", null, i2, 1, messageObject4);
                        this.replyImageView.setVisibility(0);
                        int dp2 = AndroidUtilities.dp(96.0f);
                        layoutParams3.leftMargin = dp2;
                        layoutParams2.leftMargin = dp2;
                        layoutParams.leftMargin = dp2;
                    }
                    this.replyNameTextView.setLayoutParams(layoutParams);
                    this.replyObjectTextView.setLayoutParams(layoutParams2);
                    this.replyObjectTextView.setLayoutParams(layoutParams3);
                    this.chatActivityEnterView.showTopView(true, z5);
                    z7 = z6;
                } else {
                    this.replyIconImageView.setImageResource(R.drawable.msg_link);
                    if (tLRPC$WebPage instanceof TLRPC$TL_webPagePending) {
                        this.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", R.string.GettingLinkInfo));
                        this.replyObjectTextView.setText(this.pendingLinkSearchString);
                    } else {
                        String str3 = tLRPC$WebPage.site_name;
                        if (str3 != null) {
                            this.replyNameTextView.setText(str3);
                        } else {
                            String str4 = tLRPC$WebPage.title;
                            if (str4 != null) {
                                this.replyNameTextView.setText(str4);
                            } else {
                                this.replyNameTextView.setText(LocaleController.getString("LinkPreview", R.string.LinkPreview));
                            }
                        }
                        String str5 = tLRPC$WebPage.title;
                        if (str5 != null) {
                            this.replyObjectTextView.setText(str5);
                        } else {
                            String str6 = tLRPC$WebPage.description;
                            if (str6 != null) {
                                this.replyObjectTextView.setText(str6);
                            } else {
                                String str7 = tLRPC$WebPage.author;
                                if (str7 != null) {
                                    this.replyObjectTextView.setText(str7);
                                } else {
                                    this.replyObjectTextView.setText(tLRPC$WebPage.display_url);
                                }
                            }
                        }
                        this.chatActivityEnterView.setWebPage(tLRPC$WebPage, true);
                    }
                }
            }
            z6 = false;
            if (messageObject4 == null) {
            }
            layoutParams = (FrameLayout.LayoutParams) this.replyNameTextView.getLayoutParams();
            layoutParams2 = (FrameLayout.LayoutParams) this.replyObjectTextView.getLayoutParams();
            layoutParams3 = (FrameLayout.LayoutParams) this.replyObjectHintTextView.getLayoutParams();
            if (messageObject4 == null) {
            }
            tLRPC$PhotoSize = null;
            i2 = 0;
            tLRPC$PhotoSize2 = null;
            tLObject = null;
            if (tLRPC$PhotoSize == tLRPC$PhotoSize2) {
            }
            if (tLRPC$PhotoSize != null) {
            }
            this.replyImageView.setImageBitmap(null);
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
            this.replyImageView.setVisibility(4);
            int dp3 = AndroidUtilities.dp(52.0f);
            layoutParams3.leftMargin = dp3;
            layoutParams2.leftMargin = dp3;
            layoutParams.leftMargin = dp3;
            this.replyNameTextView.setLayoutParams(layoutParams);
            this.replyObjectTextView.setLayoutParams(layoutParams2);
            this.replyObjectTextView.setLayoutParams(layoutParams3);
            this.chatActivityEnterView.showTopView(true, z5);
            z7 = z6;
        } else if (this.replyingMessageObject == null && this.forwardingMessages == null && this.foundWebPage == null && this.editingMessageObject == null && !chatActivityEnterView.isTopViewVisible()) {
            return;
        } else {
            MessageObject messageObject8 = this.replyingMessageObject;
            if (messageObject8 != null && (messageObject8.messageOwner.reply_markup instanceof TLRPC$TL_replyKeyboardForceReply)) {
                SharedPreferences mainSettings = MessagesController.getMainSettings(this.currentAccount);
                if (this.isTopic) {
                    sb = new StringBuilder();
                    sb.append(this.dialog_id);
                    sb.append("_");
                    sb.append(getTopicId());
                } else {
                    sb = new StringBuilder();
                    sb.append("");
                    sb.append(this.dialog_id);
                }
                String sb3 = sb.toString();
                mainSettings.edit().putInt("answered_" + sb3, this.replyingMessageObject.getId()).commit();
            }
            if (this.foundWebPage != null) {
                this.foundWebPage = null;
                this.chatActivityEnterView.setWebPage(null, !z3);
                if (tLRPC$WebPage != null && ((messageObject3 = this.replyingMessageObject) != null || this.forwardingMessages != null || this.editingMessageObject != null)) {
                    MessageObject messageObject9 = this.editingMessageObject;
                    ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
                    showFieldPanel(true, messageObject3, messageObject9, forwardingMessagesParams != null ? forwardingMessagesParams.messages : null, null, z2, i, false, true);
                    return;
                }
            }
            if (this.forwardingMessages != null) {
                ArrayList<MessageObject> arrayList5 = new ArrayList<>();
                this.forwardingMessages.getSelectedMessages(arrayList5);
                ForwardingMessagesParams forwardingMessagesParams2 = this.forwardingMessages;
                forwardMessages(arrayList5, forwardingMessagesParams2.hideForwardSendersName, forwardingMessagesParams2.hideCaption, z2, (i == 0 || i == 2147483646) ? i : i + 1);
                this.forwardingMessages = null;
            }
            this.chatActivityEnterView.setForceShowSendButton(false, z4);
            if (!this.waitingForSendingMessageLoad) {
                this.chatActivityEnterView.hideTopView(z4);
            }
            this.chatActivityEnterView.setReplyingMessageObject(this.threadMessageObject);
            this.chatActivityEnterView.setEditingMessageObject(null, false);
            this.topViewWasVisible = 0;
            this.replyingMessageObject = this.threadMessageObject;
            this.editingMessageObject = null;
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
            updateBottomOverlay();
        }
        if (z7) {
            if (this.tapForForwardingOptionsHitRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda167
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showFieldPanel$105();
                    }
                };
                this.tapForForwardingOptionsHitRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 6000L);
                return;
            }
            return;
        }
        Runnable runnable2 = this.tapForForwardingOptionsHitRunnable;
        if (runnable2 != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable2);
            this.tapForForwardingOptionsHitRunnable = null;
        }
        this.replyObjectTextView.setAlpha(1.0f);
        this.replyObjectHintTextView.setAlpha(0.0f);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showFieldPanel$104() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showFieldPanel$105() {
        this.showTapForForwardingOptionsHit = !this.showTapForForwardingOptionsHit;
        this.replyObjectTextView.setPivotX(0.0f);
        this.replyObjectHintTextView.setPivotX(0.0f);
        if (this.showTapForForwardingOptionsHit) {
            this.replyObjectTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
        } else {
            this.replyObjectTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
        }
        AndroidUtilities.runOnUIThread(this.tapForForwardingOptionsHitRunnable, 6000L);
    }

    private void moveScrollToLastMessage(boolean z) {
        if (this.chatListView == null || this.messages.isEmpty() || this.pinchToZoomHelper.isInOverlayMode()) {
            return;
        }
        this.chatLayoutManager.scrollToPositionWithOffset(z ? getSponsoredMessagesCount() + 0 : 0, 0);
        this.chatListView.stopScroll();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Runnable sendSecretMessageRead(final MessageObject messageObject, boolean z) {
        int i;
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia()) {
            return null;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message.destroyTime != 0 || (i = tLRPC$Message.ttl) <= 0) {
            return null;
        }
        tLRPC$Message.destroyTime = i + getConnectionsManager().getCurrentTime();
        if (z) {
            if (this.currentEncryptedChat != null) {
                MessagesController messagesController = getMessagesController();
                long j = this.dialog_id;
                TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                messagesController.markMessageAsRead(j, tLRPC$Message2.random_id, tLRPC$Message2.ttl);
            } else {
                getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
            }
            return null;
        }
        return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$sendSecretMessageRead$106(messageObject);
            }
        };
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSecretMessageRead$106(MessageObject messageObject) {
        if (this.currentEncryptedChat != null) {
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            messagesController.markMessageAsRead(j, tLRPC$Message.random_id, tLRPC$Message.ttl);
            return;
        }
        getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            showProgressView(chatActivityAdapter.botInfoRow < 0);
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        for (int i = 0; i < 2; i++) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.endReached[i] = false;
            this.cacheEndReached[i] = false;
            this.forwardEndReached[i] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.showScrollToMessageError = false;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
    }

    public void scrollToLastMessage(boolean z, boolean z2) {
        scrollToLastMessage(z, z2, null);
    }

    public void scrollToLastMessage(boolean z, final boolean z2, Runnable runnable) {
        ArrayList<MessageObject> arrayList;
        int i;
        if (this.chatListView.isFastScrollAnimationRunning()) {
            return;
        }
        final int i2 = 0;
        this.forceNextPinnedMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceScrollToFirst = false;
        this.chatScrollHelper.setScrollDirection(0);
        if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
            setPagedownLoading(false, true);
            if (this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
                this.canShowPagedownButton = false;
                updatePagedownButtonVisibility(true);
                removeSelectedMessageHighlight();
                updateVisibleRows();
                return;
            }
            this.chatAdapter.updateRowsSafe();
            this.chatScrollHelperCallback.scrollTo = null;
            if (z) {
                while (i2 < this.messages.size() && this.messages.get(i2).isSponsored()) {
                    i2++;
                }
            }
            if (z2 && (arrayList = this.messages) != null && arrayList.size() > 0 && this.messages.get(i2) != null) {
                long groupId = this.messages.get(i2).getGroupId();
                while (groupId != 0 && (i = i2 + 1) < this.messages.size() && groupId == this.messages.get(i).getGroupId()) {
                    i2 = i;
                }
            }
            ArrayList<MessageObject> arrayList2 = this.messages;
            if (arrayList2 != null && arrayList2.size() > 0) {
                i2 = Math.min(i2, this.messages.size() - 1);
            }
            new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda194
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$scrollToLastMessage$107(i2, z2);
                }
            }.run();
            return;
        }
        AlertDialog alertDialog = this.progressDialog;
        if (alertDialog != null) {
            alertDialog.dismiss();
        }
        updatePinnedListButton(false);
        if (runnable != null) {
            runnable.run();
        } else {
            resetProgressDialogLoading();
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
        }
        this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
        this.postponedScrollMessageId = 0;
        this.postponedScrollIsCanceled = false;
        this.waitingForLoad.clear();
        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda145
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$scrollToLastMessage$109();
            }
        }, 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$107(int i, boolean z) {
        this.chatScrollHelper.scrollToPosition(this.chatScrollHelperCallback.position = i, this.chatScrollHelperCallback.offset = 0, this.chatScrollHelperCallback.bottom = !z, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToLastMessage$109() {
        MessagesController messagesController = getMessagesController();
        long j = this.dialog_id;
        long j2 = this.mergeDialogId;
        int i = this.classGuid;
        int i2 = this.chatMode;
        int i3 = this.threadMessageId;
        int i4 = this.replyMaxReadId;
        int i5 = this.lastLoadIndex;
        this.lastLoadIndex = i5 + 1;
        messagesController.loadMessages(j, j2, false, 30, 0, 0, true, 0, i, 0, 0, i2, i3, i4, i5, this.isTopic);
    }

    public void updateTextureViewPosition(boolean z, boolean z2) {
        boolean z3;
        MessageObject playingMessageObject;
        if (this.fragmentView == null || this.paused) {
            return;
        }
        int childCount = this.chatListView.getChildCount();
        int i = 0;
        while (true) {
            if (i >= childCount) {
                z3 = false;
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                if (this.videoPlayerContainer != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && !messageObject.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject))) {
                    ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.videoPlayerContainer.getLayoutParams();
                    if (messageObject.isRoundVideo()) {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, null);
                        int i2 = layoutParams.width;
                        int i3 = AndroidUtilities.roundPlayingMessageSize;
                        if (i2 != i3 || layoutParams.height != i3) {
                            layoutParams.height = i3;
                            layoutParams.width = i3;
                            this.aspectRatioFrameLayout.setResizeMode(0);
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        float f = (AndroidUtilities.roundPlayingMessageSize + (AndroidUtilities.roundMessageInset * 2)) / AndroidUtilities.roundPlayingMessageSize;
                        float imageWidth = chatMessageCell.getPhotoImage().getImageWidth() / AndroidUtilities.roundPlayingMessageSize;
                        if (this.videoPlayerContainer.getScaleX() != imageWidth) {
                            this.videoPlayerContainer.invalidate();
                            this.fragmentView.invalidate();
                        }
                        this.videoPlayerContainer.setPivotX(0.0f);
                        this.videoPlayerContainer.setPivotY(0.0f);
                        this.videoPlayerContainer.setScaleX(imageWidth);
                        this.videoPlayerContainer.setScaleY(imageWidth);
                        this.videoTextureView.setScaleX(f);
                        this.videoTextureView.setScaleY(f);
                    } else {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, photoImage);
                        if (layoutParams.width != photoImage.getImageWidth() || layoutParams.height != photoImage.getImageHeight()) {
                            this.aspectRatioFrameLayout.setResizeMode(3);
                            layoutParams.width = (int) photoImage.getImageWidth();
                            layoutParams.height = (int) photoImage.getImageHeight();
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        this.videoTextureView.setScaleX(1.0f);
                        this.videoTextureView.setScaleY(1.0f);
                    }
                    this.fragmentView.invalidate();
                    this.videoPlayerContainer.invalidate();
                    z3 = true;
                }
            }
            i++;
        }
        if (!z || this.videoPlayerContainer == null || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || playingMessageObject.eventId != 0) {
            return;
        }
        if (!z3) {
            if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                MediaController.getInstance().cleanupPlayer(true, true);
                return;
            }
            this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
            this.fragmentView.invalidate();
            if (playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) {
                if (this.checkTextureViewPosition || PipRoundVideoView.getInstance() != null) {
                    MediaController.getInstance().setCurrentVideoVisible(false);
                    return;
                } else if (z2) {
                    scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true, 0);
                    return;
                } else {
                    return;
                }
            }
            return;
        }
        MediaController.getInstance().setCurrentVideoVisible(true);
        if (playingMessageObject.isRoundVideo() || this.scrollToVideo) {
            return;
        }
        this.chatListView.invalidate();
    }

    public void invalidateMessagesVisiblePart() {
        this.invalidateMessagesVisiblePart = true;
        View view = this.fragmentView;
        if (view != null) {
            view.invalidate();
        }
    }

    private Integer findClosest(ArrayList<Integer> arrayList, int i, int[] iArr) {
        if (arrayList.isEmpty()) {
            return 0;
        }
        Integer num = arrayList.get(0);
        if (i >= num.intValue()) {
            iArr[0] = 0;
            return num;
        }
        int size = arrayList.size();
        int i2 = size - 1;
        Integer num2 = arrayList.get(i2);
        if (i <= num2.intValue()) {
            iArr[0] = i2;
            return num2;
        }
        int i3 = 0;
        int i4 = 0;
        while (i3 < size) {
            i4 = (i3 + size) / 2;
            Integer num3 = arrayList.get(i4);
            if (num3.intValue() == i) {
                iArr[0] = i4;
                return num3;
            } else if (i < num3.intValue()) {
                if (i4 > 0) {
                    int i5 = i4 - 1;
                    Integer num4 = arrayList.get(i5);
                    if (i > num4.intValue()) {
                        iArr[0] = i5;
                        return num4;
                    }
                }
                i3 = i4 + 1;
            } else if (i4 > 0 && i < arrayList.get(i4 - 1).intValue()) {
                iArr[0] = i4;
                return num3;
            } else {
                size = i4;
            }
        }
        iArr[0] = i4;
        return arrayList.get(i4);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:282:0x059a  */
    /* JADX WARN: Removed duplicated region for block: B:285:0x05a6  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00de  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00ec  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateMessagesVisiblePart(boolean z) {
        Integer num;
        MessageObject messageObject;
        int i;
        char c;
        AnimatorSet animatorSet;
        boolean z2;
        MessageObject messageObject2;
        int indexOf;
        ArrayList<Integer> arrayList;
        int i2;
        int i3;
        boolean z3;
        boolean z4;
        ChatMessageCell chatMessageCell;
        float f;
        ChatMessageCell chatMessageCell2;
        MessageObject messageObject3;
        float f2;
        int i4;
        int i5;
        boolean z5;
        View view;
        boolean z6;
        float f3;
        int i6;
        float f4;
        int i7;
        MessageObject messageObject4;
        int i8;
        int i9;
        MessageObject messageObject5;
        View view2;
        ChatMessageCell chatMessageCell3;
        boolean z7;
        ChatMessageCell chatMessageCell4;
        ChatListItemAnimator chatListItemAnimator;
        boolean z8;
        boolean z9;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null || this.fragmentView == null) {
            return;
        }
        int childCount = recyclerListView.getChildCount();
        int measuredHeight = this.chatListView.getMeasuredHeight();
        boolean z10 = this.threadMessageVisible;
        int i10 = this.currentPinnedMessageId;
        this.threadMessageVisible = this.firstLoading;
        int i11 = this.threadMessageId;
        if (i11 != 0 && this.currentChat != null) {
            num = Integer.valueOf(this.replyMaxReadId);
        } else {
            num = getMessagesController().dialogs_read_inbox_max.get(this.dialog_id_Long);
        }
        int i12 = 0;
        if (num == null) {
            num = 0;
        }
        Integer num2 = num;
        int heightWithKeyboard = (this.contentView.getHeightWithKeyboard() - (this.inPreviewMode ? 0 : AndroidUtilities.dp(48.0f))) - this.chatListView.getTop();
        this.pollsToCheck.clear();
        float f5 = this.chatListViewPaddingTop;
        long currentTimeMillis = System.currentTimeMillis();
        boolean z11 = SharedConfig.chatBlurEnabled() && Color.alpha(Theme.getColor(Theme.key_chat_BlurAlpha)) != 255;
        MessageObject messageObject6 = this.isTopic ? this.topicStarterMessageObject : this.threadMessageObject;
        int i13 = -1;
        int i14 = -1;
        int i15 = -1;
        int i16 = Integer.MIN_VALUE;
        MessageObject messageObject7 = null;
        int i17 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i18 = Integer.MIN_VALUE;
        boolean z12 = false;
        View view3 = null;
        View view4 = null;
        View view5 = null;
        int i19 = Integer.MIN_VALUE;
        int i20 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i21 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        while (true) {
            messageObject = messageObject7;
            if (i12 >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i12);
            int childAdapterPosition = this.chatListView.getChildAdapterPosition(childAt);
            if (childAdapterPosition >= 0) {
                if (childAdapterPosition > i15 || i15 == i13) {
                    i15 = childAdapterPosition;
                }
                if (childAdapterPosition < i14 || i14 == i13) {
                    i3 = i15;
                    i2 = childAdapterPosition;
                    int y = (int) childAt.getY();
                    int measuredHeight2 = childAt.getMeasuredHeight() + y;
                    z3 = childAt instanceof ChatMessageCell;
                    if (z3) {
                        z4 = z3;
                        chatMessageCell = null;
                    } else {
                        z4 = z3;
                        chatMessageCell = (ChatMessageCell) childAt;
                    }
                    if (chatMessageCell != null) {
                        chatMessageCell.isBlurred = (((float) y) < f5 && ((float) measuredHeight2) > f5) || (measuredHeight2 > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset && y < this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset);
                    }
                    f = measuredHeight2;
                    if (f > f5 - this.chatListViewPaddingVisibleOffset || y > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        chatMessageCell2 = chatMessageCell;
                        messageObject3 = messageObject6;
                        f2 = f5;
                        i4 = childCount;
                        i5 = measuredHeight;
                        z5 = z10;
                        int i22 = i17;
                        int i23 = i18;
                        int i24 = i19;
                        int i25 = i20;
                        int i26 = i21;
                        if (chatMessageCell2 != null) {
                            if (z11) {
                                chatMessageCell2.setVisibleOnScreen(false);
                            } else {
                                chatMessageCell2.setVisibleOnScreen(true);
                            }
                        }
                        i21 = i26;
                        i20 = i25;
                        i19 = i24;
                        i17 = i22;
                        i18 = i23;
                        messageObject7 = messageObject;
                    } else {
                        if (chatMessageCell != null) {
                            chatMessageCell.setVisibleOnScreen(true);
                        }
                        int i27 = y >= 0 ? 0 : -y;
                        int measuredHeight3 = childAt.getMeasuredHeight();
                        if (measuredHeight3 > measuredHeight) {
                            measuredHeight3 = i27 + measuredHeight;
                        }
                        int keyboardHeight = this.contentView.getKeyboardHeight();
                        i4 = childCount;
                        if ((keyboardHeight < AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()) || this.chatActivityEnterView.panelAnimationInProgress()) {
                            keyboardHeight = this.chatActivityEnterView.getEmojiPadding();
                        }
                        if (chatMessageCell != null) {
                            final MessageObject messageObject8 = chatMessageCell.getMessageObject();
                            i5 = measuredHeight;
                            z5 = z10;
                            if (messageObject8.getDialogId() != this.dialog_id || messageObject8.getId() <= i16) {
                                i9 = i16;
                                messageObject5 = messageObject;
                            } else {
                                i9 = messageObject8.getId();
                                messageObject5 = messageObject8;
                            }
                            i7 = i9;
                            MessageObject messageObject9 = messageObject5;
                            chatMessageCell.setParentBounds((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset);
                            chatMessageCell.setVisiblePart(i27, measuredHeight3 - i27, heightWithKeyboard, keyboardHeight, (childAt.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY(), this.contentView.getMeasuredWidth(), this.contentView.getBackgroundSizeY(), this.blurredViewTopOffset, this.blurredViewBottomOffset);
                            markSponsoredAsRead(messageObject8);
                            if (!this.threadMessageVisible && messageObject6 != null && ((messageObject8 == messageObject6 || (this.isTopic && messageObject8.getId() == messageObject6.getId())) && chatMessageCell.getBottom() > this.chatListViewPaddingTop)) {
                                this.threadMessageVisible = true;
                            }
                            if (this.videoPlayerContainer != null && ((messageObject8.isVideo() || messageObject8.isRoundVideo()) && !messageObject8.isVoiceTranscriptionOpen() && MediaController.getInstance().isPlayingMessage(messageObject8))) {
                                ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                if (y + photoImage.getImageY2() < 0.0f) {
                                    z12 = false;
                                } else {
                                    this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                                    this.videoPlayerContainer.setTranslationY(((chatMessageCell.getY() + photoImage.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop());
                                    this.fragmentView.invalidate();
                                    this.videoPlayerContainer.invalidate();
                                    z12 = true;
                                }
                            }
                            if (this.startFromVideoTimestamp >= 0 && this.fragmentOpened && !this.chatListView.isFastScrollAnimationRunning() && this.startFromVideoMessageId == messageObject8.getId() && (messageObject8.isVideo() || messageObject8.isRoundVideo() || messageObject8.isVoice() || messageObject8.isMusic())) {
                                messageObject8.forceSeekTo = this.startFromVideoTimestamp / ((float) messageObject8.getDuration());
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda201
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.this.lambda$updateMessagesVisiblePart$110(messageObject8);
                                    }
                                }, 40L);
                                this.startFromVideoTimestamp = -1;
                            }
                            if (this.fragmentOpened && this.openAnimationEnded && (((chatListItemAnimator = this.chatListItemAnimator) == null || !chatListItemAnimator.isRunning()) && chatMessageCell.checkUnreadReactions(f5, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset))) {
                                this.reactionsMentionCount--;
                                getMessagesStorage().markMessageReactionsAsRead(getDialogId(), getTopicId(), chatMessageCell.getMessageObject().getId(), true);
                                if (this.reactionsMentionCount <= 0) {
                                    getMessagesController().markReactionsAsRead(this.dialog_id, getTopicId());
                                }
                                if (this.reactionsMentionCount >= 0) {
                                    TLRPC$MessagePeerReaction randomUnreadReaction = chatMessageCell.getMessageObject().getRandomUnreadReaction();
                                    if (randomUnreadReaction != null) {
                                        view2 = childAt;
                                        z6 = z4;
                                        f4 = 0.0f;
                                        messageObject3 = messageObject6;
                                        chatMessageCell3 = chatMessageCell;
                                        f3 = f;
                                        z9 = true;
                                        f2 = f5;
                                        ReactionsEffectOverlay.show(this, null, chatMessageCell, null, 0.0f, 0.0f, ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(randomUnreadReaction.reaction), this.currentAccount, !randomUnreadReaction.big ? 1 : 0);
                                        ReactionsEffectOverlay.startAnimation();
                                    } else {
                                        view2 = childAt;
                                        chatMessageCell3 = chatMessageCell;
                                        messageObject3 = messageObject6;
                                        f2 = f5;
                                        z6 = z4;
                                        f3 = f;
                                        z9 = true;
                                        f4 = 0.0f;
                                    }
                                    chatMessageCell3.markReactionsAsRead();
                                    z8 = z9;
                                } else {
                                    view2 = childAt;
                                    chatMessageCell3 = chatMessageCell;
                                    messageObject3 = messageObject6;
                                    f2 = f5;
                                    z6 = z4;
                                    f3 = f;
                                    z8 = true;
                                    f4 = 0.0f;
                                    this.reactionsMentionCount = 0;
                                }
                                updateReactionsMentionButton(z8);
                                z7 = z8;
                            } else {
                                view2 = childAt;
                                chatMessageCell3 = chatMessageCell;
                                messageObject3 = messageObject6;
                                f2 = f5;
                                z6 = z4;
                                f3 = f;
                                z7 = true;
                                f4 = 0.0f;
                            }
                            getDownloadController().checkUnviewedDownloads(chatMessageCell3.getId(), this.dialog_id);
                            TLRPC$MessageMedia tLRPC$MessageMedia = messageObject8.messageOwner.media;
                            boolean z13 = !(tLRPC$MessageMedia == null || tLRPC$MessageMedia.nopremium) || (messageObject8.isAnimatedEmojiStickerSingle() && this.dialog_id > 0);
                            ChatListItemAnimator chatListItemAnimator2 = this.chatListItemAnimator;
                            if ((chatListItemAnimator2 == null || !chatListItemAnimator2.isRunning()) && ((!messageObject8.isOutOwner() || messageObject8.forcePlayEffect) && z13 && !messageObject8.messageOwner.premiumEffectWasPlayed && ((messageObject8.isPremiumSticker() || messageObject8.isAnimatedEmojiStickerSingle()) && this.emojiAnimationsOverlay.isIdle()))) {
                                chatMessageCell4 = chatMessageCell3;
                                if (this.emojiAnimationsOverlay.checkPosition(chatMessageCell4, this.chatListViewPaddingTop, this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset)) {
                                    this.emojiAnimationsOverlay.onTapItem(chatMessageCell4, this, false);
                                    messageObject4 = messageObject8;
                                    messageObject7 = messageObject9;
                                    view = view2;
                                    i6 = z7;
                                }
                            } else {
                                chatMessageCell4 = chatMessageCell3;
                            }
                            if (messageObject8.isAnimatedAnimatedEmoji()) {
                                this.emojiAnimationsOverlay.preloadAnimation(chatMessageCell4);
                            }
                            messageObject4 = messageObject8;
                            messageObject7 = messageObject9;
                            view = view2;
                            i6 = z7;
                        } else {
                            view = childAt;
                            messageObject3 = messageObject6;
                            f2 = f5;
                            i5 = measuredHeight;
                            z5 = z10;
                            z6 = z4;
                            f3 = f;
                            i6 = 1;
                            f4 = 0.0f;
                            if (view instanceof ChatActionCell) {
                                ChatActionCell chatActionCell = (ChatActionCell) view;
                                MessageObject messageObject10 = chatActionCell.getMessageObject();
                                if (messageObject10 != null && messageObject10.getDialogId() == this.dialog_id && messageObject10.getId() > i16) {
                                    i16 = Math.max(i16, messageObject10.getId());
                                }
                                chatActionCell.setVisiblePart((view.getY() + (isKeyboardVisible() ? this.chatListView.getTop() : this.actionBar.getMeasuredHeight())) - this.contentView.getBackgroundTranslationY(), this.contentView.getBackgroundSizeY());
                                i7 = i16;
                                messageObject7 = messageObject;
                                messageObject4 = messageObject10;
                            } else {
                                if (view instanceof BotHelpCell) {
                                    view.invalidate();
                                }
                                i7 = i16;
                                messageObject7 = messageObject;
                                messageObject4 = null;
                            }
                        }
                        if (this.chatMode == i6 || messageObject4 == null) {
                            i19 = i19;
                            i17 = i17;
                            i18 = i18;
                        } else {
                            int id = messageObject4.getId();
                            if ((isThreadChat() || ((messageObject4.isOut() || !messageObject4.isUnread()) && (!messageObject4.messageOwner.from_scheduled || id <= num2.intValue()))) && (id <= 0 || !isThreadChat() || id <= num2.intValue() || id <= this.replyMaxReadId)) {
                                i19 = i19;
                                i17 = i17;
                                i18 = i18;
                            } else {
                                if (id > 0) {
                                    i19 = Math.max(i19, messageObject4.getId());
                                }
                                i17 = (id >= 0 || isThreadChat()) ? i17 : Math.min(i17, messageObject4.getId());
                                i18 = Math.max(i18, messageObject4.messageOwner.date);
                            }
                            if (messageObject4.type == 17 && messageObject4.getId() > 0) {
                                this.pollsToCheck.add(messageObject4);
                            }
                        }
                        if (f3 <= f2) {
                            if ((view instanceof ChatActionCell) && messageObject4.isDateObject) {
                                view.setAlpha(f4);
                            }
                        } else {
                            int bottom = view.getBottom();
                            int i28 = i20;
                            if (bottom < i28) {
                                if (z6 || (view instanceof ChatActionCell)) {
                                    view5 = view;
                                }
                                view4 = view;
                                i20 = bottom;
                            } else {
                                i20 = i28;
                            }
                            ChatListItemAnimator chatListItemAnimator3 = this.chatListItemAnimator;
                            if ((chatListItemAnimator3 == null || !(chatListItemAnimator3.willRemoved(view) || this.chatListItemAnimator.willAddedFromAlpha(view))) && (view instanceof ChatActionCell) && messageObject4.isDateObject) {
                                if (view.getAlpha() != 1.0f) {
                                    view.setAlpha(1.0f);
                                }
                                i8 = i21;
                                if (bottom < i8) {
                                    view3 = view;
                                    i21 = bottom;
                                }
                            } else {
                                i8 = i21;
                            }
                            i21 = i8;
                        }
                        i16 = i7;
                    }
                    i12++;
                    f5 = f2;
                    messageObject6 = messageObject3;
                    i14 = i2;
                    i15 = i3;
                    childCount = i4;
                    measuredHeight = i5;
                    z10 = z5;
                    i13 = -1;
                }
            }
            i2 = i14;
            i3 = i15;
            int y2 = (int) childAt.getY();
            int measuredHeight22 = childAt.getMeasuredHeight() + y2;
            z3 = childAt instanceof ChatMessageCell;
            if (z3) {
            }
            if (chatMessageCell != null) {
            }
            f = measuredHeight22;
            if (f > f5 - this.chatListViewPaddingVisibleOffset) {
            }
            chatMessageCell2 = chatMessageCell;
            messageObject3 = messageObject6;
            f2 = f5;
            i4 = childCount;
            i5 = measuredHeight;
            z5 = z10;
            int i222 = i17;
            int i232 = i18;
            int i242 = i19;
            int i252 = i20;
            int i262 = i21;
            if (chatMessageCell2 != null) {
            }
            i21 = i262;
            i20 = i252;
            i19 = i242;
            i17 = i222;
            i18 = i232;
            messageObject7 = messageObject;
            i12++;
            f5 = f2;
            messageObject6 = messageObject3;
            i14 = i2;
            i15 = i3;
            childCount = i4;
            measuredHeight = i5;
            z10 = z5;
            i13 = -1;
        }
        float f6 = f5;
        boolean z14 = z10;
        int i29 = i17;
        int i30 = i18;
        int i31 = i19;
        this.currentPinnedMessageId = 0;
        if (!this.pinnedMessageIds.isEmpty()) {
            if (i16 == Integer.MIN_VALUE) {
                int i32 = this.startLoadFromMessageId;
                if (i32 != 0) {
                    i16 = i32;
                } else if (!this.pinnedMessageIds.isEmpty()) {
                    i16 = this.pinnedMessageIds.get(0).intValue() + 1;
                }
            } else if (i16 < 0 && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                int i33 = indexOf - 1;
                while (true) {
                    if (i33 < 0) {
                        break;
                    }
                    MessageObject messageObject11 = this.messages.get(i33);
                    if (messageObject11.getId() > 0) {
                        i16 = messageObject11.getId();
                        break;
                    }
                    i33--;
                }
                if (i16 < 0) {
                    int i34 = indexOf + 1;
                    int size = this.messages.size();
                    while (true) {
                        if (i34 >= size) {
                            break;
                        }
                        MessageObject messageObject12 = this.messages.get(i34);
                        if (messageObject12.getId() > 0) {
                            i16 = messageObject12.getId();
                            break;
                        }
                        i34++;
                    }
                }
            }
            ArrayList<Integer> arrayList2 = this.pinnedMessageIds;
            int i35 = this.forceNextPinnedMessageId;
            if (i35 != 0) {
                i16 = i35;
            }
            this.currentPinnedMessageId = findClosest(arrayList2, i16, this.currentPinnedMessageIndex).intValue();
            if (!this.inMenuMode && !this.loadingPinnedMessagesList && !this.pinnedEndReached && !this.pinnedMessageIds.isEmpty() && this.currentPinnedMessageIndex[0] > this.pinnedMessageIds.size() - 2) {
                getMediaDataController().loadPinnedMessages(this.dialog_id, this.pinnedMessageIds.get(arrayList.size() - 1).intValue(), 0);
                this.loadingPinnedMessagesList = true;
            }
        }
        getMessagesController().addToPollsQueue(this.dialog_id, this.pollsToCheck);
        this.chatMessagesMetadataController.checkMessages(this.chatAdapter, i15, i14, currentTimeMillis);
        if (this.videoPlayerContainer != null) {
            if (!z12) {
                MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject != null) {
                    if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                        MediaController.getInstance().cleanupPlayer(true, true);
                    } else {
                        this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
                        this.fragmentView.invalidate();
                        if ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && this.checkTextureViewPosition && !this.chatListView.isFastScrollAnimationRunning()) {
                            MediaController.getInstance().setCurrentVideoVisible(false);
                        }
                    }
                }
            } else {
                MediaController.getInstance().setCurrentVideoVisible(true);
            }
        }
        View view6 = view5;
        if (view6 != null) {
            if (view6 instanceof ChatMessageCell) {
                messageObject2 = ((ChatMessageCell) view6).getMessageObject();
            } else {
                messageObject2 = ((ChatActionCell) view6).getMessageObject();
            }
            this.floatingDateView.setCustomDate(messageObject2.messageOwner.date, this.chatMode == 1, true);
        }
        this.currentFloatingDateOnScreen = false;
        View view7 = view4;
        this.currentFloatingTopIsNotMessage = ((view7 instanceof ChatMessageCell) || (view7 instanceof ChatActionCell)) ? false : true;
        View view8 = view3;
        if (view8 != null) {
            if (view8.getY() > f6 || this.currentFloatingTopIsNotMessage) {
                if (view8.getAlpha() != 1.0f) {
                    view8.setAlpha(1.0f);
                }
                if (this.chatListView.getChildAdapterPosition(view8) == (this.chatAdapter.messagesStartRow + this.messages.size()) - 1) {
                    if (view8.getAlpha() != 1.0f) {
                        view8.setAlpha(1.0f);
                    }
                    AnimatorSet animatorSet2 = this.floatingDateAnimation;
                    if (animatorSet2 != null) {
                        animatorSet2.cancel();
                        animatorSet = null;
                        this.floatingDateAnimation = null;
                    } else {
                        animatorSet = null;
                    }
                    this.floatingDateView.setTag(animatorSet);
                    this.floatingDateView.setAlpha(0.0f);
                    this.currentFloatingDateOnScreen = false;
                } else {
                    animatorSet = null;
                    hideFloatingDateView(!this.currentFloatingTopIsNotMessage);
                }
                z2 = false;
            } else {
                if (view8.getAlpha() != 0.0f) {
                    view8.setAlpha(0.0f);
                }
                animatorSet = null;
                z2 = true;
            }
            float y3 = (view8.getY() + view8.getMeasuredHeight()) - f6;
            if (y3 > this.floatingDateView.getMeasuredHeight() && y3 < this.floatingDateView.getMeasuredHeight() * 2) {
                if (this.chatListView.getChildAdapterPosition(view8) == (this.chatAdapter.messagesStartRow + this.messages.size()) - 1) {
                    if (view8.getAlpha() != 1.0f) {
                        view8.setAlpha(1.0f);
                    }
                    AnimatorSet animatorSet3 = this.floatingDateAnimation;
                    if (animatorSet3 != null) {
                        animatorSet3.cancel();
                        this.floatingDateAnimation = animatorSet;
                    }
                    this.floatingDateView.setTag(animatorSet);
                    this.floatingDateView.setAlpha(0.0f);
                    z2 = false;
                } else {
                    this.floatingDateViewOffset = ((-this.floatingDateView.getMeasuredHeight()) * 2) + y3;
                }
            } else {
                this.floatingDateViewOffset = 0.0f;
            }
            if (z2) {
                AnimatorSet animatorSet4 = this.floatingDateAnimation;
                if (animatorSet4 != null) {
                    animatorSet4.cancel();
                    this.floatingDateAnimation = animatorSet;
                }
                if (this.floatingDateView.getTag() == null) {
                    this.floatingDateView.setTag(1);
                }
                if (this.floatingDateView.getAlpha() != 1.0f) {
                    this.floatingDateView.setAlpha(1.0f);
                }
                this.currentFloatingDateOnScreen = true;
            }
        } else {
            hideFloatingDateView(true);
            this.floatingDateViewOffset = 0.0f;
        }
        if (isThreadChat()) {
            if (z14 != this.threadMessageVisible) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda172
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$updateMessagesVisiblePart$111();
                    }
                });
            }
        } else {
            int i36 = this.currentPinnedMessageId;
            if (i36 != 0) {
                MessageObject messageObject13 = this.pinnedMessageObjects.get(Integer.valueOf(i36));
                if (messageObject13 == null) {
                    messageObject13 = this.messagesDict[0].get(this.currentPinnedMessageId);
                }
                if (messageObject13 == null) {
                    if (this.loadingPinnedMessages.indexOfKey(this.currentPinnedMessageId) < 0) {
                        this.loadingPinnedMessages.put(this.currentPinnedMessageId, Boolean.TRUE);
                        ArrayList<Integer> arrayList3 = new ArrayList<>();
                        arrayList3.add(Integer.valueOf(this.currentPinnedMessageId));
                        getMediaDataController().loadPinnedMessages(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, arrayList3, true);
                    }
                    this.currentPinnedMessageId = i10;
                }
            } else if (i10 != 0 && !this.pinnedMessageIds.isEmpty()) {
                this.currentPinnedMessageId = i10;
            }
            final boolean z15 = (this.fromPullingDownTransition && this.fragmentView.getVisibility() == 0) || (this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
            int i37 = this.currentPinnedMessageId;
            if (i10 != i37) {
                final int i38 = i10 == 0 ? 0 : i10 > i37 ? 1 : 2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda225
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$updateMessagesVisiblePart$112(z15, i38);
                    }
                });
            } else {
                updatePinnedListButton(z15);
            }
        }
        ChatActionCell chatActionCell2 = this.floatingDateView;
        if (chatActionCell2 != null) {
            chatActionCell2.setTranslationY(((this.chatListView.getTranslationY() + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
        }
        invalidateChatListViewTopPadding();
        if (this.firstLoading || this.paused || this.inPreviewMode || this.chatMode != 0 || getMessagesController().ignoreSetOnline) {
            return;
        }
        int i39 = 0;
        if (i31 != Integer.MIN_VALUE || i29 != Integer.MAX_VALUE) {
            i = i11;
            c = 0;
            int i40 = 0;
            for (int i41 = 0; i41 < this.messages.size(); i41++) {
                MessageObject messageObject14 = this.messages.get(i41);
                int id2 = messageObject14.getId();
                if (i31 != Integer.MIN_VALUE && id2 > 0 && id2 <= i31 && ((messageObject14.messageOwner.from_scheduled && id2 > num2.intValue()) || (messageObject14.isUnread() && !messageObject14.isOut()))) {
                    if (messageObject14.messageOwner.from_scheduled) {
                        i39++;
                    } else {
                        messageObject14.setIsRead();
                    }
                    i40++;
                }
                if (i29 != Integer.MAX_VALUE && id2 < 0 && id2 >= i29 && messageObject14.isUnread()) {
                    messageObject14.setIsRead();
                    i40++;
                }
            }
            if ((this.forwardEndReached[0] && i31 == this.minMessageId[0]) || i29 == this.minMessageId[0]) {
                this.newUnreadMessageCount = 0;
            } else {
                int i42 = this.newUnreadMessageCount - i40;
                this.newUnreadMessageCount = i42;
                if (i42 < 0) {
                    this.newUnreadMessageCount = 0;
                }
            }
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda157
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.inlineUpdate1();
                    }
                });
            } else {
                inlineUpdate1();
            }
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            int[] iArr = this.minMessageId;
            messagesController.markDialogAsRead(j, i31, i29, i30, false, i, i40, i31 == iArr[0] || i29 == iArr[0], i39);
            this.firstUnreadSent = true;
        } else if (!this.firstUnreadSent && this.currentEncryptedChat == null && this.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
            c = 0;
            this.newUnreadMessageCount = 0;
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda174
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.inlineUpdate2();
                    }
                });
            } else {
                inlineUpdate2();
            }
            MessagesController messagesController2 = getMessagesController();
            long j2 = this.dialog_id;
            int[] iArr2 = this.minMessageId;
            i = i11;
            messagesController2.markDialogAsRead(j2, iArr2[0], iArr2[0], this.maxDate[0], false, i, 0, true, 0);
            if (this.isTopic && this.replyOriginalChat != null) {
                getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, Math.max(i31, this.replyMaxReadId), 0, true);
            }
            this.firstUnreadSent = true;
        } else {
            i = i11;
            c = 0;
        }
        if (i == 0 || i31 <= 0 || this.replyMaxReadId == i31 || this.replyOriginalChat == null) {
            return;
        }
        this.replyMaxReadId = i31;
        getMessagesStorage().updateRepliesMaxReadId(this.replyOriginalChat.id, this.replyOriginalMessageId, this.replyMaxReadId, this.newUnreadMessageCount, true);
        if (this.isTopic) {
            return;
        }
        NotificationCenter notificationCenter = getNotificationCenter();
        int i43 = NotificationCenter.commentsRead;
        Object[] objArr = new Object[3];
        objArr[c] = Long.valueOf(this.replyOriginalChat.id);
        objArr[1] = Integer.valueOf(this.replyOriginalMessageId);
        objArr[2] = Integer.valueOf(this.replyMaxReadId);
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i43, objArr);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$110(MessageObject messageObject) {
        if (messageObject.isVideo()) {
            openPhotoViewerForMessage(null, messageObject);
        } else {
            MediaController.getInstance().playMessage(messageObject);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagesVisiblePart$111() {
        updatePinnedMessageView(this.openAnimationStartTime != 0 && SystemClock.elapsedRealtime() >= this.openAnimationStartTime + 150);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate1() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, this.openAnimationEnded);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void inlineUpdate2() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void toggleMute(boolean z) {
        if (getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), false);
            if (z) {
                return;
            }
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        } else if (z) {
            getNotificationsController().muteDialog(this.dialog_id, getTopicId(), true);
        } else {
            BottomSheet createMuteAlert = AlertsCreator.createMuteAlert(this, this.dialog_id, getTopicId(), this.themeDelegate);
            createMuteAlert.setCalcMandatoryInsets(isKeyboardVisible());
            showDialog(createMuteAlert);
        }
    }

    private int getScrollOffsetForMessage(MessageObject messageObject) {
        return getScrollOffsetForMessage(getHeightForMessage(messageObject));
    }

    private int getScrollOffsetForMessage(int i) {
        return (int) Math.max(-AndroidUtilities.dp(2.0f), (((this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) - this.chatListViewPaddingTop) - i) / 2.0f);
    }

    private int getHeightForMessage(MessageObject messageObject) {
        boolean z = false;
        if (getParentActivity() == null) {
            return 0;
        }
        if (this.dummyMessageCell == null) {
            this.dummyMessageCell = new ChatMessageCell(getParentActivity(), true, this.themeDelegate);
        }
        this.dummyMessageCell.isChat = this.currentChat != null || UserObject.isUserSelf(this.currentUser);
        ChatMessageCell chatMessageCell = this.dummyMessageCell;
        TLRPC$User tLRPC$User = this.currentUser;
        chatMessageCell.isBot = tLRPC$User != null && tLRPC$User.bot;
        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) {
            z = true;
        }
        chatMessageCell.isMegagroup = z;
        return this.dummyMessageCell.computeHeight(messageObject, this.groupedMessagesMap.get(messageObject.getGroupId()));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startMessageUnselect() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda135
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startMessageUnselect$113();
            }
        };
        this.unselectRunnable = runnable2;
        AndroidUtilities.runOnUIThread(runnable2, 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startMessageUnselect$113() {
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
        updateVisibleRows();
        this.unselectRunnable = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeSelectedMessageHighlight() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void resetProgressDialogLoading() {
        this.progressDialogLinkSpan = null;
        this.progressDialogAtMessageId = 0;
        this.progressDialogAtMessageType = -1;
        this.progressDialogBotButtonUrl = null;
        this.progressDialogCurrent = null;
        setPagedownLoading(false, true);
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public void scrollToMessageId(int i, int i2, boolean z, int i3, boolean z2, int i4) {
        scrollToMessageId(i, i2, z, i3, z2, i4, null);
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x01df  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0154 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0193 A[LOOP:0: B:70:0x0112->B:94:0x0193, LOOP_END] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void scrollToMessageId(int i, int i2, boolean z, final int i3, boolean z2, int i4, Runnable runnable) {
        int i5;
        int i6;
        boolean z3;
        MessageObject messageObject;
        MessageObject findPrimaryMessageObject;
        int i7 = i;
        if (i7 == 0 || NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress() || getParentActivity() == null) {
            if (NotificationCenter.getInstance(this.currentAccount).isAnimationInProgress()) {
                this.nextScrollToMessageId = i7;
                this.nextScrollFromMessageId = i2;
                this.nextScrollSelect = z;
                this.nextScrollLoadIndex = i3;
                this.nextScrollForce = z2;
                this.nextScrollForcePinnedMessageId = i4;
                NotificationCenter.getInstance(this.currentAccount).doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda180
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$scrollToMessageId$114();
                    }
                });
                return;
            }
            return;
        }
        this.forceNextPinnedMessageId = Math.abs(i4);
        this.forceScrollToFirst = i4 > 0;
        this.wasManualScroll = true;
        MessageObject messageObject2 = this.messagesDict[i3].get(i7);
        if (i2 != 0) {
            int i8 = i2 < i7 ? 1 : 0;
            if (isSecretChat()) {
                i8 ^= 1;
            }
            i5 = i8 ^ 1;
        } else {
            if (this.messages.size() > 0) {
                if (isThreadChat() && i7 == this.threadMessageId) {
                    i5 = 1;
                } else {
                    int findLastVisibleItemPosition = this.chatLayoutManager.findLastVisibleItemPosition();
                    for (int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition(); findFirstVisibleItemPosition <= findLastVisibleItemPosition; findFirstVisibleItemPosition++) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        if (findFirstVisibleItemPosition >= chatActivityAdapter.messagesStartRow && findFirstVisibleItemPosition < chatActivityAdapter.messagesEndRow) {
                            MessageObject messageObject3 = this.messages.get(findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow);
                            if (messageObject3.getId() != 0 && !messageObject3.isSponsored()) {
                                i6 = findFirstVisibleItemPosition - this.chatAdapter.messagesStartRow;
                                int i9 = messageObject3.getId() < i7 ? 1 : 0;
                                if (isSecretChat()) {
                                    i9 ^= 1;
                                }
                                i5 = i9 ^ 1;
                                this.chatScrollHelper.setScrollDirection(i5);
                                if (messageObject2 != null) {
                                    MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject2.getGroupId());
                                    if (messageObject2.getGroupId() != 0 && groupedMessages != null && (findPrimaryMessageObject = groupedMessages.findPrimaryMessageObject()) != null) {
                                        messageObject2 = findPrimaryMessageObject;
                                    }
                                    int indexOf = this.messages.indexOf(messageObject2);
                                    if (indexOf != -1) {
                                        if (i6 > 0) {
                                            i5 = i6 > indexOf ? 0 : 1;
                                            this.chatScrollHelper.setScrollDirection(i5);
                                        }
                                        removeSelectedMessageHighlight();
                                        if (z) {
                                            this.highlightMessageId = i7;
                                        }
                                        this.chatAdapter.updateRowsSafe();
                                        int indexOf2 = this.chatAdapter.messagesStartRow + this.messages.indexOf(messageObject2);
                                        updateVisibleRows();
                                        int childCount = this.chatListView.getChildCount();
                                        int i10 = 0;
                                        boolean z4 = false;
                                        while (true) {
                                            if (i10 >= childCount) {
                                                break;
                                            }
                                            View childAt = this.chatListView.getChildAt(i10);
                                            if (childAt instanceof ChatMessageCell) {
                                                MessageObject messageObject4 = ((ChatMessageCell) childAt).getMessageObject();
                                                if (messageObject4 != null && messageObject4.getId() == messageObject2.getId()) {
                                                    childAt.sendAccessibilityEvent(8);
                                                    z4 = true;
                                                }
                                                if (z4) {
                                                    i10++;
                                                } else {
                                                    int top = (int) ((childAt.getTop() - this.chatListViewPaddingTop) - getScrollOffsetForMessage(childAt.getHeight()));
                                                    int computeVerticalScrollRange = (this.chatListView.computeVerticalScrollRange() - this.chatListView.computeVerticalScrollOffset()) - this.chatListView.computeVerticalScrollExtent();
                                                    if (computeVerticalScrollRange < 0) {
                                                        computeVerticalScrollRange = 0;
                                                    }
                                                    if (top > computeVerticalScrollRange) {
                                                        top = computeVerticalScrollRange;
                                                    }
                                                    if (top != 0) {
                                                        this.scrollByTouch = false;
                                                        this.chatListView.smoothScrollBy(0, top);
                                                        this.chatListView.setOverScrollMode(2);
                                                    }
                                                }
                                            } else {
                                                if ((childAt instanceof ChatActionCell) && (messageObject = ((ChatActionCell) childAt).getMessageObject()) != null && messageObject.getId() == messageObject2.getId()) {
                                                    childAt.sendAccessibilityEvent(8);
                                                    z4 = true;
                                                }
                                                if (z4) {
                                                }
                                            }
                                        }
                                        if (!z4) {
                                            int scrollOffsetForMessage = getScrollOffsetForMessage(messageObject2);
                                            this.chatScrollHelperCallback.scrollTo = messageObject2;
                                            this.chatScrollHelperCallback.lastBottom = false;
                                            this.chatScrollHelperCallback.lastItemOffset = scrollOffsetForMessage;
                                            this.chatScrollHelperCallback.lastPadding = (int) this.chatListViewPaddingTop;
                                            this.chatScrollHelper.setScrollDirection(i5);
                                            this.chatScrollHelper.scrollToPosition(this.chatScrollHelperCallback.position = indexOf2, this.chatScrollHelperCallback.offset = scrollOffsetForMessage, this.chatScrollHelperCallback.bottom = false, true);
                                            this.canShowPagedownButton = true;
                                            updatePagedownButtonVisibility(true);
                                        }
                                        z3 = false;
                                        if (z3) {
                                            if (isThreadChat() && i7 == this.threadMessageId) {
                                                this.scrollToThreadMessage = true;
                                                i7 = 1;
                                            }
                                            AlertDialog alertDialog = this.progressDialog;
                                            if (alertDialog != null) {
                                                alertDialog.dismiss();
                                            }
                                            showPinnedProgress(this.forceNextPinnedMessageId != 0);
                                            if (runnable != null) {
                                                runnable.run();
                                            } else if (this.forceNextPinnedMessageId == 0) {
                                                AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
                                                this.progressDialog = alertDialog2;
                                                alertDialog2.setOnShowListener(new DialogInterface.OnShowListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda56
                                                    @Override // android.content.DialogInterface.OnShowListener
                                                    public final void onShow(DialogInterface dialogInterface) {
                                                        ChatActivity.this.lambda$scrollToMessageId$115(dialogInterface);
                                                    }
                                                });
                                                this.progressDialog.setOnCancelListener(this.postponedScrollCancelListener);
                                                this.progressDialog.showDelayed(400L);
                                            }
                                            this.waitingForLoad.clear();
                                            removeSelectedMessageHighlight();
                                            this.scrollToMessagePosition = -10000;
                                            this.startLoadFromMessageId = i7;
                                            this.showScrollToMessageError = !z2;
                                            if (i7 == this.createUnreadMessageAfterId) {
                                                this.createUnreadMessageAfterIdLoading = true;
                                            }
                                            this.postponedScrollIsCanceled = false;
                                            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                                            this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
                                            this.postponedScrollMinMessageId = this.minMessageId[0];
                                            this.postponedScrollMessageId = i7;
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda184
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatActivity.this.lambda$scrollToMessageId$116(i3);
                                                }
                                            }, 0L);
                                        } else {
                                            View childAt2 = this.chatListView.getChildAt(0);
                                            if (childAt2 != null && childAt2.getTop() <= 0) {
                                                showFloatingDateView(false);
                                            }
                                        }
                                        this.returnToMessageId = i2;
                                        this.returnToLoadIndex = i3;
                                        this.needSelectFromMessageId = z;
                                    }
                                }
                                z3 = true;
                                if (z3) {
                                }
                                this.returnToMessageId = i2;
                                this.returnToLoadIndex = i3;
                                this.needSelectFromMessageId = z;
                            }
                        }
                    }
                }
            }
            i5 = -1;
        }
        i6 = 0;
        this.chatScrollHelper.setScrollDirection(i5);
        if (messageObject2 != null) {
        }
        z3 = true;
        if (z3) {
        }
        this.returnToMessageId = i2;
        this.returnToLoadIndex = i3;
        this.needSelectFromMessageId = z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$114() {
        int i = this.nextScrollToMessageId;
        if (i != 0) {
            scrollToMessageId(i, this.nextScrollFromMessageId, this.nextScrollSelect, this.nextScrollLoadIndex, this.nextScrollForce, this.nextScrollForcePinnedMessageId);
            this.nextScrollToMessageId = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$115(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scrollToMessageId$116(int i) {
        MessagesController messagesController = getMessagesController();
        long j = i == 0 ? this.dialog_id : this.mergeDialogId;
        int i2 = ((!isThreadChat() || this.isTopic) && !AndroidUtilities.isTablet()) ? 20 : 30;
        int i3 = this.startLoadFromMessageId;
        int i4 = this.classGuid;
        int i5 = this.chatMode;
        int i6 = this.threadMessageId;
        int i7 = this.replyMaxReadId;
        int i8 = this.lastLoadIndex;
        this.lastLoadIndex = i8 + 1;
        messagesController.loadMessages(j, 0L, false, i2, i3, 0, true, 0, i4, 3, 0, i5, i6, i7, i8, this.isTopic);
    }

    private void showPinnedProgress(boolean z) {
        if (z) {
            if (this.updatePinnedProgressRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda154
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$showPinnedProgress$117();
                    }
                };
                this.updatePinnedProgressRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 100L);
                return;
            }
            return;
        }
        Runnable runnable2 = this.updatePinnedProgressRunnable;
        if (runnable2 != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable2);
        }
        this.updatePinnedProgressRunnable = null;
        this.pinnedProgressIsShowing = false;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showPinnedProgress$117() {
        this.pinnedProgressIsShowing = true;
        updatePinnedListButton(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePagedownButtonVisibility(boolean z) {
        if (this.pagedownButton == null) {
            return;
        }
        if ((!this.canShowPagedownButton || this.textSelectionHelper.isSelectionMode() || this.chatActivityEnterView.isRecordingAudioVideo()) ? false : true) {
            if (z && (this.openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < this.openAnimationStartTime + 150)) {
                z = false;
            }
            this.pagedownButtonShowedByScroll = false;
            if (this.pagedownButton.getTag() == null) {
                ValueAnimator valueAnimator = this.pagedownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.pagedownButtonAnimation.cancel();
                    this.pagedownButtonAnimation = null;
                }
                this.pagedownButton.setTag(1);
                if (z) {
                    this.pagedownButton.setVisibility(0);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 1.0f);
                    this.pagedownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda7
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.lambda$updatePagedownButtonVisibility$118(valueAnimator2);
                        }
                    });
                    this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.78
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.pagedownButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.pagedownButtonAnimation.setDuration(200L);
                    this.pagedownButtonAnimation.start();
                    return;
                }
                this.pagedownButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                this.pagedownButton.setVisibility(0);
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        this.newUnreadMessageCount = 0;
        if (this.pagedownButton.getTag() != null) {
            this.pagedownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.pagedownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            if (z) {
                this.pagedownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 0.0f);
                this.pagedownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda12
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$updatePagedownButtonVisibility$119(valueAnimator3);
                    }
                });
                this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.79
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.pagedownButtonEnterProgress = 0.0f;
                        ChatActivity.this.pagedownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.pagedownButtonAnimation.setDuration(200L);
                this.pagedownButtonAnimation.start();
                return;
            }
            this.pagedownButtonEnterProgress = 0.0f;
            this.pagedownButton.setVisibility(4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$118(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePagedownButtonVisibility$119(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showMentionDownButton(boolean z, boolean z2) {
        FrameLayout frameLayout = this.mentiondownButton;
        if (frameLayout == null) {
            return;
        }
        if (z) {
            if (frameLayout.getTag() == null) {
                ValueAnimator valueAnimator = this.mentiondownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (z2) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag(1);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 1.0f);
                    this.mentiondownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda13
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.lambda$showMentionDownButton$120(valueAnimator2);
                        }
                    });
                    this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.80
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.mentionsButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.mentiondownButtonAnimation.setDuration(200L);
                    this.mentiondownButtonAnimation.start();
                    return;
                }
                this.mentionsButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        if (frameLayout.getTag() != null) {
            this.mentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.mentiondownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (z2) {
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 0.0f);
                this.mentiondownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda8
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$showMentionDownButton$121(valueAnimator3);
                    }
                });
                this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.81
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.mentionsButtonEnterProgress = 0.0f;
                        ChatActivity.this.mentiondownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.mentiondownButtonAnimation.setDuration(200L);
                this.mentiondownButtonAnimation.start();
                return;
            }
            this.mentionsButtonEnterProgress = 0.0f;
            this.mentiondownButton.setVisibility(4);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$120(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showMentionDownButton$121(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* loaded from: classes3.dex */
    public class ChatActivityFragmentView extends SizeNotifierFrameLayout {
        int backgroundColor;
        Paint backgroundPaint;
        ArrayList<ChatMessageCell> drawCaptionAfter;
        ArrayList<ChatMessageCell> drawNamesAfter;
        ArrayList<ChatMessageCell> drawTimeAfter;
        int inputFieldHeight;
        int lastHeight;
        int lastWidth;
        private long pressTime;
        private float x;
        private float y;

        public ChatActivityFragmentView(Context context, INavigationLayout iNavigationLayout) {
            super(context, iNavigationLayout);
            this.inputFieldHeight = 0;
            this.drawTimeAfter = new ArrayList<>();
            this.drawNamesAfter = new ArrayList<>();
            this.drawCaptionAfter = new ArrayList<>();
            this.adjustPanLayoutHelper = new AdjustPanLayoutHelper(this, ChatActivity.this) { // from class: org.telegram.ui.ChatActivity.ChatActivityFragmentView.1
                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionStart(boolean z, int i) {
                    ChatActivity.this.wasManualScroll = true;
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionStart(z, i);
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionStart();
                    }
                    if (ChatActivity.this.mediaBanTooltip != null) {
                        ChatActivity.this.mediaBanTooltip.hide(false);
                    }
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onTransitionEnd() {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    if (chatActivityEnterView != null) {
                        chatActivityEnterView.onAdjustPanTransitionEnd();
                    }
                    MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                    if (mentionsContainerView != null) {
                        mentionsContainerView.onPanTransitionEnd();
                    }
                    if (ChatActivity.this.voiceHintTextView == null || ChatActivity.this.voiceHintTextView.getVisibility() != 0) {
                        return;
                    }
                    ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected void onPanTranslationUpdate(float f, float f2, boolean z) {
                    if (ChatActivity.this.getParentLayout() == null || !ChatActivity.this.getParentLayout().isPreviewOpenAnimationInProgress()) {
                        ChatActivity.this.contentPanTranslation = f;
                        ChatAttachAlert chatAttachAlert = ChatActivity.this.chatAttachAlert;
                        if (chatAttachAlert == null || !chatAttachAlert.isShowing()) {
                            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(f);
                            if (ChatActivity.this.emptyViewContainer != null) {
                                ChatActivity.this.emptyViewContainer.setTranslationY(f / 2.0f);
                            }
                            ChatActivity.this.progressView.setTranslationY(f / 2.0f);
                            int i = (int) f;
                            ChatActivity.this.contentView.setBackgroundTranslation(i);
                            if (ChatActivity.this.instantCameraView != null) {
                                ChatActivity.this.instantCameraView.onPanTranslationUpdate(f);
                            }
                            if (ChatActivity.this.blurredView != null) {
                                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(f);
                            }
                            ChatActivity.this.setFragmentPanTranslationOffset(i);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                        } else {
                            ChatActivityFragmentView.this.setNonNoveTranslation(f);
                        }
                        ChatActivity.this.chatListView.invalidate();
                        ChatActivity.this.updateBulletinLayout();
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.onAdjustPanTransitionUpdate(f, f2, z);
                        }
                        MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                        if (mentionsContainerView != null) {
                            mentionsContainerView.onPanTransitionUpdate(f);
                        }
                        if (AndroidUtilities.isTablet() && (ChatActivity.this.getParentActivity() instanceof LaunchActivity)) {
                            BaseFragment lastFragment = ((LaunchActivity) ChatActivity.this.getParentActivity()).getActionBarLayout().getLastFragment();
                            if (lastFragment instanceof DialogsActivity) {
                                ((DialogsActivity) lastFragment).setPanTranslationOffset(f);
                            }
                        }
                        if (ChatActivity.this.voiceHintTextView != null && ChatActivity.this.voiceHintTextView.getVisibility() == 0) {
                            ChatActivity.this.voiceHintTextView.showForView(ChatActivity.this.chatActivityEnterView.getAudioVideoButtonContainer(), false);
                        }
                        if (ChatActivity.this.fragmentContextView != null) {
                            ChatActivity.this.fragmentContextView.onPanTranslationUpdate(f);
                        }
                    }
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected boolean heightAnimationEnabled() {
                    ChatAttachAlert chatAttachAlert;
                    INavigationLayout parentLayout = ChatActivity.this.getParentLayout();
                    if (((BaseFragment) ChatActivity.this).inPreviewMode || ((BaseFragment) ChatActivity.this).inBubbleMode || AndroidUtilities.isInMultiwindow || parentLayout == null || ChatActivity.this.fixedKeyboardHeight > 0 || System.currentTimeMillis() - ChatActivity.this.activityResumeTime < 250) {
                        return false;
                    }
                    if ((ChatActivity.this != parentLayout.getLastFragment() || !parentLayout.isTransitionAnimationInProgress()) && !parentLayout.isPreviewOpenAnimationInProgress() && !((BaseFragment) ChatActivity.this).isPaused) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.openAnimationEnded && ((chatAttachAlert = chatActivity.chatAttachAlert) == null || !chatAttachAlert.isShowing())) {
                            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            return chatActivityEnterView == null || chatActivityEnterView.getTrendingStickersAlert() == null || !ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert().isShowing();
                        }
                    }
                    return false;
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected int startOffset() {
                    if (ChatActivityFragmentView.this.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || !ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                        return 0;
                    }
                    return ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                }
            };
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected void drawList(Canvas canvas, boolean z) {
            float dp = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if ((!z || childAt.getY() <= AndroidUtilities.dp(40.0f) + dp) && (z || childAt.getY() + childAt.getMeasuredHeight() >= AndroidUtilities.dp(203.0f))) {
                    canvas.save();
                    if (z) {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), (ChatActivity.this.chatListView.getY() + childAt.getY()) - ChatActivity.this.contentPanTranslation);
                    } else {
                        canvas.translate(ChatActivity.this.chatListView.getX() + childAt.getX(), ChatActivity.this.chatListView.getTop() + childAt.getY());
                    }
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.drawForBlur = true;
                        if (chatMessageCell.drawBackgroundInParent()) {
                            chatMessageCell.drawBackgroundInternal(canvas, true);
                        }
                        childAt.draw(canvas);
                        if (chatMessageCell.hasOutboundsContent()) {
                            ((ChatMessageCell) childAt).drawOutboundsContent(canvas);
                        }
                        chatMessageCell.drawForBlur = false;
                    } else if (childAt instanceof ChatActionCell) {
                        childAt.draw(canvas);
                        ((ChatActionCell) childAt).drawOutboundsContent(canvas);
                    } else {
                        childAt.draw(canvas);
                    }
                    canvas.restore();
                }
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected int getScrollOffset() {
            return ChatActivity.this.chatListView.computeVerticalScrollOffset();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getBottomOffset() {
            return ChatActivity.this.chatListView.getBottom();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getListTranslationY() {
            return ChatActivity.this.chatListView.getTranslationY();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            this.adjustPanLayoutHelper.onAttach();
            ChatActivity.this.chatActivityEnterView.setAdjustPanLayoutHelper(this.adjustPanLayoutHelper);
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject != null && ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0 && playingMessageObject.getDialogId() == ChatActivity.this.dialog_id)) {
                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.emojiAnimationsOverlay.onAttachedToWindow();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        protected void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.adjustPanLayoutHelper.onDetach();
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onDetach();
                ChatActivity.this.pullingDownDrawable = null;
            }
            ChatActivity.this.emojiAnimationsOverlay.onDetachedFromWindow();
            AndroidUtilities.runOnUIThread(ChatActivity$ChatActivityFragmentView$$ExternalSyntheticLambda1.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:71:0x0210  */
        /* JADX WARN: Removed duplicated region for block: B:74:0x0215  */
        /* JADX WARN: Removed duplicated region for block: B:78:0x0265  */
        /* JADX WARN: Removed duplicated region for block: B:80:0x0268 A[ADDED_TO_REGION] */
        @Override // android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
            float y;
            ChatActivityEnterView chatActivityEnterView;
            boolean z;
            boolean z2;
            boolean z3;
            Rect rect;
            Rect rect2;
            if (AndroidUtilities.isInMultiwindow || ChatActivity.this.isInBubbleMode()) {
                y = (ChatActivity.this.chatActivityEnterView.getEmojiView() != null ? ChatActivity.this.chatActivityEnterView.getEmojiView() : ChatActivity.this.chatActivityEnterView).getY();
            } else {
                y = ChatActivity.this.chatActivityEnterView.getY();
            }
            if ((ChatActivity.this.scrimView != null && ChatActivity.this.scrimView != ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) || ((chatActivityEnterView = ChatActivity.this.chatActivityEnterView) != null && chatActivityEnterView.isStickersExpanded() && motionEvent.getY() < y)) {
                return false;
            }
            ChatActivity.this.lastTouchY = motionEvent.getY();
            TextSelectionHelper<Cell>.TextSelectionOverlay overlayView = ChatActivity.this.textSelectionHelper.getOverlayView(getContext());
            motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
            if (ChatActivity.this.textSelectionHelper.isSelectionMode() && ChatActivity.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent)) {
                return true;
            }
            motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
            if (overlayView.checkOnTap(motionEvent)) {
                motionEvent.setAction(3);
            }
            if (motionEvent.getAction() != 0 || !ChatActivity.this.textSelectionHelper.isSelectionMode() || (motionEvent.getY() >= ChatActivity.this.chatListView.getTop() && motionEvent.getY() <= ChatActivity.this.chatListView.getBottom())) {
                if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                    return ChatActivity.this.pinchToZoomHelper.onTouchEvent(motionEvent);
                }
                if (AvatarPreviewer.hasVisibleInstance()) {
                    AvatarPreviewer.getInstance().onTouchEvent(motionEvent);
                    return true;
                }
                if (ChatActivity.this.isInPreviewMode() && ChatActivity.this.allowExpandPreviewByClick) {
                    if (motionEvent.getAction() == 0) {
                        int[] iArr = new int[2];
                        getLocationInWindow(iArr);
                        int[] iArr2 = new int[2];
                        if (ChatActivity.this.pagedownButton != null) {
                            ChatActivity.this.pagedownButton.getLocationInWindow(iArr2);
                            Rect rect3 = AndroidUtilities.rectTmp2;
                            rect3.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.pagedownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.pagedownButton.getMeasuredHeight());
                            if (rect3.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                z2 = true;
                                if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getAvatarImageView() != null) {
                                    BackupImageView avatarImageView = ChatActivity.this.avatarContainer.getAvatarImageView();
                                    avatarImageView.getLocationInWindow(iArr2);
                                    rect2 = AndroidUtilities.rectTmp2;
                                    rect2.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + avatarImageView.getMeasuredWidth(), (iArr2[1] - iArr[1]) + avatarImageView.getMeasuredHeight());
                                    if (rect2.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                        z3 = true;
                                        if (!z2 && ChatActivity.this.mentiondownButton != null) {
                                            ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                            rect = AndroidUtilities.rectTmp2;
                                            rect.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.mentiondownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                            if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                                z2 = true;
                                            }
                                        }
                                        if (z2 && !z3) {
                                            this.x = motionEvent.getX();
                                            this.y = motionEvent.getY();
                                            this.pressTime = SystemClock.elapsedRealtime();
                                            z = true;
                                            return !super.dispatchTouchEvent(motionEvent) || z;
                                        }
                                        this.pressTime = -1L;
                                    }
                                }
                                z3 = false;
                                if (!z2) {
                                    ChatActivity.this.mentiondownButton.getLocationInWindow(iArr2);
                                    rect = AndroidUtilities.rectTmp2;
                                    rect.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + ChatActivity.this.mentiondownButton.getMeasuredWidth(), (iArr2[1] - iArr[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                                    if (rect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                    }
                                }
                                if (z2) {
                                }
                                this.pressTime = -1L;
                            }
                        }
                        z2 = false;
                        if (ChatActivity.this.avatarContainer != null) {
                            BackupImageView avatarImageView2 = ChatActivity.this.avatarContainer.getAvatarImageView();
                            avatarImageView2.getLocationInWindow(iArr2);
                            rect2 = AndroidUtilities.rectTmp2;
                            rect2.set(iArr2[0] - iArr[0], iArr2[1] - iArr[1], (iArr2[0] - iArr[0]) + avatarImageView2.getMeasuredWidth(), (iArr2[1] - iArr[1]) + avatarImageView2.getMeasuredHeight());
                            if (rect2.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                            }
                        }
                        z3 = false;
                        if (!z2) {
                        }
                        if (z2) {
                        }
                        this.pressTime = -1L;
                    } else if (motionEvent.getAction() == 1) {
                        if (com.google.zxing.common.detector.MathUtils.distance(this.x, this.y, motionEvent.getX(), motionEvent.getY()) < AndroidUtilities.dp(6.0f) && SystemClock.elapsedRealtime() - this.pressTime <= ViewConfiguration.getTapTimeout()) {
                            ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                            motionEvent.setAction(3);
                        }
                        this.pressTime = -1L;
                    } else if (motionEvent.getAction() == 3) {
                        this.pressTime = -1L;
                    }
                }
                z = false;
                if (super.dispatchTouchEvent(motionEvent)) {
                }
            }
            motionEvent.offsetLocation(-overlayView.getX(), -overlayView.getY());
            if (ChatActivity.this.textSelectionHelper.getOverlayView(getContext()).onTouchEvent(motionEvent)) {
                motionEvent.offsetLocation(overlayView.getX(), overlayView.getY());
                return super.dispatchTouchEvent(motionEvent);
            }
            return true;
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (getTag(67108867) != null) {
                return;
            }
            if (getTag(67108867) == null) {
                if (ChatActivity.this.instantCameraView != null && ChatActivity.this.instantCameraView.blurFullyDrawing()) {
                    return;
                }
                if (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null) {
                    return;
                }
            }
            super.onDraw(canvas);
        }

        /* JADX WARN: Code restructure failed: missing block: B:56:0x00d6, code lost:
            r0 = false;
         */
        /* JADX WARN: Removed duplicated region for block: B:105:0x017f  */
        /* JADX WARN: Removed duplicated region for block: B:124:0x0251  */
        /* JADX WARN: Removed duplicated region for block: B:155:0x0352  */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected boolean drawChild(Canvas canvas, View view, long j) {
            boolean z;
            boolean z2;
            boolean z3;
            int i = 0;
            if ((ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) && (view == ChatActivity.this.pagedownButton || view == ChatActivity.this.mentiondownButton || view == ChatActivity.this.floatingDateView || view == ChatActivity.this.fireworksOverlay || view == ChatActivity.this.reactionsMentiondownButton || view == ChatActivity.this.gifHintTextView || view == ChatActivity.this.emojiHintTextView || view == ChatActivity.this.undoView || view == ChatActivity.this.topUndoView)) {
                return false;
            }
            if (view == ChatActivity.this.fragmentContextView && ChatActivity.this.fragmentContextView.isCallStyle()) {
                return true;
            }
            if (view == ChatActivity.this.undoView && PhotoViewer.getInstance().isVisible()) {
                return true;
            }
            if (ChatActivity.this.toPullingDownTransition && view == ChatActivity.this.chatListView) {
                return true;
            }
            if (ChatActivity.this.switchingFromTopics && view == ((BaseFragment) ChatActivity.this).actionBar) {
                return true;
            }
            if (getTag(67108867) != null) {
                boolean z4 = ((Integer) getTag(67108867)).intValue() == 0 ? true : true;
                if (!z4) {
                    return false;
                }
            } else if (getTag(67108867) == null && ((ChatActivity.this.instantCameraView != null && ChatActivity.this.instantCameraView.blurFullyDrawing()) || (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null))) {
                if (view == ((BaseFragment) ChatActivity.this).actionBar || view == ChatActivity.this.chatListView || view == ChatActivity.this.pinnedMessageView || view == ChatActivity.this.fragmentContextView) {
                    return false;
                }
            }
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            if (playingMessageObject == null || playingMessageObject.eventId != 0) {
                z = false;
            } else {
                z = playingMessageObject.isRoundVideo();
                if (z || playingMessageObject.isVideo()) {
                    z2 = true;
                    if (view != ChatActivity.this.videoPlayerContainer) {
                        canvas.save();
                        canvas.translate(0.0f, (-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f));
                        if (playingMessageObject != null && playingMessageObject.type == 5) {
                            if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                int x = ((int) view.getX()) - AndroidUtilities.dp(3.0f);
                                int y = ((int) view.getY()) - AndroidUtilities.dp(2.0f);
                                canvas.save();
                                canvas.scale(ChatActivity.this.videoPlayerContainer.getScaleX(), ChatActivity.this.videoPlayerContainer.getScaleY(), view.getX(), view.getY());
                                Theme.chat_roundVideoShadow.setAlpha(255);
                                Theme.chat_roundVideoShadow.setBounds(x, y, AndroidUtilities.roundPlayingMessageSize + x + AndroidUtilities.dp(6.0f), AndroidUtilities.roundPlayingMessageSize + y + AndroidUtilities.dp(6.0f));
                                Theme.chat_roundVideoShadow.draw(canvas);
                                canvas.restore();
                            }
                            z3 = super.drawChild(canvas, view, j);
                        } else if (view.getTag() == null) {
                            float translationY = view.getTranslationY();
                            view.setTranslationY(-AndroidUtilities.dp(1000.0f));
                            z3 = super.drawChild(canvas, view, j);
                            view.setTranslationY(translationY);
                        } else {
                            z3 = false;
                        }
                        canvas.restore();
                    } else {
                        boolean drawChild = super.drawChild(canvas, view, j);
                        if (z2 && view == ChatActivity.this.chatListView && playingMessageObject.type != 5 && ChatActivity.this.videoPlayerContainer != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                            canvas.save();
                            canvas.translate(0.0f, ((-ChatActivity.this.pullingDownOffset) - (ChatActivity.this.pullingDownAnimateProgress != 0.0f ? (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress : 0.0f)) + ChatActivity.this.pullingBottomOffset);
                            super.drawChild(canvas, ChatActivity.this.videoPlayerContainer, j);
                            if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                canvas.save();
                                canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getY());
                                if (z) {
                                    ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(canvas);
                                    invalidate();
                                    ChatActivity.this.drawLaterRoundProgressCell.invalidate();
                                } else {
                                    ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(canvas);
                                    if (ChatActivity.this.drawLaterRoundProgressCell.needDrawTime()) {
                                        ChatActivity.this.drawLaterRoundProgressCell.drawTime(canvas, ChatActivity.this.drawLaterRoundProgressCell.getAlpha(), true);
                                    }
                                }
                                canvas.restore();
                            }
                            canvas.restore();
                        }
                        z3 = drawChild;
                    }
                    if (view == ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).parentLayout != null) {
                        INavigationLayout iNavigationLayout = ((BaseFragment) ChatActivity.this).parentLayout;
                        if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                            int translationY2 = ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) + ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                            if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            i += translationY2;
                        }
                        iNavigationLayout.drawHeaderShadow(canvas, i);
                    }
                    return z3;
                }
            }
            z2 = false;
            if (view != ChatActivity.this.videoPlayerContainer) {
            }
            if (view == ((BaseFragment) ChatActivity.this).actionBar) {
                INavigationLayout iNavigationLayout2 = ((BaseFragment) ChatActivity.this).parentLayout;
                if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                }
                iNavigationLayout2.drawHeaderShadow(canvas, i);
            }
            return z3;
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean isActionBarVisible() {
            return ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0;
        }

        private void drawChildElement(Canvas canvas, float f, ChatMessageCell chatMessageCell, int i) {
            canvas.save();
            float left = ChatActivity.this.chatListView.getLeft() + chatMessageCell.getLeft();
            float y = ChatActivity.this.chatListView.getY() + chatMessageCell.getY();
            float alpha = chatMessageCell.shouldDrawAlphaLayer() ? chatMessageCell.getAlpha() : 1.0f;
            canvas.clipRect(ChatActivity.this.chatListView.getLeft(), f, ChatActivity.this.chatListView.getRight(), (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset);
            canvas.translate(left, y);
            boolean z = true;
            chatMessageCell.setInvalidatesParent(true);
            if (i == 0) {
                chatMessageCell.drawTime(canvas, alpha, true);
            } else if (i == 1) {
                chatMessageCell.drawNamesLayout(canvas, alpha);
            } else {
                chatMessageCell.drawCaptionLayout(canvas, (chatMessageCell.getCurrentPosition() == null || (chatMessageCell.getCurrentPosition().flags & 1) != 0) ? false : false, alpha);
            }
            chatMessageCell.setInvalidatesParent(false);
            canvas.restore();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        protected void dispatchDraw(Canvas canvas) {
            int i;
            int i2;
            int top;
            int bottom;
            int i3;
            ChatActionCell chatActionCell;
            ChatMessageCell chatMessageCell;
            MessageObject.GroupedMessages groupedMessages;
            MessageObject.GroupedMessagePosition groupedMessagePosition;
            View view;
            int i4;
            int i5;
            MessageObject.GroupedMessages groupedMessages2;
            float f;
            int i6;
            boolean z;
            ChatMessageCell chatMessageCell2;
            boolean z2;
            ChatActivity chatActivity;
            float f2;
            View view2;
            float f3;
            float f4;
            boolean z3;
            float f5;
            float f6;
            float f7;
            ChatMessageCell chatMessageCell3;
            View view3;
            boolean z4;
            ChatActivity chatActivity2;
            ChatActivity.this.chatActivityEnterView.checkAnimation();
            ChatActivity.this.updateChatListViewTopPadding();
            if (ChatActivity.this.invalidateMessagesVisiblePart || (ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListItemAnimator.isRunning())) {
                ChatActivity.this.invalidateMessagesVisiblePart = false;
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
            ChatActivity.this.updateTextureViewPosition(false, false);
            ChatActivity.this.updatePagedownButtonsPosition();
            if (ChatActivity.this.switchingFromTopics) {
                int saveLayerAlpha = canvas.saveLayerAlpha(0.0f, ((BaseFragment) ChatActivity.this).actionBar.getBottom(), getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                float f8 = (ChatActivity.this.switchingFromTopicsProgress * 0.2f) + 0.8f;
                canvas.scale(f8, f8, getMeasuredWidth() / 2.0f, getMeasuredHeight() / 2.0f);
                i = saveLayerAlpha;
            } else {
                i = -1;
            }
            super.dispatchDraw(canvas);
            float f9 = 0.0f;
            boolean z5 = true;
            if (ChatActivity.this.fragmentContextView != null && ChatActivity.this.fragmentContextView.isCallStyle()) {
                float alpha = (ChatActivity.this.blurredView == null || ChatActivity.this.blurredView.getVisibility() != 0) ? 1.0f : 1.0f - ChatActivity.this.blurredView.getAlpha();
                if (alpha > 0.0f) {
                    if (alpha != 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY() - AndroidUtilities.dp(30.0f), ChatActivity.this.fragmentContextView.getX() + ChatActivity.this.fragmentContextView.getMeasuredWidth(), ChatActivity.this.fragmentContextView.getY() + ChatActivity.this.fragmentContextView.getMeasuredHeight(), (int) (alpha * 255.0f), 31);
                    } else {
                        canvas.save();
                    }
                    canvas.translate(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY());
                    ChatActivity.this.fragmentContextView.setDrawOverlay(true);
                    ChatActivity.this.fragmentContextView.draw(canvas);
                    ChatActivity.this.fragmentContextView.setDrawOverlay(false);
                    canvas.restore();
                }
                ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null && chatActivityEnterView.panelAnimationInProgress() && ChatActivity.this.chatActivityEnterView.getEmojiPadding() < ChatActivity.this.bottomPanelTranslationY) {
                int themedColor = ChatActivity.this.getThemedColor(Theme.key_chat_emojiPanelBackground);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor) {
                    Paint paint = this.backgroundPaint;
                    this.backgroundColor = themedColor;
                    paint.setColor(themedColor);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - (((int) (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding())) + 3), getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
                ChatActivity chatActivity3 = ChatActivity.this;
                chatActivity3.setFragmentPanTranslationOffset(chatActivity3.chatActivityEnterView.getEmojiPadding());
            }
            int size = ChatActivity.this.animateSendingViews.size();
            for (int i7 = 0; i7 < size; i7++) {
                ChatMessageCell chatMessageCell4 = (ChatMessageCell) ChatActivity.this.animateSendingViews.get(i7);
                MessageObject.SendAnimationData sendAnimationData = chatMessageCell4.getMessageObject().sendAnimationData;
                if (sendAnimationData != null) {
                    canvas.save();
                    ImageReceiver photoImage = chatMessageCell4.getPhotoImage();
                    canvas.translate(sendAnimationData.currentX, sendAnimationData.currentY);
                    float f10 = sendAnimationData.currentScale;
                    canvas.scale(f10, f10);
                    canvas.translate(-photoImage.getCenterX(), -photoImage.getCenterY());
                    chatMessageCell4.setTimeAlpha(sendAnimationData.timeAlpha);
                    ((ChatMessageCell) ChatActivity.this.animateSendingViews.get(i7)).draw(canvas);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.scrimViewReaction == null || ChatActivity.this.scrimView == null) {
                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (ChatActivity.this.scrimView != null ? ChatActivity.this.scrimViewAlpha : 1.0f)));
                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
            }
            if (ChatActivity.this.scrimView != null) {
                if (ChatActivity.this.scrimView == ChatActivity.this.reactionsMentiondownButton || ChatActivity.this.scrimView == ChatActivity.this.mentiondownButton) {
                    i2 = i;
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                } else if (!(ChatActivity.this.scrimView instanceof ImageView)) {
                    float y = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
                    MessageObject.GroupedMessages currentMessagesGroup = ChatActivity.this.scrimView instanceof ChatMessageCell ? ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup() : null;
                    int childCount = ChatActivity.this.chatListView.getChildCount();
                    boolean z6 = false;
                    int i8 = 0;
                    while (i8 < childCount) {
                        View childAt = ChatActivity.this.chatListView.getChildAt(i8);
                        if (childAt instanceof ChatMessageCell) {
                            chatMessageCell = (ChatMessageCell) childAt;
                            groupedMessages = chatMessageCell.getCurrentMessagesGroup();
                            groupedMessagePosition = chatMessageCell.getCurrentPosition();
                            chatActionCell = null;
                        } else {
                            chatActionCell = childAt instanceof ChatActionCell ? (ChatActionCell) childAt : null;
                            chatMessageCell = null;
                            groupedMessages = null;
                            groupedMessagePosition = null;
                        }
                        if ((childAt == ChatActivity.this.scrimView || (currentMessagesGroup != null && currentMessagesGroup == groupedMessages)) && childAt.getAlpha() != f9) {
                            if (z6 || chatMessageCell == null || currentMessagesGroup == null || (chatMessageCell3 = currentMessagesGroup.transitionParams.cell) == null) {
                                view = childAt;
                                i4 = i8;
                                i5 = childCount;
                                groupedMessages2 = currentMessagesGroup;
                                f = y;
                                i6 = i;
                                z = true;
                                chatMessageCell2 = chatMessageCell;
                                z2 = z6;
                            } else {
                                float nonAnimationTranslationX = chatMessageCell3.getNonAnimationTranslationX(z5);
                                MessageObject.GroupedMessages.TransitionParams transitionParams = currentMessagesGroup.transitionParams;
                                float f11 = transitionParams.left + nonAnimationTranslationX + transitionParams.offsetLeft;
                                float f12 = transitionParams.top + transitionParams.offsetTop;
                                float f13 = transitionParams.right + nonAnimationTranslationX + transitionParams.offsetRight;
                                float f14 = transitionParams.bottom + transitionParams.offsetBottom;
                                if (!transitionParams.backgroundChangeBounds) {
                                    f12 += transitionParams.cell.getTranslationY();
                                    f14 += currentMessagesGroup.transitionParams.cell.getTranslationY();
                                }
                                if (f12 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                    f12 = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                                }
                                if (f14 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                    f14 = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                                }
                                int size2 = currentMessagesGroup.messages.size();
                                int i9 = 0;
                                while (true) {
                                    view3 = childAt;
                                    if (i9 >= size2) {
                                        i4 = i8;
                                        i5 = childCount;
                                        z4 = true;
                                        break;
                                    }
                                    MessageObject messageObject = currentMessagesGroup.messages.get(i9);
                                    i4 = i8;
                                    i5 = childCount;
                                    if (ChatActivity.this.selectedMessagesIds[messageObject.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1].indexOfKey(messageObject.getId()) < 0) {
                                        z4 = false;
                                        break;
                                    }
                                    i9++;
                                    childAt = view3;
                                    childCount = i5;
                                    i8 = i4;
                                }
                                canvas.save();
                                MentionsContainerView mentionsContainerView = ChatActivity.this.mentionContainer;
                                float clipTop = (mentionsContainerView != null ? mentionsContainerView.clipTop() : 0.0f) + y;
                                float measuredWidth = getMeasuredWidth();
                                float y2 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                                ChatMessageCell chatMessageCell5 = chatMessageCell;
                                float f15 = y2 - chatActivity2.blurredViewBottomOffset;
                                MentionsContainerView mentionsContainerView2 = ChatActivity.this.mentionContainer;
                                canvas.clipRect(0.0f, clipTop, measuredWidth, f15 - (mentionsContainerView2 != null ? mentionsContainerView2.clipBottom() : 0.0f));
                                canvas.translate(0.0f, ChatActivity.this.chatListView.getY());
                                MessageObject.GroupedMessages.TransitionParams transitionParams2 = currentMessagesGroup.transitionParams;
                                view = view3;
                                groupedMessages2 = currentMessagesGroup;
                                i6 = i;
                                f = y;
                                chatMessageCell2 = chatMessageCell5;
                                z = true;
                                transitionParams2.cell.drawBackground(canvas, (int) f11, (int) f12, (int) f13, (int) f14, transitionParams2.pinnedTop, transitionParams2.pinnedBotton, z4, ChatActivity.this.contentView.getKeyboardHeight());
                                canvas.restore();
                                z2 = true;
                            }
                            if (chatMessageCell2 != null && chatMessageCell2.getPhotoImage().isAnimationRunning()) {
                                invalidate();
                            }
                            float left = ChatActivity.this.chatListView.getLeft();
                            float right = ChatActivity.this.chatListView.getRight();
                            float y3 = ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight();
                            float f16 = y3 - chatActivity.blurredViewBottomOffset;
                            MentionsContainerView mentionsContainerView3 = ChatActivity.this.mentionContainer;
                            if (mentionsContainerView3 != null) {
                                f2 = f + mentionsContainerView3.clipTop();
                                f16 -= ChatActivity.this.mentionContainer.clipBottom();
                            } else {
                                f2 = f;
                            }
                            if (chatMessageCell2 == null || !chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner) {
                                left = Math.max(left, ChatActivity.this.chatListView.getLeft() + view.getX());
                                f2 = Math.max(f2, ChatActivity.this.chatListView.getY() + view.getY());
                                right = Math.min(right, ChatActivity.this.chatListView.getLeft() + view.getX() + view.getMeasuredWidth());
                                f16 = Math.min(f16, ChatActivity.this.chatListView.getY() + view.getY() + view.getMeasuredHeight());
                            }
                            float f17 = left;
                            float f18 = right;
                            float f19 = f2;
                            float f20 = f16;
                            if (f19 < f20) {
                                if (view.getAlpha() != 1.0f) {
                                    f6 = f19;
                                    f7 = f20;
                                    canvas.saveLayerAlpha(f17, f19, f18, f20, (int) (view.getAlpha() * 255.0f), 31);
                                } else {
                                    f6 = f19;
                                    f7 = f20;
                                    canvas.save();
                                }
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(z);
                                    chatMessageCell2.setScrimReaction(ChatActivity.this.scrimViewReaction);
                                }
                                f3 = f6;
                                f4 = f7;
                                canvas.clipRect(f17, f3, f18, f4);
                                canvas.translate(ChatActivity.this.chatListView.getLeft() + view.getX(), ChatActivity.this.chatListView.getY() + view.getY());
                                if (chatMessageCell2 != null && groupedMessages2 == null && chatMessageCell2.drawBackgroundInParent()) {
                                    chatMessageCell2.drawBackgroundInternal(canvas, z);
                                }
                                view2 = view;
                                view2.draw(canvas);
                                if (chatMessageCell2 != null && chatMessageCell2.hasOutboundsContent()) {
                                    chatMessageCell2.drawOutboundsContent(canvas);
                                }
                                if (chatActionCell != null) {
                                    chatActionCell.drawOutboundsContent(canvas);
                                }
                                canvas.restore();
                                if (chatMessageCell2 != null) {
                                    chatMessageCell2.setInvalidatesParent(false);
                                    chatMessageCell2.setScrimReaction(null);
                                }
                            } else {
                                view2 = view;
                                f3 = f19;
                                f4 = f20;
                            }
                            MessageObject.GroupedMessagePosition groupedMessagePosition2 = groupedMessagePosition;
                            if (groupedMessagePosition2 != null || (chatMessageCell2 != null && chatMessageCell2.getTransitionParams().animateBackgroundBoundsInner)) {
                                if (groupedMessagePosition2 == null || groupedMessagePosition2.last || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0)) {
                                    if (groupedMessagePosition2 == null || groupedMessagePosition2.last) {
                                        this.drawTimeAfter.add(chatMessageCell2);
                                    }
                                    if (groupedMessagePosition2 == null || (groupedMessagePosition2.minX == 0 && groupedMessagePosition2.minY == 0 && chatMessageCell2.hasNameLayout())) {
                                        this.drawNamesAfter.add(chatMessageCell2);
                                    }
                                }
                                if (groupedMessagePosition2 == null || (groupedMessagePosition2.flags & 8) != 0) {
                                    this.drawCaptionAfter.add(chatMessageCell2);
                                }
                            }
                            if (ChatActivity.this.scrimViewReaction != null && chatMessageCell2 != null) {
                                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                View view4 = view2;
                                float f21 = f4;
                                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                                if (f3 < f21) {
                                    float alpha2 = view4.getAlpha() * ChatActivity.this.scrimViewAlpha;
                                    if (alpha2 < 1.0f) {
                                        z3 = z2;
                                        f5 = f3;
                                        canvas.saveLayerAlpha(f17, f3, f18, f21, (int) (alpha2 * 255.0f), 31);
                                    } else {
                                        z3 = z2;
                                        f5 = f3;
                                        canvas.save();
                                    }
                                    canvas.clipRect(f17, f5, f18, f21);
                                    canvas.translate(ChatActivity.this.chatListView.getLeft() + view4.getX(), ChatActivity.this.chatListView.getY() + view4.getY());
                                    chatMessageCell2.drawScrimReaction(canvas, ChatActivity.this.scrimViewReaction);
                                    canvas.restore();
                                    z6 = z3;
                                }
                            }
                            z3 = z2;
                            z6 = z3;
                        } else {
                            i4 = i8;
                            i5 = childCount;
                            groupedMessages2 = currentMessagesGroup;
                            f = y;
                            i6 = i;
                        }
                        i8 = i4 + 1;
                        y = f;
                        i = i6;
                        childCount = i5;
                        currentMessagesGroup = groupedMessages2;
                        z5 = true;
                        f9 = 0.0f;
                    }
                    float f22 = y;
                    i2 = i;
                    int size3 = this.drawTimeAfter.size();
                    if (size3 > 0) {
                        for (int i10 = 0; i10 < size3; i10++) {
                            drawChildElement(canvas, f22, this.drawTimeAfter.get(i10), 0);
                        }
                        i3 = 0;
                        this.drawTimeAfter.clear();
                    } else {
                        i3 = 0;
                    }
                    int size4 = this.drawNamesAfter.size();
                    if (size4 > 0) {
                        for (int i11 = 0; i11 < size4; i11++) {
                            drawChildElement(canvas, f22, this.drawNamesAfter.get(i11), 1);
                        }
                        this.drawNamesAfter.clear();
                    }
                    int size5 = this.drawCaptionAfter.size();
                    if (size5 > 0) {
                        while (i3 < size5) {
                            ChatMessageCell chatMessageCell6 = this.drawCaptionAfter.get(i3);
                            if (chatMessageCell6.getCurrentPosition() != null || chatMessageCell6.getTransitionParams().animateBackgroundBoundsInner) {
                                drawChildElement(canvas, f22, chatMessageCell6, 2);
                            }
                            i3++;
                        }
                        this.drawCaptionAfter.clear();
                    }
                } else {
                    int save = canvas.save();
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop(), ChatActivity.this.scrimView.getRight(), ChatActivity.this.scrimView.getBottom(), (int) (ChatActivity.this.scrimViewAlpha * 255.0f), 31);
                    }
                    canvas.translate(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop());
                    if (ChatActivity.this.scrimView == ((BaseFragment) ChatActivity.this).actionBar.getBackButton()) {
                        float max = Math.max(ChatActivity.this.scrimView.getMeasuredWidth(), ChatActivity.this.scrimView.getMeasuredHeight()) / 2;
                        canvas.drawCircle(max, max, 0.7f * max, ChatActivity.this.actionBarBackgroundPaint);
                    }
                    ChatActivity.this.scrimView.draw(canvas);
                    canvas.restoreToCount(save);
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                    i2 = i;
                }
                if (ChatActivity.this.scrimViewReaction == null && ChatActivity.this.scrimViewAlpha < 1.0f) {
                    ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                    canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                }
            } else {
                i2 = i;
            }
            if (ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) {
                MentionsContainerView mentionsContainerView4 = ChatActivity.this.mentionContainer;
                if (mentionsContainerView4 == null || mentionsContainerView4.getVisibility() != 0) {
                    if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.reactionsMentiondownButton != null && ChatActivity.this.reactionsMentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.reactionsMentiondownButton, SystemClock.uptimeMillis());
                    }
                }
                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                    super.drawChild(canvas, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.fireworksOverlay != null) {
                    super.drawChild(canvas, ChatActivity.this.fireworksOverlay, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.gifHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.gifHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.emojiHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.emojiHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.undoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.undoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.topUndoView != null && ChatActivity.this.topUndoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.topUndoView, SystemClock.uptimeMillis());
                }
            }
            if (ChatActivity.this.fixedKeyboardHeight > 0 && this.keyboardHeight < AndroidUtilities.dp(20.0f)) {
                int themedColor2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhite);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != themedColor2) {
                    Paint paint2 = this.backgroundPaint;
                    this.backgroundColor = themedColor2;
                    paint2.setColor(themedColor2);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - ChatActivity.this.fixedKeyboardHeight, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
            }
            if (ChatActivity.this.pullingDownDrawable != null && ChatActivity.this.pullingDownDrawable.needDrawBottomPanel()) {
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 == null || chatActivityEnterView2.getVisibility() != 0) {
                    top = ChatActivity.this.bottomOverlayChat.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.bottomOverlayChat.getBottom();
                } else {
                    top = ChatActivity.this.chatActivityEnterView.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.chatActivityEnterView.getBottom();
                }
                ChatActivity.this.pullingDownDrawable.drawBottomPanel(canvas, top - ((int) ((ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset) * ChatActivity.this.pullingDownAnimateProgress)), bottom, getMeasuredWidth());
            }
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                ((BaseFragment) ChatActivity.this.pullingDownAnimateToActivity).fragmentView.draw(canvas);
                canvas.restore();
            }
            ChatActivity.this.emojiAnimationsOverlay.draw(canvas);
            if (i2 >= 0) {
                canvas.restore();
            }
            if (ChatActivity.this.switchingFromTopics) {
                canvas.save();
                canvas.translate(((BaseFragment) ChatActivity.this).actionBar.getX(), ((BaseFragment) ChatActivity.this).actionBar.getY());
                canvas.saveLayerAlpha(0.0f, 0.0f, ((BaseFragment) ChatActivity.this).actionBar.getWidth(), ((BaseFragment) ChatActivity.this).actionBar.getHeight(), (int) (ChatActivity.this.switchingFromTopicsProgress * 255.0f), 31);
                ((BaseFragment) ChatActivity.this).actionBar.draw(canvas);
                canvas.restore();
                canvas.restore();
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:119:0x02f2  */
        /* JADX WARN: Removed duplicated region for block: B:122:0x0317  */
        /* JADX WARN: Removed duplicated region for block: B:123:0x031b  */
        /* JADX WARN: Removed duplicated region for block: B:126:0x0338  */
        /* JADX WARN: Removed duplicated region for block: B:130:0x0349  */
        /* JADX WARN: Removed duplicated region for block: B:274:0x0718  */
        /* JADX WARN: Removed duplicated region for block: B:277:0x0764  */
        @Override // android.widget.FrameLayout, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onMeasure(int i, int i2) {
            boolean z;
            int childCount;
            int dp;
            int i3;
            int i4;
            int i5;
            int i6;
            int i7;
            int dp2;
            int i8;
            ChatActivity chatActivity;
            int childAdapterPosition;
            ChatActivity chatActivity2;
            TLRPC$User tLRPC$User;
            ChatActivity chatActivity3;
            int size = View.MeasureSpec.getSize(i);
            int size2 = View.MeasureSpec.getSize(i2);
            int i9 = 8;
            if (this.lastWidth != size) {
                ChatActivity.this.globalIgnoreLayout = true;
                this.lastWidth = i;
                if (((BaseFragment) ChatActivity.this).inPreviewMode || (tLRPC$User = (chatActivity2 = ChatActivity.this).currentUser) == null || !tLRPC$User.self) {
                    ChatActivity.this.showSearchAsIcon = false;
                } else {
                    SimpleTextView titleTextView = chatActivity2.avatarContainer.getTitleTextView();
                    if (size - AndroidUtilities.dp(152.0f) <= ((int) titleTextView.getPaint().measureText(titleTextView.getText(), 0, titleTextView.getText().length())) + AndroidUtilities.dp(10.0f)) {
                        ChatActivity.this.showSearchAsIcon = false;
                    } else {
                        ChatActivity.this.showSearchAsIcon = !chatActivity3.showAudioCallAsIcon;
                    }
                }
                if (ChatActivity.this.showSearchAsIcon || ChatActivity.this.showAudioCallAsIcon) {
                    if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                        ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(96.0f);
                    }
                } else if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                    ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(40.0f);
                }
                if (ChatActivity.this.showSearchAsIcon) {
                    if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(0);
                    }
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.hideSubItem(40);
                    }
                } else {
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.showSubItem(40);
                    }
                    if (ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(8);
                    }
                }
                if (!((BaseFragment) ChatActivity.this).actionBar.isSearchFieldVisible() && ChatActivity.this.audioCallIconItem != null) {
                    ChatActivity.this.audioCallIconItem.setVisibility((!ChatActivity.this.showAudioCallAsIcon || ChatActivity.this.showSearchAsIcon) ? 8 : 0);
                }
                if (ChatActivity.this.headerItem != null) {
                    TLRPC$UserFull currentUserInfo = ChatActivity.this.getCurrentUserInfo();
                    if (ChatActivity.this.showAudioCallAsIcon) {
                        ChatActivity.this.headerItem.hideSubItem(32);
                    } else if (currentUserInfo != null && currentUserInfo.phone_calls_available) {
                        ChatActivity.this.headerItem.showSubItem(32, true);
                    }
                }
                ChatActivity.this.globalIgnoreLayout = false;
            }
            setMeasuredDimension(size, size2);
            int paddingTop = size2 - getPaddingTop();
            measureChildWithMargins(((BaseFragment) ChatActivity.this).actionBar, i, 0, i2, 0);
            int measuredHeight = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
            if (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                paddingTop -= measuredHeight;
            }
            int i10 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding;
            boolean z2 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (this.lastHeight != size2) {
                measureKeyboardHeight();
            }
            int keyboardHeight = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardHeight <= AndroidUtilities.dp(20.0f)) {
                ChatActivity chatActivity4 = ChatActivity.this;
                chatActivity4.chatEmojiViewPadding = chatActivity4.fixedKeyboardHeight;
            } else if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                ChatActivity.this.chatEmojiViewPadding = 0;
            } else {
                ChatActivity chatActivity5 = ChatActivity.this;
                chatActivity5.chatEmojiViewPadding = chatActivity5.chatActivityEnterView.isPopupShowing() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() : 0;
            }
            setEmojiKeyboardHeight(ChatActivity.this.chatEmojiViewPadding);
            boolean z3 = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (MediaController.getInstance().getPlayingMessageObject() != null && MediaController.getInstance().getPlayingMessageObject().isRoundVideo() && z2 != z3) {
                for (int i11 = 0; i11 < ChatActivity.this.chatListView.getChildCount(); i11++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i11);
                    if (childAt instanceof ChatMessageCell) {
                        MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                        if (messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject) && (childAdapterPosition = ChatActivity.this.chatListView.getChildAdapterPosition(childAt)) >= 0) {
                            GridLayoutManagerFixed gridLayoutManagerFixed = ChatActivity.this.chatLayoutManager;
                            float measuredHeight2 = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop;
                            ChatActivity chatActivity6 = ChatActivity.this;
                            gridLayoutManagerFixed.scrollToPositionWithOffset(childAdapterPosition, (int) ((((measuredHeight2 - chatActivity6.blurredViewBottomOffset) + ((this.keyboardHeight + chatActivity6.chatEmojiViewPadding) - i10)) - (z3 ? AndroidUtilities.roundMessageSize : AndroidUtilities.roundPlayingMessageSize)) / 2.0f), false);
                            ChatActivity.this.chatAdapter.notifyItemChanged(childAdapterPosition);
                            this.adjustPanLayoutHelper.delayAnimation();
                            z = true;
                            if (!z) {
                                ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
                            }
                            childCount = getChildCount();
                            int i12 = keyboardHeight;
                            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
                            if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                this.inputFieldHeight = 0;
                                dp = 0;
                            } else {
                                this.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                dp = AndroidUtilities.dp(49.0f);
                            }
                            ChatActivity chatActivity7 = ChatActivity.this;
                            chatActivity7.blurredViewTopOffset = 0;
                            chatActivity7.blurredViewBottomOffset = 0;
                            if (SharedConfig.chatBlurEnabled()) {
                                ChatActivity chatActivity8 = ChatActivity.this;
                                chatActivity8.blurredViewTopOffset = measuredHeight;
                                chatActivity8.blurredViewBottomOffset = AndroidUtilities.dp(203.0f);
                            }
                            i3 = 0;
                            while (i3 < childCount) {
                                View childAt2 = getChildAt(i3);
                                if (childAt2 != null && childAt2.getVisibility() != i9) {
                                    ChatActivity chatActivity9 = ChatActivity.this;
                                    if (childAt2 != chatActivity9.chatActivityEnterView && childAt2 != ((BaseFragment) chatActivity9).actionBar) {
                                        if (childAt2 != this.backgroundView) {
                                            if (childAt2 != ChatActivity.this.blurredView) {
                                                i6 = i12;
                                                if (childAt2 != ChatActivity.this.chatListView) {
                                                    if (childAt2 != ChatActivity.this.progressView) {
                                                        if (childAt2 != ChatActivity.this.instantCameraView && childAt2 != ChatActivity.this.overlayView) {
                                                            if (childAt2 != ChatActivity.this.emptyViewContainer) {
                                                                if (childAt2 == ChatActivity.this.messagesSearchListView) {
                                                                    childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((size2 - measuredHeight) - AndroidUtilities.dp(48.0f), 1073741824));
                                                                } else if (ChatActivity.this.chatActivityEnterView.isPopupView(childAt2)) {
                                                                    int popupViewHeight = ChatActivity.this.chatActivityEnterView.getPopupViewHeight(childAt2);
                                                                    if (((BaseFragment) ChatActivity.this).inBubbleMode) {
                                                                        int paddingTop2 = (paddingTop - this.inputFieldHeight) + measuredHeight + getPaddingTop();
                                                                        if (popupViewHeight < 0) {
                                                                            popupViewHeight = Math.max(Math.min(paddingTop2, AndroidUtilities.dp(350.0f)), paddingTop2 / 2);
                                                                        }
                                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(popupViewHeight, 1073741824));
                                                                    } else if (AndroidUtilities.isInMultiwindow) {
                                                                        int paddingTop3 = (((paddingTop - this.inputFieldHeight) + measuredHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop();
                                                                        if (popupViewHeight < 0) {
                                                                            popupViewHeight = Math.max(Math.min(paddingTop3, AndroidUtilities.dp(350.0f)), paddingTop3 / 2);
                                                                        }
                                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(popupViewHeight, 1073741824));
                                                                    } else {
                                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(childAt2.getLayoutParams().height, 1073741824));
                                                                    }
                                                                } else {
                                                                    ChatActivity chatActivity10 = ChatActivity.this;
                                                                    MentionsContainerView mentionsContainerView = chatActivity10.mentionContainer;
                                                                    if (childAt2 != mentionsContainerView) {
                                                                        if (childAt2 == chatActivity10.textSelectionHelper.getOverlayView(getContext())) {
                                                                            int makeMeasureSpec = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                            int i13 = ChatActivity.this.blurredViewTopOffset + paddingTop;
                                                                            if (i6 <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0) {
                                                                                ChatActivity.this.textSelectionHelper.setKeyboardSize(0);
                                                                            } else {
                                                                                i13 += i6;
                                                                                ChatActivity.this.textSelectionHelper.setKeyboardSize(i6);
                                                                            }
                                                                            childAt2.measure(makeMeasureSpec, View.MeasureSpec.makeMeasureSpec(i13, 1073741824));
                                                                        } else if (childAt2 == ChatActivity.this.forwardingPreviewView) {
                                                                            int makeMeasureSpec2 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                                            int i14 = size2 - AndroidUtilities.statusBarHeight;
                                                                            if (i6 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                                i14 += i6;
                                                                            }
                                                                            childAt2.measure(makeMeasureSpec2, View.MeasureSpec.makeMeasureSpec(i14, 1073741824));
                                                                        } else {
                                                                            i5 = i6;
                                                                            i4 = i3;
                                                                            measureChildWithMargins(childAt2, i, 0, i2, 0);
                                                                        }
                                                                    } else {
                                                                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mentionsContainerView.getLayoutParams();
                                                                        if (ChatActivity.this.mentionContainer.getAdapter().isBannedInline()) {
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingTop, Integer.MIN_VALUE));
                                                                        } else {
                                                                            ChatActivity.this.mentionContainer.setIgnoreLayout(true);
                                                                            LinearLayoutManager currentLayoutManager = ChatActivity.this.mentionContainer.getCurrentLayoutManager();
                                                                            if (currentLayoutManager instanceof ExtendedGridLayoutManager) {
                                                                                int rowsCount = ((ExtendedGridLayoutManager) currentLayoutManager).getRowsCount(size) * 102;
                                                                                if (ChatActivity.this.mentionContainer.getAdapter().isBotContext() && (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null || ChatActivity.this.mentionContainer.getAdapter().getBotWebViewSwitch() != null)) {
                                                                                    rowsCount += 34;
                                                                                }
                                                                                dp2 = (paddingTop - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (rowsCount != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                                                Math.max(0, dp2 - AndroidUtilities.dp(Math.min(rowsCount, 122.399994f)));
                                                                            } else {
                                                                                int lastItemCount = ChatActivity.this.mentionContainer.getAdapter().getLastItemCount();
                                                                                if (ChatActivity.this.mentionContainer.getAdapter().isBotContext()) {
                                                                                    if (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() == null && ChatActivity.this.mentionContainer.getAdapter().getBotWebViewSwitch() == null) {
                                                                                        i8 = 0;
                                                                                    } else {
                                                                                        lastItemCount--;
                                                                                        i8 = 36;
                                                                                    }
                                                                                    i7 = i8 + (lastItemCount * 68);
                                                                                } else {
                                                                                    i7 = (lastItemCount * 36) + 0;
                                                                                }
                                                                                dp2 = (i7 != 0 ? AndroidUtilities.dp(2.0f) : 0) + (paddingTop - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                                            }
                                                                            layoutParams.height = dp2;
                                                                            layoutParams.topMargin = 0;
                                                                            ChatActivity.this.mentionContainer.setIgnoreLayout(false);
                                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(layoutParams.height, 1073741824));
                                                                        }
                                                                        ChatActivity.this.mentionContainer.setTranslationY(chatActivity.chatActivityEnterView.getAnimatedTop());
                                                                    }
                                                                }
                                                            } else {
                                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(paddingTop, 1073741824));
                                                            }
                                                        } else {
                                                            i5 = i6;
                                                            i4 = i3;
                                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(((size2 - this.inputFieldHeight) - ChatActivity.this.chatEmojiViewPadding) + AndroidUtilities.dp(3.0f), 1073741824));
                                                        }
                                                        i3 = i4 + 1;
                                                        i12 = i5;
                                                        i9 = 8;
                                                    } else {
                                                        childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), ((paddingTop - this.inputFieldHeight) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight)) + AndroidUtilities.dp((ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0) + 2)), 1073741824));
                                                    }
                                                } else {
                                                    int makeMeasureSpec3 = View.MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                    int i15 = (paddingTop - dp) - ((!((BaseFragment) ChatActivity.this).inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight);
                                                    ChatActivity chatActivity11 = ChatActivity.this;
                                                    int i16 = i15 + chatActivity11.blurredViewTopOffset + chatActivity11.blurredViewBottomOffset;
                                                    if (i6 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                        i16 += i6;
                                                    }
                                                    if (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0 && ChatActivity.this.bottomOverlayStartButton != null && ChatActivity.this.bottomOverlayStartButton.getVisibility() != i9) {
                                                        i16 -= AndroidUtilities.dp(16.0f);
                                                    }
                                                    childAt2.measure(makeMeasureSpec3, View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), i16), 1073741824));
                                                }
                                            } else {
                                                i6 = i12;
                                                childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec((i6 <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0) ? size2 : size2 + i6, 1073741824));
                                            }
                                            i5 = i6;
                                            i4 = i3;
                                            i3 = i4 + 1;
                                            i12 = i5;
                                            i9 = 8;
                                        } else {
                                            childAt2.measure(View.MeasureSpec.makeMeasureSpec(size, 1073741824), View.MeasureSpec.makeMeasureSpec(size2, 1073741824));
                                        }
                                    }
                                }
                                i4 = i3;
                                i5 = i12;
                                i3 = i4 + 1;
                                i12 = i5;
                                i9 = 8;
                            }
                            if (ChatActivity.this.fixPaddingsInLayout) {
                                ChatActivity.this.globalIgnoreLayout = true;
                                ChatActivity.this.invalidateChatListViewTopPadding();
                                ChatActivity.this.invalidateMessagesVisiblePart();
                                ChatActivity.this.fixPaddingsInLayout = false;
                                ChatActivity.this.chatListView.measure(View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), 1073741824));
                                ChatActivity.this.globalIgnoreLayout = false;
                            }
                            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                                final int i17 = ChatActivity.this.scrollToPositionOnRecreate;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityFragmentView$$ExternalSyntheticLambda0
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.ChatActivityFragmentView.this.lambda$onMeasure$1(i17);
                                    }
                                });
                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                            }
                            ChatActivity.this.updateBulletinLayout();
                            this.lastHeight = size2;
                        }
                    }
                }
            }
            z = false;
            if (!z) {
            }
            childCount = getChildCount();
            int i122 = keyboardHeight;
            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, i, 0, i2, 0);
            if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
            }
            ChatActivity chatActivity72 = ChatActivity.this;
            chatActivity72.blurredViewTopOffset = 0;
            chatActivity72.blurredViewBottomOffset = 0;
            if (SharedConfig.chatBlurEnabled()) {
            }
            i3 = 0;
            while (i3 < childCount) {
            }
            if (ChatActivity.this.fixPaddingsInLayout) {
            }
            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
            }
            ChatActivity.this.updateBulletinLayout();
            this.lastHeight = size2;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMeasure$1(int i) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i, ChatActivity.this.scrollToOffsetOnRecreate);
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (ChatActivity.this.globalIgnoreLayout) {
                return;
            }
            super.requestLayout();
        }

        /* JADX WARN: Code restructure failed: missing block: B:122:0x0227, code lost:
            if (getLayoutParams().height < 0) goto L96;
         */
        /* JADX WARN: Code restructure failed: missing block: B:153:0x02a0, code lost:
            if (getLayoutParams().height < 0) goto L96;
         */
        /* JADX WARN: Code restructure failed: missing block: B:154:0x02a2, code lost:
            r8 = r8 - r2;
         */
        /* JADX WARN: Removed duplicated region for block: B:35:0x008a  */
        /* JADX WARN: Removed duplicated region for block: B:50:0x00d3  */
        /* JADX WARN: Removed duplicated region for block: B:54:0x00e9  */
        /* JADX WARN: Removed duplicated region for block: B:64:0x00ff  */
        /* JADX WARN: Removed duplicated region for block: B:65:0x011d  */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
            int emojiPadding;
            int i5;
            int i6;
            int i7;
            int i8;
            int i9;
            int i10;
            ChatActivity chatActivity;
            int measuredHeight;
            int childCount = getChildCount();
            int keyboardHeight = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardHeight <= AndroidUtilities.dp(20.0f)) {
                emojiPadding = ChatActivity.this.fixedKeyboardHeight;
            } else {
                emojiPadding = (keyboardHeight > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) ? 0 : ChatActivity.this.chatActivityEnterView.getEmojiPadding();
            }
            for (int i11 = 0; i11 < childCount; i11++) {
                View childAt = getChildAt(i11);
                if (childAt != null && childAt.getVisibility() != 8) {
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) childAt.getLayoutParams();
                    int measuredWidth = childAt.getMeasuredWidth();
                    int measuredHeight2 = childAt.getMeasuredHeight();
                    int i12 = layoutParams.gravity;
                    if (i12 == -1) {
                        i12 = 51;
                    }
                    int i13 = i12 & 7;
                    int i14 = i12 & 112;
                    int i15 = i13 & 7;
                    if (i15 == 1) {
                        i5 = (((i3 - i) - measuredWidth) / 2) + layoutParams.leftMargin;
                        i6 = layoutParams.rightMargin;
                    } else if (i15 == 5) {
                        i5 = i3 - measuredWidth;
                        i6 = layoutParams.rightMargin;
                    } else {
                        i7 = layoutParams.leftMargin;
                        if (i14 == 16) {
                            if (i14 == 48) {
                                i10 = layoutParams.topMargin + getPaddingTop();
                                if (childAt != ((BaseFragment) ChatActivity.this).actionBar && ((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0) {
                                    i10 += ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight();
                                    if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                        i10 += AndroidUtilities.statusBarHeight;
                                    }
                                }
                            } else if (i14 == 80) {
                                i8 = ((i4 - emojiPadding) - i2) - measuredHeight2;
                                i9 = layoutParams.bottomMargin;
                            } else {
                                i10 = layoutParams.topMargin;
                            }
                            if (childAt != ChatActivity.this.blurredView && childAt != this.backgroundView && !(childAt instanceof HintView) && !(childAt instanceof ChecksHintView)) {
                                chatActivity = ChatActivity.this;
                                if (childAt == chatActivity.mentionContainer) {
                                    if (childAt == chatActivity.pagedownButton || childAt == ChatActivity.this.mentiondownButton || childAt == ChatActivity.this.reactionsMentiondownButton) {
                                        if (!((BaseFragment) ChatActivity.this).inPreviewMode) {
                                            measuredHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                            i10 -= measuredHeight;
                                        }
                                    } else {
                                        if (childAt == ChatActivity.this.emptyViewContainer) {
                                            measuredHeight = (this.inputFieldHeight / 2) - (((BaseFragment) ChatActivity.this).actionBar.getVisibility() == 0 ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() / 2 : 0);
                                        } else if (!ChatActivity.this.chatActivityEnterView.isPopupView(childAt)) {
                                            if (childAt != ChatActivity.this.gifHintTextView && childAt != ChatActivity.this.voiceHintTextView && childAt != ChatActivity.this.mediaBanTooltip && childAt != ChatActivity.this.emojiHintTextView) {
                                                if (childAt != ChatActivity.this.chatListView && childAt != ChatActivity.this.floatingDateView && childAt != ChatActivity.this.infoTopView) {
                                                    if (childAt != ChatActivity.this.progressView) {
                                                        if (childAt == ((BaseFragment) ChatActivity.this).actionBar) {
                                                            if (((BaseFragment) ChatActivity.this).inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                                                i10 += AndroidUtilities.statusBarHeight;
                                                            }
                                                            measuredHeight = getPaddingTop();
                                                        } else if (childAt == ChatActivity.this.videoPlayerContainer) {
                                                            i10 = ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() - emojiPadding;
                                                            if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                            }
                                                        } else if (childAt != ChatActivity.this.instantCameraView && childAt != ChatActivity.this.overlayView && childAt != ChatActivity.this.animatingImageView) {
                                                            if (childAt == ChatActivity.this.textSelectionHelper.getOverlayView(getContext())) {
                                                                i10 -= emojiPadding;
                                                                if (keyboardHeight > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                    i10 -= keyboardHeight;
                                                                }
                                                                measuredHeight = ChatActivity.this.blurredViewTopOffset;
                                                            } else {
                                                                ChatActivity chatActivity2 = ChatActivity.this;
                                                                ChatActivityEnterView chatActivityEnterView = chatActivity2.chatActivityEnterView;
                                                                if (chatActivityEnterView != null && childAt == chatActivityEnterView.botCommandsMenuContainer) {
                                                                    measuredHeight = this.inputFieldHeight;
                                                                } else if (childAt == chatActivity2.forwardingPreviewView) {
                                                                    i10 = AndroidUtilities.statusBarHeight;
                                                                }
                                                            }
                                                        }
                                                    } else if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                        measuredHeight = AndroidUtilities.dp(48.0f);
                                                    }
                                                } else {
                                                    ChatActivity chatActivity3 = ChatActivity.this;
                                                    int i16 = i10 - chatActivity3.blurredViewTopOffset;
                                                    if (!((BaseFragment) chatActivity3).inPreviewMode) {
                                                        i16 -= this.inputFieldHeight - AndroidUtilities.dp(51.0f);
                                                    }
                                                    i10 = i16 - emojiPadding;
                                                    if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                                                    }
                                                }
                                            } else {
                                                measuredHeight = this.inputFieldHeight;
                                            }
                                        } else {
                                            i10 = (AndroidUtilities.isInMultiwindow || ((BaseFragment) ChatActivity.this).inBubbleMode) ? (ChatActivity.this.chatActivityEnterView.getTop() - childAt.getMeasuredHeight()) + AndroidUtilities.dp(1.0f) : ChatActivity.this.chatActivityEnterView.getBottom();
                                        }
                                        i10 -= measuredHeight;
                                    }
                                } else {
                                    i10 -= chatActivity.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2.0f);
                                    ChatActivity chatActivity4 = ChatActivity.this;
                                    chatActivity4.mentionContainer.setTranslationY(chatActivity4.chatActivityEnterView.getAnimatedTop());
                                }
                                childAt.layout(i7, i10, measuredWidth + i7, measuredHeight2 + i10);
                            }
                            i10 = 0;
                            childAt.layout(i7, i10, measuredWidth + i7, measuredHeight2 + i10);
                        } else {
                            i8 = ((((i4 - emojiPadding) - i2) - measuredHeight2) / 2) + layoutParams.topMargin;
                            i9 = layoutParams.bottomMargin;
                        }
                        i10 = i8 - i9;
                        if (childAt != ChatActivity.this.blurredView) {
                            chatActivity = ChatActivity.this;
                            if (childAt == chatActivity.mentionContainer) {
                            }
                            childAt.layout(i7, i10, measuredWidth + i7, measuredHeight2 + i10);
                        }
                        i10 = 0;
                        childAt.layout(i7, i10, measuredWidth + i7, measuredHeight2 + i10);
                    }
                    i7 = i5 - i6;
                    if (i14 == 16) {
                    }
                    i10 = i8 - i9;
                    if (childAt != ChatActivity.this.blurredView) {
                    }
                    i10 = 0;
                    childAt.layout(i7, i10, measuredWidth + i7, measuredHeight2 + i10);
                }
            }
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false, false);
            notifyHeightChanged();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void setNonNoveTranslation(float f) {
            ChatActivity.this.contentView.setTranslationY(f);
            ((BaseFragment) ChatActivity.this).actionBar.setTranslationY(0.0f);
            ChatActivity.this.emptyViewContainer.setTranslationY(0.0f);
            ChatActivity.this.progressView.setTranslationY(0.0f);
            ChatActivity.this.contentPanTranslation = 0.0f;
            ChatActivity.this.contentView.setBackgroundTranslation(0);
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.onPanTranslationUpdate(0.0f);
            }
            if (ChatActivity.this.blurredView != null) {
                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(0.0f);
            }
            ChatActivity.this.setFragmentPanTranslationOffset(0);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        @Override // android.view.View
        public void setPadding(int i, int i2, int i3, int i4) {
            ChatActivity.this.contentPaddingTop = i2;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
            ForwardingPreviewView forwardingPreviewView;
            if (keyEvent.getKeyCode() == 4 && keyEvent.getAction() == 1 && (forwardingPreviewView = ChatActivity.this.forwardingPreviewView) != null && forwardingPreviewView.isShowing()) {
                ChatActivity.this.forwardingPreviewView.dismiss(true);
                return true;
            }
            return super.dispatchKeyEvent(keyEvent);
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected Drawable getNewDrawable() {
            Drawable wallpaperDrawable = ChatActivity.this.themeDelegate.getWallpaperDrawable();
            return wallpaperDrawable != null ? wallpaperDrawable : super.getNewDrawable();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean getNewDrawableMotion() {
            if (ChatActivity.this.themeDelegate.wallpaper == null) {
                return super.getNewDrawableMotion();
            }
            return ChatActivity.this.themeDelegate.wallpaper.settings != null && ChatActivity.this.themeDelegate.wallpaper.settings.motion;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:55:0x0150  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:69:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateSecretStatus() {
        ChatActivityEnterView chatActivityEnterView;
        if (this.bottomOverlay == null) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        boolean z = true;
        if (tLRPC$Chat != null && !ChatObject.canSendMessages(tLRPC$Chat) && !ChatObject.canSendAnyMedia(this.currentChat)) {
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (!tLRPC$Chat2.gigagroup && (!ChatObject.isChannel(tLRPC$Chat2) || this.currentChat.megagroup)) {
                TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat3.default_banned_rights;
                if (tLRPC$TL_chatBannedRights != null && tLRPC$TL_chatBannedRights.send_messages) {
                    this.bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", R.string.GlobalSendMessageRestricted));
                } else if (AndroidUtilities.isBannedForever(tLRPC$Chat3.banned_rights)) {
                    this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", R.string.SendMessageRestrictedForever));
                } else {
                    this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                }
                this.bottomOverlay.setVisibility(0);
                AnimatorSet animatorSet = this.mentionListAnimation;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.mentionListAnimation = null;
                }
                this.mentionContainer.setVisibility(8);
                this.mentionContainer.setTag(null);
                updateMessageListAccessibilityVisibility();
                SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
                if (suggestEmojiView != null) {
                    suggestEmojiView.forceClose();
                }
                if (this.inPreviewMode) {
                    this.bottomOverlay.setVisibility(4);
                }
                if (z) {
                    return;
                }
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                    return;
                }
                return;
            }
        }
        createEmptyView();
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat == null || this.bigEmptyView == null) {
            this.bottomOverlay.setVisibility(4);
            if (this.suggestEmojiPanel == null || (chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.hasText()) {
                return;
            }
            this.suggestEmojiPanel.fireUpdate();
            return;
        }
        if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested) {
            this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
        } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) {
            TextView textView = this.bottomOverlayText;
            int i = R.string.AwaitingEncryption;
            textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", i, "<b>" + this.currentUser.first_name + "</b>")));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
        } else if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatDiscarded) {
            this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
            this.bottomOverlay.setVisibility(0);
            this.chatActivityEnterView.setVisibility(4);
            this.chatActivityEnterView.setFieldText("");
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, false);
        } else {
            if (tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) {
                this.bottomOverlay.setVisibility(4);
                if (!this.inPreviewMode) {
                    this.chatActivityEnterView.setVisibility(0);
                }
            }
            z = false;
        }
        checkRaiseSensors();
        checkActionBarMenu(false);
        if (this.inPreviewMode) {
        }
        if (z) {
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRequestPermissionsResultFragment(int i, String[] strArr, int[] iArr) {
        ChatAttachAlert chatAttachAlert;
        ChatAttachAlert chatAttachAlert2;
        boolean z;
        ChatAttachAlert chatAttachAlert3;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onRequestPermissionsResultFragment(i, strArr, iArr);
        }
        if (i == 4) {
            ChatAttachAlert chatAttachAlert4 = this.chatAttachAlert;
            if (chatAttachAlert4 != null) {
                chatAttachAlert4.getPhotoLayout().checkStorage();
            }
            ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
            if (chatThemeBottomSheet == null || (chatAttachAlert3 = chatThemeBottomSheet.chatAttachAlert) == null) {
                return;
            }
            chatAttachAlert3.getPhotoLayout().checkStorage();
        } else if ((i == 5 || i == 30) && (chatAttachAlert = this.chatAttachAlert) != null) {
            chatAttachAlert.onRequestPermissionsResultFragment(i, strArr, iArr);
        } else {
            boolean z2 = true;
            if ((i == 17 || i == 18) && (chatAttachAlert2 = this.chatAttachAlert) != null) {
                chatAttachAlert2.getPhotoLayout().checkCamera((iArr.length <= 0 || iArr[0] != 0) ? false : false);
                this.chatAttachAlert.getPhotoLayout().checkStorage();
            } else if (i == 21) {
                if (getParentActivity() == null || iArr == null || iArr.length == 0 || iArr[0] == 0) {
                    return;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("PermissionNoAudioVideoWithHint", R.string.PermissionNoAudioVideoWithHint));
                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda29
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i2) {
                        ChatActivity.this.lambda$onRequestPermissionsResultFragment$122(dialogInterface, i2);
                    }
                });
                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                builder.show();
            } else if (i == 19 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                processSelectedAttach(0);
            } else if (i == 20 && iArr != null && iArr.length > 0 && iArr[0] == 0) {
                processSelectedAttach(2);
            } else if (((i == 101 || i == 102) && this.currentUser != null) || (i == 103 && this.currentChat != null)) {
                int i2 = 0;
                while (true) {
                    if (i2 >= iArr.length) {
                        z = true;
                        break;
                    } else if (iArr[i2] != 0) {
                        z = false;
                        break;
                    } else {
                        i2++;
                    }
                }
                if (iArr.length <= 0 || !z) {
                    VoIPHelper.permissionDenied(getParentActivity(), null, i);
                } else if (i == 103) {
                    VoIPHelper.startCall(this.currentChat, null, null, this.createGroupCall, getParentActivity(), this, getAccountInstance());
                } else {
                    TLRPC$User tLRPC$User = this.currentUser;
                    boolean z3 = i == 102;
                    TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                    VoIPHelper.startCall(tLRPC$User, z3, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onRequestPermissionsResultFragment$122(DialogInterface dialogInterface, int i) {
        try {
            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.setData(Uri.parse("package:" + ApplicationLoader.applicationContext.getPackageName()));
            getParentActivity().startActivity(intent);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:75:0x00ae  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void checkActionBarMenu(boolean z) {
        TLRPC$User tLRPC$User;
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        boolean z2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if ((tLRPC$EncryptedChat != null && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat)) || ((this.currentChat != null && (this.chatMode != 0 || this.threadMessageId != 0 || (tLRPC$ChatFull = this.chatInfo) == null || tLRPC$ChatFull.ttl_period == 0)) || ((tLRPC$User = this.currentUser) != null && (UserObject.isDeleted(tLRPC$User) || (this.currentEncryptedChat == null && ((tLRPC$UserFull = this.userInfo) == null || tLRPC$UserFull.ttl_period == 0)))))) {
            ActionBarMenuItem.Item item = this.timeItem2;
            if (item != null) {
                item.setVisibility(8);
            }
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            if (chatAvatarContainer != null) {
                chatAvatarContainer.hideTimeItem(z);
            }
        } else {
            ActionBarMenuItem.Item item2 = this.timeItem2;
            if (item2 != null) {
                item2.setVisibility(0);
            }
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (chatAvatarContainer2 != null) {
                chatAvatarContainer2.showTimeItem(z);
            }
        }
        ActionBarMenuItem.Item item3 = this.viewAsTopics;
        if (item3 != null) {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            item3.setVisibility((tLRPC$Chat == null || !tLRPC$Chat.forum) ? 8 : 0);
        }
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        if (chatAvatarContainer3 != null) {
            TLRPC$EncryptedChat tLRPC$EncryptedChat2 = this.currentEncryptedChat;
            if (tLRPC$EncryptedChat2 != null) {
                chatAvatarContainer3.setTime(tLRPC$EncryptedChat2.ttl, z);
            } else {
                TLRPC$UserFull tLRPC$UserFull2 = this.userInfo;
                if (tLRPC$UserFull2 != null) {
                    chatAvatarContainer3.setTime(tLRPC$UserFull2.ttl_period, z);
                } else {
                    TLRPC$ChatFull tLRPC$ChatFull3 = this.chatInfo;
                    if (tLRPC$ChatFull3 != null) {
                        chatAvatarContainer3.setTime(tLRPC$ChatFull3.ttl_period, z);
                    }
                }
            }
        }
        if (this.clearHistoryItem != null && (tLRPC$ChatFull2 = this.chatInfo) != null) {
            if (!tLRPC$ChatFull2.can_delete_channel && ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                if (!tLRPC$Chat2.megagroup || ChatObject.isPublic(tLRPC$Chat2)) {
                    z2 = false;
                    this.clearHistoryItem.setVisibility(z2 ? 0 : 8);
                }
            }
            z2 = true;
            this.clearHistoryItem.setVisibility(z2 ? 0 : 8);
        }
        checkAndUpdateAvatar();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMessageType(MessageObject messageObject) {
        String str;
        String str2;
        if (messageObject == null) {
            return -1;
        }
        boolean z = false;
        boolean z2 = true;
        if (this.currentEncryptedChat == null) {
            if (messageObject.isEditing()) {
                return -1;
            }
            if (messageObject.getId() <= 0 && messageObject.isOut()) {
                if (messageObject.isSendError()) {
                    return !messageObject.isMediaEmpty() ? 0 : 20;
                }
                return -1;
            } else if (messageObject.isAnimatedEmoji()) {
                return 2;
            } else {
                int i = messageObject.type;
                if (i == 6) {
                    return -1;
                }
                if (i == 10 || i == 11 || i == 21 || messageObject.isWallpaperAction()) {
                    return messageObject.getId() == 0 ? -1 : 1;
                } else if (messageObject.isVoice()) {
                    return 2;
                } else {
                    if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                        TLRPC$InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        return inputStickerSet instanceof TLRPC$TL_inputStickerSetID ? !getMediaDataController().isStickerPackInstalled(inputStickerSet.id) ? 7 : 9 : (!(inputStickerSet instanceof TLRPC$TL_inputStickerSetShortName) || getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) ? 9 : 7;
                    }
                    if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                            z = true;
                        }
                        if (z || !messageObject.mediaExists) {
                            z2 = z;
                        }
                        if (z2) {
                            if (messageObject.getDocument() != null && !messageObject.isMusic() && (str2 = messageObject.getDocument().mime_type) != null) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                }
                                if (str2.endsWith("/xml")) {
                                    return 5;
                                }
                                if ((!messageObject.isNewGif() && str2.endsWith("/mp4")) || str2.endsWith("/png") || str2.endsWith("/jpg") || str2.endsWith("/jpeg")) {
                                    return 6;
                                }
                            }
                            return 4;
                        }
                    } else if (messageObject.type == 12) {
                        return 8;
                    } else {
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
            }
        } else if (messageObject.isSending()) {
            return -1;
        } else {
            if (messageObject.isAnimatedEmoji()) {
                return 2;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            }
            int i2 = messageObject.type;
            if (i2 == 10 || i2 == 11) {
                return (messageObject.getId() == 0 || messageObject.isSending()) ? -1 : 1;
            } else if (messageObject.isVoice()) {
                return 2;
            } else {
                if (!messageObject.isAnimatedEmoji() && (messageObject.isSticker() || messageObject.isAnimatedSticker())) {
                    TLRPC$InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                    if ((inputStickerSet2 instanceof TLRPC$TL_inputStickerSetShortName) && !getMediaDataController().isStickerPackInstalled(inputStickerSet2.short_name)) {
                        return 7;
                    }
                } else if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                    if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath) && new File(messageObject.messageOwner.attachPath).exists()) {
                        z = true;
                    }
                    if (z || !FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).exists()) {
                        z2 = z;
                    }
                    if (z2) {
                        if (messageObject.getDocument() != null && (str = messageObject.getDocument().mime_type) != null && str.endsWith("text/xml")) {
                            return 5;
                        }
                        if (messageObject.messageOwner.ttl <= 0) {
                            return 4;
                        }
                    }
                } else if (messageObject.type == 12) {
                    return 8;
                } else {
                    if (messageObject.isMediaEmpty()) {
                        return 3;
                    }
                }
                return 2;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void addToSelectedMessages(MessageObject messageObject, boolean z) {
        addToSelectedMessages(messageObject, z, true);
    }

    private void addToSelectedMessages(MessageObject messageObject, boolean z, boolean z2) {
        int i;
        int i2;
        int i3;
        int i4;
        int i5;
        TLRPC$Chat tLRPC$Chat;
        final int i6;
        int i7;
        String str;
        TLRPC$Message tLRPC$Message;
        TLRPC$Message tLRPC$Message2;
        int i8 = this.cantForwardMessagesCount;
        if (messageObject != null) {
            ArrayList<MessageObject> arrayList = this.threadMessageObjects;
            if (arrayList != null && arrayList.contains(messageObject)) {
                return;
            }
            char c = messageObject.getDialogId() == this.dialog_id ? (char) 0 : (char) 1;
            if (z && messageObject.getGroupId() != 0) {
                MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    boolean z3 = false;
                    int i9 = 0;
                    for (int i10 = 0; i10 < groupedMessages.messages.size(); i10++) {
                        if (this.selectedMessagesIds[c].indexOfKey(groupedMessages.messages.get(i10).getId()) < 0) {
                            i9 = i10;
                            z3 = true;
                        }
                    }
                    int i11 = 0;
                    while (i11 < groupedMessages.messages.size()) {
                        MessageObject messageObject2 = groupedMessages.messages.get(i11);
                        if (z3) {
                            if (this.selectedMessagesIds[c].indexOfKey(messageObject2.getId()) < 0) {
                                addToSelectedMessages(messageObject2, false, i11 == i9);
                            }
                        } else {
                            addToSelectedMessages(messageObject2, false, i11 == groupedMessages.messages.size() - 1);
                        }
                        if (!TextUtils.isEmpty(messageObject2.caption)) {
                            showTextSelectionHint(messageObject);
                        }
                        i11++;
                    }
                    return;
                }
                return;
            } else if (this.selectedMessagesIds[c].indexOfKey(messageObject.getId()) >= 0) {
                this.selectedMessagesIds[c].remove(messageObject.getId());
                if (this.reportType < 0) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((tLRPC$Message2 = messageObject.messageOwner) == null || !tLRPC$Message2.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].remove(messageObject.getId());
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].remove(messageObject.getId());
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount--;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount--;
                    }
                    boolean isChatNoForwards = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards) {
                        this.cantForwardMessagesCount--;
                    } else {
                        this.canForwardMessagesCount--;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards) {
                        this.canSaveMusicCount--;
                    } else if (messageObject.isDocument() && !isChatNoForwards) {
                        this.canSaveDocumentsCount--;
                    } else {
                        this.cantSaveMessagesCount--;
                    }
                }
            } else if (this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() >= 100) {
                AndroidUtilities.shakeView(this.selectedMessagesCountTextView);
                Vibrator vibrator = (Vibrator) ApplicationLoader.applicationContext.getSystemService("vibrator");
                if (vibrator != null) {
                    vibrator.vibrate(200L);
                    return;
                }
                return;
            } else {
                this.selectedMessagesIds[c].put(messageObject.getId(), messageObject);
                if (this.reportType < 0) {
                    if ((messageObject.type == 0 || messageObject.isAnimatedEmoji() || messageObject.caption != null) && ((tLRPC$Message = messageObject.messageOwner) == null || !tLRPC$Message.noforwards)) {
                        this.selectedMessagesCanCopyIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (!messageObject.isAnimatedEmoji() && ((messageObject.isSticker() || messageObject.isAnimatedSticker()) && MessageObject.isStickerHasSet(messageObject.getDocument()))) {
                        this.selectedMessagesCanStarIds[c].put(messageObject.getId(), messageObject);
                    }
                    if (messageObject.canEditMessage(this.currentChat)) {
                        this.canEditMessagesCount++;
                    }
                    if (!messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat)) {
                        this.cantDeleteMessagesCount++;
                    }
                    boolean isChatNoForwards2 = getMessagesController().isChatNoForwards(this.currentChat);
                    if (this.chatMode == 1 || !messageObject.canForwardMessage() || isChatNoForwards2) {
                        this.cantForwardMessagesCount++;
                    } else {
                        this.canForwardMessagesCount++;
                    }
                    if (messageObject.isMusic() && !isChatNoForwards2) {
                        this.canSaveMusicCount++;
                    } else if (messageObject.isDocument() && !isChatNoForwards2) {
                        this.canSaveDocumentsCount++;
                    } else {
                        this.cantSaveMessagesCount++;
                    }
                    if (z) {
                        showTextSelectionHint(messageObject);
                    }
                }
            }
        }
        AnimatorSet animatorSet = this.forwardButtonAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.forwardButtonAnimation = null;
        }
        if (z2 && this.actionBar.isActionModeShowed() && this.reportType < 0) {
            int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
            if (size == 0) {
                hideActionMode();
                updatePinnedMessageView(true);
            } else {
                createActionMode();
                ActionBarMenuItem item = this.actionBar.createActionMode().getItem(25);
                ActionBarMenuItem item2 = this.actionBar.createActionMode().getItem(10);
                ActionBarMenuItem item3 = this.actionBar.createActionMode().getItem(22);
                final ActionBarMenuItem item4 = this.actionBar.createActionMode().getItem(23);
                ActionBarMenuItem item5 = this.actionBar.createActionMode().getItem(11);
                ActionBarMenuItem item6 = this.actionBar.createActionMode().getItem(12);
                createBottomMessagesActionButtons();
                boolean z4 = getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage();
                if ((i8 == 0 && this.cantForwardMessagesCount != 0) || (i8 != 0 && this.cantForwardMessagesCount == 0)) {
                    this.forwardButtonAnimation = new AnimatorSet();
                    ArrayList arrayList2 = new ArrayList();
                    if (item5 != null) {
                        item5.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                        Property property = View.ALPHA;
                        float[] fArr = new float[1];
                        fArr[0] = this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f;
                        arrayList2.add(ObjectAnimator.ofFloat(item5, property, fArr));
                        if (z4 && item5.getBackground() != null) {
                            item5.setBackground(null);
                        } else if (item5.getBackground() == null) {
                            item5.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 5));
                        }
                    }
                    TextView textView = this.forwardButton;
                    if (textView != null) {
                        textView.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                        if (z4 && this.forwardButton.getBackground() != null) {
                            this.forwardButton.setBackground(null);
                        } else if (this.forwardButton.getBackground() == null) {
                            this.forwardButton.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
                        }
                        TextView textView2 = this.forwardButton;
                        Property property2 = View.ALPHA;
                        float[] fArr2 = new float[1];
                        fArr2[0] = this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f;
                        arrayList2.add(ObjectAnimator.ofFloat(textView2, property2, fArr2));
                    }
                    this.forwardButtonAnimation.playTogether(arrayList2);
                    this.forwardButtonAnimation.setDuration(100L);
                    this.forwardButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.82
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.forwardButtonAnimation = null;
                        }
                    });
                    this.forwardButtonAnimation.start();
                } else {
                    if (item5 != null) {
                        item5.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                        item5.setAlpha(this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
                        if (z4) {
                            if (this.forwardButton != null && item5.getBackground() != null) {
                                this.forwardButton.setBackground(null);
                            }
                        } else if (item5.getBackground() == null) {
                            item5.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
                        }
                    }
                    TextView textView3 = this.forwardButton;
                    if (textView3 != null) {
                        textView3.setEnabled(this.cantForwardMessagesCount == 0 || z4);
                        if (z4) {
                            if (this.forwardButton.getBackground() != null) {
                                this.forwardButton.setBackground(null);
                            }
                        } else if (this.forwardButton.getBackground() == null) {
                            this.forwardButton.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_actionBarActionModeDefaultSelector), 3));
                        }
                        this.forwardButton.setAlpha(this.cantForwardMessagesCount == 0 ? 1.0f : 0.5f);
                    }
                }
                if (item != null) {
                    int i12 = this.canSaveMusicCount;
                    item.setVisibility((((i12 <= 0 || this.canSaveDocumentsCount != 0) && (i12 != 0 || this.canSaveDocumentsCount <= 0)) || this.cantSaveMessagesCount != 0) ? 8 : 0);
                    if (this.canSaveMusicCount > 0) {
                        i7 = R.string.SaveToMusic;
                        str = "SaveToMusic";
                    } else {
                        i7 = R.string.SaveToDownloads;
                        str = "SaveToDownloads";
                    }
                    item.setContentDescription(LocaleController.getString(str, i7));
                }
                if (item2 != null) {
                    i = item2.getVisibility();
                    item2.setVisibility((z4 || this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() == 0) ? 8 : 0);
                    i2 = item2.getVisibility();
                } else {
                    i = 8;
                    i2 = 8;
                }
                if (item3 != null) {
                    i3 = item3.getVisibility();
                    item3.setVisibility((getMediaDataController().canAddStickerToFavorites() && this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() == size) ? 0 : 8);
                    i4 = item3.getVisibility();
                } else {
                    i3 = 8;
                    i4 = 8;
                }
                if (item6 != null) {
                    item6.setVisibility(this.cantDeleteMessagesCount == 0 ? 0 : 8);
                }
                this.hasUnfavedSelected = false;
                int i13 = 0;
                while (true) {
                    if (i13 >= 2) {
                        break;
                    }
                    int i14 = 0;
                    while (true) {
                        if (i14 >= this.selectedMessagesCanStarIds[i13].size()) {
                            break;
                        }
                        MessageObject valueAt = this.selectedMessagesCanStarIds[i13].valueAt(i14);
                        if (valueAt != null && !getMediaDataController().isStickerInFavorites(valueAt.getDocument())) {
                            this.hasUnfavedSelected = true;
                            break;
                        }
                        i14++;
                    }
                    if (this.hasUnfavedSelected) {
                        break;
                    }
                    i13++;
                }
                if (item3 != null) {
                    item3.setIcon(this.hasUnfavedSelected ? R.drawable.msg_fave : R.drawable.msg_unfave);
                }
                final int i15 = (this.canEditMessagesCount == 1 && size == 1) ? 0 : 8;
                createBottomMessagesActionButtons();
                if (this.replyButton != null) {
                    BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
                    boolean z5 = (blurredFrameLayout == null || blurredFrameLayout.getVisibility() != 0 || this.bottomOverlayChatWaitsReply) && ((tLRPC$Chat = this.currentChat) == null || ((!ChatObject.isNotInChat(tLRPC$Chat) || isThreadChat()) && ((!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat))));
                    if (this.chatMode == 1 || !z5 || (this.selectedMessagesIds[0].size() != 0 && this.selectedMessagesIds[1].size() != 0)) {
                        i6 = 8;
                    } else if (size == 1) {
                        i6 = 0;
                    } else {
                        int i16 = 0;
                        i6 = 0;
                        long j = 0;
                        for (i5 = 2; i16 < i5; i5 = 2) {
                            int size2 = this.selectedMessagesIds[i16].size();
                            int i17 = 0;
                            while (i17 < size2) {
                                long groupId = this.selectedMessagesIds[i16].valueAt(i17).getGroupId();
                                if (groupId == 0 || !(j == 0 || j == groupId)) {
                                    i6 = 8;
                                    break;
                                } else {
                                    i17++;
                                    j = groupId;
                                }
                            }
                            if (i6 == 8) {
                                break;
                            }
                            i16++;
                        }
                    }
                    if (this.threadMessageObjects != null && i6 == 0) {
                        int size3 = this.selectedMessagesIds[0].size();
                        for (int i18 = 0; i18 < size3; i18++) {
                            if (this.threadMessageObjects.contains(this.selectedMessagesIds[0].valueAt(i18))) {
                                i6 = 8;
                            }
                        }
                    }
                    if (this.replyButton.getVisibility() != i6) {
                        AnimatorSet animatorSet2 = this.replyButtonAnimation;
                        if (animatorSet2 != null) {
                            animatorSet2.cancel();
                        }
                        AnimatorSet animatorSet3 = new AnimatorSet();
                        this.replyButtonAnimation = animatorSet3;
                        if (i6 == 0) {
                            this.replyButton.setVisibility(i6);
                            this.replyButtonAnimation.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 1.0f));
                        } else {
                            animatorSet3.playTogether(ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, 0.0f));
                        }
                        this.replyButtonAnimation.setDuration(100L);
                        this.replyButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.83
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator) || ChatActivity.this.replyButton == null || i6 != 8) {
                                    return;
                                }
                                ChatActivity.this.replyButton.setVisibility(8);
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationCancel(Animator animator) {
                                if (ChatActivity.this.replyButtonAnimation == null || !ChatActivity.this.replyButtonAnimation.equals(animator)) {
                                    return;
                                }
                                ChatActivity.this.replyButtonAnimation = null;
                            }
                        });
                        this.replyButtonAnimation.start();
                    }
                }
                if (item4 != null) {
                    if (i != i2 || i3 != i4) {
                        if (i15 == 0) {
                            item4.setAlpha(1.0f);
                            item4.setScaleX(1.0f);
                        } else {
                            item4.setAlpha(0.0f);
                            item4.setScaleX(0.0f);
                        }
                        item4.setVisibility(i15);
                    } else if (item4.getVisibility() != i15) {
                        AnimatorSet animatorSet4 = this.editButtonAnimation;
                        if (animatorSet4 != null) {
                            animatorSet4.cancel();
                        }
                        this.editButtonAnimation = new AnimatorSet();
                        item4.setPivotX(AndroidUtilities.dp(54.0f));
                        item4.setPivotX(AndroidUtilities.dp(54.0f));
                        if (i15 == 0) {
                            item4.setVisibility(i15);
                            this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 1.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 1.0f));
                        } else {
                            this.editButtonAnimation.playTogether(ObjectAnimator.ofFloat(item4, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(item4, View.SCALE_X, 0.0f));
                        }
                        this.editButtonAnimation.setDuration(100L);
                        this.editButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.84
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator) {
                                if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(animator) && i15 == 8) {
                                    item4.setVisibility(8);
                                }
                            }

                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationCancel(Animator animator) {
                                if (ChatActivity.this.editButtonAnimation == null || !ChatActivity.this.editButtonAnimation.equals(animator)) {
                                    return;
                                }
                                ChatActivity.this.editButtonAnimation = null;
                            }
                        });
                        this.editButtonAnimation.start();
                    }
                }
            }
        }
        updateSelectedMessageReactions();
    }

    private void updateSelectedMessageReactions() {
        ArrayList arrayList = new ArrayList();
        SparseArray<MessageObject> sparseArray = this.selectedMessagesIds[0];
        for (int i = 0; i < sparseArray.size(); i++) {
            arrayList.add(sparseArray.valueAt(i));
        }
        SparseArray<MessageObject> sparseArray2 = this.selectedMessagesIds[1];
        for (int i2 = 0; i2 < sparseArray2.size(); i2++) {
            arrayList.add(sparseArray2.valueAt(i2));
        }
        this.selectionReactionsOverlay.setSelectedMessages(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void processRowSelect(View view, boolean z, float f, float f2) {
        MessageObject messageObject;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            messageObject = chatMessageCell.getMessageObject();
            chatMessageCell.setLastTouchCoords(f, f2);
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
        }
        int messageType = getMessageType(messageObject);
        if (messageType < 2 || messageType == 20 || messageType == 21) {
            return;
        }
        if (messageObject == null || !messageObject.isWallpaperAction()) {
            addToSelectedMessages(messageObject, z);
            updateActionModeTitle();
            updateVisibleRows();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateActionModeTitle() {
        if (this.reportType < 0) {
            if (this.actionBar.isActionModeShowed() && this.selectedMessagesCountTextView != null) {
                if (this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
                    return;
                }
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
                return;
            }
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            this.bottomOverlayChatText.setText(LocaleController.getString("ReportMessages", R.string.ReportMessages));
            this.bottomOverlayChatText.setAlpha(0.5f);
            this.bottomOverlayChatText.setEnabled(false);
            return;
        }
        this.bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", R.string.ReportMessagesCount, LocaleController.formatPluralString("messages", size, new Object[0])).toUpperCase());
        this.bottomOverlayChatText.setAlpha(1.0f);
        this.bottomOverlayChatText.setEnabled(true);
    }

    public void updateTitle(boolean z) {
        if (this.avatarContainer == null) {
            return;
        }
        if (isThreadChat()) {
            if (this.isTopic) {
                updateTopicHeader();
            } else if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
                }
            } else {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        } else if (UserObject.isReplyUser(this.currentUser)) {
            this.avatarContainer.setTitle(LocaleController.getString("RepliesTitle", R.string.RepliesTitle));
        } else {
            int i = this.chatMode;
            if (i == 1) {
                if (UserObject.isUserSelf(this.currentUser)) {
                    this.avatarContainer.setTitle(LocaleController.getString("Reminders", R.string.Reminders));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("ScheduledMessages", R.string.ScheduledMessages));
                }
            } else if (i == 2) {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[0]));
            } else {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                if (tLRPC$Chat != null) {
                    this.avatarContainer.setTitle(tLRPC$Chat.title, tLRPC$Chat.scam, tLRPC$Chat.fake, tLRPC$Chat.verified, false, null, z);
                } else {
                    TLRPC$User tLRPC$User = this.currentUser;
                    if (tLRPC$User != null) {
                        if (tLRPC$User.self) {
                            this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
                        } else if (!MessagesController.isSupportUser(tLRPC$User) && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) == null && (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
                            if (!TextUtils.isEmpty(this.currentUser.phone)) {
                                ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                                String format = phoneFormat.format("+" + this.currentUser.phone);
                                TLRPC$User tLRPC$User2 = this.currentUser;
                                chatAvatarContainer.setTitle(format, tLRPC$User2.scam, tLRPC$User2.fake, tLRPC$User2.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                            } else {
                                ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                                String userName = UserObject.getUserName(this.currentUser);
                                TLRPC$User tLRPC$User3 = this.currentUser;
                                chatAvatarContainer2.setTitle(userName, tLRPC$User3.scam, tLRPC$User3.fake, tLRPC$User3.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                            }
                        } else {
                            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                            String userName2 = UserObject.getUserName(this.currentUser);
                            TLRPC$User tLRPC$User4 = this.currentUser;
                            chatAvatarContainer3.setTitle(userName2, tLRPC$User4.scam, tLRPC$User4.fake, tLRPC$User4.verified, getMessagesController().isPremiumUser(this.currentUser), this.currentUser.emoji_status, z);
                        }
                    }
                }
            }
        }
        setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }

    private void updateTopicTitleIcon() {
        ChatAvatarContainer chatAvatarContainer;
        if (this.forumTopic == null || (chatAvatarContainer = this.avatarContainer) == null) {
            return;
        }
        chatAvatarContainer.getAvatarImageView().setVisibility(0);
        ForumUtilities.setTopicIcon(this.avatarContainer.getAvatarImageView(), this.forumTopic, true, true, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getPinnedMessagesCount() {
        return Math.max(this.loadedPinnedMessagesCount, this.totalPinnedMessagesCount);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTopicButtons() {
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        ActionBarMenuItem.Item item = this.closeTopicItem;
        if (item != null) {
            TLRPC$Chat tLRPC$Chat = this.currentChat;
            item.setVisibility((tLRPC$Chat == null || !ChatObject.canManageTopic(this.currentAccount, tLRPC$Chat, this.forumTopic) || (tLRPC$TL_forumTopic = this.forumTopic) == null || tLRPC$TL_forumTopic.closed) ? 8 : 0);
        }
    }

    private void updateBotButtons() {
        TLRPC$User tLRPC$User;
        boolean z;
        int i;
        if (this.headerItem == null || (tLRPC$User = this.currentUser) == null || this.currentEncryptedChat != null || !tLRPC$User.bot) {
            return;
        }
        boolean z2 = false;
        if (this.botInfo.size() != 0) {
            boolean z3 = false;
            z = false;
            for (int i2 = 0; i2 < this.botInfo.size(); i2++) {
                TLRPC$BotInfo valueAt = this.botInfo.valueAt(i2);
                while (i < valueAt.commands.size()) {
                    TLRPC$TL_botCommand tLRPC$TL_botCommand = valueAt.commands.get(i);
                    if (tLRPC$TL_botCommand.command.toLowerCase().equals("help")) {
                        z3 = true;
                    } else if (tLRPC$TL_botCommand.command.toLowerCase().equals("settings")) {
                        z = true;
                    }
                    i = (z && z3) ? 0 : i + 1;
                }
            }
            z2 = z3;
        } else {
            z = false;
        }
        if (z2) {
            this.headerItem.showSubItem(30);
        } else {
            this.headerItem.hideSubItem(30);
        }
        if (z) {
            this.headerItem.showSubItem(31);
        } else {
            this.headerItem.hideSubItem(31);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateTitleIcons() {
        updateTitleIcons(false);
    }

    private void updateTitleIcons(boolean z) {
        ActionBarMenuItem.Item item;
        if (this.avatarContainer == null || this.chatMode != 0) {
            return;
        }
        boolean isDialogMuted = getMessagesController().isDialogMuted(this.dialog_id, getTopicId());
        if (z) {
            isDialogMuted = !isDialogMuted;
        }
        this.avatarContainer.setTitleIcons(this.currentEncryptedChat != null ? getThemedDrawable("drawableLockIcon") : null, (UserObject.isReplyUser(this.currentUser) || (isThreadChat() && !this.isTopic) || !isDialogMuted) ? null : getThemedDrawable("drawableMuteIcon"));
        if (!z && (item = this.muteItem) != null) {
            if (isDialogMuted) {
                item.setRightIconVisibility(8);
                this.muteItem.setText(LocaleController.getString("Unmute", R.string.Unmute));
                this.muteItem.setIcon(R.drawable.msg_mute);
            } else {
                item.setRightIconVisibility(0);
                if (getMessagesController().isDialogNotificationsSoundEnabled(this.dialog_id, getTopicId())) {
                    this.muteItem.setText(LocaleController.getString("Mute", R.string.Mute));
                    this.muteItem.setIcon(R.drawable.msg_unmute);
                } else {
                    this.muteItem.setText(LocaleController.getString("Mute", R.string.Mute));
                    this.muteItem.setIcon(R.drawable.msg_silent);
                }
            }
        }
        ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = this.chatNotificationsPopupWrapper;
        if (chatNotificationsPopupWrapper != null) {
            chatNotificationsPopupWrapper.lambda$update$11(this.dialog_id, getTopicId(), null);
        }
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public void checkAndUpdateAvatar() {
        if (this.isTopic) {
            return;
        }
        if (this.currentUser != null) {
            TLRPC$User user = getMessagesController().getUser(Long.valueOf(this.currentUser.id));
            if (user == null) {
                return;
            }
            this.currentUser = user;
        } else if (this.currentChat != null) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id));
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(String str, String str2) {
        if (getParentActivity() != null) {
            final Bitmap createVideoThumbnail = SendMessagesHelper.createVideoThumbnail(str, 1);
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            final ArrayList<Object> arrayList = new ArrayList<>();
            MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, str, 0, true, 0, 0, 0L);
            photoEntry.caption = str2;
            arrayList.add(photoEntry);
            PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.85
                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i) {
                    return new ImageReceiver.BitmapHolder(createVideoThumbnail, (String) null, 0);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                    ChatActivity.this.sendMedia((MediaController.PhotoEntry) arrayList.get(0), videoEditedInfo, z, i2, z2);
                }
            }, this);
            return;
        }
        fillEditingMediaWithCaption(str2, null);
        SendMessagesHelper.prepareSendingVideo(getAccountInstance(), str, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, 0, this.editingMessageObject, true, 0, false, false, null);
        afterMessageSend();
    }

    public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> arrayList, CharSequence charSequence) {
        String str;
        final ArrayList<MediaController.PhotoEntry> arrayList2 = new ArrayList<>();
        int i = 0;
        while (true) {
            String str2 = null;
            if (i >= arrayList.size()) {
                break;
            }
            SendMessagesHelper.SendingMediaInfo sendingMediaInfo = arrayList.get(i);
            String str3 = sendingMediaInfo.path;
            if (str3 != null) {
                str = str3;
            } else {
                if (sendingMediaInfo.uri != null) {
                    try {
                        File generatePicturePath = AndroidUtilities.generatePicturePath(isSecretChat(), "");
                        InputStream openInputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(sendingMediaInfo.uri);
                        FileOutputStream fileOutputStream = new FileOutputStream(generatePicturePath);
                        byte[] bArr = new byte[LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM];
                        while (true) {
                            int read = openInputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                            fileOutputStream.flush();
                        }
                        openInputStream.close();
                        fileOutputStream.close();
                        str2 = generatePicturePath.getAbsolutePath();
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                str = str2;
            }
            if (str != null) {
                Pair<Integer, Integer> imageOrientation = AndroidUtilities.getImageOrientation(str);
                MediaController.PhotoEntry orientation = new MediaController.PhotoEntry(0, 0, 0L, str, ((Integer) imageOrientation.first).intValue(), sendingMediaInfo.isVideo, 0, 0, 0L).setOrientation(imageOrientation);
                if (i == arrayList.size() - 1 && charSequence != null) {
                    orientation.caption = charSequence;
                }
                arrayList2.add(orientation);
            }
            i++;
        }
        if (arrayList2.isEmpty()) {
            return false;
        }
        if (getParentActivity() != null) {
            final boolean[] zArr = new boolean[arrayList2.size()];
            Arrays.fill(zArr, true);
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(arrayList2), arrayList2.size() - 1, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.86
                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i2) {
                    return null;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public int setPhotoChecked(int i2, VideoEditedInfo videoEditedInfo) {
                    return i2;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int i2, VideoEditedInfo videoEditedInfo, boolean z, int i3, boolean z2) {
                    for (int size = arrayList2.size() - 1; size >= 0; size--) {
                        if (!zArr[size]) {
                            arrayList2.remove(size);
                        }
                    }
                    ChatActivity.this.sendPhotosGroup(arrayList2, z, i3, z2);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean isPhotoChecked(int i2) {
                    return zArr[i2];
                }
            }, this);
        } else {
            fillEditingMediaWithCaption(charSequence, null);
            sendPhotosGroup(arrayList2, false, 0, false);
            afterMessageSend();
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendPhotosGroup(ArrayList<MediaController.PhotoEntry> arrayList, boolean z, int i, boolean z2) {
        String str;
        if (!arrayList.isEmpty()) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MediaController.PhotoEntry> it = arrayList.iterator();
            while (it.hasNext()) {
                MediaController.PhotoEntry next = it.next();
                SendMessagesHelper.SendingMediaInfo sendingMediaInfo = new SendMessagesHelper.SendingMediaInfo();
                boolean z3 = next.isVideo;
                if (!z3 && (str = next.imagePath) != null) {
                    sendingMediaInfo.path = str;
                } else {
                    String str2 = next.path;
                    if (str2 != null) {
                        sendingMediaInfo.path = str2;
                    }
                }
                sendingMediaInfo.thumbPath = next.thumbPath;
                sendingMediaInfo.isVideo = z3;
                CharSequence charSequence = next.caption;
                sendingMediaInfo.caption = charSequence != null ? charSequence.toString() : null;
                sendingMediaInfo.entities = next.entities;
                sendingMediaInfo.masks = next.stickers;
                sendingMediaInfo.ttl = next.ttl;
                sendingMediaInfo.videoEditedInfo = next.editedInfo;
                sendingMediaInfo.canDeleteAfter = next.canDeleteAfter;
                arrayList2.add(sendingMediaInfo);
                next.reset();
            }
            fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), arrayList2, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z2, true, null, z, i, ((SendMessagesHelper.SendingMediaInfo) arrayList2.get(0)).updateStickersOrder, null);
            afterMessageSend();
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setFieldText("");
            }
        }
        if (i != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += arrayList.size();
            updateScheduledInterface(true);
        }
    }

    private void openEditingMessageInPhotoEditor() {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null && messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
            if (this.editingMessageObject.isPhoto() || this.editingMessageObject.isVideo()) {
                final MessageObject messageObject2 = this.editingMessageObject;
                File file = null;
                if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath)) {
                    File file2 = new File(messageObject2.messageOwner.attachPath);
                    if (file2.exists()) {
                        file = file2;
                    }
                }
                if (file == null) {
                    file = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject2.messageOwner);
                }
                if (file.exists()) {
                    PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
                    ArrayList<Object> arrayList = new ArrayList<>();
                    final MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, file.getAbsolutePath(), 0, messageObject2.isVideo(), 0, 0, 0L);
                    photoEntry.caption = this.chatActivityEnterView.getFieldText();
                    arrayList.add(photoEntry);
                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, 0, 2, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.87
                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean allowSendingSubmenu() {
                            return false;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean canCaptureMorePhotos() {
                            return false;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject3, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                            return ChatActivity.this.getPlaceForPhoto(messageObject2, null, z, true);
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                            if (ChatActivity.this.editingMessageObject != messageObject2) {
                                return;
                            }
                            MediaController.PhotoEntry photoEntry2 = photoEntry;
                            if (photoEntry2.isCropped || photoEntry2.isPainted || photoEntry2.isFiltered || videoEditedInfo != null) {
                                ChatActivity.this.sendMedia(photoEntry2, videoEditedInfo, z, i2, z2);
                            } else {
                                ChatActivity.this.chatActivityEnterView.doneEditingMessage();
                            }
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public MessageObject getEditingMessageObject() {
                            MessageObject messageObject3 = ChatActivity.this.editingMessageObject;
                            MessageObject messageObject4 = messageObject2;
                            if (messageObject3 == messageObject4) {
                                return messageObject4;
                            }
                            return null;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public void onCaptionChanged(CharSequence charSequence) {
                            if (ChatActivity.this.editingMessageObject == messageObject2) {
                                ChatActivity.this.chatActivityEnterView.setFieldText(charSequence, true);
                            }
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public boolean closeKeyboard() {
                            ChatActivity chatActivity = ChatActivity.this;
                            if (chatActivity.chatActivityEnterView == null || !chatActivity.isKeyboardVisible()) {
                                return false;
                            }
                            ChatActivity.this.chatActivityEnterView.closeKeyboard();
                            return true;
                        }
                    }, this);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, boolean z, boolean z2) {
        ChatActionCell chatActionCell;
        MessageObject messageObject2;
        ImageReceiver imageReceiver;
        ImageReceiver photoImage;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageAction tLRPC$MessageAction;
        TLRPC$Photo tLRPC$Photo;
        ArrayList<TLRPC$VideoSize> arrayList;
        TLRPC$FileLocation tLRPC$FileLocation2;
        TLRPC$Chat tLRPC$Chat;
        ChatMessageCell chatMessageCell;
        MessageObject messageObject3;
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                if (messageObject != null && (messageObject3 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject3.getId() == messageObject.getId()) {
                    photoImage = chatMessageCell.getPhotoImage();
                }
                photoImage = null;
            } else {
                if ((childAt instanceof ChatActionCell) && (messageObject2 = (chatActionCell = (ChatActionCell) childAt).getMessageObject()) != null) {
                    if (messageObject != null) {
                        if (messageObject2.getId() == messageObject.getId()) {
                            photoImage = chatActionCell.getPhotoImage();
                        }
                    } else if (tLRPC$FileLocation != null && messageObject2.photoThumbs != null) {
                        int i2 = 0;
                        while (true) {
                            if (i2 >= messageObject2.photoThumbs.size()) {
                                imageReceiver = null;
                                break;
                            }
                            TLRPC$FileLocation tLRPC$FileLocation3 = messageObject2.photoThumbs.get(i2).location;
                            if (tLRPC$FileLocation3 != null && tLRPC$FileLocation3.volume_id == tLRPC$FileLocation.volume_id && tLRPC$FileLocation3.local_id == tLRPC$FileLocation.local_id) {
                                imageReceiver = chatActionCell.getPhotoImage();
                                break;
                            }
                            i2++;
                        }
                        photoImage = (imageReceiver != null || (tLRPC$Message = messageObject2.messageOwner) == null || (tLRPC$MessageAction = tLRPC$Message.action) == null || (tLRPC$Photo = tLRPC$MessageAction.photo) == null || (arrayList = tLRPC$Photo.video_sizes) == null || arrayList.isEmpty() || (tLRPC$FileLocation2 = messageObject2.messageOwner.action.photo.video_sizes.get(0).location) == null || tLRPC$FileLocation2.volume_id != tLRPC$FileLocation.volume_id || tLRPC$FileLocation2.local_id != tLRPC$FileLocation.local_id) ? imageReceiver : chatActionCell.getPhotoImage();
                    }
                }
                photoImage = null;
            }
            if (photoImage != null) {
                if (!z2 || childAt.getY() + photoImage.getImageY2() >= this.chatListViewPaddingTop - AndroidUtilities.dp(4.0f)) {
                    int[] iArr = new int[2];
                    childAt.getLocationInWindow(iArr);
                    PhotoViewer.PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                    placeProviderObject.viewX = iArr[0];
                    placeProviderObject.viewY = iArr[1] - (Build.VERSION.SDK_INT < 21 ? AndroidUtilities.statusBarHeight : 0);
                    placeProviderObject.parentView = this.chatListView;
                    placeProviderObject.animatingImageView = null;
                    placeProviderObject.imageReceiver = photoImage;
                    if (z) {
                        placeProviderObject.thumb = photoImage.getBitmapSafe();
                    }
                    placeProviderObject.radius = photoImage.getRoundRadius();
                    if ((childAt instanceof ChatActionCell) && (tLRPC$Chat = this.currentChat) != null) {
                        placeProviderObject.dialogId = -tLRPC$Chat.id;
                    }
                    placeProviderObject.clipTopAddition = (int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f));
                    placeProviderObject.clipBottomAddition = this.blurredViewBottomOffset;
                    return placeProviderObject;
                }
                return null;
            }
        }
        return null;
    }

    private void showAttachmentError() {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void fillEditingMediaWithCaption(CharSequence charSequence, ArrayList<TLRPC$MessageEntity> arrayList) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(charSequence)) {
            MessageObject messageObject = this.editingMessageObject;
            messageObject.editingMessage = charSequence;
            messageObject.editingMessageEntities = arrayList;
            return;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
            MessageObject messageObject2 = this.editingMessageObject;
            if (messageObject2.editingMessage != null || TextUtils.isEmpty(messageObject2.messageOwner.message)) {
                return;
            }
            this.editingMessageObject.editingMessage = "";
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0066  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0085  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void sendUriAsDocument(Uri uri) {
        Uri parse;
        String str;
        String str2;
        if (uri == null) {
            return;
        }
        String uri2 = uri.toString();
        boolean z = true;
        if (uri2.contains("com.google.android.apps.photos.contentprovider")) {
            try {
                String str3 = uri2.split("/1/")[1];
                int indexOf = str3.indexOf("/ACTUAL");
                parse = indexOf != -1 ? Uri.parse(URLDecoder.decode(str3.substring(0, indexOf), "UTF-8")) : uri;
            } catch (Exception e) {
                FileLog.e(e);
            }
            String path = AndroidUtilities.getPath(parse);
            if (BuildVars.NO_SCOPED_STORAGE) {
                str = path;
                str2 = str;
            } else {
                if (path == null) {
                    String uri3 = parse.toString();
                    String copyFileToCache = MediaController.copyFileToCache(parse, "file");
                    if (copyFileToCache == null) {
                        showAttachmentError();
                        return;
                    } else {
                        str2 = uri3;
                        str = copyFileToCache;
                    }
                } else {
                    str = path;
                    str2 = str;
                }
                z = false;
            }
            fillEditingMediaWithCaption(null, null);
            if (!z) {
                SendMessagesHelper.prepareSendingDocument(getAccountInstance(), null, null, parse, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, true, 0, null);
            } else {
                SendMessagesHelper.prepareSendingDocument(getAccountInstance(), str, str2, null, null, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, true, 0, null);
            }
            hideFieldPanel(false);
        }
        parse = uri;
        String path2 = AndroidUtilities.getPath(parse);
        if (BuildVars.NO_SCOPED_STORAGE) {
        }
        fillEditingMediaWithCaption(null, null);
        if (!z) {
        }
        hideFieldPanel(false);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onActivityResultFragment(int i, int i2, Intent intent) {
        String str;
        if (i2 == -1) {
            if (i == 0 || i == 2) {
                createChatAttachView();
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.getPhotoLayout().onActivityResultFragment(i, intent, this.currentPicturePath);
                }
                this.currentPicturePath = null;
            } else if (i != 1) {
                if (i == 21) {
                    if (intent == null) {
                        showAttachmentError();
                        return;
                    }
                    if (intent.getData() != null) {
                        sendUriAsDocument(intent.getData());
                    } else if (intent.getClipData() != null) {
                        ClipData clipData = intent.getClipData();
                        for (int i3 = 0; i3 < clipData.getItemCount(); i3++) {
                            sendUriAsDocument(clipData.getItemAt(i3).getUri());
                        }
                    } else {
                        showAttachmentError();
                    }
                    ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                    if (chatAttachAlert2 != null) {
                        chatAttachAlert2.dismiss();
                    }
                    afterMessageSend();
                }
            } else if (intent == null || intent.getData() == null) {
                showAttachmentError();
            } else {
                final Uri data = intent.getData();
                if (data.toString().contains(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                    try {
                        str = AndroidUtilities.getPath(data);
                    } catch (Exception e) {
                        FileLog.e(e);
                        str = null;
                    }
                    if (str == null) {
                        showAttachmentError();
                    }
                    if (this.paused) {
                        this.startVideoEdit = str;
                    } else {
                        openVideoEditor(str, null);
                    }
                } else if (this.editingMessageObject == null && this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda271
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i4) {
                            ChatActivity.this.lambda$onActivityResultFragment$123(data, z, i4);
                        }
                    }, this.themeDelegate);
                } else {
                    fillEditingMediaWithCaption(null, null);
                    SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, data, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, true, 0);
                }
                afterMessageSend();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onActivityResultFragment$123(Uri uri, boolean z, int i) {
        fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, z, i);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveSelfArgs(Bundle bundle) {
        String str = this.currentPicturePath;
        if (str != null) {
            bundle.putString("path", str);
        }
    }

    public void restoreSelfArgs(Bundle bundle) {
        this.currentPicturePath = bundle.getString("path");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSkeletonVisible() {
        if (this.justCreatedTopic || this.justCreatedChat || this.currentUser != null || this.chatListView == null || !SharedConfig.animationsEnabled() || !getLiteModeChat()) {
            return false;
        }
        int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i2 = 0;
        for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
            i2 += this.chatListView.getChildAt(i3).getHeight();
            int top = this.chatListView.getChildAt(i3).getTop();
            if (top < i) {
                i = top;
            }
        }
        float f = i;
        if (f <= this.chatListViewPaddingTop) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        boolean[] zArr = this.endReached;
        boolean z = (!zArr[0] || (!(this.mergeDialogId == 0 || zArr[1]) || this.messages.isEmpty())) && this.loading && f > this.chatListViewPaddingTop && (!this.messages.isEmpty() ? i2 == 0 : !this.animateProgressViewTo);
        if (!z && this.startMessageAppearTransitionMs == 0) {
            checkDispatchHideSkeletons(this.fragmentBeginToShow);
        }
        if (SharedConfig.getDevicePerformanceClass() != 0 && !this.fromPullingDownTransition && this.fragmentBeginToShow) {
            boolean z2 = z && this.startMessageAppearTransitionMs == 0;
            Drawable wallpaperDrawable = this.themeDelegate.getWallpaperDrawable();
            View view = this.fragmentView;
            if (view != null) {
                wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
            }
            if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
                MotionBackgroundDrawable motionBackgroundDrawable = (MotionBackgroundDrawable) wallpaperDrawable;
                if (motionBackgroundDrawable.isIndeterminateAnimation() != z2) {
                    if (!z2) {
                        motionBackgroundDrawable.generateNextGradient();
                    }
                    motionBackgroundDrawable.setIndeterminateAnimation(z2);
                    motionBackgroundDrawable.setIndeterminateSpeedScale(z2 ? 1.5f : 1.0f);
                    motionBackgroundDrawable.updateAnimation(true);
                } else if (z2) {
                    motionBackgroundDrawable.updateAnimation(false);
                }
            }
        }
        return z || (this.startMessageAppearTransitionMs != 0 && System.currentTimeMillis() - this.startMessageAppearTransitionMs <= 200);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkDispatchHideSkeletons(boolean z) {
        if (this.startMessageAppearTransitionMs == 0) {
            if (z && !this.messageSkeletons.isEmpty()) {
                this.startMessageAppearTransitionMs = System.currentTimeMillis();
            } else {
                this.startMessageAppearTransitionMs = 1L;
            }
            isSkeletonVisible();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
    }

    private void removeUnreadPlane(boolean z) {
        MessageObject messageObject = this.unreadMessageObject;
        if (messageObject != null) {
            if (z) {
                boolean[] zArr = this.forwardEndReached;
                zArr[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(messageObject);
            this.unreadMessageObject = null;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 3339
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:59)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int r62, int r63, java.lang.Object... r64) {
        /*
            Method dump skipped, instructions count: 15161
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$124() {
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$125() {
        createEmptyView();
        if (!this.fragmentBeginToShow) {
            this.chatListView.setAnimateEmptyView(false, 0);
            this.chatListView.setEmptyView(this.emptyViewContainer);
            this.chatListView.setAnimateEmptyView(true, 1);
            return;
        }
        this.chatListView.setEmptyView(this.emptyViewContainer);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$126() {
        resumeDelayedFragmentAnimation();
        AndroidUtilities.cancelRunOnUIThread(this.fragmentTransitionRunnable);
        this.fragmentTransitionRunnable.run();
        getNotificationCenter().runDelayedNotifications();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$127(MessageObject messageObject, int i) {
        this.delayedReadRunnable = null;
        messageObject.messageOwner.replies.read_max_id = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$128(Object[] objArr, long j) {
        MessageObject messageObject = this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(((Integer) objArr[1]).intValue());
        if (messageObject != null) {
            messageObject.messageOwner.media.extended_media = (TLRPC$MessageExtendedMedia) objArr[2];
            messageObject.forceUpdate = true;
            messageObject.setType();
            updateMessageAnimated(messageObject, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$129(Object[] objArr, long j) {
        MessageObject messageObject = this.messagesDict[j == this.dialog_id ? (char) 0 : (char) 1].get(((Integer) objArr[1]).intValue());
        if (messageObject != null) {
            MessageObject.updateReactions(messageObject.messageOwner, (TLRPC$TL_messageReactions) objArr[2]);
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
            updateMessageAnimated(messageObject, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$130() {
        updateMessagesVisiblePart(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$131(Object[] objArr, int i) {
        replaceMessageObjects((ArrayList) objArr[1], i, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didReceivedNotification$133(Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo, boolean z) {
        if (themeAccent != null) {
            Theme.ThemeAccent accent = themeInfo.getAccent(false);
            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, Integer.valueOf(themeAccent.id));
            if (z) {
                Theme.deleteThemeAccent(themeInfo, accent, true);
                return;
            }
            return;
        }
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needSetDayNightTheme, themeInfo, Boolean.FALSE, null, -1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$134(int i) {
        playReactionAnimation(Integer.valueOf(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getScrollingOffsetForView(View view) {
        return (this.chatListView.getMeasuredHeight() - view.getBottom()) - this.chatListView.getPaddingBottom();
    }

    /* JADX WARN: Removed duplicated region for block: B:44:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0110  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0155 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean updateMessageTranslation(MessageObject messageObject) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject2;
        boolean z;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject3;
        MessageObject messageObject4;
        int i;
        if (messageObject == null || messageObject.messageOwner == null) {
            return false;
        }
        boolean z2 = false;
        for (MessageObject messageObject5 : this.pinnedMessageObjects.values()) {
            if (messageObject5 != null && messageObject5.getId() == messageObject.getId()) {
                TLRPC$Message tLRPC$Message = messageObject5.messageOwner;
                TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                tLRPC$Message.translatedText = tLRPC$Message2.translatedText;
                tLRPC$Message.translatedToLanguage = tLRPC$Message2.translatedToLanguage;
                if (messageObject5.updateTranslation(true)) {
                    lambda$updateMessagesVisiblePart$112(true, 1);
                    z2 = true;
                }
            }
        }
        if (this.chatListView == null) {
            return z2;
        }
        ArrayList arrayList = new ArrayList();
        for (int i2 = 0; i2 < this.chatListView.getChildCount(); i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((childAt instanceof ChatMessageCell) && (messageObject2 = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null) {
                if (messageObject2.getId() == messageObject.getId()) {
                    TLRPC$Message tLRPC$Message3 = messageObject2.messageOwner;
                    TLRPC$Message tLRPC$Message4 = messageObject.messageOwner;
                    tLRPC$Message3.translatedText = tLRPC$Message4.translatedText;
                    tLRPC$Message3.translatedToLanguage = tLRPC$Message4.translatedToLanguage;
                    if (messageObject2.updateTranslation(false)) {
                        ArrayList<Integer> arrayList2 = this.replyMessageOwners.get(messageObject2.getId());
                        if (arrayList2 != null) {
                            updateMessagesReplyTranslation(arrayList2, messageObject);
                        }
                        z = true;
                        groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null && !arrayList.contains(Long.valueOf(groupedMessages.groupId))) {
                            for (i = 0; i < groupedMessages.messages.size(); i++) {
                                MessageObject messageObject6 = groupedMessages.messages.get(i);
                                if (messageObject6 != null && messageObject6.updateTranslation(false)) {
                                    z = true;
                                }
                            }
                            arrayList.add(Long.valueOf(groupedMessages.groupId));
                        }
                        messageObject3 = messageObject2.replyMessageObject;
                        if (messageObject3 != null && messageObject3.getId() == messageObject.getId() && messageObject2.replyMessageObject.getDialogId() == messageObject.getDialogId()) {
                            messageObject4 = messageObject2.replyMessageObject;
                            TLRPC$Message tLRPC$Message5 = messageObject4.messageOwner;
                            TLRPC$Message tLRPC$Message6 = messageObject.messageOwner;
                            tLRPC$Message5.translatedText = tLRPC$Message6.translatedText;
                            tLRPC$Message5.translatedToLanguage = tLRPC$Message6.translatedToLanguage;
                            if (messageObject4.updateTranslation(false)) {
                                z = true;
                            }
                        }
                        if (!z) {
                            messageObject2.forceUpdate = true;
                            chatMessageCell.setMessageObject(messageObject2, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            if (groupedMessages != null) {
                                ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                                if (chatListItemAnimator != null) {
                                    chatListItemAnimator.groupWillChanged(groupedMessages);
                                }
                                for (int i3 = 0; i3 < groupedMessages.messages.size(); i3++) {
                                    groupedMessages.messages.get(i3).forceUpdate = true;
                                }
                                this.chatAdapter.notifyDataSetChanged(true);
                            } else {
                                this.chatAdapter.updateRowAtPosition(this.chatListView.getChildAdapterPosition(childAt));
                            }
                            z2 = true;
                        }
                    }
                }
                z = false;
                groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    while (i < groupedMessages.messages.size()) {
                    }
                    arrayList.add(Long.valueOf(groupedMessages.groupId));
                }
                messageObject3 = messageObject2.replyMessageObject;
                if (messageObject3 != null) {
                    messageObject4 = messageObject2.replyMessageObject;
                    TLRPC$Message tLRPC$Message52 = messageObject4.messageOwner;
                    TLRPC$Message tLRPC$Message62 = messageObject.messageOwner;
                    tLRPC$Message52.translatedText = tLRPC$Message62.translatedText;
                    tLRPC$Message52.translatedToLanguage = tLRPC$Message62.translatedToLanguage;
                    if (messageObject4.updateTranslation(false)) {
                    }
                }
                if (!z) {
                }
            }
        }
        return z2;
    }

    /* JADX WARN: Removed duplicated region for block: B:20:0x0054  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0071 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean updateMessagesReplyTranslation(ArrayList<Integer> arrayList, MessageObject messageObject) {
        boolean z;
        MessageObject messageObject2;
        boolean z2 = false;
        for (int i = 0; i < this.chatListView.getChildCount(); i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (messageObject3 != null && arrayList.contains(Integer.valueOf(messageObject3.getId())) && (messageObject2 = messageObject3.replyMessageObject) != null && messageObject2.getId() == messageObject.getId()) {
                    MessageObject messageObject4 = messageObject3.replyMessageObject;
                    TLRPC$Message tLRPC$Message = messageObject4.messageOwner;
                    TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                    tLRPC$Message.translatedText = tLRPC$Message2.translatedText;
                    tLRPC$Message.translatedToLanguage = tLRPC$Message2.translatedToLanguage;
                    if (messageObject4.updateTranslation(false)) {
                        z = true;
                        if (!z) {
                            messageObject3.forceUpdate = true;
                            chatMessageCell.setMessageObject(messageObject3, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            this.chatAdapter.updateRowAtPosition(this.chatListView.getChildAdapterPosition(childAt));
                            z2 = true;
                        }
                    }
                }
                z = false;
                if (!z) {
                }
            }
        }
        return z2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkTranslation(boolean z) {
        if (System.currentTimeMillis() - this.lastTranslationCheck > 1000) {
            z = true;
        }
        AndroidUtilities.cancelRunOnUIThread(this.checkTranslationRunnable);
        AndroidUtilities.runOnUIThread(this.checkTranslationRunnable, z ? 0L : 150L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$135() {
        this.lastTranslationCheck = System.currentTimeMillis();
        if (this.chatListView != null && this.chatAdapter != null) {
            int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int i2 = Integer.MIN_VALUE;
            for (int i3 = 0; i3 < this.chatListView.getChildCount(); i3++) {
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getCurrentMessagesGroup() != null) {
                        for (int i4 = 0; i4 < chatMessageCell.getCurrentMessagesGroup().messages.size(); i4++) {
                            int id = chatMessageCell.getCurrentMessagesGroup().messages.get(i4).getId();
                            i = Math.min(i, id);
                            i2 = Math.max(i2, id);
                        }
                    } else if (chatMessageCell.getMessageObject() != null) {
                        int id2 = chatMessageCell.getMessageObject().getId();
                        i = Math.min(i, id2);
                        i2 = Math.max(i2, id2);
                    }
                }
            }
            if (i <= i2) {
                ArrayList arrayList = new ArrayList();
                for (int i5 = 0; i5 < this.messages.size(); i5++) {
                    MessageObject messageObject = this.messages.get(i5);
                    MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                    if (groupedMessages != null) {
                        if (!arrayList.contains(Long.valueOf(groupedMessages.groupId))) {
                            for (int i6 = 0; i6 < groupedMessages.messages.size(); i6++) {
                                MessageObject messageObject2 = groupedMessages.messages.get(i6);
                                if (messageObject2 != null) {
                                    int id3 = messageObject2.getId();
                                    getMessagesController().getTranslateController().checkTranslation(messageObject2, id3 >= i + (-7) && id3 <= i2 + 7);
                                }
                            }
                            arrayList.add(Long.valueOf(groupedMessages.groupId));
                        }
                    } else {
                        int id4 = messageObject.getId();
                        getMessagesController().getTranslateController().checkTranslation(messageObject, id4 >= i + (-7) && id4 <= i2 + 7);
                    }
                }
            }
        }
        if (this.currentPinnedMessageId > 0 && this.pinnedMessageObjects != null) {
            getMessagesController().getTranslateController().checkTranslation(this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)), true);
        }
        updateTranslateItemVisibility();
    }

    private void checkSecretMessageForLocation(MessageObject messageObject) {
        if (messageObject.type != 4 || this.locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
            return;
        }
        this.locationAlertShown = true;
        AlertsCreator.showSecretLocationAlert(getParentActivity(), this.currentAccount, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkSecretMessageForLocation$136();
            }
        }, true, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSecretMessageForLocation$136() {
        int childCount = this.chatListView.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View childAt = this.chatListView.getChildAt(i);
            if (childAt instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                if (chatMessageCell.getMessageObject().type == 4) {
                    chatMessageCell.forceResetMessageObject();
                }
            }
        }
    }

    private void loadSendAsPeers(boolean z) {
        TLRPC$Chat tLRPC$Chat;
        if (this.sendAsPeersObj != null || (tLRPC$Chat = this.currentChat) == null || !ChatObject.canSendAsPeers(tLRPC$Chat) || this.chatActivityEnterView == null) {
            return;
        }
        TLRPC$TL_channels_sendAsPeers sendAsPeers = getMessagesController().getSendAsPeers(this.dialog_id);
        this.sendAsPeersObj = sendAsPeers;
        if (sendAsPeers != null) {
            this.chatActivityEnterView.updateSendAsButton(z);
        }
    }

    private void addSponsoredMessages(boolean z) {
        MessagesController.SponsoredMessagesInfo sponsoredMessages;
        if (!this.sponsoredMessagesAdded && this.chatMode == 0 && ChatObject.isChannel(this.currentChat)) {
            if (!this.forwardEndReached[0] || getUserConfig().isPremium() || (sponsoredMessages = getMessagesController().getSponsoredMessages(this.dialog_id)) == null || sponsoredMessages.messages == null) {
                return;
            }
            for (int i = 0; i < sponsoredMessages.messages.size(); i++) {
                MessageObject messageObject = sponsoredMessages.messages.get(i);
                messageObject.resetLayout();
                long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                int i2 = messageObject.sponsoredChannelPost;
                if (i2 == 0) {
                    i2 = 0;
                }
                getMessagesController().ensureMessagesLoaded(peerId, i2, null);
            }
            this.sponsoredMessagesAdded = true;
            Integer num = sponsoredMessages.posts_between;
            this.sponsoredMessagesPostsBetween = num != null ? num.intValue() : 0;
            ArrayList<MessageObject> arrayList = this.notPushedSponsoredMessages;
            if (arrayList != null) {
                arrayList.clear();
            }
            processNewMessages(sponsoredMessages.messages);
        }
    }

    private void checkGroupCallJoin(boolean z) {
        TLRPC$ChatFull tLRPC$ChatFull;
        String str;
        ChatObject.Call call = this.groupCall;
        if (call == null || (str = this.voiceChatHash) == null || !this.openAnimationEnded) {
            if (this.voiceChatHash != null && z && (tLRPC$ChatFull = this.chatInfo) != null && tLRPC$ChatFull.call == null && this.fragmentView != null && getParentActivity() != null) {
                BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("LinkHashExpired", R.string.LinkHashExpired)).show();
                this.voiceChatHash = null;
            }
            this.lastCallCheckFromServer = !this.openAnimationEnded;
            return;
        }
        VoIPHelper.startCall(this.currentChat, null, str, this.createGroupCall, Boolean.valueOf(!call.call.rtmp_stream), getParentActivity(), this, getAccountInstance());
        this.voiceChatHash = null;
    }

    private void checkWaitingForReplies() {
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        int i;
        MessageObject messageObject;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        int indexOf;
        if (this.waitingForReplies.size() == 0) {
            return;
        }
        int size = this.waitingForReplies.size();
        ArrayList arrayList = null;
        LongSparseArray longSparseArray = null;
        ArrayList arrayList2 = null;
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject valueAt = this.waitingForReplies.valueAt(i2);
            if (valueAt.replyMessageObject != null) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(Integer.valueOf(this.waitingForReplies.keyAt(i2)));
                if (!(valueAt.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && (tLRPC$MessageFwdHeader = valueAt.replyMessageObject.messageOwner.fwd_from) != null && MessageObject.getPeerId(tLRPC$MessageFwdHeader.saved_from_peer) == this.dialog_id && (i = valueAt.replyMessageObject.messageOwner.fwd_from.channel_post) != 0 && (messageObject = this.messagesDict[0].get(i)) != null && (tLRPC$MessageReplies = messageObject.messageOwner.replies) != null) {
                    tLRPC$MessageReplies.replies++;
                    messageObject.animateComments = true;
                    TLRPC$Message tLRPC$Message = valueAt.messageOwner;
                    TLRPC$Peer tLRPC$Peer = tLRPC$Message.from_id;
                    if (tLRPC$Peer == null) {
                        tLRPC$Peer = tLRPC$Message.peer_id;
                    }
                    int size2 = tLRPC$MessageReplies.recent_repliers.size();
                    int i3 = 0;
                    while (true) {
                        if (i3 >= size2) {
                            break;
                        } else if (MessageObject.getPeerId(messageObject.messageOwner.replies.recent_repliers.get(i3)) == MessageObject.getPeerId(tLRPC$Peer)) {
                            messageObject.messageOwner.replies.recent_repliers.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                    messageObject.messageOwner.replies.recent_repliers.add(0, tLRPC$Peer);
                    if (!valueAt.isOut()) {
                        messageObject.messageOwner.replies.max_id = valueAt.getId();
                    }
                    MessagesStorage messagesStorage = getMessagesStorage();
                    long j = this.currentChat.id;
                    int id = messageObject.getId();
                    TLRPC$MessageReplies tLRPC$MessageReplies2 = messageObject.messageOwner.replies;
                    messagesStorage.updateRepliesCount(j, id, tLRPC$MessageReplies2.recent_repliers, tLRPC$MessageReplies2.max_id, 1);
                    if (messageObject.hasValidGroupId()) {
                        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
                        if (groupedMessages != null) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            int size3 = groupedMessages.messages.size();
                            for (int i4 = 0; i4 < size3; i4++) {
                                groupedMessages.messages.get(i4).animateComments = true;
                            }
                        }
                    } else if (this.chatAdapter != null && (indexOf = this.messages.indexOf(messageObject)) >= 0) {
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                        }
                        arrayList2.add(Integer.valueOf(indexOf + this.chatAdapter.messagesStartRow));
                    }
                }
            }
        }
        if (arrayList != null) {
            int size4 = arrayList.size();
            for (int i5 = 0; i5 < size4; i5++) {
                this.waitingForReplies.remove(((Integer) arrayList.get(i5)).intValue());
            }
        }
        if (this.chatAdapter != null) {
            if (longSparseArray != null) {
                int size5 = longSparseArray.size();
                for (int i6 = 0; i6 < size5; i6++) {
                    MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i6);
                    ArrayList<MessageObject> arrayList3 = groupedMessages2.messages;
                    int indexOf2 = this.messages.indexOf(arrayList3.get(arrayList3.size() - 1));
                    if (indexOf2 >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf2 + chatActivityAdapter.messagesStartRow, groupedMessages2.messages.size());
                    }
                }
            }
            if (arrayList2 != null) {
                int size6 = arrayList2.size();
                for (int i7 = 0; i7 < size6; i7++) {
                    this.chatAdapter.notifyItemChanged(((Integer) arrayList2.get(i7)).intValue());
                }
            }
        }
    }

    private void clearHistory(boolean z, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        TLRPC$User tLRPC$User;
        if (z) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("clear history by overwrite firstLoading=" + this.firstLoading + " minMessage=" + this.minMessageId[0] + " topMessage=" + tLRPC$TL_updates_channelDifferenceTooLong.dialog.top_message);
            }
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i = tLRPC$Dialog.top_message;
            int[] iArr = this.minMessageId;
            if (i > iArr[0]) {
                this.createUnreadMessageAfterId = Math.max(iArr[0] + 1, tLRPC$Dialog.read_inbox_max_id);
            }
            this.forwardEndReached[0] = false;
            this.hideForwardEndReached = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null && chatActivityAdapter.loadingDownRow < 0) {
                this.chatAdapter.notifyItemInserted(0);
            }
            TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
            int i2 = tLRPC$Dialog2.unread_count;
            this.newUnreadMessageCount = i2;
            this.newMentionsCount = tLRPC$Dialog2.unread_mentions_count;
            if (this.prevSetUnreadCount != i2) {
                CounterView counterView = this.pagedownButtonCounter;
                if (counterView != null) {
                    counterView.setCount(i2, this.openAnimationEnded);
                }
                this.prevSetUnreadCount = this.newUnreadMessageCount;
                updatePagedownButtonVisibility(true);
            }
            int i3 = this.newMentionsCount;
            int i4 = tLRPC$TL_updates_channelDifferenceTooLong.dialog.unread_mentions_count;
            if (i3 != i4) {
                this.newMentionsCount = i4;
                if (i4 <= 0) {
                    this.newMentionsCount = 0;
                    this.hasAllMentionsLocal = true;
                    showMentionDownButton(false, true);
                } else {
                    SimpleTextView simpleTextView = this.mentiondownButtonCounter;
                    if (simpleTextView != null) {
                        simpleTextView.setText(String.format("%d", Integer.valueOf(i4)));
                    }
                    showMentionDownButton(true, true);
                }
            }
            checkScrollForLoad(false);
            return;
        }
        this.messages.clear();
        this.waitingForLoad.clear();
        this.messagesByDays.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        for (int i5 = 1; i5 >= 0; i5--) {
            this.messagesDict[i5].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i5] = Integer.MAX_VALUE;
                this.minMessageId[i5] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[i5] = Integer.MIN_VALUE;
                this.minMessageId[i5] = Integer.MAX_VALUE;
            }
            this.maxDate[i5] = Integer.MIN_VALUE;
            this.minDate[i5] = 0;
            this.selectedMessagesIds[i5].clear();
            this.selectedMessagesCanCopyIds[i5].clear();
            this.selectedMessagesCanStarIds[i5].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        if (this.botButtons != null) {
            this.botButtons = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setButtons(null, false);
            }
        }
        if (this.progressView != null) {
            showProgressView(false);
            createEmptyView();
            this.chatListView.setEmptyView(this.emptyViewContainer);
        }
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
        if (this.currentEncryptedChat == null && (tLRPC$User = this.currentUser) != null && tLRPC$User.bot && this.botUser == null) {
            this.botUser = "";
            updateBottomOverlay();
        }
    }

    public boolean processSwitchButton(TLRPC$TL_keyboardButtonSwitchInline tLRPC$TL_keyboardButtonSwitchInline) {
        if (this.inlineReturn == 0 || tLRPC$TL_keyboardButtonSwitchInline.same_peer || this.parentLayout == null) {
            return false;
        }
        String str = "@" + this.currentUser.username + " " + tLRPC$TL_keyboardButtonSwitchInline.query;
        if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(str);
        } else {
            getMediaDataController().saveDraft(this.inlineReturn, 0, str, null, null, false);
            if (this.parentLayout.getFragmentStack().size() > 1) {
                BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 2);
                if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).dialog_id == this.inlineReturn) {
                    finishFragment();
                } else {
                    Bundle bundle = new Bundle();
                    if (DialogObject.isEncryptedDialog(this.inlineReturn)) {
                        bundle.putInt("enc_id", DialogObject.getEncryptedChatId(this.inlineReturn));
                    } else if (DialogObject.isUserDialog(this.inlineReturn)) {
                        bundle.putLong("user_id", this.inlineReturn);
                    } else {
                        bundle.putLong("chat_id", -this.inlineReturn);
                    }
                    addToPulledDialogsMyself();
                    presentFragment(new ChatActivity(bundle), true);
                }
            }
        }
        return true;
    }

    private void showGigagroupConvertAlert() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat.creator && tLRPC$Chat.megagroup && !tLRPC$Chat.gigagroup && tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda176
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$139();
                }
            }, 1000L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$139() {
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        if (tLRPC$ChatFull == null || this.paused) {
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat.creator && tLRPC$Chat.megagroup && !tLRPC$Chat.gigagroup && tLRPC$ChatFull.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            int i = notificationsSettings.getInt("group_convert_time", 0);
            int i2 = BuildVars.DEBUG_PRIVATE_VERSION ? 120 : 604800;
            int currentTime = getConnectionsManager().getCurrentTime();
            if (Math.abs(currentTime - i) < i2 || this.visibleDialog != null || getParentActivity() == null) {
                return;
            }
            notificationsSettings.edit().putInt("group_convert_time", currentTime).commit();
            showDialog(AlertsCreator.createGigagroupConvertAlert(getParentActivity(), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda25
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$137(dialogInterface, i3);
                }
            }, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda28
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i3) {
                    ChatActivity.this.lambda$showGigagroupConvertAlert$138(dialogInterface, i3);
                }
            }).create());
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 88 extends GigagroupConvertAlert {
        88(Context context, BaseFragment baseFragment) {
            super(context, baseFragment);
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCovert() {
            MessagesController messagesController = ChatActivity.this.getMessagesController();
            Activity parentActivity = ChatActivity.this.getParentActivity();
            ChatActivity chatActivity = ChatActivity.this;
            messagesController.convertToGigaGroup(parentActivity, chatActivity.currentChat, chatActivity, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$88$$ExternalSyntheticLambda0
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z) {
                    ChatActivity.88.this.lambda$onCovert$0(z);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCovert$0(boolean z) {
            if (z) {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                ChatActivity.this.undoView.showWithAction(0L, 76, (Runnable) null);
            }
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCancel() {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(0L, 75, (Runnable) null);
            ChatActivity.this.getMessagesController().removeSuggestion(ChatActivity.this.dialog_id, "CONVERT_GIGAGROUP");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$137(DialogInterface dialogInterface, int i) {
        showDialog(new 88(getParentActivity(), this));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showGigagroupConvertAlert$138(DialogInterface dialogInterface, int i) {
        createUndoView();
        UndoView undoView = this.undoView;
        if (undoView == null) {
            return;
        }
        undoView.showWithAction(0L, 75, (Runnable) null);
    }

    private void addReplyMessageOwner(MessageObject messageObject, Integer num) {
        MessageObject messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 == null) {
            return;
        }
        int id = messageObject2.getId();
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(id);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.replyMessageOwners.put(id, arrayList);
        }
        int id2 = messageObject.getId();
        if (!arrayList.contains(Integer.valueOf(id2))) {
            arrayList.add(Integer.valueOf(id2));
        }
        if (num.intValue() != 0) {
            arrayList.remove(num);
        }
    }

    private void updateReplyMessageOwners(int i, MessageObject messageObject) {
        ArrayList<Integer> arrayList = this.replyMessageOwners.get(i);
        if (arrayList == null) {
            return;
        }
        MessageObject messageObject2 = messageObject == null ? new MessageObject(this.currentAccount, new TLRPC$TL_messageEmpty(), false, false) : null;
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            MessageObject messageObject3 = this.messagesDict[0].get(arrayList.get(i2).intValue());
            if (messageObject3 != null) {
                if (messageObject == null) {
                    messageObject3.replyMessageObject = messageObject2;
                } else {
                    messageObject3.replyMessageObject = messageObject;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (chatActivityAdapter != null) {
                    chatActivityAdapter.updateRowWithMessageObject(messageObject3, true, false);
                }
            }
        }
        if (messageObject == null) {
            this.replyMessageOwners.remove(i);
        }
    }

    private void rotateMotionBackgroundDrawable() {
        MotionBackgroundDrawable motionBackgroundDrawable;
        ThemeDelegate themeDelegate = this.themeDelegate;
        if (themeDelegate == null) {
            return;
        }
        Drawable wallpaperDrawable = themeDelegate.getWallpaperDrawable();
        View view = this.fragmentView;
        if (view != null) {
            wallpaperDrawable = ((SizeNotifierFrameLayout) view).getBackgroundImage();
        }
        if (wallpaperDrawable instanceof ChatBackgroundDrawable) {
            wallpaperDrawable = ((ChatBackgroundDrawable) wallpaperDrawable).getDrawable();
        }
        if (wallpaperDrawable instanceof MotionBackgroundDrawable) {
            ((MotionBackgroundDrawable) wallpaperDrawable).switchToNextPosition();
        }
        Drawable themedDrawable = getThemedDrawable("drawableMsgOut");
        if (!(themedDrawable instanceof Theme.MessageDrawable) || (motionBackgroundDrawable = ((Theme.MessageDrawable) themedDrawable).getMotionBackgroundDrawable()) == null) {
            return;
        }
        motionBackgroundDrawable.switchToNextPosition();
    }

    /* JADX WARN: Code restructure failed: missing block: B:196:0x0389, code lost:
        if (r30.currentUser.id == r2) goto L205;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:366:0x062c  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x0663  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x0760  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x0810  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x0818  */
    /* JADX WARN: Removed duplicated region for block: B:500:0x081e  */
    /* JADX WARN: Removed duplicated region for block: B:501:0x0822  */
    /* JADX WARN: Removed duplicated region for block: B:527:0x0894  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x08ed  */
    /* JADX WARN: Removed duplicated region for block: B:650:0x0b56  */
    /* JADX WARN: Removed duplicated region for block: B:657:0x0b73  */
    /* JADX WARN: Removed duplicated region for block: B:660:0x0b7d  */
    /* JADX WARN: Removed duplicated region for block: B:674:0x0ba4  */
    /* JADX WARN: Removed duplicated region for block: B:681:0x0bbd  */
    /* JADX WARN: Removed duplicated region for block: B:825:0x08d4 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r3v121 */
    /* JADX WARN: Type inference failed for: r3v122 */
    /* JADX WARN: Type inference failed for: r3v123 */
    /* JADX WARN: Type inference failed for: r3v4 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /* JADX WARN: Type inference failed for: r3v7 */
    /* JADX WARN: Type inference failed for: r3v8 */
    /* JADX WARN: Type inference failed for: r4v29 */
    /* JADX WARN: Type inference failed for: r4v31 */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v15, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r7v18 */
    /* JADX WARN: Type inference failed for: r7v19 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processNewMessages(ArrayList<MessageObject> arrayList) {
        boolean z;
        int i;
        boolean z2;
        boolean z3;
        boolean z4;
        int i2;
        CounterView counterView;
        TLRPC$Message tLRPC$Message;
        long j;
        String str;
        boolean z5;
        boolean z6;
        TLRPC$MessageAction tLRPC$MessageAction;
        ChatAvatarContainer chatAvatarContainer;
        TLRPC$Chat tLRPC$Chat;
        MessageObject.GroupedMessages groupedMessages;
        int i3;
        int i4;
        ArrayList<MessageObject> arrayList2;
        HashMap<String, ArrayList<MessageObject>> hashMap;
        LongSparseArray longSparseArray;
        ArrayList<MessageObject> arrayList3;
        ChatActivityAdapter chatActivityAdapter;
        int i5;
        ValueAnimator valueAnimator;
        MessageObject messageObject;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject messageObject2;
        ?? r7;
        TLRPC$Chat tLRPC$Chat2;
        int i6;
        boolean z7;
        int i7;
        int i8;
        MessageObject.GroupedMessages groupedMessages3;
        int i9;
        int i10;
        MessageObject messageObject3;
        TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction;
        TLRPC$User tLRPC$User;
        int i11;
        ArrayList<MessageObject> arrayList4;
        boolean z8;
        ArrayList<MessageObject> arrayList5;
        ArrayList<MessageObject> arrayList6;
        String str2;
        int i12;
        SimpleTextView simpleTextView;
        CounterView counterView2;
        int i13;
        boolean z9;
        boolean z10;
        TLRPC$Chat tLRPC$Chat3;
        int i14;
        TLRPC$User tLRPC$User2;
        int i15;
        TLRPC$Chat chat;
        TLRPC$Chat chat2;
        int i16;
        ArrayList<MessageObject> arrayList7 = arrayList;
        long clientUserId = getUserConfig().getClientUserId();
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.setShouldAnimateEnterFromBottom(true);
        }
        int size = arrayList.size();
        boolean z11 = false;
        boolean z12 = false;
        LongSparseArray longSparseArray2 = null;
        boolean z13 = false;
        for (int i17 = 0; i17 < size; i17++) {
            MessageObject messageObject4 = arrayList7.get(i17);
            if (!z12) {
                z12 = messageObject4.isSponsored();
            }
            if (messageObject4.getId() > 0 && ((i16 = messageObject4.type) == 21 || i16 == 22)) {
                int i18 = 0;
                while (true) {
                    if (i18 >= this.messages.size()) {
                        break;
                    }
                    int i19 = messageObject4.type;
                    if (this.messages.get(i18).type != i19 || this.messages.get(i18).getId() >= 0) {
                        i18++;
                    } else {
                        this.messagesDict[0].remove(this.messages.get(i18).getId());
                        this.messagesDict[0].put(messageObject4.getId(), messageObject4);
                        messageObject4.stableId = this.messages.get(i18).stableId;
                        if (i19 == 22) {
                            messageObject4.messageOwner.action.wallpaper = this.messages.get(i18).messageOwner.action.wallpaper;
                        } else if (i19 == 21) {
                            PhotoUtilities.replacePhotoImagesInCache(this.currentAccount, this.messages.get(i18).messageOwner.action.photo, messageObject4.messageOwner.action.photo);
                        }
                        this.messages.set(i18, messageObject4);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        chatActivityAdapter2.notifyItemChanged(chatActivityAdapter2.messagesStartRow + i18);
                    }
                }
            }
            int id = messageObject4.getId();
            if (this.threadMessageId != 0 && id > 0) {
                if (id <= (messageObject4.isOut() ? this.threadMaxOutboxReadId : this.threadMaxInboxReadId)) {
                    messageObject4.setIsRead();
                }
            }
            if (this.currentEncryptedChat == null && !this.forwardEndReached[0] && id < 0) {
                this.pendingSendMessagesDict.put(id, messageObject4);
                this.pendingSendMessages.add(0, messageObject4);
            }
            if ((!messageObject4.isDice() || messageObject4.isForwarded()) && !(messageObject4.messageOwner.action instanceof TLRPC$TL_messageActionGiftPremium)) {
                i15 = 1;
            } else {
                i15 = 1;
                messageObject4.wasUnread = true;
            }
            if (this.chatMode == i15 && messageObject4.hasValidGroupId() && this.messagesDict[0].indexOfKey(messageObject4.getId()) >= 0) {
                long groupId = messageObject4.getGroupId();
                if (longSparseArray2 == null) {
                    longSparseArray2 = new LongSparseArray();
                }
                Long l = (Long) longSparseArray2.get(groupId);
                if (l == null) {
                    l = Long.valueOf(Utilities.random.nextLong());
                    longSparseArray2.put(groupId, l);
                }
                messageObject4.localGroupId = l.longValue();
            }
            if (messageObject4.isOut()) {
                if (!z13) {
                    NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                    z13 = true;
                }
                if (this.currentChat != null && (chat2 = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                    this.currentChat = chat2;
                    if (!chat2.gigagroup && chat2.slowmode_enabled && messageObject4.isSent() && this.chatMode != 1) {
                        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
                        if (tLRPC$ChatFull != null) {
                            int i20 = messageObject4.messageOwner.date + tLRPC$ChatFull.slowmode_seconds;
                            int currentTime = getConnectionsManager().getCurrentTime();
                            if (i20 > getConnectionsManager().getCurrentTime()) {
                                TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                                tLRPC$ChatFull2.slowmode_next_send_date = Math.max(tLRPC$ChatFull2.slowmode_next_send_date, Math.min(currentTime + tLRPC$ChatFull2.slowmode_seconds, i20));
                                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                                if (chatActivityEnterView != null) {
                                    chatActivityEnterView.setSlowModeTimer(this.chatInfo.slowmode_next_send_date);
                                }
                            }
                        }
                        getMessagesController().loadFullChat(this.currentChat.id, 0, true);
                    }
                }
                if (messageObject4.wasJustSent && ((getUserConfig().isPremium() || messageObject4.isAnimatedAnimatedEmoji()) && SharedConfig.getDevicePerformanceClass() != 0)) {
                    if (LiteMode.isEnabled(messageObject4.isAnimatedAnimatedEmoji() ? LiteMode.FLAG_ANIMATED_EMOJI_CHAT : 2)) {
                        messageObject4.forcePlayEffect = true;
                    }
                }
            }
            if (this.currentChat != null) {
                TLRPC$MessageAction tLRPC$MessageAction2 = messageObject4.messageOwner.action;
                if ((((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatDeleteUser) && tLRPC$MessageAction2.user_id == clientUserId) || ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction2.users.contains(Long.valueOf(clientUserId)))) && (chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id))) != null) {
                    this.currentChat = chat;
                    checkActionBarMenu(false);
                    updateBottomOverlay();
                    ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
                    if (chatAvatarContainer2 != null) {
                        chatAvatarContainer2.updateSubtitle(true);
                    }
                }
            } else if (this.inlineReturn != 0 && messageObject4.messageOwner.reply_markup != null) {
                for (int i21 = 0; i21 < messageObject4.messageOwner.reply_markup.rows.size(); i21++) {
                    TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject4.messageOwner.reply_markup.rows.get(i21);
                    int i22 = 0;
                    while (true) {
                        if (i22 < tLRPC$TL_keyboardButtonRow.buttons.size()) {
                            TLRPC$KeyboardButton tLRPC$KeyboardButton = tLRPC$TL_keyboardButtonRow.buttons.get(i22);
                            if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) {
                                processSwitchButton((TLRPC$TL_keyboardButtonSwitchInline) tLRPC$KeyboardButton);
                                break;
                            }
                            i22++;
                        }
                    }
                }
            }
            if (messageObject4.getReplyMsgId() != 0 && messageObject4.replyMessageObject == null) {
                MessageObject messageObject5 = this.messagesDict[0].get(messageObject4.getReplyMsgId());
                messageObject4.replyMessageObject = messageObject5;
                if (messageObject5 == null && messageObject4.getDialogId() != this.mergeDialogId) {
                    messageObject4.replyMessageObject = this.repliesMessagesDict.get(messageObject4.getReplyMsgId());
                }
                messageObject4.applyTimestampsHighlightForReplyMsg();
                TLRPC$MessageAction tLRPC$MessageAction3 = messageObject4.messageOwner.action;
                if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionPinMessage) {
                    messageObject4.generatePinMessageText(null, null);
                } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGameScore) {
                    messageObject4.generateGameMessageText(null);
                } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionPaymentSent) {
                    messageObject4.generatePaymentSentMessageText(null);
                }
            }
            MessageObject messageObject6 = messageObject4.replyMessageObject;
            if (messageObject6 != null) {
                this.repliesMessagesDict.put(messageObject6.getId(), messageObject4.replyMessageObject);
                addReplyMessageOwner(messageObject4, 0);
            }
        }
        if (this.chatMode == 1 && !arrayList.isEmpty()) {
            replaceMessageObjects(arrayList7, 0, true);
        }
        String str3 = "%d";
        if (!this.forwardEndReached[0]) {
            int i23 = Integer.MIN_VALUE;
            int i24 = 0;
            z3 = false;
            z4 = false;
            while (i24 < arrayList.size()) {
                MessageObject messageObject7 = arrayList7.get(i24);
                if (messageObject7.isOut()) {
                    rotateMotionBackgroundDrawable();
                }
                int i25 = this.threadMessageId;
                if (i25 == 0 || i25 == messageObject7.getReplyTopMsgId() || this.threadMessageId == messageObject7.getReplyMsgId()) {
                    int id2 = messageObject7.getId();
                    if (messageObject7.isOut() && this.waitingForSendingMessageLoad) {
                        this.waitingForSendingMessageLoad = z11;
                        i13 = 1;
                        this.chatActivityEnterView.hideTopView(true);
                        ValueAnimator valueAnimator2 = this.changeBoundAnimator;
                        if (valueAnimator2 != null) {
                            valueAnimator2.start();
                        }
                    } else {
                        i13 = 1;
                    }
                    if (this.chatMode == i13 || (tLRPC$User2 = this.currentUser) == null) {
                        z9 = z12;
                    } else {
                        if (tLRPC$User2.bot && messageObject7.isOut()) {
                            z9 = z12;
                        } else {
                            z9 = z12;
                        }
                        messageObject7.setIsRead();
                    }
                    TLRPC$MessageAction tLRPC$MessageAction4 = messageObject7.messageOwner.action;
                    ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
                    if (chatAvatarContainer3 != null && this.currentEncryptedChat != null && (tLRPC$MessageAction4 instanceof TLRPC$TL_messageEncryptedAction)) {
                        TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction2 = tLRPC$MessageAction4.encryptedAction;
                        if (tLRPC$DecryptedMessageAction2 instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                            chatAvatarContainer3.setTime(tLRPC$DecryptedMessageAction2.ttl_seconds, true);
                        }
                    }
                    if (tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatMigrateTo) {
                        migrateToNewChat(messageObject7);
                        return;
                    }
                    TLRPC$Chat tLRPC$Chat4 = this.currentChat;
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.megagroup && ((tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatAddUser) || (tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatDeleteUser))) {
                        z4 = true;
                    }
                    if (i24 == 0 && messageObject7.shouldAnimateSending()) {
                        z10 = true;
                        if (this.chatMode != 1) {
                            this.needAnimateToMessage = messageObject7;
                        }
                    } else {
                        z10 = true;
                    }
                    if (messageObject7.isOut() && messageObject7.wasJustSent) {
                        scrollToLastMessage(z10, false);
                        return;
                    } else if (messageObject7.type >= 0 && this.messagesDict[0].indexOfKey(id2) < 0 && (((tLRPC$Chat3 = this.currentChat) == null || !tLRPC$Chat3.creator || ((ChatObject.isChannel(tLRPC$Chat3) && !this.currentChat.megagroup) || (!(tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatCreate) && (!(tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChatEditPhoto) || this.messages.size() >= 2)))) && !(tLRPC$MessageAction4 instanceof TLRPC$TL_messageActionChannelMigrateFrom) && (this.threadMessageId == 0 || !(messageObject7.messageOwner instanceof TLRPC$TL_messageEmpty)))) {
                        if (!this.isTopic && this.threadMessageObject != null && messageObject7.isReply() && !(messageObject7.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject7.getReplyAnyMsgId()) {
                            this.threadMessageObject.messageOwner.replies.replies++;
                        }
                        addToPolls(messageObject7, null);
                        messageObject7.checkLayout();
                        i23 = Math.max(i23, messageObject7.messageOwner.date);
                        if (id2 > 0) {
                            this.last_message_id = Math.max(this.last_message_id, id2);
                        } else if (this.currentEncryptedChat != null) {
                            this.last_message_id = Math.min(this.last_message_id, id2);
                        }
                        if ((this.threadMessageId == 0 || this.isTopic) && messageObject7.messageOwner.mentioned && messageObject7.isContentUnread()) {
                            i14 = 1;
                            this.newMentionsCount++;
                        } else {
                            i14 = 1;
                        }
                        if (!z9) {
                            this.newUnreadMessageCount += i14;
                        }
                        int i26 = messageObject7.type;
                        if (i26 == 10 || i26 == 11) {
                            z3 = true;
                        }
                    }
                } else {
                    z9 = z12;
                }
                i24++;
                z12 = z9;
                z11 = false;
            }
            z = z12;
            if (this.newUnreadMessageCount != 0 && (counterView2 = this.pagedownButtonCounter) != null) {
                counterView2.setVisibility(0);
                int i27 = this.prevSetUnreadCount;
                int i28 = this.newUnreadMessageCount;
                if (i27 != i28) {
                    this.prevSetUnreadCount = i28;
                    i12 = 1;
                    this.pagedownButtonCounter.setCount(i28, true);
                    if (this.newMentionsCount != 0 && (simpleTextView = this.mentiondownButtonCounter) != null) {
                        simpleTextView.setVisibility(0);
                        SimpleTextView simpleTextView2 = this.mentiondownButtonCounter;
                        Object[] objArr = new Object[i12];
                        objArr[0] = Integer.valueOf(this.newMentionsCount);
                        simpleTextView2.setText(String.format("%d", objArr));
                        showMentionDownButton(i12, i12);
                    }
                    updateVisibleRows();
                    z2 = false;
                    i11 = 1;
                }
            }
            i12 = 1;
            if (this.newMentionsCount != 0) {
                simpleTextView.setVisibility(0);
                SimpleTextView simpleTextView22 = this.mentiondownButtonCounter;
                Object[] objArr2 = new Object[i12];
                objArr2[0] = Integer.valueOf(this.newMentionsCount);
                simpleTextView22.setText(String.format("%d", objArr2));
                showMentionDownButton(i12, i12);
            }
            updateVisibleRows();
            z2 = false;
            i11 = 1;
        } else {
            z = z12;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("received new messages " + arrayList.size() + " in dialog " + this.dialog_id);
            }
            MessageObject messageObject8 = null;
            HashMap<String, ArrayList<MessageObject>> hashMap2 = null;
            LongSparseArray longSparseArray3 = null;
            int i29 = 0;
            boolean z14 = false;
            boolean z15 = false;
            boolean z16 = false;
            boolean z17 = false;
            int i30 = -1;
            while (i29 < arrayList.size()) {
                MessageObject messageObject9 = arrayList7.get(i29);
                boolean z18 = z14;
                boolean z19 = z15;
                boolean z20 = z16;
                if (messageObject9.scheduled == (this.chatMode == 1) && (this.threadMessageId == 0 || ((ChatObject.isForum(this.currentChat) && this.isTopic && getTopicId() == MessageObject.getTopicId(messageObject9.messageOwner, ChatObject.isForum(this.currentChat))) || this.threadMessageId == messageObject9.getReplyTopMsgId() || this.threadMessageId == messageObject9.getReplyMsgId()))) {
                    if (messageObject9.isOut() && this.messagesDict[0].indexOfKey(messageObject9.getId()) < 0) {
                        rotateMotionBackgroundDrawable();
                    }
                    int id3 = messageObject9.getId();
                    if (this.chatMode == 1 && this.messagesDict[0].indexOfKey(id3) >= 0) {
                        MessageObject messageObject10 = this.messagesDict[0].get(id3);
                        this.messagesDict[0].remove(id3);
                        if (messageObject10 != null) {
                            int indexOf = this.messages.indexOf(messageObject10);
                            this.messages.remove(indexOf);
                            str = str3;
                            ArrayList<MessageObject> arrayList8 = this.messagesByDays.get(messageObject10.dateKey);
                            arrayList8.remove(messageObject10);
                            if (arrayList8.isEmpty()) {
                                this.messagesByDays.remove(messageObject10.dateKey);
                                if (indexOf >= 0 && indexOf < this.messages.size()) {
                                    this.messages.remove(indexOf);
                                }
                            }
                            if (messageObject10.hasValidGroupId()) {
                                z6 = z17;
                                MessageObject.GroupedMessages groupedMessages4 = this.groupedMessagesMap.get(messageObject10.getGroupId());
                                groupedMessages4.messages.remove(messageObject10);
                                if (longSparseArray3 == null) {
                                    longSparseArray3 = new LongSparseArray();
                                }
                                longSparseArray3.put(groupedMessages4.groupId, groupedMessages4);
                            } else {
                                z6 = z17;
                            }
                            ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                            if (chatActivityAdapter3 != null) {
                                chatActivityAdapter3.notifyDataSetChanged(true);
                            }
                            if (isSecretChat()) {
                                checkSecretMessageForLocation(messageObject9);
                            }
                            if (this.chatMode != 1 && (tLRPC$User = this.currentUser) != null && ((tLRPC$User.bot && messageObject9.isOut()) || this.currentUser.id == clientUserId)) {
                                messageObject9.setIsRead();
                            }
                            tLRPC$MessageAction = messageObject9.messageOwner.action;
                            chatAvatarContainer = this.avatarContainer;
                            if (chatAvatarContainer != null && this.currentEncryptedChat != null && (tLRPC$MessageAction instanceof TLRPC$TL_messageEncryptedAction)) {
                                tLRPC$DecryptedMessageAction = tLRPC$MessageAction.encryptedAction;
                                if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                                    chatAvatarContainer.setTime(tLRPC$DecryptedMessageAction.ttl_seconds, true);
                                }
                            }
                            if (messageObject9.type >= 0 || this.messagesDict[0].indexOfKey(id3) >= 0 || (((tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.creator && ((!ChatObject.isChannel(tLRPC$Chat) || this.currentChat.megagroup) && ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatCreate) || ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatEditPhoto) && this.messages.size() < 2)))) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChannelMigrateFrom) || (this.threadMessageId != 0 && (messageObject9.messageOwner instanceof TLRPC$TL_messageEmpty)))) {
                                j = clientUserId;
                                z5 = z6;
                            } else {
                                MessageObject messageObject11 = this.threadMessageObject;
                                if (messageObject11 != null && messageObject11.messageOwner.replies != null && messageObject9.isReply() && !(messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && this.threadMessageObject.getId() == messageObject9.getReplyAnyMsgId()) {
                                    this.threadMessageObject.messageOwner.replies.replies++;
                                }
                                addToPolls(messageObject9, null);
                                if (i29 == 0 && messageObject9.shouldAnimateSending() && this.chatMode != 1) {
                                    this.animatingMessageObjects.add(messageObject9);
                                }
                                if (messageObject9.hasValidGroupId()) {
                                    groupedMessages = this.groupedMessagesMap.get(messageObject9.getGroupId());
                                    if (groupedMessages == null) {
                                        groupedMessages = new MessageObject.GroupedMessages();
                                        long groupId2 = messageObject9.getGroupId();
                                        groupedMessages.groupId = groupId2;
                                        j = clientUserId;
                                        this.groupedMessagesMap.put(groupId2, groupedMessages);
                                    } else {
                                        j = clientUserId;
                                    }
                                    if (longSparseArray3 == null) {
                                        longSparseArray3 = new LongSparseArray();
                                    }
                                    longSparseArray3.put(groupedMessages.groupId, groupedMessages);
                                    groupedMessages.messages.add(messageObject9);
                                } else {
                                    j = clientUserId;
                                    groupedMessages = null;
                                }
                                if (groupedMessages != null) {
                                    if (groupedMessages.messages.size() > 1) {
                                        ArrayList<MessageObject> arrayList9 = groupedMessages.messages;
                                        messageObject3 = arrayList9.get(arrayList9.size() - 2);
                                    } else {
                                        messageObject3 = null;
                                    }
                                    if (messageObject3 != null) {
                                        i3 = this.messages.indexOf(messageObject3);
                                        if (i3 == -1) {
                                            z5 = z6;
                                        } else if ((messageObject9.scheduled || messageObject9.messageOwner.id >= 0) && !this.messages.isEmpty()) {
                                            int size2 = this.messages.size();
                                            int i31 = 0;
                                            while (i31 < size2) {
                                                MessageObject messageObject12 = this.messages.get(i31);
                                                if (messageObject12.type >= 0) {
                                                    TLRPC$Message tLRPC$Message2 = messageObject12.messageOwner;
                                                    i7 = i3;
                                                    int i32 = tLRPC$Message2.date;
                                                    i8 = size2;
                                                    if (i32 > 0) {
                                                        z5 = z6;
                                                        if ((this.chatMode == 1 || (i9 = tLRPC$Message2.id) <= 0 || (i10 = messageObject9.messageOwner.id) <= 0 || i9 >= i10) && i32 > messageObject9.messageOwner.date) {
                                                            i31++;
                                                            i3 = i7;
                                                            size2 = i8;
                                                            z6 = z5;
                                                        } else {
                                                            if (messageObject12.getGroupId() == 0 || ((groupedMessages3 = this.groupedMessagesMap.get(messageObject12.getGroupId())) != null && groupedMessages3.messages.size() == 0)) {
                                                                groupedMessages3 = null;
                                                            }
                                                            if (groupedMessages3 == null) {
                                                                i3 = i31;
                                                            } else {
                                                                ArrayList<MessageObject> arrayList10 = this.messages;
                                                                ArrayList<MessageObject> arrayList11 = groupedMessages3.messages;
                                                                i3 = arrayList10.indexOf(arrayList11.get(arrayList11.size() - 1));
                                                            }
                                                            if (i3 != -1 || i3 > this.messages.size()) {
                                                                i3 = this.messages.size();
                                                            }
                                                            if (z && this.sponsoredMessagesPostsBetween > 0) {
                                                                if (i30 >= 0) {
                                                                    i3 = 0;
                                                                    i30 = 0;
                                                                } else {
                                                                    int i33 = i30 + 1;
                                                                    int i34 = 0;
                                                                    int i35 = 0;
                                                                    while (true) {
                                                                        if (i33 >= this.messages.size()) {
                                                                            i6 = i33;
                                                                            z7 = false;
                                                                            break;
                                                                        }
                                                                        MessageObject messageObject13 = this.messages.get(i33);
                                                                        if (messageObject13 != null && !messageObject13.isSponsored()) {
                                                                            i34 += messageObject13.getApproximateHeight();
                                                                            i35++;
                                                                        }
                                                                        if (i35 > this.sponsoredMessagesPostsBetween && i34 > AndroidUtilities.displaySize.y) {
                                                                            i6 = Math.min(i33 + 1, this.messages.size());
                                                                            z7 = true;
                                                                            break;
                                                                        }
                                                                        i33++;
                                                                    }
                                                                    if (!z7 || i6 > this.messages.size()) {
                                                                        if (this.notPushedSponsoredMessages == null) {
                                                                            this.notPushedSponsoredMessages = new ArrayList<>();
                                                                        }
                                                                        this.notPushedSponsoredMessages.add(messageObject9);
                                                                        z14 = z18;
                                                                        z15 = z19;
                                                                        z16 = z20;
                                                                        z17 = z5;
                                                                        i29++;
                                                                        arrayList7 = arrayList;
                                                                        str3 = str;
                                                                        clientUserId = j;
                                                                    } else {
                                                                        i3 = i6;
                                                                        i30 = i3;
                                                                    }
                                                                }
                                                            }
                                                            if (this.currentEncryptedChat != null) {
                                                                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject9.messageOwner.media;
                                                                if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$MessageMedia.webpage instanceof TLRPC$TL_webPageUrlPending)) {
                                                                    if (hashMap2 == null) {
                                                                        hashMap2 = new HashMap<>();
                                                                    }
                                                                    ArrayList<MessageObject> arrayList12 = hashMap2.get(messageObject9.messageOwner.media.webpage.url);
                                                                    if (arrayList12 == null) {
                                                                        arrayList12 = new ArrayList<>();
                                                                        hashMap2.put(messageObject9.messageOwner.media.webpage.url, arrayList12);
                                                                    }
                                                                    arrayList12.add(messageObject9);
                                                                }
                                                            }
                                                            messageObject9.checkLayout();
                                                            if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                                                                migrateToNewChat(messageObject9);
                                                                if (longSparseArray3 != null) {
                                                                    for (int i36 = 0; i36 < longSparseArray3.size(); i36++) {
                                                                        ((MessageObject.GroupedMessages) longSparseArray3.valueAt(i36)).calculate();
                                                                    }
                                                                    return;
                                                                }
                                                                return;
                                                            }
                                                            TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                                                            if (tLRPC$Chat5 != null && tLRPC$Chat5.megagroup && ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser))) {
                                                                z20 = true;
                                                            }
                                                            int[] iArr = this.minDate;
                                                            if (iArr[0] == 0 || messageObject9.messageOwner.date < iArr[0]) {
                                                                iArr[0] = messageObject9.messageOwner.date;
                                                            }
                                                            if (messageObject9.isOut() && !messageObject9.messageOwner.from_scheduled) {
                                                                removeUnreadPlane(true);
                                                                hideInfoView();
                                                                z5 = true;
                                                            }
                                                            if (id3 > 0) {
                                                                int[] iArr2 = this.maxMessageId;
                                                                i4 = 0;
                                                                iArr2[0] = Math.min(id3, iArr2[0]);
                                                                int[] iArr3 = this.minMessageId;
                                                                iArr3[0] = Math.max(id3, iArr3[0]);
                                                            } else {
                                                                i4 = 0;
                                                                if (this.currentEncryptedChat != null) {
                                                                    int[] iArr4 = this.maxMessageId;
                                                                    iArr4[0] = Math.max(id3, iArr4[0]);
                                                                    int[] iArr5 = this.minMessageId;
                                                                    iArr5[0] = Math.min(id3, iArr5[0]);
                                                                }
                                                            }
                                                            int[] iArr6 = this.maxDate;
                                                            iArr6[i4] = Math.max(iArr6[i4], messageObject9.messageOwner.date);
                                                            this.messagesDict[i4].put(id3, messageObject9);
                                                            if (z && !this.messages.isEmpty()) {
                                                                arrayList2 = this.messagesByDays.get(this.messages.get(i4).dateKey);
                                                            } else {
                                                                arrayList2 = this.messagesByDays.get(messageObject9.dateKey);
                                                            }
                                                            if (i3 > this.messages.size()) {
                                                                i3 = this.messages.size();
                                                            }
                                                            int sponsoredMessagesCount = getSponsoredMessagesCount();
                                                            if (!z && i3 < sponsoredMessagesCount && ((tLRPC$Chat2 = this.currentChat) == null || ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat2))) {
                                                                i3 = sponsoredMessagesCount;
                                                            }
                                                            if ((messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionSetMessagesTTL) && this.messages.size() == 2) {
                                                                i3 = 1;
                                                            }
                                                            if (arrayList2 == null) {
                                                                arrayList2 = new ArrayList<>();
                                                                this.messagesByDays.put(messageObject9.dateKey, arrayList2);
                                                                TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                                                                if (this.chatMode == 1) {
                                                                    int i37 = messageObject9.messageOwner.date;
                                                                    if (i37 == 2147483646) {
                                                                        tLRPC$TL_message.message = LocaleController.getString("MessageScheduledUntilOnline", R.string.MessageScheduledUntilOnline);
                                                                        hashMap = hashMap2;
                                                                        longSparseArray = longSparseArray3;
                                                                        r7 = 0;
                                                                    } else {
                                                                        hashMap = hashMap2;
                                                                        longSparseArray = longSparseArray3;
                                                                        r7 = 0;
                                                                        tLRPC$TL_message.message = LocaleController.formatString("MessageScheduledOn", R.string.MessageScheduledOn, LocaleController.formatDateChat(i37, true));
                                                                    }
                                                                } else {
                                                                    hashMap = hashMap2;
                                                                    longSparseArray = longSparseArray3;
                                                                    r7 = 0;
                                                                    tLRPC$TL_message.message = LocaleController.formatDateChat(messageObject9.messageOwner.date);
                                                                }
                                                                tLRPC$TL_message.id = r7;
                                                                Calendar calendar = Calendar.getInstance();
                                                                calendar.setTimeInMillis(messageObject9.messageOwner.date * 1000);
                                                                calendar.set(11, r7);
                                                                calendar.set(12, r7);
                                                                tLRPC$TL_message.date = (int) (calendar.getTimeInMillis() / 1000);
                                                                MessageObject messageObject14 = new MessageObject(this.currentAccount, tLRPC$TL_message, r7, r7);
                                                                messageObject14.type = 10;
                                                                messageObject14.contentType = 1;
                                                                messageObject14.isDateObject = true;
                                                                int i38 = lastStableId;
                                                                lastStableId = i38 + 1;
                                                                messageObject14.stableId = i38;
                                                                this.messages.add(i3, messageObject14);
                                                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                                                if (chatActivityAdapter4 != null) {
                                                                    chatActivityAdapter4.notifyItemInserted(i3);
                                                                }
                                                            } else {
                                                                hashMap = hashMap2;
                                                                longSparseArray = longSparseArray3;
                                                            }
                                                            if (!(messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionGeoProximityReached) && ((!messageObject9.isOut() || messageObject9.messageOwner.from_scheduled) && this.paused && i3 == 0)) {
                                                                if (!this.scrollToTopUnReadOnResume && (messageObject2 = this.unreadMessageObject) != null) {
                                                                    removeMessageObject(messageObject2);
                                                                    this.unreadMessageObject = null;
                                                                }
                                                                if (this.unreadMessageObject == null) {
                                                                    TLRPC$TL_message tLRPC$TL_message2 = new TLRPC$TL_message();
                                                                    tLRPC$TL_message2.message = "";
                                                                    tLRPC$TL_message2.id = 0;
                                                                    MessageObject messageObject15 = new MessageObject(this.currentAccount, tLRPC$TL_message2, false, false);
                                                                    messageObject15.type = 6;
                                                                    messageObject15.contentType = 2;
                                                                    int i39 = lastStableId;
                                                                    lastStableId = i39 + 1;
                                                                    messageObject15.stableId = i39;
                                                                    this.messages.add(0, messageObject15);
                                                                    ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
                                                                    if (chatActivityAdapter5 != null) {
                                                                        chatActivityAdapter5.notifyItemInserted(0);
                                                                    }
                                                                    this.unreadMessageObject = messageObject15;
                                                                    this.scrollToMessage = messageObject15;
                                                                    this.scrollToMessagePosition = -10000;
                                                                    this.scrollToTopUnReadOnResume = true;
                                                                    arrayList2.add(0, messageObject9);
                                                                    if (this.chatAdapter != null && i3 < this.messages.size()) {
                                                                        messageObject = this.messages.get(i3);
                                                                        if (messageObject.hasValidGroupId() && messageObject.getGroupId() != messageObject9.getGroupId() && (groupedMessages2 = this.groupedMessagesMap.get(messageObject.getGroupId())) != null && groupedMessages2.messages.size() > 1) {
                                                                            this.chatAdapter.notifyItemRangeChanged(1, groupedMessages2.messages.size() - 1);
                                                                        }
                                                                    }
                                                                    int i40 = lastStableId;
                                                                    lastStableId = i40 + 1;
                                                                    messageObject9.stableId = i40;
                                                                    getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                                    this.messages.add(i3, messageObject9);
                                                                    if (i3 == 0 && !messageObject9.isSponsored()) {
                                                                        z18 = true;
                                                                    }
                                                                    arrayList3 = this.notPushedSponsoredMessages;
                                                                    if (arrayList3 != null && arrayList3.contains(messageObject9)) {
                                                                        this.notPushedSponsoredMessages.remove(messageObject9);
                                                                    }
                                                                    chatActivityAdapter = this.chatAdapter;
                                                                    if (chatActivityAdapter != null) {
                                                                        chatActivityAdapter.notifyItemChanged(i3);
                                                                        this.chatAdapter.notifyItemInserted(i3);
                                                                    }
                                                                    if (messageObject9.isOut() && this.waitingForSendingMessageLoad) {
                                                                        this.waitingForSendingMessageLoad = false;
                                                                        if (!this.animatingMessageObjects.contains(messageObject9)) {
                                                                            this.chatActivityEnterView.hideTopView(true);
                                                                        }
                                                                        valueAnimator = this.changeBoundAnimator;
                                                                        if (valueAnimator != null) {
                                                                            valueAnimator.start();
                                                                        }
                                                                    }
                                                                    if ((this.threadMessageId != 0 || this.isTopic) && !messageObject9.isOut() && messageObject9.messageOwner.mentioned && messageObject9.isContentUnread()) {
                                                                        i5 = 1;
                                                                        this.newMentionsCount++;
                                                                    } else {
                                                                        i5 = 1;
                                                                    }
                                                                    if (!z) {
                                                                        this.newUnreadMessageCount += i5;
                                                                    }
                                                                    int i41 = messageObject9.type;
                                                                    z19 = (i41 != 10 || i41 == 11) ? true : true;
                                                                    if (messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionSetChatTheme) {
                                                                        messageObject8 = messageObject9;
                                                                    }
                                                                    longSparseArray3 = longSparseArray;
                                                                    z14 = z18;
                                                                    z15 = z19;
                                                                    z16 = z20;
                                                                    hashMap2 = hashMap;
                                                                    z17 = z5;
                                                                    i29++;
                                                                    arrayList7 = arrayList;
                                                                    str3 = str;
                                                                    clientUserId = j;
                                                                }
                                                            }
                                                            arrayList2.add(0, messageObject9);
                                                            if (this.chatAdapter != null) {
                                                                messageObject = this.messages.get(i3);
                                                                if (messageObject.hasValidGroupId()) {
                                                                    this.chatAdapter.notifyItemRangeChanged(1, groupedMessages2.messages.size() - 1);
                                                                }
                                                            }
                                                            int i402 = lastStableId;
                                                            lastStableId = i402 + 1;
                                                            messageObject9.stableId = i402;
                                                            getMessagesController().getTranslateController().checkTranslation(messageObject9, false);
                                                            this.messages.add(i3, messageObject9);
                                                            if (i3 == 0) {
                                                                z18 = true;
                                                            }
                                                            arrayList3 = this.notPushedSponsoredMessages;
                                                            if (arrayList3 != null) {
                                                                this.notPushedSponsoredMessages.remove(messageObject9);
                                                            }
                                                            chatActivityAdapter = this.chatAdapter;
                                                            if (chatActivityAdapter != null) {
                                                            }
                                                            if (messageObject9.isOut()) {
                                                                this.waitingForSendingMessageLoad = false;
                                                                if (!this.animatingMessageObjects.contains(messageObject9)) {
                                                                }
                                                                valueAnimator = this.changeBoundAnimator;
                                                                if (valueAnimator != null) {
                                                                }
                                                            }
                                                            if (this.threadMessageId != 0) {
                                                            }
                                                            i5 = 1;
                                                            this.newMentionsCount++;
                                                            if (!z) {
                                                            }
                                                            int i412 = messageObject9.type;
                                                            if (i412 != 10) {
                                                            }
                                                            if (messageObject9.messageOwner.action instanceof TLRPC$TL_messageActionSetChatTheme) {
                                                            }
                                                            longSparseArray3 = longSparseArray;
                                                            z14 = z18;
                                                            z15 = z19;
                                                            z16 = z20;
                                                            hashMap2 = hashMap;
                                                            z17 = z5;
                                                            i29++;
                                                            arrayList7 = arrayList;
                                                            str3 = str;
                                                            clientUserId = j;
                                                        }
                                                    }
                                                } else {
                                                    i7 = i3;
                                                    i8 = size2;
                                                }
                                                z5 = z6;
                                                i31++;
                                                i3 = i7;
                                                size2 = i8;
                                                z6 = z5;
                                            }
                                            z5 = z6;
                                            if (i3 != -1) {
                                            }
                                            i3 = this.messages.size();
                                            if (z) {
                                                if (i30 >= 0) {
                                                }
                                            }
                                            if (this.currentEncryptedChat != null) {
                                            }
                                            messageObject9.checkLayout();
                                            if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                                            }
                                        } else {
                                            z5 = z6;
                                            i3 = 0;
                                        }
                                        if (z) {
                                        }
                                        if (this.currentEncryptedChat != null) {
                                        }
                                        messageObject9.checkLayout();
                                        if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                                        }
                                    }
                                }
                                i3 = -1;
                                if (i3 == -1) {
                                }
                                if (z) {
                                }
                                if (this.currentEncryptedChat != null) {
                                }
                                messageObject9.checkLayout();
                                if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatMigrateTo)) {
                                }
                            }
                        }
                    }
                    str = str3;
                    z6 = z17;
                    if (isSecretChat()) {
                    }
                    if (this.chatMode != 1) {
                        messageObject9.setIsRead();
                    }
                    tLRPC$MessageAction = messageObject9.messageOwner.action;
                    chatAvatarContainer = this.avatarContainer;
                    if (chatAvatarContainer != null) {
                        tLRPC$DecryptedMessageAction = tLRPC$MessageAction.encryptedAction;
                        if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                        }
                    }
                    if (messageObject9.type >= 0) {
                    }
                    j = clientUserId;
                    z5 = z6;
                } else {
                    j = clientUserId;
                    str = str3;
                    z5 = z17;
                }
                z14 = z18;
                z15 = z19;
                z16 = z20;
                z17 = z5;
                i29++;
                arrayList7 = arrayList;
                str3 = str;
                clientUserId = j;
            }
            String str4 = str3;
            boolean z21 = z14;
            boolean z22 = z15;
            boolean z23 = z16;
            boolean z24 = z17;
            if (messageObject8 != null && (tLRPC$Message = messageObject8.messageOwner) != null) {
                TLRPC$MessageAction tLRPC$MessageAction5 = tLRPC$Message.action;
                if (tLRPC$MessageAction5 instanceof TLRPC$TL_messageActionSetChatTheme) {
                    setChatThemeEmoticon(((TLRPC$TL_messageActionSetChatTheme) tLRPC$MessageAction5).emoticon);
                }
            }
            if (hashMap2 != null) {
                getMessagesController().reloadWebPages(this.dialog_id, hashMap2, this.chatMode == 1);
            }
            if (longSparseArray3 != null) {
                for (int i42 = 0; i42 < longSparseArray3.size(); i42++) {
                    MessageObject.GroupedMessages groupedMessages5 = (MessageObject.GroupedMessages) longSparseArray3.valueAt(i42);
                    int size3 = groupedMessages5.posArray.size();
                    groupedMessages5.calculate();
                    int size4 = groupedMessages5.posArray.size();
                    if (size4 - size3 > 0 && this.chatAdapter != null) {
                        ArrayList<MessageObject> arrayList13 = this.messages;
                        ArrayList<MessageObject> arrayList14 = groupedMessages5.messages;
                        int indexOf2 = arrayList13.indexOf(arrayList14.get(arrayList14.size() - 1));
                        if (indexOf2 >= 0) {
                            this.chatAdapter.notifyItemRangeChanged(indexOf2, size4);
                        }
                    }
                }
            }
            showProgressView(false);
            ChatActivityAdapter chatActivityAdapter6 = this.chatAdapter;
            if (chatActivityAdapter6 == null) {
                this.scrollToTopOnResume = true;
            }
            if (this.chatListView != null && chatActivityAdapter6 != null) {
                int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                if (findFirstVisibleItemPosition == -1) {
                    findFirstVisibleItemPosition = 0;
                }
                View findViewByPosition = this.chatLayoutManager.findViewByPosition(findFirstVisibleItemPosition);
                int bottom = findViewByPosition != null ? findViewByPosition.getBottom() - this.chatListView.getMeasuredHeight() : 0;
                if (z) {
                    i2 = 1;
                    i2 = 1;
                    if (findViewByPosition != null) {
                        this.chatLayoutManager.scrollToPositionWithOffset(findFirstVisibleItemPosition + 1, getScrollingOffsetForView(findViewByPosition));
                    }
                } else if ((findFirstVisibleItemPosition == 0 && bottom <= AndroidUtilities.dp(5.0f)) || z24) {
                    this.newUnreadMessageCount = 0;
                    if (this.firstLoading) {
                        i2 = 1;
                    } else {
                        i2 = 1;
                        i2 = 1;
                        i2 = 1;
                        if (this.chatMode != 1) {
                            if (this.paused) {
                                this.scrollToTopOnResume = true;
                            } else {
                                this.forceScrollToTop = true;
                                moveScrollToLastMessage(true);
                            }
                        }
                    }
                } else {
                    i2 = 1;
                    int i43 = this.newUnreadMessageCount;
                    if (i43 != 0 && (counterView = this.pagedownButtonCounter) != null && this.prevSetUnreadCount != i43) {
                        this.prevSetUnreadCount = i43;
                        counterView.setCount(i43, true);
                    }
                    this.canShowPagedownButton = true;
                    updatePagedownButtonVisibility(true);
                }
                i = i2;
                if (this.newMentionsCount != 0) {
                    SimpleTextView simpleTextView3 = this.mentiondownButtonCounter;
                    i = i2;
                    if (simpleTextView3 != null) {
                        simpleTextView3.setVisibility(0);
                        SimpleTextView simpleTextView4 = this.mentiondownButtonCounter;
                        Object[] objArr3 = new Object[i2];
                        objArr3[0] = Integer.valueOf(this.newMentionsCount);
                        simpleTextView4.setText(String.format(str4, objArr3));
                        showMentionDownButton(i2, i2);
                        i = i2;
                    }
                }
            } else {
                i = 1;
                this.scrollToTopOnResume = true;
            }
            z2 = z21;
            z3 = z22;
            z4 = z23;
            i11 = i;
        }
        if (this.chatMode != i11 || arrayList.isEmpty()) {
            arrayList4 = arrayList;
        } else {
            arrayList4 = arrayList;
            MessageObject messageObject16 = arrayList4.get(0);
            final int id4 = messageObject16.getId();
            if (id4 < 0) {
                ChatListItemAnimator chatListItemAnimator2 = this.chatListItemAnimator;
                if (chatListItemAnimator2 != null) {
                    chatListItemAnimator2.setShouldAnimateEnterFromBottom(z2);
                }
                if (z2) {
                    moveScrollToLastMessage(false);
                } else {
                    int indexOf3 = this.messages.indexOf(messageObject16);
                    GridLayoutManagerFixed gridLayoutManagerFixed = this.chatLayoutManager;
                    if (gridLayoutManagerFixed != null && indexOf3 > 0 && (gridLayoutManagerFixed.findViewByPosition(this.chatAdapter.messagesStartRow + indexOf3) != null || this.chatLayoutManager.findViewByPosition((this.chatAdapter.messagesStartRow + indexOf3) - 1) != null)) {
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(messageObject16), getScrollOffsetForMessage(messageObject16), false);
                    } else {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda186
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$processNewMessages$140(id4);
                            }
                        });
                    }
                }
            }
        }
        if (!this.messages.isEmpty() && (str2 = this.botUser) != null && str2.length() == 0) {
            this.botUser = null;
            updateBottomOverlay();
        }
        if (z3) {
            updateTitle(false);
            checkAndUpdateAvatar();
        }
        if (z4) {
            z8 = true;
            getMessagesController().loadFullChat(this.currentChat.id, 0, true);
        } else {
            z8 = true;
        }
        checkWaitingForReplies();
        updateReplyMessageHeader(z8);
        if (z || (arrayList5 = this.notPushedSponsoredMessages) == null || arrayList5.isEmpty() || arrayList4 == (arrayList6 = this.notPushedSponsoredMessages)) {
            return;
        }
        processNewMessages(arrayList6);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processNewMessages$140(int i) {
        scrollToMessageId(i, 0, false, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void saveScrollPosition() {
        GridLayoutManagerFixed gridLayoutManagerFixed;
        int indexOf;
        if (this.chatListView == null || (gridLayoutManagerFixed = this.chatLayoutManager) == null || gridLayoutManagerFixed.hasPendingScrollPosition()) {
            return;
        }
        MessageObject messageObject = null;
        int i = 0;
        int i2 = 0;
        while (true) {
            if (i2 >= this.chatListView.getChildCount()) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i2);
            if (childAt instanceof ChatMessageCell) {
                messageObject = ((ChatMessageCell) childAt).getMessageObject();
                i = getScrollingOffsetForView(childAt);
                break;
            } else if (childAt instanceof ChatActionCell) {
                messageObject = ((ChatActionCell) childAt).getMessageObject();
                i = getScrollingOffsetForView(childAt);
                break;
            } else {
                i2++;
            }
        }
        if (messageObject == null || (indexOf = this.messages.indexOf(messageObject)) <= 0) {
            return;
        }
        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + indexOf, i);
    }

    private int getSponsoredMessagesCount() {
        int i = 0;
        while (i < this.messages.size() && this.messages.get(i).isSponsored()) {
            i++;
        }
        return i;
    }

    /* JADX WARN: Code restructure failed: missing block: B:51:0x00c7, code lost:
        if (r9 == r40.groupedMessagesMap.get(r6.getGroupId())) goto L36;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0232  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0262  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0284  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x028c  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02cb  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x02d8  */
    /* JADX WARN: Removed duplicated region for block: B:166:0x034e  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0419  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x041c  */
    /* JADX WARN: Removed duplicated region for block: B:220:0x0497  */
    /* JADX WARN: Removed duplicated region for block: B:224:0x04ac  */
    /* JADX WARN: Removed duplicated region for block: B:241:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0049  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0117  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x0175  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x0181  */
    /* JADX WARN: Type inference failed for: r14v4 */
    /* JADX WARN: Type inference failed for: r14v5, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r14v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processDeletedMessages(ArrayList<Integer> arrayList, long j) {
        char c;
        int size;
        boolean z;
        int i;
        boolean z2;
        int i2;
        LongSparseArray longSparseArray;
        boolean z3;
        boolean z4;
        boolean z5;
        int i3;
        int i4;
        ChatAvatarContainer chatAvatarContainer;
        TLRPC$User tLRPC$User;
        char c2;
        int i5;
        ChatActivityAdapter chatActivityAdapter;
        LongSparseArray longSparseArray2;
        boolean z6;
        boolean z7;
        int i6;
        boolean z8;
        long j2;
        ?? r14;
        int indexOf;
        boolean z9;
        ArrayList<MessageObject> arrayList2;
        int i7;
        INavigationLayout iNavigationLayout;
        int size2;
        int i8;
        ArrayList arrayList3 = new ArrayList();
        if (ChatObject.isChannel(this.currentChat)) {
            if (j != 0 || this.mergeDialogId == 0) {
                if (j != (-this.dialog_id)) {
                    return;
                }
            } else {
                c = 1;
                size = arrayList.size();
                if (this.threadMessageObject != null && !this.isTopic && (iNavigationLayout = this.parentLayout) != null) {
                    size2 = iNavigationLayout.getFragmentStack().size() - 1;
                    for (i8 = 0; i8 < size2; i8++) {
                        BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(i8);
                        if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                            ChatActivity chatActivity = (ChatActivity) baseFragment;
                            if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && getTopicId() == getTopicId() && chatActivity.getChatMode() == getChatMode()) {
                                z = true;
                                break;
                            }
                        }
                    }
                }
                z = false;
                i = 0;
                z2 = false;
                i2 = 0;
                boolean z10 = false;
                boolean z11 = false;
                longSparseArray = null;
                z3 = false;
                z4 = false;
                LongSparseArray longSparseArray3 = null;
                while (i < size) {
                    Integer num = arrayList.get(i);
                    MessageObject messageObject = this.messagesDict[c].get(num.intValue());
                    MessageObject messageObject2 = this.selectedObject;
                    if (messageObject2 == null || messageObject != messageObject2) {
                        if (messageObject == null || (r9 = this.selectedObjectGroup) == null) {
                            z6 = z10;
                            z7 = z11;
                        } else {
                            z6 = z10;
                            z7 = z11;
                        }
                        if (c == 0) {
                            if (this.pinnedMessageObjects.containsKey(num)) {
                                this.pinnedMessageObjects.remove(num);
                                this.pinnedMessageIds.remove(num);
                                this.loadedPinnedMessagesCount = this.pinnedMessageIds.size();
                                int i9 = this.totalPinnedMessagesCount - 1;
                                this.totalPinnedMessagesCount = i9;
                                if (i9 < 0) {
                                    i7 = 0;
                                    this.totalPinnedMessagesCount = 0;
                                } else {
                                    i7 = 0;
                                }
                                if (this.currentPinnedMessageId == num.intValue()) {
                                    this.currentPinnedMessageId = i7;
                                }
                            }
                            this.repliesMessagesDict.remove(num.intValue());
                            updateReplyMessageOwners(num.intValue(), null);
                        }
                        if (messageObject == null) {
                            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                            if (tLRPC$Message.reply_to != null && !(tLRPC$Message.action instanceof TLRPC$TL_messageActionPinMessage)) {
                                int replyAnyMsgId = messageObject.getReplyAnyMsgId();
                                MessageObject messageObject3 = this.threadMessageObject;
                                if (messageObject3 != null && messageObject3.getId() == replyAnyMsgId) {
                                    if (!z && this.threadMessageObject.hasReplies()) {
                                        this.threadMessageObject.messageOwner.replies.replies--;
                                    }
                                    if (this.replyOriginalMessageId != 0) {
                                        i2++;
                                    }
                                    z2 = true;
                                } else {
                                    MessageObject messageObject4 = this.messagesDict[c].get(replyAnyMsgId);
                                    if (messageObject4 != null && messageObject4.hasReplies()) {
                                        r14 = 1;
                                        messageObject4.messageOwner.replies.replies--;
                                        messageObject4.viewsReloaded = false;
                                        messageObject.deleted = r14;
                                        if (this.editingMessageObject == messageObject) {
                                            hideFieldPanel(r14);
                                        }
                                        indexOf = this.messages.indexOf(messageObject);
                                        if (indexOf == -1) {
                                            if (messageObject.scheduled) {
                                                this.scheduledMessagesCount -= r14;
                                                z4 = true;
                                            }
                                            if (this.selectedMessagesIds[c].indexOfKey(num.intValue()) >= 0) {
                                                boolean z12 = i == size + (-1);
                                                addToSelectedMessages(messageObject, false, z12);
                                                z11 = z12;
                                                z10 = true;
                                            } else {
                                                z10 = z6;
                                                z11 = z7;
                                            }
                                            MessageObject remove = this.messages.remove(indexOf);
                                            ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                                            if (chatActivityAdapter2 != null) {
                                                arrayList3.add(Integer.valueOf(chatActivityAdapter2.messagesStartRow + indexOf));
                                            }
                                            j2 = 0;
                                            if (remove.getGroupId() != 0) {
                                                i6 = size;
                                                z8 = z;
                                                MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(remove.getGroupId());
                                                if (groupedMessages != null) {
                                                    if (longSparseArray == null) {
                                                        longSparseArray = new LongSparseArray();
                                                        longSparseArray3 = new LongSparseArray();
                                                    }
                                                    LongSparseArray longSparseArray4 = longSparseArray3;
                                                    longSparseArray.put(groupedMessages.groupId, groupedMessages);
                                                    if (longSparseArray4.get(groupedMessages.groupId) == null) {
                                                        z9 = z2;
                                                        longSparseArray4.put(groupedMessages.groupId, Integer.valueOf(groupedMessages.messages.size()));
                                                    } else {
                                                        z9 = z2;
                                                    }
                                                    groupedMessages.messages.remove(messageObject);
                                                    longSparseArray3 = longSparseArray4;
                                                    this.messagesDict[c].remove(num.intValue());
                                                    arrayList2 = this.messagesByDays.get(messageObject.dateKey);
                                                    if (arrayList2 != null) {
                                                        arrayList2.remove(messageObject);
                                                        if (arrayList2.isEmpty()) {
                                                            this.messagesByDays.remove(messageObject.dateKey);
                                                            if (indexOf < this.messages.size()) {
                                                                this.messages.remove(indexOf);
                                                                ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                                                                if (chatActivityAdapter3 != null) {
                                                                    arrayList3.add(Integer.valueOf(chatActivityAdapter3.messagesStartRow + indexOf));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    z2 = z9;
                                                    z3 = true;
                                                    i++;
                                                    size = i6;
                                                    z = z8;
                                                }
                                            } else {
                                                i6 = size;
                                                z8 = z;
                                            }
                                            z9 = z2;
                                            this.messagesDict[c].remove(num.intValue());
                                            arrayList2 = this.messagesByDays.get(messageObject.dateKey);
                                            if (arrayList2 != null) {
                                            }
                                            z2 = z9;
                                            z3 = true;
                                            i++;
                                            size = i6;
                                            z = z8;
                                        } else {
                                            i6 = size;
                                            z8 = z;
                                        }
                                    }
                                }
                            }
                            r14 = 1;
                            messageObject.deleted = r14;
                            if (this.editingMessageObject == messageObject) {
                            }
                            indexOf = this.messages.indexOf(messageObject);
                            if (indexOf == -1) {
                            }
                        } else {
                            i6 = size;
                            z8 = z;
                        }
                        j2 = 0;
                        z10 = z6;
                        z11 = z7;
                        i++;
                        size = i6;
                        z = z8;
                    } else {
                        z6 = z10;
                        z7 = z11;
                    }
                    closeMenu();
                    if (c == 0) {
                    }
                    if (messageObject == null) {
                    }
                    j2 = 0;
                    z10 = z6;
                    z11 = z7;
                    i++;
                    size = i6;
                    z = z8;
                }
                z5 = z10;
                boolean z13 = z11;
                if (z2) {
                    updateReplyMessageHeader(true);
                }
                if (i2 != 0) {
                    int i10 = -i2;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.changeRepliesCounter, Long.valueOf(this.replyOriginalChat.id), Integer.valueOf(this.replyOriginalMessageId), Integer.valueOf(i10));
                    getMessagesStorage().updateRepliesCount(this.replyOriginalChat.id, this.replyOriginalMessageId, null, 0, i10);
                }
                if (z5) {
                    if (!z13) {
                        addToSelectedMessages(null, false, true);
                    }
                    updateActionModeTitle();
                }
                if (longSparseArray != null) {
                    int i11 = 0;
                    while (i11 < longSparseArray.size()) {
                        MessageObject.GroupedMessages groupedMessages2 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i11);
                        if (this.chatListItemAnimator != null) {
                            if (groupedMessages2.messages.size() == 1) {
                                this.chatListItemAnimator.groupWillTransformToSingleMessage(groupedMessages2);
                            } else {
                                this.chatListItemAnimator.groupWillChanged(groupedMessages2);
                            }
                        }
                        if (groupedMessages2.messages.isEmpty()) {
                            this.groupedMessagesMap.remove(groupedMessages2.groupId);
                        } else {
                            groupedMessages2.calculate();
                            ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                            int indexOf2 = this.messages.indexOf(arrayList4.get(arrayList4.size() - 1));
                            if (indexOf2 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                                int i12 = indexOf2 + chatActivityAdapter.messagesStartRow;
                                long j3 = groupedMessages2.groupId;
                                longSparseArray2 = longSparseArray3;
                                chatActivityAdapter.notifyItemRangeChanged(i12, ((Integer) longSparseArray2.get(j3)).intValue());
                                i11++;
                                longSparseArray3 = longSparseArray2;
                            }
                        }
                        longSparseArray2 = longSparseArray3;
                        i11++;
                        longSparseArray3 = longSparseArray2;
                    }
                }
                if (this.messages.isEmpty()) {
                    i3 = 0;
                } else {
                    if (!this.endReached[0] && !this.loading) {
                        showProgressView(false);
                        RecyclerListView recyclerListView = this.chatListView;
                        if (recyclerListView != null) {
                            recyclerListView.setEmptyView(null);
                        }
                        if (this.currentEncryptedChat == null) {
                            int[] iArr = this.maxMessageId;
                            c2 = 1;
                            iArr[1] = Integer.MAX_VALUE;
                            i5 = 0;
                            iArr[0] = Integer.MAX_VALUE;
                            int[] iArr2 = this.minMessageId;
                            iArr2[1] = Integer.MIN_VALUE;
                            iArr2[0] = Integer.MIN_VALUE;
                        } else {
                            c2 = 1;
                            i5 = 0;
                            int[] iArr3 = this.maxMessageId;
                            iArr3[1] = Integer.MIN_VALUE;
                            iArr3[0] = Integer.MIN_VALUE;
                            int[] iArr4 = this.minMessageId;
                            iArr4[1] = Integer.MAX_VALUE;
                            iArr4[0] = Integer.MAX_VALUE;
                        }
                        int[] iArr5 = this.maxDate;
                        iArr5[c2] = Integer.MIN_VALUE;
                        iArr5[i5] = Integer.MIN_VALUE;
                        int[] iArr6 = this.minDate;
                        iArr6[c2] = i5;
                        iArr6[i5] = i5;
                        this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                        MessagesController messagesController = getMessagesController();
                        long j4 = this.dialog_id;
                        long j5 = this.mergeDialogId;
                        boolean z14 = !this.cacheEndReached[0];
                        int i13 = this.minDate[0];
                        int i14 = this.classGuid;
                        int i15 = this.chatMode;
                        int i16 = this.threadMessageId;
                        int i17 = this.replyMaxReadId;
                        int i18 = this.lastLoadIndex;
                        this.lastLoadIndex = i18 + 1;
                        messagesController.loadMessages(j4, j5, false, 30, 0, 0, z14, i13, i14, 0, 0, i15, i16, i17, i18, this.isTopic);
                        this.loading = true;
                    } else {
                        if (this.botButtons != null) {
                            this.botButtons = null;
                            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                            if (chatActivityEnterView != null) {
                                chatActivityEnterView.setButtons(null, false);
                            }
                        }
                        if (this.currentEncryptedChat == null && (tLRPC$User = this.currentUser) != null && tLRPC$User.bot && this.botUser == null) {
                            this.botUser = "";
                            updateBottomOverlay();
                        }
                    }
                    i3 = 0;
                    this.canShowPagedownButton = false;
                    updatePagedownButtonVisibility(true);
                    showMentionDownButton(false, true);
                }
                if (!z3) {
                    if (this.chatMode == 2 && (chatAvatarContainer = this.avatarContainer) != null) {
                        chatAvatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[i3]));
                    }
                    ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                    if (chatActivityAdapter4 != null) {
                        int i19 = chatActivityAdapter4.loadingUpRow;
                        int i20 = this.chatAdapter.loadingDownRow;
                        int size3 = arrayList3.size();
                        for (int i21 = 0; i21 < size3; i21++) {
                            this.chatAdapter.notifyItemRemoved(((Integer) arrayList3.get(i21)).intValue());
                        }
                        if (!isThreadChat() || this.messages.size() <= 3) {
                            i4 = 0;
                            removeUnreadPlane(false);
                        } else {
                            i4 = 0;
                        }
                        if (this.messages.isEmpty()) {
                            if (i19 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                            if (i20 >= 0) {
                                this.chatAdapter.notifyItemRemoved(i4);
                            }
                        } else {
                            ChatActivityAdapter chatActivityAdapter5 = this.chatAdapter;
                            chatActivityAdapter5.notifyItemRangeChanged(chatActivityAdapter5.messagesStartRow, this.messages.size());
                        }
                    }
                    updateVisibleRows();
                } else if (this.threadMessageId == 0) {
                    this.first_unread_id = 0;
                    this.last_message_id = 0;
                    this.createUnreadMessageAfterId = 0;
                    removeMessageObject(this.unreadMessageObject);
                    this.unreadMessageObject = null;
                }
                if (z4) {
                    return;
                }
                updateScheduledInterface(true);
                return;
            }
        } else if (j != 0) {
            return;
        }
        c = 0;
        size = arrayList.size();
        if (this.threadMessageObject != null) {
            size2 = iNavigationLayout.getFragmentStack().size() - 1;
            while (i8 < size2) {
            }
        }
        z = false;
        i = 0;
        z2 = false;
        i2 = 0;
        boolean z102 = false;
        boolean z112 = false;
        longSparseArray = null;
        z3 = false;
        z4 = false;
        LongSparseArray longSparseArray32 = null;
        while (i < size) {
        }
        z5 = z102;
        boolean z132 = z112;
        if (z2) {
        }
        if (i2 != 0) {
        }
        if (z5) {
        }
        if (longSparseArray != null) {
        }
        if (this.messages.isEmpty()) {
        }
        if (!z3) {
        }
        if (z4) {
        }
    }

    private void replaceMessageObjects(ArrayList<MessageObject> arrayList, int i, boolean z) {
        ChatActivityAdapter chatActivityAdapter;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        int indexOf;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        MessageObject messageObject;
        TLRPC$User tLRPC$User = null;
        LongSparseArray longSparseArray = null;
        int i3 = 0;
        while (i3 < arrayList.size()) {
            MessageObject messageObject2 = arrayList.get(i3);
            if (this.pinnedMessageObjects.get(Integer.valueOf(messageObject2.getId())) != null) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
            }
            MessageObject messageObject3 = this.messagesDict[i].get(messageObject2.getId());
            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject2.getId()))) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject2.getId()), messageObject2);
                if (messageObject2.getId() == this.currentPinnedMessageId) {
                    updatePinnedMessageView(true);
                }
            }
            if (i == 0 && this.repliesMessagesDict.indexOfKey(messageObject2.getId()) >= 0) {
                this.repliesMessagesDict.put(messageObject2.getId(), messageObject2);
            }
            if (messageObject3 != null && (!z || messageObject3.messageOwner.date == messageObject2.messageOwner.date)) {
                if (z) {
                    arrayList.remove(i3);
                    i3--;
                }
                addToPolls(messageObject2, messageObject3);
                if (messageObject2.type >= 0) {
                    MessageObject messageObject4 = messageObject3.replyMessageObject;
                    if (messageObject4 != null) {
                        messageObject2.replyMessageObject = messageObject4;
                        TLRPC$MessageAction tLRPC$MessageAction = messageObject2.messageOwner.action;
                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore) {
                            messageObject2.generateGameMessageText(tLRPC$User);
                        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) {
                            messageObject2.generatePaymentSentMessageText(tLRPC$User);
                        }
                    }
                    if (!messageObject3.isEditing()) {
                        if (messageObject3.getFileName().equals(messageObject2.getFileName())) {
                            messageObject2.messageOwner.attachPath = messageObject3.messageOwner.attachPath;
                            messageObject2.attachPathExists = messageObject3.attachPathExists;
                            messageObject2.mediaExists = messageObject3.mediaExists;
                        } else {
                            messageObject2.checkMediaExistance();
                        }
                    }
                    this.messagesDict[i].put(messageObject3.getId(), messageObject2);
                } else {
                    this.messagesDict[i].remove(messageObject3.getId());
                }
                int indexOf2 = this.messages.indexOf(messageObject3);
                if (indexOf2 >= 0) {
                    ArrayList<MessageObject> arrayList3 = this.messagesByDays.get(messageObject3.dateKey);
                    int indexOf3 = arrayList3 != null ? arrayList3.indexOf(messageObject3) : -1;
                    if (messageObject3.getGroupId() != 0 && (groupedMessages = this.groupedMessagesMap.get(messageObject3.getGroupId())) != null && (indexOf = groupedMessages.messages.indexOf(messageObject3)) >= 0) {
                        if (messageObject3.getGroupId() != messageObject2.getGroupId()) {
                            this.groupedMessagesMap.put(messageObject2.getGroupId(), groupedMessages);
                        }
                        if (!messageObject2.isMusic() && !messageObject2.isDocument() && ((arrayList2 = messageObject2.photoThumbs) == null || arrayList2.isEmpty())) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                            if (indexOf <= 0 || indexOf >= groupedMessages.messages.size() - 1) {
                                messageObject = messageObject3;
                            } else {
                                MessageObject.GroupedMessages groupedMessages2 = new MessageObject.GroupedMessages();
                                messageObject = messageObject3;
                                groupedMessages2.groupId = Utilities.random.nextLong();
                                ArrayList<MessageObject> arrayList4 = groupedMessages2.messages;
                                ArrayList<MessageObject> arrayList5 = groupedMessages.messages;
                                int i4 = indexOf + 1;
                                arrayList4.addAll(arrayList5.subList(i4, arrayList5.size()));
                                for (int i5 = 0; i5 < groupedMessages2.messages.size(); i5++) {
                                    groupedMessages2.messages.get(i5).localGroupId = groupedMessages2.groupId;
                                    groupedMessages.messages.remove(i4);
                                }
                                longSparseArray.put(groupedMessages2.groupId, groupedMessages2);
                                this.groupedMessagesMap.put(groupedMessages2.groupId, groupedMessages2);
                            }
                            groupedMessages.messages.remove(indexOf);
                            messageObject3 = messageObject;
                        } else {
                            groupedMessages.messages.set(indexOf, messageObject2);
                            messageObject3 = messageObject3;
                            MessageObject.GroupedMessagePosition remove = groupedMessages.positions.remove(messageObject3);
                            if (remove != null) {
                                groupedMessages.positions.put(messageObject2, remove);
                            }
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(groupedMessages.groupId, groupedMessages);
                        }
                    }
                    if (messageObject2.type >= 0) {
                        messageObject2.copyStableParams(messageObject3);
                        this.messages.set(indexOf2, messageObject2);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        if (chatActivityAdapter2 != null) {
                            chatActivityAdapter2.updateRowAtPosition(chatActivityAdapter2.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.set(indexOf3, messageObject2);
                        }
                    } else {
                        this.messages.remove(indexOf2);
                        ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                        if (chatActivityAdapter3 != null) {
                            chatActivityAdapter3.notifyItemRemoved(chatActivityAdapter3.messagesStartRow + indexOf2);
                        }
                        if (indexOf3 >= 0) {
                            arrayList3.remove(indexOf3);
                            if (arrayList3.isEmpty()) {
                                this.messagesByDays.remove(messageObject3.dateKey);
                                this.messages.remove(indexOf2);
                                int i6 = this.chatAdapter.loadingUpRow;
                                int i7 = this.chatAdapter.loadingDownRow;
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                chatActivityAdapter4.notifyItemRemoved(chatActivityAdapter4.messagesStartRow + indexOf2);
                                if (this.messages.isEmpty()) {
                                    if (i6 >= 0) {
                                        i2 = 0;
                                        this.chatAdapter.notifyItemRemoved(0);
                                    } else {
                                        i2 = 0;
                                    }
                                    if (i7 >= 0) {
                                        this.chatAdapter.notifyItemRemoved(i2);
                                    }
                                    updateReplyMessageOwners(messageObject3.getId(), messageObject2);
                                }
                            }
                        }
                    }
                }
                updateReplyMessageOwners(messageObject3.getId(), messageObject2);
            }
            i3++;
            tLRPC$User = null;
        }
        if (longSparseArray != null) {
            for (int i8 = 0; i8 < longSparseArray.size(); i8++) {
                MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages) longSparseArray.valueAt(i8);
                if (groupedMessages3.messages.isEmpty()) {
                    this.groupedMessagesMap.remove(groupedMessages3.groupId);
                } else {
                    groupedMessages3.calculate();
                    ArrayList<MessageObject> arrayList6 = groupedMessages3.messages;
                    int indexOf4 = this.messages.indexOf(arrayList6.get(arrayList6.size() - 1));
                    if (indexOf4 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                        chatActivityAdapter.notifyItemRangeChanged(indexOf4 + chatActivityAdapter.messagesStartRow, groupedMessages3.messages.size());
                        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                        if (chatListItemAnimator != null) {
                            chatListItemAnimator.groupWillChanged(groupedMessages3);
                        }
                    }
                }
            }
        }
        updatePinnedTopicStarterMessage();
    }

    private void migrateToNewChat(final MessageObject messageObject) {
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null) {
            return;
        }
        final long j = messageObject.messageOwner.action.channel_id;
        final BaseFragment baseFragment = iNavigationLayout.getFragmentStack().size() > 0 ? this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) : null;
        int indexOf = this.parentLayout.getFragmentStack().indexOf(this);
        final INavigationLayout iNavigationLayout2 = this.parentLayout;
        if (indexOf > 0 && !(baseFragment instanceof ChatActivity) && !(baseFragment instanceof ProfileActivity) && this.currentChat.creator) {
            int size = iNavigationLayout2.getFragmentStack().size() - 1;
            while (indexOf < size) {
                BaseFragment baseFragment2 = iNavigationLayout2.getFragmentStack().get(indexOf);
                if (baseFragment2 instanceof ChatActivity) {
                    Bundle bundle = new Bundle();
                    bundle.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ChatActivity(bundle), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ProfileActivity) {
                    Bundle bundle2 = new Bundle();
                    bundle2.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ProfileActivity(bundle2), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatEditActivity) {
                    Bundle bundle3 = new Bundle();
                    bundle3.putLong("chat_id", j);
                    iNavigationLayout2.addFragmentToStack(new ChatEditActivity(bundle3), indexOf);
                    baseFragment2.removeSelfFromStack();
                } else if (baseFragment2 instanceof ChatUsersActivity) {
                    if (!((ChatUsersActivity) baseFragment2).hasSelectType()) {
                        Bundle arguments = baseFragment2.getArguments();
                        arguments.putLong("chat_id", j);
                        iNavigationLayout2.addFragmentToStack(new ChatUsersActivity(arguments), indexOf);
                    }
                    baseFragment2.removeSelfFromStack();
                }
                indexOf++;
            }
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda223
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$migrateToNewChat$141(baseFragment, messageObject, iNavigationLayout2);
                }
            });
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda196
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$migrateToNewChat$142(j);
            }
        }, 1000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$141(BaseFragment baseFragment, MessageObject messageObject, INavigationLayout iNavigationLayout) {
        if (baseFragment instanceof NotificationCenter.NotificationCenterDelegate) {
            getNotificationCenter().removeObserver((NotificationCenter.NotificationCenterDelegate) baseFragment, NotificationCenter.closeChats);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.closeChats, new Object[0]);
        Bundle bundle = new Bundle();
        bundle.putLong("chat_id", messageObject.messageOwner.action.channel_id);
        iNavigationLayout.addFragmentToStack(new ChatActivity(bundle), iNavigationLayout.getFragmentStack().size() - 1);
        baseFragment.finishFragment();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateToNewChat$142(long j) {
        getMessagesController().loadFullChat(j, 0, true);
    }

    private void addToPolls(MessageObject messageObject, MessageObject messageObject2) {
        long pollId = messageObject.getPollId();
        if (pollId != 0) {
            ArrayList<MessageObject> arrayList = this.polls.get(pollId);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                this.polls.put(pollId, arrayList);
            }
            arrayList.add(messageObject);
            if (messageObject2 != null) {
                arrayList.remove(messageObject2);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showInfoHint(MessageObject messageObject, CharSequence charSequence, final int i) {
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, charSequence, 9999).setDuration(Math.max(4000, Math.min(((charSequence == null ? 0 : charSequence.length()) / 50) * 1600, 10000))).setOnHideListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showInfoHint$143(i);
            }
        }).show(true);
        this.hintMessageObject = messageObject;
        this.hintMessageType = i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showInfoHint$143(int i) {
        ChatMessageCell chatMessageCell;
        MessageObject messageObject;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if ((childAt instanceof ChatMessageCell) && (messageObject = (chatMessageCell = (ChatMessageCell) childAt).getMessageObject()) != null && messageObject.equals(this.hintMessageObject)) {
                    chatMessageCell.showHintButton(true, true, i);
                }
            }
        }
        this.hintMessageObject = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showPollSolution(MessageObject messageObject, TLRPC$PollResults tLRPC$PollResults) {
        CharSequence charSequence;
        if (tLRPC$PollResults == null || TextUtils.isEmpty(tLRPC$PollResults.solution)) {
            return;
        }
        if (!tLRPC$PollResults.solution_entities.isEmpty()) {
            charSequence = new SpannableStringBuilder(tLRPC$PollResults.solution);
            MessageObject.addEntitiesToText(charSequence, tLRPC$PollResults.solution_entities, false, true, true, false);
        } else {
            charSequence = tLRPC$PollResults.solution;
        }
        showInfoHint(messageObject, charSequence, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSearchButtons(int i, int i2, int i3) {
        ImageView imageView = this.searchUpButton;
        if (imageView != null) {
            imageView.setEnabled((i & 1) != 0);
            ImageView imageView2 = this.searchUpButton;
            imageView2.setAlpha(imageView2.isEnabled() ? 1.0f : 0.5f);
        }
        ImageView imageView3 = this.searchDownButton;
        if (imageView3 != null) {
            imageView3.setEnabled((i & 2) != 0);
            ImageView imageView4 = this.searchDownButton;
            imageView4.setAlpha(imageView4.isEnabled() ? 1.0f : 0.5f);
        }
        SearchCounterView searchCounterView = this.searchCountText;
        if (searchCounterView != null) {
            if (i3 < 0) {
                searchCounterView.setCount("", 0, false);
            } else if (i3 == 0) {
                searchCounterView.setCount(LocaleController.getString("NoResult", R.string.NoResult), 0, false);
            } else {
                int i4 = i2 + 1;
                searchCounterView.setCount(LocaleController.formatString("OfCounted", R.string.OfCounted, Integer.valueOf(i4), Integer.valueOf(i3)), i4, true);
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean needDelayOpenAnimation() {
        if (this.chatMode != 1 && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if ((baseFragment instanceof ChatActivity) && ((ChatActivity) baseFragment).isKeyboardVisible()) {
                return false;
            }
        }
        return this.firstLoading;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyVisible() {
        this.isFullyVisible = true;
        super.onBecomeFullyVisible();
        if (this.showCloseChatDialogLater) {
            showDialog(this.closeChatDialog);
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout == null || iNavigationLayout.getDrawerLayoutContainer() == null) {
            return;
        }
        this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyHidden() {
        if (!getMessagesController().premiumLocked && !getMessagesController().didPressTranscribeButtonEnough() && !getUserConfig().isPremium() && this.messages != null) {
            for (int i = 0; i < this.messages.size(); i++) {
                MessageObject messageObject = this.messages.get(i);
                if (messageObject != null && !messageObject.isOutOwner() && ((messageObject.isVoice() || messageObject.isRoundVideo()) && !messageObject.isUnread() && (messageObject.isContentUnread() || ChatObject.isChannelAndNotMegaGroup(this.currentChat)))) {
                    TranscribeButton.showOffTranscribe(messageObject, false);
                }
            }
        }
        this.isFullyVisible = false;
        hideUndoViews();
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
        }
        TranscribeButton.resetVideoTranscriptionsOpen();
        Browser.Progress progress = this.progressDialogCurrent;
        if (progress != null) {
            progress.cancel();
            this.progressDialogCurrent = null;
        }
        this.flagSecure.detach();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveKeyboardPositionBeforeTransition() {
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && this.contentView != null && chatActivityEnterView.getAdjustPanLayoutHelper() != null && !this.chatActivityEnterView.getAdjustPanLayoutHelper().animationInProgress()) {
            this.fixedKeyboardHeight = this.contentView.getKeyboardHeight();
        } else {
            this.fixedKeyboardHeight = -1;
        }
    }

    public void removeKeyboardPositionBeforeTransition() {
        if (this.fixedKeyboardHeight > 0) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda132
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$removeKeyboardPositionBeforeTransition$144();
                }
            };
            this.cancelFixedPositionRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, 200L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeKeyboardPositionBeforeTransition$144() {
        this.cancelFixedPositionRunnable = null;
        this.fixedKeyboardHeight = -1;
        View view = this.fragmentView;
        if (view != null) {
            view.requestLayout();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationStart(boolean z, boolean z2) {
        int[] iArr;
        super.onTransitionAnimationStart(z, z2);
        System.currentTimeMillis();
        if (z) {
            if (!this.fragmentOpened) {
                this.fragmentOpened = true;
                updateMessagesVisiblePart(false);
            }
            iArr = this.transitionAnimationIndex == 0 ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.messagesDidLoad} : new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog};
            this.openAnimationEnded = false;
            if (!z2) {
                this.openAnimationStartTime = SystemClock.elapsedRealtime();
            }
        } else {
            iArr = UserObject.isUserSelf(this.currentUser) ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.mediaDidLoad} : null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.onBeginHide();
            }
        }
        checkShowBlur(true);
        this.transitionAnimationIndex = getNotificationCenter().setAnimationInProgress(this.transitionAnimationIndex, iArr);
    }

    /* JADX WARN: Removed duplicated region for block: B:93:0x019e  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onTransitionAnimationEnd(boolean z, boolean z2) {
        String string;
        MessageObject messageObject;
        INavigationLayout iNavigationLayout;
        Bulletin bulletin;
        super.onTransitionAnimationEnd(z, z2);
        if (z && z2 && this.showPinBulletin && (bulletin = this.pinBulletin) != null) {
            bulletin.show();
            this.showPinBulletin = false;
        }
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        this.fixedKeyboardHeight = -1;
        if (z) {
            checkShowBlur(false);
            this.openAnimationEnded = true;
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
            checkGroupCallJoin(this.lastCallCheckFromServer);
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                TLRPC$Chat tLRPC$Chat = this.currentChat;
                boolean z3 = (tLRPC$Chat == null || !ChatObject.isChannel(tLRPC$Chat) || this.currentChat.megagroup) ? false : true;
                SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                String str = z3 ? "needShowRoundHintChannel2" : "needShowRoundHint2";
                int i = globalMainSettings.getInt(str, 0);
                if (i < 3 && Utilities.random.nextFloat() <= 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    globalMainSettings.edit().putInt(str, i + 1).commit();
                }
            }
            if (!z2 && (iNavigationLayout = this.parentLayout) != null && this.needRemovePreviousSameChatActivity) {
                int size = iNavigationLayout.getFragmentStack().size() - 1;
                int i2 = 0;
                while (true) {
                    if (i2 >= size) {
                        break;
                    }
                    BaseFragment baseFragment = this.parentLayout.getFragmentStack().get(i2);
                    if (baseFragment != this && (baseFragment instanceof ChatActivity)) {
                        ChatActivity chatActivity = (ChatActivity) baseFragment;
                        if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && chatActivity.getTopicId() == getTopicId() && chatActivity.getChatMode() == getChatMode() && chatActivity.threadMessageId == this.threadMessageId && chatActivity.reportType == this.reportType) {
                            baseFragment.removeSelfFromStack();
                            break;
                        }
                    }
                    i2++;
                }
            }
            showScheduledOrNoSoundHint();
            if (!z2 && this.firstOpen) {
                if (this.chatActivityEnterView != null && (messageObject = this.threadMessageObject) != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat) && !this.isTopic) {
                    this.chatActivityEnterView.setFieldFocused();
                    this.chatActivityEnterView.openKeyboard();
                }
                if (getMessagesController().isPromoDialog(this.dialog_id, true)) {
                    int i3 = getMessagesController().promoDialogType;
                    SharedPreferences globalNotificationsSettings = MessagesController.getGlobalNotificationsSettings();
                    if (i3 == MessagesController.PROMO_TYPE_PROXY) {
                        if (AndroidUtilities.getPrefIntOrLong(globalNotificationsSettings, "proxychannel", 0L) != this.dialog_id) {
                            string = LocaleController.getString("UseProxySponsorInfo", R.string.UseProxySponsorInfo);
                            if (!TextUtils.isEmpty(string)) {
                                checkTopUndoView();
                                if (this.topUndoView != null) {
                                    if (i3 == MessagesController.PROMO_TYPE_PROXY) {
                                        globalNotificationsSettings.edit().putLong("proxychannel", this.dialog_id).commit();
                                    } else if (i3 == MessagesController.PROMO_TYPE_PSA) {
                                        String str2 = getMessagesController().promoPsaType;
                                        globalNotificationsSettings.edit().putBoolean(str2 + "_shown", true).commit();
                                    }
                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                                    MessageObject.addLinks(false, spannableStringBuilder);
                                    this.topUndoView.showWithAction(0L, 18, spannableStringBuilder, null, null);
                                }
                            }
                        }
                        string = null;
                        if (!TextUtils.isEmpty(string)) {
                        }
                    } else {
                        if (i3 == MessagesController.PROMO_TYPE_PSA) {
                            String str3 = getMessagesController().promoPsaType;
                            if (!globalNotificationsSettings.getBoolean(str3 + "_shown", false)) {
                                string = LocaleController.getString("PsaInfo_" + str3);
                                if (TextUtils.isEmpty(string)) {
                                    string = LocaleController.getString("PsaInfoDefault", R.string.PsaInfoDefault);
                                }
                                if (!TextUtils.isEmpty(string)) {
                                }
                            }
                        }
                        string = null;
                        if (!TextUtils.isEmpty(string)) {
                        }
                    }
                }
                this.firstOpen = false;
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            if (chatActivityMemberRequestsDelegate != null && z2) {
                chatActivityMemberRequestsDelegate.onBackToScreen();
            }
            updateMessagesVisiblePart(false);
        } else {
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            NotificationCenter.getGlobalInstance().onAnimationFinish(this.transitionAnimationGlobalIndex);
        }
        this.contentView.invalidate();
        if (TextUtils.isEmpty(this.attachMenuBotToOpen)) {
            return;
        }
        openAttachBotLayout(this.attachMenuBotToOpen);
        this.attachMenuBotToOpen = null;
    }

    public void openAttachBotLayout(String str) {
        TLRPC$TL_contacts_resolveUsername tLRPC$TL_contacts_resolveUsername = new TLRPC$TL_contacts_resolveUsername();
        tLRPC$TL_contacts_resolveUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_resolveUsername, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda254
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$152(tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$152(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda213
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$151(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$151(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            if (tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                return;
            }
            final TLRPC$User tLRPC$User = tLRPC$TL_contacts_resolvedPeer.users.get(0);
            if (tLRPC$User.bot && tLRPC$User.bot_attach_menu) {
                TLRPC$TL_messages_getAttachMenuBot tLRPC$TL_messages_getAttachMenuBot = new TLRPC$TL_messages_getAttachMenuBot();
                tLRPC$TL_messages_getAttachMenuBot.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.id);
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_getAttachMenuBot, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda265
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$openAttachBotLayout$150(tLRPC$User, tLObject2, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$150(final TLRPC$User tLRPC$User, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda216
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$149(tLObject, tLRPC$User);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$149(TLObject tLObject, final TLRPC$User tLRPC$User) {
        if (tLObject instanceof TLRPC$TL_attachMenuBotsBot) {
            TLRPC$TL_attachMenuBotsBot tLRPC$TL_attachMenuBotsBot = (TLRPC$TL_attachMenuBotsBot) tLObject;
            MessagesController.getInstance(this.currentAccount).putUsers(tLRPC$TL_attachMenuBotsBot.users, false);
            TLRPC$TL_attachMenuBot tLRPC$TL_attachMenuBot = tLRPC$TL_attachMenuBotsBot.bot;
            if (!MediaDataController.canShowAttachMenuBot(tLRPC$TL_attachMenuBot, getCurrentUser() != null ? getCurrentUser() : getCurrentChat())) {
                TLRPC$User tLRPC$User2 = this.currentUser;
                if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.id == tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.BotCantOpenAttachMenuSameBot)).show();
                } else if (tLRPC$User2 != null && tLRPC$User2.bot && tLRPC$User.id != tLRPC$TL_attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.BotCantOpenAttachMenuBot)).show();
                } else if (tLRPC$User2 != null && !tLRPC$User2.bot) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.BotCantOpenAttachMenuUser)).show();
                } else {
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    if (tLRPC$Chat != null && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)) {
                        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.BotCantOpenAttachMenuGroup)).show();
                        return;
                    }
                    TLRPC$Chat tLRPC$Chat2 = this.currentChat;
                    if (tLRPC$Chat2 == null || !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat2)) {
                        return;
                    }
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.BotCantOpenAttachMenuChannel)).show();
                }
            } else if (!tLRPC$TL_attachMenuBot.inactive) {
                openAttachBotLayout(tLRPC$User.id, this.attachMenuBotStartCommand);
            } else {
                AttachBotIntroTopView attachBotIntroTopView = new AttachBotIntroTopView(getParentActivity());
                attachBotIntroTopView.setColor(Theme.getColor(Theme.key_chat_attachIcon));
                attachBotIntroTopView.setBackgroundColor(Theme.getColor(Theme.key_dialogTopBackground));
                attachBotIntroTopView.setAttachBot(tLRPC$TL_attachMenuBot);
                final AtomicBoolean atomicBoolean = new AtomicBoolean();
                AlertDialog.Builder negativeButton = new AlertDialog.Builder(getParentActivity()).setTopView(attachBotIntroTopView).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotRequestAttachPermission", R.string.BotRequestAttachPermission, UserObject.getUserName(tLRPC$User)))).setPositiveButton(LocaleController.getString(R.string.BotAddToMenu), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda43
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.lambda$openAttachBotLayout$147(tLRPC$User, atomicBoolean, dialogInterface, i);
                    }
                }).setNegativeButton(LocaleController.getString(R.string.Cancel), null);
                if (tLRPC$TL_attachMenuBot.request_write_access) {
                    atomicBoolean.set(true);
                    final CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 5, getResourceProvider());
                    checkBoxCell.setPadding(0, AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f));
                    checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
                    checkBoxCell.setMultiline(true);
                    checkBoxCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, UserObject.getUserName(tLRPC$User))), "", true, false);
                    checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                    checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda60
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.lambda$openAttachBotLayout$148(CheckBoxCell.this, atomicBoolean, view);
                        }
                    });
                    negativeButton.setCustomViewOffset(6);
                    negativeButton.setView(checkBoxCell);
                }
                negativeButton.show();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$147(final TLRPC$User tLRPC$User, AtomicBoolean atomicBoolean, DialogInterface dialogInterface, int i) {
        TLRPC$TL_messages_toggleBotInAttachMenu tLRPC$TL_messages_toggleBotInAttachMenu = new TLRPC$TL_messages_toggleBotInAttachMenu();
        tLRPC$TL_messages_toggleBotInAttachMenu.bot = MessagesController.getInstance(this.currentAccount).getInputUser(tLRPC$User.id);
        tLRPC$TL_messages_toggleBotInAttachMenu.enabled = true;
        tLRPC$TL_messages_toggleBotInAttachMenu.write_allowed = atomicBoolean.get();
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_toggleBotInAttachMenu, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda264
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openAttachBotLayout$146(tLRPC$User, tLObject, tLRPC$TL_error);
            }
        }, 66);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$146(final TLRPC$User tLRPC$User, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda220
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openAttachBotLayout$145(tLRPC$TL_error, tLRPC$User);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openAttachBotLayout$145(TLRPC$TL_error tLRPC$TL_error, TLRPC$User tLRPC$User) {
        if (tLRPC$TL_error == null) {
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(tLRPC$User.id, this.attachMenuBotStartCommand);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openAttachBotLayout$148(CheckBoxCell checkBoxCell, AtomicBoolean atomicBoolean, View view) {
        boolean z = !checkBoxCell.isChecked();
        checkBoxCell.setChecked(z, true);
        atomicBoolean.set(z);
    }

    public void openAttachBotLayout(long j, String str) {
        openAttachMenu();
        createChatAttachView();
        this.chatAttachAlert.showBotLayout(j, str);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onDialogDismiss(Dialog dialog) {
        Dialog dialog2 = this.closeChatDialog;
        if (dialog2 == null || dialog != dialog2) {
            return;
        }
        getMessagesController().deleteDialog(this.dialog_id, 0);
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && !iNavigationLayout.getFragmentStack().isEmpty() && this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) != this) {
            removeSelfFromStack();
            this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1).finishFragment();
            return;
        }
        finishFragment();
    }

    /* JADX WARN: Code restructure failed: missing block: B:14:0x0031, code lost:
        if (r4.findItem(16908321) != null) goto L9;
     */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean extendActionMode(Menu menu) {
        if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
            if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
                return true;
            }
        } else {
            if (this.chatActivityEnterView.getSelectionLength() != 0) {
            }
            return true;
        }
        fillActionModeMenu(menu, this.currentEncryptedChat);
        return true;
    }

    public static void fillActionModeMenu(Menu menu, TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        int i = R.id.menu_bold;
        if (menu.findItem(i) != null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        int i2 = R.id.menu_groupbolditalic;
        menu.add(i2, R.id.menu_spoiler, 6, LocaleController.getString("Spoiler", R.string.Spoiler));
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
        spannableStringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, spannableStringBuilder.length(), 33);
        menu.add(i2, i, 7, spannableStringBuilder);
        SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
        spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        menu.add(i2, R.id.menu_italic, 8, spannableStringBuilder2);
        SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
        spannableStringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        int i3 = 10;
        menu.add(i2, R.id.menu_mono, 9, spannableStringBuilder3);
        if (tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101) {
            SpannableStringBuilder spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
            TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
            textStyleRun.flags |= 8;
            spannableStringBuilder4.setSpan(new TextStyleSpan(textStyleRun), 0, spannableStringBuilder4.length(), 33);
            menu.add(i2, R.id.menu_strike, 10, spannableStringBuilder4);
            SpannableStringBuilder spannableStringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
            textStyleRun2.flags |= 16;
            spannableStringBuilder5.setSpan(new TextStyleSpan(textStyleRun2), 0, spannableStringBuilder5.length(), 33);
            i3 = 12;
            menu.add(i2, R.id.menu_underline, 11, spannableStringBuilder5);
        }
        menu.add(i2, R.id.menu_link, i3, LocaleController.getString("CreateLink", R.string.CreateLink));
        menu.add(i2, R.id.menu_regular, i3 + 1, LocaleController.getString("Regular", R.string.Regular));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateScheduledInterface(boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateScheduleButton(z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:90:0x021a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateBottomOverlay() {
        int i;
        boolean z;
        boolean z2;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        if (this.bottomOverlayChatText == null || (i = this.chatMode) == 1) {
            return;
        }
        boolean z3 = this.bottomOverlayChatWaitsReply;
        this.bottomOverlayChatWaitsReply = false;
        if (this.reportType >= 0) {
            updateActionModeTitle();
        } else if (i == 2) {
            TLRPC$Chat tLRPC$Chat2 = this.currentChat;
            if (tLRPC$Chat2 != null) {
                z2 = ChatObject.canPinMessages(tLRPC$Chat2);
            } else {
                TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                z2 = tLRPC$UserFull != null ? tLRPC$UserFull.can_pin_message : false;
            }
            if (z2) {
                this.bottomOverlayChatText.setTag(1);
                this.bottomOverlayChatText.setText(LocaleController.getString("UnpinAllMessages", R.string.UnpinAllMessages));
            } else {
                this.bottomOverlayChatText.setTag(null);
                this.bottomOverlayChatText.setText(LocaleController.getString("HidePinnedMessages", R.string.HidePinnedMessages));
            }
            showBottomOverlayProgress(false, false);
        } else if (this.currentChat != null) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            long j = notificationsSettings.getLong("dialog_join_requested_time_" + this.dialog_id, -1L);
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC$Chat tLRPC$Chat3 = this.currentChat;
                if (!(tLRPC$Chat3 instanceof TLRPC$TL_channelForbidden)) {
                    if (ChatObject.isNotInChat(tLRPC$Chat3) && (ChatObject.isForum(this.currentChat) || !isThreadChat() || this.currentChat.join_to_send)) {
                        if (getMessagesController().isJoiningChannel(this.currentChat.id)) {
                            showBottomOverlayProgress(true, false);
                        } else {
                            if (this.currentChat.join_request) {
                                if (j > 0 && System.currentTimeMillis() - j < 120000) {
                                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequestSent", R.string.ChannelJoinRequestSent), true);
                                    this.bottomOverlayChatText.setEnabled(false);
                                } else {
                                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequest", R.string.ChannelJoinRequest));
                                    this.bottomOverlayChatText.setEnabled(true);
                                }
                                z = true;
                            } else {
                                this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                                this.bottomOverlayChatText.setEnabled(true);
                                z = false;
                            }
                            showBottomOverlayProgress(false, false);
                            if (!z && j > 0) {
                                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                                edit.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                            }
                        }
                    } else if (ChatObject.isForum(this.currentChat) && !this.isTopic && (this.replyingMessageObject == null || z3)) {
                        this.bottomOverlayChatWaitsReply = true;
                        showBottomOverlayProgress(false, false);
                        this.bottomOverlayChatText.setTextInfo(LocaleController.getString("ForumReplyToMessagesInTopic", R.string.ForumReplyToMessagesInTopic));
                        this.bottomOverlayChatText.setEnabled(false);
                    } else if (!isThreadChat()) {
                        if (!getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
                            this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
                            this.bottomOverlayChatText.setEnabled(true);
                        } else {
                            this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
                            this.bottomOverlayChatText.setEnabled(true);
                        }
                        showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                    } else {
                        TLRPC$TL_forumTopic tLRPC$TL_forumTopic2 = this.forumTopic;
                        if (tLRPC$TL_forumTopic2 != null && tLRPC$TL_forumTopic2.closed) {
                            if (!ChatObject.canManageTopic(this.currentAccount, this.currentChat, tLRPC$TL_forumTopic2)) {
                                Drawable mutate = getContext().getResources().getDrawable(R.drawable.msg_mini_lock2).mutate();
                                mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_windowBackgroundWhiteGrayText), PorterDuff.Mode.MULTIPLY));
                                this.bottomOverlayChatText.setTextInfo(mutate, LocaleController.getString("TopicClosedByAdmin", R.string.TopicClosedByAdmin));
                                this.bottomOverlayChatText.setEnabled(false);
                            }
                            showBottomOverlayProgress(false, false);
                        }
                    }
                    z = false;
                    if (!z) {
                        SharedPreferences.Editor edit2 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                        edit2.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                    }
                }
            }
            if (ChatObject.isForum(this.currentChat) && !this.isTopic && (this.replyingMessageObject == null || z3)) {
                this.bottomOverlayChatWaitsReply = true;
                showBottomOverlayProgress(false, false);
                this.bottomOverlayChatText.setTextInfo(LocaleController.getString("ForumReplyToMessagesInTopic", R.string.ForumReplyToMessagesInTopic));
                this.bottomOverlayChatText.setEnabled(false);
            } else if (!isThreadChat()) {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
                this.bottomOverlayChatText.setEnabled(true);
            }
            z = false;
            if (!z) {
            }
        } else {
            showBottomOverlayProgress(false, true);
            if (this.userBlocked) {
                TextView textView = this.bottomOverlayStartButton;
                if (textView != null) {
                    textView.setVisibility(8);
                }
                if (this.currentUser.bot) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", R.string.BotUnblock));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
                }
                if (this.botButtons != null) {
                    this.botButtons = null;
                    if (this.chatActivityEnterView != null) {
                        MessageObject messageObject = this.replyingMessageObject;
                        if (messageObject != null && this.botReplyButtons == messageObject) {
                            this.botReplyButtons = null;
                            hideFieldPanel(false);
                        }
                        this.chatActivityEnterView.setButtons(this.botButtons, false);
                    }
                }
            } else if (UserObject.isReplyUser(this.currentUser)) {
                if (!getMessagesController().isDialogMuted(this.dialog_id, getTopicId())) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
                }
                showBottomOverlayProgress(false, true);
            } else if (this.botUser != null && this.currentUser.bot) {
                TextView textView2 = this.bottomOverlayStartButton;
                if (textView2 != null) {
                    textView2.setVisibility(0);
                }
                this.bottomOverlayChatText.setVisibility(8);
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
                if (!this.messages.isEmpty() && this.currentUser != null && this.botUser.length() != 0) {
                    this.sentBotStart = true;
                }
            } else {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
            }
        }
        TLRPC$Chat tLRPC$Chat4 = this.currentChat;
        if (tLRPC$Chat4 != null && tLRPC$Chat4.gigagroup && this.reportType < 0 && this.chatMode == 0) {
            this.bottomOverlayImage.setVisibility(0);
        } else {
            this.bottomOverlayImage.setVisibility(4);
        }
        if (this.inPreviewMode) {
            BlurredFrameLayout blurredFrameLayout = this.searchContainer;
            if (blurredFrameLayout != null) {
                blurredFrameLayout.setVisibility(4);
            }
            this.bottomOverlayChat.setVisibility(4);
            this.chatActivityEnterView.setFieldFocused(false);
            this.chatActivityEnterView.setVisibility(4);
        } else if (this.searchItem != null && this.searchItemVisible) {
            createSearchContainer();
            BlurredFrameLayout blurredFrameLayout2 = this.searchContainer;
            if (blurredFrameLayout2 == null) {
                return;
            }
            blurredFrameLayout2.animate().setListener(null).cancel();
            if (this.searchContainer.getVisibility() != 0) {
                this.searchContainer.setVisibility(0);
                this.searchContainer.setAlpha(0.0f);
            }
            this.searchContainer.animate().alpha(1.0f).setDuration(150L).setListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.ChatActivity.89
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    super.onAnimationEnd(animator);
                }
            }).start();
            ValueAnimator valueAnimator = this.searchExpandAnimator;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            float f = this.searchExpandProgress;
            if (f != 1.0f) {
                ValueAnimator ofFloat = ValueAnimator.ofFloat(f, 1.0f);
                this.searchExpandAnimator = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda4
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.this.lambda$updateBottomOverlay$153(valueAnimator2);
                    }
                });
                this.searchExpandAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.90
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.searchExpandProgress = 1.0f;
                        ChatActivity.this.chatActivityEnterView.setVisibility(4);
                        ChatActivity.this.bottomOverlayChat.setVisibility(4);
                        ChatActivity.this.invalidateChatListViewTopPadding();
                    }
                });
                this.searchExpandAnimator.setDuration(250L);
                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                this.searchExpandAnimator.start();
            } else {
                this.chatActivityEnterView.setVisibility(4);
                this.bottomOverlayChat.setVisibility(4);
                invalidateChatListViewTopPadding();
            }
            this.chatActivityEnterView.setFieldFocused(false);
            if (this.chatActivityEnterView.isTopViewVisible()) {
                this.topViewWasVisible = 1;
                this.chatActivityEnterView.hideTopView(false);
            } else {
                this.topViewWasVisible = 2;
            }
        } else {
            BlurredFrameLayout blurredFrameLayout3 = this.searchContainer;
            if (blurredFrameLayout3 != null) {
                blurredFrameLayout3.animate().setListener(null).cancel();
                if (this.searchContainer.getVisibility() == 0) {
                    this.searchContainer.animate().alpha(0.0f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.91
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            ChatActivity.this.searchContainer.setVisibility(4);
                        }
                    }).start();
                }
            }
            this.chatActivityEnterView.setVisibility(0);
            ValueAnimator valueAnimator2 = this.searchExpandAnimator;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            float f2 = this.searchExpandProgress;
            if (f2 != 0.0f) {
                this.searchExpandAnimator = ValueAnimator.ofFloat(f2, 0.0f);
                invalidateChatListViewTopPadding();
                this.searchExpandAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.lambda$updateBottomOverlay$154(valueAnimator3);
                    }
                });
                this.searchExpandAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.92
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        ChatActivity.this.searchExpandProgress = 0.0f;
                        ChatActivity.this.invalidateChatListViewTopPadding();
                    }
                });
                this.searchExpandAnimator.setDuration(250L);
                this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                this.searchExpandAnimator.start();
            }
            if (this.muteItem != null) {
                TLRPC$Chat tLRPC$Chat5 = this.currentChat;
                if (tLRPC$Chat5 != null && ChatObject.isNotInChat(tLRPC$Chat5)) {
                    this.muteItem.setVisibility(8);
                    this.muteItemGap.setVisibility(8);
                } else {
                    this.muteItem.setVisibility(0);
                    this.muteItemGap.setVisibility(0);
                }
            }
            if (this.reportType >= 0) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else if (this.chatMode == 2 || (((tLRPC$Chat = this.currentChat) != null && (((ChatObject.isNotInChat(tLRPC$Chat) || !ChatObject.canWriteToChat(this.currentChat)) && (this.currentChat.join_to_send || !isThreadChat() || ChatObject.isForum(this.currentChat))) || (((tLRPC$TL_forumTopic = this.forumTopic) != null && tLRPC$TL_forumTopic.closed && !ChatObject.canManageTopic(this.currentAccount, this.currentChat, tLRPC$TL_forumTopic)) || (this.currentChat.forum && !this.isTopic && this.replyingMessageObject == null)))) || ((tLRPC$User = this.currentUser) != null && (UserObject.isDeleted(tLRPC$User) || this.userBlocked || UserObject.isReplyUser(this.currentUser))))) {
                if (this.chatActivityEnterView.isEditingMessage()) {
                    this.chatActivityEnterView.setVisibility(0);
                    AndroidUtilities.updateViewShow(this.bottomOverlayChat, false, false, true);
                    this.bottomOverlayChat.setVisibility(4);
                    this.chatActivityEnterView.setFieldFocused();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda147
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.lambda$updateBottomOverlay$155();
                        }
                    }, 100L);
                } else {
                    this.bottomOverlayChat.setVisibility(0);
                    AndroidUtilities.updateViewShow(this.bottomOverlayChat, true, false, true);
                    this.chatActivityEnterView.setFieldFocused(false);
                    this.chatActivityEnterView.setVisibility(4);
                    this.chatActivityEnterView.closeKeyboard();
                    SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
                    if (suggestEmojiView != null) {
                        suggestEmojiView.forceClose();
                    }
                }
                ActionBarMenu.LazyItem lazyItem = this.attachItem;
                if (lazyItem != null) {
                    lazyItem.setVisibility(8);
                }
                ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
                if (lazyItem2 != null) {
                    lazyItem2.setVisibility(8);
                }
                ActionBarMenuItem actionBarMenuItem = this.headerItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(0);
                }
            } else if (this.botUser != null && this.currentUser.bot) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else {
                this.bottomOverlayChat.setVisibility(4);
                this.chatActivityEnterView.setVisibility(0);
            }
            if (this.topViewWasVisible == 1) {
                this.chatActivityEnterView.showTopView(false, false);
                this.topViewWasVisible = 0;
            }
        }
        if (this.sentBotStart) {
            getMessagesController().sendBotStart(this.currentUser, this.botUser);
            this.bottomOverlayChat.setVisibility(8);
            this.chatActivityEnterView.setVisibility(0);
            this.chatActivityEnterView.setBotInfo(this.botInfo);
        }
        checkRaiseSensors();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$153(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$154(ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f)));
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBottomOverlay$155() {
        this.chatActivityEnterView.openKeyboard();
    }

    public void updateReplyMessageHeader(boolean z) {
        String string;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && this.threadMessageId != 0) {
            if (this.isTopic) {
                updateTopicHeader();
            } else if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
                }
            } else {
                chatAvatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        }
        if (this.replyMessageHeaderObject == null) {
            return;
        }
        if (this.threadMessageObject.getRepliesCount() == 0) {
            if (this.isComments) {
                string = LocaleController.getString("NoComments", R.string.NoComments);
            } else {
                string = LocaleController.getString("NoReplies", R.string.NoReplies);
            }
        } else {
            string = LocaleController.getString("DiscussionStarted", R.string.DiscussionStarted);
        }
        MessageObject messageObject = this.replyMessageHeaderObject;
        messageObject.messageOwner.message = string;
        messageObject.messageText = string;
        if (z) {
            this.chatAdapter.updateRowWithMessageObject(messageObject, true, false);
        }
    }

    private void updateTopicHeader() {
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && (tLRPC$TL_forumTopic = this.forumTopic) != null) {
            chatAvatarContainer.setTitle(tLRPC$TL_forumTopic.title);
        }
        updateTopicTitleIcon();
    }

    private void createAlertView() {
        if (this.alertView != null || getContext() == null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(getContext());
        this.alertView = frameLayout;
        frameLayout.setTag(1);
        this.alertView.setVisibility(8);
        this.alertView.setBackgroundResource(R.drawable.blockpanel);
        this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY));
        int i = 9;
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout != null) {
            ViewParent parent = blurredFrameLayout.getParent();
            ChatActivityFragmentView chatActivityFragmentView = this.contentView;
            if (parent == chatActivityFragmentView) {
                i = Math.max(9, chatActivityFragmentView.indexOfChild(this.topChatPanelView) + 1);
            }
        }
        BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
        if (blurredFrameLayout2 != null) {
            ViewParent parent2 = blurredFrameLayout2.getParent();
            ChatActivityFragmentView chatActivityFragmentView2 = this.contentView;
            if (parent2 == chatActivityFragmentView2) {
                i = Math.max(i, chatActivityFragmentView2.indexOfChild(this.pinnedMessageView) + 1);
            }
        }
        this.contentView.addView(this.alertView, i, LayoutHelper.createFrame(-1, 50, 51));
        TextView textView = new TextView(getContext());
        this.alertNameTextView = textView;
        textView.setTextSize(1, 14.0f);
        this.alertNameTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelTitle));
        this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        this.alertNameTextView.setSingleLine(true);
        this.alertNameTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertNameTextView.setMaxLines(1);
        this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
        TextView textView2 = new TextView(getContext());
        this.alertTextView = textView2;
        textView2.setTextSize(1, 14.0f);
        this.alertTextView.setTextColor(getThemedColor(Theme.key_chat_topPanelMessage));
        this.alertTextView.setSingleLine(true);
        this.alertTextView.setEllipsize(TextUtils.TruncateAt.END);
        this.alertTextView.setMaxLines(1);
        this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
    }

    public void showAlert(String str, String str2) {
        createAlertView();
        FrameLayout frameLayout = this.alertView;
        if (frameLayout == null || str == null || str2 == null) {
            return;
        }
        if (frameLayout.getTag() != null) {
            this.alertView.setTag(null);
            AnimatorSet animatorSet = this.alertViewAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.alertViewAnimator = null;
            }
            if (this.alertView.getVisibility() != 0) {
                this.alertViewEnterProgress = 0.0f;
                invalidateChatListViewTopPadding();
            }
            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.alertViewEnterProgress, 1.0f);
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda14
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$showAlert$156(valueAnimator);
                }
            });
            this.alertViewAnimator.playTogether(ofFloat);
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.93
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewEnterProgress = 1.0f;
                    ChatActivity.this.invalidateChatListViewTopPadding();
                    ChatActivity.this.alertViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.alertViewAnimator = null;
                }
            });
            this.alertViewAnimator.start();
        }
        this.alertNameTextView.setText(str);
        this.alertTextView.setText(Emoji.replaceEmoji(str2.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
        Runnable runnable = this.hideAlertViewRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        94 r5 = new 94();
        this.hideAlertViewRunnable = r5;
        AndroidUtilities.runOnUIThread(r5, 3000L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showAlert$156(ValueAnimator valueAnimator) {
        this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 94 implements Runnable {
        94() {
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                ChatActivity.this.alertView.setTag(1);
                if (ChatActivity.this.alertViewAnimator != null) {
                    ChatActivity.this.alertViewAnimator.cancel();
                    ChatActivity.this.alertViewAnimator = null;
                }
                ChatActivity.this.alertViewAnimator = new AnimatorSet();
                ValueAnimator ofFloat = ValueAnimator.ofFloat(ChatActivity.this.alertViewEnterProgress, 0.0f);
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$94$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.94.this.lambda$run$0(valueAnimator);
                    }
                });
                ChatActivity.this.alertViewAnimator.playTogether(ofFloat);
                ChatActivity.this.alertViewAnimator.setDuration(200L);
                ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.94.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertView.setVisibility(8);
                        ChatActivity.this.alertViewEnterProgress = 0.0f;
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        ChatActivity.this.alertViewAnimator = null;
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animator) {
                        if (ChatActivity.this.alertViewAnimator == null || !ChatActivity.this.alertViewAnimator.equals(animator)) {
                            return;
                        }
                        ChatActivity.this.alertViewAnimator = null;
                    }
                });
                ChatActivity.this.alertViewAnimator.start();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(ValueAnimator valueAnimator) {
            ChatActivity.this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    private boolean hidePinnedMessageView(boolean z) {
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout == null || blurredFrameLayout.getTag() != null) {
            return false;
        }
        int i = 0;
        while (true) {
            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
            if (i >= animatorSetArr.length) {
                break;
            }
            if (animatorSetArr[i] != null) {
                animatorSetArr[i].cancel();
                this.pinnedNextAnimation[i] = null;
            }
            i++;
        }
        this.setPinnedTextTranslationX = false;
        this.pinnedMessageView.setTag(1);
        AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.pinnedMessageViewAnimator = null;
        }
        if (z) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, -AndroidUtilities.dp(50.0f));
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda11
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.lambda$hidePinnedMessageView$157(valueAnimator);
                }
            });
            this.pinnedMessageViewAnimator.playTogether(ofFloat);
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.95
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    if (ChatActivity.this.pinnedMessageView != null) {
                        ChatActivity.this.pinnedMessageView.setVisibility(8);
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animator) {
                    if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                        return;
                    }
                    ChatActivity.this.pinnedMessageViewAnimator = null;
                }
            });
            this.pinnedMessageViewAnimator.start();
        } else {
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.chatListView.invalidate();
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hidePinnedMessageView$157(ValueAnimator valueAnimator) {
        this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePinnedMessageView(boolean z) {
        lambda$updateMessagesVisiblePart$112(z, 0);
    }

    private void updatePinnedListButton(boolean z) {
        if ((!isThreadChat() || this.isTopic) && this.pinnedListButton != null) {
            boolean z2 = !this.fragmentOpened ? false : z;
            boolean z3 = this.pinnedMessageIds.size() > 1 && !this.pinnedMessageButtonShown;
            boolean z4 = this.pinnedListButton.getTag() != null;
            boolean z5 = this.pinnedProgress.getTag() != null;
            boolean z6 = this.closePinned.getTag() != null;
            final boolean z7 = (z3 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            final boolean z8 = (!z3 || this.pinnedProgressIsShowing || this.pinnedMessageButtonShown) ? false : true;
            final boolean z9 = this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
            if (z4 != z3 || z5 != z9 || z6 != z7) {
                AnimatorSet animatorSet = this.pinnedListAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.pinnedListAnimator = null;
                }
                if (z2) {
                    if (z3) {
                        this.pinnedListButton.setVisibility(0);
                    } else if (z7) {
                        this.closePinned.setVisibility(0);
                    }
                    if (z9) {
                        this.pinnedProgress.setVisibility(0);
                        this.pinnedProgress.setAlpha(0.0f);
                        this.pinnedProgress.setScaleX(0.4f);
                        this.pinnedProgress.setScaleY(0.4f);
                    }
                    AnimatorSet animatorSet2 = new AnimatorSet();
                    this.pinnedListAnimator = animatorSet2;
                    Animator[] animatorArr = new Animator[9];
                    ImageView imageView = this.pinnedListButton;
                    Property property = View.ALPHA;
                    float[] fArr = new float[1];
                    fArr[0] = z8 ? 1.0f : 0.0f;
                    animatorArr[0] = ObjectAnimator.ofFloat(imageView, property, fArr);
                    ImageView imageView2 = this.pinnedListButton;
                    Property property2 = View.SCALE_X;
                    float[] fArr2 = new float[1];
                    fArr2[0] = z8 ? 1.0f : 0.4f;
                    animatorArr[1] = ObjectAnimator.ofFloat(imageView2, property2, fArr2);
                    ImageView imageView3 = this.pinnedListButton;
                    Property property3 = View.SCALE_Y;
                    float[] fArr3 = new float[1];
                    fArr3[0] = z8 ? 1.0f : 0.4f;
                    animatorArr[2] = ObjectAnimator.ofFloat(imageView3, property3, fArr3);
                    ImageView imageView4 = this.closePinned;
                    Property property4 = View.ALPHA;
                    float[] fArr4 = new float[1];
                    fArr4[0] = z7 ? 1.0f : 0.0f;
                    animatorArr[3] = ObjectAnimator.ofFloat(imageView4, property4, fArr4);
                    ImageView imageView5 = this.closePinned;
                    Property property5 = View.SCALE_X;
                    float[] fArr5 = new float[1];
                    fArr5[0] = z7 ? 1.0f : 0.4f;
                    animatorArr[4] = ObjectAnimator.ofFloat(imageView5, property5, fArr5);
                    ImageView imageView6 = this.closePinned;
                    Property property6 = View.SCALE_Y;
                    float[] fArr6 = new float[1];
                    fArr6[0] = z7 ? 1.0f : 0.4f;
                    animatorArr[5] = ObjectAnimator.ofFloat(imageView6, property6, fArr6);
                    RadialProgressView radialProgressView = this.pinnedProgress;
                    Property property7 = View.ALPHA;
                    float[] fArr7 = new float[1];
                    fArr7[0] = !z9 ? 0.0f : 1.0f;
                    animatorArr[6] = ObjectAnimator.ofFloat(radialProgressView, property7, fArr7);
                    RadialProgressView radialProgressView2 = this.pinnedProgress;
                    Property property8 = View.SCALE_X;
                    float[] fArr8 = new float[1];
                    fArr8[0] = !z9 ? 0.4f : 1.0f;
                    animatorArr[7] = ObjectAnimator.ofFloat(radialProgressView2, property8, fArr8);
                    RadialProgressView radialProgressView3 = this.pinnedProgress;
                    Property property9 = View.SCALE_Y;
                    float[] fArr9 = new float[1];
                    fArr9[0] = !z9 ? 0.4f : 1.0f;
                    animatorArr[8] = ObjectAnimator.ofFloat(radialProgressView3, property9, fArr9);
                    animatorSet2.playTogether(animatorArr);
                    this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                    this.pinnedListAnimator.setDuration(360L);
                    this.pinnedListAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.96
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            ChatActivity.this.pinnedListAnimator = null;
                            ChatActivity.this.closePinned.setVisibility(z7 ? 0 : 4);
                            ChatActivity.this.pinnedListButton.setVisibility(z8 ? 0 : 4);
                            ChatActivity.this.pinnedProgress.setVisibility(z9 ? 0 : 4);
                        }
                    });
                    this.pinnedListAnimator.start();
                } else {
                    this.closePinned.setAlpha(z7 ? 1.0f : 0.0f);
                    this.closePinned.setScaleX(z7 ? 1.0f : 0.4f);
                    this.closePinned.setScaleY(z7 ? 1.0f : 0.4f);
                    this.closePinned.setVisibility(z7 ? 0 : 4);
                    this.pinnedListButton.setAlpha(z8 ? 1.0f : 0.0f);
                    this.pinnedListButton.setScaleX(z8 ? 1.0f : 0.4f);
                    this.pinnedListButton.setScaleY(z8 ? 1.0f : 0.4f);
                    this.pinnedListButton.setVisibility(z8 ? 0 : 4);
                    this.pinnedProgress.setAlpha(z9 ? 1.0f : 0.0f);
                    this.pinnedProgress.setScaleX(z9 ? 1.0f : 0.4f);
                    this.pinnedProgress.setScaleY(z9 ? 1.0f : 0.4f);
                    this.pinnedProgress.setVisibility(z9 ? 0 : 8);
                }
                this.closePinned.setTag(z7 ? 1 : null);
                this.pinnedListButton.setTag(z3 ? 1 : null);
                this.pinnedProgress.setTag(z9 ? 1 : null);
            }
            if (this.pinnedLineView != null) {
                if (isThreadChat() && !this.isTopic) {
                    this.pinnedLineView.set(0, 1, false);
                } else {
                    this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator$-CC.reverseOrder()), this.pinnedMessageIds.size(), z2);
                }
            }
        }
    }

    private TLRPC$KeyboardButton pinnedButton(MessageObject messageObject) {
        TLRPC$Message tLRPC$Message;
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup;
        ArrayList<TLRPC$TL_keyboardButtonRow> arrayList;
        if (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$ReplyMarkup = tLRPC$Message.reply_markup) == null || (arrayList = tLRPC$ReplyMarkup.rows) == null || arrayList.size() != 1 || messageObject.messageOwner.reply_markup.rows.get(0) == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons == null || messageObject.messageOwner.reply_markup.rows.get(0).buttons.size() != 1) {
            return null;
        }
        return messageObject.messageOwner.reply_markup.rows.get(0).buttons.get(0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:41:0x00a7, code lost:
        if (r9.pinnedMessageIds.get(0).intValue() != r5.getInt("pin_" + r9.dialog_id, 0)) goto L30;
     */
    /* JADX WARN: Removed duplicated region for block: B:175:0x03df  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x03e1  */
    /* JADX WARN: Removed duplicated region for block: B:227:0x04ea  */
    /* JADX WARN: Removed duplicated region for block: B:228:0x04f7  */
    /* JADX WARN: Removed duplicated region for block: B:248:0x054e  */
    /* JADX WARN: Removed duplicated region for block: B:268:0x059f  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x05b7  */
    /* JADX WARN: Removed duplicated region for block: B:298:0x0676  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0063  */
    /* JADX WARN: Removed duplicated region for block: B:303:0x068b  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0065  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0072  */
    /* JADX WARN: Removed duplicated region for block: B:415:0x0c0d  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x0c67  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0c72  */
    /* JADX WARN: Removed duplicated region for block: B:438:0x0d25  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00ad  */
    /* JADX WARN: Removed duplicated region for block: B:465:0x0dd4  */
    /* JADX WARN: Removed duplicated region for block: B:471:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00c5  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00c9  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00d0 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00d1  */
    /* renamed from: updatePinnedMessageView */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateMessagesVisiblePart$112(boolean z, int i) {
        final MessageObject messageObject;
        int i2;
        ActionBar actionBar;
        BlurredFrameLayout blurredFrameLayout;
        char c;
        boolean hidePinnedMessageView;
        PinnedMessageButton pinnedMessageButton;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        int i3;
        FrameLayout.LayoutParams layoutParams;
        FrameLayout.LayoutParams layoutParams2;
        FrameLayout.LayoutParams layoutParams3;
        FrameLayout.LayoutParams layoutParams4;
        boolean z2;
        int i4;
        int[] iArr;
        boolean z3;
        TLRPC$Message tLRPC$Message;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        int i5;
        CharSequence charSequence;
        boolean z4;
        CharSequence replaceEmoji;
        int i6;
        float f;
        int i7;
        int i8;
        float f2;
        float f3;
        final boolean z5;
        char c2;
        float f4;
        boolean z6;
        char c3;
        boolean z7;
        char c4;
        final BackupImageView backupImageView;
        char c5;
        float f5;
        BackupImageView backupImageView2;
        char c6;
        float f6;
        char c7;
        float f7;
        char c8;
        float f8;
        TLRPC$Chat chat;
        TLRPC$User user;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Peer tLRPC$Peer;
        TLRPC$PhotoSize closestPhotoSizeWithSize;
        int i9;
        final ChatActivity chatActivity = this;
        if (chatActivity.currentEncryptedChat != null || chatActivity.chatMode != 0) {
            return;
        }
        if (!isThreadChat() || !chatActivity.threadMessageVisible) {
            if (isThreadChat() && !chatActivity.isTopic) {
                if (!chatActivity.threadMessageVisible) {
                    messageObject = chatActivity.threadMessageObject;
                    i2 = chatActivity.threadMessageId;
                    final TLRPC$KeyboardButton pinnedButton = chatActivity.pinnedButton(messageObject);
                    chatActivity.pinnedMessageButtonShown = pinnedButton != null;
                    SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(chatActivity.currentAccount);
                    if (chatActivity.threadMessageObject == null) {
                    }
                    if (chatActivity.reportType < 0) {
                        if (chatActivity.pinnedMessageView != null) {
                        }
                        blurredFrameLayout = chatActivity.pinnedMessageView;
                        if (blurredFrameLayout != null) {
                        }
                    }
                    hidePinnedMessageView = hidePinnedMessageView(z);
                    if (hidePinnedMessageView) {
                    }
                }
            } else if (chatActivity.currentPinnedMessageId != 0 && !chatActivity.pinnedMessageIds.isEmpty()) {
                messageObject = chatActivity.pinnedMessageObjects.get(Integer.valueOf(chatActivity.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = chatActivity.messagesDict[0].get(chatActivity.currentPinnedMessageId);
                }
                i2 = chatActivity.currentPinnedMessageId;
                final TLRPC$KeyboardButton pinnedButton2 = chatActivity.pinnedButton(messageObject);
                chatActivity.pinnedMessageButtonShown = pinnedButton2 != null;
                SharedPreferences notificationsSettings2 = MessagesController.getNotificationsSettings(chatActivity.currentAccount);
                if (chatActivity.threadMessageObject == null) {
                    if ((chatActivity.chatInfo != null || chatActivity.userInfo != null) && i2 != 0) {
                        if (!chatActivity.pinnedMessageIds.isEmpty()) {
                        }
                    }
                    hidePinnedMessageView = hidePinnedMessageView(z);
                    if (hidePinnedMessageView) {
                        checkListViewPaddings();
                        return;
                    }
                    return;
                }
                if (chatActivity.reportType < 0 && ((actionBar = chatActivity.actionBar) == null || (!actionBar.isActionModeShowed() && !chatActivity.actionBar.isSearchFieldVisible()))) {
                    if (chatActivity.pinnedMessageView != null) {
                        createPinnedMessageView();
                    } else {
                        updatePinnedListButton(z);
                    }
                    blurredFrameLayout = chatActivity.pinnedMessageView;
                    if (blurredFrameLayout != null) {
                        return;
                    }
                    if (messageObject != null) {
                        if (blurredFrameLayout == null || blurredFrameLayout.getTag() == null) {
                            hidePinnedMessageView = false;
                        } else {
                            chatActivity.pinnedMessageView.setTag(null);
                            AnimatorSet animatorSet = chatActivity.pinnedMessageViewAnimator;
                            if (animatorSet != null) {
                                animatorSet.cancel();
                                chatActivity.pinnedMessageViewAnimator = null;
                            }
                            if (z) {
                                ValueAnimator ofFloat = ValueAnimator.ofFloat(chatActivity.pinnedMessageEnterOffset, 0.0f);
                                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity.97
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        ChatActivity.this.pinnedMessageEnterOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                                        ChatActivity.this.invalidateChatListViewTopPadding();
                                        ChatActivity.this.invalidateMessagesVisiblePart();
                                    }
                                });
                                chatActivity.pinnedMessageView.setVisibility(0);
                                AnimatorSet animatorSet2 = new AnimatorSet();
                                chatActivity.pinnedMessageViewAnimator = animatorSet2;
                                animatorSet2.playTogether(ofFloat);
                                chatActivity.pinnedMessageViewAnimator.setDuration(200L);
                                chatActivity.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.98
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                                            return;
                                        }
                                        ChatActivity.this.pinnedMessageViewAnimator = null;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationCancel(Animator animator) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator == null || !ChatActivity.this.pinnedMessageViewAnimator.equals(animator)) {
                                            return;
                                        }
                                        ChatActivity.this.pinnedMessageViewAnimator = null;
                                    }
                                });
                                chatActivity.pinnedMessageViewAnimator.start();
                            } else {
                                chatActivity.pinnedMessageEnterOffset = 0.0f;
                                invalidateChatListViewTopPadding();
                                invalidateMessagesVisiblePart();
                                chatActivity.pinnedMessageView.setVisibility(0);
                            }
                            hidePinnedMessageView = true;
                        }
                        int i10 = 0;
                        while (true) {
                            AnimatorSet[] animatorSetArr = chatActivity.pinnedNextAnimation;
                            if (i10 >= animatorSetArr.length) {
                                break;
                            }
                            if (animatorSetArr[i10] != null) {
                                animatorSetArr[i10].cancel();
                                chatActivity.pinnedNextAnimation[i10] = null;
                            }
                            i10++;
                        }
                        chatActivity.setPinnedTextTranslationX = false;
                        final TrackingWidthSimpleTextView trackingWidthSimpleTextView = chatActivity.pinnedNameTextView[i != 0 ? (char) 1 : (char) 0];
                        final SimpleTextView simpleTextView = chatActivity.pinnedMessageTextView[i != 0 ? (char) 1 : (char) 0];
                        final PinnedMessageButton pinnedMessageButton2 = chatActivity.pinnedMessageButton[i != 0 ? (char) 1 : (char) 0];
                        pinnedMessageButton2.setVisibility(pinnedButton2 != null ? 0 : 8);
                        chatActivity.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnClickListener(null);
                        chatActivity.pinnedMessageButton[i != 0 ? (char) 0 : (char) 1].setOnLongClickListener(null);
                        if (pinnedButton2 == null) {
                            pinnedMessageButton2.setText((CharSequence) null);
                            pinnedMessageButton2.setOnClickListener(null);
                        } else {
                            SpannableString spannableString = new SpannableString(pinnedButton2.text);
                            Emoji.replaceEmoji(spannableString, pinnedMessageButton2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
                            pinnedMessageButton2.setText(spannableString);
                            pinnedMessageButton2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda101
                                @Override // android.view.View.OnClickListener
                                public final void onClick(View view) {
                                    ChatActivity.this.lambda$updatePinnedMessageView$158(pinnedButton2, messageObject, view);
                                }
                            });
                            pinnedMessageButton2.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda113
                                @Override // android.view.View.OnLongClickListener
                                public final boolean onLongClick(View view) {
                                    boolean lambda$updatePinnedMessageView$159;
                                    lambda$updatePinnedMessageView$159 = ChatActivity.this.lambda$updatePinnedMessageView$159(pinnedButton2, messageObject, pinnedMessageButton2, view);
                                    return lambda$updatePinnedMessageView$159;
                                }
                            });
                        }
                        pinnedMessageButton2.measure(View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(28.0f), 1073741824));
                        if (simpleTextView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                            ((ViewGroup.MarginLayoutParams) simpleTextView.getLayoutParams()).rightMargin = pinnedButton2 == null ? AndroidUtilities.dp(44.0f) : pinnedMessageButton2.getMeasuredWidth() + AndroidUtilities.dp(22.0f);
                        }
                        if (trackingWidthSimpleTextView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
                            ((ViewGroup.MarginLayoutParams) trackingWidthSimpleTextView.getLayoutParams()).rightMargin = pinnedButton2 == null ? AndroidUtilities.dp(44.0f) : pinnedMessageButton2.getMeasuredWidth() + AndroidUtilities.dp(22.0f);
                        }
                        FrameLayout.LayoutParams layoutParams5 = (FrameLayout.LayoutParams) chatActivity.pinnedNameTextView[0].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams6 = (FrameLayout.LayoutParams) chatActivity.pinnedNameTextView[1].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams7 = (FrameLayout.LayoutParams) chatActivity.pinnedCounterTextView.getLayoutParams();
                        FrameLayout.LayoutParams layoutParams8 = (FrameLayout.LayoutParams) chatActivity.pinnedMessageTextView[0].getLayoutParams();
                        FrameLayout.LayoutParams layoutParams9 = (FrameLayout.LayoutParams) chatActivity.pinnedMessageTextView[1].getLayoutParams();
                        TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(320.0f));
                        TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs2, AndroidUtilities.dp(40.0f));
                        TLObject tLObject = messageObject.photoThumbsObject2;
                        if (closestPhotoSizeWithSize2 == null) {
                            if (messageObject.mediaExists) {
                                closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                                if (closestPhotoSizeWithSize != null) {
                                    closestPhotoSizeWithSize2 = closestPhotoSizeWithSize;
                                    i9 = closestPhotoSizeWithSize.size;
                                    int i11 = i9;
                                    TLRPC$PhotoSize closestPhotoSizeWithSize4 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                                    tLObject = messageObject.photoThumbsObject;
                                    pinnedMessageButton = pinnedMessageButton2;
                                    tLRPC$PhotoSize = closestPhotoSizeWithSize4;
                                    i3 = i11;
                                }
                            } else {
                                closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(320.0f));
                            }
                            closestPhotoSizeWithSize2 = closestPhotoSizeWithSize;
                            i9 = 0;
                            int i112 = i9;
                            TLRPC$PhotoSize closestPhotoSizeWithSize42 = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                            tLObject = messageObject.photoThumbsObject;
                            pinnedMessageButton = pinnedMessageButton2;
                            tLRPC$PhotoSize = closestPhotoSizeWithSize42;
                            i3 = i112;
                        } else {
                            pinnedMessageButton = pinnedMessageButton2;
                            tLRPC$PhotoSize = closestPhotoSizeWithSize3;
                            i3 = 0;
                        }
                        if (closestPhotoSizeWithSize2 == tLRPC$PhotoSize) {
                            tLRPC$PhotoSize = null;
                        }
                        int i12 = layoutParams5.leftMargin;
                        boolean z8 = closestPhotoSizeWithSize2 == null || (closestPhotoSizeWithSize2 instanceof TLRPC$TL_photoSizeEmpty) || (closestPhotoSizeWithSize2.location instanceof TLRPC$TL_fileLocationUnavailable) || messageObject.isAnyKindOfSticker() || messageObject.isSecretMedia();
                        if (z8) {
                            chatActivity.pinnedImageLocation = null;
                            chatActivity.pinnedImageLocationObject = null;
                            chatActivity.pinnedImageHasBlur = false;
                            if (i == 0) {
                                chatActivity.pinnedMessageImageView[0].setImageBitmap(null);
                                chatActivity.pinnedMessageImageView[0].setVisibility(4);
                            }
                            int dp = AndroidUtilities.dp(18.0f);
                            layoutParams9.leftMargin = dp;
                            layoutParams8.leftMargin = dp;
                            layoutParams7.leftMargin = dp;
                            layoutParams6.leftMargin = dp;
                            layoutParams5.leftMargin = dp;
                            layoutParams2 = layoutParams8;
                            layoutParams4 = layoutParams7;
                            layoutParams3 = layoutParams6;
                        } else {
                            if (messageObject.isRoundVideo()) {
                                layoutParams = layoutParams8;
                                chatActivity.pinnedMessageImageView[1].setRoundRadius(AndroidUtilities.dp(16.0f));
                            } else {
                                layoutParams = layoutParams8;
                                chatActivity.pinnedMessageImageView[1].setRoundRadius(AndroidUtilities.dp(2.0f));
                            }
                            chatActivity.pinnedImageHasBlur = messageObject.hasMediaSpoilers();
                            chatActivity.pinnedImageSize = i3;
                            chatActivity.pinnedImageCacheType = 1;
                            chatActivity.pinnedImageLocation = closestPhotoSizeWithSize2;
                            chatActivity.pinnedImageThumbLocation = tLRPC$PhotoSize;
                            chatActivity.pinnedImageLocationObject = tLObject;
                            layoutParams2 = layoutParams;
                            layoutParams3 = layoutParams6;
                            chatActivity.pinnedMessageImageView[1].setImage(ImageLocation.getForObject(closestPhotoSizeWithSize2, tLObject), "50_50", ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), "50_50_b", null, i3, 1, messageObject);
                            chatActivity = this;
                            chatActivity.pinnedMessageImageView[1].setVisibility(0);
                            chatActivity.pinnedMessageImageView[1].setHasBlur(chatActivity.pinnedImageHasBlur);
                            if (i != 0) {
                                chatActivity.pinnedMessageImageView[1].setAlpha(0.0f);
                            }
                            int dp2 = AndroidUtilities.dp(55.0f);
                            layoutParams9 = layoutParams9;
                            layoutParams9.leftMargin = dp2;
                            layoutParams2.leftMargin = dp2;
                            layoutParams4 = layoutParams7;
                            layoutParams4.leftMargin = dp2;
                            layoutParams3.leftMargin = dp2;
                            layoutParams5.leftMargin = dp2;
                        }
                        chatActivity.pinnedNameTextView[0].setLayoutParams(layoutParams5);
                        chatActivity.pinnedNameTextView[1].setLayoutParams(layoutParams3);
                        chatActivity.pinnedCounterTextView.setLayoutParams(layoutParams4);
                        chatActivity.pinnedMessageTextView[0].setLayoutParams(layoutParams2);
                        chatActivity.pinnedMessageTextView[1].setLayoutParams(layoutParams9);
                        if (chatActivity.loadedPinnedMessagesCount != 2) {
                            if (chatActivity.pinnedNameTextView[i != 0 ? (char) 0 : (char) 1].getTrackWidth()) {
                                z2 = false;
                                chatActivity.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                                trackingWidthSimpleTextView.setTrackWidth(true);
                                trackingWidthSimpleTextView.setVisibility(0);
                                if (chatActivity.threadMessageId == 0 && !chatActivity.isTopic) {
                                    MessagesController messagesController = getMessagesController();
                                    MessageObject messageObject2 = chatActivity.threadMessageObject;
                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from;
                                    if (tLRPC$MessageFwdHeader != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer) != null) {
                                        long j = tLRPC$Peer.user_id;
                                        if (j != 0) {
                                            TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                                            if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                                                user = messagesController.getUser(Long.valueOf(tLRPC$Peer2.user_id));
                                            } else {
                                                user = messagesController.getUser(Long.valueOf(j));
                                            }
                                        } else {
                                            if (tLRPC$Peer.channel_id != 0) {
                                                if (messageObject2.isSavedFromMegagroup()) {
                                                    TLRPC$Peer tLRPC$Peer3 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer3 instanceof TLRPC$TL_peerUser) {
                                                        user = messagesController.getUser(Long.valueOf(tLRPC$Peer3.user_id));
                                                    }
                                                }
                                                chat = messagesController.getChat(Long.valueOf(tLRPC$MessageFwdHeader.saved_from_peer.channel_id));
                                                tLRPC$Chat = chat;
                                                user = null;
                                            } else {
                                                long j2 = tLRPC$Peer.chat_id;
                                                if (j2 != 0) {
                                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                                                        user = messagesController.getUser(Long.valueOf(tLRPC$Peer4.user_id));
                                                    } else {
                                                        if (tLRPC$Peer4 instanceof TLRPC$TL_peerChat) {
                                                            chat = messagesController.getChat(Long.valueOf(tLRPC$Peer4.chat_id));
                                                        } else if (tLRPC$Peer4 instanceof TLRPC$TL_peerChannel) {
                                                            chat = messagesController.getChat(Long.valueOf(tLRPC$Peer4.channel_id));
                                                        } else {
                                                            chat = messagesController.getChat(Long.valueOf(j2));
                                                        }
                                                        tLRPC$Chat = chat;
                                                        user = null;
                                                    }
                                                }
                                                user = null;
                                            }
                                            if (user != null) {
                                            }
                                        }
                                        tLRPC$Chat = null;
                                        if (user != null) {
                                        }
                                    } else if (messageObject2.isFromUser()) {
                                        user = messagesController.getUser(Long.valueOf(chatActivity.threadMessageObject.messageOwner.from_id.user_id));
                                        tLRPC$Chat = null;
                                        if (user != null) {
                                            trackingWidthSimpleTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
                                        } else if (tLRPC$Chat != null) {
                                            trackingWidthSimpleTextView.setText(tLRPC$Chat.title);
                                        }
                                    } else {
                                        TLRPC$Message tLRPC$Message2 = chatActivity.threadMessageObject.messageOwner;
                                        TLRPC$Peer tLRPC$Peer5 = tLRPC$Message2.from_id;
                                        if (tLRPC$Peer5 instanceof TLRPC$TL_peerChannel) {
                                            chat = messagesController.getChat(Long.valueOf(tLRPC$Peer5.channel_id));
                                        } else if (tLRPC$Peer5 instanceof TLRPC$TL_peerChat) {
                                            chat = messagesController.getChat(Long.valueOf(tLRPC$Peer5.chat_id));
                                        } else {
                                            if (tLRPC$Message2.post) {
                                                chat = messagesController.getChat(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                            }
                                            user = null;
                                            tLRPC$Chat = null;
                                            if (user != null) {
                                            }
                                        }
                                        tLRPC$Chat = chat;
                                        user = null;
                                        if (user != null) {
                                        }
                                    }
                                } else {
                                    if (!messageObject.isInvoice() && (tLRPC$Message = messageObject.messageOwner) != null && (tLRPC$MessageMedia = tLRPC$Message.media) != null && tLRPC$MessageMedia.title != null) {
                                        z3 = false;
                                        trackingWidthSimpleTextView.setTrackWidth(false);
                                        trackingWidthSimpleTextView.setText(messageObject.messageOwner.media.title);
                                        z2 = true;
                                    } else {
                                        if (chatActivity.currentPinnedMessageIndex[0] != 0 || chatActivity.loadedPinnedMessagesCount != 2) {
                                            i4 = 1;
                                            trackingWidthSimpleTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage), true);
                                        } else {
                                            i4 = 1;
                                            trackingWidthSimpleTextView.setText(LocaleController.getString("PreviousPinnedMessage", R.string.PreviousPinnedMessage), true);
                                        }
                                        iArr = chatActivity.currentPinnedMessageIndex;
                                        if (iArr[0] != 0) {
                                            if (chatActivity.isTopic) {
                                                chatActivity.pinnedCounterTextView.setNumber(Math.max(i4, iArr[0]), z && chatActivity.pinnedCounterTextView.getTag() == null);
                                            } else {
                                                int pinnedMessagesCount = getPinnedMessagesCount();
                                                chatActivity.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount - 1, Math.max(1, pinnedMessagesCount - chatActivity.currentPinnedMessageIndex[0])), z && chatActivity.pinnedCounterTextView.getTag() == null);
                                            }
                                            z3 = true;
                                        }
                                    }
                                    messageObject.updateTranslation(false);
                                    i5 = messageObject.type;
                                    if (i5 == 14) {
                                        replaceEmoji = String.format("%s - %s", messageObject.getMusicAuthor(), messageObject.getMusicTitle());
                                    } else if (i5 == 17) {
                                        String str = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll.question;
                                        if (str.length() > 150) {
                                            str = str.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                        }
                                        replaceEmoji = str.replace('\n', ' ');
                                    } else {
                                        TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                                        if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGame) {
                                            replaceEmoji = Emoji.replaceEmoji(tLRPC$MessageMedia2.game.title, simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                        } else {
                                            if (!TextUtils.isEmpty(messageObject.caption)) {
                                                String charSequence2 = messageObject.caption.toString();
                                                if (charSequence2.length() > 150) {
                                                    charSequence2 = charSequence2.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                                }
                                                charSequence = Emoji.replaceEmoji(charSequence2.replace('\n', ' '), simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false);
                                                if (messageObject.messageOwner != null) {
                                                    charSequence = messageObject.replaceAnimatedEmoji(charSequence, simpleTextView.getPaint().getFontMetricsInt());
                                                }
                                            } else {
                                                CharSequence charSequence3 = messageObject.messageText;
                                                if (charSequence3 != null) {
                                                    String charSequence4 = charSequence3.toString();
                                                    if (charSequence4.length() > 150) {
                                                        z4 = false;
                                                        charSequence4 = charSequence4.substring(0, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                                                    } else {
                                                        z4 = false;
                                                    }
                                                    charSequence = Emoji.replaceEmoji(charSequence4.replace('\n', ' '), simpleTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), z4);
                                                    if (messageObject.messageOwner != null) {
                                                        charSequence = messageObject.replaceAnimatedEmoji(charSequence, simpleTextView.getPaint().getFontMetricsInt());
                                                    }
                                                } else {
                                                    charSequence = null;
                                                }
                                            }
                                            if (charSequence != null) {
                                                if (charSequence instanceof Spannable) {
                                                    MediaDataController.addTextStyleRuns(messageObject, (Spannable) charSequence, 264);
                                                }
                                                simpleTextView.setText(AnimatedEmojiSpan.cloneSpans(charSequence));
                                            }
                                            if (i == 0) {
                                                chatActivity.pinnedNextAnimation[0] = new AnimatorSet();
                                                chatActivity.pinnedNextAnimation[1] = new AnimatorSet();
                                                ArrayList arrayList = new ArrayList();
                                                ArrayList arrayList2 = new ArrayList();
                                                simpleTextView.setVisibility(0);
                                                trackingWidthSimpleTextView.setVisibility(0);
                                                final PinnedMessageButton pinnedMessageButton3 = pinnedMessageButton;
                                                if (pinnedButton2 != null) {
                                                    pinnedMessageButton3.setVisibility(0);
                                                }
                                                if (!z3) {
                                                    if (chatActivity.pinnedCounterTextView.getTag() == null) {
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedCounterTextView, View.ALPHA, 1.0f, 0.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedCounterTextView, View.TRANSLATION_Y, 0.0f, -AndroidUtilities.dp(4.0f)));
                                                        chatActivity.pinnedCounterTextView.setTag(1);
                                                    }
                                                } else if (chatActivity.pinnedCounterTextView.getTag() != null) {
                                                    chatActivity.pinnedCounterTextView.setVisibility(0);
                                                    chatActivity.pinnedCounterTextView.setAlpha(0.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedCounterTextView, View.ALPHA, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedCounterTextView, View.TRANSLATION_Y, -AndroidUtilities.dp(4.0f), 0.0f));
                                                    chatActivity.pinnedCounterTextView.setTag(null);
                                                }
                                                if (z2 && !TextUtils.equals(trackingWidthSimpleTextView.getText(), chatActivity.pinnedNameTextView[0].getText())) {
                                                    trackingWidthSimpleTextView.setAlpha(0.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, View.ALPHA, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedNameTextView[0], View.ALPHA, 1.0f, 0.0f));
                                                    Property property = View.TRANSLATION_Y;
                                                    float[] fArr = new float[2];
                                                    fArr[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                    fArr[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property, fArr));
                                                    z5 = chatActivity.forceScrollToFirst && chatActivity.loadedPinnedMessagesCount > 5;
                                                    if (z5) {
                                                        arrayList2.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                        f8 = 0.0f;
                                                        c8 = 0;
                                                    } else {
                                                        Property property2 = View.TRANSLATION_Y;
                                                        float[] fArr2 = new float[2];
                                                        c8 = 0;
                                                        fArr2[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                        f8 = 0.0f;
                                                        fArr2[1] = 0.0f;
                                                        arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, property2, fArr2));
                                                    }
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView2 = chatActivity.pinnedNameTextView[c8];
                                                    Property property3 = View.TRANSLATION_Y;
                                                    float[] fArr3 = new float[2];
                                                    fArr3[c8] = f8;
                                                    fArr3[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView2, property3, fArr3));
                                                    f3 = 0.0f;
                                                } else {
                                                    if (trackingWidthSimpleTextView != chatActivity.pinnedNameTextView[0]) {
                                                        trackingWidthSimpleTextView.setAlpha(1.0f);
                                                        f3 = 0.0f;
                                                        chatActivity.pinnedNameTextView[0].setAlpha(0.0f);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        chatActivity.pinnedNameTextView[0].setTranslationY(0.0f);
                                                    } else {
                                                        f3 = 0.0f;
                                                        trackingWidthSimpleTextView.setAlpha(1.0f);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        chatActivity.pinnedNameTextView[1].setTranslationY(0.0f);
                                                        chatActivity.pinnedNameTextView[1].setAlpha(0.0f);
                                                    }
                                                    z5 = false;
                                                }
                                                if (!TextUtils.equals(simpleTextView.getText(), chatActivity.pinnedMessageTextView[0].getText())) {
                                                    simpleTextView.setAlpha(f3);
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView, View.ALPHA, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageTextView[0], View.ALPHA, 1.0f, 0.0f));
                                                    boolean z9 = chatActivity.forceScrollToFirst && chatActivity.loadedPinnedMessagesCount > 5;
                                                    if (z9) {
                                                        arrayList2.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                        f7 = 0.0f;
                                                        c7 = 0;
                                                    } else {
                                                        Property property4 = View.TRANSLATION_Y;
                                                        float[] fArr4 = new float[2];
                                                        c7 = 0;
                                                        fArr4[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                        f7 = 0.0f;
                                                        fArr4[1] = 0.0f;
                                                        arrayList.add(ObjectAnimator.ofFloat(simpleTextView, property4, fArr4));
                                                    }
                                                    SimpleTextView simpleTextView2 = chatActivity.pinnedMessageTextView[c7];
                                                    Property property5 = View.TRANSLATION_Y;
                                                    z6 = z9;
                                                    float[] fArr5 = new float[2];
                                                    fArr5[c7] = f7;
                                                    fArr5[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView2, property5, fArr5));
                                                    c2 = 0;
                                                    f4 = 0.0f;
                                                } else {
                                                    simpleTextView.setAlpha(1.0f);
                                                    c2 = 0;
                                                    f4 = 0.0f;
                                                    chatActivity.pinnedMessageTextView[0].setAlpha(0.0f);
                                                    simpleTextView.setTranslationY(0.0f);
                                                    chatActivity.pinnedMessageTextView[0].setTranslationY(0.0f);
                                                    z6 = false;
                                                }
                                                if (!TextUtils.equals(pinnedMessageButton3.getText(), chatActivity.pinnedMessageButton[c2].getText())) {
                                                    pinnedMessageButton3.setAlpha(f4);
                                                    arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.ALPHA, 0.0f, 1.0f));
                                                    arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageButton[c2], View.ALPHA, 1.0f, 0.0f));
                                                    boolean z10 = chatActivity.forceScrollToFirst && chatActivity.loadedPinnedMessagesCount > 5;
                                                    if (z10) {
                                                        arrayList2.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(-2.0f)));
                                                        f6 = 0.0f;
                                                        c6 = 0;
                                                    } else {
                                                        Property property6 = View.TRANSLATION_Y;
                                                        float[] fArr6 = new float[2];
                                                        c6 = 0;
                                                        fArr6[0] = AndroidUtilities.dp(i == 2 ? 4.0f : -4.0f);
                                                        f6 = 0.0f;
                                                        fArr6[1] = 0.0f;
                                                        arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton3, property6, fArr6));
                                                    }
                                                    PinnedMessageButton pinnedMessageButton4 = chatActivity.pinnedMessageButton[c6];
                                                    Property property7 = View.TRANSLATION_Y;
                                                    z7 = z10;
                                                    float[] fArr7 = new float[2];
                                                    fArr7[c6] = f6;
                                                    fArr7[1] = AndroidUtilities.dp(i == 2 ? -4.0f : 4.0f);
                                                    arrayList.add(ObjectAnimator.ofFloat(pinnedMessageButton4, property7, fArr7));
                                                    c3 = 0;
                                                } else {
                                                    pinnedMessageButton3.setAlpha(1.0f);
                                                    c3 = 0;
                                                    chatActivity.pinnedMessageButton[0].setAlpha(0.0f);
                                                    pinnedMessageButton3.setTranslationY(0.0f);
                                                    chatActivity.pinnedMessageButton[0].setTranslationY(0.0f);
                                                    z7 = false;
                                                }
                                                int i13 = layoutParams5.leftMargin;
                                                if (i13 != i12) {
                                                    chatActivity.setPinnedTextTranslationX = true;
                                                    int i14 = i12 - i13;
                                                    SimpleTextView simpleTextView3 = chatActivity.pinnedMessageTextView[c3];
                                                    Property property8 = View.TRANSLATION_X;
                                                    float[] fArr8 = new float[2];
                                                    float f9 = i14;
                                                    fArr8[c3] = f9;
                                                    fArr8[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView3, property8, fArr8));
                                                    SimpleTextView simpleTextView4 = chatActivity.pinnedMessageTextView[1];
                                                    Property property9 = View.TRANSLATION_X;
                                                    float[] fArr9 = new float[2];
                                                    fArr9[c3] = f9;
                                                    fArr9[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(simpleTextView4, property9, fArr9));
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView3 = chatActivity.pinnedNameTextView[c3];
                                                    Property property10 = View.TRANSLATION_X;
                                                    float[] fArr10 = new float[2];
                                                    fArr10[c3] = f9;
                                                    fArr10[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView3, property10, fArr10));
                                                    TrackingWidthSimpleTextView trackingWidthSimpleTextView4 = chatActivity.pinnedNameTextView[1];
                                                    Property property11 = View.TRANSLATION_X;
                                                    float[] fArr11 = new float[2];
                                                    fArr11[c3] = f9;
                                                    fArr11[1] = 0.0f;
                                                    arrayList.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView4, property11, fArr11));
                                                    NumberTextView numberTextView = chatActivity.pinnedCounterTextView;
                                                    Property property12 = View.TRANSLATION_X;
                                                    float[] fArr12 = new float[2];
                                                    int i15 = chatActivity.pinnedCounterTextViewX;
                                                    fArr12[c3] = i15 + i14;
                                                    fArr12[1] = i15;
                                                    arrayList.add(ObjectAnimator.ofFloat(numberTextView, property12, fArr12));
                                                    if (i14 > 0) {
                                                        chatActivity.pinnedMessageImageView[c3].setAlpha(1.0f);
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[c3], View.ALPHA, 1.0f, 0.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[c3], View.SCALE_X, 1.0f, 0.7f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[c3], View.SCALE_Y, 1.0f, 0.7f));
                                                    } else {
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[1], View.ALPHA, 0.0f, 1.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[1], View.SCALE_X, 0.7f, 1.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[1], View.SCALE_Y, 0.7f, 1.0f));
                                                    }
                                                    backupImageView = null;
                                                    c4 = 1;
                                                } else {
                                                    chatActivity.setPinnedTextTranslationX = false;
                                                    simpleTextView.setTranslationX(0.0f);
                                                    chatActivity.pinnedMessageTextView[0].setTranslationX(0.0f);
                                                    trackingWidthSimpleTextView.setTranslationX(0.0f);
                                                    chatActivity.pinnedNameTextView[0].setTranslationX(0.0f);
                                                    pinnedMessageButton3.setTranslationX(0.0f);
                                                    chatActivity.pinnedMessageButton[0].setTranslationX(0.0f);
                                                    chatActivity.pinnedCounterTextView.setTranslationX(chatActivity.pinnedCounterTextViewX);
                                                    chatActivity.pinnedMessageImageView[1].setAlpha(1.0f);
                                                    if (z8) {
                                                        c4 = 1;
                                                        backupImageView = null;
                                                    } else {
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[1], View.ALPHA, 0.0f, 1.0f));
                                                        arrayList.add(ObjectAnimator.ofFloat(chatActivity.pinnedMessageImageView[0], View.ALPHA, 1.0f, 0.0f));
                                                        if (chatActivity.forceScrollToFirst && chatActivity.loadedPinnedMessagesCount > 5) {
                                                            BackupImageView[] backupImageViewArr = chatActivity.pinnedMessageImageView;
                                                            backupImageView2 = backupImageViewArr[1];
                                                            arrayList2.add(ObjectAnimator.ofFloat(backupImageViewArr[1], View.TRANSLATION_Y, AndroidUtilities.dp(3.0f), AndroidUtilities.dp(-2.0f)));
                                                            f5 = 0.0f;
                                                            c5 = 0;
                                                        } else {
                                                            BackupImageView backupImageView3 = chatActivity.pinnedMessageImageView[1];
                                                            Property property13 = View.TRANSLATION_Y;
                                                            float[] fArr13 = new float[2];
                                                            c5 = 0;
                                                            fArr13[0] = AndroidUtilities.dp(i == 2 ? 3.0f : -3.0f);
                                                            f5 = 0.0f;
                                                            fArr13[1] = 0.0f;
                                                            arrayList.add(ObjectAnimator.ofFloat(backupImageView3, property13, fArr13));
                                                            backupImageView2 = null;
                                                        }
                                                        BackupImageView backupImageView4 = chatActivity.pinnedMessageImageView[c5];
                                                        Property property14 = View.TRANSLATION_Y;
                                                        float[] fArr14 = new float[2];
                                                        fArr14[c5] = f5;
                                                        c4 = 1;
                                                        fArr14[1] = AndroidUtilities.dp(i == 2 ? -3.0f : 3.0f);
                                                        arrayList.add(ObjectAnimator.ofFloat(backupImageView4, property14, fArr14));
                                                        backupImageView = backupImageView2;
                                                    }
                                                }
                                                final boolean z11 = z6;
                                                final boolean z12 = z7;
                                                i6 = 1;
                                                chatActivity.pinnedNextAnimation[c4].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.99
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationCancel(Animator animator) {
                                                        ChatActivity.this.pinnedNextAnimation[1] = null;
                                                        ChatActivity.this.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                    }

                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (animator.equals(ChatActivity.this.pinnedNextAnimation[1])) {
                                                            if (z5 || z11 || backupImageView != null) {
                                                                ChatActivity.this.pinnedNextAnimation[1] = new AnimatorSet();
                                                                ChatActivity.this.pinnedNextAnimation[1].setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                                                ChatActivity.this.pinnedNextAnimation[1].setDuration(360L);
                                                                ArrayList arrayList3 = new ArrayList();
                                                                if (z5) {
                                                                    arrayList3.add(ObjectAnimator.ofFloat(trackingWidthSimpleTextView, View.TRANSLATION_Y, 0.0f));
                                                                }
                                                                if (z11) {
                                                                    arrayList3.add(ObjectAnimator.ofFloat(simpleTextView, View.TRANSLATION_Y, 0.0f));
                                                                }
                                                                if (z12) {
                                                                    arrayList3.add(ObjectAnimator.ofFloat(pinnedMessageButton3, View.TRANSLATION_Y, 0.0f));
                                                                }
                                                                BackupImageView backupImageView5 = backupImageView;
                                                                if (backupImageView5 != null) {
                                                                    arrayList3.add(ObjectAnimator.ofFloat(backupImageView5, View.TRANSLATION_Y, 0.0f));
                                                                }
                                                                ChatActivity.this.pinnedNextAnimation[1].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.99.1
                                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                                    public void onAnimationEnd(Animator animator2) {
                                                                        99 r3 = 99.this;
                                                                        if (z5) {
                                                                            trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                                        }
                                                                        99 r32 = 99.this;
                                                                        if (z11) {
                                                                            simpleTextView.setTranslationY(0.0f);
                                                                        }
                                                                        99 r33 = 99.this;
                                                                        if (z12) {
                                                                            pinnedMessageButton3.setTranslationY(0.0f);
                                                                        }
                                                                        BackupImageView backupImageView6 = backupImageView;
                                                                        if (backupImageView6 != null) {
                                                                            backupImageView6.setTranslationY(0.0f);
                                                                        }
                                                                        ChatActivity.this.pinnedNextAnimation[1] = null;
                                                                    }
                                                                });
                                                                ChatActivity.this.pinnedNextAnimation[1].playTogether(arrayList3);
                                                                ChatActivity.this.pinnedNextAnimation[1].start();
                                                                return;
                                                            }
                                                            ChatActivity.this.pinnedNextAnimation[1] = null;
                                                        }
                                                    }
                                                });
                                                chatActivity.pinnedNextAnimation[1].setDuration(360L);
                                                AnimatorSet animatorSet3 = chatActivity.pinnedNextAnimation[1];
                                                CubicBezierInterpolator cubicBezierInterpolator = CubicBezierInterpolator.EASE_OUT_QUINT;
                                                animatorSet3.setInterpolator(cubicBezierInterpolator);
                                                chatActivity.pinnedNextAnimation[1].playTogether(arrayList2);
                                                chatActivity.pinnedNextAnimation[0].playTogether(arrayList);
                                                final boolean z13 = z7;
                                                final boolean z14 = z8;
                                                chatActivity.pinnedNextAnimation[0].addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.100
                                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (ChatActivity.this.pinnedCounterTextView.getTag() != null) {
                                                            ChatActivity.this.pinnedCounterTextView.setVisibility(4);
                                                            int pinnedMessagesCount2 = ChatActivity.this.getPinnedMessagesCount();
                                                            ChatActivity.this.pinnedCounterTextView.setNumber(Math.min(pinnedMessagesCount2 - 1, Math.max(1, pinnedMessagesCount2 - ChatActivity.this.currentPinnedMessageIndex[0])), false);
                                                        } else {
                                                            ChatActivity.this.pinnedCounterTextView.setAlpha(1.0f);
                                                        }
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationY(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        if (!z11) {
                                                            trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z11) {
                                                            simpleTextView.setTranslationY(0.0f);
                                                        }
                                                        if (!z13) {
                                                            pinnedMessageButton3.setTranslationY(0.0f);
                                                        }
                                                        ChatActivity.this.pinnedNameTextView[0].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedNameTextView[1].setTranslationX(0.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[0].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageTextView[1] = ChatActivity.this.pinnedMessageTextView[0];
                                                        ChatActivity.this.pinnedMessageTextView[0] = simpleTextView;
                                                        ChatActivity.this.pinnedMessageTextView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedMessageButton[1] = ChatActivity.this.pinnedMessageButton[0];
                                                        ChatActivity.this.pinnedMessageButton[0] = pinnedMessageButton3;
                                                        ChatActivity.this.pinnedMessageButton[1].setVisibility(4);
                                                        if (trackingWidthSimpleTextView != ChatActivity.this.pinnedNameTextView[0]) {
                                                            ChatActivity.this.pinnedNameTextView[1] = ChatActivity.this.pinnedNameTextView[0];
                                                            ChatActivity.this.pinnedNameTextView[0] = trackingWidthSimpleTextView;
                                                            ChatActivity.this.pinnedNameTextView[1].setVisibility(4);
                                                        }
                                                        if (z14) {
                                                            ChatActivity.this.pinnedMessageImageView[1].setImageBitmap(null);
                                                            ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        }
                                                        BackupImageView backupImageView5 = ChatActivity.this.pinnedMessageImageView[1];
                                                        ChatActivity.this.pinnedMessageImageView[1] = ChatActivity.this.pinnedMessageImageView[0];
                                                        ChatActivity.this.pinnedMessageImageView[0] = backupImageView5;
                                                        ChatActivity.this.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        ChatActivity.this.pinnedMessageImageView[1].setVisibility(4);
                                                        ChatActivity.this.pinnedNextAnimation[0] = null;
                                                        ChatActivity.this.setPinnedTextTranslationX = false;
                                                    }
                                                });
                                                chatActivity.pinnedNextAnimation[0].setInterpolator(cubicBezierInterpolator);
                                                chatActivity.pinnedNextAnimation[0].setDuration(360L);
                                                if (!chatActivity.setPinnedTextTranslationX) {
                                                    chatActivity.pinnedNextAnimation[0].start();
                                                    chatActivity.pinnedNextAnimation[1].start();
                                                }
                                            } else {
                                                i6 = 1;
                                                if (!z3 || chatActivity.currentPinnedMessageIndex[0] == 0) {
                                                    if (chatActivity.pinnedCounterTextView.getTag() == null) {
                                                        f = 0.0f;
                                                        chatActivity.pinnedCounterTextView.setAlpha(0.0f);
                                                        i7 = 4;
                                                        chatActivity.pinnedCounterTextView.setVisibility(4);
                                                        chatActivity.pinnedCounterTextView.setTag(1);
                                                        chatActivity.pinnedCounterTextView.setTranslationY(f);
                                                        chatActivity.pinnedCounterTextView.setTranslationX(chatActivity.pinnedCounterTextViewX);
                                                        NumberTextView numberTextView2 = chatActivity.pinnedCounterTextView;
                                                        if (z2) {
                                                            i8 = 0;
                                                            if (chatActivity.currentPinnedMessageIndex[0] != 0) {
                                                                f2 = 1.0f;
                                                                numberTextView2.setAlpha(f2);
                                                                simpleTextView.setVisibility(i8);
                                                                simpleTextView.setAlpha(1.0f);
                                                                simpleTextView.setTranslationX(0.0f);
                                                                simpleTextView.setTranslationY(0.0f);
                                                                trackingWidthSimpleTextView.setVisibility(i8);
                                                                trackingWidthSimpleTextView.setAlpha(1.0f);
                                                                trackingWidthSimpleTextView.setTranslationX(0.0f);
                                                                trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                                chatActivity.pinnedMessageTextView[1].setVisibility(i7);
                                                                chatActivity.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                                chatActivity.pinnedMessageTextView[1].setTranslationY(0.0f);
                                                                chatActivity.pinnedMessageButton[1].setVisibility(i7);
                                                                chatActivity.pinnedMessageButton[1].setTranslationX(0.0f);
                                                                chatActivity.pinnedMessageButton[1].setTranslationY(0.0f);
                                                                chatActivity.pinnedNameTextView[1].setVisibility(i7);
                                                                chatActivity.pinnedNameTextView[1].setTranslationX(0.0f);
                                                                chatActivity.pinnedNameTextView[1].setTranslationY(0.0f);
                                                                chatActivity.pinnedMessageImageView[0].setVisibility(i7);
                                                                BackupImageView[] backupImageViewArr2 = chatActivity.pinnedMessageImageView;
                                                                BackupImageView backupImageView5 = backupImageViewArr2[1];
                                                                backupImageViewArr2[1] = backupImageViewArr2[0];
                                                                backupImageViewArr2[0] = backupImageView5;
                                                                backupImageViewArr2[0].setAlpha(1.0f);
                                                                chatActivity.pinnedMessageImageView[0].setScaleX(1.0f);
                                                                chatActivity.pinnedMessageImageView[0].setScaleY(1.0f);
                                                                chatActivity.pinnedMessageImageView[0].setTranslationY(0.0f);
                                                                chatActivity.pinnedMessageImageView[1].setAlpha(1.0f);
                                                                chatActivity.pinnedMessageImageView[1].setScaleX(1.0f);
                                                                chatActivity.pinnedMessageImageView[1].setScaleY(1.0f);
                                                                chatActivity.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                            }
                                                        } else {
                                                            i8 = 0;
                                                        }
                                                        f2 = 0.0f;
                                                        numberTextView2.setAlpha(f2);
                                                        simpleTextView.setVisibility(i8);
                                                        simpleTextView.setAlpha(1.0f);
                                                        simpleTextView.setTranslationX(0.0f);
                                                        simpleTextView.setTranslationY(0.0f);
                                                        trackingWidthSimpleTextView.setVisibility(i8);
                                                        trackingWidthSimpleTextView.setAlpha(1.0f);
                                                        trackingWidthSimpleTextView.setTranslationX(0.0f);
                                                        trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                        chatActivity.pinnedMessageTextView[1].setVisibility(i7);
                                                        chatActivity.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                        chatActivity.pinnedMessageTextView[1].setTranslationY(0.0f);
                                                        chatActivity.pinnedMessageButton[1].setVisibility(i7);
                                                        chatActivity.pinnedMessageButton[1].setTranslationX(0.0f);
                                                        chatActivity.pinnedMessageButton[1].setTranslationY(0.0f);
                                                        chatActivity.pinnedNameTextView[1].setVisibility(i7);
                                                        chatActivity.pinnedNameTextView[1].setTranslationX(0.0f);
                                                        chatActivity.pinnedNameTextView[1].setTranslationY(0.0f);
                                                        chatActivity.pinnedMessageImageView[0].setVisibility(i7);
                                                        BackupImageView[] backupImageViewArr22 = chatActivity.pinnedMessageImageView;
                                                        BackupImageView backupImageView52 = backupImageViewArr22[1];
                                                        backupImageViewArr22[1] = backupImageViewArr22[0];
                                                        backupImageViewArr22[0] = backupImageView52;
                                                        backupImageViewArr22[0].setAlpha(1.0f);
                                                        chatActivity.pinnedMessageImageView[0].setScaleX(1.0f);
                                                        chatActivity.pinnedMessageImageView[0].setScaleY(1.0f);
                                                        chatActivity.pinnedMessageImageView[0].setTranslationY(0.0f);
                                                        chatActivity.pinnedMessageImageView[1].setAlpha(1.0f);
                                                        chatActivity.pinnedMessageImageView[1].setScaleX(1.0f);
                                                        chatActivity.pinnedMessageImageView[1].setScaleY(1.0f);
                                                        chatActivity.pinnedMessageImageView[1].setTranslationY(0.0f);
                                                    }
                                                } else if (chatActivity.pinnedCounterTextView.getTag() != null) {
                                                    chatActivity.pinnedCounterTextView.setVisibility(0);
                                                    chatActivity.pinnedCounterTextView.setAlpha(1.0f);
                                                    chatActivity.pinnedCounterTextView.setTag(null);
                                                }
                                                f = 0.0f;
                                                i7 = 4;
                                                chatActivity.pinnedCounterTextView.setTranslationY(f);
                                                chatActivity.pinnedCounterTextView.setTranslationX(chatActivity.pinnedCounterTextViewX);
                                                NumberTextView numberTextView22 = chatActivity.pinnedCounterTextView;
                                                if (z2) {
                                                }
                                                f2 = 0.0f;
                                                numberTextView22.setAlpha(f2);
                                                simpleTextView.setVisibility(i8);
                                                simpleTextView.setAlpha(1.0f);
                                                simpleTextView.setTranslationX(0.0f);
                                                simpleTextView.setTranslationY(0.0f);
                                                trackingWidthSimpleTextView.setVisibility(i8);
                                                trackingWidthSimpleTextView.setAlpha(1.0f);
                                                trackingWidthSimpleTextView.setTranslationX(0.0f);
                                                trackingWidthSimpleTextView.setTranslationY(0.0f);
                                                chatActivity.pinnedMessageTextView[1].setVisibility(i7);
                                                chatActivity.pinnedMessageTextView[1].setTranslationX(0.0f);
                                                chatActivity.pinnedMessageTextView[1].setTranslationY(0.0f);
                                                chatActivity.pinnedMessageButton[1].setVisibility(i7);
                                                chatActivity.pinnedMessageButton[1].setTranslationX(0.0f);
                                                chatActivity.pinnedMessageButton[1].setTranslationY(0.0f);
                                                chatActivity.pinnedNameTextView[1].setVisibility(i7);
                                                chatActivity.pinnedNameTextView[1].setTranslationX(0.0f);
                                                chatActivity.pinnedNameTextView[1].setTranslationY(0.0f);
                                                chatActivity.pinnedMessageImageView[0].setVisibility(i7);
                                                BackupImageView[] backupImageViewArr222 = chatActivity.pinnedMessageImageView;
                                                BackupImageView backupImageView522 = backupImageViewArr222[1];
                                                backupImageViewArr222[1] = backupImageViewArr222[0];
                                                backupImageViewArr222[0] = backupImageView522;
                                                backupImageViewArr222[0].setAlpha(1.0f);
                                                chatActivity.pinnedMessageImageView[0].setScaleX(1.0f);
                                                chatActivity.pinnedMessageImageView[0].setScaleY(1.0f);
                                                chatActivity.pinnedMessageImageView[0].setTranslationY(0.0f);
                                                chatActivity.pinnedMessageImageView[1].setAlpha(1.0f);
                                                chatActivity.pinnedMessageImageView[1].setScaleX(1.0f);
                                                chatActivity.pinnedMessageImageView[1].setScaleY(1.0f);
                                                chatActivity.pinnedMessageImageView[1].setTranslationY(0.0f);
                                            }
                                            if (!isThreadChat() && !chatActivity.isTopic) {
                                                chatActivity.pinnedLineView.set(0, i6, false);
                                            } else {
                                                chatActivity.pinnedLineView.set((chatActivity.pinnedMessageIds.size() - i6) - Collections.binarySearch(chatActivity.pinnedMessageIds, Integer.valueOf(chatActivity.currentPinnedMessageId), Comparator$-CC.reverseOrder()), chatActivity.pinnedMessageIds.size(), z);
                                            }
                                        }
                                    }
                                    charSequence = replaceEmoji;
                                    if (charSequence != null) {
                                    }
                                    if (i == 0) {
                                    }
                                    if (!isThreadChat()) {
                                    }
                                    chatActivity.pinnedLineView.set((chatActivity.pinnedMessageIds.size() - i6) - Collections.binarySearch(chatActivity.pinnedMessageIds, Integer.valueOf(chatActivity.currentPinnedMessageId), Comparator$-CC.reverseOrder()), chatActivity.pinnedMessageIds.size(), z);
                                }
                                z3 = false;
                                messageObject.updateTranslation(false);
                                i5 = messageObject.type;
                                if (i5 == 14) {
                                }
                                charSequence = replaceEmoji;
                                if (charSequence != null) {
                                }
                                if (i == 0) {
                                }
                                if (!isThreadChat()) {
                                }
                                chatActivity.pinnedLineView.set((chatActivity.pinnedMessageIds.size() - i6) - Collections.binarySearch(chatActivity.pinnedMessageIds, Integer.valueOf(chatActivity.currentPinnedMessageId), Comparator$-CC.reverseOrder()), chatActivity.pinnedMessageIds.size(), z);
                            }
                        }
                        z2 = true;
                        chatActivity.pinnedNameTextView[i == 0 ? (char) 0 : (char) 1].setTrackWidth(false);
                        trackingWidthSimpleTextView.setTrackWidth(true);
                        trackingWidthSimpleTextView.setVisibility(0);
                        if (chatActivity.threadMessageId == 0) {
                        }
                        if (!messageObject.isInvoice()) {
                        }
                        if (chatActivity.currentPinnedMessageIndex[0] != 0) {
                        }
                        i4 = 1;
                        trackingWidthSimpleTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage), true);
                        iArr = chatActivity.currentPinnedMessageIndex;
                        if (iArr[0] != 0) {
                        }
                        z3 = false;
                        messageObject.updateTranslation(false);
                        i5 = messageObject.type;
                        if (i5 == 14) {
                        }
                        charSequence = replaceEmoji;
                        if (charSequence != null) {
                        }
                        if (i == 0) {
                        }
                        if (!isThreadChat()) {
                        }
                        chatActivity.pinnedLineView.set((chatActivity.pinnedMessageIds.size() - i6) - Collections.binarySearch(chatActivity.pinnedMessageIds, Integer.valueOf(chatActivity.currentPinnedMessageId), Comparator$-CC.reverseOrder()), chatActivity.pinnedMessageIds.size(), z);
                    } else {
                        int i16 = 4;
                        NumberTextView numberTextView3 = chatActivity.pinnedCounterTextView;
                        if (chatActivity.loadedPinnedMessagesCount != 2) {
                            c = 0;
                            if (chatActivity.currentPinnedMessageIndex[0] != 0) {
                                i16 = 0;
                            }
                        } else {
                            c = 0;
                        }
                        numberTextView3.setVisibility(i16);
                        chatActivity.pinnedCounterTextView.setAlpha((chatActivity.loadedPinnedMessagesCount == 2 || chatActivity.currentPinnedMessageIndex[c] == 0) ? 0.0f : 1.0f);
                        chatActivity.pinnedImageLocation = null;
                        chatActivity.pinnedImageLocationObject = null;
                        hidePinnedMessageView = hidePinnedMessageView(z);
                        if (chatActivity.loadingPinnedMessages.indexOfKey(i2) < 0) {
                            chatActivity.loadingPinnedMessages.put(i2, Boolean.TRUE);
                            ArrayList<Integer> arrayList3 = new ArrayList<>();
                            arrayList3.add(Integer.valueOf(i2));
                            getMediaDataController().loadPinnedMessages(chatActivity.dialog_id, ChatObject.isChannel(chatActivity.currentChat) ? chatActivity.currentChat.id : 0L, arrayList3, true);
                        }
                    }
                    if (hidePinnedMessageView) {
                    }
                }
                hidePinnedMessageView = hidePinnedMessageView(z);
                if (hidePinnedMessageView) {
                }
            }
        }
        messageObject = null;
        i2 = 0;
        final TLRPC$KeyboardButton pinnedButton22 = chatActivity.pinnedButton(messageObject);
        chatActivity.pinnedMessageButtonShown = pinnedButton22 != null;
        SharedPreferences notificationsSettings22 = MessagesController.getNotificationsSettings(chatActivity.currentAccount);
        if (chatActivity.threadMessageObject == null) {
        }
        if (chatActivity.reportType < 0) {
        }
        hidePinnedMessageView = hidePinnedMessageView(z);
        if (hidePinnedMessageView) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessageView$158(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, View view) {
        if (getParentActivity() != null) {
            if (this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) {
                this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, messageObject, messageObject);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updatePinnedMessageView$159(TLRPC$KeyboardButton tLRPC$KeyboardButton, MessageObject messageObject, PinnedMessageButton pinnedMessageButton, View view) {
        if (getParentActivity() == null || !((this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) && (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl))) {
            return false;
        }
        openClickableLink(null, tLRPC$KeyboardButton.url, true, null, messageObject);
        try {
            pinnedMessageButton.performHapticFeedback(0, 1);
        } catch (Exception unused) {
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class TrackingWidthSimpleTextView extends SimpleTextView {
        private boolean trackWidth;

        public TrackingWidthSimpleTextView(Context context) {
            super(context);
            this.trackWidth = true;
        }

        public void setTrackWidth(boolean z) {
            this.trackWidth = z;
        }

        public boolean getTrackWidth() {
            return this.trackWidth;
        }

        @Override // org.telegram.ui.ActionBar.SimpleTextView
        protected boolean createLayout(int i) {
            boolean createLayout = super.createLayout(i);
            if (this.trackWidth && getVisibility() == 0) {
                ChatActivity.this.pinnedCounterTextViewX = getTextWidth() + AndroidUtilities.dp(4.0f);
                if (ChatActivity.this.pinnedCounterTextView != null) {
                    ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                }
            }
            return createLayout;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x017b, code lost:
        if (((org.telegram.tgnet.TLRPC$TL_emojiStatusUntil) r8).until > ((int) (java.lang.System.currentTimeMillis() / 1000))) goto L359;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x01d9, code lost:
        if (getMessagesController().getTranslateController().isTranslateDialogHidden(getDialogId()) == false) goto L48;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x01fa, code lost:
        if (r0.getInt("dialog_show_translate_count" + r1, 5) <= 0) goto L48;
     */
    /* JADX WARN: Code restructure failed: missing block: B:64:0x01fc, code lost:
        r12 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0253  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0265  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x0272  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x027f  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0294  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0298  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x02a0  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02b2  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02b5  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x0384  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x03d2  */
    /* JADX WARN: Removed duplicated region for block: B:243:0x0612  */
    /* JADX WARN: Removed duplicated region for block: B:249:0x061f  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x065a A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:298:0x0756  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x075d  */
    /* JADX WARN: Removed duplicated region for block: B:304:0x0764  */
    /* JADX WARN: Removed duplicated region for block: B:306:0x0769  */
    /* JADX WARN: Removed duplicated region for block: B:322:0x07ad  */
    /* JADX WARN: Removed duplicated region for block: B:327:0x07b8  */
    /* JADX WARN: Removed duplicated region for block: B:339:0x07d4  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x07de  */
    /* JADX WARN: Removed duplicated region for block: B:357:0x0853  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x01b7  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01dc  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0202  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0206  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x020a  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0219 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x022a A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x022d  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x023b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateTopPanel(boolean z) {
        boolean z2;
        boolean z3;
        boolean z4;
        TLRPC$EmojiStatus tLRPC$EmojiStatus;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        boolean z10;
        TextView textView;
        TextView textView2;
        TranslateButton translateButton;
        ImageView imageView;
        TLRPC$User user;
        int i;
        int i2;
        boolean z11;
        TextView textView3;
        LinkSpanDrawable.LinksTextView linksTextView;
        View view;
        View view2;
        View view3;
        BlurredFrameLayout blurredFrameLayout;
        View view4;
        Long valueOf;
        int i3;
        TextView textView4;
        TextView textView5;
        TextView textView6;
        TextView textView7;
        TranslateButton translateButton2;
        int i4;
        String formatString;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        if (this.chatMode != 0) {
            return;
        }
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        long j = this.dialog_id;
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
        if (tLRPC$EncryptedChat != null) {
            boolean z12 = (tLRPC$EncryptedChat.admin_id == getUserConfig().getClientUserId() || getContactsController().isLoadingContacts() || getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) != null) ? false : true;
            long j2 = this.currentUser.id;
            int i5 = notificationsSettings.getInt("dialog_bar_vis3" + j2, 0);
            if (z12 && (i5 == 1 || i5 == 3)) {
                z12 = false;
            }
            z2 = z12;
            j = j2;
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(j);
            z2 = notificationsSettings.getInt(sb.toString(), 0) == 2;
        }
        boolean z13 = notificationsSettings.getBoolean("dialog_bar_share" + j, false);
        boolean z14 = notificationsSettings.getBoolean("dialog_bar_report" + j, false);
        boolean z15 = notificationsSettings.getBoolean("dialog_bar_block" + j, false);
        boolean z16 = notificationsSettings.getBoolean("dialog_bar_add" + j, false);
        boolean z17 = notificationsSettings.getBoolean("dialog_bar_archived" + this.dialog_id, false);
        boolean z18 = notificationsSettings.getBoolean("dialog_bar_location" + j, false);
        final String string = notificationsSettings.getString("dialog_bar_chat_with_admin_title" + j, null);
        final boolean z19 = notificationsSettings.getBoolean("dialog_bar_chat_with_channel" + j, false);
        final int i6 = notificationsSettings.getInt("dialog_bar_chat_with_date" + j, 0);
        boolean z20 = notificationsSettings.getBoolean("dialog_bar_invite" + j, false);
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User != null && (z14 || z15)) {
            TLRPC$EmojiStatus tLRPC$EmojiStatus2 = tLRPC$User.emoji_status;
            if (tLRPC$EmojiStatus2 instanceof TLRPC$TL_emojiStatus) {
                z3 = z16;
                z4 = z17;
            } else if (tLRPC$EmojiStatus2 instanceof TLRPC$TL_emojiStatusUntil) {
                z3 = z16;
                z4 = z17;
            }
            tLRPC$EmojiStatus = this.currentUser.emoji_status;
            if (!isInPreviewMode() || (tLRPC$TL_forumTopic = this.forumTopic) == null || !tLRPC$TL_forumTopic.closed || tLRPC$TL_forumTopic.hidden) {
                z5 = z13;
            } else {
                z5 = z13;
                if (ChatObject.canManageTopic(this.currentAccount, this.currentChat, tLRPC$TL_forumTopic)) {
                    z6 = true;
                    if (getUserConfig().isPremium()) {
                        if (getMessagesController().getTranslateController().isDialogTranslatable(getDialogId())) {
                        }
                        z7 = false;
                    } else {
                        if (!getMessagesController().premiumLocked) {
                        }
                        z7 = false;
                    }
                    if (z6) {
                        this.shownRestartTopic = true;
                    }
                    if (z7) {
                        this.shownTranslateTopic = true;
                    }
                    boolean z21 = ((z6 && !this.shownRestartTopic) || z14 || z15 || z18) ? false : true;
                    if (!z2 || z14 || z15 || z18 || z7 || z21) {
                        createTopPanel();
                        if (this.topChatPanelView == null) {
                            return;
                        }
                    }
                    if (z7) {
                        createTranslateButton();
                        TranslateButton translateButton3 = this.translateButton;
                        if (translateButton3 != null) {
                            translateButton3.updateText();
                        }
                    }
                    if ((!this.shownTranslateTopic || this.shownRestartTopic) && !z2) {
                        z8 = false;
                        z9 = true;
                        z3 = false;
                        z14 = false;
                        z15 = false;
                        z10 = false;
                        z18 = false;
                        z5 = false;
                    } else {
                        z8 = z20;
                        z10 = z4;
                        z9 = z2;
                    }
                    textView = this.reportSpamButton;
                    if (textView != null) {
                        textView.setVisibility((z14 || z15 || z18) ? 0 : 8);
                    }
                    textView2 = this.restartTopicButton;
                    if (textView2 != null) {
                        textView2.setVisibility(z21 ? 0 : 8);
                    }
                    translateButton = this.translateButton;
                    if (translateButton != null) {
                        translateButton.setVisibility(z7 ? 0 : 8);
                    }
                    imageView = this.closeReportSpam;
                    if (imageView != null) {
                        imageView.setVisibility((z21 || !(!z7 || z14 || z15 || z18)) ? 8 : 0);
                    }
                    if (!z6) {
                        this.shownRestartTopic = false;
                    }
                    if (!z7) {
                        this.shownTranslateTopic = false;
                    }
                    this.addToContactsButtonArchive = false;
                    user = this.currentUser != null ? getMessagesController().getUser(Long.valueOf(this.currentUser.id)) : null;
                    if (user != null || TextUtils.isEmpty(string)) {
                        i = 8;
                        if (z8) {
                            createTopPanel();
                            if (this.topChatPanelView == null) {
                                return;
                            }
                            this.addToContactsButton.setVisibility(0);
                            this.addToContactsButton.setText(LocaleController.getString("GroupAddMembers", R.string.GroupAddMembers));
                            this.addToContactsButton.setTag(4);
                            TextView textView8 = this.addToContactsButton;
                            int i7 = Theme.key_chat_addContact;
                            textView8.setTextColor(getThemedColor(i7));
                            if (Build.VERSION.SDK_INT >= 21) {
                                Theme.setSelectorDrawableColor(this.addToContactsButton.getBackground(), 436207615 & getThemedColor(i7), true);
                            }
                            this.reportSpamButton.setTag(Integer.valueOf(i7));
                        } else if (user != null) {
                            if (UserObject.isReplyUser(user)) {
                                TextView textView9 = this.addToContactsButton;
                                if (textView9 != null) {
                                    textView9.setVisibility(8);
                                }
                            } else {
                                boolean z22 = user.contact;
                                if (!z22 && !user.self && z3) {
                                    createTopPanel();
                                    if (this.topChatPanelView == null) {
                                        return;
                                    }
                                    this.addContactItem.setVisibility(0);
                                    this.addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
                                    this.addToContactsButton.setVisibility(0);
                                    if (z10) {
                                        this.addToContactsButtonArchive = true;
                                        this.addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
                                        this.addToContactsButton.setTag(3);
                                    } else if (this.reportSpamButton.getVisibility() == 0) {
                                        this.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
                                    } else {
                                        TextPaint paint = this.addToContactsButton.getPaint();
                                        int i8 = R.string.AddContactFullChat;
                                        i2 = 0;
                                        this.addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", i8, TextUtils.ellipsize(UserObject.getFirstName(user), this.addToContactsButton.getPaint(), (getContext().getResources().getDisplayMetrics().widthPixels - paint.measureText(LocaleController.formatString(i8, ""))) - AndroidUtilities.dp(128.0f), TextUtils.TruncateAt.MIDDLE)).toUpperCase());
                                        this.addToContactsButton.setTag(null);
                                        this.addToContactsButton.setVisibility(i2);
                                    }
                                    i2 = 0;
                                    this.addToContactsButton.setTag(null);
                                    this.addToContactsButton.setVisibility(i2);
                                } else if (z5 && !user.self) {
                                    createTopPanel();
                                    if (this.topChatPanelView == null) {
                                        return;
                                    }
                                    this.addContactItem.setVisibility(0);
                                    this.addToContactsButton.setVisibility(0);
                                    this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                                    this.addToContactsButton.setText(LocaleController.getString("ShareMyPhone", R.string.ShareMyPhone).toUpperCase());
                                    this.addToContactsButton.setTag(1);
                                    this.addToContactsButton.setVisibility(0);
                                } else {
                                    if (!z22 && !user.self && !z9) {
                                        createTopPanel();
                                        if (this.topChatPanelView == null) {
                                            return;
                                        }
                                        this.addContactItem.setVisibility(0);
                                        this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                                        this.addToContactsButton.setTag(2);
                                    } else {
                                        ActionBarMenuItem.Item item = this.addContactItem;
                                        if (item != null) {
                                            item.setVisibility(8);
                                        }
                                    }
                                    TextView textView10 = this.addToContactsButton;
                                    if (textView10 != null) {
                                        textView10.setVisibility(8);
                                    }
                                }
                            }
                            TextView textView11 = this.reportSpamButton;
                            if (textView11 != null) {
                                textView11.setText(LocaleController.getString("ReportSpamUser", R.string.ReportSpamUser));
                            }
                        } else {
                            if (z18) {
                                createTopPanel();
                                if (this.topChatPanelView == null) {
                                    return;
                                }
                                this.reportSpamButton.setText(LocaleController.getString("ReportSpamLocation", R.string.ReportSpamLocation));
                                this.reportSpamButton.setTag(R.id.object_tag, 1);
                                TextView textView12 = this.reportSpamButton;
                                int i9 = Theme.key_chat_addContact;
                                textView12.setTextColor(getThemedColor(i9));
                                if (Build.VERSION.SDK_INT >= 21) {
                                    Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor(i9), true);
                                }
                                this.reportSpamButton.setTag(Integer.valueOf(i9));
                            } else {
                                if (z10) {
                                    createTopPanel();
                                    if (this.topChatPanelView == null) {
                                        return;
                                    }
                                    this.addToContactsButtonArchive = true;
                                    this.addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
                                    this.addToContactsButton.setTag(3);
                                    this.addToContactsButton.setVisibility(0);
                                    this.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
                                } else {
                                    TextView textView13 = this.addToContactsButton;
                                    if (textView13 != null) {
                                        textView13.setVisibility(8);
                                    }
                                    TextView textView14 = this.reportSpamButton;
                                    if (textView14 != null) {
                                        textView14.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
                                    }
                                }
                                TextView textView15 = this.reportSpamButton;
                                if (textView15 != null) {
                                    textView15.setTag(R.id.object_tag, null);
                                    TextView textView16 = this.reportSpamButton;
                                    int i10 = Theme.key_text_RedBold;
                                    textView16.setTextColor(getThemedColor(i10));
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor(i10), true);
                                    }
                                    this.reportSpamButton.setTag(Integer.valueOf(i10));
                                }
                            }
                            ActionBarMenuItem.Item item2 = this.addContactItem;
                            if (item2 != null) {
                                item2.setVisibility(8);
                            }
                        }
                        z11 = false;
                    } else {
                        createTopPanel();
                        if (this.topChatPanelView == null) {
                            return;
                        }
                        if (this.chatWithAdminTextView == null) {
                            TextView textView17 = new TextView(getContext());
                            this.chatWithAdminTextView = textView17;
                            textView17.setGravity(16);
                            this.chatWithAdminTextView.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(46.0f), 0);
                            this.chatWithAdminTextView.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_listSelector), 2));
                            this.topChatPanelView.addView(this.chatWithAdminTextView, 0, LayoutHelper.createFrame(-1, 48.0f, 0, 0.0f, 0.0f, 0.0f, 1.0f));
                            this.chatWithAdminTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
                            this.chatWithAdminTextView.setTextSize(1, 14.0f);
                            final TLRPC$User tLRPC$User2 = user;
                            i4 = 8;
                            this.chatWithAdminTextView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.101
                                @Override // android.view.View.OnClickListener
                                public void onClick(View view5) {
                                    AlertsCreator.showChatWithAdmin(ChatActivity.this, tLRPC$User2, string, z19, i6);
                                }
                            });
                        } else {
                            i4 = 8;
                        }
                        if (z19) {
                            formatString = LocaleController.formatString("ChatWithGroupAdmin", R.string.ChatWithGroupAdmin, user.first_name, string);
                        } else {
                            formatString = LocaleController.formatString("ChatWithChannelAdmin", R.string.ChatWithChannelAdmin, user.first_name, string);
                        }
                        this.reportSpamButton.setVisibility(i4);
                        this.addToContactsButton.setVisibility(i4);
                        this.chatWithAdminTextView.setText(AndroidUtilities.replaceTags(formatString));
                        i = 8;
                        z11 = true;
                    }
                    textView3 = this.chatWithAdminTextView;
                    if (textView3 != null) {
                        textView3.setVisibility(z11 ? 0 : 8);
                    }
                    if (!this.userBlocked || (((textView4 = this.addToContactsButton) == null || textView4.getVisibility() == i) && (((textView5 = this.reportSpamButton) == null || textView5.getVisibility() == i) && (((textView6 = this.chatWithAdminTextView) == null || textView6.getVisibility() == i) && (((textView7 = this.restartTopicButton) == null || textView7.getVisibility() == i) && ((translateButton2 = this.translateButton) == null || translateButton2.getVisibility() == i)))))) {
                        z9 = false;
                    }
                    int dp = AndroidUtilities.dp(50.0f);
                    if (tLRPC$EmojiStatus == null && z9) {
                        createTopPanel();
                        if (this.topChatPanelView == null) {
                            return;
                        }
                        this.emojiStatusSpamHint.setVisibility(0);
                        this.topViewSeparator1.setVisibility(0);
                        this.topViewSeparator2.setVisibility(0);
                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(LocaleController.getString("ReportSpamUserEmojiStatusHint", R.string.ReportSpamUserEmojiStatusHint));
                        SpannableString spannableString = new SpannableString("x");
                        TLRPC$EmojiStatus tLRPC$EmojiStatus3 = this.currentUser.emoji_status;
                        if (tLRPC$EmojiStatus3 instanceof TLRPC$TL_emojiStatus) {
                            valueOf = Long.valueOf(((TLRPC$TL_emojiStatus) tLRPC$EmojiStatus3).document_id);
                        } else {
                            valueOf = (!(tLRPC$EmojiStatus3 instanceof TLRPC$TL_emojiStatusUntil) || ((TLRPC$TL_emojiStatusUntil) tLRPC$EmojiStatus3).until <= ((int) (System.currentTimeMillis() / 1000))) ? null : Long.valueOf(((TLRPC$TL_emojiStatusUntil) this.currentUser.emoji_status).document_id);
                        }
                        if (valueOf != null) {
                            AnimatedEmojiSpan animatedEmojiSpan = new AnimatedEmojiSpan(valueOf.longValue(), this.emojiStatusSpamHint.getPaint().getFontMetricsInt());
                            i3 = 0;
                            animatedEmojiSpan.full = false;
                            spannableString.setSpan(animatedEmojiSpan, 0, spannableString.length(), 33);
                        } else {
                            i3 = 0;
                        }
                        SpannableString spannableString2 = new SpannableString(LocaleController.getString("TelegramPremium", R.string.TelegramPremium));
                        spannableString2.setSpan(new ClickableSpan() { // from class: org.telegram.ui.ChatActivity.102
                            @Override // android.text.style.ClickableSpan
                            public void onClick(View view5) {
                                ChatActivity.this.presentFragment(new PremiumPreviewFragment(null));
                            }

                            @Override // android.text.style.ClickableSpan, android.text.style.CharacterStyle
                            public void updateDrawState(TextPaint textPaint) {
                                super.updateDrawState(textPaint);
                                textPaint.setUnderlineText(false);
                            }
                        }, i3, spannableString2.length(), 33);
                        int indexOf = spannableStringBuilder.toString().indexOf("%1$s");
                        if (indexOf >= 0) {
                            spannableStringBuilder.replace(indexOf, indexOf + 4, (CharSequence) spannableString);
                        }
                        int indexOf2 = spannableStringBuilder.toString().indexOf("%2$s");
                        if (indexOf2 >= 0) {
                            spannableStringBuilder.replace(indexOf2, indexOf2 + 4, (CharSequence) spannableString2);
                        }
                        this.emojiStatusSpamHint.setText(spannableStringBuilder);
                        this.emojiStatusSpamHint.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x - AndroidUtilities.dp(50.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(99999, Integer.MIN_VALUE));
                        int dp2 = dp + AndroidUtilities.dp(4.0f);
                        this.emojiStatusSpamHint.setTranslationY(dp2);
                        dp = dp2 + AndroidUtilities.dp(10.0f) + this.emojiStatusSpamHint.getMeasuredHeight();
                    } else {
                        linksTextView = this.emojiStatusSpamHint;
                        if (linksTextView != null) {
                            linksTextView.setVisibility(i);
                        }
                        view = this.topViewSeparator1;
                        if (view != null) {
                            view.setVisibility(i);
                        }
                        view2 = this.topViewSeparator2;
                        if (view2 != null) {
                            view2.setVisibility(i);
                        }
                    }
                    if (z7) {
                        createTopPanel();
                        if (this.topChatPanelView == null) {
                            return;
                        }
                        if (this.restartTopicButton.getVisibility() == 0 || this.reportSpamButton.getVisibility() == 0 || this.addToContactsButton.getVisibility() == 0 || (user != null && !TextUtils.isEmpty(string))) {
                            this.topViewSeparator3.setVisibility(0);
                        } else {
                            dp -= AndroidUtilities.dp(48.0f);
                            this.topViewSeparator3.setVisibility(i);
                        }
                        dp += AndroidUtilities.dp(36.0f);
                    } else {
                        View view5 = this.topViewSeparator3;
                        if (view5 != null) {
                            view5.setVisibility(i);
                        }
                    }
                    view3 = this.topViewSeparator1;
                    if (view3 != null) {
                        View view6 = this.topViewSeparator3;
                        if ((view6 != null && view6.getVisibility() == 0) || ((view4 = this.topViewSeparator2) != null && view4.getVisibility() == 0)) {
                            i = 0;
                        }
                        view3.setVisibility(i);
                    }
                    blurredFrameLayout = this.topChatPanelView;
                    if (blurredFrameLayout != null) {
                        blurredFrameLayout.getLayoutParams().height = dp;
                    }
                    if (z9) {
                        createTopPanel();
                        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
                        if (blurredFrameLayout2 == null) {
                            return;
                        }
                        if (blurredFrameLayout2.getTag() != null) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("show spam button");
                            }
                            this.topChatPanelView.setTag(null);
                            this.topChatPanelView.setVisibility(0);
                            AnimatorSet animatorSet = this.reportSpamViewAnimator;
                            if (animatorSet != null) {
                                animatorSet.cancel();
                                this.reportSpamViewAnimator = null;
                            }
                            if (z) {
                                this.reportSpamViewAnimator = new AnimatorSet();
                                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.topChatPanelViewOffset, 0.0f);
                                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda9
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        ChatActivity.this.lambda$updateTopPanel$160(valueAnimator);
                                    }
                                });
                                this.reportSpamViewAnimator.playTogether(ofFloat);
                                this.reportSpamViewAnimator.setDuration(200L);
                                this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.103
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                            return;
                                        }
                                        ChatActivity.this.reportSpamViewAnimator = null;
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationCancel(Animator animator) {
                                        if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                            return;
                                        }
                                        ChatActivity.this.reportSpamViewAnimator = null;
                                    }
                                });
                                this.reportSpamViewAnimator.start();
                            } else {
                                this.topChatPanelViewOffset = 0.0f;
                                invalidateChatListViewTopPadding();
                                invalidateMessagesVisiblePart();
                            }
                        }
                    } else {
                        BlurredFrameLayout blurredFrameLayout3 = this.topChatPanelView;
                        if (blurredFrameLayout3 != null && blurredFrameLayout3.getTag() == null) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("hide spam button");
                            }
                            this.topChatPanelView.setTag(1);
                            AnimatorSet animatorSet2 = this.reportSpamViewAnimator;
                            if (animatorSet2 != null) {
                                animatorSet2.cancel();
                                this.reportSpamViewAnimator = null;
                            }
                            if (z) {
                                this.reportSpamViewAnimator = new AnimatorSet();
                                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.topChatPanelViewOffset, -dp);
                                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda3
                                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                        ChatActivity.this.lambda$updateTopPanel$161(valueAnimator);
                                    }
                                });
                                this.reportSpamViewAnimator.playTogether(ofFloat2);
                                this.reportSpamViewAnimator.setDuration(200L);
                                this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.104
                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationEnd(Animator animator) {
                                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                            ChatActivity.this.topChatPanelView.setVisibility(8);
                                            ChatActivity.this.reportSpamViewAnimator = null;
                                        }
                                        ChatActivity.this.invalidateChatListViewTopPadding();
                                        ChatActivity.this.invalidateMessagesVisiblePart();
                                    }

                                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                    public void onAnimationCancel(Animator animator) {
                                        if (ChatActivity.this.reportSpamViewAnimator == null || !ChatActivity.this.reportSpamViewAnimator.equals(animator)) {
                                            return;
                                        }
                                        ChatActivity.this.reportSpamViewAnimator = null;
                                    }
                                });
                                this.reportSpamViewAnimator.start();
                            } else {
                                this.topChatPanelViewOffset = -dp;
                                invalidateChatListViewTopPadding();
                                invalidateMessagesVisiblePart();
                            }
                        }
                    }
                    checkListViewPaddings();
                }
            }
            z6 = false;
            if (getUserConfig().isPremium()) {
            }
            if (z6) {
            }
            if (z7) {
            }
            if (z6) {
            }
            if (!z2) {
            }
            createTopPanel();
            if (this.topChatPanelView == null) {
            }
            if (z7) {
            }
            if (this.shownTranslateTopic) {
            }
            z8 = false;
            z9 = true;
            z3 = false;
            z14 = false;
            z15 = false;
            z10 = false;
            z18 = false;
            z5 = false;
            textView = this.reportSpamButton;
            if (textView != null) {
            }
            textView2 = this.restartTopicButton;
            if (textView2 != null) {
            }
            translateButton = this.translateButton;
            if (translateButton != null) {
            }
            imageView = this.closeReportSpam;
            if (imageView != null) {
            }
            if (!z6) {
            }
            if (!z7) {
            }
            this.addToContactsButtonArchive = false;
            if (this.currentUser != null) {
            }
            if (user != null) {
            }
            i = 8;
            if (z8) {
            }
            z11 = false;
            textView3 = this.chatWithAdminTextView;
            if (textView3 != null) {
            }
            if (!this.userBlocked) {
            }
            z9 = false;
            int dp3 = AndroidUtilities.dp(50.0f);
            if (tLRPC$EmojiStatus == null) {
            }
            linksTextView = this.emojiStatusSpamHint;
            if (linksTextView != null) {
            }
            view = this.topViewSeparator1;
            if (view != null) {
            }
            view2 = this.topViewSeparator2;
            if (view2 != null) {
            }
            if (z7) {
            }
            view3 = this.topViewSeparator1;
            if (view3 != null) {
            }
            blurredFrameLayout = this.topChatPanelView;
            if (blurredFrameLayout != null) {
            }
            if (z9) {
            }
            checkListViewPaddings();
        }
        z3 = z16;
        z4 = z17;
        tLRPC$EmojiStatus = null;
        if (isInPreviewMode()) {
        }
        z5 = z13;
        z6 = false;
        if (getUserConfig().isPremium()) {
        }
        if (z6) {
        }
        if (z7) {
        }
        if (z6) {
        }
        if (!z2) {
        }
        createTopPanel();
        if (this.topChatPanelView == null) {
        }
        if (z7) {
        }
        if (this.shownTranslateTopic) {
        }
        z8 = false;
        z9 = true;
        z3 = false;
        z14 = false;
        z15 = false;
        z10 = false;
        z18 = false;
        z5 = false;
        textView = this.reportSpamButton;
        if (textView != null) {
        }
        textView2 = this.restartTopicButton;
        if (textView2 != null) {
        }
        translateButton = this.translateButton;
        if (translateButton != null) {
        }
        imageView = this.closeReportSpam;
        if (imageView != null) {
        }
        if (!z6) {
        }
        if (!z7) {
        }
        this.addToContactsButtonArchive = false;
        if (this.currentUser != null) {
        }
        if (user != null) {
        }
        i = 8;
        if (z8) {
        }
        z11 = false;
        textView3 = this.chatWithAdminTextView;
        if (textView3 != null) {
        }
        if (!this.userBlocked) {
        }
        z9 = false;
        int dp32 = AndroidUtilities.dp(50.0f);
        if (tLRPC$EmojiStatus == null) {
        }
        linksTextView = this.emojiStatusSpamHint;
        if (linksTextView != null) {
        }
        view = this.topViewSeparator1;
        if (view != null) {
        }
        view2 = this.topViewSeparator2;
        if (view2 != null) {
        }
        if (z7) {
        }
        view3 = this.topViewSeparator1;
        if (view3 != null) {
        }
        blurredFrameLayout = this.topChatPanelView;
        if (blurredFrameLayout != null) {
        }
        if (z9) {
        }
        checkListViewPaddings();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$160(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopPanel$161(ValueAnimator valueAnimator) {
        this.topChatPanelViewOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    private void checkListViewPaddings() {
        MessageObject messageObject;
        if (!this.wasManualScroll && (messageObject = this.unreadMessageObject) != null) {
            if (this.messages.indexOf(messageObject) >= 0) {
                this.fixPaddingsInLayout = true;
                View view = this.fragmentView;
                if (view != null) {
                    view.requestLayout();
                }
            }
        } else if (this.checkPaddingsRunnable != null) {
        } else {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda173
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$checkListViewPaddings$162();
                }
            };
            this.checkPaddingsRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkListViewPaddings$162() {
        this.checkPaddingsRunnable = null;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkRaiseSensors() {
        BlurredFrameLayout blurredFrameLayout;
        FrameLayout frameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
            return;
        }
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && !ChatObject.canSendVoice(tLRPC$Chat)) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (!ApplicationLoader.mainInterfacePaused && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && (((frameLayout = this.bottomOverlay) == null || frameLayout.getVisibility() != 0) && ((blurredFrameLayout2 = this.searchContainer) == null || blurredFrameLayout2.getVisibility() != 0)))) {
            MediaController.getInstance().setAllowStartRecord(true);
        } else {
            MediaController.getInstance().setAllowStartRecord(false);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void dismissCurrentDialog() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null && this.visibleDialog == chatAttachAlert) {
            chatAttachAlert.getPhotoLayout().closeCamera(false);
            this.chatAttachAlert.dismissInternal();
            this.chatAttachAlert.getPhotoLayout().hideCamera(true);
            return;
        }
        super.dismissCurrentDialog();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInPreviewMode(boolean z) {
        MessageObject messageObject;
        TLRPC$Message tLRPC$Message;
        super.setInPreviewMode(z);
        if (this.currentUser != null && this.audioCallIconItem != null) {
            TLRPC$UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull != null && userFull.phone_calls_available) {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            } else {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            }
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.setOccupyStatusBar(!z);
            this.avatarContainer.setTitleExpand(this.showAudioCallAsIcon);
            this.avatarContainer.setLayoutParams(LayoutHelper.createFrame(-2, -1.0f, 51, z ? this.chatMode == 2 ? 10 : 0 : 56.0f, 0.0f, 40.0f, 0.0f));
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setVisibility(!z ? 0 : 4);
        }
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.setBackButtonDrawable(!z ? new BackDrawable(false) : null);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(!z ? 1.0f : 0.0f);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setAlpha(z ? 0.0f : 1.0f);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                boolean z2 = childAt instanceof ChatMessageCell;
                if (z2) {
                    messageObject = ((ChatMessageCell) childAt).getMessageObject();
                } else {
                    messageObject = childAt instanceof ChatActionCell ? ((ChatActionCell) childAt).getMessageObject() : null;
                }
                if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.media_unread && tLRPC$Message.mentioned) {
                    if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                        int i2 = this.newMentionsCount - 1;
                        this.newMentionsCount = i2;
                        if (i2 <= 0) {
                            this.newMentionsCount = 0;
                            this.hasAllMentionsLocal = true;
                            showMentionDownButton(false, true);
                        } else {
                            this.mentiondownButtonCounter.setText(String.format(Locale.US, "%d", Integer.valueOf(i2)));
                        }
                        getMessagesController().markMentionMessageAsRead(messageObject.getId(), ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, this.dialog_id);
                        messageObject.setContentIsRead();
                    }
                    if (z2) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        chatMessageCell.setHighlighted(false);
                        chatMessageCell.setHighlightedAnimated();
                    }
                }
            }
            this.chatListView.setItemAnimator(null);
        }
        updateBottomOverlay();
        updateSecretStatus();
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.setEnabled(!z);
        }
        FragmentContextView fragmentContextView2 = this.fragmentLocationContextView;
        if (fragmentContextView2 != null) {
            fragmentContextView2.setEnabled(!z);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setEnabled(true ^ isInPreviewMode());
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onResume() {
        ChatActivityEnterView chatActivityEnterView;
        MessageObject messageObject;
        boolean z;
        BackupImageView backupImageView;
        super.onResume();
        checkShowBlur(false);
        this.activityResumeTime = System.currentTimeMillis();
        if (this.openImport && getSendMessagesHelper().getImportingHistory(this.dialog_id) != null) {
            ImportingAlert importingAlert = new ImportingAlert(getParentActivity(), null, this, this.themeDelegate);
            importingAlert.setOnHideListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda51
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$onResume$163(dialogInterface);
                }
            });
            showDialog(importingAlert);
            this.openImport = false;
        }
        checkAdjustResize();
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.onResume();
        }
        checkChecksHint();
        Bulletin.Delegate delegate = new Bulletin.Delegate() { // from class: org.telegram.ui.ChatActivity.105
            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public boolean allowLayoutChanges() {
                return false;
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ boolean clipWithGradient(int i) {
                return Bulletin.Delegate.-CC.$default$clipWithGradient(this, i);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onBottomOffsetChange(float f) {
                Bulletin.Delegate.-CC.$default$onBottomOffsetChange(this, f);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onHide(Bulletin bulletin) {
                Bulletin.Delegate.-CC.$default$onHide(this, bulletin);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onShow(Bulletin bulletin) {
                Bulletin.Delegate.-CC.$default$onShow(this, bulletin);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public int getBottomOffset(int i) {
                int dp;
                if (i == 1) {
                    return 0;
                }
                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && chatActivityEnterView2.getVisibility() == 0) {
                    if ((ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) || ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                        dp = ChatActivity.this.chatActivityEnterView.getHeight() + ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                    } else {
                        dp = ChatActivity.this.chatActivityEnterView.getHeight();
                    }
                } else {
                    dp = AndroidUtilities.dp(51.0f);
                }
                if (ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    dp = (int) (dp + (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding()));
                }
                return ((int) (dp + ChatActivity.this.contentPanTranslation)) - AndroidUtilities.dp(1.5f);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public int getTopOffset(int i) {
                return (((BaseFragment) ChatActivity.this).actionBar != null ? ((BaseFragment) ChatActivity.this).actionBar.getMeasuredHeight() + ((int) ((BaseFragment) ChatActivity.this).actionBar.getTranslationY()) : 0) + Math.max(0, ChatActivity.this.contentPaddingTop);
            }
        };
        this.bulletinDelegate = delegate;
        Bulletin.addDelegate(this, delegate);
        checkActionBarMenu(false);
        TLRPC$PhotoSize tLRPC$PhotoSize = this.replyImageLocation;
        if (tLRPC$PhotoSize != null && (backupImageView = this.replyImageView) != null) {
            backupImageView.setImage(ImageLocation.getForObject(tLRPC$PhotoSize, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
        }
        if (this.pinnedImageLocation != null && this.pinnedMessageImageView != null) {
            this.pinnedMessageImageView[0].setImage(ImageLocation.getForObject(this.pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId)));
            this.pinnedMessageImageView[0].setHasBlur(this.pinnedImageHasBlur);
        }
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(this.dialog_id, getTopicId());
        }
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, true);
        if (this.scrollToTopOnResume) {
            if (this.scrollToTopUnReadOnResume && (messageObject = this.scrollToMessage) != null) {
                if (this.chatListView != null) {
                    int i = this.scrollToMessagePosition;
                    if (i == -9000) {
                        i = getScrollOffsetForMessage(messageObject);
                    } else if (i == -10000) {
                        i = -AndroidUtilities.dp(11.0f);
                    } else {
                        z = true;
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                    }
                    z = false;
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), i, z);
                }
            } else {
                moveScrollToLastMessage(false);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
        if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() != 0 && !this.actionBar.isSearchFieldVisible()) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda143
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$onResume$164();
                }
            });
        }
        if (this.chatListView != null && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
        updateTitle(false);
        showGigagroupConvertAlert();
        if (this.pullingDownOffset != 0.0f) {
            this.pullingDownOffset = 0.0f;
            this.chatListView.invalidate();
        }
        this.flagSecure.attach();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$163(DialogInterface dialogInterface) {
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.checkImport(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onResume$164() {
        openVideoEditor(this.startVideoEdit, null);
        this.startVideoEdit = null;
    }

    public float getPullingDownOffset() {
        return this.pullingDownOffset;
    }

    public void checkAdjustResize() {
        if (this.reportType >= 0) {
            AndroidUtilities.requestAdjustNothing(getParentActivity(), this.classGuid);
        } else {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void finishFragment() {
        super.finishFragment();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:136:0x0230  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x0269  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onPause() {
        MessageObject messageObject;
        CharSequence charSequence;
        boolean z;
        int i;
        int i2;
        boolean z2;
        RecyclerListView.Holder holder;
        int id;
        int id2;
        BlurredFrameLayout blurredFrameLayout;
        super.onPause();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        int i3 = 0;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
        getMessagesController().markDialogAsReadNow(this.dialog_id, this.threadMessageId);
        MediaController.getInstance().stopRaiseToEarSensors(this, true, true);
        this.paused = true;
        this.wasPaused = true;
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(0L, 0);
        }
        Bulletin.removeDelegate(this);
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, false);
        TLRPC$Message tLRPC$Message = null;
        if (this.ignoreAttachOnPause || this.chatActivityEnterView == null || (blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() == 0) {
            messageObject = null;
            charSequence = null;
            z = true;
        } else {
            this.chatActivityEnterView.onPause();
            messageObject = this.replyingMessageObject;
            charSequence = AndroidUtilities.getTrimmedString(this.chatActivityEnterView.getDraftMessage());
            z = this.chatActivityEnterView.isMessageWebPageSearchEnabled();
            this.chatActivityEnterView.setFieldFocused(false);
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            if (!this.ignoreAttachOnPause) {
                chatAttachAlert.onPause();
            } else {
                this.ignoreAttachOnPause = false;
            }
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.onPause();
        }
        if (this.chatMode == 0) {
            CharSequence[] charSequenceArr = {charSequence};
            MediaDataController mediaDataController = getMediaDataController();
            TLRPC$EncryptedChat tLRPC$EncryptedChat = this.currentEncryptedChat;
            ArrayList<TLRPC$MessageEntity> entities = mediaDataController.getEntities(charSequenceArr, tLRPC$EncryptedChat == null || AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 101);
            if (ChatObject.isForum(this.currentChat) && !this.isTopic && messageObject != null) {
                TLRPC$TL_forumTopic tLRPC$TL_forumTopic = messageObject.replyToForumTopic;
                if (tLRPC$TL_forumTopic != null) {
                    i = tLRPC$TL_forumTopic.id;
                } else {
                    i = MessageObject.getTopicId(messageObject.messageOwner, ChatObject.isForum(this.currentChat));
                }
            } else {
                i = this.threadMessageId;
            }
            int i4 = i;
            MediaDataController mediaDataController2 = getMediaDataController();
            long j = this.dialog_id;
            CharSequence charSequence2 = charSequenceArr[0];
            if (messageObject != null && !messageObject.isTopicMainMessage && messageObject.replyToForumTopic == null) {
                tLRPC$Message = messageObject.messageOwner;
            }
            mediaDataController2.saveDraft(j, i4, charSequence2, entities, tLRPC$Message, !z);
            getMessagesController().lambda$sendTyping$154(0, this.dialog_id, this.threadMessageId);
            if (!this.pausedOnLastMessage && !this.firstLoading && (!isThreadChat() || this.isTopic)) {
                SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                if (this.chatLayoutManager != null) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= this.chatListView.getChildCount()) {
                            z2 = false;
                            break;
                        } else if ((this.chatListView.getChildAt(i5) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i5)).getMessageObject().isSponsored()) {
                            z2 = true;
                            break;
                        } else {
                            i5++;
                        }
                    }
                    int findFirstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                    if (findFirstVisibleItemPosition != 0 && !z2 && (holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition)) != null) {
                        View view = holder.itemView;
                        if (view instanceof ChatMessageCell) {
                            id = ((ChatMessageCell) view).getMessageObject().getId();
                        } else {
                            id = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject().getId() : 0;
                        }
                        if (id == 0) {
                            holder = (RecyclerListView.Holder) this.chatListView.findViewHolderForAdapterPosition(findFirstVisibleItemPosition + 1);
                        }
                        int i6 = findFirstVisibleItemPosition - 1;
                        int i7 = 0;
                        boolean z3 = false;
                        while (true) {
                            int i8 = this.chatAdapter.messagesStartRow;
                            if (i6 < i8) {
                                break;
                            }
                            int i9 = i6 - i8;
                            if (i9 >= 0 && i9 < this.messages.size()) {
                                MessageObject messageObject2 = this.messages.get(i9);
                                if (messageObject2.getId() != 0) {
                                    if ((!messageObject2.isOut() || messageObject2.messageOwner.from_scheduled) && messageObject2.isUnread()) {
                                        z3 = true;
                                    }
                                    if (i7 > 2) {
                                        break;
                                    }
                                    i7++;
                                } else {
                                    continue;
                                }
                            }
                            i6--;
                        }
                        if (holder != null && !z3) {
                            View view2 = holder.itemView;
                            if (view2 instanceof ChatMessageCell) {
                                id2 = ((ChatMessageCell) view2).getMessageObject().getId();
                            } else {
                                id2 = view2 instanceof ChatActionCell ? ((ChatActionCell) view2).getMessageObject().getId() : 0;
                            }
                            if ((id2 > 0 && this.currentEncryptedChat == null) || (id2 < 0 && this.currentEncryptedChat != null)) {
                                int bottom = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("save offset = " + bottom + " for mid " + id2);
                                }
                                i2 = bottom;
                                i3 = id2;
                                if (i3 == 0) {
                                    edit.putInt("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i3);
                                    edit.putInt("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()), i2);
                                } else {
                                    this.pausedOnLastMessage = true;
                                    edit.remove("diditem" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()));
                                    edit.remove("diditemo" + NotificationsController.getSharedPrefKey(this.dialog_id, getTopicId()));
                                }
                                edit.commit();
                            }
                        }
                    }
                }
                i2 = 0;
                if (i3 == 0) {
                }
                edit.commit();
            }
            if (this.currentUser != null) {
                this.chatLeaveTime = System.currentTimeMillis();
                updateInformationForScreenshotDetector();
            }
            hideUndoViews();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.endAnimations();
        }
        RecyclerAnimationScrollHelper recyclerAnimationScrollHelper = this.chatScrollHelper;
        if (recyclerAnimationScrollHelper != null) {
            recyclerAnimationScrollHelper.cancel();
        }
        if (AvatarPreviewer.hasVisibleInstance()) {
            AvatarPreviewer.getInstance().close();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void applyDraftMaybe(boolean z) {
        TLRPC$DraftMessage draft;
        Integer num;
        TLRPC$Message tLRPC$Message;
        MessageObject messageObject;
        TLRPC$TL_forumTopic findTopic;
        TLRPC$DraftMessage tLRPC$DraftMessage;
        String str;
        TLRPC$DraftMessage tLRPC$DraftMessage2;
        long j;
        Paint.FontMetricsInt fontMetricsInt;
        AnimatedEmojiSpan animatedEmojiSpan;
        TLRPC$DraftMessage tLRPC$DraftMessage3;
        Integer num2;
        if (this.chatActivityEnterView == null || this.chatMode != 0) {
            return;
        }
        Paint.FontMetricsInt fontMetricsInt2 = null;
        if (ChatObject.isForum(this.currentChat) && !this.isTopic) {
            Pair<Integer, TLRPC$DraftMessage> oneThreadDraft = getMediaDataController().getOneThreadDraft(this.dialog_id);
            if (oneThreadDraft != null) {
                num2 = (Integer) oneThreadDraft.first;
                tLRPC$DraftMessage3 = (TLRPC$DraftMessage) oneThreadDraft.second;
            } else {
                tLRPC$DraftMessage3 = null;
                num2 = null;
            }
            num = num2;
            draft = tLRPC$DraftMessage3;
        } else {
            draft = getMediaDataController().getDraft(this.dialog_id, this.threadMessageId);
            num = null;
        }
        if (draft == null || draft.reply_to_msg_id == 0) {
            tLRPC$Message = null;
        } else {
            tLRPC$Message = getMediaDataController().getDraftMessage(this.dialog_id, num != null ? num.intValue() : this.threadMessageId);
        }
        if (this.chatActivityEnterView.getFieldText() != null) {
            TLRPC$DraftMessage tLRPC$DraftMessage4 = draft;
            if (z && tLRPC$DraftMessage4 == null) {
                this.chatActivityEnterView.setFieldText("");
                hideFieldPanel(true);
            }
        } else if (draft != null) {
            this.chatActivityEnterView.setWebPage(null, !draft.no_webpage);
            if (!draft.entities.isEmpty()) {
                SpannableStringBuilder valueOf = SpannableStringBuilder.valueOf(draft.message);
                MediaDataController.sortEntities(draft.entities);
                int i = 0;
                while (i < draft.entities.size()) {
                    TLRPC$MessageEntity tLRPC$MessageEntity = draft.entities.get(i);
                    boolean z2 = tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName;
                    if (z2 || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName)) {
                        tLRPC$DraftMessage2 = draft;
                        if (z2) {
                            j = ((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id;
                        } else {
                            j = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                        }
                        if (tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length < valueOf.length() && valueOf.charAt(tLRPC$MessageEntity.offset + tLRPC$MessageEntity.length) == ' ') {
                            tLRPC$MessageEntity.length++;
                        }
                        URLSpanUserMention uRLSpanUserMention = new URLSpanUserMention("" + j, 3);
                        int i2 = tLRPC$MessageEntity.offset;
                        valueOf.setSpan(uRLSpanUserMention, i2, tLRPC$MessageEntity.length + i2, 33);
                    } else if ((tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCode) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityPre)) {
                        tLRPC$DraftMessage2 = draft;
                        TextStyleSpan.TextStyleRun textStyleRun = new TextStyleSpan.TextStyleRun();
                        textStyleRun.flags |= 4;
                        TextStyleSpan textStyleSpan = new TextStyleSpan(textStyleRun);
                        int i3 = tLRPC$MessageEntity.offset;
                        MediaDataController.addStyleToText(textStyleSpan, i3, tLRPC$MessageEntity.length + i3, valueOf, true);
                    } else {
                        if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityBold) {
                            TextStyleSpan.TextStyleRun textStyleRun2 = new TextStyleSpan.TextStyleRun();
                            textStyleRun2.flags |= 1;
                            TextStyleSpan textStyleSpan2 = new TextStyleSpan(textStyleRun2);
                            int i4 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan2, i4, tLRPC$MessageEntity.length + i4, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityItalic) {
                            TextStyleSpan.TextStyleRun textStyleRun3 = new TextStyleSpan.TextStyleRun();
                            textStyleRun3.flags |= 2;
                            TextStyleSpan textStyleSpan3 = new TextStyleSpan(textStyleRun3);
                            int i5 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan3, i5, tLRPC$MessageEntity.length + i5, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityStrike) {
                            TextStyleSpan.TextStyleRun textStyleRun4 = new TextStyleSpan.TextStyleRun();
                            textStyleRun4.flags |= 8;
                            TextStyleSpan textStyleSpan4 = new TextStyleSpan(textStyleRun4);
                            int i6 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan4, i6, tLRPC$MessageEntity.length + i6, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityUnderline) {
                            TextStyleSpan.TextStyleRun textStyleRun5 = new TextStyleSpan.TextStyleRun();
                            textStyleRun5.flags |= 16;
                            TextStyleSpan textStyleSpan5 = new TextStyleSpan(textStyleRun5);
                            int i7 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan5, i7, tLRPC$MessageEntity.length + i7, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityTextUrl) {
                            URLSpanReplacement uRLSpanReplacement = new URLSpanReplacement(tLRPC$MessageEntity.url);
                            int i8 = tLRPC$MessageEntity.offset;
                            valueOf.setSpan(uRLSpanReplacement, i8, tLRPC$MessageEntity.length + i8, 33);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntitySpoiler) {
                            TextStyleSpan.TextStyleRun textStyleRun6 = new TextStyleSpan.TextStyleRun();
                            textStyleRun6.flags |= LiteMode.FLAG_CHAT_BLUR;
                            TextStyleSpan textStyleSpan6 = new TextStyleSpan(textStyleRun6);
                            int i9 = tLRPC$MessageEntity.offset;
                            MediaDataController.addStyleToText(textStyleSpan6, i9, tLRPC$MessageEntity.length + i9, valueOf, true);
                        } else if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji) {
                            try {
                                fontMetricsInt = this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt();
                            } catch (Exception e) {
                                FileLog.e((Throwable) e, false);
                                fontMetricsInt = fontMetricsInt2;
                            }
                            TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji = (TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity;
                            if (tLRPC$TL_messageEntityCustomEmoji.document != null) {
                                animatedEmojiSpan = new AnimatedEmojiSpan(tLRPC$TL_messageEntityCustomEmoji.document, fontMetricsInt);
                                tLRPC$DraftMessage2 = draft;
                            } else {
                                tLRPC$DraftMessage2 = draft;
                                animatedEmojiSpan = new AnimatedEmojiSpan(tLRPC$TL_messageEntityCustomEmoji.document_id, fontMetricsInt);
                            }
                            int i10 = tLRPC$MessageEntity.offset;
                            valueOf.setSpan(animatedEmojiSpan, i10, tLRPC$MessageEntity.length + i10, 33);
                        }
                        tLRPC$DraftMessage2 = draft;
                    }
                    i++;
                    draft = tLRPC$DraftMessage2;
                    fontMetricsInt2 = null;
                }
                tLRPC$DraftMessage = draft;
                str = valueOf;
            } else {
                tLRPC$DraftMessage = draft;
                str = tLRPC$DraftMessage.message;
            }
            this.chatActivityEnterView.setFieldText(str);
            if (getArguments().getBoolean("hasUrl", false)) {
                this.chatActivityEnterView.setSelection(tLRPC$DraftMessage.message.indexOf(10) + 1);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda156
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$applyDraftMaybe$165();
                    }
                }, 700L);
            }
        }
        MessageObject messageObject2 = this.replyingMessageObject;
        if ((messageObject2 == null || this.threadMessageObject == messageObject2) && tLRPC$Message != null && ((messageObject = this.threadMessageObject) == null || messageObject.getId() != tLRPC$Message.id)) {
            MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (AbstractMap<Long, TLRPC$User>) getMessagesController().getUsers(), false, false);
            this.replyingMessageObject = messageObject3;
            showFieldPanelForReply(messageObject3);
            updateBottomOverlay();
        } else if (num == null || num.intValue() == 0 || this.currentChat == null || (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.id, num.intValue())) == null || findTopic.topicStartMessage == null) {
        } else {
            MessageObject messageObject4 = new MessageObject(this.currentAccount, findTopic.topicStartMessage, (AbstractMap<Long, TLRPC$User>) getMessagesController().getUsers(), false, false);
            this.replyingMessageObject = messageObject4;
            messageObject4.replyToForumTopic = findTopic;
            showFieldPanelForReply(messageObject4);
            updateBottomOverlay();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyDraftMaybe$165() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setFieldFocused(true);
            this.chatActivityEnterView.openKeyboard();
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat != null) {
            ArrayList<Long> arrayList = new ArrayList<>();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                int childCount = recyclerListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = this.chatListView.getChildAt(i);
                    MessageObject messageObject = childAt instanceof ChatMessageCell ? ((ChatMessageCell) childAt).getMessageObject() : null;
                    if (messageObject != null && messageObject.getId() < 0) {
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            arrayList.add(Long.valueOf(j));
                        }
                    }
                }
            }
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, arrayList, 0);
            return;
        }
        SecretMediaViewer secretMediaViewer = SecretMediaViewer.getInstance();
        MessageObject currentMessageObject = secretMediaViewer.getCurrentMessageObject();
        if (currentMessageObject == null || currentMessageObject.isOut()) {
            return;
        }
        MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, secretMediaViewer.getOpenTime(), secretMediaViewer.getCloseTime(), this.currentUser, null, null, currentMessageObject.getId());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean fixLayoutInternal() {
        boolean z;
        MessageObject.GroupedMessages currentMessagesGroup;
        NumberTextView numberTextView = this.selectedMessagesCountTextView;
        if (numberTextView != null) {
            numberTextView.setTextSize((AndroidUtilities.isTablet() || ApplicationLoader.applicationContext.getResources().getConfiguration().orientation != 2) ? 20 : 18);
        }
        int childCount = this.chatListView.getChildCount();
        HashMap hashMap = null;
        int i = 0;
        while (true) {
            z = true;
            if (i >= childCount) {
                break;
            }
            View childAt = this.chatListView.getChildAt(i);
            if ((childAt instanceof ChatMessageCell) && (currentMessagesGroup = ((ChatMessageCell) childAt).getCurrentMessagesGroup()) != null && currentMessagesGroup.hasSibling && !currentMessagesGroup.messages.isEmpty()) {
                if (hashMap == null) {
                    hashMap = new HashMap();
                }
                if (!hashMap.containsKey(Long.valueOf(currentMessagesGroup.groupId))) {
                    hashMap.put(Long.valueOf(currentMessagesGroup.groupId), currentMessagesGroup);
                    ArrayList<MessageObject> arrayList = currentMessagesGroup.messages;
                    int indexOf = this.messages.indexOf(arrayList.get(arrayList.size() - 1));
                    if (indexOf >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(indexOf + chatActivityAdapter.messagesStartRow, currentMessagesGroup.messages.size());
                        this.chatListView.setItemAnimator(null);
                    }
                }
            }
            i++;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            } else {
                ActionBar actionBar = this.actionBar;
                INavigationLayout iNavigationLayout = this.parentLayout;
                if (iNavigationLayout != null && !iNavigationLayout.getFragmentStack().isEmpty() && this.parentLayout.getFragmentStack().get(0) != this && this.parentLayout.getFragmentStack().size() != 1) {
                    z = false;
                }
                actionBar.setBackButtonDrawable(new BackDrawable(z));
            }
            return false;
        }
        return true;
    }

    private void fixLayout() {
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.106
                @Override // android.view.ViewTreeObserver.OnPreDrawListener
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    public boolean maybePlayVisibleVideo() {
        AnimatedFileDrawable animatedFileDrawable;
        MessageObject messageObject;
        ImageReceiver photoImage;
        AnimatedFileDrawable animation;
        ChatMessageCell messageCell;
        if (this.chatListView == null) {
            return false;
        }
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject == null || playingMessageObject.isVideo()) {
            HintView hintView = this.noSoundHintView;
            if (hintView == null || hintView.getTag() == null || (messageCell = this.noSoundHintView.getMessageCell()) == null) {
                animatedFileDrawable = null;
                messageObject = null;
            } else {
                ImageReceiver photoImage2 = messageCell.getPhotoImage();
                animatedFileDrawable = photoImage2.getAnimation();
                if (animatedFileDrawable != null) {
                    messageObject = messageCell.getMessageObject();
                    this.scrollToVideo = ((float) messageCell.getTop()) + photoImage2.getImageY2() > ((float) this.chatListView.getMeasuredHeight());
                } else {
                    messageObject = null;
                }
            }
            if (messageObject == null) {
                int childCount = this.chatListView.getChildCount();
                int i = 0;
                while (true) {
                    if (i >= childCount) {
                        break;
                    }
                    View childAt = this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject messageObject2 = chatMessageCell.getMessageObject();
                        boolean isRoundVideo = messageObject2.isRoundVideo();
                        if ((messageObject2.isVideo() || isRoundVideo) && messageObject2.videoEditedInfo == null && (animation = (photoImage = chatMessageCell.getPhotoImage()).getAnimation()) != null) {
                            float top = childAt.getTop() + photoImage.getImageY();
                            float imageHeight = photoImage.getImageHeight() + top;
                            if (imageHeight >= 0.0f && top <= this.chatListView.getMeasuredHeight()) {
                                if (messageObject != null && top < 0.0f) {
                                    break;
                                }
                                this.scrollToVideo = top < 0.0f || imageHeight > ((float) this.chatListView.getMeasuredHeight());
                                if (top >= 0.0f && imageHeight <= this.chatListView.getMeasuredHeight()) {
                                    messageObject = messageObject2;
                                    animatedFileDrawable = animation;
                                    break;
                                }
                                messageObject = messageObject2;
                                animatedFileDrawable = animation;
                            }
                        }
                    }
                    i++;
                }
            }
            if (messageObject == null || MediaController.getInstance().isPlayingMessage(messageObject)) {
                return false;
            }
            hideHints(true);
            if (messageObject.isRoundVideo()) {
                boolean playMessage = MediaController.getInstance().playMessage(messageObject);
                MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return playMessage;
            }
            SharedConfig.setNoSoundHintShowed(true);
            messageObject.audioProgress = animatedFileDrawable.getCurrentProgress();
            messageObject.audioProgressMs = animatedFileDrawable.getCurrentProgressMs();
            animatedFileDrawable.stop();
            if (PhotoViewer.isPlayingMessageInPip(messageObject)) {
                PhotoViewer.getPipInstance().destroyPhotoViewer();
            }
            return MediaController.getInstance().playMessage(messageObject);
        }
        return false;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onConfigurationChanged(Configuration configuration) {
        MessageObject playingMessageObject;
        fixLayout();
        Dialog dialog = this.visibleDialog;
        if (dialog instanceof DatePickerDialog) {
            dialog.dismiss();
        }
        closeMenu();
        if (AndroidUtilities.isTablet()) {
            return;
        }
        if (configuration.orientation == 2) {
            if ((PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || !playingMessageObject.isVideo()) {
                return;
            }
            PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            MediaController.getInstance().cleanupPlayer(true, true, false, true);
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i = playingMessageObject.type;
            if (photoViewer.openPhoto(playingMessageObject, i != 0 ? this.dialog_id : 0L, i != 0 ? this.mergeDialogId : 0L, i != 0 ? getTopicId() : 0, this.photoViewerProvider, false)) {
                PhotoViewer.getInstance().setParentChatActivity(this);
            }
            hideHints(false);
            MediaController.getInstance().resetGoingToShowMessageObject();
        } else if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
            PhotoViewer.getInstance().injectVideoPlayerToMediaController();
            PhotoViewer.getInstance().closePhoto(false, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        createDeleteMessagesAlert(messageObject, groupedMessages, 1);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i) {
        createDeleteMessagesAlert(messageObject, groupedMessages, i, false);
    }

    private void createDeleteMessagesAlert(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int i, boolean z) {
        if (messageObject == null && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, messageObject, this.selectedMessagesIds, groupedMessages, this.chatMode == 1, i, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda178
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$166();
            }
        }, z ? new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createDeleteMessagesAlert$167();
            }
        } : null, this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$166() {
        hideActionMode();
        updatePinnedMessageView(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createDeleteMessagesAlert$167() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void hideActionMode() {
        EditTextCaption editField;
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            if (!actionBar.isActionModeShowed()) {
                return;
            }
            this.actionBar.hideActionMode();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.cantSaveMessagesCount = 0;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && (editField = chatActivityEnterView.getEditField()) != null) {
            if (this.chatActivityEnterView.getVisibility() == 0) {
                editField.requestFocus();
            }
            editField.setAllowDrawCursor(true);
        }
        ChatActivityTextSelectionHelper chatActivityTextSelectionHelper = this.textSelectionHelper;
        if (chatActivityTextSelectionHelper != null) {
            chatActivityTextSelectionHelper.clear(true);
            this.textSelectionHelper.cancelAllAnimators();
        }
        TextSelectionHint textSelectionHint = this.textSelectionHint;
        if (textSelectionHint != null) {
            textSelectionHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.preventInput = false;
        }
        this.textSelectionHintWasShowed = false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean createMenu(View view, boolean z, boolean z2, float f, float f2) {
        return createMenu(view, z, z2, f, f2, true);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        return getMessageCaption(messageObject, groupedMessages, null);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, int[] iArr) {
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (TextUtils.isEmpty(restrictionReason)) {
            if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
                return messageObject.getVoiceTranscription();
            }
            CharSequence charSequence = messageObject.caption;
            if (charSequence != null) {
                return charSequence;
            }
            if (groupedMessages == null) {
                return null;
            }
            int size = groupedMessages.messages.size();
            CharSequence charSequence2 = null;
            for (int i = 0; i < size; i++) {
                MessageObject messageObject2 = groupedMessages.messages.get(i);
                CharSequence charSequence3 = messageObject2.caption;
                if (charSequence3 != null) {
                    if (charSequence2 != null) {
                        return null;
                    }
                    if (iArr != null) {
                        iArr[0] = messageObject2.getId();
                    }
                    charSequence2 = charSequence3;
                }
            }
            return charSequence2;
        }
        return restrictionReason;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:380:0x0724, code lost:
        if (org.telegram.messenger.Emoji.fullyConsistsOfEmojis(r3) != false) goto L1427;
     */
    /* JADX WARN: Code restructure failed: missing block: B:628:0x0ca9, code lost:
        if (r0.edit_messages != false) goto L1123;
     */
    /* JADX WARN: Code restructure failed: missing block: B:958:0x16ee, code lost:
        if (r2.isEmpty() == false) goto L847;
     */
    /* JADX WARN: Code restructure failed: missing block: B:971:0x1713, code lost:
        if ((r7.available_reactions instanceof org.telegram.tgnet.TLRPC$TL_chatReactionsNone) == false) goto L860;
     */
    /* JADX WARN: Code restructure failed: missing block: B:974:0x171d, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(r57.currentChat) == false) goto L860;
     */
    /* JADX WARN: Code restructure failed: missing block: B:976:0x1721, code lost:
        if (r57.currentUser != null) goto L860;
     */
    /* JADX WARN: Code restructure failed: missing block: B:978:0x1727, code lost:
        if (r2.isEmpty() != false) goto L369;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1037:0x1808  */
    /* JADX WARN: Removed duplicated region for block: B:1055:0x1880  */
    /* JADX WARN: Removed duplicated region for block: B:1056:0x1885  */
    /* JADX WARN: Removed duplicated region for block: B:1059:0x18c1  */
    /* JADX WARN: Removed duplicated region for block: B:1060:0x18c3  */
    /* JADX WARN: Removed duplicated region for block: B:1063:0x18cb  */
    /* JADX WARN: Removed duplicated region for block: B:1064:0x18d0  */
    /* JADX WARN: Removed duplicated region for block: B:1067:0x18eb  */
    /* JADX WARN: Removed duplicated region for block: B:1090:0x1a78  */
    /* JADX WARN: Removed duplicated region for block: B:1278:0x23b6  */
    /* JADX WARN: Removed duplicated region for block: B:1281:0x23e4  */
    /* JADX WARN: Removed duplicated region for block: B:1282:0x23ed  */
    /* JADX WARN: Removed duplicated region for block: B:1402:0x2735  */
    /* JADX WARN: Removed duplicated region for block: B:1403:0x273c  */
    /* JADX WARN: Removed duplicated region for block: B:1408:0x2768  */
    /* JADX WARN: Removed duplicated region for block: B:1411:0x2793  */
    /* JADX WARN: Removed duplicated region for block: B:1413:0x2796  */
    /* JADX WARN: Removed duplicated region for block: B:1424:0x27f6  */
    /* JADX WARN: Removed duplicated region for block: B:1430:0x2815  */
    /* JADX WARN: Removed duplicated region for block: B:1431:0x2819  */
    /* JADX WARN: Removed duplicated region for block: B:1434:0x2834  */
    /* JADX WARN: Removed duplicated region for block: B:1437:0x283b  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0308  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x032c  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x032e  */
    /* JADX WARN: Removed duplicated region for block: B:294:0x0535 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:295:0x0536  */
    /* JADX WARN: Removed duplicated region for block: B:395:0x0767  */
    /* JADX WARN: Removed duplicated region for block: B:409:0x07d0  */
    /* JADX WARN: Removed duplicated region for block: B:911:0x1640  */
    /* JADX WARN: Removed duplicated region for block: B:912:0x1643  */
    /* JADX WARN: Removed duplicated region for block: B:917:0x1655 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:922:0x165e  */
    /* JADX WARN: Removed duplicated region for block: B:924:0x1667  */
    /* JADX WARN: Type inference failed for: r12v37 */
    /* JADX WARN: Type inference failed for: r12v5 */
    /* JADX WARN: Type inference failed for: r12v6, types: [int, boolean] */
    @SuppressLint({"ClickableViewAccessibility"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean createMenu(final View view, boolean z, boolean z2, float f, float f2, boolean z3) {
        MessageObject messageObject;
        MessageObject messageObject2;
        boolean z4;
        boolean z5;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        ArrayList arrayList;
        int[] iArr;
        CharSequence charSequence;
        long j;
        ArrayList arrayList2;
        boolean z10;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout;
        ArrayList arrayList3;
        boolean z11;
        boolean z12;
        AtomicReference atomicReference;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout2;
        Rect rect;
        AtomicBoolean atomicBoolean;
        Rect rect2;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout3;
        MessageObject messageObject3;
        MessageObject messageObject4;
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        AtomicBoolean atomicBoolean2;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout4;
        final ReactionsContainerLayout reactionsContainerLayout;
        MessageObject messageObject5;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout5;
        AnimatedEmojiSpan[] animatedEmojiSpanArr2;
        AnimatedEmojiSpan[] animatedEmojiSpanArr3;
        boolean z13;
        String string;
        int left;
        int height;
        int measuredHeight;
        int measureKeyboardHeight;
        int i;
        UndoView undoView;
        UndoView undoView2;
        ChatActivityEnterView chatActivityEnterView;
        int dp;
        AtomicReference atomicReference2;
        AtomicBoolean atomicBoolean3;
        final MessageObject messageObject6;
        ArrayList arrayList4;
        ArrayList arrayList5;
        final ChatActivity chatActivity;
        ArrayList arrayList6;
        ?? r12;
        int i2;
        String str;
        int i3;
        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout6;
        boolean z14;
        boolean z15;
        final ArrayList arrayList7;
        ArrayList arrayList8;
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout7;
        int i4;
        final int i5;
        final AtomicBoolean atomicBoolean4;
        final AtomicReference atomicReference3;
        ArrayList arrayList9;
        TLRPC$InputPeer inputPeer;
        TLRPC$Message tLRPC$Message;
        TLRPC$Chat tLRPC$Chat;
        MessageObject messageObject7;
        int i6;
        int i7;
        int i8;
        TLRPC$Message tLRPC$Message2;
        int i9;
        int i10;
        int i11;
        boolean z16;
        boolean z17;
        ReactedUsersListView.ContainerLinerLayout containerLinerLayout;
        final int[] iArr2;
        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout8;
        final ReactedUsersListView onHeightChangedListener;
        ReactedHeaderView reactedHeaderView;
        int i12;
        ViewPager viewPager;
        int i13;
        TLRPC$TL_sponsoredWebPage tLRPC$TL_sponsoredWebPage;
        TLRPC$ChatFull tLRPC$ChatFull;
        CharSequence charSequence2;
        TLRPC$Message tLRPC$Message3;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        TLRPC$Chat tLRPC$Chat3;
        ArrayList<MessageObject> arrayList10;
        TLRPC$User tLRPC$User;
        MessageObject messageObject8;
        int i14;
        TLRPC$Message tLRPC$Message4;
        TLRPC$Chat tLRPC$Chat4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        TLRPC$Chat tLRPC$Chat5;
        int i15;
        String str2;
        ArrayList<MessageObject> arrayList11;
        TLRPC$Message tLRPC$Message5;
        TLRPC$User tLRPC$User2;
        TLRPC$Message tLRPC$Message6;
        TLRPC$Chat tLRPC$Chat6;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader3;
        TLRPC$Chat tLRPC$Chat7;
        TLRPC$Message tLRPC$Message7;
        TLRPC$Peer tLRPC$Peer;
        boolean z18;
        ArrayList<MessageObject> arrayList12;
        BlurredFrameLayout blurredFrameLayout;
        TLRPC$Chat tLRPC$Chat8;
        MessageObject messageObject9;
        int size;
        int i16;
        TLRPC$MessageAction tLRPC$MessageAction;
        TLRPC$UserFull tLRPC$UserFull;
        ArrayList<MessageObject> arrayList13;
        MessageObject messageObject10;
        if (this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return false;
        }
        boolean z19 = view instanceof ChatMessageCell;
        if (z19) {
            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
            MessageObject messageObject11 = chatMessageCell.getMessageObject();
            messageObject2 = chatMessageCell.getPrimaryMessageObject();
            messageObject = messageObject11;
        } else {
            messageObject = view instanceof ChatActionCell ? ((ChatActionCell) view).getMessageObject() : null;
            messageObject2 = messageObject;
        }
        if (messageObject == null) {
            return false;
        }
        if (!z && (messageObject.messageOwner.action instanceof TLRPC$TL_messageActionGiftPremium)) {
            return false;
        }
        int messageType = getMessageType(messageObject);
        if (z) {
            TLRPC$MessageAction tLRPC$MessageAction2 = messageObject.messageOwner.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) {
                if (messageObject.getReplyMsgId() != 0) {
                    scrollToMessageId(messageObject.getReplyMsgId(), messageObject.messageOwner.id, true, messageObject.getDialogId() == this.mergeDialogId ? 1 : 0, false, 0);
                } else {
                    Toast.makeText(getParentActivity(), LocaleController.getString("MessageNotFound", R.string.MessageNotFound), 0).show();
                }
                return true;
            } else if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) && (messageObject10 = messageObject.replyMessageObject) != null && messageObject10.isInvoice()) {
                TLRPC$TL_payments_getPaymentReceipt tLRPC$TL_payments_getPaymentReceipt = new TLRPC$TL_payments_getPaymentReceipt();
                tLRPC$TL_payments_getPaymentReceipt.msg_id = messageObject.getId();
                tLRPC$TL_payments_getPaymentReceipt.peer = getMessagesController().getInputPeer(messageObject.messageOwner.peer_id);
                getConnectionsManager().sendRequest(tLRPC$TL_payments_getPaymentReceipt, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda252
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$createMenu$169(tLObject, tLRPC$TL_error);
                    }
                }, 2);
                return true;
            } else {
                TLRPC$MessageAction tLRPC$MessageAction3 = messageObject.messageOwner.action;
                if ((tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGroupCall) || (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionInviteToGroupCall) || (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGroupCallScheduled)) {
                    if (getParentActivity() == null) {
                        return false;
                    }
                    VoIPService sharedInstance = VoIPService.getSharedInstance();
                    if (sharedInstance != null) {
                        ChatObject.Call call = sharedInstance.groupCall;
                        if (call != null && messageObject.messageOwner.action.call.id == call.call.id) {
                            if (getParentActivity() instanceof LaunchActivity) {
                                GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(this.currentAccount), null, null, false, null);
                            } else {
                                Intent action = new Intent(getParentActivity(), LaunchActivity.class).setAction("voip_chat");
                                action.putExtra("currentAccount", VoIPService.getSharedInstance().getAccount());
                                getParentActivity().startActivity(action);
                            }
                        } else {
                            boolean z20 = getGroupCall() == null;
                            this.createGroupCall = z20;
                            VoIPHelper.startCall(this.currentChat, null, null, z20, getParentActivity(), this, getAccountInstance());
                        }
                        return true;
                    } else if (this.fragmentContextView != null && getGroupCall() != null) {
                        if (VoIPService.getSharedInstance() != null) {
                            GroupCallActivity.create((LaunchActivity) getParentActivity(), AccountInstance.getInstance(VoIPService.getSharedInstance().getAccount()), null, null, false, null);
                        } else {
                            ChatObject.Call groupCall = getGroupCall();
                            if (groupCall == null) {
                                return false;
                            }
                            VoIPHelper.startCall(getMessagesController().getChat(Long.valueOf(groupCall.chatId)), null, null, false, getParentActivity(), this, getAccountInstance());
                        }
                        return true;
                    } else if (ChatObject.canManageCalls(this.currentChat)) {
                        VoIPHelper.showGroupCallAlert(this, this.currentChat, null, true, getAccountInstance());
                        return true;
                    }
                } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionSetChatTheme) {
                    showChatThemeBottomSheet();
                    return true;
                }
            }
        }
        boolean z21 = (messageObject.isSponsored() || ((arrayList13 = this.threadMessageObjects) != null && arrayList13.contains(messageObject))) ? true : z;
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.forwardingMessage = null;
        this.forwardingMessageGroup = null;
        this.selectedObjectToEditCaption = null;
        for (int i17 = 1; i17 >= 0; i17--) {
            this.selectedMessagesCanCopyIds[i17].clear();
            this.selectedMessagesCanStarIds[i17].clear();
            this.selectedMessagesIds[i17].clear();
        }
        hideActionMode();
        MessageObject.GroupedMessages validGroupedMessage = z3 ? getValidGroupedMessage(messageObject) : null;
        if (this.chatMode != 1 && (!isThreadChat() || this.isTopic)) {
            if (this.currentChat != null) {
                if (messageObject.getDialogId() != this.mergeDialogId && ChatObject.canPinMessages(this.currentChat)) {
                    z4 = true;
                }
            } else if (this.currentEncryptedChat == null && !UserObject.isDeleted(this.currentUser) && (tLRPC$UserFull = this.userInfo) != null) {
                z4 = tLRPC$UserFull.can_pin_message;
            }
            boolean z22 = (z4 || messageObject.getId() <= 0 || ((tLRPC$MessageAction = messageObject.messageOwner.action) != null && !(tLRPC$MessageAction instanceof TLRPC$TL_messageActionEmpty)) || messageObject.isExpiredStory() || messageObject.type == 24) ? false : true;
            boolean z23 = !getMessagesController().isChatNoForwards(this.currentChat) || messageObject.messageOwner.noforwards;
            boolean z24 = messageObject.getDialogId() == this.mergeDialogId && z22 && (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId())))) && !messageObject.isExpiredStory();
            z5 = (messageObject.canEditMessage(this.currentChat) || this.chatActivityEnterView.hasAudioToSend() || messageObject.getDialogId() == this.mergeDialogId || messageObject.type == 23) ? false : true;
            if (z5 && validGroupedMessage != null) {
                size = validGroupedMessage.messages.size();
                int i18 = 0;
                for (i16 = 0; i16 < size; i16++) {
                    MessageObject messageObject12 = validGroupedMessage.messages.get(i16);
                    if (i16 == 0 || !TextUtils.isEmpty(messageObject12.caption)) {
                        this.selectedObjectToEditCaption = messageObject12;
                        if (!TextUtils.isEmpty(messageObject12.caption)) {
                            i18++;
                        }
                    }
                }
                z5 = i18 >= 2;
            }
            boolean z25 = (!messageObject.isExpiredStory() || this.chatMode == 1 || ((arrayList12 = this.threadMessageObjects) != null && arrayList12.contains(messageObject)) || messageObject.isSponsored() || ((messageType == 1 && messageObject.getDialogId() == this.mergeDialogId) || (messageObject.messageOwner.action instanceof TLRPC$TL_messageActionSecureValuesSent) || ((this.currentEncryptedChat == null && messageObject.getId() < 0) || (((blurredFrameLayout = this.bottomOverlayChat) != null && blurredFrameLayout.getVisibility() == 0 && (!this.bottomOverlayChatWaitsReply || (messageObject9 = this.selectedObject) == null || (MessageObject.getTopicId(messageObject9.messageOwner, ChatObject.isForum(this.currentChat)) == 0 && !this.selectedObject.wasJustSent))) || ((tLRPC$Chat8 = this.currentChat) != null && ((ChatObject.isNotInChat(tLRPC$Chat8) && !isThreadChat()) || ((ChatObject.isChannel(this.currentChat) && !ChatObject.canPost(this.currentChat) && !this.currentChat.megagroup) || !ChatObject.canSendMessages(this.currentChat)))))))) ? false : true;
            if (!z21 || messageType < 2 || messageType == 20) {
                if (getParentActivity() != null) {
                    return false;
                }
                ArrayList arrayList14 = new ArrayList();
                ArrayList arrayList15 = new ArrayList();
                ArrayList arrayList16 = new ArrayList();
                if (!AndroidUtilities.isAccessibilityScreenReaderEnabled() || (tLRPC$Message7 = messageObject.messageOwner) == null || (tLRPC$Peer = tLRPC$Message7.from_id) == null) {
                    z6 = z22;
                    z7 = z24;
                    z8 = z5;
                    z9 = z25;
                } else {
                    z6 = z22;
                    z7 = z24;
                    z8 = z5;
                    z9 = z25;
                    if (tLRPC$Peer.user_id != getUserConfig().clientUserId) {
                        arrayList15.add(LocaleController.getString(R.string.OpenProfile));
                        arrayList16.add(104);
                        arrayList14.add(Integer.valueOf(R.drawable.msg_user_search));
                    }
                }
                if (!getUserConfig().isPremium() && !getMessagesController().premiumLocked && messageObject.getDocument() != null && messageObject.getDocument().size >= 157286400 && FileLoader.getInstance(this.currentAccount).isLoadingFile(FileLoader.getAttachFileName(messageObject.getDocument()))) {
                    arrayList15.add(LocaleController.getString(R.string.PremiumSpeedPromo));
                    arrayList16.add(103);
                    arrayList14.add(Integer.valueOf(R.drawable.msg_speed));
                    if (SharedConfig.getDevicePerformanceClass() != 0) {
                        TLRPC$TL_help_premiumPromo premiumPromo = MediaDataController.getInstance(this.currentAccount).getPremiumPromo();
                        String featureTypeToServerString = PremiumPreviewFragment.featureTypeToServerString(2);
                        if (premiumPromo != null) {
                            int i19 = 0;
                            while (true) {
                                if (i19 >= premiumPromo.video_sections.size()) {
                                    i19 = -1;
                                    break;
                                } else if (premiumPromo.video_sections.get(i19).equals(featureTypeToServerString)) {
                                    break;
                                } else {
                                    i19++;
                                }
                            }
                            if (i19 != -1) {
                                FileLoader.getInstance(this.currentAccount).loadFile(premiumPromo.videos.get(i19), premiumPromo, 3, 0);
                            }
                        }
                    }
                }
                int[] iArr3 = {messageObject.getId()};
                if ((messageObject.messageOwner.action instanceof TLRPC$TL_messageActionSetMessagesTTL) && z21) {
                    arrayList = arrayList15;
                    if (this.dialog_id >= 0 || ((tLRPC$Chat7 = this.currentChat) != null && ChatObject.canUserDoAdminAction(tLRPC$Chat7, 13))) {
                        AutoDeletePopupWrapper autoDeletePopupWrapper = new AutoDeletePopupWrapper(this.contentView.getContext(), null, new AutoDeletePopupWrapper.Callback() { // from class: org.telegram.ui.ChatActivity.107
                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                            public /* synthetic */ void showGlobalAutoDeleteScreen() {
                                AutoDeletePopupWrapper.Callback.-CC.$default$showGlobalAutoDeleteScreen(this);
                            }

                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                            public void dismiss() {
                                ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
                                if (actionBarPopupWindow != null) {
                                    actionBarPopupWindow.dismiss();
                                }
                            }

                            @Override // org.telegram.ui.Components.AutoDeletePopupWrapper.Callback
                            public void setAutoDeleteHistory(int i20, int i21) {
                                ChatActivity.this.getMessagesController().setDialogHistoryTTL(ChatActivity.this.dialog_id, i20);
                                ChatActivity chatActivity2 = ChatActivity.this;
                                if (chatActivity2.userInfo == null && chatActivity2.chatInfo == null) {
                                    return;
                                }
                                chatActivity2.createUndoView();
                                if (ChatActivity.this.undoView == null) {
                                    return;
                                }
                                UndoView undoView3 = ChatActivity.this.undoView;
                                long j2 = ChatActivity.this.dialog_id;
                                ChatActivity chatActivity3 = ChatActivity.this;
                                TLRPC$User tLRPC$User3 = chatActivity3.currentUser;
                                TLRPC$UserFull tLRPC$UserFull2 = chatActivity3.userInfo;
                                undoView3.showWithAction(j2, i21, tLRPC$User3, Integer.valueOf(tLRPC$UserFull2 != null ? tLRPC$UserFull2.ttl_period : chatActivity3.chatInfo.ttl_period), (Runnable) null, (Runnable) null);
                            }
                        }, true, 0, getResourceProvider());
                        TLRPC$UserFull tLRPC$UserFull2 = this.userInfo;
                        autoDeletePopupWrapper.lambda$updateItems$7(tLRPC$UserFull2 != null ? tLRPC$UserFull2.ttl_period : this.chatInfo.ttl_period);
                        actionBarPopupWindowLayout = autoDeletePopupWrapper.windowLayout;
                        j = 0;
                        iArr = iArr3;
                        arrayList2 = arrayList;
                        charSequence = null;
                        z10 = z19;
                        if (arrayList16.isEmpty() || actionBarPopupWindowLayout != null) {
                            if (this.scrimPopupWindow != null) {
                                closeMenu();
                                this.menuDeleteItem = null;
                                this.scrimPopupWindowItems = null;
                                return false;
                            }
                            AtomicBoolean atomicBoolean5 = new AtomicBoolean(false);
                            AtomicReference atomicReference4 = new AtomicReference(null);
                            Rect rect3 = new Rect();
                            List<TLRPC$TL_availableReaction> enabledReactionsList = getMediaDataController().getEnabledReactionsList();
                            boolean z26 = !isSecretChat() && !isInScheduleMode() && this.currentUser == null && messageObject.hasReactions() && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && !enabledReactionsList.isEmpty() && messageObject.messageOwner.reactions.can_see_list && !messageObject.isSecretMedia();
                            if (messageObject.isForwardedChannelPost()) {
                                arrayList3 = arrayList2;
                                TLRPC$ChatFull chatFull = getMessagesController().getChatFull(-messageObject.getFromChatId());
                                if (chatFull != null) {
                                    if (!isSecretChat()) {
                                        if (!isInScheduleMode()) {
                                            if (messageObject.isReactionsAvailable()) {
                                                if (!(chatFull.available_reactions instanceof TLRPC$TL_chatReactionsNone)) {
                                                }
                                            }
                                        }
                                    }
                                    z11 = false;
                                }
                                z11 = true;
                            } else {
                                arrayList3 = arrayList2;
                                if (!messageObject.isSecretMedia()) {
                                    if (!isSecretChat()) {
                                        if (!isInScheduleMode()) {
                                            if (messageObject.isReactionsAvailable()) {
                                                TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                                                if (tLRPC$ChatFull2 != null) {
                                                }
                                                if (tLRPC$ChatFull2 == null) {
                                                }
                                            }
                                        }
                                    }
                                }
                                z11 = false;
                            }
                            final boolean z27 = z11;
                            boolean z28 = (z26 || isInScheduleMode() || this.currentChat == null || !messageObject.isOutOwner() || !messageObject.isSent() || messageObject.isEditing() || messageObject.isSending() || messageObject.isSendError() || messageObject.isContentUnread() || messageObject.isUnread() || ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date >= getMessagesController().chatReadMarkExpirePeriod || (!ChatObject.isMegagroup(this.currentChat) && ChatObject.isChannel(this.currentChat)) || (tLRPC$ChatFull = this.chatInfo) == null || tLRPC$ChatFull.participants_count > getMessagesController().chatReadMarkSizeThreshold || (messageObject.messageOwner.action instanceof TLRPC$TL_messageActionChatJoinedByRequest) || !z10) ? false : true;
                            MessageObject messageObject13 = this.selectedObject;
                            if (messageObject13 != null && messageObject13.isSponsored()) {
                                MessageObject messageObject14 = this.selectedObject;
                                if (messageObject14.sponsoredInfo != null || messageObject14.sponsoredAdditionalInfo != null || (tLRPC$TL_sponsoredWebPage = messageObject14.sponsoredWebPage) != null || tLRPC$TL_sponsoredWebPage != null) {
                                    z12 = true;
                                    int i20 = (!z26 || z28 || z12) ? 1 : 0;
                                    Activity parentActivity = getParentActivity();
                                    int i21 = R.drawable.popup_fixed_alert;
                                    final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout9 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity, i21, this.themeDelegate, i20);
                                    actionBarPopupWindowLayout9.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                    Rect rect4 = new Rect();
                                    getParentActivity().getResources().getDrawable(i21).mutate().getPadding(rect4);
                                    actionBarPopupWindowLayout9.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                    if (actionBarPopupWindowLayout != null) {
                                        if (z26) {
                                            rect = rect3;
                                            atomicBoolean3 = atomicBoolean5;
                                            str = 0;
                                            ReactedHeaderView reactedHeaderView2 = new ReactedHeaderView(this.contentView.getContext(), this.currentAccount, messageObject, this.dialog_id);
                                            TLRPC$TL_messageReactions tLRPC$TL_messageReactions = messageObject.messageOwner.reactions;
                                            if (tLRPC$TL_messageReactions != null) {
                                                Iterator<TLRPC$ReactionCount> it = tLRPC$TL_messageReactions.results.iterator();
                                                int i22 = 0;
                                                while (it.hasNext()) {
                                                    i22 += it.next().count;
                                                }
                                                i10 = i22;
                                                i9 = 10;
                                            } else {
                                                i9 = 10;
                                                i10 = 0;
                                            }
                                            if (i10 > i9) {
                                                i11 = 1;
                                                if (messageObject.messageOwner.reactions.results.size() > 1) {
                                                    z16 = 1;
                                                    ReactedUsersListView.ContainerLinerLayout containerLinerLayout2 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                                    containerLinerLayout2.hasHeader = z16;
                                                    containerLinerLayout2.setOrientation(i11);
                                                    containerLinerLayout2.setLayoutParams(new FrameLayout.LayoutParams(AndroidUtilities.dp(200.0f), AndroidUtilities.dp((z16 == 0 ? 96 : 44) + 300) + (!z16)));
                                                    ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout10 = actionBarPopupWindowLayout;
                                                    ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                                    actionBarMenuSubItem.setItemHeight(44);
                                                    actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("Back", R.string.Back), R.drawable.msg_arrow_back);
                                                    actionBarMenuSubItem.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                    actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda59
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view2) {
                                                            ChatActivity.lambda$createMenu$170(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view2);
                                                        }
                                                    });
                                                    containerLinerLayout2.addView(actionBarMenuSubItem, LayoutHelper.createLinear(-1, -2));
                                                    final int[] iArr4 = new int[1];
                                                    if (z16 == 0) {
                                                        ArrayList<TLRPC$ReactionCount> arrayList17 = messageObject.messageOwner.reactions.results;
                                                        final LinearLayout linearLayout = new LinearLayout(this.contentView.getContext());
                                                        linearLayout.setOrientation(0);
                                                        final ViewPager viewPager2 = new ViewPager(this.contentView.getContext());
                                                        final HorizontalScrollView horizontalScrollView = new HorizontalScrollView(this.contentView.getContext());
                                                        final AtomicBoolean atomicBoolean6 = new AtomicBoolean();
                                                        int i23 = arrayList17.size() > 1 ? 1 : 0;
                                                        final int size2 = arrayList17.size() + i23;
                                                        int i24 = 0;
                                                        while (i24 < size2) {
                                                            Rect rect5 = rect4;
                                                            ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout11 = actionBarPopupWindowLayout9;
                                                            final ReactionTabHolderView reactionTabHolderView = new ReactionTabHolderView(this.contentView.getContext());
                                                            int i25 = i23 != 0 ? i24 - 1 : i24;
                                                            if (i25 < 0) {
                                                                reactionTabHolderView.setCounter(i10);
                                                                i13 = i10;
                                                            } else {
                                                                i13 = i10;
                                                                reactionTabHolderView.setCounter(this.currentAccount, arrayList17.get(i25));
                                                            }
                                                            final int i26 = i24;
                                                            reactionTabHolderView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda57
                                                                @Override // android.view.View.OnClickListener
                                                                public final void onClick(View view2) {
                                                                    ChatActivity.lambda$createMenu$172(ViewPager.this, i26, linearLayout, atomicBoolean6, horizontalScrollView, reactionTabHolderView, view2);
                                                                }
                                                            });
                                                            linearLayout.addView(reactionTabHolderView, LayoutHelper.createFrameRelatively(-2.0f, -1.0f, 16, i24 == 0 ? 6.0f : 0.0f, 6.0f, 6.0f, 6.0f));
                                                            i24++;
                                                            rect4 = rect5;
                                                            actionBarPopupWindowLayout9 = actionBarPopupWindowLayout11;
                                                            i10 = i13;
                                                        }
                                                        int i27 = i10;
                                                        Rect rect6 = rect4;
                                                        final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout12 = actionBarPopupWindowLayout9;
                                                        horizontalScrollView.setHorizontalScrollBarEnabled(false);
                                                        horizontalScrollView.addView(linearLayout);
                                                        containerLinerLayout2.addView(horizontalScrollView, LayoutHelper.createLinear(-1, 44));
                                                        View frameLayout = new FrameLayout(this.contentView.getContext());
                                                        frameLayout.setBackgroundColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                                        containerLinerLayout2.addView(frameLayout, new LinearLayout.LayoutParams(-1, (int) Theme.dividerPaint.getStrokeWidth()));
                                                        int dp2 = AndroidUtilities.dp(88.0f) + 1;
                                                        SparseArray sparseArray = new SparseArray();
                                                        final SparseIntArray sparseIntArray = new SparseIntArray();
                                                        int i28 = 0;
                                                        while (true) {
                                                            viewPager = viewPager2;
                                                            if (i28 >= arrayList17.size() + 1) {
                                                                break;
                                                            }
                                                            sparseIntArray.put(i28, AndroidUtilities.dp(300.0f) + dp2);
                                                            i28++;
                                                            viewPager2 = viewPager;
                                                        }
                                                        atomicReference2 = atomicReference4;
                                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout10;
                                                        rect2 = rect6;
                                                        i3 = 5;
                                                        arrayList6 = arrayList3;
                                                        MessageObject messageObject15 = messageObject;
                                                        messageObject4 = messageObject2;
                                                        actionBarPopupWindowLayout8 = actionBarPopupWindowLayout12;
                                                        arrayList4 = arrayList14;
                                                        arrayList5 = arrayList16;
                                                        viewPager.setAdapter(new 108(size2, sparseArray, i23, arrayList17, messageObject, reactedHeaderView2, sparseIntArray, dp2, viewPager, actionBarPopupWindowLayout8, iArr4, i27));
                                                        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(this) { // from class: org.telegram.ui.ChatActivity.109
                                                            @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                            public void onPageScrolled(int i29, float f3, int i30) {
                                                                float f4;
                                                                if (atomicBoolean6.get()) {
                                                                    return;
                                                                }
                                                                int i31 = 0;
                                                                float f5 = -1.0f;
                                                                float f6 = -1.0f;
                                                                while (i31 < linearLayout.getChildCount()) {
                                                                    ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(i31);
                                                                    if (i31 == i29) {
                                                                        f4 = 1.0f - f3;
                                                                    } else {
                                                                        f4 = i31 == (i29 + 1) % size2 ? f3 : 0.0f;
                                                                    }
                                                                    reactionTabHolderView2.setOutlineProgress(f4);
                                                                    if (i31 == i29) {
                                                                        f5 = reactionTabHolderView2.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView2.getWidth()) / 2.0f);
                                                                    }
                                                                    if (i31 == i29 + 1) {
                                                                        f6 = reactionTabHolderView2.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView2.getWidth()) / 2.0f);
                                                                    }
                                                                    i31++;
                                                                }
                                                                if (f5 != -1.0f && f6 != -1.0f) {
                                                                    horizontalScrollView.setScrollX((int) (f5 + ((f6 - f5) * f3)));
                                                                }
                                                                actionBarPopupWindowLayout12.getSwipeBack().setNewForegroundHeight(iArr4[0], (int) ((sparseIntArray.get(i29, 0) * (1.0f - f3)) + (sparseIntArray.get(i29 + 1, 0) * f3)), false);
                                                            }

                                                            @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                            public void onPageSelected(int i29) {
                                                                actionBarPopupWindowLayout12.getSwipeBack().setNewForegroundHeight(iArr4[0], sparseIntArray.get(i29), true);
                                                            }

                                                            @Override // androidx.viewpager.widget.ViewPager.OnPageChangeListener
                                                            public void onPageScrollStateChanged(int i29) {
                                                                if (i29 == 0) {
                                                                    atomicBoolean6.set(false);
                                                                }
                                                            }
                                                        });
                                                        z17 = false;
                                                        containerLinerLayout = containerLinerLayout2;
                                                        containerLinerLayout.addView(viewPager, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                        i12 = -1;
                                                        i2 = 8;
                                                        chatActivity = this;
                                                        messageObject6 = messageObject15;
                                                        iArr2 = iArr4;
                                                        onHeightChangedListener = null;
                                                        reactedHeaderView = reactedHeaderView2;
                                                    } else {
                                                        atomicReference2 = atomicReference4;
                                                        rect2 = rect4;
                                                        MessageObject messageObject16 = messageObject;
                                                        messageObject4 = messageObject2;
                                                        arrayList4 = arrayList14;
                                                        arrayList5 = arrayList16;
                                                        arrayList6 = arrayList3;
                                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout10;
                                                        z17 = false;
                                                        i3 = 5;
                                                        containerLinerLayout = containerLinerLayout2;
                                                        chatActivity = this;
                                                        i2 = 8;
                                                        containerLinerLayout.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                        messageObject6 = messageObject16;
                                                        iArr2 = iArr4;
                                                        actionBarPopupWindowLayout8 = actionBarPopupWindowLayout9;
                                                        onHeightChangedListener = new ReactedUsersListView(chatActivity.contentView.getContext(), chatActivity.themeDelegate, chatActivity.currentAccount, messageObject16, null, false).setSeenUsers(reactedHeaderView2.getSeenUsers()).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda278
                                                            @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                                                            public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList18) {
                                                                ChatActivity.this.lambda$createMenu$173(reactedUsersListView, arrayList18);
                                                            }
                                                        }).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda280
                                                            @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                                                            public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j2, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
                                                                ChatActivity.this.lambda$createMenu$174(messageObject6, reactedUsersListView, j2, tLRPC$MessagePeerReaction);
                                                            }
                                                        }).setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda279
                                                            @Override // org.telegram.ui.Components.ReactedUsersListView.OnHeightChangedListener
                                                            public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i29) {
                                                                ChatActivity.lambda$createMenu$175(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, iArr2, reactedUsersListView, i29);
                                                            }
                                                        });
                                                        Objects.requireNonNull(onHeightChangedListener);
                                                        reactedHeaderView = reactedHeaderView2;
                                                        reactedHeaderView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda124(onHeightChangedListener));
                                                        i12 = -1;
                                                        containerLinerLayout.addView(onHeightChangedListener, LayoutHelper.createLinear(-1, 0, 1.0f));
                                                    }
                                                    iArr2[z17 ? 1 : 0] = actionBarPopupWindowLayout8.addViewToSwipeBack(containerLinerLayout);
                                                    reactedHeaderView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view2) {
                                                            ChatActivity.lambda$createMenu$176(ReactedUsersListView.this, actionBarPopupWindowLayout8, iArr2, view2);
                                                        }
                                                    });
                                                    actionBarPopupWindowLayout8.addView((View) reactedHeaderView, LayoutHelper.createLinear(i12, 48));
                                                    z14 = true;
                                                    actionBarPopupWindowLayout6 = actionBarPopupWindowLayout8;
                                                    r12 = z17;
                                                }
                                            } else {
                                                i11 = 1;
                                            }
                                            z16 = 0;
                                            ReactedUsersListView.ContainerLinerLayout containerLinerLayout22 = new ReactedUsersListView.ContainerLinerLayout(this.contentView.getContext());
                                            containerLinerLayout22.hasHeader = z16;
                                            containerLinerLayout22.setOrientation(i11);
                                            containerLinerLayout22.setLayoutParams(new FrameLayout.LayoutParams(AndroidUtilities.dp(200.0f), AndroidUtilities.dp((z16 == 0 ? 96 : 44) + 300) + (!z16)));
                                            ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout102 = actionBarPopupWindowLayout;
                                            ActionBarMenuSubItem actionBarMenuSubItem2 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) this.themeDelegate);
                                            actionBarMenuSubItem2.setItemHeight(44);
                                            actionBarMenuSubItem2.setTextAndIcon(LocaleController.getString("Back", R.string.Back), R.drawable.msg_arrow_back);
                                            actionBarMenuSubItem2.getTextView().setPadding(!LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, !LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                            actionBarMenuSubItem2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda59
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.lambda$createMenu$170(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view2);
                                                }
                                            });
                                            containerLinerLayout22.addView(actionBarMenuSubItem2, LayoutHelper.createLinear(-1, -2));
                                            final int[] iArr42 = new int[1];
                                            if (z16 == 0) {
                                            }
                                            iArr2[z17 ? 1 : 0] = actionBarPopupWindowLayout8.addViewToSwipeBack(containerLinerLayout);
                                            reactedHeaderView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.lambda$createMenu$176(ReactedUsersListView.this, actionBarPopupWindowLayout8, iArr2, view2);
                                                }
                                            });
                                            actionBarPopupWindowLayout8.addView((View) reactedHeaderView, LayoutHelper.createLinear(i12, 48));
                                            z14 = true;
                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout8;
                                            r12 = z17;
                                        } else {
                                            atomicReference2 = atomicReference4;
                                            actionBarPopupWindowLayout2 = actionBarPopupWindowLayout;
                                            rect = rect3;
                                            atomicBoolean3 = atomicBoolean5;
                                            rect2 = rect4;
                                            messageObject6 = messageObject;
                                            messageObject4 = messageObject2;
                                            arrayList4 = arrayList14;
                                            arrayList5 = arrayList16;
                                            chatActivity = this;
                                            arrayList6 = arrayList3;
                                            r12 = 0;
                                            i2 = 8;
                                            str = 0;
                                            i3 = 5;
                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout9;
                                            z14 = false;
                                        }
                                        if (z28) {
                                            final MessageSeenView messageSeenView = new MessageSeenView(chatActivity.contentView.getContext(), chatActivity.currentAccount, messageObject6, chatActivity.currentChat);
                                            FrameLayout frameLayout2 = new FrameLayout(chatActivity.contentView.getContext());
                                            frameLayout2.addView(messageSeenView, LayoutHelper.createFrame(-1, -2.0f));
                                            ActionBarMenuSubItem actionBarMenuSubItem3 = new ActionBarMenuSubItem((Context) getParentActivity(), true, (boolean) r12, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                            actionBarMenuSubItem3.setItemHeight(44);
                                            actionBarMenuSubItem3.setTextAndIcon(LocaleController.getString("Back", R.string.Back), R.drawable.msg_arrow_back);
                                            actionBarMenuSubItem3.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), r12, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, r12);
                                            FrameLayout frameLayout3 = new FrameLayout(chatActivity.contentView.getContext());
                                            final LinearLayout linearLayout2 = new LinearLayout(chatActivity.contentView.getContext());
                                            linearLayout2.setBackgroundColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                                            linearLayout2.setOrientation(1);
                                            final RecyclerListView createListView = messageSeenView.createListView();
                                            frameLayout3.addView(actionBarMenuSubItem3);
                                            linearLayout2.addView(frameLayout3);
                                            linearLayout2.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, i2));
                                            frameLayout3.setOnClickListener(new View.OnClickListener(chatActivity) { // from class: org.telegram.ui.ChatActivity.111
                                                @Override // android.view.View.OnClickListener
                                                public void onClick(View view2) {
                                                    Bulletin.hideVisible();
                                                    actionBarPopupWindowLayout6.getSwipeBack().closeForeground();
                                                }
                                            });
                                            final int[] iArr5 = new int[1];
                                            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout13 = actionBarPopupWindowLayout6;
                                            messageSeenView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.112
                                                @Override // android.view.View.OnClickListener
                                                public void onClick(View view2) {
                                                    if (ChatActivity.this.scrimPopupWindow == null || messageSeenView.users.isEmpty()) {
                                                        return;
                                                    }
                                                    if (messageSeenView.users.size() == 1 && (messageSeenView.dates.size() <= 0 || messageSeenView.dates.get(0).intValue() <= 0)) {
                                                        TLObject tLObject = messageSeenView.users.get(0);
                                                        if (tLObject == null) {
                                                            return;
                                                        }
                                                        Bundle bundle = new Bundle();
                                                        if (tLObject instanceof TLRPC$User) {
                                                            bundle.putLong("user_id", ((TLRPC$User) tLObject).id);
                                                        } else if (tLObject instanceof TLRPC$Chat) {
                                                            bundle.putLong("chat_id", ((TLRPC$Chat) tLObject).id);
                                                        }
                                                        ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                                                        ChatActivity.this.closeMenu();
                                                        return;
                                                    }
                                                    if (SharedConfig.messageSeenHintCount > 0 && ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f)) {
                                                        ChatActivity chatActivity2 = ChatActivity.this;
                                                        chatActivity2.messageSeenPrivacyBulletin = BulletinFactory.of(Bulletin.BulletinWindow.make(chatActivity2.getContext()), ChatActivity.this.themeDelegate).createErrorBulletin(AndroidUtilities.replaceTags(LocaleController.getString("MessageSeenTooltipMessage", R.string.MessageSeenTooltipMessage)));
                                                        ChatActivity.this.messageSeenPrivacyBulletin.setDuration(4000);
                                                        ChatActivity.this.messageSeenPrivacyBulletin.show();
                                                        SharedConfig.updateMessageSeenHintCount(SharedConfig.messageSeenHintCount - 1);
                                                    }
                                                    createListView.requestLayout();
                                                    linearLayout2.requestLayout();
                                                    createListView.getAdapter().notifyDataSetChanged();
                                                    actionBarPopupWindowLayout13.getSwipeBack().openForeground(iArr5[0]);
                                                }
                                            });
                                            linearLayout2.addView(createListView, LayoutHelper.createLinear(-1, -2));
                                            createListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda285
                                                @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
                                                public final void onItemClick(View view2, int i29) {
                                                    ChatActivity.this.lambda$createMenu$177(messageSeenView, view2, i29);
                                                }
                                            });
                                            iArr5[r12] = actionBarPopupWindowLayout6.addViewToSwipeBack(linearLayout2);
                                            actionBarPopupWindowLayout6.addView((View) frameLayout2, LayoutHelper.createLinear(-1, 44));
                                            z15 = true;
                                        } else {
                                            z15 = z14;
                                        }
                                        MessageObject messageObject17 = chatActivity.selectedObject;
                                        boolean z29 = (messageObject17 == null || !messageObject17.isVoice() || chatActivity.selectedObject.messageOwner == null || !getUserConfig().isPremium() || TextUtils.isEmpty(chatActivity.selectedObject.messageOwner.voiceTranscription) || (tLRPC$Message2 = chatActivity.selectedObject.messageOwner) == null || tLRPC$Message2.voiceTranscriptionRated || tLRPC$Message2.voiceTranscriptionId == j || !tLRPC$Message2.voiceTranscriptionOpen) ? false : true;
                                        if (!z29 && messageObject6.probablyRingtone() && chatActivity.currentEncryptedChat == null) {
                                            ActionBarMenuSubItem actionBarMenuSubItem4 = new ActionBarMenuSubItem((Context) getParentActivity(), true, (boolean) r12, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                            actionBarMenuSubItem4.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                            actionBarMenuSubItem4.setTextAndIcon(LocaleController.getString("SaveForNotifications", R.string.SaveForNotifications), R.drawable.msg_tone_add);
                                            actionBarPopupWindowLayout6.addView(actionBarMenuSubItem4);
                                            actionBarMenuSubItem4.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda100
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.this.lambda$createMenu$178(messageObject6, view2);
                                                }
                                            });
                                            z15 = true;
                                        }
                                        if (z15) {
                                            actionBarPopupWindowLayout6.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                        }
                                        if (actionBarPopupWindowLayout6.getSwipeBack() != null) {
                                            actionBarPopupWindowLayout6.getSwipeBack().setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda73
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.this.lambda$createMenu$179(view2);
                                                }
                                            });
                                        }
                                        if (z29) {
                                            LinearLayout linearLayout3 = new LinearLayout(chatActivity.contentView.getContext());
                                            linearLayout3.setOrientation(1);
                                            LinearLayout.LayoutParams createLinear = LayoutHelper.createLinear(-1, 89);
                                            FrameLayout frameLayout4 = new FrameLayout(chatActivity.contentView.getContext());
                                            View frameLayout5 = new FrameLayout(chatActivity.contentView.getContext());
                                            frameLayout5.setBackgroundColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                            TextView textView = new TextView(chatActivity.contentView.getContext());
                                            textView.setTextColor(chatActivity.getThemedColor(Theme.key_windowBackgroundWhiteGrayText));
                                            textView.setGravity(1);
                                            textView.setText(LocaleController.getString("RateTranscription", R.string.RateTranscription));
                                            frameLayout4.addView(textView, LayoutHelper.createFrame(-1, -2.0f, 48, 0.0f, 12.0f, 0.0f, 0.0f));
                                            final boolean[] zArr = new boolean[1];
                                            final boolean[] zArr2 = new boolean[1];
                                            final ImageView imageView = new ImageView(chatActivity.contentView.getContext());
                                            int i29 = Theme.key_dialogButtonSelector;
                                            imageView.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i29), r12, r12));
                                            Drawable mutate = chatActivity.contentView.getContext().getResources().getDrawable(R.drawable.msg_rate_up).mutate();
                                            int i30 = Theme.key_actionBarDefaultSubmenuItemIcon;
                                            mutate.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor(i30), PorterDuff.Mode.SRC_IN));
                                            messageObject3 = messageObject6;
                                            imageView.setImageDrawable(new CrossfadeDrawable(mutate, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor(i30))));
                                            imageView.setContentDescription(LocaleController.getString(R.string.AccDescrRateTranscriptionUp));
                                            frameLayout4.addView(imageView, LayoutHelper.createFrame(33, 33.0f, 49, -42.0f, 39.0f, 0.0f, 0.0f));
                                            final ImageView imageView2 = new ImageView(chatActivity.contentView.getContext());
                                            imageView2.setBackground(Theme.createCircleSelectorDrawable(chatActivity.getThemedColor(i29), 0, 0));
                                            Drawable mutate2 = chatActivity.contentView.getContext().getResources().getDrawable(R.drawable.msg_rate_down).mutate();
                                            mutate2.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor(i30), PorterDuff.Mode.SRC_IN));
                                            imageView2.setImageDrawable(new CrossfadeDrawable(mutate2, new CircularProgressDrawable(AndroidUtilities.dp(12.0f), AndroidUtilities.dp(1.5f), chatActivity.getThemedColor(i30))));
                                            imageView2.setContentDescription(LocaleController.getString(R.string.AccDescrRateTranscriptionDown));
                                            frameLayout4.addView(imageView2, LayoutHelper.createFrame(33, 33.0f, 49, 42.0f, 39.0f, 0.0f, 0.0f));
                                            final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda235
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    ChatActivity.this.lambda$createMenu$184(zArr2, zArr, imageView, imageView2);
                                                }
                                            };
                                            imageView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda108
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.lambda$createMenu$185(zArr, runnable, view2);
                                                }
                                            });
                                            imageView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda109
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view2) {
                                                    ChatActivity.lambda$createMenu$186(zArr, runnable, view2);
                                                }
                                            });
                                            linearLayout3.addView(frameLayout4, LayoutHelper.createLinear(-1, 81));
                                            linearLayout3.addView(frameLayout5, LayoutHelper.createLinear(-1, 8));
                                            actionBarPopupWindowLayout6.addView((View) linearLayout3, createLinear);
                                        } else {
                                            messageObject3 = messageObject6;
                                        }
                                        MessageObject messageObject18 = chatActivity.selectedObject;
                                        if (messageObject18 != null && messageObject18.isSponsored()) {
                                            MessageObject messageObject19 = chatActivity.selectedObject;
                                            if (messageObject19.sponsoredInfo == null && messageObject19.sponsoredAdditionalInfo == null && messageObject19.sponsoredWebPage == null) {
                                                i6 = 6;
                                            } else {
                                                LinearLayout linearLayout4 = new LinearLayout(getParentActivity());
                                                linearLayout4.setOrientation(1);
                                                ActionBarMenuSubItem actionBarMenuSubItem5 = new ActionBarMenuSubItem((Context) getParentActivity(), true, false, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                actionBarMenuSubItem5.setItemHeight(44);
                                                actionBarMenuSubItem5.setTextAndIcon(LocaleController.getString("Back", R.string.Back), R.drawable.msg_arrow_back);
                                                actionBarMenuSubItem5.getTextView().setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(40.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(40.0f) : 0, 0);
                                                actionBarMenuSubItem5.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda58
                                                    @Override // android.view.View.OnClickListener
                                                    public final void onClick(View view2) {
                                                        ChatActivity.lambda$createMenu$187(ActionBarPopupWindow.ActionBarPopupWindowLayout.this, view2);
                                                    }
                                                });
                                                linearLayout4.addView(actionBarMenuSubItem5, LayoutHelper.createLinear(-1, -2));
                                                linearLayout4.addView(new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                                ArrayList arrayList18 = new ArrayList();
                                                if (chatActivity.selectedObject.sponsoredWebPage != null) {
                                                    TextView textView2 = new TextView(getParentActivity());
                                                    textView2.setTextColor(chatActivity.getThemedColor(Theme.key_chat_messageLinkIn));
                                                    textView2.setTextSize(1, 14.0f);
                                                    textView2.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                    textView2.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                    Uri parse = Uri.parse(chatActivity.selectedObject.sponsoredWebPage.url);
                                                    textView2.setText(Browser.replaceHostname(parse, IDN.toUnicode(parse.getHost(), 1)));
                                                    textView2.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, chatActivity.selectedObject.sponsoredAdditionalInfo == null ? 6 : 0));
                                                    textView2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda87
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view2) {
                                                            ChatActivity.this.lambda$createMenu$188(view2);
                                                        }
                                                    });
                                                    textView2.setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda111
                                                        @Override // android.view.View.OnLongClickListener
                                                        public final boolean onLongClick(View view2) {
                                                            boolean lambda$createMenu$189;
                                                            lambda$createMenu$189 = ChatActivity.this.lambda$createMenu$189(view2);
                                                            return lambda$createMenu$189;
                                                        }
                                                    });
                                                    arrayList18.add(textView2);
                                                }
                                                if (chatActivity.selectedObject.sponsoredInfo != null) {
                                                    TextView textView3 = new TextView(getParentActivity());
                                                    textView3.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                    textView3.setTextSize(1, 14.0f);
                                                    textView3.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                    textView3.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                    textView3.setText(chatActivity.selectedObject.sponsoredInfo);
                                                    textView3.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, chatActivity.selectedObject.sponsoredAdditionalInfo == null ? 6 : 0));
                                                    textView3.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda69
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view2) {
                                                            ChatActivity.this.lambda$createMenu$190(view2);
                                                        }
                                                    });
                                                    arrayList18.add(textView3);
                                                }
                                                if (chatActivity.selectedObject.sponsoredAdditionalInfo != null) {
                                                    TextView textView4 = new TextView(getParentActivity());
                                                    textView4.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                                    textView4.setTextSize(1, 14.0f);
                                                    textView4.setPadding(AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(10.0f));
                                                    textView4.setMaxWidth(AndroidUtilities.dp(300.0f));
                                                    textView4.setText(chatActivity.selectedObject.sponsoredAdditionalInfo);
                                                    i6 = 6;
                                                    textView4.setBackground(Theme.createRadSelectorDrawable(chatActivity.getThemedColor(Theme.key_dialogButtonSelector), 0, 6));
                                                    textView4.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda90
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view2) {
                                                            ChatActivity.this.lambda$createMenu$191(view2);
                                                        }
                                                    });
                                                    arrayList18.add(textView4);
                                                } else {
                                                    i6 = 6;
                                                }
                                                for (int i31 = 0; i31 < arrayList18.size(); i31++) {
                                                    View view2 = (View) arrayList18.get(i31);
                                                    if (i31 > 0) {
                                                        FrameLayout frameLayout6 = new FrameLayout(getParentActivity());
                                                        frameLayout6.setBackgroundColor(chatActivity.getThemedColor(Theme.key_divider));
                                                        i7 = -1;
                                                        LinearLayout.LayoutParams createLinear2 = LayoutHelper.createLinear(-1, 1);
                                                        createLinear2.height = 1;
                                                        linearLayout4.addView(frameLayout6, createLinear2);
                                                    } else {
                                                        i7 = -1;
                                                    }
                                                    linearLayout4.addView(view2, LayoutHelper.createLinear(i7, -2));
                                                }
                                                final int addViewToSwipeBack = actionBarPopupWindowLayout6.addViewToSwipeBack(linearLayout4);
                                                ActionBarMenuSubItem actionBarMenuSubItem6 = new ActionBarMenuSubItem((Context) getParentActivity(), true, true, (Theme.ResourcesProvider) chatActivity.themeDelegate);
                                                actionBarMenuSubItem6.setTextAndIcon(LocaleController.getString("SponsoredMessageSponsor", R.string.SponsoredMessageSponsor), R.drawable.msg_channel);
                                                actionBarPopupWindowLayout6.addView(actionBarMenuSubItem6);
                                                actionBarMenuSubItem6.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda102
                                                    @Override // android.view.View.OnClickListener
                                                    public final void onClick(View view3) {
                                                        ChatActivity.this.lambda$createMenu$192(actionBarPopupWindowLayout6, addViewToSwipeBack, view3);
                                                    }
                                                });
                                                actionBarPopupWindowLayout6.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                            }
                                            FrameLayout frameLayout7 = new FrameLayout(chatActivity, getParentActivity()) { // from class: org.telegram.ui.ChatActivity.114
                                                @Override // android.widget.FrameLayout, android.view.View
                                                protected void onMeasure(int i32, int i33) {
                                                    super.onMeasure(i32, i33);
                                                }
                                            };
                                            frameLayout7.setMinimumHeight(AndroidUtilities.dp(56.0f));
                                            int themedColor = chatActivity.getThemedColor(Theme.key_dialogButtonSelector);
                                            if (actionBarPopupWindowLayout6.getItemsCount() <= 0) {
                                                i8 = 0;
                                            } else {
                                                i8 = 0;
                                                i6 = 0;
                                            }
                                            frameLayout7.setBackground(Theme.createRadSelectorDrawable(themedColor, i6, i8));
                                            frameLayout7.setPadding(AndroidUtilities.dp(18.0f), i8, AndroidUtilities.dp(18.0f), i8);
                                            ImageView imageView3 = new ImageView(getParentActivity());
                                            imageView3.setScaleType(ImageView.ScaleType.CENTER);
                                            imageView3.setColorFilter(new PorterDuffColorFilter(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon), PorterDuff.Mode.MULTIPLY));
                                            imageView3.setImageResource(R.drawable.msg_info);
                                            frameLayout7.addView(imageView3, LayoutHelper.createFrame(-2, 40, (LocaleController.isRTL ? 5 : 3) | 16));
                                            TextView textView5 = new TextView(chatActivity, getParentActivity()) { // from class: org.telegram.ui.ChatActivity.115
                                                @Override // android.widget.TextView, android.view.View
                                                protected void onMeasure(int i32, int i33) {
                                                    if (View.MeasureSpec.getMode(i32) == Integer.MIN_VALUE && getLayout() != null) {
                                                        Layout layout = getLayout();
                                                        int i34 = 0;
                                                        for (int i35 = 0; i35 < layout.getLineCount(); i35++) {
                                                            i34 = Math.max(i34, (int) layout.getLineWidth(i35));
                                                        }
                                                        i32 = View.MeasureSpec.makeMeasureSpec(getPaddingLeft() + i34 + getPaddingRight(), 1073741824);
                                                    }
                                                    super.onMeasure(i32, i33);
                                                }
                                            };
                                            textView5.setMaxLines(3);
                                            textView5.setGravity(3);
                                            textView5.setEllipsize(TextUtils.TruncateAt.END);
                                            textView5.setTextColor(chatActivity.getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                            textView5.setTextSize(1, 14.0f);
                                            textView5.setMaxWidth(AndroidUtilities.dp(240.0f));
                                            textView5.setText(LocaleController.getString("SponsoredMessageInfo", R.string.SponsoredMessageInfo).replace('\n', ' '));
                                            textView5.setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(43.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(43.0f) : 0, 0);
                                            if (!LocaleController.isRTL) {
                                                i3 = 3;
                                            }
                                            frameLayout7.addView(textView5, LayoutHelper.createFrame(-2, -2, i3 | 16));
                                            actionBarPopupWindowLayout6.addView(frameLayout7);
                                            frameLayout7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda70
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view3) {
                                                    ChatActivity.this.lambda$createMenu$193(view3);
                                                }
                                            });
                                            actionBarPopupWindowLayout6.addView((View) new ActionBarPopupWindow.GapView(chatActivity.contentView.getContext(), chatActivity.themeDelegate), LayoutHelper.createLinear(-1, 8));
                                        }
                                        chatActivity.scrimPopupWindowItems = new ActionBarMenuSubItem[arrayList6.size()];
                                        int size3 = arrayList6.size();
                                        final int i32 = 0;
                                        while (i32 < size3) {
                                            final ActionBarMenuSubItem actionBarMenuSubItem7 = new ActionBarMenuSubItem(getParentActivity(), i32 == 0, i32 == size3 + (-1), chatActivity.themeDelegate);
                                            actionBarMenuSubItem7.setMinimumWidth(AndroidUtilities.dp(200.0f));
                                            ArrayList arrayList19 = arrayList6;
                                            ArrayList arrayList20 = arrayList4;
                                            actionBarMenuSubItem7.setTextAndIcon((CharSequence) arrayList19.get(i32), ((Integer) arrayList20.get(i32)).intValue());
                                            final ArrayList arrayList21 = arrayList5;
                                            Integer num = (Integer) arrayList21.get(i32);
                                            if (num.intValue() == 1 && (messageObject7 = chatActivity.selectedObject) != null && messageObject7.messageOwner.ttl_period != 0) {
                                                chatActivity.menuDeleteItem = actionBarMenuSubItem7;
                                                chatActivity.updateDeleteItemRunnable.run();
                                                actionBarMenuSubItem7.setSubtextColor(chatActivity.getThemedColor(Theme.key_windowBackgroundWhiteGrayText6));
                                            }
                                            chatActivity.scrimPopupWindowItems[i32] = actionBarMenuSubItem7;
                                            actionBarPopupWindowLayout6.addView(actionBarMenuSubItem7);
                                            actionBarMenuSubItem7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda92
                                                @Override // android.view.View.OnClickListener
                                                public final void onClick(View view3) {
                                                    ChatActivity.this.lambda$createMenu$194(i32, arrayList21, view3);
                                                }
                                            });
                                            if (num.intValue() == 29) {
                                                final boolean isContextTranslateEnabled = getMessagesController().getTranslateController().isContextTranslateEnabled();
                                                final String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
                                                final String toLanguage = TranslateAlert2.getToLanguage();
                                                final Utilities.CallbackReturn callbackReturn = new Utilities.CallbackReturn() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda250
                                                    @Override // org.telegram.messenger.Utilities.CallbackReturn
                                                    public final Object run(Object obj) {
                                                        Boolean lambda$createMenu$195;
                                                        lambda$createMenu$195 = ChatActivity.this.lambda$createMenu$195(view, (URLSpan) obj);
                                                        return lambda$createMenu$195;
                                                    }
                                                };
                                                MessageObject messageObject20 = chatActivity.selectedObject;
                                                if (messageObject20 == null || !(messageObject20.isPoll() || chatActivity.selectedObject.isVoiceTranscriptionOpen() || chatActivity.selectedObject.isSponsored())) {
                                                    arrayList9 = arrayList21;
                                                    inputPeer = getMessagesController().getInputPeer(chatActivity.dialog_id);
                                                } else {
                                                    arrayList9 = arrayList21;
                                                    inputPeer = str;
                                                }
                                                MessageObject messageObject21 = chatActivity.selectedObject;
                                                if (messageObject21 != null && (tLRPC$Message = messageObject21.messageOwner) != null && tLRPC$Message.originalLanguage != null) {
                                                    AtomicBoolean atomicBoolean7 = atomicBoolean3;
                                                    atomicBoolean7.set(false);
                                                    final String str3 = chatActivity.selectedObject.messageOwner.originalLanguage;
                                                    actionBarMenuSubItem7.setVisibility((str3 == null || (str3.equals(toLanguage) && str3.equals(language) && !str3.equals(TranslateController.UNKNOWN_LANGUAGE)) || ((!isContextTranslateEnabled || RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(str3)) && ((((tLRPC$Chat = chatActivity.currentChat) == null || !(tLRPC$Chat.has_link || ChatObject.isPublic(tLRPC$Chat))) && chatActivity.selectedObject.messageOwner.fwd_from == null) || !("uk".equals(str3) || "ru".equals(str3))))) ? 8 : 0);
                                                    i4 = size3;
                                                    final int i33 = i32;
                                                    final ArrayList arrayList22 = arrayList9;
                                                    final TLRPC$InputPeer tLRPC$InputPeer = inputPeer;
                                                    atomicBoolean4 = atomicBoolean7;
                                                    arrayList7 = arrayList9;
                                                    final int[] iArr6 = iArr;
                                                    arrayList8 = arrayList20;
                                                    final CharSequence charSequence3 = charSequence;
                                                    arrayList6 = arrayList19;
                                                    i5 = i32;
                                                    final boolean z30 = z23;
                                                    actionBarPopupWindowLayout7 = actionBarPopupWindowLayout6;
                                                    actionBarMenuSubItem7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda93
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view3) {
                                                            ChatActivity.this.lambda$createMenu$197(i33, arrayList22, str3, toLanguage, language, tLRPC$InputPeer, iArr6, charSequence3, z30, callbackReturn, view3);
                                                        }
                                                    });
                                                } else {
                                                    arrayList8 = arrayList20;
                                                    arrayList6 = arrayList19;
                                                    actionBarPopupWindowLayout7 = actionBarPopupWindowLayout6;
                                                    i4 = size3;
                                                    i5 = i32;
                                                    atomicBoolean4 = atomicBoolean3;
                                                    arrayList7 = arrayList9;
                                                    if (LanguageDetector.hasSupport()) {
                                                        final String[] strArr = {str};
                                                        actionBarMenuSubItem7.setVisibility(8);
                                                        atomicBoolean4.set(true);
                                                        final AtomicReference atomicReference5 = atomicReference2;
                                                        LanguageDetector.detectLanguage(charSequence.toString(), new LanguageDetector.StringCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda244
                                                            @Override // org.telegram.messenger.LanguageDetector.StringCallback
                                                            public final void run(String str4) {
                                                                ChatActivity.this.lambda$createMenu$198(strArr, toLanguage, language, isContextTranslateEnabled, actionBarMenuSubItem7, atomicBoolean4, atomicReference5, str4);
                                                            }
                                                        }, new LanguageDetector.ExceptionCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda241
                                                            @Override // org.telegram.messenger.LanguageDetector.ExceptionCallback
                                                            public final void run(Exception exc) {
                                                                ChatActivity.lambda$createMenu$199(atomicBoolean4, atomicReference5, exc);
                                                            }
                                                        });
                                                        final TLRPC$InputPeer tLRPC$InputPeer2 = inputPeer;
                                                        atomicReference3 = atomicReference5;
                                                        final int[] iArr7 = iArr;
                                                        final CharSequence charSequence4 = charSequence;
                                                        final boolean z31 = z23;
                                                        actionBarMenuSubItem7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda95
                                                            @Override // android.view.View.OnClickListener
                                                            public final void onClick(View view3) {
                                                                ChatActivity.this.lambda$createMenu$201(i5, arrayList7, strArr, toLanguage, language, tLRPC$InputPeer2, iArr7, charSequence4, z31, callbackReturn, view3);
                                                            }
                                                        });
                                                        actionBarMenuSubItem7.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda126
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                ChatActivity.lambda$createMenu$202(atomicReference3);
                                                            }
                                                        }, 250L);
                                                    } else {
                                                        atomicReference3 = atomicReference2;
                                                        if (isContextTranslateEnabled) {
                                                            final TLRPC$InputPeer tLRPC$InputPeer3 = inputPeer;
                                                            final int[] iArr8 = iArr;
                                                            final CharSequence charSequence5 = charSequence;
                                                            final boolean z32 = z23;
                                                            actionBarMenuSubItem7.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda94
                                                                @Override // android.view.View.OnClickListener
                                                                public final void onClick(View view3) {
                                                                    ChatActivity.this.lambda$createMenu$204(i5, arrayList7, tLRPC$InputPeer3, iArr8, toLanguage, charSequence5, z32, callbackReturn, view3);
                                                                }
                                                            });
                                                        } else {
                                                            actionBarMenuSubItem7.setVisibility(8);
                                                        }
                                                    }
                                                    i32 = i5 + 1;
                                                    atomicReference2 = atomicReference3;
                                                    atomicBoolean3 = atomicBoolean4;
                                                    size3 = i4;
                                                    arrayList5 = arrayList7;
                                                    arrayList4 = arrayList8;
                                                    actionBarPopupWindowLayout6 = actionBarPopupWindowLayout7;
                                                    chatActivity = this;
                                                }
                                            } else {
                                                arrayList7 = arrayList21;
                                                arrayList8 = arrayList20;
                                                arrayList6 = arrayList19;
                                                actionBarPopupWindowLayout7 = actionBarPopupWindowLayout6;
                                                i4 = size3;
                                                i5 = i32;
                                                atomicBoolean4 = atomicBoolean3;
                                            }
                                            atomicReference3 = atomicReference2;
                                            i32 = i5 + 1;
                                            atomicReference2 = atomicReference3;
                                            atomicBoolean3 = atomicBoolean4;
                                            size3 = i4;
                                            arrayList5 = arrayList7;
                                            arrayList4 = arrayList8;
                                            actionBarPopupWindowLayout6 = actionBarPopupWindowLayout7;
                                            chatActivity = this;
                                        }
                                        actionBarPopupWindowLayout3 = actionBarPopupWindowLayout6;
                                        atomicBoolean = atomicBoolean3;
                                        atomicReference = atomicReference2;
                                        animatedEmojiSpanArr = str;
                                    } else {
                                        atomicReference = atomicReference4;
                                        actionBarPopupWindowLayout2 = actionBarPopupWindowLayout;
                                        rect = rect3;
                                        atomicBoolean = atomicBoolean5;
                                        rect2 = rect4;
                                        actionBarPopupWindowLayout3 = actionBarPopupWindowLayout9;
                                        messageObject3 = messageObject;
                                        messageObject4 = messageObject2;
                                        animatedEmojiSpanArr = null;
                                    }
                                    atomicBoolean2 = atomicBoolean;
                                    ChatScrimPopupContainerLayout chatScrimPopupContainerLayout = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.116
                                        @Override // android.view.ViewGroup, android.view.View
                                        public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                            if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                                ChatActivity.this.closeMenu();
                                            }
                                            return super.dispatchKeyEvent(keyEvent);
                                        }

                                        @Override // android.view.ViewGroup, android.view.View
                                        public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                            boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                            if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                                ChatActivity.this.closeMenu();
                                            }
                                            return dispatchTouchEvent;
                                        }
                                    };
                                    final Rect rect7 = rect;
                                    chatScrimPopupContainerLayout.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.117
                                        private int[] pos = new int[2];

                                        @Override // android.view.View.OnTouchListener
                                        public boolean onTouch(View view3, MotionEvent motionEvent) {
                                            if (motionEvent.getActionMasked() == 0) {
                                                ActionBarPopupWindow actionBarPopupWindow = ChatActivity.this.scrimPopupWindow;
                                                if (actionBarPopupWindow != null && actionBarPopupWindow.isShowing()) {
                                                    View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                                    contentView.getLocationInWindow(this.pos);
                                                    Rect rect8 = rect7;
                                                    int[] iArr9 = this.pos;
                                                    rect8.set(iArr9[0], iArr9[1], iArr9[0] + contentView.getMeasuredWidth(), this.pos[1] + contentView.getMeasuredHeight());
                                                    if (!rect7.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                                        ChatActivity.this.closeMenu();
                                                    }
                                                }
                                            } else if (motionEvent.getActionMasked() == 4) {
                                                ChatActivity.this.closeMenu();
                                            }
                                            return false;
                                        }
                                    });
                                    actionBarPopupWindowLayout4 = actionBarPopupWindowLayout2;
                                    if (actionBarPopupWindowLayout4 == null) {
                                        chatScrimPopupContainerLayout.addView(actionBarPopupWindowLayout4);
                                        reactionsContainerLayout = animatedEmojiSpanArr;
                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout3;
                                    } else {
                                        reactionsContainerLayout = new ReactionsContainerLayout(0, this, this.contentView.getContext(), this.currentAccount, getResourceProvider());
                                        if (z27) {
                                            reactionsContainerLayout.setPadding(AndroidUtilities.dp(4.0f) + (LocaleController.isRTL ? 0 : 24), AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f) + (LocaleController.isRTL ? 24 : 0), AndroidUtilities.dp(22));
                                            final MessageObject messageObject22 = messageObject4;
                                            reactionsContainerLayout.setDelegate(new ReactionsContainerLayout.ReactionsContainerDelegate() { // from class: org.telegram.ui.ChatActivity.118
                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                public /* synthetic */ void drawRoundRect(Canvas canvas, RectF rectF, float f3, float f4, float f5) {
                                                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$drawRoundRect(this, canvas, rectF, f3, f4, f5);
                                                }

                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                public /* synthetic */ boolean needEnterText() {
                                                    return ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$needEnterText(this);
                                                }

                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                public /* synthetic */ void onEmojiWindowDismissed() {
                                                    ReactionsContainerLayout.ReactionsContainerDelegate.-CC.$default$onEmojiWindowDismissed(this);
                                                }

                                                @Override // org.telegram.ui.Components.ReactionsContainerLayout.ReactionsContainerDelegate
                                                public void onReactionClicked(View view3, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z33, boolean z34) {
                                                    ChatActivity.this.selectReaction(messageObject22, reactionsContainerLayout, view3, 0.0f, 0.0f, visibleReaction, false, z33, z34);
                                                }
                                            });
                                            chatScrimPopupContainerLayout.addView(reactionsContainerLayout, LayoutHelper.createLinear(-1, 74, 5, 0, 50, 0, -20));
                                            chatScrimPopupContainerLayout.setReactionsLayout(reactionsContainerLayout);
                                            chatScrimPopupContainerLayout.setClipChildren(false);
                                            messageObject5 = messageObject3;
                                            reactionsContainerLayout.setMessage(messageObject5, this.chatInfo);
                                            reactionsContainerLayout.setTransitionProgress(0.0f);
                                            if (actionBarPopupWindowLayout3.getSwipeBack() != null) {
                                                actionBarPopupWindowLayout3.getSwipeBack().addOnSwipeBackProgressListener(new PopupSwipeBackLayout.OnSwipeBackProgressListener(this) { // from class: org.telegram.ui.ChatActivity.119
                                                    boolean isEnter = true;

                                                    @Override // org.telegram.ui.Components.PopupSwipeBackLayout.OnSwipeBackProgressListener
                                                    public void onSwipeBackProgress(PopupSwipeBackLayout popupSwipeBackLayout, float f3, float f4) {
                                                        if (f3 == 0.0f && !this.isEnter) {
                                                            reactionsContainerLayout.startEnterAnimation(false);
                                                            this.isEnter = true;
                                                        } else if (f3 == 1.0f && this.isEnter) {
                                                            reactionsContainerLayout.setAlpha(1.0f - f4);
                                                            if (f4 == 1.0f) {
                                                                this.isEnter = false;
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                        } else {
                                            messageObject5 = messageObject3;
                                        }
                                        boolean z33 = z23 && messageObject5.messageOwner.action == null && messageObject5.isSent() && !messageObject5.isEditing() && this.chatMode != 1;
                                        actionBarPopupWindowLayout5 = actionBarPopupWindowLayout3;
                                        chatScrimPopupContainerLayout.addView(actionBarPopupWindowLayout5, LayoutHelper.createLinearRelatively(-2.0f, -2.0f, 3, z27 ? 16.0f : 0.0f, 0.0f, z27 ? 36.0f : 0.0f, 0.0f));
                                        chatScrimPopupContainerLayout.setPopupWindowLayout(actionBarPopupWindowLayout5);
                                        if (z33) {
                                            actionBarPopupWindowLayout5.measure(View.MeasureSpec.makeMeasureSpec(0, 0), View.MeasureSpec.makeMeasureSpec(0, 0));
                                            boolean z34 = ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup;
                                            TextView textView6 = new TextView(this.contentView.getContext());
                                            textView6.setTextSize(1, 14.0f);
                                            textView6.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItem));
                                            if (getMessagesController().isChatNoForwards(this.currentChat)) {
                                                if (z34) {
                                                    string = LocaleController.getString("ForwardsRestrictedInfoChannel", R.string.ForwardsRestrictedInfoChannel);
                                                } else {
                                                    string = LocaleController.getString("ForwardsRestrictedInfoGroup", R.string.ForwardsRestrictedInfoGroup);
                                                }
                                                textView6.setText(string);
                                            } else {
                                                textView6.setText(LocaleController.getString("ForwardsRestrictedInfoBot", R.string.ForwardsRestrictedInfoBot));
                                            }
                                            textView6.setMaxWidth(actionBarPopupWindowLayout5.getMeasuredWidth() - AndroidUtilities.dp(38.0f));
                                            Drawable mutate3 = ContextCompat.getDrawable(this.contentView.getContext(), R.drawable.popup_fixed_alert).mutate();
                                            mutate3.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                                            FrameLayout frameLayout8 = new FrameLayout(this.contentView.getContext());
                                            frameLayout8.setBackground(mutate3);
                                            frameLayout8.addView(textView6, LayoutHelper.createFrame(-1, -2.0f, 0, 11.0f, 11.0f, 11.0f, 11.0f));
                                            chatScrimPopupContainerLayout.addView(frameLayout8, LayoutHelper.createLinear(-1, -2, 3, z27 ? 16 : 0, -8, z27 ? 36 : 0, 0));
                                            chatScrimPopupContainerLayout.applyViewBottom(frameLayout8);
                                        }
                                        if (messageObject5.contentType == 0) {
                                            CharSequence charSequence6 = messageObject5.messageText;
                                            AnimatedEmojiSpan[] animatedEmojiSpanArr4 = charSequence6 instanceof Spanned ? (AnimatedEmojiSpan[]) ((Spanned) charSequence6).getSpans(0, charSequence6.length(), AnimatedEmojiSpan.class) : animatedEmojiSpanArr;
                                            CharSequence messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                                            AnimatedEmojiSpan[] animatedEmojiSpanArr5 = messageCaption instanceof Spanned ? (AnimatedEmojiSpan[]) ((Spanned) messageCaption).getSpans(0, messageCaption.length(), AnimatedEmojiSpan.class) : animatedEmojiSpanArr;
                                            int length = (animatedEmojiSpanArr4 == null ? 0 : animatedEmojiSpanArr4.length) + (animatedEmojiSpanArr5 == null ? 0 : animatedEmojiSpanArr5.length);
                                            if (length > 0) {
                                                final ArrayList arrayList23 = new ArrayList();
                                                int length2 = animatedEmojiSpanArr4 == null ? 0 : animatedEmojiSpanArr4.length;
                                                int i34 = 0;
                                                while (i34 < length) {
                                                    AnimatedEmojiSpan animatedEmojiSpan = i34 < length2 ? animatedEmojiSpanArr4[i34] : animatedEmojiSpanArr5[i34 - length2];
                                                    if (animatedEmojiSpan != null && !animatedEmojiSpan.standard) {
                                                        TLRPC$Document tLRPC$Document = animatedEmojiSpan.document;
                                                        if (tLRPC$Document == null) {
                                                            tLRPC$Document = AnimatedEmojiDrawable.findDocument(this.currentAccount, animatedEmojiSpan.documentId);
                                                        }
                                                        TLRPC$InputStickerSet inputStickerSet = MessageObject.getInputStickerSet(tLRPC$Document);
                                                        if (inputStickerSet != null) {
                                                            int i35 = 0;
                                                            while (true) {
                                                                if (i35 >= arrayList23.size()) {
                                                                    animatedEmojiSpanArr2 = animatedEmojiSpanArr4;
                                                                    animatedEmojiSpanArr3 = animatedEmojiSpanArr5;
                                                                    z13 = false;
                                                                    break;
                                                                }
                                                                animatedEmojiSpanArr2 = animatedEmojiSpanArr4;
                                                                animatedEmojiSpanArr3 = animatedEmojiSpanArr5;
                                                                if (((TLRPC$InputStickerSet) arrayList23.get(i35)).id == inputStickerSet.id) {
                                                                    z13 = true;
                                                                    break;
                                                                }
                                                                i35++;
                                                                animatedEmojiSpanArr4 = animatedEmojiSpanArr2;
                                                                animatedEmojiSpanArr5 = animatedEmojiSpanArr3;
                                                            }
                                                            if (!z13) {
                                                                arrayList23.add(inputStickerSet);
                                                            }
                                                            i34++;
                                                            animatedEmojiSpanArr4 = animatedEmojiSpanArr2;
                                                            animatedEmojiSpanArr5 = animatedEmojiSpanArr3;
                                                        }
                                                    }
                                                    animatedEmojiSpanArr2 = animatedEmojiSpanArr4;
                                                    animatedEmojiSpanArr3 = animatedEmojiSpanArr5;
                                                    i34++;
                                                    animatedEmojiSpanArr4 = animatedEmojiSpanArr2;
                                                    animatedEmojiSpanArr5 = animatedEmojiSpanArr3;
                                                }
                                                if (arrayList23.size() > 0 && !getMessagesController().premiumLocked) {
                                                    FrameLayout frameLayout9 = new FrameLayout(this.contentView.getContext());
                                                    frameLayout9.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuSeparator));
                                                    actionBarPopupWindowLayout5.addView((View) frameLayout9, LayoutHelper.createLinear(-1, 8));
                                                    MessageContainsEmojiButton messageContainsEmojiButton = new MessageContainsEmojiButton(this.currentAccount, this.contentView.getContext(), this.themeDelegate, arrayList23, 0);
                                                    messageContainsEmojiButton.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda99
                                                        @Override // android.view.View.OnClickListener
                                                        public final void onClick(View view3) {
                                                            ChatActivity.this.lambda$createMenu$205(arrayList23, view3);
                                                        }
                                                    });
                                                    actionBarPopupWindowLayout5.addView((View) messageContainsEmojiButton, LayoutHelper.createLinear(-1, -2));
                                                }
                                            }
                                        }
                                    }
                                    reactionsContainerLayout.setParentLayout(chatScrimPopupContainerLayout);
                                    final ReactionsContainerLayout reactionsContainerLayout2 = reactionsContainerLayout;
                                    ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(chatScrimPopupContainerLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.121
                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                        public void dismiss() {
                                            super.dismiss();
                                            if (ChatActivity.this.scrimPopupWindow != this) {
                                                return;
                                            }
                                            if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                                ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                                ChatActivity.this.messageSeenPrivacyBulletin = null;
                                            }
                                            ChatActivity chatActivity2 = ChatActivity.this;
                                            chatActivity2.scrimPopupWindow = null;
                                            chatActivity2.menuDeleteItem = null;
                                            ChatActivity.this.scrimPopupWindowItems = null;
                                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                            if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                            } else {
                                                ChatActivity.this.dimBehindView(false);
                                            }
                                            ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                            if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                                                return;
                                            }
                                            ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                        }

                                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                        public void dismiss(boolean z35) {
                                            super.dismiss(z35);
                                            ReactionsContainerLayout reactionsContainerLayout3 = reactionsContainerLayout2;
                                            if (reactionsContainerLayout3 != null) {
                                                reactionsContainerLayout3.dismissParent(z35);
                                            }
                                        }
                                    };
                                    this.scrimPopupWindow = actionBarPopupWindow;
                                    actionBarPopupWindow.setPauseNotifications(true);
                                    this.scrimPopupWindow.setDismissAnimationDuration(220);
                                    this.scrimPopupWindow.setOutsideTouchable(true);
                                    this.scrimPopupWindow.setClippingEnabled(true);
                                    if (z27 || !ReactionsContainerLayout.allowSmoothEnterTransition()) {
                                        this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                                    } else {
                                        this.scrimPopupWindow.setAnimationStyle(0);
                                    }
                                    this.scrimPopupWindow.setFocusable(true);
                                    chatScrimPopupContainerLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                                    this.scrimPopupWindow.setInputMethodMode(2);
                                    this.scrimPopupWindow.setSoftInputMode(48);
                                    this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                                    actionBarPopupWindowLayout5.setFitItems(true);
                                    Rect rect8 = rect2;
                                    left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) + rect8.left) - AndroidUtilities.dp(28.0f);
                                    if (left >= AndroidUtilities.dp(6.0f)) {
                                        left = AndroidUtilities.dp(6.0f);
                                    } else if (left > (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - chatScrimPopupContainerLayout.getMeasuredWidth()) {
                                        left = (this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - chatScrimPopupContainerLayout.getMeasuredWidth();
                                    }
                                    if (AndroidUtilities.isTablet()) {
                                        int[] iArr9 = new int[2];
                                        this.fragmentView.getLocationInWindow(iArr9);
                                        left += iArr9[0];
                                    }
                                    final int i36 = left;
                                    height = this.contentView.getHeight();
                                    measuredHeight = chatScrimPopupContainerLayout.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                                    measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                                    if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                                        height += measureKeyboardHeight;
                                    }
                                    if (measuredHeight >= height) {
                                        int y = (int) (this.chatListView.getY() + view.getTop() + f2);
                                        if ((measuredHeight - rect8.top) - rect8.bottom > AndroidUtilities.dp(240.0f)) {
                                            y += AndroidUtilities.dp(240.0f) - measuredHeight;
                                        }
                                        if (y < this.chatListView.getY() + AndroidUtilities.dp(24.0f)) {
                                            dp = (int) (this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                                        } else {
                                            int i37 = height - measuredHeight;
                                            if (y > i37 - AndroidUtilities.dp(8.0f)) {
                                                dp = i37 - AndroidUtilities.dp(8.0f);
                                            } else {
                                                i = y;
                                            }
                                        }
                                        i = dp;
                                    } else {
                                        i = this.inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                                    }
                                    chatScrimPopupContainerLayout.setMaxHeight(height - i);
                                    final int i38 = i;
                                    final ReactionsContainerLayout reactionsContainerLayout3 = reactionsContainerLayout;
                                    Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda191
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            ChatActivity.this.lambda$createMenu$207(i36, i38, z27, reactionsContainerLayout3);
                                        }
                                    };
                                    if (!atomicBoolean2.get()) {
                                        atomicReference.set(runnable2);
                                    } else {
                                        runnable2.run();
                                    }
                                    this.chatListView.stopScroll();
                                    this.chatLayoutManager.setCanScrollVertically(false);
                                    dimBehindView(view, true);
                                    hideHints(false);
                                    undoView = this.topUndoView;
                                    if (undoView != null) {
                                        undoView.hide(true, 1);
                                    }
                                    undoView2 = this.undoView;
                                    if (undoView2 != null) {
                                        undoView2.hide(true, 1);
                                    }
                                    chatActivityEnterView = this.chatActivityEnterView;
                                    if (chatActivityEnterView == null && chatActivityEnterView.getEditField() != null) {
                                        this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                                        return true;
                                    }
                                }
                            }
                            z12 = false;
                            if (z26) {
                            }
                            Activity parentActivity2 = getParentActivity();
                            int i212 = R.drawable.popup_fixed_alert;
                            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout92 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(parentActivity2, i212, this.themeDelegate, i20);
                            actionBarPopupWindowLayout92.setMinimumWidth(AndroidUtilities.dp(200.0f));
                            Rect rect42 = new Rect();
                            getParentActivity().getResources().getDrawable(i212).mutate().getPadding(rect42);
                            actionBarPopupWindowLayout92.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
                            if (actionBarPopupWindowLayout != null) {
                            }
                            atomicBoolean2 = atomicBoolean;
                            View chatScrimPopupContainerLayout2 = new ChatScrimPopupContainerLayout(this.contentView.getContext()) { // from class: org.telegram.ui.ChatActivity.116
                                @Override // android.view.ViewGroup, android.view.View
                                public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                                    if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                                        ChatActivity.this.closeMenu();
                                    }
                                    return super.dispatchKeyEvent(keyEvent);
                                }

                                @Override // android.view.ViewGroup, android.view.View
                                public boolean dispatchTouchEvent(MotionEvent motionEvent) {
                                    boolean dispatchTouchEvent = super.dispatchTouchEvent(motionEvent);
                                    if (motionEvent.getAction() == 0 && !dispatchTouchEvent) {
                                        ChatActivity.this.closeMenu();
                                    }
                                    return dispatchTouchEvent;
                                }
                            };
                            final Rect rect72 = rect;
                            chatScrimPopupContainerLayout2.setOnTouchListener(new View.OnTouchListener() { // from class: org.telegram.ui.ChatActivity.117
                                private int[] pos = new int[2];

                                @Override // android.view.View.OnTouchListener
                                public boolean onTouch(View view3, MotionEvent motionEvent) {
                                    if (motionEvent.getActionMasked() == 0) {
                                        ActionBarPopupWindow actionBarPopupWindow2 = ChatActivity.this.scrimPopupWindow;
                                        if (actionBarPopupWindow2 != null && actionBarPopupWindow2.isShowing()) {
                                            View contentView = ChatActivity.this.scrimPopupWindow.getContentView();
                                            contentView.getLocationInWindow(this.pos);
                                            Rect rect82 = rect72;
                                            int[] iArr92 = this.pos;
                                            rect82.set(iArr92[0], iArr92[1], iArr92[0] + contentView.getMeasuredWidth(), this.pos[1] + contentView.getMeasuredHeight());
                                            if (!rect72.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {
                                                ChatActivity.this.closeMenu();
                                            }
                                        }
                                    } else if (motionEvent.getActionMasked() == 4) {
                                        ChatActivity.this.closeMenu();
                                    }
                                    return false;
                                }
                            });
                            actionBarPopupWindowLayout4 = actionBarPopupWindowLayout2;
                            if (actionBarPopupWindowLayout4 == null) {
                            }
                            reactionsContainerLayout.setParentLayout(chatScrimPopupContainerLayout2);
                            final ReactionsContainerLayout reactionsContainerLayout22 = reactionsContainerLayout;
                            ActionBarPopupWindow actionBarPopupWindow2 = new ActionBarPopupWindow(chatScrimPopupContainerLayout2, -2, -2) { // from class: org.telegram.ui.ChatActivity.121
                                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                                public void dismiss() {
                                    super.dismiss();
                                    if (ChatActivity.this.scrimPopupWindow != this) {
                                        return;
                                    }
                                    if (Bulletin.getVisibleBulletin() == ChatActivity.this.messageSeenPrivacyBulletin && ChatActivity.this.messageSeenPrivacyBulletin != null) {
                                        ChatActivity.this.messageSeenPrivacyBulletin.hide();
                                        ChatActivity.this.messageSeenPrivacyBulletin = null;
                                    }
                                    ChatActivity chatActivity2 = ChatActivity.this;
                                    chatActivity2.scrimPopupWindow = null;
                                    chatActivity2.menuDeleteItem = null;
                                    ChatActivity.this.scrimPopupWindowItems = null;
                                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                    if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                        ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                                    } else {
                                        ChatActivity.this.dimBehindView(false);
                                    }
                                    ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                    if (chatActivityEnterView2 == null || chatActivityEnterView2.getEditField() == null) {
                                        return;
                                    }
                                    ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                                }

                                @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow
                                public void dismiss(boolean z35) {
                                    super.dismiss(z35);
                                    ReactionsContainerLayout reactionsContainerLayout32 = reactionsContainerLayout22;
                                    if (reactionsContainerLayout32 != null) {
                                        reactionsContainerLayout32.dismissParent(z35);
                                    }
                                }
                            };
                            this.scrimPopupWindow = actionBarPopupWindow2;
                            actionBarPopupWindow2.setPauseNotifications(true);
                            this.scrimPopupWindow.setDismissAnimationDuration(220);
                            this.scrimPopupWindow.setOutsideTouchable(true);
                            this.scrimPopupWindow.setClippingEnabled(true);
                            if (z27) {
                            }
                            this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                            this.scrimPopupWindow.setFocusable(true);
                            chatScrimPopupContainerLayout2.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                            this.scrimPopupWindow.setInputMethodMode(2);
                            this.scrimPopupWindow.setSoftInputMode(48);
                            this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                            actionBarPopupWindowLayout5.setFitItems(true);
                            Rect rect82 = rect2;
                            left = (((view.getLeft() + ((int) f)) - chatScrimPopupContainerLayout2.getMeasuredWidth()) + rect82.left) - AndroidUtilities.dp(28.0f);
                            if (left >= AndroidUtilities.dp(6.0f)) {
                            }
                            if (AndroidUtilities.isTablet()) {
                            }
                            final int i362 = left;
                            height = this.contentView.getHeight();
                            measuredHeight = chatScrimPopupContainerLayout2.getMeasuredHeight() + AndroidUtilities.dp(48.0f);
                            measureKeyboardHeight = this.contentView.measureKeyboardHeight();
                            if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                            }
                            if (measuredHeight >= height) {
                            }
                            chatScrimPopupContainerLayout2.setMaxHeight(height - i);
                            final int i382 = i;
                            final ReactionsContainerLayout reactionsContainerLayout32 = reactionsContainerLayout;
                            Runnable runnable22 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda191
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$createMenu$207(i362, i382, z27, reactionsContainerLayout32);
                                }
                            };
                            if (!atomicBoolean2.get()) {
                            }
                            this.chatListView.stopScroll();
                            this.chatLayoutManager.setCanScrollVertically(false);
                            dimBehindView(view, true);
                            hideHints(false);
                            undoView = this.topUndoView;
                            if (undoView != null) {
                            }
                            undoView2 = this.undoView;
                            if (undoView2 != null) {
                            }
                            chatActivityEnterView = this.chatActivityEnterView;
                            return chatActivityEnterView == null ? true : true;
                        }
                        return false;
                    }
                } else {
                    arrayList = arrayList15;
                }
                if (messageType >= 0 || (messageType == -1 && z21 && ((messageObject.isSending() || messageObject.isEditing()) && this.currentEncryptedChat == null))) {
                    this.selectedObject = messageObject;
                    this.selectedObjectGroup = validGroupedMessage;
                    int i39 = messageObject.type;
                    if (i39 != 19 && i39 != 15 && i39 != 13) {
                        charSequence2 = getMessageCaption(messageObject, validGroupedMessage, iArr3);
                        if (charSequence2 == null && this.selectedObject.isPoll()) {
                            try {
                                TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) this.selectedObject.messageOwner.media).poll;
                                StringBuilder sb = new StringBuilder(tLRPC$Poll.question);
                                sb.append("\n");
                                Iterator<TLRPC$TL_pollAnswer> it2 = tLRPC$Poll.answers.iterator();
                                while (it2.hasNext()) {
                                    sb.append("\n🔘 ");
                                    sb.append(it2.next().text);
                                }
                                charSequence2 = sb.toString();
                            } catch (Exception unused) {
                            }
                        }
                        if (charSequence2 == null && MessageObject.isMediaEmpty(this.selectedObject.messageOwner)) {
                            charSequence2 = getMessageContent(this.selectedObject, 0L, false);
                        }
                        if (charSequence2 != null) {
                        }
                        MessageObject messageObject23 = this.selectedObject;
                        charSequence2 = (!messageObject23.translated || messageObject23.isRestrictedMessage) ? null : null;
                        if (messageObject.isSponsored() || getMessagesController().premiumLocked) {
                            arrayList2 = arrayList;
                        } else {
                            arrayList2 = arrayList;
                            arrayList2.add(LocaleController.getString("HideAd", R.string.HideAd));
                            arrayList16.add(31);
                            arrayList14.add(Integer.valueOf(R.drawable.msg_block2));
                        }
                        if (messageType != -1) {
                            MessageObject messageObject24 = this.selectedObject;
                            if ((messageObject24.type == 0 || messageObject24.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z23 && !messageObject.isExpiredStory()) {
                                arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                arrayList16.add(3);
                                arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                            }
                            arrayList2.add(LocaleController.getString("CancelSending", R.string.CancelSending));
                            arrayList16.add(24);
                            arrayList14.add(Integer.valueOf(R.drawable.msg_delete));
                        } else if (messageType == 0) {
                            arrayList2.add(LocaleController.getString("Retry", R.string.Retry));
                            arrayList16.add(0);
                            arrayList14.add(Integer.valueOf(R.drawable.msg_retry));
                            arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                            arrayList16.add(1);
                            arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                        } else if (messageType == 1) {
                            if (this.currentChat != null) {
                                if (z9) {
                                    arrayList2.add(LocaleController.getString("Reply", R.string.Reply));
                                    arrayList16.add(8);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_reply));
                                }
                                if (!isThreadChat() && this.chatMode != 1 && messageObject2 != null && messageObject2.hasReplies() && this.currentChat.megagroup && messageObject2.canViewThread()) {
                                    arrayList2.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                    arrayList16.add(27);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                }
                                MessageObject messageObject25 = this.selectedObject;
                                if (messageObject25 != null && (tLRPC$Message6 = messageObject25.messageOwner) != null && tLRPC$Message6.action == null && (tLRPC$Chat6 = this.currentChat) != null && tLRPC$Chat6.forum && !this.isTopic && tLRPC$Message6 != null && (tLRPC$MessageReplyHeader3 = tLRPC$Message6.reply_to) != null && tLRPC$MessageReplyHeader3.forum_topic) {
                                    arrayList2.add(LocaleController.getString("ViewInTopic", R.string.ViewInTopic));
                                    arrayList16.add(32);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                }
                                if (z7) {
                                    arrayList2.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
                                    arrayList16.add(14);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_unpin));
                                } else if (z6) {
                                    arrayList2.add(LocaleController.getString("PinMessage", R.string.PinMessage));
                                    arrayList16.add(13);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_pin));
                                }
                                MessageObject messageObject26 = this.selectedObject;
                                if (messageObject26 != null && messageObject26.contentType == 0 && charSequence2 != null && charSequence2.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                    arrayList2.add(LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
                                    arrayList16.add(29);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_translate));
                                }
                                if (messageObject.canEditMessage(this.currentChat)) {
                                    arrayList2.add(LocaleController.getString("Edit", R.string.Edit));
                                    arrayList16.add(12);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_edit));
                                }
                                MessageObject messageObject27 = this.selectedObject;
                                if (messageObject27.contentType == 0 && !messageObject27.isMediaEmptyWebpage() && this.selectedObject.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((tLRPC$User2 = this.currentUser) != null && tLRPC$User2.bot))) {
                                    arrayList2.add(LocaleController.getString("ReportChat", R.string.ReportChat));
                                    arrayList16.add(23);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_report));
                                }
                            } else if (this.selectedObject.getId() > 0 && z9) {
                                arrayList2.add(LocaleController.getString("Reply", R.string.Reply));
                                arrayList16.add(8);
                                arrayList14.add(Integer.valueOf(R.drawable.msg_reply));
                            }
                            if (messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat) && (((arrayList11 = this.threadMessageObjects) == null || !arrayList11.contains(messageObject)) && ((tLRPC$Message5 = messageObject.messageOwner) == null || !(tLRPC$Message5.action instanceof TLRPC$TL_messageActionTopicCreate)))) {
                                arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                                arrayList16.add(1);
                                arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                            }
                        } else if (messageType == 20) {
                            arrayList2.add(LocaleController.getString("Retry", R.string.Retry));
                            arrayList16.add(0);
                            arrayList14.add(Integer.valueOf(R.drawable.msg_retry));
                            if (!z23) {
                                arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                arrayList16.add(3);
                                arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                            }
                            arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                            arrayList16.add(1);
                            arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                        } else {
                            if (this.currentEncryptedChat == null) {
                                if (this.chatMode == 1) {
                                    arrayList2.add(LocaleController.getString("MessageScheduleSend", R.string.MessageScheduleSend));
                                    arrayList16.add(100);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_send));
                                }
                                if (this.selectedObject.messageOwner.action instanceof TLRPC$TL_messageActionPhoneCall) {
                                    TLRPC$TL_messageActionPhoneCall tLRPC$TL_messageActionPhoneCall = (TLRPC$TL_messageActionPhoneCall) messageObject.messageOwner.action;
                                    TLRPC$PhoneCallDiscardReason tLRPC$PhoneCallDiscardReason = tLRPC$TL_messageActionPhoneCall.reason;
                                    iArr = iArr3;
                                    if (((tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonMissed) || (tLRPC$PhoneCallDiscardReason instanceof TLRPC$TL_phoneCallDiscardReasonBusy)) && !messageObject.isOutOwner()) {
                                        i15 = R.string.CallBack;
                                        str2 = "CallBack";
                                    } else {
                                        i15 = R.string.CallAgain;
                                        str2 = "CallAgain";
                                    }
                                    arrayList2.add(LocaleController.getString(str2, i15));
                                    arrayList16.add(18);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_callback));
                                    if (VoIPHelper.canRateCall(tLRPC$TL_messageActionPhoneCall)) {
                                        arrayList2.add(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem));
                                        arrayList16.add(19);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_fave));
                                    }
                                } else {
                                    iArr = iArr3;
                                }
                                if (z9) {
                                    arrayList2.add(LocaleController.getString("Reply", R.string.Reply));
                                    arrayList16.add(8);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_reply));
                                }
                                MessageObject messageObject28 = this.selectedObject;
                                if ((messageObject28.type == 0 || messageObject28.isDice() || this.selectedObject.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z23) {
                                    arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                    arrayList16.add(3);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                                }
                                if (!isThreadChat() && this.chatMode != 1 && (tLRPC$Chat5 = this.currentChat) != null && messageObject2 != null && ((tLRPC$Chat5.has_link || messageObject2.hasReplies()) && this.currentChat.megagroup && messageObject2.canViewThread())) {
                                    if (messageObject2.hasReplies()) {
                                        arrayList2.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                    } else {
                                        arrayList2.add(LocaleController.getString("ViewThread", R.string.ViewThread));
                                    }
                                    arrayList16.add(27);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                }
                                if (this.selectedObject.isSponsored() || this.chatMode == 1 || !ChatObject.isChannel(this.currentChat)) {
                                    z10 = z19;
                                } else {
                                    z10 = z19;
                                    if (this.selectedObject.getDialogId() != this.mergeDialogId) {
                                        arrayList2.add(LocaleController.getString("CopyLink", R.string.CopyLink));
                                        arrayList16.add(22);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_link));
                                    }
                                }
                                MessageObject messageObject29 = this.selectedObject;
                                if (messageObject29 != null && (tLRPC$Message4 = messageObject29.messageOwner) != null && tLRPC$Message4.action == null && (tLRPC$Chat4 = this.currentChat) != null && tLRPC$Chat4.forum && !this.isTopic && tLRPC$Message4 != null && (tLRPC$MessageReplyHeader2 = tLRPC$Message4.reply_to) != null && tLRPC$MessageReplyHeader2.forum_topic) {
                                    arrayList2.add(LocaleController.getString("ViewInTopic", R.string.ViewInTopic));
                                    arrayList16.add(32);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                }
                                if (messageType == 2) {
                                    if (this.chatMode != 1) {
                                        if (this.selectedObject.type == 17 && !messageObject.isPollClosed()) {
                                            if (messageObject.canUnvote()) {
                                                arrayList2.add(LocaleController.getString("Unvote", R.string.Unvote));
                                                arrayList16.add(25);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_unvote));
                                            }
                                            if (!messageObject.isForwarded()) {
                                                if (!messageObject.isOut() || (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup)) {
                                                    if (ChatObject.isChannel(this.currentChat)) {
                                                        TLRPC$Chat tLRPC$Chat9 = this.currentChat;
                                                        if (!tLRPC$Chat9.megagroup) {
                                                            if (!tLRPC$Chat9.creator) {
                                                                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat9.admin_rights;
                                                                if (tLRPC$TL_chatAdminRights != null) {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (messageObject.isQuiz()) {
                                                    arrayList2.add(LocaleController.getString("StopQuiz", R.string.StopQuiz));
                                                } else {
                                                    arrayList2.add(LocaleController.getString("StopPoll", R.string.StopPoll));
                                                }
                                                arrayList16.add(26);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_pollstop));
                                            }
                                        } else if (this.selectedObject.isMusic() && !z23) {
                                            arrayList2.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                            arrayList16.add(10);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                        } else if (this.selectedObject.isDocument() && !z23) {
                                            arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                            arrayList16.add(10);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                        }
                                    }
                                } else if (messageType == 3 && !z23) {
                                    TLRPC$MessageMedia tLRPC$MessageMedia = this.selectedObject.messageOwner.media;
                                    if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && MessageObject.isNewGifDocument(tLRPC$MessageMedia.webpage.document)) {
                                        arrayList2.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                        arrayList16.add(11);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_gif));
                                    }
                                } else if (messageType == 4) {
                                    if (!z23 && !this.selectedObject.hasRevealedExtendedMedia()) {
                                        if (this.selectedObject.isVideo()) {
                                            if (!this.selectedObject.needDrawBluredPreview()) {
                                                arrayList2.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                                arrayList16.add(4);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_gallery));
                                                arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                                arrayList16.add(6);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                            }
                                        } else if (this.selectedObject.isMusic()) {
                                            arrayList2.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                            arrayList16.add(10);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                            arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                            arrayList16.add(6);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                        } else if (this.selectedObject.getDocument() != null) {
                                            if (MessageObject.isNewGifDocument(this.selectedObject.getDocument())) {
                                                arrayList2.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                                arrayList16.add(11);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_gif));
                                            }
                                            arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                            arrayList16.add(10);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                            arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                            arrayList16.add(6);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                        } else if (!this.selectedObject.needDrawBluredPreview()) {
                                            arrayList2.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                            arrayList16.add(4);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_gallery));
                                        }
                                    }
                                } else if (messageType == 5) {
                                    arrayList2.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
                                    arrayList16.add(5);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_language));
                                    if (!z23) {
                                        arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                        arrayList16.add(10);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                        arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                        arrayList16.add(6);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                    }
                                } else if (messageType == 10) {
                                    arrayList2.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
                                    arrayList16.add(5);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_theme));
                                    if (!z23) {
                                        arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                        arrayList16.add(10);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                        arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                        arrayList16.add(6);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                    }
                                } else if (messageType == 6 && !z23 && !this.selectedObject.hasRevealedExtendedMedia()) {
                                    arrayList2.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    arrayList16.add(7);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_gallery));
                                    arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                    arrayList16.add(10);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                    arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    arrayList16.add(6);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                } else if (messageType == 7) {
                                    if (this.selectedObject.isMask()) {
                                        arrayList2.add(LocaleController.getString("AddToMasks", R.string.AddToMasks));
                                        arrayList16.add(9);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_sticker));
                                    } else {
                                        arrayList2.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                                        arrayList16.add(9);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_sticker));
                                        TLRPC$Document document = this.selectedObject.getDocument();
                                        if (!getMediaDataController().isStickerInFavorites(document)) {
                                            if (getMediaDataController().canAddStickerToFavorites() && MessageObject.isStickerHasSet(document)) {
                                                arrayList2.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                                arrayList16.add(20);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_fave));
                                            }
                                        } else {
                                            arrayList2.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
                                            arrayList16.add(21);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_unfave));
                                        }
                                    }
                                } else if (messageType == 8) {
                                    long j2 = this.selectedObject.messageOwner.media.user_id;
                                    TLRPC$User user = j2 != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j2)) : null;
                                    if (user != null && user.id != getUserConfig().getClientUserId() && getContactsController().contactsDict.get(Long.valueOf(user.id)) == null) {
                                        arrayList2.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                        arrayList16.add(15);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_addcontact));
                                    }
                                    if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                        if (!z23) {
                                            arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                            arrayList16.add(16);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                                        }
                                        arrayList2.add(LocaleController.getString("Call", R.string.Call));
                                        arrayList16.add(17);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_callback));
                                    }
                                } else if (messageType == 9) {
                                    TLRPC$Document document2 = this.selectedObject.getDocument();
                                    if (!getMediaDataController().isStickerInFavorites(document2)) {
                                        if (MessageObject.isStickerHasSet(document2)) {
                                            arrayList2.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                            arrayList16.add(20);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_fave));
                                        }
                                    } else {
                                        arrayList2.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
                                        arrayList16.add(21);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_unfave));
                                    }
                                }
                                if (!this.selectedObject.isSponsored() && this.chatMode != 1 && ((!this.selectedObject.needDrawBluredPreview() || this.selectedObject.hasExtendedMediaPreview()) && !this.selectedObject.isLiveLocation() && (i14 = (messageObject8 = this.selectedObject).type) != 16 && !z23 && i14 != 18 && i14 != 21 && !messageObject8.isWallpaperAction() && !messageObject.isExpiredStory() && messageObject.type != 24)) {
                                    arrayList2.add(LocaleController.getString("Forward", R.string.Forward));
                                    arrayList16.add(2);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_forward));
                                }
                                if (z7) {
                                    arrayList2.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
                                    arrayList16.add(14);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_unpin));
                                } else if (z6) {
                                    arrayList2.add(LocaleController.getString("PinMessage", R.string.PinMessage));
                                    arrayList16.add(13);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_pin));
                                }
                                MessageObject messageObject30 = this.selectedObject;
                                if (messageObject30 != null && messageObject30.contentType == 0 && charSequence2 != null && charSequence2.length() > 0 && !this.selectedObject.isAnimatedEmoji() && !this.selectedObject.isDice()) {
                                    arrayList2.add(LocaleController.getString("TranslateMessage", R.string.TranslateMessage));
                                    arrayList16.add(29);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_translate));
                                }
                                if (z8) {
                                    arrayList2.add(LocaleController.getString("Edit", R.string.Edit));
                                    arrayList16.add(12);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_edit));
                                }
                                if (this.chatMode == 1 && this.selectedObject.canEditMessageScheduleTime(this.currentChat)) {
                                    arrayList2.add(LocaleController.getString("MessageScheduleEditTime", R.string.MessageScheduleEditTime));
                                    arrayList16.add(102);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_calendar2));
                                }
                                if (this.chatMode != 1) {
                                    MessageObject messageObject31 = this.selectedObject;
                                    if (messageObject31.contentType == 0 && messageObject31.getId() > 0 && !this.selectedObject.isOut() && (this.currentChat != null || ((tLRPC$User = this.currentUser) != null && tLRPC$User.bot))) {
                                        if (UserObject.isReplyUser(this.currentUser)) {
                                            arrayList2.add(LocaleController.getString("BlockContact", R.string.BlockContact));
                                            arrayList16.add(23);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_block2));
                                        } else {
                                            arrayList2.add(LocaleController.getString("ReportChat", R.string.ReportChat));
                                            arrayList16.add(23);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_report));
                                        }
                                    }
                                }
                                if (messageObject.canDeleteMessage(this.chatMode == 1, this.currentChat) && ((arrayList10 = this.threadMessageObjects) == null || !arrayList10.contains(messageObject))) {
                                    arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                                    arrayList16.add(1);
                                    arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period != 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                }
                                j = 0;
                            } else {
                                z10 = z19;
                                iArr = iArr3;
                                if (z9) {
                                    arrayList2.add(LocaleController.getString("Reply", R.string.Reply));
                                    arrayList16.add(8);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_reply));
                                }
                                MessageObject messageObject32 = this.selectedObject;
                                if ((messageObject32.type == 0 || messageObject32.isAnimatedEmoji() || this.selectedObject.isAnimatedEmojiStickers() || getMessageCaption(this.selectedObject, this.selectedObjectGroup) != null) && !z23) {
                                    arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                    arrayList16.add(3);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                                }
                                if (!isThreadChat() && this.chatMode != 1 && (tLRPC$Chat3 = this.currentChat) != null && messageObject2 != null && ((tLRPC$Chat3.has_link || messageObject2.hasReplies()) && this.currentChat.megagroup && messageObject2.canViewThread())) {
                                    if (messageObject2.hasReplies()) {
                                        arrayList2.add(LocaleController.formatPluralString("ViewReplies", messageObject2.getRepliesCount(), new Object[0]));
                                    } else {
                                        arrayList2.add(LocaleController.getString("ViewThread", R.string.ViewThread));
                                    }
                                    arrayList16.add(27);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewreplies));
                                }
                                MessageObject messageObject33 = this.selectedObject;
                                if (messageObject33 != null && (tLRPC$Message3 = messageObject33.messageOwner) != null && tLRPC$Message3.action == null && (tLRPC$Chat2 = this.currentChat) != null && tLRPC$Chat2.forum && !this.isTopic && tLRPC$Message3 != null && (tLRPC$MessageReplyHeader = tLRPC$Message3.reply_to) != null && tLRPC$MessageReplyHeader.forum_topic) {
                                    arrayList2.add(LocaleController.getString("ViewInTopic", R.string.ViewInTopic));
                                    arrayList16.add(32);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_viewintopic));
                                }
                                if (messageType != 4 || z23 || this.selectedObject.hasRevealedExtendedMedia()) {
                                    if (messageType == 5) {
                                        arrayList2.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
                                        arrayList16.add(5);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_language));
                                    } else if (messageType == 10) {
                                        arrayList2.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
                                        arrayList16.add(5);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_theme));
                                    } else if (messageType == 7) {
                                        arrayList2.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                                        arrayList16.add(9);
                                        arrayList14.add(Integer.valueOf(R.drawable.msg_sticker));
                                    } else if (messageType == 8) {
                                        long j3 = this.selectedObject.messageOwner.media.user_id;
                                        j = 0;
                                        TLRPC$User user2 = j3 != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j3)) : null;
                                        if (user2 != null && user2.id != getUserConfig().getClientUserId()) {
                                            ArrayList arrayList24 = arrayList2;
                                            if (getContactsController().contactsDict.get(Long.valueOf(user2.id)) == null) {
                                                arrayList2 = arrayList24;
                                                arrayList2.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                                arrayList16.add(15);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_addcontact));
                                            } else {
                                                arrayList2 = arrayList24;
                                            }
                                        }
                                        if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                                            if (!z23) {
                                                arrayList2.add(LocaleController.getString("Copy", R.string.Copy));
                                                arrayList16.add(16);
                                                arrayList14.add(Integer.valueOf(R.drawable.msg_copy));
                                            }
                                            arrayList2.add(LocaleController.getString("Call", R.string.Call));
                                            arrayList16.add(17);
                                            arrayList14.add(Integer.valueOf(R.drawable.msg_callback));
                                        }
                                        arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                                        arrayList16.add(1);
                                        arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                                    }
                                } else if (this.selectedObject.isVideo()) {
                                    arrayList2.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    arrayList16.add(4);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_gallery));
                                    arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    arrayList16.add(6);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                } else if (this.selectedObject.isMusic()) {
                                    arrayList2.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                    arrayList16.add(10);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                    arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    arrayList16.add(6);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                } else if (!this.selectedObject.isVideo() && this.selectedObject.getDocument() != null) {
                                    arrayList2.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                    arrayList16.add(10);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_download));
                                    arrayList2.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    arrayList16.add(6);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_shareout));
                                } else {
                                    arrayList2.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    arrayList16.add(4);
                                    arrayList14.add(Integer.valueOf(R.drawable.msg_gallery));
                                }
                                j = 0;
                                arrayList2.add(LocaleController.getString("Delete", R.string.Delete));
                                arrayList16.add(1);
                                arrayList14.add(Integer.valueOf(this.selectedObject.messageOwner.ttl_period == 0 ? R.drawable.msg_delete_auto : R.drawable.msg_delete));
                            }
                            charSequence = charSequence2;
                            actionBarPopupWindowLayout = null;
                            if (arrayList16.isEmpty()) {
                            }
                            if (this.scrimPopupWindow != null) {
                            }
                        }
                        j = 0;
                        iArr = iArr3;
                        z10 = z19;
                        charSequence = charSequence2;
                        actionBarPopupWindowLayout = null;
                        if (arrayList16.isEmpty()) {
                        }
                        if (this.scrimPopupWindow != null) {
                        }
                    }
                    charSequence2 = null;
                    MessageObject messageObject232 = this.selectedObject;
                    if (messageObject232.translated) {
                    }
                    if (messageObject.isSponsored()) {
                    }
                    arrayList2 = arrayList;
                    if (messageType != -1) {
                    }
                    j = 0;
                    iArr = iArr3;
                    z10 = z19;
                    charSequence = charSequence2;
                    actionBarPopupWindowLayout = null;
                    if (arrayList16.isEmpty()) {
                    }
                    if (this.scrimPopupWindow != null) {
                    }
                } else {
                    j = 0;
                    iArr = iArr3;
                    arrayList2 = arrayList;
                    actionBarPopupWindowLayout = null;
                    charSequence = null;
                    z10 = z19;
                    if (arrayList16.isEmpty()) {
                    }
                    if (this.scrimPopupWindow != null) {
                    }
                }
            } else {
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                if (chatActivityEnterView2 == null || !(chatActivityEnterView2.isRecordingAudioVideo() || this.chatActivityEnterView.isRecordLocked())) {
                    createActionMode();
                    ActionBarMenuItem item = this.actionBar.createActionMode().getItem(12);
                    if (item != null) {
                        item.setVisibility(0);
                    }
                    createBottomMessagesActionButtons();
                    this.bottomMessagesActionContainer.setVisibility(0);
                    int measuredHeight2 = this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f);
                    createActionMode();
                    if (this.chatActivityEnterView.getVisibility() == 0) {
                        ArrayList arrayList25 = new ArrayList();
                        arrayList25.add(this.chatActivityEnterView);
                        MentionsContainerView mentionsContainerView = this.mentionContainer;
                        if (mentionsContainerView != null && mentionsContainerView.getVisibility() == 0) {
                            arrayList25.add(this.mentionContainer);
                        }
                        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
                        if (suggestEmojiView != null && suggestEmojiView.getVisibility() == 0) {
                            arrayList25.add(this.suggestEmojiPanel);
                        }
                        this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, (View[]) arrayList25.toArray(new View[0]), new boolean[]{false, true, true}, this.chatListView, measuredHeight2);
                        if (getParentActivity() instanceof LaunchActivity) {
                            ((LaunchActivity) getParentActivity()).hideVisibleActionMode();
                        }
                        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                        if (chatActivityEnterView3 != null && chatActivityEnterView3.getEditField() != null) {
                            this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                        }
                    } else if (this.bottomOverlayChat.getVisibility() == 0) {
                        this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, new View[]{this.bottomOverlayChat}, new boolean[]{true}, this.chatListView, measuredHeight2);
                    } else {
                        this.actionBar.showActionMode(true, this.bottomMessagesActionContainer, null, null, null, this.chatListView, measuredHeight2);
                    }
                    closeMenu();
                    this.chatLayoutManager.setCanScrollVertically(true);
                    updatePinnedMessageView(true);
                    AnimatorSet animatorSet = new AnimatorSet();
                    ArrayList arrayList26 = new ArrayList();
                    for (int i40 = 0; i40 < this.actionModeViews.size(); i40++) {
                        View view3 = this.actionModeViews.get(i40);
                        view3.setPivotY(ActionBar.getCurrentActionBarHeight() / 2);
                        AndroidUtilities.clearDrawableAnimation(view3);
                        arrayList26.add(ObjectAnimator.ofFloat(view3, View.SCALE_Y, 0.1f, 1.0f));
                    }
                    animatorSet.playTogether(arrayList26);
                    animatorSet.setDuration(250L);
                    animatorSet.start();
                    addToSelectedMessages(messageObject, z2);
                    ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                    if (chatActivityEnterView4 != null) {
                        chatActivityEnterView4.preventInput = true;
                    }
                    NumberTextView numberTextView = this.selectedMessagesCountTextView;
                    if (numberTextView != null) {
                        z18 = false;
                        numberTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), false);
                    } else {
                        z18 = false;
                    }
                    updateVisibleRows();
                    ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
                    if (chatActivityEnterView5 != null) {
                        chatActivityEnterView5.hideBotCommands();
                    }
                    return z18;
                }
                return false;
            }
        }
        z4 = false;
        if (z4) {
        }
        if (getMessagesController().isChatNoForwards(this.currentChat)) {
        }
        if (messageObject.getDialogId() == this.mergeDialogId) {
        }
        if (messageObject.canEditMessage(this.currentChat)) {
        }
        if (z5) {
            size = validGroupedMessage.messages.size();
            int i182 = 0;
            while (i16 < size) {
            }
            if (i182 >= 2) {
            }
        }
        if (!messageObject.isExpiredStory()) {
        }
        if (!z21) {
        }
        if (getParentActivity() != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$169(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$168(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$168(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_payments_paymentReceipt) {
            presentFragment(new PaymentFormActivity((TLRPC$TL_payments_paymentReceipt) tLObject));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$170(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$172(ViewPager viewPager, int i, LinearLayout linearLayout, AtomicBoolean atomicBoolean, final HorizontalScrollView horizontalScrollView, final ReactionTabHolderView reactionTabHolderView, View view) {
        int currentItem = viewPager.getCurrentItem();
        if (i == currentItem) {
            return;
        }
        final ReactionTabHolderView reactionTabHolderView2 = (ReactionTabHolderView) linearLayout.getChildAt(currentItem);
        atomicBoolean.set(true);
        viewPager.setCurrentItem(i, true);
        final float scrollX = horizontalScrollView.getScrollX();
        final float x = reactionTabHolderView.getX() - ((horizontalScrollView.getWidth() - reactionTabHolderView.getWidth()) / 2.0f);
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(150L);
        duration.setInterpolator(CubicBezierInterpolator.DEFAULT);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda0
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$171(horizontalScrollView, scrollX, x, reactionTabHolderView2, reactionTabHolderView, valueAnimator);
            }
        });
        duration.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$171(HorizontalScrollView horizontalScrollView, float f, float f2, ReactionTabHolderView reactionTabHolderView, ReactionTabHolderView reactionTabHolderView2, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        horizontalScrollView.setScrollX((int) (f + ((f2 - f) * floatValue)));
        reactionTabHolderView.setOutlineProgress(1.0f - floatValue);
        reactionTabHolderView2.setOutlineProgress(floatValue);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 108 extends PagerAdapter {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ SparseArray val$cachedViews;
        final /* synthetic */ List val$counters;
        final /* synthetic */ int val$finalCount;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ int val$head;
        final /* synthetic */ MessageObject val$message;
        final /* synthetic */ ViewPager val$pager;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ ReactedHeaderView val$reactedView;
        final /* synthetic */ boolean val$showAllReactionsTab;
        final /* synthetic */ int val$size;

        @Override // androidx.viewpager.widget.PagerAdapter
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }

        108(int i, SparseArray sparseArray, boolean z, List list, MessageObject messageObject, ReactedHeaderView reactedHeaderView, SparseIntArray sparseIntArray, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, int i3) {
            this.val$size = i;
            this.val$cachedViews = sparseArray;
            this.val$showAllReactionsTab = z;
            this.val$counters = list;
            this.val$message = messageObject;
            this.val$reactedView = reactedHeaderView;
            this.val$cachedHeights = sparseIntArray;
            this.val$head = i2;
            this.val$pager = viewPager;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
            this.val$finalCount = i3;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public int getCount() {
            return this.val$size;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public Object instantiateItem(ViewGroup viewGroup, final int i) {
            View view = (View) this.val$cachedViews.get(i);
            if (view != null) {
                viewGroup.addView(view);
                return view;
            }
            int i2 = this.val$showAllReactionsTab ? i - 1 : i;
            TLRPC$ReactionCount tLRPC$ReactionCount = i2 >= 0 ? (TLRPC$ReactionCount) this.val$counters.get(i2) : null;
            Context context = viewGroup.getContext();
            ChatActivity chatActivity = ChatActivity.this;
            ReactedUsersListView onCustomEmojiSelectedListener = new ReactedUsersListView(context, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, this.val$message, tLRPC$ReactionCount, false).setSeenUsers(this.val$reactedView.getSeenUsers()).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$108$$ExternalSyntheticLambda0
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
                    ChatActivity.108.this.lambda$instantiateItem$0(reactedUsersListView, arrayList);
                }
            });
            final MessageObject messageObject = this.val$message;
            ReactedUsersListView onProfileSelectedListener = onCustomEmojiSelectedListener.setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$108$$ExternalSyntheticLambda2
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
                    ChatActivity.108.this.lambda$instantiateItem$1(messageObject, reactedUsersListView, j, tLRPC$MessagePeerReaction);
                }
            });
            final SparseIntArray sparseIntArray = this.val$cachedHeights;
            final int i3 = this.val$head;
            final ViewPager viewPager = this.val$pager;
            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = this.val$popupLayout;
            final int[] iArr = this.val$foregroundIndex;
            ReactedUsersListView onHeightChangedListener = onProfileSelectedListener.setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$108$$ExternalSyntheticLambda1
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnHeightChangedListener
                public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i4) {
                    ChatActivity.108.lambda$instantiateItem$2(sparseIntArray, i, i3, viewPager, actionBarPopupWindowLayout, iArr, reactedUsersListView, i4);
                }
            });
            if (i2 < 0) {
                onHeightChangedListener.setPredictiveCount(this.val$finalCount);
                this.val$reactedView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda124(onHeightChangedListener));
            }
            viewGroup.addView(onHeightChangedListener);
            this.val$cachedViews.put(i, onHeightChangedListener);
            return onHeightChangedListener;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$0(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.108.1
                @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$instantiateItem$1(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
            Bundle bundle = new Bundle();
            if (j > 0) {
                bundle.putLong("user_id", j);
            } else {
                bundle.putLong("chat_id", -j);
            }
            bundle.putInt("report_reaction_message_id", messageObject.getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$instantiateItem$2(SparseIntArray sparseIntArray, int i, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i3) {
            int i4 = i2 + i3;
            sparseIntArray.put(i, i4);
            if (viewPager.getCurrentItem() == i) {
                actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], i4, true);
            }
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public void destroyItem(ViewGroup viewGroup, int i, Object obj) {
            viewGroup.removeView((View) obj);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$173(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.110
            @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$174(MessageObject messageObject, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
        Bundle bundle = new Bundle();
        if (j > 0) {
            bundle.putLong("user_id", j);
        } else {
            bundle.putLong("chat_id", -j);
        }
        bundle.putInt("report_reaction_message_id", messageObject.getId());
        bundle.putLong("report_reaction_from_dialog_id", this.dialog_id);
        presentFragment(new ProfileActivity(bundle));
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$175(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, ReactedUsersListView reactedUsersListView, int i) {
        actionBarPopupWindowLayout.getSwipeBack().setNewForegroundHeight(iArr[0], AndroidUtilities.dp(52.0f) + i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$176(ReactedUsersListView reactedUsersListView, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, View view) {
        if (reactedUsersListView == null || reactedUsersListView.isLoaded) {
            actionBarPopupWindowLayout.getSwipeBack().openForeground(iArr[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$177(MessageSeenView messageSeenView, View view, int i) {
        TLObject tLObject = messageSeenView.users.get(i);
        if (tLObject == null) {
            return;
        }
        closeMenu(true);
        Bundle bundle = new Bundle();
        if (tLObject instanceof TLRPC$User) {
            bundle.putLong("user_id", ((TLRPC$User) tLObject).id);
        } else if (tLObject instanceof TLRPC$Chat) {
            bundle.putLong("chat_id", ((TLRPC$Chat) tLObject).id);
        }
        presentFragment(new ProfileActivity(bundle));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$178(MessageObject messageObject, View view) {
        UndoView undoView;
        if (getMediaDataController().saveToRingtones(messageObject.getDocument()) && (undoView = getUndoView()) != null) {
            undoView.showWithAction(this.dialog_id, UndoView.ACTION_RINGTONE_ADDED, new Runnable() { // from class: org.telegram.ui.ChatActivity.113
                boolean clicked;

                @Override // java.lang.Runnable
                public void run() {
                    if (this.clicked) {
                        return;
                    }
                    this.clicked = true;
                    ChatActivity.this.presentFragment(new NotificationsSettingsActivity());
                }
            });
        }
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$179(View view) {
        closeMenu();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$184(boolean[] zArr, final boolean[] zArr2, final ImageView imageView, final ImageView imageView2) {
        if (zArr[0]) {
            return;
        }
        zArr[0] = true;
        final long[] jArr = {-1};
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda236
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$createMenu$181(jArr, zArr2, imageView, imageView2);
            }
        };
        TLRPC$TL_messages_rateTranscribedAudio tLRPC$TL_messages_rateTranscribedAudio = new TLRPC$TL_messages_rateTranscribedAudio();
        tLRPC$TL_messages_rateTranscribedAudio.msg_id = this.selectedObject.getId();
        tLRPC$TL_messages_rateTranscribedAudio.peer = getMessagesController().getInputPeer(this.selectedObject.messageOwner.peer_id);
        tLRPC$TL_messages_rateTranscribedAudio.transcription_id = this.selectedObject.messageOwner.voiceTranscriptionId;
        tLRPC$TL_messages_rateTranscribedAudio.good = zArr2[0];
        getConnectionsManager().sendRequest(tLRPC$TL_messages_rateTranscribedAudio, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda259
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$createMenu$183(runnable, jArr, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(runnable, 150L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$181(long[] jArr, boolean[] zArr, ImageView imageView, ImageView imageView2) {
        jArr[0] = SystemClock.elapsedRealtime();
        if (!zArr[0]) {
            imageView = imageView2;
        }
        final CrossfadeDrawable crossfadeDrawable = (CrossfadeDrawable) imageView.getDrawable();
        ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda19
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$180(CrossfadeDrawable.this, valueAnimator);
            }
        });
        ofFloat.setDuration(150L);
        ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
        ofFloat.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$180(CrossfadeDrawable crossfadeDrawable, ValueAnimator valueAnimator) {
        crossfadeDrawable.setProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$183(Runnable runnable, long[] jArr, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.cancelRunOnUIThread(runnable);
        this.selectedObject.messageOwner.voiceTranscriptionRated = true;
        getMessagesStorage().updateMessageVoiceTranscriptionOpen(this.selectedObject.getDialogId(), this.selectedObject.getId(), this.selectedObject.messageOwner);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda171
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$182();
            }
        }, jArr[0] > 0 ? Math.max(0L, 300 - (SystemClock.elapsedRealtime() - jArr[0])) : 0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$182() {
        closeMenu();
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString("TranscriptionReportSent", R.string.TranscriptionReportSent)).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$185(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = true;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$186(boolean[] zArr, Runnable runnable, View view) {
        zArr[0] = false;
        runnable.run();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$187(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, View view) {
        actionBarPopupWindowLayout.getSwipeBack().closeForeground();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$188(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return;
        }
        logSponsoredClicked(messageObject);
        Browser.openUrl(getContext(), this.selectedObject.sponsoredWebPage.url, true, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$createMenu$189(View view) {
        MessageObject messageObject = this.selectedObject;
        if (messageObject == null) {
            return false;
        }
        if (AndroidUtilities.addToClipboard(messageObject.sponsoredWebPage.url)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyLinkBulletin().show();
            return true;
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$190(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString("TextCopied", R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$191(View view) {
        if (AndroidUtilities.addToClipboard(this.selectedObject.sponsoredAdditionalInfo)) {
            BulletinFactory.of(Bulletin.BulletinWindow.make(getParentActivity()), this.themeDelegate).createCopyBulletin(LocaleController.getString("TextCopied", R.string.TextCopied)).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$192(ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int i, View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        actionBarPopupWindowLayout.getSwipeBack().openForeground(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$193(View view) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        BottomSheet.Builder builder = new BottomSheet.Builder(this.contentView.getContext());
        builder.setCustomView(new SponsoredMessageInfoView(getParentActivity(), this.themeDelegate));
        builder.show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$194(int i, ArrayList arrayList, View view) {
        if (this.selectedObject == null || i >= arrayList.size()) {
            return;
        }
        processSelectedOption(((Integer) arrayList.get(i)).intValue());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ Boolean lambda$createMenu$195(View view, URLSpan uRLSpan) {
        didPressMessageUrl(uRLSpan, false, this.selectedObject, view instanceof ChatMessageCell ? (ChatMessageCell) view : null);
        return Boolean.TRUE;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$197(int i, ArrayList arrayList, String str, String str2, String str3, TLRPC$InputPeer tLRPC$InputPeer, int[] iArr, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        TLRPC$Message tLRPC$Message;
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        String str4 = (str == null || !str.equals(str2)) ? str2 : str3;
        MessageObject messageObject = this.selectedObject;
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, iArr[0], str, str4, charSequence, (messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null) ? null : tLRPC$Message.entities, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$196();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 > 0) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
            updateTopPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$196() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$198(String[] strArr, String str, String str2, boolean z, ActionBarMenuSubItem actionBarMenuSubItem, AtomicBoolean atomicBoolean, AtomicReference atomicReference, String str3) {
        TLRPC$Chat tLRPC$Chat;
        strArr[0] = str3;
        if (strArr[0] != null && ((!strArr[0].equals(str) || !strArr[0].equals(str2) || strArr[0].equals(TranslateController.UNKNOWN_LANGUAGE)) && ((z && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(strArr[0])) || ((((tLRPC$Chat = this.currentChat) != null && (tLRPC$Chat.has_link || ChatObject.isPublic(tLRPC$Chat))) || this.selectedObject.messageOwner.fwd_from != null) && ("uk".equals(strArr[0]) || "ru".equals(strArr[0])))))) {
            actionBarMenuSubItem.setVisibility(0);
        }
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$199(AtomicBoolean atomicBoolean, AtomicReference atomicReference, Exception exc) {
        FileLog.e("mlkit: failed to detect language in message");
        atomicBoolean.set(false);
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.get()).run();
            atomicReference.set(null);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:24:0x007a  */
    /* JADX WARN: Removed duplicated region for block: B:28:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$createMenu$201(int i, ArrayList arrayList, String[] strArr, String str, String str2, TLRPC$InputPeer tLRPC$InputPeer, int[] iArr, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        String str3;
        String str4;
        int i2;
        TLRPC$Message tLRPC$Message;
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        if (strArr[0] != null) {
            str3 = str;
            if (strArr[0].equals(str3)) {
                str4 = str2;
                MessageObject messageObject = this.selectedObject;
                TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, iArr[0], strArr[0], str4, charSequence, (messageObject != null || (tLRPC$Message = messageObject.messageOwner) == null) ? null : tLRPC$Message.entities, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda144
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$createMenu$200();
                    }
                }).setDimBehind(false);
                closeMenu(false);
                SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
                if (i2 <= 0) {
                    SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                    edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
                    updateTopPanel(true);
                    return;
                }
                return;
            }
        } else {
            str3 = str;
        }
        str4 = str3;
        MessageObject messageObject2 = this.selectedObject;
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, iArr[0], strArr[0], str4, charSequence, (messageObject2 != null || (tLRPC$Message = messageObject2.messageOwner) == null) ? null : tLRPC$Message.entities, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$200();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings2 = MessagesController.getNotificationsSettings(this.currentAccount);
        i2 = notificationsSettings2.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 <= 0) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$200() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$createMenu$202(AtomicReference atomicReference) {
        if (atomicReference.get() != null) {
            ((Runnable) atomicReference.getAndSet(null)).run();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$204(int i, ArrayList arrayList, TLRPC$InputPeer tLRPC$InputPeer, int[] iArr, String str, CharSequence charSequence, boolean z, Utilities.CallbackReturn callbackReturn, View view) {
        if (this.selectedObject == null || i >= arrayList.size() || getParentActivity() == null) {
            return;
        }
        TranslateAlert2.showAlert(getParentActivity(), this, this.currentAccount, tLRPC$InputPeer, iArr[0], TranslateController.UNKNOWN_LANGUAGE, str, charSequence, null, z, callbackReturn, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$203();
            }
        }).setDimBehind(false);
        closeMenu(false);
        SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = notificationsSettings.getInt("dialog_show_translate_count" + getDialogId(), 5);
        if (i2 > 0) {
            SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            edit.putInt("dialog_show_translate_count" + getDialogId(), i2 - 1).apply();
            updateTopPanel(true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$203() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$205(ArrayList arrayList, View view) {
        EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(this, getParentActivity(), this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.120
            @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
            public void dismiss() {
                super.dismiss();
                ChatActivity.this.dimBehindView(false);
            }
        };
        emojiPacksAlert.setCalcMandatoryInsets(isKeyboardVisible());
        emojiPacksAlert.setDimBehind(false);
        closeMenu(false);
        showDialog(emojiPacksAlert);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$207(int i, int i2, boolean z, ReactionsContainerLayout reactionsContainerLayout) {
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow == null || this.fragmentView == null || actionBarPopupWindow.isShowing() || !AndroidUtilities.isActivityRunning(getParentActivity())) {
            return;
        }
        this.scrimPopupWindow.showAtLocation(this.chatListView, 51, i, i2);
        if (z && reactionsContainerLayout != null) {
            reactionsContainerLayout.startEnterAnimation(true);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$createMenu$206();
            }
        }, 420L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createMenu$206() {
        ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
        if (actionBarMenuSubItemArr == null || actionBarMenuSubItemArr.length <= 0 || actionBarMenuSubItemArr[0] == null) {
            return;
        }
        actionBarMenuSubItemArr[0].requestFocus();
        this.scrimPopupWindowItems[0].performAccessibilityAction(64, null);
        this.scrimPopupWindowItems[0].sendAccessibilityEvent(8);
    }

    private void createEmptyView() {
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        if (this.emptyViewContainer != null || getContext() == null) {
            return;
        }
        FrameLayout frameLayout = new FrameLayout(getContext());
        this.emptyViewContainer = frameLayout;
        frameLayout.setOnTouchListener(ChatActivity$$ExternalSyntheticLambda118.INSTANCE);
        this.emptyViewContainer.setVisibility(4);
        this.contentView.addView(this.emptyViewContainer, 1, LayoutHelper.createFrame(-1, -2, 17));
        int i = getArguments().getInt("nearby_distance", -1);
        if ((i >= 0 || this.preloadedGreetingsSticker != null) && this.currentUser != null && !this.userBlocked) {
            ChatGreetingsView chatGreetingsView = new ChatGreetingsView(getContext(), this.currentUser, i, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
            this.greetingsViewContainer = chatGreetingsView;
            chatGreetingsView.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda276
                @Override // org.telegram.ui.Components.ChatGreetingsView.Listener
                public final void onGreetings(TLRPC$Document tLRPC$Document) {
                    ChatActivity.this.lambda$createEmptyView$209(tLRPC$Document);
                }
            });
            this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(10.0f), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
            this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-1, -2.0f, 16, 68.0f, 0.0f, 68.0f, 0.0f));
        } else if (this.currentEncryptedChat == null) {
            if (this.isTopic) {
                this.emptyViewContainer.addView(new CreateTopicEmptyView(getContext(), this.contentView, this.themeDelegate), new FrameLayout.LayoutParams(-2, -2, 17));
            } else if (!isThreadChat() && this.chatMode == 0 && (((tLRPC$User = this.currentUser) != null && tLRPC$User.self) || ((tLRPC$Chat = this.currentChat) != null && tLRPC$Chat.creator && !ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)))) {
                ChatBigEmptyView chatBigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, this.currentChat == null ? 2 : 1, this.themeDelegate);
                this.bigEmptyView = chatBigEmptyView;
                this.emptyViewContainer.addView(chatBigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                if (this.currentChat != null) {
                    this.bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", R.string.GroupEmptyTitle1)));
                }
            } else {
                String str = null;
                if (isThreadChat()) {
                    if (this.isComments) {
                        str = LocaleController.getString("NoComments", R.string.NoComments);
                    } else {
                        str = LocaleController.getString("NoReplies", R.string.NoReplies);
                    }
                } else if (this.chatMode == 1) {
                    str = LocaleController.getString("NoScheduledMessages", R.string.NoScheduledMessages);
                } else {
                    TLRPC$User tLRPC$User2 = this.currentUser;
                    if (tLRPC$User2 != null) {
                        long j = tLRPC$User2.id;
                        if (j != 777000 && j != 429000 && j != 4244000 && MessagesController.isSupportUser(tLRPC$User2)) {
                            str = LocaleController.getString("GotAQuestion", R.string.GotAQuestion);
                        }
                    }
                    TLRPC$User tLRPC$User3 = this.currentUser;
                    if (tLRPC$User3 == null || tLRPC$User3.self || tLRPC$User3.deleted || this.userBlocked) {
                        str = LocaleController.getString("NoMessages", R.string.NoMessages);
                    }
                }
                if (str == null) {
                    ChatGreetingsView chatGreetingsView2 = new ChatGreetingsView(getContext(), this.currentUser, i, this.currentAccount, this.preloadedGreetingsSticker, this.themeDelegate);
                    this.greetingsViewContainer = chatGreetingsView2;
                    chatGreetingsView2.setListener(new ChatGreetingsView.Listener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda277
                        @Override // org.telegram.ui.Components.ChatGreetingsView.Listener
                        public final void onGreetings(TLRPC$Document tLRPC$Document) {
                            ChatActivity.this.lambda$createEmptyView$210(tLRPC$Document);
                        }
                    });
                    this.greetingsViewContainer.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(10.0f), this.greetingsViewContainer, this.contentView, getThemedPaint("paintChatActionBackground")));
                    this.emptyViewContainer.addView(this.greetingsViewContainer, LayoutHelper.createFrame(-1, -2.0f, 16, 68.0f, 0.0f, 68.0f, 0.0f));
                    return;
                }
                TextView textView = new TextView(getContext());
                this.emptyView = textView;
                textView.setText(str);
                this.emptyView.setTextSize(1, 14.0f);
                this.emptyView.setGravity(17);
                this.emptyView.setTextColor(getThemedColor(Theme.key_chat_serviceText));
                this.emptyView.setBackground(Theme.createServiceDrawable(AndroidUtilities.dp(6.0f), this.emptyView, this.contentView, getThemedPaint("paintChatActionBackground")));
                this.emptyView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                this.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                this.emptyViewContainer.addView(this.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
            }
        } else {
            this.bigEmptyView = new ChatBigEmptyView(getContext(), this.contentView, 0, this.themeDelegate);
            if (this.currentEncryptedChat.admin_id == getUserConfig().getClientUserId()) {
                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(this.currentUser)));
            } else {
                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(this.currentUser)));
            }
            this.emptyViewContainer.addView(this.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$209(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, null, true, 0, false, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createEmptyView$210(TLRPC$Document tLRPC$Document) {
        this.animatingDocuments.put(tLRPC$Document, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(tLRPC$Document, null, this.dialog_id, null, null, null, null, true, 0, false, null);
    }

    public void closeMenu() {
        closeMenu(true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void closeMenu(boolean z) {
        this.scrimPopupWindowHideDimOnDismiss = z;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
        if (z) {
            return;
        }
        ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.scrimViewAlphaAnimator.cancel();
        }
        ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
        this.scrimViewAlphaAnimator = ofFloat;
        ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda6
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.lambda$closeMenu$211(valueAnimator2);
            }
        });
        this.scrimViewAlphaAnimator.setDuration(150L);
        this.scrimViewAlphaAnimator.start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$closeMenu$211(ValueAnimator valueAnimator) {
        this.scrimViewAlpha = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidate();
            this.chatListView.invalidate();
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r14v1 */
    /* JADX WARN: Type inference failed for: r14v3 */
    public void selectReaction(MessageObject messageObject, ReactionsContainerLayout reactionsContainerLayout, View view, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2, boolean z3) {
        int i;
        int i2;
        String str;
        if (isInScheduleMode() || messageObject == null) {
            return;
        }
        ReactionsEffectOverlay.removeCurrent(false);
        boolean selectReaction = messageObject.selectReaction(visibleReaction, z2, z);
        int id = messageObject.getId();
        if (this.groupedMessagesMap.get(messageObject.getGroupId()) != null) {
            MessageObject findMessageWithFlags = this.groupedMessagesMap.get(messageObject.getGroupId()).findMessageWithFlags(messageObject.shouldDrawReactionsInLayout() ? 9 : 10);
            if (findMessageWithFlags != null) {
                id = findMessageWithFlags.getId();
            }
        }
        int i3 = id;
        if (!selectReaction || z) {
            i = i3;
            i2 = 1;
        } else {
            i2 = 1;
            i = i3;
            ReactionsEffectOverlay.show(this, reactionsContainerLayout, findMessageCell(i3, true), view, f, f2, visibleReaction, this.currentAccount, reactionsContainerLayout != null ? z2 ? 0 : 2 : 1);
        }
        if (selectReaction && (str = visibleReaction.emojicon) != null) {
            int i4 = R.string.AccDescrYouReactedWith;
            Object[] objArr = new Object[i2];
            objArr[0] = str;
            AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.formatString("AccDescrYouReactedWith", i4, objArr));
        }
        ArrayList<ReactionsLayoutInBubble.VisibleReaction> arrayList = new ArrayList<>();
        arrayList.addAll(messageObject.getChoosenReactions());
        SendMessagesHelper sendMessagesHelper = getSendMessagesHelper();
        ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = selectReaction ? visibleReaction : null;
        122 r7 = new 122(z, i, selectReaction, reactionsContainerLayout, f, f2, visibleReaction, messageObject);
        this.updateReactionRunnable = r7;
        sendMessagesHelper.sendReaction(messageObject, arrayList, visibleReaction2, z2, z3, this, r7);
        if (z) {
            updateMessageAnimated(messageObject, i2);
            this.updateReactionRunnable.run();
        }
        AndroidUtilities.runOnUIThread(this.updateReactionRunnable, 50L);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 122 implements Runnable {
        final /* synthetic */ boolean val$added;
        final /* synthetic */ int val$finalMessageIdForCell;
        final /* synthetic */ boolean val$fromDoubleTap;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ ReactionsContainerLayout val$reactionsLayout;
        final /* synthetic */ ReactionsLayoutInBubble.VisibleReaction val$visibleReaction;
        final /* synthetic */ float val$x;
        final /* synthetic */ float val$y;

        122(boolean z, int i, boolean z2, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction, MessageObject messageObject) {
            this.val$fromDoubleTap = z;
            this.val$finalMessageIdForCell = i;
            this.val$added = z2;
            this.val$reactionsLayout = reactionsContainerLayout;
            this.val$x = f;
            this.val$y = f2;
            this.val$visibleReaction = visibleReaction;
            this.val$primaryMessage = messageObject;
        }

        @Override // java.lang.Runnable
        public void run() {
            ChatActivity chatActivity = ChatActivity.this;
            if (chatActivity.updateReactionRunnable != null) {
                chatActivity.updateReactionRunnable = null;
                if (this.val$fromDoubleTap) {
                    final int i = this.val$finalMessageIdForCell;
                    final boolean z = this.val$added;
                    final ReactionsContainerLayout reactionsContainerLayout = this.val$reactionsLayout;
                    final float f = this.val$x;
                    final float f2 = this.val$y;
                    final ReactionsLayoutInBubble.VisibleReaction visibleReaction = this.val$visibleReaction;
                    chatActivity.lambda$openDiscussionMessageChat$255(new Runnable() { // from class: org.telegram.ui.ChatActivity$122$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.122.this.lambda$run$1(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                        }
                    });
                } else {
                    final MessageObject messageObject = this.val$primaryMessage;
                    chatActivity.lambda$openDiscussionMessageChat$255(new Runnable() { // from class: org.telegram.ui.ChatActivity$122$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.122.this.lambda$run$2(messageObject);
                        }
                    });
                }
                ChatActivity.this.closeMenu();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$1(final int i, final boolean z, final ReactionsContainerLayout reactionsContainerLayout, final float f, final float f2, final ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$122$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.122.this.lambda$run$0(i, z, reactionsContainerLayout, f, f2, visibleReaction);
                }
            }, 50L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$0(int i, boolean z, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
            ChatMessageCell findMessageCell = ChatActivity.this.findMessageCell(i, true);
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                ReactionsEffectOverlay.show(chatActivity, reactionsContainerLayout, findMessageCell, null, f, f2, visibleReaction, ((BaseFragment) chatActivity).currentAccount, 1);
                ReactionsEffectOverlay.startAnimation();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$run$2(MessageObject messageObject) {
            MessageObject messageObject2 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
            if (messageObject2 != null && messageObject2 != messageObject) {
                MessageObject messageObject3 = (MessageObject) ChatActivity.this.messagesDict[0].get(messageObject.getId());
                messageObject3.messageOwner.reactions = messageObject.messageOwner.reactions;
                messageObject = messageObject3;
            }
            ChatActivity.this.updateMessageAnimated(messageObject, true);
            ReactionsEffectOverlay.startAnimation();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    @SuppressLint({"NotifyDataSetChanged"})
    public void updateMessageAnimated(final MessageObject messageObject, final boolean z) {
        if (this.chatAdapter == null) {
            return;
        }
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda205
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$updateMessageAnimated$212(messageObject, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageAnimated$212(MessageObject messageObject, boolean z) {
        if (this.fragmentView == null) {
            return;
        }
        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(messageObject.getGroupId());
        if (groupedMessages != null) {
            ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
            if (chatListItemAnimator != null) {
                chatListItemAnimator.groupWillChanged(groupedMessages);
            }
            for (int i = 0; i < groupedMessages.messages.size(); i++) {
                groupedMessages.messages.get(i).forceUpdate = true;
                if (z) {
                    groupedMessages.messages.get(i).reactionsChanged = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged(true);
            return;
        }
        int indexOf = this.messages.indexOf(this.messagesDict[0].get(messageObject.getId()));
        if (z) {
            messageObject.forceUpdate = true;
            messageObject.reactionsChanged = true;
        }
        if (indexOf >= 0) {
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            chatActivityAdapter.notifyItemChanged(chatActivityAdapter.messagesStartRow + indexOf);
        }
    }

    public ChatMessageCell findMessageCell(int i, boolean z) {
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return null;
        }
        int childCount = recyclerListView.getChildCount();
        for (int i2 = 0; i2 < childCount; i2++) {
            View childAt = this.chatListView.getChildAt(i2);
            if ((this.chatListView.getChildAt(i2) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i2)).getMessageObject().getId() == i) {
                if (z) {
                    if (childAt.getY() + childAt.getMeasuredHeight() < (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f) || childAt.getY() > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        return null;
                    }
                }
                return (ChatMessageCell) this.chatListView.getChildAt(i2);
            }
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject == null || getParentActivity() == null) {
            return;
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay != null && chatSelectionReactionMenuOverlay.isVisible()) {
            this.selectionReactionsOverlay.setHiddenByScroll(true);
        }
        if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
            this.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
        }
        this.mentionContainer.getAdapter().setNeedBotContext(false);
        this.chatActivityEnterView.setVisibility(0);
        showFieldPanelForEdit(true, messageObject);
        updateBottomOverlay();
        checkEditTimer();
        this.chatActivityEnterView.setAllowStickersAndGifs(true, false, false, true);
        updatePinnedMessageView(true);
        updateVisibleRows();
        if (!messageObject.scheduled) {
            TLRPC$TL_messages_getMessageEditData tLRPC$TL_messages_getMessageEditData = new TLRPC$TL_messages_getMessageEditData();
            tLRPC$TL_messages_getMessageEditData.peer = getMessagesController().getInputPeer(this.dialog_id);
            tLRPC$TL_messages_getMessageEditData.id = messageObject.getId();
            this.editingMessageObjectReqId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessageEditData, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda256
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$startEditingMessageObject$214(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        this.chatActivityEnterView.showEditDoneProgress(false, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$214(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda212
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$startEditingMessageObject$213(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startEditingMessageObject$213(TLObject tLObject) {
        this.editingMessageObjectReqId = 0;
        if (tLObject != null || getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        showDialog(builder.create());
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setEditingMessageObject(null, false);
            hideFieldPanel(true);
        }
    }

    public void setupStickerVibrationAndSound(ChatMessageCell chatMessageCell) {
        MessagesController.EmojiSound emojiSound;
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC$Document document = messageObject.getDocument();
        boolean isAnimatedEmoji = messageObject.isAnimatedEmoji();
        if (!isAnimatedEmoji) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation == null || !isAnimatedEmoji) {
            return;
        }
        String unwrapEmoji = EmojiAnimationsOverlay.unwrapEmoji(messageObject.getStickerEmoji());
        if (EmojiData.isHeartEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap = new HashMap<>();
            hashMap.put(1, 1);
            hashMap.put(13, 0);
            hashMap.put(59, 1);
            hashMap.put(71, 0);
            hashMap.put(128, 1);
            hashMap.put(140, 0);
            lottieAnimation.setVibrationPattern(hashMap);
        } else if (EmojiData.isPeachEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap2 = new HashMap<>();
            hashMap2.put(34, 1);
            lottieAnimation.setVibrationPattern(hashMap2);
        } else if (EmojiData.isCofinEmoji(unwrapEmoji)) {
            HashMap<Integer, Integer> hashMap3 = new HashMap<>();
            hashMap3.put(24, 0);
            hashMap3.put(36, 0);
            lottieAnimation.setVibrationPattern(hashMap3);
        }
        if (messageObject.isAnimatedAnimatedEmoji()) {
            lottieAnimation.resetVibrationAfterRestart(true);
        }
        if (lottieAnimation.isRunning() || unwrapEmoji == null || (emojiSound = getMessagesController().emojiSounds.get(unwrapEmoji.replace("️", ""))) == null) {
            return;
        }
        getMediaController().playEmojiSound(getAccountInstance(), unwrapEmoji, emojiSound, false);
    }

    public void restartSticker(ChatMessageCell chatMessageCell) {
        MessageObject messageObject = chatMessageCell.getMessageObject();
        TLRPC$Document document = messageObject.getDocument();
        if (!messageObject.isAnimatedAnimatedEmoji()) {
            setupStickerVibrationAndSound(chatMessageCell);
        }
        if (!messageObject.isAnimatedEmoji()) {
            if (!MessageObject.isAnimatedStickerDocument(document, this.currentEncryptedChat == null || messageObject.isOut()) || SharedConfig.loopStickers()) {
                return;
            }
        }
        RLottieDrawable lottieAnimation = chatMessageCell.getPhotoImage().getLottieAnimation();
        if (lottieAnimation != null) {
            lottieAnimation.restart();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public CharSequence getMessageContent(MessageObject messageObject, long j, boolean z) {
        TLRPC$Chat chat;
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
        if (z) {
            long fromChatId = messageObject.getFromChatId();
            if (j != fromChatId) {
                if (fromChatId > 0) {
                    TLRPC$User user = getMessagesController().getUser(Long.valueOf(fromChatId));
                    if (user != null) {
                        spannableStringBuilder.append((CharSequence) ContactsController.formatName(user.first_name, user.last_name)).append((CharSequence) ":\n");
                    }
                } else if (fromChatId < 0 && (chat = getMessagesController().getChat(Long.valueOf(-fromChatId))) != null) {
                    spannableStringBuilder.append((CharSequence) chat.title).append((CharSequence) ":\n");
                }
            }
        }
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            spannableStringBuilder.append((CharSequence) restrictionReason);
        } else {
            CharSequence charSequence = messageObject.caption;
            if (charSequence != null) {
                spannableStringBuilder.append(charSequence);
            } else {
                spannableStringBuilder.append(messageObject.messageText);
            }
        }
        return spannableStringBuilder;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void unpinMessage(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        final ArrayList arrayList = new ArrayList();
        arrayList.add(this.selectedObject);
        final ArrayList arrayList2 = new ArrayList();
        arrayList2.add(Integer.valueOf(messageObject.getId()));
        final int i = this.totalPinnedMessagesCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList2, Boolean.FALSE, 0, 0, 0, Integer.valueOf(this.totalPinnedMessagesCount - 1), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = BulletinFactory.createUnpinMessageBulletin(this, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda200
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$215(arrayList2, arrayList, i);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda202
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$unpinMessage$216(messageObject);
            }
        }, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$215(ArrayList arrayList, ArrayList arrayList2, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), arrayList, Boolean.TRUE, arrayList2, 0, 0, Integer.valueOf(i), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinMessage$216(MessageObject messageObject) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, messageObject.getId(), true, false, false);
        this.pinBulletin = null;
    }

    public void openReportChat(int i) {
        Bundle bundle = new Bundle();
        if (DialogObject.isUserDialog(this.dialog_id)) {
            bundle.putLong("user_id", this.dialog_id);
        } else {
            bundle.putLong("chat_id", -this.dialog_id);
        }
        bundle.putInt("report", i);
        ChatActivity chatActivity = new ChatActivity(bundle);
        presentFragment(chatActivity);
        chatActivity.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.123
            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2) {
                ChatActivityDelegate.-CC.$default$onUnpin(this, z, z2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openReplyMessage(int i2) {
                ChatActivityDelegate.-CC.$default$openReplyMessage(this, i2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openSearch(String str) {
                ChatActivityDelegate.-CC.$default$openSearch(this, str);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void onReport() {
                ChatActivity.this.createUndoView();
                if (ChatActivity.this.undoView == null) {
                    return;
                }
                ChatActivity.this.undoView.showWithAction(0L, 74, (Runnable) null);
            }
        };
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String str = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty(str) && !new File(str).exists()) {
            str = null;
        }
        if (TextUtils.isEmpty(str)) {
            str = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(str, getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }

    /* JADX WARN: Code restructure failed: missing block: B:269:0x079d, code lost:
        if (r0.exists() != false) goto L267;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processSelectedOption(int i) {
        TLRPC$TL_forumTopic findTopic;
        BulletinFactory.FileType fileType;
        File file;
        TLRPC$Chat tLRPC$Chat;
        ArrayList arrayList;
        final int id;
        TLRPC$Chat tLRPC$Chat2;
        final boolean[] zArr;
        MessageObject messageObject;
        if (this.selectedObject == null || getParentActivity() == null) {
            return;
        }
        boolean z = false;
        if (i == 31) {
            showDialog(new PremiumFeatureBottomSheet(this, 3, true));
        } else if (i == 32) {
            int topicId = MessageObject.getTopicId(this.selectedObject.messageOwner, true);
            if (topicId != 0 && (findTopic = getMessagesController().getTopicsController().findTopic(this.currentChat.id, topicId)) != null) {
                ForumUtilities.openTopic(this, this.currentChat.id, findTopic, this.selectedObject.getId());
            }
        } else {
            if (i != 100) {
                int i2 = 2;
                switch (i) {
                    case 0:
                        if (this.selectedObjectGroup != null) {
                            boolean z2 = true;
                            for (int i3 = 0; i3 < this.selectedObjectGroup.messages.size(); i3++) {
                                if (!getSendMessagesHelper().retrySendMessage(this.selectedObjectGroup.messages.get(i3), false)) {
                                    z2 = false;
                                }
                            }
                            if (z2 && this.chatMode == 0) {
                                moveScrollToLastMessage(false);
                                break;
                            }
                        } else if (getSendMessagesHelper().retrySendMessage(this.selectedObject, false)) {
                            updateVisibleRows();
                            if (this.chatMode == 0) {
                                moveScrollToLastMessage(false);
                                break;
                            }
                        }
                        break;
                    case 1:
                        if (getParentActivity() == null) {
                            this.selectedObject = null;
                            this.selectedObjectToEditCaption = null;
                            this.selectedObjectGroup = null;
                            return;
                        }
                        createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup, 1, true);
                        z = true;
                        break;
                    case 2:
                        this.forwardingMessage = this.selectedObject;
                        this.forwardingMessageGroup = this.selectedObjectGroup;
                        Bundle bundle = new Bundle();
                        bundle.putBoolean("onlySelect", true);
                        bundle.putInt("dialogsType", 3);
                        MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
                        bundle.putInt("messagesCount", groupedMessages == null ? 1 : groupedMessages.messages.size());
                        if (!this.forwardingMessage.isPoll()) {
                            i2 = 0;
                        } else if (!this.forwardingMessage.isPublicPoll()) {
                            i2 = 1;
                        }
                        bundle.putInt("hasPoll", i2);
                        bundle.putBoolean("hasInvoice", this.forwardingMessage.isInvoice());
                        bundle.putBoolean("canSelectTopics", true);
                        DialogsActivity dialogsActivity = new DialogsActivity(bundle);
                        dialogsActivity.setDelegate(this);
                        presentFragment(dialogsActivity);
                        break;
                    case 3:
                        if (this.selectedObject.isDice()) {
                            AndroidUtilities.addToClipboard(this.selectedObject.getDiceEmoji());
                        } else {
                            CharSequence messageCaption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                            if (messageCaption != null) {
                                AndroidUtilities.addToClipboard(messageCaption);
                            } else {
                                AndroidUtilities.addToClipboard(getMessageContent(this.selectedObject, 0L, false));
                            }
                        }
                        createUndoView();
                        UndoView undoView = this.undoView;
                        if (undoView != null) {
                            undoView.showWithAction(0L, 52, (Runnable) null);
                            break;
                        } else {
                            return;
                        }
                    case 4:
                        int i4 = Build.VERSION.SDK_INT;
                        if (i4 >= 23 && ((i4 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            this.selectedObjectToEditCaption = null;
                            return;
                        }
                        MessageObject.GroupedMessages groupedMessages2 = this.selectedObjectGroup;
                        if (groupedMessages2 != null) {
                            int size = groupedMessages2.messages.size();
                            boolean z3 = true;
                            boolean z4 = true;
                            for (int i5 = 0; i5 < size; i5++) {
                                MessageObject messageObject2 = this.selectedObjectGroup.messages.get(i5);
                                saveMessageToGallery(messageObject2);
                                z3 &= messageObject2.isPhoto();
                                z4 &= messageObject2.isVideo();
                            }
                            if (z3) {
                                fileType = BulletinFactory.FileType.PHOTOS;
                            } else if (z4) {
                                fileType = BulletinFactory.FileType.VIDEOS;
                            } else {
                                fileType = BulletinFactory.FileType.MEDIA;
                            }
                            BulletinFactory.of(this).createDownloadBulletin(fileType, size, this.themeDelegate).show();
                            break;
                        } else {
                            saveMessageToGallery(this.selectedObject);
                            if (getParentActivity() != null) {
                                BulletinFactory.of(this).createDownloadBulletin(this.selectedObject.isVideo() ? BulletinFactory.FileType.VIDEO : BulletinFactory.FileType.PHOTO, this.themeDelegate).show();
                                break;
                            }
                        }
                        break;
                    case 5:
                        if (!TextUtils.isEmpty(this.selectedObject.messageOwner.attachPath)) {
                            file = new File(this.selectedObject.messageOwner.attachPath);
                            break;
                        }
                        file = null;
                        if (file == null) {
                            File pathToMessage = getFileLoader().getPathToMessage(this.selectedObject.messageOwner);
                            if (pathToMessage.exists()) {
                                file = pathToMessage;
                            }
                        }
                        if (file != null) {
                            if (file.getName().toLowerCase().endsWith("attheme")) {
                                Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, this.selectedObject.getDocumentName(), null, true);
                                if (applyThemeFile != null) {
                                    presentFragment(new ThemePreviewActivity(applyThemeFile));
                                    break;
                                } else {
                                    this.scrollToPositionOnRecreate = -1;
                                    if (getParentActivity() == null) {
                                        this.selectedObject = null;
                                        this.selectedObjectGroup = null;
                                        this.selectedObjectToEditCaption = null;
                                        return;
                                    }
                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                    builder.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                    builder.setDimEnabled(false);
                                    builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda49
                                        @Override // android.content.DialogInterface.OnDismissListener
                                        public final void onDismiss(DialogInterface dialogInterface) {
                                            ChatActivity.this.lambda$processSelectedOption$217(dialogInterface);
                                        }
                                    });
                                    showDialog(builder.create());
                                }
                            } else if (LocaleController.getInstance().applyLanguageFile(file, this.currentAccount)) {
                                presentFragment(new LanguageSelectActivity());
                                break;
                            } else if (getParentActivity() == null) {
                                this.selectedObject = null;
                                this.selectedObjectGroup = null;
                                this.selectedObjectToEditCaption = null;
                                return;
                            } else {
                                AlertDialog.Builder builder2 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                                builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder2.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
                                builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                builder2.setDimEnabled(false);
                                builder2.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda54
                                    @Override // android.content.DialogInterface.OnDismissListener
                                    public final void onDismiss(DialogInterface dialogInterface) {
                                        ChatActivity.this.lambda$processSelectedOption$218(dialogInterface);
                                    }
                                });
                                showDialog(builder2.create());
                            }
                            z = true;
                            break;
                        }
                        break;
                    case 6:
                        String str = this.selectedObject.messageOwner.attachPath;
                        if (str != null && str.length() > 0 && !new File(str).exists()) {
                            str = null;
                        }
                        if (str == null || str.length() == 0) {
                            str = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                        }
                        Intent intent = new Intent("android.intent.action.SEND");
                        intent.setType(this.selectedObject.getDocument().mime_type);
                        File file2 = new File(str);
                        if (Build.VERSION.SDK_INT >= 24) {
                            try {
                                intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), ApplicationLoader.getApplicationId() + ".provider", file2));
                                intent.setFlags(1);
                            } catch (Exception unused) {
                                intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
                            }
                        } else {
                            intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(file2));
                        }
                        try {
                            getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
                        } catch (Throwable unused2) {
                            break;
                        }
                        break;
                    case 7:
                        String str2 = this.selectedObject.messageOwner.attachPath;
                        if (str2 != null && str2.length() > 0 && !new File(str2).exists()) {
                            str2 = null;
                        }
                        if (str2 == null || str2.length() == 0) {
                            str2 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                        }
                        int i6 = Build.VERSION.SDK_INT;
                        if (i6 >= 23 && ((i6 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            this.selectedObjectToEditCaption = null;
                            return;
                        }
                        MediaController.saveFile(str2, getParentActivity(), 0, null, null);
                        BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate).show();
                        break;
                        break;
                    case 8:
                        showFieldPanelForReply(this.selectedObject);
                        break;
                    case 9:
                        StickersAlert stickersAlert = new StickersAlert(getParentActivity(), this, this.selectedObject.getInputStickerSet(), null, (this.bottomOverlayChat.getVisibility() == 0 || !((tLRPC$Chat = this.currentChat) == null || ChatObject.canSendStickers(tLRPC$Chat))) ? null : this.chatActivityEnterView, this.themeDelegate);
                        stickersAlert.setCalcMandatoryInsets(isKeyboardVisible());
                        stickersAlert.setDimBehind(false);
                        stickersAlert.setOnDismissListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda168
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.lambda$processSelectedOption$219();
                            }
                        });
                        showDialog(stickersAlert);
                        z = true;
                        break;
                    case 10:
                        int i7 = Build.VERSION.SDK_INT;
                        if (i7 >= 23 && ((i7 <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            this.selectedObjectToEditCaption = null;
                            return;
                        }
                        final boolean isMusic = this.selectedObject.isMusic();
                        boolean isDocument = this.selectedObject.isDocument();
                        if (isMusic || isDocument) {
                            if (this.selectedObjectGroup != null) {
                                arrayList = new ArrayList(this.selectedObjectGroup.messages);
                            } else {
                                arrayList = new ArrayList();
                                arrayList.add(this.selectedObject);
                            }
                            MediaController.saveFilesFromMessages(getParentActivity(), getAccountInstance(), arrayList, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda248
                                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                                public final void run(int i8) {
                                    ChatActivity.this.lambda$processSelectedOption$220(isMusic, i8);
                                }
                            });
                            break;
                        } else {
                            final boolean isVideo = this.selectedObject.isVideo();
                            final boolean isPhoto = this.selectedObject.isPhoto();
                            final boolean isGif = this.selectedObject.isGif();
                            String documentFileName = FileLoader.getDocumentFileName(this.selectedObject.getDocument());
                            if (TextUtils.isEmpty(documentFileName)) {
                                documentFileName = this.selectedObject.getFileName();
                            }
                            String str3 = documentFileName;
                            String str4 = this.selectedObject.messageOwner.attachPath;
                            if (str4 != null && str4.length() > 0 && !new File(str4).exists()) {
                                str4 = null;
                            }
                            if (str4 == null || str4.length() == 0) {
                                str4 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                            }
                            MediaController.saveFile(str4, getParentActivity(), 2, str3, this.selectedObject.getDocument() != null ? this.selectedObject.getDocument().mime_type : "", new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda249
                                @Override // org.telegram.messenger.Utilities.Callback
                                public final void run(Object obj) {
                                    ChatActivity.this.lambda$processSelectedOption$221(isPhoto, isVideo, isGif, (Uri) obj);
                                }
                            });
                            break;
                        }
                        break;
                    case 11:
                        TLRPC$Document document = this.selectedObject.getDocument();
                        getMessagesController().saveGif(this.selectedObject, document);
                        if (!showGifHint() && getParentActivity() != null) {
                            BulletinFactory.of(this).createDownloadBulletin(BulletinFactory.FileType.GIF, this.themeDelegate).show();
                        }
                        this.chatActivityEnterView.addRecentGif(document);
                        break;
                    case 12:
                        MessageObject messageObject3 = this.selectedObjectToEditCaption;
                        if (messageObject3 != null) {
                            startEditingMessageObject(messageObject3);
                        } else {
                            startEditingMessageObject(this.selectedObject);
                        }
                        this.selectedObject = null;
                        this.selectedObjectGroup = null;
                        this.selectedObjectToEditCaption = null;
                        break;
                    case 13:
                        MessageObject.GroupedMessages groupedMessages3 = this.selectedObjectGroup;
                        if (groupedMessages3 != null && !groupedMessages3.messages.isEmpty()) {
                            id = this.selectedObjectGroup.messages.get(0).getId();
                        } else {
                            id = this.selectedObject.getId();
                        }
                        AlertDialog.Builder builder3 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                        builder3.setTitle(LocaleController.getString("PinMessageAlertTitle", R.string.PinMessageAlertTitle));
                        builder3.setDimAlpha(0.5f);
                        builder3.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda52
                            @Override // android.content.DialogInterface.OnDismissListener
                            public final void onDismiss(DialogInterface dialogInterface) {
                                ChatActivity.this.lambda$processSelectedOption$222(dialogInterface);
                            }
                        });
                        if (this.currentUser != null) {
                            int i8 = this.currentPinnedMessageId;
                            if (i8 != 0 && id < i8) {
                                builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                            } else {
                                builder3.setMessage(LocaleController.getString("PinMessageAlertChat", R.string.PinMessageAlertChat));
                            }
                            zArr = new boolean[]{false, false};
                            if (!UserObject.isUserSelf(this.currentUser)) {
                                FrameLayout frameLayout = new FrameLayout(getParentActivity());
                                CheckBoxCell checkBoxCell = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                checkBoxCell.setText(LocaleController.formatString("PinAlsoFor", R.string.PinAlsoFor, UserObject.getFirstName(this.currentUser)), "", false, false);
                                checkBoxCell.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16.0f : 8.0f), 0, AndroidUtilities.dp(LocaleController.isRTL ? 8.0f : 16.0f), 0);
                                frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48, 51));
                                checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda106
                                    @Override // android.view.View.OnClickListener
                                    public final void onClick(View view) {
                                        ChatActivity.lambda$processSelectedOption$223(zArr, view);
                                    }
                                });
                                builder3.setCustomViewOffset(6);
                                builder3.setView(frameLayout);
                            }
                        } else if ((ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) || ((tLRPC$Chat2 = this.currentChat) != null && !ChatObject.isChannel(tLRPC$Chat2))) {
                            if (!this.pinnedMessageIds.isEmpty() && id < this.pinnedMessageIds.get(0).intValue()) {
                                builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                                zArr = new boolean[]{false, true};
                            } else {
                                if (this.isTopic) {
                                    builder3.setMessage(LocaleController.getString("PinMessageInTopicAlert", R.string.PinMessageInTopicAlert));
                                } else {
                                    builder3.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
                                }
                                zArr = new boolean[]{true, true};
                                FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
                                CheckBoxCell checkBoxCell2 = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                                checkBoxCell2.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                checkBoxCell2.setText(LocaleController.getString("PinNotify", R.string.PinNotify), "", true, false);
                                checkBoxCell2.setPadding(AndroidUtilities.dp(LocaleController.isRTL ? 16.0f : 8.0f), 0, AndroidUtilities.dp(LocaleController.isRTL ? 8.0f : 16.0f), 0);
                                frameLayout2.addView(checkBoxCell2, LayoutHelper.createFrame(-1, 48, 51));
                                checkBoxCell2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda107
                                    @Override // android.view.View.OnClickListener
                                    public final void onClick(View view) {
                                        ChatActivity.lambda$processSelectedOption$224(zArr, view);
                                    }
                                });
                                builder3.setCustomViewOffset(9);
                                builder3.setView(frameLayout2);
                            }
                        } else {
                            int i9 = this.currentPinnedMessageId;
                            if (i9 != 0 && id < i9) {
                                builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                            } else {
                                builder3.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
                            }
                            zArr = new boolean[]{false, true};
                        }
                        builder3.setPositiveButton(LocaleController.getString("PinMessage", R.string.PinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda36
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i10) {
                                ChatActivity.this.lambda$processSelectedOption$226(id, zArr, dialogInterface, i10);
                            }
                        });
                        builder3.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder3.create());
                        z = true;
                        break;
                    case 14:
                        if (this.pinnedMessageObjects.containsKey(Integer.valueOf(this.selectedObject.getId()))) {
                            messageObject = this.selectedObject;
                        } else {
                            MessageObject.GroupedMessages groupedMessages4 = this.selectedObjectGroup;
                            if (groupedMessages4 != null && !groupedMessages4.messages.isEmpty()) {
                                messageObject = this.selectedObjectGroup.messages.get(0);
                            } else {
                                messageObject = this.selectedObject;
                            }
                        }
                        if (this.chatMode == 2 && this.messages.size() == 2) {
                            finishFragment();
                            this.chatActivityDelegate.onUnpin(false, false);
                            break;
                        } else {
                            unpinMessage(messageObject);
                            break;
                        }
                        break;
                    case 15:
                        Bundle bundle2 = new Bundle();
                        bundle2.putLong("user_id", this.selectedObject.messageOwner.media.user_id);
                        bundle2.putString("phone", this.selectedObject.messageOwner.media.phone_number);
                        bundle2.putBoolean("addContact", true);
                        presentFragment(new ContactAddActivity(bundle2));
                        break;
                    case 16:
                        AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
                        break;
                    case 17:
                        try {
                            Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse("tel:" + this.selectedObject.messageOwner.media.phone_number));
                            intent2.addFlags(268435456);
                            getParentActivity().startActivityForResult(intent2, 500);
                            break;
                        } catch (Exception e) {
                            FileLog.e(e);
                            break;
                        }
                    case 18:
                        TLRPC$User tLRPC$User = this.currentUser;
                        if (tLRPC$User != null) {
                            boolean isVideoCall = this.selectedObject.isVideoCall();
                            TLRPC$UserFull tLRPC$UserFull = this.userInfo;
                            VoIPHelper.startCall(tLRPC$User, isVideoCall, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                            break;
                        }
                        break;
                    case 19:
                        VoIPHelper.showRateAlert(getParentActivity(), (TLRPC$TL_messageActionPhoneCall) this.selectedObject.messageOwner.action);
                        break;
                    case 20:
                        MediaDataController mediaDataController = getMediaDataController();
                        MessageObject messageObject4 = this.selectedObject;
                        mediaDataController.addRecentSticker(2, messageObject4, messageObject4.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                        break;
                    case 21:
                        MediaDataController mediaDataController2 = getMediaDataController();
                        MessageObject messageObject5 = this.selectedObject;
                        mediaDataController2.addRecentSticker(2, messageObject5, messageObject5.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                        break;
                    case 22:
                        TLRPC$TL_channels_exportMessageLink tLRPC$TL_channels_exportMessageLink = new TLRPC$TL_channels_exportMessageLink();
                        MessageObject messageObject6 = this.selectedObject;
                        if (messageObject6 == this.replyingMessageObject && this.isComments) {
                            tLRPC$TL_channels_exportMessageLink.id = this.replyOriginalMessageId;
                            tLRPC$TL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.replyOriginalChat);
                        } else {
                            tLRPC$TL_channels_exportMessageLink.id = messageObject6.getId();
                            tLRPC$TL_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.currentChat);
                            tLRPC$TL_channels_exportMessageLink.thread = isReplyChatComment() || this.isTopic;
                        }
                        getConnectionsManager().sendRequest(tLRPC$TL_channels_exportMessageLink, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda255
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                ChatActivity.this.lambda$processSelectedOption$228(tLObject, tLRPC$TL_error);
                            }
                        });
                        break;
                    case 23:
                        if (UserObject.isReplyUser(this.currentUser)) {
                            MessageObject messageObject7 = this.selectedObject;
                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject7.messageOwner.fwd_from;
                            if (tLRPC$MessageFwdHeader != null) {
                                AlertsCreator.showBlockReportSpamReplyAlert(this, messageObject7, MessageObject.getPeerId(tLRPC$MessageFwdHeader.from_id), this.themeDelegate, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda137
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatActivity.this.lambda$processSelectedOption$229();
                                    }
                                });
                            }
                        } else {
                            AlertsCreator.createReportAlert(getParentActivity(), this.dialog_id, this.selectedObject.getId(), 0, this, this.themeDelegate, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda141
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$processSelectedOption$230();
                                }
                            });
                        }
                        z = true;
                        break;
                    case 24:
                        if (this.selectedObject.isEditing() || (this.selectedObject.isSending() && this.selectedObjectGroup == null)) {
                            getSendMessagesHelper().cancelSendingMessage(this.selectedObject);
                            break;
                        } else if (this.selectedObject.isSending() && this.selectedObjectGroup != null) {
                            for (int i10 = 0; i10 < this.selectedObjectGroup.messages.size(); i10++) {
                                getSendMessagesHelper().cancelSendingMessage(new ArrayList<>(this.selectedObjectGroup.messages));
                            }
                            break;
                        }
                        break;
                    case 25:
                        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                        final int sendVote = getSendMessagesHelper().sendVote(this.selectedObject, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda238
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.lambda$processSelectedOption$231(alertDialogArr);
                            }
                        });
                        if (sendVote != 0) {
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda231
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.this.lambda$processSelectedOption$233(alertDialogArr, sendVote);
                                }
                            }, 500L);
                            break;
                        }
                        break;
                    case 26:
                        final MessageObject messageObject8 = this.selectedObject;
                        AlertDialog.Builder builder4 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                        builder4.setDimEnabled(false);
                        builder4.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda55
                            @Override // android.content.DialogInterface.OnDismissListener
                            public final void onDismiss(DialogInterface dialogInterface) {
                                ChatActivity.this.lambda$processSelectedOption$234(dialogInterface);
                            }
                        });
                        if (messageObject8.isQuiz()) {
                            builder4.setTitle(LocaleController.getString("StopQuizAlertTitle", R.string.StopQuizAlertTitle));
                            builder4.setMessage(LocaleController.getString("StopQuizAlertText", R.string.StopQuizAlertText));
                        } else {
                            builder4.setTitle(LocaleController.getString("StopPollAlertTitle", R.string.StopPollAlertTitle));
                            builder4.setMessage(LocaleController.getString("StopPollAlertText", R.string.StopPollAlertText));
                        }
                        builder4.setPositiveButton(LocaleController.getString("Stop", R.string.Stop), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda38
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i11) {
                                ChatActivity.this.lambda$processSelectedOption$240(messageObject8, dialogInterface, i11);
                            }
                        });
                        builder4.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder4.create());
                        z = true;
                        break;
                    case 27:
                        MessageObject.GroupedMessages groupedMessages5 = this.selectedObjectGroup;
                        MessageObject findPrimaryMessageObject = groupedMessages5 != null ? groupedMessages5.findPrimaryMessageObject() : this.selectedObject;
                        if (findPrimaryMessageObject != null) {
                            openDiscussionMessageChat(this.currentChat.id, null, findPrimaryMessageObject.getId(), 0L, -1, 0, null);
                            break;
                        }
                        break;
                    case 28:
                        presentFragment(new MessageStatisticActivity(this.selectedObject));
                        break;
                    default:
                        switch (i) {
                            case 103:
                                showDialog(new PremiumFeatureBottomSheet(this, 2, true));
                                break;
                            case 104:
                                TLRPC$Peer tLRPC$Peer = this.selectedObject.messageOwner.from_id;
                                long j = tLRPC$Peer.user_id;
                                if (j == 0) {
                                    j = tLRPC$Peer.channel_id;
                                    if (j == 0) {
                                        j = tLRPC$Peer.chat_id;
                                    }
                                }
                                openUserProfile(j);
                                break;
                        }
                }
            } else if (!checkSlowMode(this.chatActivityEnterView.getSendButton())) {
                if (getMediaController().isPlayingMessage(this.selectedObject)) {
                    getMediaController().cleanupPlayer(true, true);
                }
                final TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages = new TLRPC$TL_messages_sendScheduledMessages();
                tLRPC$TL_messages_sendScheduledMessages.peer = getMessagesController().getInputPeer(this.dialog_id);
                if (this.selectedObjectGroup != null) {
                    for (int i11 = 0; i11 < this.selectedObjectGroup.messages.size(); i11++) {
                        tLRPC$TL_messages_sendScheduledMessages.id.add(Integer.valueOf(this.selectedObjectGroup.messages.get(i11).getId()));
                    }
                } else {
                    tLRPC$TL_messages_sendScheduledMessages.id.add(Integer.valueOf(this.selectedObject.getId()));
                }
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_sendScheduledMessages, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda263
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$processSelectedOption$243(tLRPC$TL_messages_sendScheduledMessages, tLObject, tLRPC$TL_error);
                    }
                });
            }
            final MessageObject messageObject9 = this.selectedObject;
            final MessageObject.GroupedMessages groupedMessages6 = this.selectedObjectGroup;
            AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, messageObject9.messageOwner.date, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda273
                @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                public final void didSelectDate(boolean z5, int i12) {
                    ChatActivity.this.lambda$processSelectedOption$244(groupedMessages6, messageObject9, z5, i12);
                }
            }, null, this.themeDelegate).setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda53
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.lambda$processSelectedOption$245(dialogInterface);
                }
            }).setDimBehind(false);
            z = true;
        }
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.selectedObjectToEditCaption = null;
        closeMenu(!z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$217(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$218(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$219() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$220(boolean z, int i) {
        if (getParentActivity() == null || this.fragmentView == null || i <= 0) {
            return;
        }
        BulletinFactory.of(this).createDownloadBulletin(z ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, i, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$221(boolean z, boolean z2, boolean z3, Uri uri) {
        BulletinFactory.FileType fileType;
        if (getParentActivity() == null) {
            return;
        }
        if (z) {
            fileType = BulletinFactory.FileType.PHOTO_TO_DOWNLOADS;
        } else if (z2) {
            fileType = BulletinFactory.FileType.VIDEO_TO_DOWNLOADS;
        } else if (z3) {
            fileType = BulletinFactory.FileType.GIF_TO_DOWNLOADS;
        } else {
            fileType = BulletinFactory.FileType.UNKNOWN;
        }
        BulletinFactory.of(this).createDownloadBulletin(fileType, this.themeDelegate).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$222(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$223(boolean[] zArr, View view) {
        zArr[1] = !zArr[1];
        ((CheckBoxCell) view).setChecked(zArr[1], true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$224(boolean[] zArr, View view) {
        zArr[0] = !zArr[0];
        ((CheckBoxCell) view).setChecked(zArr[0], true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$226(int i, boolean[] zArr, DialogInterface dialogInterface, int i2) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, i, false, !zArr[1], zArr[0]);
        Bulletin createPinMessageBulletin = BulletinFactory.createPinMessageBulletin(this, this.themeDelegate);
        createPinMessageBulletin.show();
        final Bulletin.Layout layout = createPinMessageBulletin.getLayout();
        layout.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                layout.performHapticFeedback(3, 2);
            }
        }, 550L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$228(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda211
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$227(tLObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$227(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$TL_exportedMessageLink tLRPC$TL_exportedMessageLink = (TLRPC$TL_exportedMessageLink) tLObject;
            try {
                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", tLRPC$TL_exportedMessageLink.link));
                if (BulletinFactory.canShowBulletin(this)) {
                    BulletinFactory.of(this).createCopyLinkBulletin(!isThreadChat() && tLRPC$TL_exportedMessageLink.link.contains("/c/"), this.themeDelegate).show();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$229() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$230() {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$231(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$233(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda23
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$232(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$232(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$234(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$240(MessageObject messageObject, DialogInterface dialogInterface, int i) {
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = new TLRPC$TL_messages_editMessage();
        TLRPC$TL_inputMediaPoll tLRPC$TL_inputMediaPoll = new TLRPC$TL_inputMediaPoll();
        TLRPC$TL_poll tLRPC$TL_poll = new TLRPC$TL_poll();
        tLRPC$TL_inputMediaPoll.poll = tLRPC$TL_poll;
        TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
        tLRPC$TL_poll.id = tLRPC$Poll.id;
        tLRPC$TL_poll.question = tLRPC$Poll.question;
        tLRPC$TL_poll.answers = tLRPC$Poll.answers;
        tLRPC$TL_poll.closed = true;
        tLRPC$TL_messages_editMessage.media = tLRPC$TL_inputMediaPoll;
        tLRPC$TL_messages_editMessage.peer = getMessagesController().getInputPeer(this.dialog_id);
        tLRPC$TL_messages_editMessage.id = messageObject.getId();
        tLRPC$TL_messages_editMessage.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_editMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda267
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$processSelectedOption$237(alertDialogArr, tLRPC$TL_messages_editMessage, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda229
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processSelectedOption$239(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$237(final AlertDialog[] alertDialogArr, final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda237
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$processSelectedOption$235(alertDialogArr);
            }
        });
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda219
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$236(tLRPC$TL_error, tLRPC$TL_messages_editMessage);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$processSelectedOption$235(AlertDialog[] alertDialogArr) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$236(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, this, tLRPC$TL_messages_editMessage, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$239(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda21
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$processSelectedOption$238(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$238(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$243(final TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda221
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$241(tLRPC$TL_messages_sendScheduledMessages);
                }
            });
        } else if (tLRPC$TL_error.text != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda217
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processSelectedOption$242(tLRPC$TL_error);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$241(TLRPC$TL_messages_sendScheduledMessages tLRPC$TL_messages_sendScheduledMessages) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, tLRPC$TL_messages_sendScheduledMessages.id, Long.valueOf(-this.dialog_id), Boolean.TRUE, Long.valueOf(this.dialog_id));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$242(TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error.text.startsWith("SLOWMODE_WAIT_")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError));
        } else if (tLRPC$TL_error.text.equals("CHAT_SEND_MEDIA_FORBIDDEN")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
        } else {
            AlertsCreator.showSimpleToast(this, tLRPC$TL_error.text);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$244(MessageObject.GroupedMessages groupedMessages, MessageObject messageObject, boolean z, int i) {
        if (groupedMessages != null && !groupedMessages.messages.isEmpty()) {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(groupedMessages.messages.get(0), null, false, this, null, i);
        } else {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(messageObject, null, false, this, null, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processSelectedOption$245(DialogInterface dialogInterface) {
        dimBehindView(false);
    }

    @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
    public boolean didSelectDialogs(DialogsActivity dialogsActivity, ArrayList<MessagesStorage.TopicKey> arrayList, CharSequence charSequence, boolean z, TopicsFragment topicsFragment) {
        if (this.forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            return false;
        }
        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
        MessageObject messageObject = this.forwardingMessage;
        if (messageObject != null) {
            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
            if (groupedMessages != null) {
                arrayList2.addAll(groupedMessages.messages);
            } else {
                arrayList2.add(messageObject);
            }
        } else {
            for (int i = 1; i >= 0; i--) {
                ArrayList arrayList3 = new ArrayList();
                for (int i2 = 0; i2 < this.selectedMessagesIds[i].size(); i2++) {
                    arrayList3.add(Integer.valueOf(this.selectedMessagesIds[i].keyAt(i2)));
                }
                Collections.sort(arrayList3);
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    MessageObject messageObject2 = this.selectedMessagesIds[i].get(((Integer) arrayList3.get(i3)).intValue());
                    if (messageObject2 != null) {
                        arrayList2.add(messageObject2);
                    }
                }
            }
        }
        for (int i4 = 0; i4 < arrayList.size(); i4++) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-arrayList.get(i4).dialogId));
            if (chat != null) {
                for (int i5 = 0; i5 < arrayList2.size(); i5++) {
                    int canSendMessageToChat = SendMessagesHelper.canSendMessageToChat(chat, arrayList2.get(i5));
                    if (canSendMessageToChat != 0) {
                        AlertsCreator.showSendMediaAlert(canSendMessageToChat, dialogsActivity, null);
                        return false;
                    }
                }
                continue;
            }
        }
        if (this.forwardingMessage != null) {
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        } else {
            for (int i6 = 1; i6 >= 0; i6--) {
                this.selectedMessagesCanCopyIds[i6].clear();
                this.selectedMessagesCanStarIds[i6].clear();
                this.selectedMessagesIds[i6].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
        }
        if (arrayList.size() > 1 || arrayList.get(0).dialogId == getUserConfig().getClientUserId() || charSequence != null) {
            this.forwardingMessages = null;
            hideFieldPanel(false);
            for (int i7 = 0; i7 < arrayList.size(); i7++) {
                long j = arrayList.get(i7).dialogId;
                if (charSequence != null) {
                    getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(charSequence.toString(), j, null, null, null, true, null, null, null, true, 0, null, false));
                }
                getSendMessagesHelper().sendMessage(arrayList2, j, false, false, true, 0);
            }
            dialogsActivity.finishFragment();
            createUndoView();
            if (this.undoView != null) {
                if (arrayList.size() == 1) {
                    this.undoView.showWithAction(arrayList.get(0).dialogId, 53, Integer.valueOf(arrayList2.size()));
                } else {
                    this.undoView.showWithAction(0L, 53, Integer.valueOf(arrayList2.size()), Integer.valueOf(arrayList.size()), (Runnable) null, (Runnable) null);
                }
            }
        } else {
            MessagesStorage.TopicKey topicKey = arrayList.get(0);
            long j2 = topicKey.dialogId;
            if (j2 != this.dialog_id || getTopicId() != topicKey.topicId || this.chatMode == 2) {
                Bundle bundle = new Bundle();
                bundle.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
                if (DialogObject.isEncryptedDialog(j2)) {
                    bundle.putInt("enc_id", DialogObject.getEncryptedChatId(j2));
                } else {
                    if (DialogObject.isUserDialog(j2)) {
                        bundle.putLong("user_id", j2);
                    } else {
                        bundle.putLong("chat_id", -j2);
                    }
                    if (!getMessagesController().checkCanOpenChat(bundle, dialogsActivity)) {
                        return true;
                    }
                }
                bundle.putBoolean("historyPreloaded", false);
                addToPulledDialogsMyself();
                ChatActivity chatActivity = new ChatActivity(bundle);
                if (topicKey.topicId != 0) {
                    ForumUtilities.applyTopic(chatActivity, topicKey);
                    if (dialogsActivity != null) {
                        dialogsActivity.removeSelfFromStack();
                    }
                }
                if (presentFragment(chatActivity, true)) {
                    chatActivity.showFieldPanelForForward(true, arrayList2);
                    if (!AndroidUtilities.isTablet()) {
                        removeSelfFromStack();
                    }
                } else {
                    dialogsActivity.finishFragment();
                }
            } else {
                ArrayList arrayList4 = new ArrayList(getParentLayout().getFragmentStack());
                if (!arrayList4.isEmpty() && arrayList4.get(arrayList4.size() - 1) == dialogsActivity) {
                    dialogsActivity.finishFragment();
                } else {
                    int indexOf = arrayList4.indexOf(dialogsActivity);
                    if (indexOf > 0) {
                        while (indexOf < arrayList4.size()) {
                            if (indexOf == arrayList4.size() - 1) {
                                ((BaseFragment) arrayList4.get(indexOf)).finishFragment();
                            } else {
                                dialogsActivity.removeSelfFromStack();
                            }
                            indexOf++;
                        }
                    }
                }
                moveScrollToLastMessage(false);
                showFieldPanelForForward(true, arrayList2);
                if (AndroidUtilities.isTablet()) {
                    hideActionMode();
                    updatePinnedMessageView(true);
                }
                updateVisibleRows();
            }
        }
        return true;
    }

    public boolean checkRecordLocked(final boolean z) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", R.string.DiscardVideoMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", R.string.DiscardVideoMessageDescription));
        } else {
            builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", R.string.DiscardVoiceMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", R.string.DiscardVoiceMessageDescription));
        }
        builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", R.string.DiscardVoiceMessageAction), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda44
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.lambda$checkRecordLocked$246(z, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Continue", R.string.Continue), null);
        showDialog(builder.create());
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkRecordLocked$246(boolean z, DialogInterface dialogInterface, int i) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            if (z) {
                finishFragment();
            } else {
                chatActivityEnterView.cancelRecordingAudioVideo();
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean onBackPressed() {
        if (closeStoryViewer()) {
            return false;
        }
        ChatSelectionReactionMenuOverlay chatSelectionReactionMenuOverlay = this.selectionReactionsOverlay;
        if (chatSelectionReactionMenuOverlay == null || chatSelectionReactionMenuOverlay.onBackPressed()) {
            if (ContentPreviewViewer.getInstance().isVisible()) {
                ContentPreviewViewer.getInstance().closeWithMenu();
                return false;
            }
            ForwardingPreviewView forwardingPreviewView = this.forwardingPreviewView;
            if (forwardingPreviewView != null && forwardingPreviewView.isShowing()) {
                this.forwardingPreviewView.dismiss(true);
                return false;
            } else if (this.messagesSearchListView.getTag() != null) {
                showMessagesSearchListView(false);
                return false;
            } else if (this.scrimPopupWindow != null) {
                closeMenu();
                return false;
            } else if (checkRecordLocked(false)) {
                return false;
            } else {
                if (this.textSelectionHelper.isSelectionMode()) {
                    this.textSelectionHelper.clear();
                    return false;
                }
                ActionBar actionBar = this.actionBar;
                if (actionBar != null && actionBar.isActionModeShowed()) {
                    clearSelectionMode();
                    return false;
                }
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
                    return !this.chatActivityEnterView.hidePopup(true);
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && chatActivityEnterView2.hasBotWebView() && this.chatActivityEnterView.botCommandsMenuIsShowing() && this.chatActivityEnterView.onBotWebViewBackPressed()) {
                    return false;
                }
                ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                if (chatActivityEnterView3 != null && chatActivityEnterView3.botCommandsMenuIsShowing()) {
                    this.chatActivityEnterView.hideBotCommands();
                    return false;
                }
                ChatActivity chatActivity = this.backToPreviousFragment;
                if (chatActivity != null) {
                    INavigationLayout iNavigationLayout = this.parentLayout;
                    iNavigationLayout.addFragmentToStack(chatActivity, iNavigationLayout.getFragmentStack().size() - 1);
                    this.backToPreviousFragment = null;
                }
                return true;
            }
        }
        return false;
    }

    public void clearSelectionMode() {
        clearSelectionMode(false);
    }

    public void clearSelectionMode(boolean z) {
        for (int i = 1; i >= 0; i--) {
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows(z);
        updateSelectedMessageReactions();
    }

    public void onListItemAnimatorTick() {
        invalidateMessagesVisiblePart();
        if (this.scrimView != null) {
            this.fragmentView.invalidate();
        }
    }

    public void setThreadMessages(ArrayList<MessageObject> arrayList, TLRPC$Chat tLRPC$Chat, int i, int i2, int i3, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        this.forumTopic = tLRPC$TL_forumTopic;
        this.threadMessageObjects = arrayList;
        MessageObject messageObject = arrayList.get(arrayList.size() - 1);
        this.threadMessageObject = messageObject;
        this.replyingMessageObject = messageObject;
        this.threadMaxInboxReadId = i2;
        this.threadMaxOutboxReadId = i3;
        this.replyMaxReadId = Math.max(1, i2);
        this.threadMessageId = this.threadMessageObject.getId();
        this.replyOriginalMessageId = i;
        this.replyOriginalChat = tLRPC$Chat;
        boolean z = tLRPC$TL_forumTopic != null;
        this.isTopic = z;
        MessageObject messageObject2 = this.replyingMessageObject;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject2.messageOwner.fwd_from;
        this.isComments = (tLRPC$MessageFwdHeader == null || tLRPC$MessageFwdHeader.channel_post == 0 || z) ? false : true;
        if (z) {
            messageObject2.isTopicMainMessage = true;
        }
        updatePinnedTopicStarterMessage();
        updateTopPanel(false);
        updateBottomOverlay();
    }

    private void updatePinnedTopicStarterMessage() {
        TLRPC$Message tLRPC$Message;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic;
        MessageObject messageObject = (this.isTopic && !this.pinnedMessageObjects.isEmpty() && this.pinnedMessageIds.size() == 1) ? this.pinnedMessageObjects.get(this.pinnedMessageIds.get(0)) : null;
        this.topicStarterMessageObject = messageObject;
        if (!this.isTopic || messageObject == null || (tLRPC$Message = messageObject.messageOwner) == null || (tLRPC$TL_forumTopic = this.forumTopic) == null || MessageObject.peersEqual(tLRPC$TL_forumTopic.from_id, tLRPC$Message.from_id) || MessageObject.peersEqual(this.currentChat, this.topicStarterMessageObject.messageOwner.from_id)) {
            return;
        }
        this.topicStarterMessageObject = null;
    }

    public void setHighlightMessageId(int i) {
        this.highlightMessageId = i;
    }

    public boolean isThreadChat() {
        return this.threadMessageObject != null;
    }

    public boolean isReplyChatComment() {
        return this.threadMessageObject != null && this.isComments;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateVisibleRows() {
        updateVisibleRows(false);
    }

    /* JADX WARN: Removed duplicated region for block: B:97:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0172  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateVisibleRows(boolean z) {
        int i;
        int i2;
        boolean z2;
        boolean z3;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        if (!this.wasManualScroll && this.unreadMessageObject != null) {
            int childCount = recyclerListView.getChildCount();
            int i3 = 0;
            while (true) {
                if (i3 >= childCount) {
                    break;
                }
                View childAt = this.chatListView.getChildAt(i3);
                if (childAt instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) childAt).getMessageObject();
                    MessageObject messageObject2 = this.unreadMessageObject;
                    if (messageObject == messageObject2) {
                        if (this.messages.indexOf(messageObject2) >= 0) {
                            i = this.chatAdapter.messagesStartRow + this.messages.indexOf(this.unreadMessageObject);
                            i2 = getScrollingOffsetForView(childAt);
                        }
                    }
                }
                i3++;
            }
        }
        i = -1;
        i2 = 0;
        int childCount2 = this.chatListView.getChildCount();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditingMessageObject();
        }
        TLRPC$ChatFull tLRPC$ChatFull = this.chatInfo;
        long j = tLRPC$ChatFull != null ? tLRPC$ChatFull.linked_chat_id : 0L;
        for (int i4 = 0; i4 < childCount2; i4++) {
            View childAt2 = this.chatListView.getChildAt(i4);
            if (childAt2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) childAt2;
                MessageObject messageObject3 = chatMessageCell.getMessageObject();
                if (this.actionBar.isActionModeShowed() || this.reportType >= 0) {
                    ArrayList<MessageObject> arrayList = this.threadMessageObjects;
                    chatMessageCell.setCheckBoxVisible(arrayList == null || !arrayList.contains(messageObject3), true);
                    int i5 = messageObject3.getDialogId() == this.dialog_id ? 0 : 1;
                    if (this.selectedMessagesIds[i5].indexOfKey(messageObject3.getId()) >= 0) {
                        setCellSelectionBackground(messageObject3, chatMessageCell, i5, true);
                        z2 = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, true);
                        z2 = false;
                    }
                    z3 = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setCheckBoxVisible(false, true);
                    chatMessageCell.setChecked(false, false, true);
                    z2 = false;
                    z3 = false;
                }
                if ((!chatMessageCell.getMessageObject().deleted || chatMessageCell.linkedChatId != j) && !z) {
                    chatMessageCell.setIsUpdating(true);
                    TLRPC$ChatFull tLRPC$ChatFull2 = this.chatInfo;
                    chatMessageCell.linkedChatId = tLRPC$ChatFull2 != null ? tLRPC$ChatFull2.linked_chat_id : 0L;
                    chatMessageCell.setMessageObject(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                    chatMessageCell.setIsUpdating(false);
                }
                if (chatMessageCell != this.scrimView) {
                    chatMessageCell.setCheckPressed(!z3, z3 && z2);
                }
                chatMessageCell.setHighlighted((this.highlightMessageId == Integer.MAX_VALUE || messageObject3 == null || messageObject3.getId() != this.highlightMessageId) ? false : true);
                if (this.highlightMessageId != Integer.MAX_VALUE) {
                    startMessageUnselect();
                }
                BlurredFrameLayout blurredFrameLayout = this.searchContainer;
                if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() == 0) {
                    if (getMediaDataController().isMessageFound(messageObject3.getId(), messageObject3.getDialogId() == this.mergeDialogId) && getMediaDataController().getLastSearchQuery() != null) {
                        chatMessageCell.setHighlightedText(getMediaDataController().getLastSearchQuery());
                        chatMessageCell.setSpoilersSuppressed(this.chatListView.getScrollState() == 0);
                    }
                }
                chatMessageCell.setHighlightedText(null);
                chatMessageCell.setSpoilersSuppressed(this.chatListView.getScrollState() == 0);
            } else if (childAt2 instanceof ChatActionCell) {
                ChatActionCell chatActionCell = (ChatActionCell) childAt2;
                if (!z) {
                    chatActionCell.setMessageObject(chatActionCell.getMessageObject());
                }
                chatActionCell.setSpoilersSuppressed(this.chatListView.getScrollState() != 0);
            }
        }
        if (i != -1) {
            this.chatLayoutManager.scrollToPositionWithOffset(i, i2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkEditTimer() {
        MessageObject editingMessageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || (editingMessageObject = chatActivityEnterView.getEditingMessageObject()) == null || editingMessageObject.scheduled) {
            return;
        }
        TLRPC$User tLRPC$User = this.currentUser;
        if (tLRPC$User == null || !tLRPC$User.self) {
            int abs = editingMessageObject.canEditMessageAnytime(this.currentChat) ? 360 : (getMessagesController().maxEditTime + 300) - Math.abs(getConnectionsManager().getCurrentTime() - editingMessageObject.messageOwner.date);
            if (abs > 0) {
                if (abs <= 300) {
                    this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, AndroidUtilities.formatShortDuration(abs)));
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda159
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.checkEditTimer();
                    }
                }, 1000L);
                return;
            }
            this.chatActivityEnterView.onEditTimeExpired();
            this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired, new Object[0]));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject messageObject, boolean z) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(messageObject);
        int id = messageObject.getId();
        messageObject.getDialogId();
        if (id != 0) {
            for (int size = this.messages.size() - 1; size >= 0; size--) {
                MessageObject messageObject2 = this.messages.get(size);
                if ((messageObject2.getDialogId() != this.mergeDialogId || messageObject.getDialogId() == this.mergeDialogId) && (((this.currentEncryptedChat == null && messageObject2.getId() > id) || (this.currentEncryptedChat != null && messageObject2.getId() < id)) && ((messageObject2.isVoice() || messageObject2.isRoundVideo()) && (!z || (messageObject2.isContentUnread() && !messageObject2.isOut()))))) {
                    arrayList.add(messageObject2);
                }
            }
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void alertUserOpenError(MessageObject messageObject) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        if (messageObject.type == 3) {
            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
        } else {
            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, messageObject.getDocument().mime_type));
        }
        showDialog(builder.create());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openSearchWithText(String str) {
        ActionBarMenuItem actionBarMenuItem;
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem = this.attachItem;
            if (lazyItem != null) {
                lazyItem.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem2 = this.editTextItem;
            if (lazyItem2 != null) {
                lazyItem2.setVisibility(8);
            }
            if (this.threadMessageId == 0 && (actionBarMenuItem = this.searchItem) != null) {
                actionBarMenuItem.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.searchIconItem;
            if (actionBarMenuItem3 != null && this.showSearchAsIcon) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenu.LazyItem lazyItem3 = this.audioCallIconItem;
            if (lazyItem3 != null && this.showAudioCallAsIcon) {
                lazyItem3.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if ((this.threadMessageId == 0 || this.isTopic) && !UserObject.isReplyUser(this.currentUser)) {
            boolean z = str == null;
            this.openSearchKeyboard = z;
            ActionBarMenuItem actionBarMenuItem4 = this.searchItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.openSearch(z);
            }
        }
        if (str != null) {
            ActionBarMenuItem actionBarMenuItem5 = this.searchItem;
            if (actionBarMenuItem5 != null) {
                actionBarMenuItem5.setSearchFieldText(str, false);
            }
            getMediaDataController().searchMessagesInChat(str, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        }
        updatePinnedMessageView(true);
    }

    @Override // org.telegram.ui.LocationActivity.LocationActivityDelegate
    public void didSelectLocation(TLRPC$MessageMedia tLRPC$MessageMedia, int i, boolean z, int i2) {
        getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(tLRPC$MessageMedia, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i2));
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        if (i == 0 || i == 1) {
            afterMessageSend();
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isEditingMessageMedia() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return (chatAttachAlert == null || chatAttachAlert.getEditingMessageObject() == null) ? false : true;
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public boolean canScheduleMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && !isThreadChat();
    }

    public boolean canSendMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0);
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public boolean isInScheduleMode() {
        return this.chatMode == 1;
    }

    public int getChatMode() {
        return this.chatMode;
    }

    public MessageObject getThreadMessage() {
        return this.threadMessageObject;
    }

    public MessageObject getReplyMessage() {
        return this.replyingMessageObject;
    }

    public int getThreadId() {
        return this.threadMessageId;
    }

    public long getInlineReturn() {
        return this.inlineReturn;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public TLRPC$User getCurrentUser() {
        return this.currentUser;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public TLRPC$Chat getCurrentChat() {
        return this.currentChat;
    }

    public TLRPC$EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public TLRPC$ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public ChatObject.Call getGroupCall() {
        ChatObject.Call call;
        if (this.chatMode == 0 && (call = this.groupCall) != null && (call.call instanceof TLRPC$TL_groupCall)) {
            return call;
        }
        return null;
    }

    public TLRPC$UserFull getCurrentUserInfo() {
        return this.userInfo;
    }

    public void sendAudio(ArrayList<MessageObject> arrayList, CharSequence charSequence, boolean z, int i) {
        if (checkSlowModeAlert()) {
            fillEditingMediaWithCaption(charSequence, null);
            SendMessagesHelper.prepareSendingAudioDocuments(getAccountInstance(), arrayList, charSequence != null ? charSequence : null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, z, i, this.editingMessageObject);
            afterMessageSend();
        }
    }

    public void sendContact(TLRPC$User tLRPC$User, boolean z, int i) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(tLRPC$User, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, z, i));
            afterMessageSend();
        }
    }

    public void sendPoll(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, HashMap<String, String> hashMap, boolean z, int i) {
        if (checkSlowModeAlert()) {
            getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(tLRPC$TL_messageMediaPoll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC$ReplyMarkup) null, hashMap, z, i));
            afterMessageSend();
        }
    }

    @Override // org.telegram.ui.Components.InstantCameraView.Delegate
    public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean z, int i, boolean z2) {
        if (photoEntry == null) {
            return;
        }
        fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
        if (photoEntry.isVideo) {
            if (videoEditedInfo != null) {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2, photoEntry.hasSpoiler, photoEntry.caption);
            } else {
                SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, z, i, z2, photoEntry.hasSpoiler, photoEntry.caption);
            }
        } else if (photoEntry.imagePath != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.imagePath, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2, photoEntry.caption);
        } else if (photoEntry.path != null) {
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.path, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, z, i, z2, photoEntry.caption);
        }
        afterMessageSend();
    }

    public void sendAnimatedEmoji(TLRPC$Document tLRPC$Document, boolean z, int i) {
        String findAnimatedEmojiEmoticon;
        if (tLRPC$Document == null || (findAnimatedEmojiEmoticon = MessageObject.findAnimatedEmojiEmoticon(tLRPC$Document, null)) == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC$TL_messageEntityCustomEmoji tLRPC$TL_messageEntityCustomEmoji = new TLRPC$TL_messageEntityCustomEmoji();
        tLRPC$TL_messageEntityCustomEmoji.document = tLRPC$Document;
        tLRPC$TL_messageEntityCustomEmoji.document_id = tLRPC$Document.id;
        tLRPC$TL_messageEntityCustomEmoji.offset = 0;
        tLRPC$TL_messageEntityCustomEmoji.length = findAnimatedEmojiEmoticon.length();
        arrayList.add(tLRPC$TL_messageEntityCustomEmoji);
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(SendMessagesHelper.SendMessageParams.of(findAnimatedEmojiEmoticon, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, arrayList, null, null, z, i, null, false));
        afterMessageSend();
    }

    public void showOpenGameAlert(final TLRPC$TL_game tLRPC$TL_game, final MessageObject messageObject, final String str, boolean z, final long j) {
        String str2;
        TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
        str2 = "";
        if (z) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, user != null ? ContactsController.formatName(user.first_name, user.last_name) : ""));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda41
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$showOpenGameAlert$247(tLRPC$TL_game, messageObject, str, j, dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
            return;
        }
        String publicUsername = UserObject.getPublicUsername(user);
        if (Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            if (this.parentLayout.getFragmentStack().get(this.parentLayout.getFragmentStack().size() - 1) == this) {
                presentFragment(new WebviewActivity(str, (user == null || TextUtils.isEmpty(publicUsername)) ? "" : publicUsername, tLRPC$TL_game.title, tLRPC$TL_game.short_name, messageObject));
                return;
            }
            return;
        }
        Activity parentActivity = getParentActivity();
        String str3 = tLRPC$TL_game.short_name;
        if (user != null && publicUsername != null) {
            str2 = publicUsername;
        }
        WebviewActivity.openGameInBrowser(str, messageObject, parentActivity, str3, str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showOpenGameAlert$247(TLRPC$TL_game tLRPC$TL_game, MessageObject messageObject, String str, long j, DialogInterface dialogInterface, int i) {
        showOpenGameAlert(tLRPC$TL_game, messageObject, str, false, j);
        SharedPreferences.Editor edit = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit.putBoolean("askgame_" + j, false).commit();
    }

    /* JADX WARN: Code restructure failed: missing block: B:27:0x005a, code lost:
        if (r12 != r11.get(r11.size() - 1).id) goto L10;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void processLoadedDiscussionMessage(boolean z, TLRPC$TL_messages_discussionMessage tLRPC$TL_messages_discussionMessage, boolean z2, TLRPC$messages_Messages tLRPC$messages_Messages, final int i, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, final int i2, MessageObject messageObject2) {
        TLRPC$messages_Messages tLRPC$messages_Messages2;
        final int i3;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        TLRPC$MessageReplies tLRPC$MessageReplies2;
        ArrayList<TLRPC$Message> arrayList;
        int i4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        final int i5 = this.commentLoadingMessageId;
        if (tLRPC$messages_Messages != null) {
            tLRPC$messages_Messages2 = null;
            if (i == 1 || i == 0 || tLRPC$TL_messages_discussionMessage == null || i == tLRPC$TL_messages_discussionMessage.read_inbox_max_id || i2 > 0) {
                if (!tLRPC$messages_Messages.messages.isEmpty() && tLRPC$TL_messages_discussionMessage != null && !tLRPC$TL_messages_discussionMessage.messages.isEmpty()) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                    if (tLRPC$Message == null || (tLRPC$MessageReplyHeader = tLRPC$Message.reply_to) == null) {
                        i4 = 0;
                    } else {
                        i4 = tLRPC$MessageReplyHeader.reply_to_top_id;
                        if (i4 == 0) {
                            i4 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                        }
                    }
                    ArrayList<TLRPC$Message> arrayList2 = tLRPC$TL_messages_discussionMessage.messages;
                }
                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processLoadedDiscussionMessage reset history");
            }
        } else {
            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        }
        final ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        if (tLRPC$TL_messages_discussionMessage != null && (arrayList = tLRPC$TL_messages_discussionMessage.messages) != null) {
            int size = arrayList.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC$Message tLRPC$Message2 = tLRPC$TL_messages_discussionMessage.messages.get(i6);
                if (!(tLRPC$Message2 instanceof TLRPC$TL_messageEmpty)) {
                    tLRPC$Message2.isThreadMessage = true;
                    arrayList3.add(new MessageObject(UserConfig.selectedAccount, tLRPC$Message2, true, true));
                }
            }
        }
        if (!arrayList3.isEmpty() && tLRPC$TL_messages_discussionMessage != null) {
            Bundle bundle = new Bundle();
            final long dialogId = arrayList3.get(0).getDialogId();
            bundle.putLong("chat_id", -dialogId);
            bundle.putInt("message_id", Math.max(1, tLRPC$TL_messages_discussionMessage.read_inbox_max_id));
            bundle.putInt("unread_count", tLRPC$TL_messages_discussionMessage.unread_count);
            bundle.putBoolean("historyPreloaded", tLRPC$messages_Messages2 != null);
            final ChatActivity chatActivity = new ChatActivity(bundle);
            chatActivity.setThreadMessages(arrayList3, tLRPC$Chat, tLRPC$TL_messages_getDiscussionMessage.msg_id, tLRPC$TL_messages_discussionMessage.read_inbox_max_id, tLRPC$TL_messages_discussionMessage.read_outbox_max_id, null);
            if (i2 != 0) {
                chatActivity.highlightMessageId = i2;
            }
            if (messageObject2 != null && (tLRPC$MessageReplies = messageObject2.messageOwner.replies) != null && (tLRPC$MessageReplies2 = chatActivity.threadMessageObject.messageOwner.replies) != null) {
                tLRPC$MessageReplies.replies = tLRPC$MessageReplies2.replies;
            }
            if (messageObject2 != null && (tLRPC$TL_messageReactions = messageObject2.messageOwner.reactions) != null) {
                chatActivity.threadMessageObject.messageOwner.reactions = tLRPC$TL_messageReactions;
            }
            final boolean[] zArr = {false};
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda234
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$processLoadedDiscussionMessage$249(zArr, i5, chatActivity);
                }
            };
            if (tLRPC$messages_Messages2 != null) {
                if (!tLRPC$messages_Messages2.messages.isEmpty()) {
                    for (int size2 = tLRPC$messages_Messages2.messages.size() - 1; size2 >= 0; size2--) {
                        TLRPC$Message tLRPC$Message3 = tLRPC$messages_Messages2.messages.get(size2);
                        int i7 = tLRPC$Message3.id;
                        if (i7 > i && !tLRPC$Message3.out) {
                            i3 = i7;
                            break;
                        }
                    }
                }
                i3 = 0;
                final int classGuid = chatActivity.getClassGuid();
                NotificationCenter.getInstance(this.currentAccount).addObserver(new 124(classGuid, runnable, chatActivity), NotificationCenter.messagesDidLoad);
                final TLRPC$messages_Messages tLRPC$messages_Messages3 = tLRPC$messages_Messages2;
                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda222
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$processLoadedDiscussionMessage$250(tLRPC$messages_Messages3, dialogId, i2, i, classGuid, i3, arrayList3);
                    }
                });
                return;
            }
            runnable.run();
            return;
        }
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
        if (messageObject != null) {
            openOriginalReplyChat(messageObject);
        } else if (getParentActivity() != null) {
            BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("ChannelPostDeleted", R.string.ChannelPostDeleted), this.themeDelegate).show();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$249(boolean[] zArr, int i, ChatActivity chatActivity) {
        ChatActivityEnterView chatActivityEnterView;
        if (zArr[0] || i != this.commentLoadingMessageId || !this.isFullyVisible || isFinishing()) {
            return;
        }
        zArr[0] = true;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda163
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$processLoadedDiscussionMessage$248();
            }
        }, 200L);
        presentFragment(chatActivity);
        if (!isKeyboardVisible() || chatActivity.hideKeyboardOnShow() || (chatActivityEnterView = chatActivity.chatActivityEnterView) == null || chatActivityEnterView.getEditField() == null) {
            return;
        }
        chatActivity.chatActivityEnterView.getEditField().requestFocus();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$248() {
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 124 implements NotificationCenter.NotificationCenterDelegate {
        final /* synthetic */ ChatActivity val$chatActivity;
        final /* synthetic */ int val$commentsClassGuid;
        final /* synthetic */ Runnable val$openCommentsChat;

        124(int i, Runnable runnable, ChatActivity chatActivity) {
            this.val$commentsClassGuid = i;
            this.val$openCommentsChat = runnable;
            this.val$chatActivity = chatActivity;
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(final int i, final int i2, final Object... objArr) {
            int i3 = NotificationCenter.messagesDidLoad;
            if (i == i3 && ((Integer) objArr[10]).intValue() == this.val$commentsClassGuid) {
                this.val$openCommentsChat.run();
                final ChatActivity chatActivity = this.val$chatActivity;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$124$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.didReceivedNotification(i, i2, objArr);
                    }
                }, 50L);
                NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).removeObserver(this, i3);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDiscussionMessage$250(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, int i3, int i4, ArrayList arrayList) {
        getMessagesController().processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, 0L, 30, i > 0 ? i : i2, 0, false, i3, i4, 0, 0, 0, i > 0 ? 3 : 2, true, 0, ((MessageObject) arrayList.get(arrayList.size() - 1)).getId(), 1, false, 0, true, this.isTopic);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openDiscussionMessageChat(long j, final MessageObject messageObject, int i, final long j2, final int i2, final int i3, final MessageObject messageObject2) {
        int i4 = i;
        final TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(j));
        final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage = new TLRPC$TL_messages_getDiscussionMessage();
        tLRPC$TL_messages_getDiscussionMessage.peer = MessagesController.getInputPeer(chat);
        tLRPC$TL_messages_getDiscussionMessage.msg_id = i4;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("getDiscussionMessage chat = " + chat.id + " msg_id = " + i4);
        }
        this.commentLoadingMessageId = 0;
        this.savedDiscussionMessage = null;
        this.savedNoDiscussion = false;
        this.savedNoHistory = false;
        this.savedHistory = null;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.invalidateViews();
        }
        if (this.commentMessagesRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentMessagesRequestId, false);
        }
        if (this.commentRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentRequestId, false);
        }
        if (messageObject2 != null) {
            i4 = messageObject2.getId();
        }
        this.commentLoadingMessageId = i4;
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null) {
            recyclerListView2.invalidateViews();
        }
        final int i5 = this.commentLoadingGuid + 1;
        this.commentLoadingGuid = i5;
        this.commentRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getDiscussionMessage, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda257
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$openDiscussionMessageChat$256(i5, i2, j2, i3, messageObject2, tLRPC$TL_messages_getDiscussionMessage, chat, messageObject, tLObject, tLRPC$TL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.commentRequestId, this.classGuid);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$256(final int i, final int i2, final long j, final int i3, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final MessageObject messageObject2, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda188
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$254(i, i2, j, tLObject, i3, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, messageObject2);
            }
        };
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$255(runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$254(int i, final int i2, long j, TLObject tLObject, final int i3, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final MessageObject messageObject2) {
        if (i != this.commentLoadingGuid) {
            return;
        }
        this.commentRequestId = -1;
        if (tLObject instanceof TLRPC$TL_messages_discussionMessage) {
            this.savedDiscussionMessage = (TLRPC$TL_messages_discussionMessage) tLObject;
            getMessagesController().putUsers(this.savedDiscussionMessage.users, false);
            getMessagesController().putChats(this.savedDiscussionMessage.chats, false);
        } else {
            this.savedNoDiscussion = true;
        }
        ArrayList arrayList = new ArrayList();
        TLRPC$TL_messages_discussionMessage tLRPC$TL_messages_discussionMessage = this.savedDiscussionMessage;
        if (tLRPC$TL_messages_discussionMessage != null && tLRPC$TL_messages_discussionMessage.messages != null) {
            for (int i4 = 0; i4 < this.savedDiscussionMessage.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = this.savedDiscussionMessage.messages.get(i4);
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    arrayList.add(tLRPC$Message);
                }
            }
        }
        if (arrayList.size() > 0) {
            TLRPC$Message tLRPC$Message2 = (TLRPC$Message) arrayList.get(0);
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getMessagesController().getInputPeer(tLRPC$Message2.peer_id);
            tLRPC$TL_messages_getReplies.msg_id = tLRPC$Message2.id;
            tLRPC$TL_messages_getReplies.offset_date = 0;
            tLRPC$TL_messages_getReplies.limit = 30;
            if (i3 > 0) {
                tLRPC$TL_messages_getReplies.offset_id = i3;
                tLRPC$TL_messages_getReplies.add_offset = (-30) / 2;
            } else {
                tLRPC$TL_messages_getReplies.offset_id = i2 == 0 ? 1 : i2;
                tLRPC$TL_messages_getReplies.add_offset = (-30) + 10;
            }
            final int i5 = 1 + this.commentMessagesLoadingGuid;
            this.commentMessagesLoadingGuid = i5;
            this.commentMessagesRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda258
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    ChatActivity.this.lambda$openDiscussionMessageChat$253(i5, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2, tLObject2, tLRPC$TL_error);
                }
            });
            return;
        }
        this.savedNoHistory = true;
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, true, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$252(final int i, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error, final int i2, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final int i3, final MessageObject messageObject2) {
        lambda$openDiscussionMessageChat$255(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda192
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$251(i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$253(final int i, final int i2, final MessageObject messageObject, final TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, final TLRPC$Chat tLRPC$Chat, final int i3, final MessageObject messageObject2, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$openDiscussionMessageChat$252(i, tLObject, tLRPC$TL_error, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDiscussionMessageChat$251(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, int i2, MessageObject messageObject, TLRPC$TL_messages_getDiscussionMessage tLRPC$TL_messages_getDiscussionMessage, TLRPC$Chat tLRPC$Chat, int i3, MessageObject messageObject2) {
        if (i != this.commentMessagesLoadingGuid) {
            return;
        }
        this.commentMessagesRequestId = -1;
        if (tLObject != null) {
            this.savedHistory = (TLRPC$messages_Messages) tLObject;
        } else if ("CHANNEL_PRIVATE".equals(tLRPC$TL_error.text)) {
            MessagesController.showCantOpenAlert(this, LocaleController.getString("ChannelCantOpenBannedByAdmin", R.string.ChannelCantOpenBannedByAdmin));
            this.commentLoadingMessageId = 0;
            this.chatListView.invalidateViews();
            return;
        } else {
            this.savedNoHistory = true;
        }
        processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, this.savedNoHistory, this.savedHistory, i2, messageObject, tLRPC$TL_messages_getDiscussionMessage, tLRPC$Chat, i3, messageObject2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openOriginalReplyChat(MessageObject messageObject) {
        if (UserObject.isUserSelf(this.currentUser)) {
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
            if (tLRPC$MessageFwdHeader.saved_from_peer.user_id == this.currentUser.id) {
                scrollToMessageId(tLRPC$MessageFwdHeader.saved_from_msg_id, messageObject.getId(), true, 0, true, 0);
                return;
            }
        }
        Bundle bundle = new Bundle();
        TLRPC$Peer tLRPC$Peer = messageObject.messageOwner.fwd_from.saved_from_peer;
        long j = tLRPC$Peer.channel_id;
        if (j != 0) {
            bundle.putLong("chat_id", j);
        } else {
            long j2 = tLRPC$Peer.chat_id;
            if (j2 != 0) {
                bundle.putLong("chat_id", j2);
            } else {
                long j3 = tLRPC$Peer.user_id;
                if (j3 != 0) {
                    bundle.putLong("user_id", j3);
                }
            }
        }
        bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
        if (getMessagesController().checkCanOpenChat(bundle, this)) {
            presentFragment(new ChatActivity(bundle));
        }
    }

    public void showRequestUrlAlert(final TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, final String str, final boolean z) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("OpenUrlTitle", R.string.OpenUrlTitle));
        String string = LocaleController.getString("OpenUrlAlert2", R.string.OpenUrlAlert2);
        int indexOf = string.indexOf("%");
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(String.format(string, str));
        if (indexOf >= 0) {
            spannableStringBuilder.setSpan(new URLSpan(str), indexOf, str.length() + indexOf, 33);
        }
        builder.setMessage(spannableStringBuilder);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        int i = 2;
        final CheckBoxCell[] checkBoxCellArr = new CheckBoxCell[2];
        LinearLayout linearLayout = new LinearLayout(getParentActivity());
        linearLayout.setOrientation(1);
        TLRPC$User currentUser = getUserConfig().getCurrentUser();
        int i2 = 0;
        while (true) {
            if (i2 < (tLRPC$TL_urlAuthResultRequest.request_write_access ? 2 : 1)) {
                checkBoxCellArr[i2] = new CheckBoxCell(getParentActivity(), 5, this.themeDelegate);
                checkBoxCellArr[i2].setBackgroundDrawable(Theme.getSelectorDrawable(false));
                checkBoxCellArr[i2].setMultiline(true);
                checkBoxCellArr[i2].setTag(Integer.valueOf(i2));
                if (i2 == 0) {
                    int i3 = R.string.OpenUrlOption1;
                    Object[] objArr = new Object[i];
                    objArr[0] = tLRPC$TL_urlAuthResultRequest.domain;
                    objArr[1] = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
                    SpannableStringBuilder replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", i3, objArr));
                    int indexOf2 = TextUtils.indexOf(replaceTags, tLRPC$TL_urlAuthResultRequest.domain);
                    if (indexOf2 >= 0) {
                        replaceTags.setSpan(new URLSpan(""), indexOf2, tLRPC$TL_urlAuthResultRequest.domain.length() + indexOf2, 33);
                    }
                    checkBoxCellArr[i2].setText(replaceTags, "", true, false);
                } else {
                    checkBoxCellArr[i2].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, UserObject.getFirstName(tLRPC$TL_urlAuthResultRequest.bot))), "", true, false);
                }
                checkBoxCellArr[i2].setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                linearLayout.addView(checkBoxCellArr[i2], LayoutHelper.createLinear(-1, -2));
                checkBoxCellArr[i2].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda105
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.lambda$showRequestUrlAlert$257(checkBoxCellArr, view);
                    }
                });
                i2++;
                i = 2;
            } else {
                builder.setView(linearLayout);
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda45
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        ChatActivity.this.lambda$showRequestUrlAlert$262(checkBoxCellArr, str, tLRPC$TL_messages_requestUrlAuth, tLRPC$TL_urlAuthResultRequest, z, dialogInterface, i4);
                    }
                });
                showDialog(builder.create());
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$showRequestUrlAlert$257(CheckBoxCell[] checkBoxCellArr, View view) {
        if (view.isEnabled()) {
            Integer num = (Integer) view.getTag();
            checkBoxCellArr[num.intValue()].setChecked(!checkBoxCellArr[num.intValue()].isChecked(), true);
            if (num.intValue() != 0 || checkBoxCellArr[1] == null) {
                return;
            }
            if (checkBoxCellArr[num.intValue()].isChecked()) {
                checkBoxCellArr[1].setEnabled(true);
                return;
            }
            checkBoxCellArr[1].setChecked(false, true);
            checkBoxCellArr[1].setEnabled(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$262(CheckBoxCell[] checkBoxCellArr, final String str, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, TLRPC$TL_urlAuthResultRequest tLRPC$TL_urlAuthResultRequest, final boolean z, DialogInterface dialogInterface, int i) {
        if (!checkBoxCellArr[0].isChecked()) {
            Browser.openUrl((Context) getParentActivity(), str, false);
            return;
        }
        final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC$TL_messages_acceptUrlAuth tLRPC$TL_messages_acceptUrlAuth = new TLRPC$TL_messages_acceptUrlAuth();
        String str2 = tLRPC$TL_messages_requestUrlAuth.url;
        if (str2 != null) {
            tLRPC$TL_messages_acceptUrlAuth.url = str2;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 4;
        } else {
            tLRPC$TL_messages_acceptUrlAuth.button_id = tLRPC$TL_messages_requestUrlAuth.button_id;
            tLRPC$TL_messages_acceptUrlAuth.msg_id = tLRPC$TL_messages_requestUrlAuth.msg_id;
            tLRPC$TL_messages_acceptUrlAuth.peer = tLRPC$TL_messages_requestUrlAuth.peer;
            tLRPC$TL_messages_acceptUrlAuth.flags |= 2;
        }
        if (tLRPC$TL_urlAuthResultRequest.request_write_access) {
            tLRPC$TL_messages_acceptUrlAuth.write_allowed = checkBoxCellArr[1].isChecked();
        }
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_acceptUrlAuth, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda260
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                ChatActivity.this.lambda$showRequestUrlAlert$259(str, tLRPC$TL_messages_requestUrlAuth, z, tLObject, tLRPC$TL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda230
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$261(alertDialogArr, sendRequest);
            }
        }, 500L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$259(final String str, final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, final boolean z, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$showRequestUrlAlert$258(tLObject, str, tLRPC$TL_messages_requestUrlAuth, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$258(TLObject tLObject, String str, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, boolean z) {
        if (tLObject instanceof TLRPC$TL_urlAuthResultAccepted) {
            Browser.openUrl((Context) getParentActivity(), ((TLRPC$TL_urlAuthResultAccepted) tLObject).url, false);
        } else if (tLObject instanceof TLRPC$TL_urlAuthResultDefault) {
            Browser.openUrl((Context) getParentActivity(), str, false);
        } else {
            String str2 = tLRPC$TL_messages_requestUrlAuth.url;
            if (str2 != null) {
                AlertsCreator.showOpenUrlAlert(this, str2, false, z, this.themeDelegate);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$261(AlertDialog[] alertDialogArr, final int i) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda22
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showRequestUrlAlert$260(i, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showRequestUrlAlert$260(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeMessageObject(MessageObject messageObject) {
        int indexOf = this.messages.indexOf(messageObject);
        if (indexOf == -1) {
            return;
        }
        this.messages.remove(indexOf);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + indexOf);
        }
    }

    public void openVCard(TLRPC$User tLRPC$User, String str, String str2, String str3, String str4) {
        File file;
        if (tLRPC$User != null) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", tLRPC$User.id);
            bundle.putBoolean("show_add_to_contacts", true);
            bundle.putString("vcard", str2);
            bundle.putString("vcard_phone", str);
            bundle.putString("vcard_first_name", str3);
            bundle.putString("vcard_last_name", str4);
            presentFragment(new ProfileActivity(bundle));
            return;
        }
        try {
            if (TextUtils.isEmpty(str2)) {
                file = null;
            } else {
                File sharingDirectory = AndroidUtilities.getSharingDirectory();
                sharingDirectory.mkdirs();
                File file2 = new File(sharingDirectory, "vcard.vcf");
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file2));
                bufferedWriter.write(str2);
                bufferedWriter.close();
                file = file2;
            }
            showDialog(new PhonebookShareAlert(this, null, tLRPC$User, null, file, PhoneFormat.stripExceptNumbers(str), str3, str4, this.themeDelegate));
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setCellSelectionBackground(MessageObject messageObject, ChatMessageCell chatMessageCell, int i, boolean z) {
        boolean z2;
        MessageObject.GroupedMessages validGroupedMessage = getValidGroupedMessage(messageObject);
        if (validGroupedMessage != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= validGroupedMessage.messages.size()) {
                    z2 = false;
                    break;
                } else if (this.selectedMessagesIds[i].indexOfKey(validGroupedMessage.messages.get(i2).getId()) < 0) {
                    z2 = true;
                    break;
                } else {
                    i2++;
                }
            }
            if (!z2) {
                validGroupedMessage = null;
            }
        }
        chatMessageCell.setDrawSelectionBackground(validGroupedMessage == null);
        chatMessageCell.setChecked(true, validGroupedMessage == null, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0074 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0086  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0091  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void openClickableLink(final CharacterStyle characterStyle, final String str, boolean z, final ChatMessageCell chatMessageCell, final MessageObject messageObject) {
        String str2;
        String str3;
        TLRPC$Message tLRPC$Message;
        if (z) {
            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
            final int intValue = str.startsWith("video?") ? Utilities.parseInt((CharSequence) str).intValue() : -1;
            if (intValue >= 0) {
                builder.setTitle(AndroidUtilities.formatDuration(intValue, false));
            } else {
                try {
                    Uri parse = Uri.parse(str);
                    str2 = Browser.replaceHostname(parse, IDN.toUnicode(parse.getHost(), 1));
                } catch (Exception e) {
                    try {
                        FileLog.e((Throwable) e, false);
                        str2 = str;
                    } catch (Exception e2) {
                        e = e2;
                        str2 = str;
                        FileLog.e(e);
                        str3 = str2;
                        builder.setTitle(str3);
                        builder.setTitleMultipleLines(true);
                        builder.setItems(!getMessagesController().isChatNoForwards(this.currentChat) || (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards) ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda37
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i) {
                                ChatActivity.this.lambda$openClickableLink$263(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i);
                            }
                        });
                        builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda46
                            @Override // android.content.DialogInterface.OnDismissListener
                            public final void onDismiss(DialogInterface dialogInterface) {
                                ChatActivity.lambda$openClickableLink$264(ChatMessageCell.this, dialogInterface);
                            }
                        });
                        showDialog(builder.create());
                        return;
                    }
                }
                try {
                    str3 = URLDecoder.decode(str2.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e3) {
                    e = e3;
                    FileLog.e(e);
                    str3 = str2;
                    builder.setTitle(str3);
                    builder.setTitleMultipleLines(true);
                    builder.setItems(!getMessagesController().isChatNoForwards(this.currentChat) || (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards) ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda37
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            ChatActivity.this.lambda$openClickableLink$263(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i);
                        }
                    });
                    builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda46
                        @Override // android.content.DialogInterface.OnDismissListener
                        public final void onDismiss(DialogInterface dialogInterface) {
                            ChatActivity.lambda$openClickableLink$264(ChatMessageCell.this, dialogInterface);
                        }
                    });
                    showDialog(builder.create());
                    return;
                }
                builder.setTitle(str3);
                builder.setTitleMultipleLines(true);
            }
            builder.setItems(!getMessagesController().isChatNoForwards(this.currentChat) || (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && tLRPC$Message.noforwards) ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda37
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.lambda$openClickableLink$263(str, characterStyle, messageObject, chatMessageCell, intValue, dialogInterface, i);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda46
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$openClickableLink$264(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
            return;
        }
        logSponsoredClicked(messageObject);
        String extractUsername = Browser.extractUsername(str);
        if (extractUsername != null) {
            String lowerCase = extractUsername.toLowerCase();
            if (ChatObject.hasPublicLink(this.currentChat, lowerCase) || UserObject.hasPublicUsername(this.currentUser, lowerCase)) {
                ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                if (chatAvatarContainer != null) {
                    chatAvatarContainer.openProfile(false);
                } else {
                    shakeContent();
                }
            } else if (str.startsWith("@")) {
                getMessagesController().openByUserName(lowerCase, this, 0, makeProgressForLink(chatMessageCell, characterStyle));
            } else {
                processExternalUrl(0, str, characterStyle, chatMessageCell, false);
            }
        } else if (str.startsWith("#") || str.startsWith("$")) {
            if (ChatObject.isChannel(this.currentChat)) {
                int i = this.chatMode;
                if (i == 1 || i == 2) {
                    this.chatActivityDelegate.openSearch(str);
                    finishFragment();
                    return;
                }
                openSearchWithText(str);
                return;
            }
            DialogsActivity dialogsActivity = new DialogsActivity(null);
            dialogsActivity.setSearchString(str);
            presentFragment(dialogsActivity);
        } else {
            processExternalUrl(0, str, characterStyle, chatMessageCell, false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00ed A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ee  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$openClickableLink$263(String str, CharacterStyle characterStyle, MessageObject messageObject, ChatMessageCell chatMessageCell, int i, DialogInterface dialogInterface, int i2) {
        String str2;
        MessageObject messageObject2;
        boolean z = false;
        if (i2 == 0) {
            if (str.startsWith("video?")) {
                didPressMessageUrl(characterStyle, false, messageObject, chatMessageCell);
                return;
            }
            logSponsoredClicked(messageObject);
            openClickableLink(characterStyle, str, false, chatMessageCell, messageObject);
        } else if (i2 == 1) {
            if (str.startsWith("video?") && messageObject != null && !messageObject.scheduled) {
                if (!((messageObject.isVideo() || messageObject.isRoundVideo() || messageObject.isVoice() || messageObject.isMusic()) ? true : true) && (messageObject2 = messageObject.replyMessageObject) != null) {
                    messageObject = messageObject2;
                }
                long dialogId = messageObject.getDialogId();
                int id = messageObject.getId();
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader != null) {
                    TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader.saved_from_peer;
                    if (tLRPC$Peer != null) {
                        dialogId = MessageObject.getPeerId(tLRPC$Peer);
                        id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
                    } else {
                        TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
                        if (tLRPC$Peer2 != null) {
                            dialogId = MessageObject.getPeerId(tLRPC$Peer2);
                            id = messageObject.messageOwner.fwd_from.channel_post;
                        }
                    }
                }
                if (DialogObject.isChatDialog(dialogId)) {
                    TLRPC$Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId));
                    String publicUsername = ChatObject.getPublicUsername(chat);
                    if (chat != null && publicUsername != null) {
                        str2 = "https://t.me/" + publicUsername + "/" + id + "?t=" + i;
                        if (str2 != null) {
                            return;
                        }
                        AndroidUtilities.addToClipboard(str2);
                    }
                    str2 = null;
                    if (str2 != null) {
                    }
                } else {
                    TLRPC$User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                    String publicUsername2 = UserObject.getPublicUsername(user);
                    if (user != null && publicUsername2 != null) {
                        str2 = "https://t.me/" + publicUsername2 + "/" + id + "?t=" + i;
                        if (str2 != null) {
                        }
                    }
                    str2 = null;
                    if (str2 != null) {
                    }
                }
            } else {
                AndroidUtilities.addToClipboard(str);
            }
            createUndoView();
            if (this.undoView == null) {
                return;
            }
            if (str.startsWith("@")) {
                this.undoView.showWithAction(0L, 56, (Runnable) null);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                this.undoView.showWithAction(0L, 57, (Runnable) null);
            } else {
                this.undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$openClickableLink$264(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    public void shakeContent() {
        AndroidUtilities.shakeViewSpring(getChatListView(), 5.0f);
        BotWebViewVibrationEffect.APP_ERROR.vibrate();
        ChatActivityEnterView chatActivityEnterView = getChatActivityEnterView();
        for (int i = 0; i < chatActivityEnterView.getChildCount(); i++) {
            AndroidUtilities.shakeViewSpring(chatActivityEnterView.getChildAt(i), 5.0f);
        }
        ActionBar actionBar = getActionBar();
        for (int i2 = 0; i2 < actionBar.getChildCount(); i2++) {
            AndroidUtilities.shakeViewSpring(actionBar.getChildAt(i2), 5.0f);
        }
    }

    private Browser.Progress makeProgressForLink(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
        Browser.Progress progress = this.progressDialogCurrent;
        125 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (characterStyle != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 125(chatMessageCell, characterStyle);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 125 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ CharacterStyle val$span;

        125(ChatMessageCell chatMessageCell, CharacterStyle characterStyle) {
            this.val$cell = chatMessageCell;
            this.val$span = characterStyle;
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 1;
            ChatActivity.this.progressDialogLinkSpan = this.val$span;
            this.val$cell.invalidate();
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$125$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.125.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public Browser.Progress makeProgressForBotButton(ChatMessageCell chatMessageCell, String str) {
        Browser.Progress progress = this.progressDialogCurrent;
        126 r1 = null;
        if (progress != null) {
            progress.cancel(true);
            this.progressDialogCurrent = null;
        }
        if (str != null && chatMessageCell != null && chatMessageCell.getMessageObject() != null) {
            r1 = new 126(chatMessageCell, str);
        }
        this.progressDialogCurrent = r1;
        return r1;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 126 extends Browser.Progress {
        final /* synthetic */ ChatMessageCell val$cell;
        final /* synthetic */ String val$url;

        126(ChatMessageCell chatMessageCell, String str) {
            this.val$cell = chatMessageCell;
            this.val$url = str;
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void init() {
            ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
            ChatActivity.this.progressDialogAtMessageType = 3;
            ChatActivity.this.progressDialogBotButtonUrl = this.val$url;
            this.val$cell.invalidate();
        }

        @Override // org.telegram.messenger.browser.Browser.Progress
        public void end(boolean z) {
            if (z) {
                return;
            }
            final ChatMessageCell chatMessageCell = this.val$cell;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$126$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.126.this.lambda$end$0(chatMessageCell);
                }
            }, 240L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$end$0(ChatMessageCell chatMessageCell) {
            if (ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId()) {
                ChatActivity.this.resetProgressDialogLoading();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0042  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0093 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ad  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processExternalUrl(int i, String str, CharacterStyle characterStyle, ChatMessageCell chatMessageCell, boolean z) {
        String hostAuthority;
        try {
            hostAuthority = AndroidUtilities.getHostAuthority(str);
        } catch (Exception e) {
            e = e;
        }
        if (this.currentEncryptedChat != null) {
            if (getMessagesController().secretWebpagePreview == 1) {
            }
            if (!z || AndroidUtilities.shouldShowUrlInAlert(str)) {
                if (i != 0 || i == 2) {
                    AlertsCreator.showOpenUrlAlert(this, str, true, true, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : false, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
                } else if (i == 1) {
                    AlertsCreator.showOpenUrlAlert(this, str, true, true, false, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
                    return;
                } else {
                    return;
                }
            } else if (i == 0) {
                Browser.openUrl(getParentActivity(), Uri.parse(str), true, true, makeProgressForLink(chatMessageCell, characterStyle));
                return;
            } else if (i == 1) {
                Browser.openUrl(getParentActivity(), Uri.parse(str), this.inlineReturn == 0, false, makeProgressForLink(chatMessageCell, characterStyle));
                return;
            } else if (i == 2) {
                Browser.openUrl(getParentActivity(), Uri.parse(str), this.inlineReturn == 0, true, makeProgressForLink(chatMessageCell, characterStyle));
                return;
            } else {
                return;
            }
        }
        if (getMessagesController().authDomains.contains(hostAuthority)) {
            try {
                getSendMessagesHelper().requestUrlAuth(str, this, i == 0 || i == 2);
                return;
            } catch (Exception e2) {
                e = e2;
                FileLog.e(e);
                if (z) {
                }
                if (i != 0) {
                }
                AlertsCreator.showOpenUrlAlert(this, str, true, true, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : false, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
            }
        }
        if (z) {
        }
        if (i != 0) {
        }
        AlertsCreator.showOpenUrlAlert(this, str, true, true, true, ((characterStyle instanceof URLSpanReplacement) || (((URLSpanReplacement) characterStyle).getTextStyleRun().flags & 1024) == 0) ? false : false, makeProgressForLink(chatMessageCell, characterStyle), this.themeDelegate);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void logSponsoredClicked(MessageObject messageObject) {
        if (messageObject == null || !messageObject.isSponsored()) {
            return;
        }
        TLRPC$TL_channels_clickSponsoredMessage tLRPC$TL_channels_clickSponsoredMessage = new TLRPC$TL_channels_clickSponsoredMessage();
        tLRPC$TL_channels_clickSponsoredMessage.random_id = messageObject.sponsoredId;
        tLRPC$TL_channels_clickSponsoredMessage.channel = getMessagesController().getInputChannel(-getDialogId());
        getConnectionsManager().sendRequest(tLRPC$TL_channels_clickSponsoredMessage, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0279  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0284  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didPressMessageUrl(final CharacterStyle characterStyle, boolean z, final MessageObject messageObject, final ChatMessageCell chatMessageCell) {
        TLRPC$WebPage tLRPC$WebPage;
        String str;
        String str2;
        MessageObject messageObject2;
        MessageObject messageObject3;
        TLRPC$WebPage tLRPC$WebPage2;
        MessageObject messageObject4;
        TLRPC$Message tLRPC$Message;
        MessageObject messageObject5 = messageObject;
        if (characterStyle == null || getParentActivity() == null) {
            return;
        }
        boolean z2 = true;
        boolean z3 = true;
        boolean z4 = getMessagesController().isChatNoForwards(this.currentChat) || !(messageObject5 == null || (tLRPC$Message = messageObject5.messageOwner) == null || !tLRPC$Message.noforwards);
        ChatMessageCell chatMessageCell2 = null;
        if (characterStyle instanceof URLSpanMono) {
            if (!z4) {
                ((URLSpanMono) characterStyle).copyToClipboard();
                UndoView undoView = getUndoView();
                if (undoView != null) {
                    undoView.showWithAction(0L, 58, (Runnable) null);
                }
            }
            if (!z || chatMessageCell == null) {
                return;
            }
            chatMessageCell.resetPressedLink(-1);
        } else if (characterStyle instanceof URLSpanUserMention) {
            TLRPC$User user = getMessagesController().getUser(Utilities.parseLong(((URLSpanUserMention) characterStyle).getURL()));
            if (user != null) {
                MessagesController.openChatOrProfileWith(user, null, this, 0, false);
            }
            if (z && chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
            logSponsoredClicked(messageObject5);
        } else if (characterStyle instanceof URLSpanNoUnderline) {
            String url = ((URLSpanNoUnderline) characterStyle).getURL();
            if (messageObject5 != null && url.startsWith("/")) {
                if (URLSpanBotCommand.enabled) {
                    ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    TLRPC$Chat tLRPC$Chat = this.currentChat;
                    chatActivityEnterView.setCommand(messageObject5, url, z, (tLRPC$Chat == null || !tLRPC$Chat.megagroup) ? false : false);
                    if (!z && this.chatActivityEnterView.getFieldText() == null) {
                        hideFieldPanel(false);
                    }
                }
                if (!z || chatMessageCell == null) {
                    return;
                }
                chatMessageCell.resetPressedLink(-1);
            } else if (messageObject5 != null && url.startsWith(MediaStreamTrack.VIDEO_TRACK_KIND) && !z) {
                int intValue = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isYouTubeVideo()) {
                    tLRPC$WebPage2 = messageObject5.messageOwner.media.webpage;
                } else {
                    MessageObject messageObject6 = messageObject5.replyMessageObject;
                    if (messageObject6 == null || !messageObject6.isYouTubeVideo()) {
                        tLRPC$WebPage2 = null;
                    } else {
                        MessageObject messageObject7 = messageObject5.replyMessageObject;
                        messageObject5 = messageObject7;
                        tLRPC$WebPage2 = messageObject7.messageOwner.media.webpage;
                    }
                }
                if (tLRPC$WebPage2 != null) {
                    EmbedBottomSheet.show(this, messageObject5, this.photoViewerProvider, tLRPC$WebPage2.site_name, tLRPC$WebPage2.title, tLRPC$WebPage2.url, tLRPC$WebPage2.embed_url, tLRPC$WebPage2.embed_width, tLRPC$WebPage2.embed_height, intValue, isKeyboardVisible());
                    return;
                }
                if (messageObject5.isVideo() || (messageObject4 = messageObject5.replyMessageObject) == null) {
                    chatMessageCell2 = chatMessageCell;
                } else {
                    MessageObject messageObject8 = this.messagesDict[messageObject4.getDialogId() == this.dialog_id ? (char) 0 : (char) 1].get(messageObject5.replyMessageObject.getId());
                    messageObject5 = messageObject8 == null ? messageObject5.replyMessageObject : messageObject8;
                }
                messageObject5.forceSeekTo = intValue / ((float) messageObject5.getDuration());
                openPhotoViewerForMessage(chatMessageCell2, messageObject5);
            } else if (messageObject5 != null && url.startsWith(MediaStreamTrack.AUDIO_TRACK_KIND)) {
                int intValue2 = Utilities.parseInt((CharSequence) url).intValue();
                if (messageObject.isMusic() || (messageObject3 = messageObject5.replyMessageObject) == null) {
                    messageObject2 = messageObject5;
                } else {
                    messageObject2 = this.messagesDict[messageObject3.getDialogId() == this.dialog_id ? (char) 0 : (char) 1].get(messageObject5.replyMessageObject.getId());
                }
                float f = intValue2;
                float duration = f / ((float) messageObject2.getDuration());
                MediaController mediaController = getMediaController();
                if (mediaController.isPlayingMessage(messageObject2)) {
                    messageObject2.audioProgress = duration;
                    mediaController.seekToProgress(messageObject2, duration);
                    if (mediaController.isMessagePaused()) {
                        mediaController.playMessage(messageObject2);
                    }
                } else {
                    messageObject2.forceSeekTo = f / ((float) messageObject2.getDuration());
                    mediaController.playMessage(messageObject2);
                }
                if (z && chatMessageCell != null) {
                    chatMessageCell.resetPressedLink(-1);
                }
                if (messageObject2.isVoice()) {
                    return;
                }
                showDialog(new AudioPlayerAlert(getContext(), this.themeDelegate));
            } else if (url.startsWith("card:")) {
                final String substring = url.substring(5);
                final AlertDialog[] alertDialogArr = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                TLRPC$TL_payments_getBankCardData tLRPC$TL_payments_getBankCardData = new TLRPC$TL_payments_getBankCardData();
                tLRPC$TL_payments_getBankCardData.number = substring;
                final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_payments_getBankCardData, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda266
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        ChatActivity.this.lambda$didPressMessageUrl$268(alertDialogArr, substring, chatMessageCell, tLObject, tLRPC$TL_error);
                    }
                }, null, null, 0, getMessagesController().webFileDatacenterId, 1, true);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda232
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.lambda$didPressMessageUrl$270(alertDialogArr, sendRequest, chatMessageCell);
                    }
                }, 500L);
            } else {
                openClickableLink(characterStyle, url, z, chatMessageCell, messageObject);
            }
        } else {
            final String url2 = ((URLSpan) characterStyle).getURL();
            if (z) {
                BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
                try {
                    Uri parse = Uri.parse(url2);
                    str = Browser.replaceHostname(parse, IDN.toUnicode(parse.getHost(), 1));
                } catch (Exception e) {
                    try {
                        FileLog.e((Throwable) e, false);
                        str = url2;
                    } catch (Exception e2) {
                        e = e2;
                        str = url2;
                        FileLog.e(e);
                        str2 = str;
                        builder.setTitle(str2);
                        builder.setTitleMultipleLines(true);
                        builder.setItems(z4 ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
                            @Override // android.content.DialogInterface.OnClickListener
                            public final void onClick(DialogInterface dialogInterface, int i) {
                                ChatActivity.this.lambda$didPressMessageUrl$271(messageObject, url2, characterStyle, chatMessageCell, dialogInterface, i);
                            }
                        });
                        builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
                            @Override // android.content.DialogInterface.OnDismissListener
                            public final void onDismiss(DialogInterface dialogInterface) {
                                ChatActivity.lambda$didPressMessageUrl$272(ChatMessageCell.this, dialogInterface);
                            }
                        });
                        showDialog(builder.create());
                        return;
                    }
                }
                try {
                    str2 = URLDecoder.decode(str.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e3) {
                    e = e3;
                    FileLog.e(e);
                    str2 = str;
                    builder.setTitle(str2);
                    builder.setTitleMultipleLines(true);
                    builder.setItems(z4 ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            ChatActivity.this.lambda$didPressMessageUrl$271(messageObject, url2, characterStyle, chatMessageCell, dialogInterface, i);
                        }
                    });
                    builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
                        @Override // android.content.DialogInterface.OnDismissListener
                        public final void onDismiss(DialogInterface dialogInterface) {
                            ChatActivity.lambda$didPressMessageUrl$272(ChatMessageCell.this, dialogInterface);
                        }
                    });
                    showDialog(builder.create());
                    return;
                }
                builder.setTitle(str2);
                builder.setTitleMultipleLines(true);
                builder.setItems(z4 ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.lambda$didPressMessageUrl$271(messageObject, url2, characterStyle, chatMessageCell, dialogInterface, i);
                    }
                });
                builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
                    @Override // android.content.DialogInterface.OnDismissListener
                    public final void onDismiss(DialogInterface dialogInterface) {
                        ChatActivity.lambda$didPressMessageUrl$272(ChatMessageCell.this, dialogInterface);
                    }
                });
                showDialog(builder.create());
                return;
            }
            logSponsoredClicked(messageObject5);
            boolean z5 = characterStyle instanceof URLSpanReplacement;
            if ((!z5 || (url2 != null && url2.startsWith("mailto:"))) && !AndroidUtilities.shouldShowUrlInAlert(url2)) {
                if (messageObject5 != null) {
                    TLRPC$MessageMedia tLRPC$MessageMedia = messageObject5.messageOwner.media;
                    if ((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$WebPage = tLRPC$MessageMedia.webpage) != null && tLRPC$WebPage.cached_page != null) {
                        String lowerCase = url2.toLowerCase();
                        String lowerCase2 = messageObject5.messageOwner.media.webpage.url.toLowerCase();
                        if ((lowerCase.contains("telegram.org/blog") || Browser.isTelegraphUrl(lowerCase, false) || lowerCase.contains("t.me/iv")) && (lowerCase.contains(lowerCase2) || lowerCase2.contains(lowerCase))) {
                            ArticleViewer.getInstance().setParentActivity(getParentActivity(), this);
                            ArticleViewer.getInstance().open(messageObject5);
                            return;
                        }
                    }
                }
                if (openLinkInternally(url2, chatMessageCell, characterStyle, messageObject5 != null ? messageObject.getId() : 0)) {
                    return;
                }
                z2 = z5;
            } else {
                if (openLinkInternally(url2, chatMessageCell, characterStyle, messageObject5 != null ? messageObject.getId() : 0)) {
                    return;
                }
            }
            processExternalUrl(2, url2, characterStyle, chatMessageCell, Browser.urlMustNotHaveConfirmation(url2) ? false : z2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$268(final AlertDialog[] alertDialogArr, final String str, final ChatMessageCell chatMessageCell, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda233
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$didPressMessageUrl$267(alertDialogArr, tLObject, str, chatMessageCell);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$267(AlertDialog[] alertDialogArr, TLObject tLObject, final String str, final ChatMessageCell chatMessageCell) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Throwable unused) {
        }
        alertDialogArr[0] = null;
        if (!(tLObject instanceof TLRPC$TL_payments_bankCardData)) {
            if (chatMessageCell != null) {
                chatMessageCell.resetPressedLink(-1);
            }
        } else if (getParentActivity() != null) {
            final TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData = (TLRPC$TL_payments_bankCardData) tLObject;
            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity(), false, this.themeDelegate);
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$TL_payments_bankCardData.open_urls.size();
            for (int i = 0; i < size; i++) {
                arrayList.add(tLRPC$TL_payments_bankCardData.open_urls.get(i).name);
            }
            arrayList.add(LocaleController.getString("CopyCardNumber", R.string.CopyCardNumber));
            builder.setTitle(tLRPC$TL_payments_bankCardData.title);
            builder.setItems((CharSequence[]) arrayList.toArray(new CharSequence[0]), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda42
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i2) {
                    ChatActivity.this.lambda$didPressMessageUrl$265(tLRPC$TL_payments_bankCardData, str, dialogInterface, i2);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda48
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$didPressMessageUrl$266(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$265(TLRPC$TL_payments_bankCardData tLRPC$TL_payments_bankCardData, String str, DialogInterface dialogInterface, int i) {
        if (i < tLRPC$TL_payments_bankCardData.open_urls.size()) {
            Browser.openUrl((Context) getParentActivity(), tLRPC$TL_payments_bankCardData.open_urls.get(i).url, this.inlineReturn == 0, false);
            return;
        }
        AndroidUtilities.addToClipboard(str);
        Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("CardNumberCopied", R.string.CardNumberCopied), 0).show();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didPressMessageUrl$266(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$270(AlertDialog[] alertDialogArr, final int i, final ChatMessageCell chatMessageCell) {
        if (alertDialogArr[0] == null) {
            return;
        }
        alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda24
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$didPressMessageUrl$269(i, chatMessageCell, dialogInterface);
            }
        });
        showDialog(alertDialogArr[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$269(int i, ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        chatMessageCell.resetPressedLink(-1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didPressMessageUrl$271(MessageObject messageObject, String str, CharacterStyle characterStyle, ChatMessageCell chatMessageCell, DialogInterface dialogInterface, int i) {
        if (i == 0) {
            logSponsoredClicked(messageObject);
            processExternalUrl(1, str, characterStyle, chatMessageCell, false);
            return;
        }
        boolean z = true;
        if (i == 1) {
            boolean z2 = false;
            if (str.startsWith("mailto:")) {
                str = str.substring(7);
            } else if (str.startsWith("tel:")) {
                str = str.substring(4);
                z = false;
                z2 = true;
            } else {
                z = false;
            }
            AndroidUtilities.addToClipboard(str);
            createUndoView();
            UndoView undoView = this.undoView;
            if (undoView == null) {
                return;
            }
            if (z) {
                undoView.showWithAction(0L, 80, (Runnable) null);
            } else if (z2) {
                undoView.showWithAction(0L, 60, (Runnable) null);
            } else {
                undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$didPressMessageUrl$272(ChatMessageCell chatMessageCell, DialogInterface dialogInterface) {
        if (chatMessageCell != null) {
            chatMessageCell.resetPressedLink(-1);
        }
    }

    void openPhotoViewerForMessage(ChatMessageCell chatMessageCell, MessageObject messageObject) {
        ChatMessageCell chatMessageCell2;
        AnimatedFileDrawable animation;
        Bitmap animatedBitmap;
        if (chatMessageCell == null) {
            int childCount = this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    chatMessageCell2 = (ChatMessageCell) childAt;
                    if (chatMessageCell2.getMessageObject().equals(messageObject)) {
                        break;
                    }
                }
            }
        }
        chatMessageCell2 = chatMessageCell;
        if (messageObject.isVideo()) {
            sendSecretMessageRead(messageObject, true);
        }
        PhotoViewer.getInstance().setParentActivity(this, this.themeDelegate);
        MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (chatMessageCell2 != null && playingMessageObject != null && playingMessageObject.isVideo()) {
            getFileLoader().setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
            if (playingMessageObject.equals(messageObject) && (animation = chatMessageCell2.getPhotoImage().getAnimation()) != null && this.videoTextureView != null && this.videoPlayerContainer.getTag() != null && (animatedBitmap = animation.getAnimatedBitmap()) != null) {
                try {
                    Bitmap bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                    bitmap.recycle();
                } catch (Throwable th) {
                    FileLog.e(th);
                }
            }
            MediaController.getInstance().cleanupPlayer(true, true, false, playingMessageObject.equals(messageObject));
        }
        if (this.chatMode == 1 && (messageObject.isVideo() || messageObject.type == 1)) {
            PhotoViewer.getInstance().setParentChatActivity(this);
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            int size = this.messages.size();
            for (int i2 = 0; i2 < size; i2++) {
                MessageObject messageObject2 = this.messages.get(i2);
                if (messageObject2.isVideo() || messageObject2.type == 1) {
                    arrayList.add(0, messageObject2);
                }
            }
            PhotoViewer.getInstance().openPhoto(arrayList, arrayList.indexOf(messageObject), this.dialog_id, 0L, getTopicId(), this.photoViewerProvider);
        } else {
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            int i3 = messageObject.type;
            photoViewer.openPhoto(messageObject, this, i3 != 0 ? this.dialog_id : 0L, i3 != 0 ? this.mergeDialogId : 0L, i3 != 0 ? getTopicId() : 0, this.photoViewerProvider);
        }
        hideHints(false);
        MediaController.getInstance().resetGoingToShowMessageObject();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateMessageListAccessibilityVisibility() {
        ActionBarPopupWindow actionBarPopupWindow;
        if (this.currentEncryptedChat == null && Build.VERSION.SDK_INT >= 19) {
            RecyclerListView recyclerListView = this.chatListView;
            MentionsContainerView mentionsContainerView = this.mentionContainer;
            recyclerListView.setImportantForAccessibility(((mentionsContainerView == null || !mentionsContainerView.isOpen()) && ((actionBarPopupWindow = this.scrimPopupWindow) == null || !actionBarPopupWindow.isShowing())) ? 0 : 4);
        }
    }

    private void markSponsoredAsRead(MessageObject messageObject) {
        if (!messageObject.isSponsored() || messageObject.viewsReloaded) {
            return;
        }
        messageObject.viewsReloaded = true;
        TLRPC$TL_channels_viewSponsoredMessage tLRPC$TL_channels_viewSponsoredMessage = new TLRPC$TL_channels_viewSponsoredMessage();
        tLRPC$TL_channels_viewSponsoredMessage.channel = MessagesController.getInputChannel(this.currentChat);
        tLRPC$TL_channels_viewSponsoredMessage.random_id = messageObject.sponsoredId;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_viewSponsoredMessage, ChatActivity$$ExternalSyntheticLambda268.INSTANCE);
        getMessagesController().markSponsoredAsRead(this.dialog_id, messageObject);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean canBeginSlide() {
        return this.swipeBackEnabled && this.chatActivityEnterView.swipeToBackEnabled() && this.pullingDownOffset == 0.0f;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isSwipeBackEnabled(MotionEvent motionEvent) {
        return this.swipeBackEnabled;
    }

    /* loaded from: classes3.dex */
    public class ChatActivityAdapter extends RecyclerAnimationScrollHelper.AnimatableAdapter {
        private boolean isBot;
        public boolean isFrozen;
        private Context mContext;
        private int messagesEndRow;
        public int messagesStartRow;
        private int rowCount;
        private int botInfoRow = -5;
        private int botInfoEmptyRow = -5;
        private int loadingUpRow = -5;
        private int loadingDownRow = -5;
        public ArrayList<MessageObject> frozenMessages = new ArrayList<>();

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder viewHolder) {
            return false;
        }

        static /* synthetic */ int access$18700(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.messagesEndRow;
        }

        static /* synthetic */ int access$23900(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.botInfoRow;
        }

        static /* synthetic */ int access$40000(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingDownRow;
        }

        static /* synthetic */ int access$40100(ChatActivityAdapter chatActivityAdapter) {
            return chatActivityAdapter.loadingUpRow;
        }

        static /* synthetic */ void access$40200(ChatActivityAdapter chatActivityAdapter) {
            chatActivityAdapter.updateRowsInternal();
        }

        public ChatActivityAdapter(Context context) {
            this.mContext = context;
            TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
            this.isBot = tLRPC$User != null && tLRPC$User.bot;
            setHasStableIds(true);
        }

        public void updateRowsSafe() {
            int i = this.rowCount;
            int i2 = this.botInfoRow;
            int i3 = this.loadingUpRow;
            int i4 = this.loadingDownRow;
            int i5 = this.messagesStartRow;
            int i6 = this.messagesEndRow;
            updateRowsInternal();
            if (i == this.rowCount && i2 == this.botInfoRow && i3 == this.loadingUpRow && i4 == this.loadingDownRow && i5 == this.messagesStartRow && i6 == this.messagesEndRow) {
                return;
            }
            notifyDataSetChanged(false);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void updateRowsInternal() {
            TLRPC$User tLRPC$User;
            TLRPC$User tLRPC$User2;
            this.rowCount = 0;
            ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
            if (!arrayList.isEmpty()) {
                if ((!ChatActivity.this.forwardEndReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.forwardEndReached[1])) && !ChatActivity.this.hideForwardEndReached) {
                    int i = this.rowCount;
                    this.rowCount = i + 1;
                    this.loadingDownRow = i;
                } else {
                    this.loadingDownRow = -5;
                }
                int i2 = this.rowCount;
                this.messagesStartRow = i2;
                int size = i2 + arrayList.size();
                this.rowCount = size;
                this.messagesEndRow = size;
                if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || ((tLRPC$User2 = ChatActivity.this.currentUser) != null && tLRPC$User2.bot && !MessagesController.isSupportUser(tLRPC$User2) && ChatActivity.this.chatMode == 0)) && ChatActivity.this.endReached[0]) {
                    int i3 = this.rowCount;
                    this.rowCount = i3 + 1;
                    this.botInfoRow = i3;
                } else {
                    this.botInfoRow = -5;
                }
                if ((!ChatActivity.this.endReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.endReached[1])) && (AndroidUtilities.isTablet() || ChatActivity.this.isComments || ChatActivity.this.currentUser != null)) {
                    int i4 = this.rowCount;
                    this.rowCount = i4 + 1;
                    this.loadingUpRow = i4;
                    return;
                }
                this.loadingUpRow = -5;
                return;
            }
            this.loadingUpRow = -5;
            this.loadingDownRow = -5;
            this.messagesStartRow = -5;
            this.messagesEndRow = -5;
            if (UserObject.isReplyUser(ChatActivity.this.currentUser) || ((tLRPC$User = ChatActivity.this.currentUser) != null && tLRPC$User.bot && !MessagesController.isSupportUser(tLRPC$User) && ChatActivity.this.chatMode == 0)) {
                int i5 = this.rowCount;
                this.rowCount = i5 + 1;
                this.botInfoRow = i5;
                return;
            }
            this.botInfoRow = -5;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            this.botInfoEmptyRow = -5;
            if (!ChatActivity.this.clearingHistory) {
                if (ChatActivity.this.clearingHistory) {
                    return 0;
                }
                return this.rowCount;
            }
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC$User tLRPC$User = chatActivity.currentUser;
            if (tLRPC$User == null || !tLRPC$User.bot || chatActivity.chatMode != 0 || ((ChatActivity.this.botInfo.size() <= 0 || (((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_photo == null && ((TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_document == null)) && !UserObject.isReplyUser(ChatActivity.this.currentUser))) {
                return 0;
            }
            this.botInfoEmptyRow = 0;
            return 1;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public long getItemId(int i) {
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 1L;
            }
            ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
            int i2 = this.messagesStartRow;
            if (i >= i2 && i < this.messagesEndRow) {
                return arrayList.get(i - i2).stableId;
            }
            if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                return 1L;
            }
            if (i == this.loadingUpRow) {
                return 2L;
            }
            return i == this.loadingDownRow ? 3L : 4L;
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
            ChatMessageCell chatMessageCell;
            ChatActionCell chatActionCell = null;
            if (i == 0) {
                if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                    chatMessageCell = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                } else {
                    chatMessageCell = new ChatMessageCell(this.mContext, true, ChatActivity.this.themeDelegate);
                }
                ChatMessageCell chatMessageCell2 = (ChatMessageCell) chatMessageCell;
                chatMessageCell2.setResourcesProvider(ChatActivity.this.themeDelegate);
                chatMessageCell2.shouldCheckVisibleOnScreen = true;
                chatMessageCell2.setDelegate(new ChatMessageCellDelegate());
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell2.setAllowAssistant(true);
                }
                chatActionCell = chatMessageCell;
            } else if (i == 1) {
                ChatActionCell chatActionCell2 = new ChatActionCell(this, this.mContext, true, ChatActivity.this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1
                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
                        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
                        accessibilityNodeInfo.setVisibleToUser(true);
                    }
                };
                chatActionCell2.setInvalidateColors(true);
                chatActionCell2.setDelegate(new ChatActionCell.ChatActionCellDelegate() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.2
                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public boolean canDrawOutboundsContent() {
                        return false;
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public /* synthetic */ long getDialogId() {
                        return ChatActionCell.ChatActionCellDelegate.-CC.$default$getDialogId(this);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public /* synthetic */ void needOpenInviteLink(TLRPC$TL_chatInviteExported tLRPC$TL_chatInviteExported) {
                        ChatActionCell.ChatActionCellDelegate.-CC.$default$needOpenInviteLink(this, tLRPC$TL_chatInviteExported);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didOpenPremiumGift(ChatActionCell chatActionCell3, TLRPC$TL_premiumGiftOption tLRPC$TL_premiumGiftOption, boolean z) {
                        ChatActivity chatActivity = ChatActivity.this;
                        ChatActivity chatActivity2 = ChatActivity.this;
                        chatActivity.showDialog(new PremiumPreviewBottomSheet(chatActivity2, ((BaseFragment) chatActivity2).currentAccount, ChatActivity.this.getCurrentUser(), new GiftPremiumBottomSheet.GiftTier(tLRPC$TL_premiumGiftOption), ChatActivity.this.themeDelegate).setAnimateConfetti(z).setOutboundGift(chatActionCell3.getMessageObject().isOut()));
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void needShowEffectOverlay(ChatActionCell chatActionCell3, TLRPC$Document tLRPC$Document, TLRPC$VideoSize tLRPC$VideoSize) {
                        ChatActivity.this.emojiAnimationsOverlay.showAnimationForActionCell(chatActionCell3, tLRPC$Document, tLRPC$VideoSize);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didClickImage(ChatActionCell chatActionCell3) {
                        TLRPC$VideoSize tLRPC$VideoSize;
                        String str;
                        MessageObject messageObject = chatActionCell3.getMessageObject();
                        PhotoViewer photoViewer = PhotoViewer.getInstance();
                        ChatActivity chatActivity = ChatActivity.this;
                        photoViewer.setParentActivity(chatActivity, chatActivity.themeDelegate);
                        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 640);
                        if (chatActionCell3.getMessageObject().type == 24) {
                            StoryViewer orCreateStoryViewer = ChatActivity.this.getOrCreateStoryViewer();
                            ChatActivity chatActivity2 = ChatActivity.this;
                            orCreateStoryViewer.openFor(chatActivity2, chatActivity2.chatListView, chatActionCell3);
                        } else if (chatActionCell3.getMessageObject().type == 22) {
                            MessagesController messagesController = MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount);
                            if (messageObject.getId() < 0 && (str = messagesController.uploadingWallpaper) != null && TextUtils.equals(messageObject.messageOwner.action.wallpaper.uploadingImage, str)) {
                                messagesController.cancelUploadWallpaper();
                                ChatActivity.this.removeMessageObject(messageObject);
                            } else if (!chatActionCell3.hasButton()) {
                                ChatActivity.this.showChatThemeBottomSheet();
                            } else {
                                ThemePreviewActivity.showFor(ChatActivity.this, messageObject);
                            }
                        } else {
                            ArrayList<TLRPC$VideoSize> arrayList = messageObject.messageOwner.action.photo.video_sizes;
                            TLRPC$VideoSize tLRPC$VideoSize2 = null;
                            if (arrayList == null || arrayList.isEmpty()) {
                                tLRPC$VideoSize = null;
                            } else {
                                tLRPC$VideoSize2 = FileLoader.getClosestVideoSizeWithSize(messageObject.messageOwner.action.photo.video_sizes, 1000);
                                tLRPC$VideoSize = FileLoader.getEmojiMarkup(messageObject.messageOwner.action.photo.video_sizes);
                            }
                            if (chatActionCell3.getMessageObject().type != 21 || messageObject.isOutOwner()) {
                                if (tLRPC$VideoSize2 != null) {
                                    PhotoViewer.getInstance().openPhoto(tLRPC$VideoSize2.location, ImageLocation.getForPhoto(tLRPC$VideoSize2, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                                    if (chatActionCell3.getMessageObject().type == 21) {
                                        PhotoViewer.getInstance().setTitle(LocaleController.getString("SuggestedVideo", R.string.SuggestedVideo));
                                    }
                                } else if (closestPhotoSizeWithSize != null) {
                                    PhotoViewer.getInstance().openPhoto(closestPhotoSizeWithSize.location, ImageLocation.getForPhoto(closestPhotoSizeWithSize, messageObject.messageOwner.action.photo), ChatActivity.this.photoViewerProvider);
                                    if (chatActionCell3.getMessageObject().type == 21) {
                                        PhotoViewer.getInstance().setTitle(LocaleController.getString("SuggestedPhoto", R.string.SuggestedPhoto));
                                    }
                                } else {
                                    PhotoViewer.getInstance().openPhoto(messageObject, (ChatActivity) null, 0L, 0L, 0, ChatActivity.this.photoViewerProvider);
                                }
                            } else if (messageObject.settingAvatar) {
                            } else {
                                if (tLRPC$VideoSize != null) {
                                    PhotoUtilities.showAvatartConstructorForUpdateUserPhoto(ChatActivity.this, tLRPC$VideoSize);
                                    return;
                                }
                                ArrayList<Object> arrayList2 = new ArrayList<>();
                                ImageLocation.getForPhoto(tLRPC$VideoSize2, messageObject.messageOwner.action.photo);
                                FileLoader fileLoader = ChatActivity.this.getFileLoader();
                                File pathToAttach = tLRPC$VideoSize2 == null ? fileLoader.getPathToAttach(messageObject.messageOwner.action.photo) : fileLoader.getPathToAttach(tLRPC$VideoSize2);
                                File file = new File(FileLoader.getDirectory(4), pathToAttach.getName());
                                if (!pathToAttach.exists()) {
                                    if (!file.exists()) {
                                        return;
                                    }
                                    pathToAttach = file;
                                }
                                MediaController.PhotoEntry photoEntry = new MediaController.PhotoEntry(0, 0, 0L, pathToAttach.getAbsolutePath(), 0, false, 0, 0, 0L);
                                photoEntry.caption = ChatActivity.this.chatActivityEnterView.getFieldText();
                                photoEntry.isVideo = tLRPC$VideoSize2 != null;
                                arrayList2.add(photoEntry);
                                PhotoViewer.getInstance().openPhotoForSelect(arrayList2, 0, 1, false, new 1(messageObject, photoEntry), null);
                                if (photoEntry.isVideo) {
                                    PhotoViewer.getInstance().setTitle(LocaleController.getString(R.string.SuggestedVideo));
                                } else {
                                    PhotoViewer.getInstance().setTitle(LocaleController.getString(R.string.SuggestedPhoto));
                                }
                                ImageUpdater.AvatarFor avatarFor = new ImageUpdater.AvatarFor(ChatActivity.this.getUserConfig().getCurrentUser(), 1);
                                avatarFor.isVideo = tLRPC$VideoSize2 != null;
                                avatarFor.fromObject = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.dialog_id));
                                PhotoViewer.getInstance().setAvatarFor(avatarFor);
                            }
                        }
                    }

                    /* JADX INFO: Access modifiers changed from: package-private */
                    /* loaded from: classes3.dex */
                    public class 1 extends PhotoViewer.EmptyPhotoViewerProvider {
                        final /* synthetic */ MediaController.PhotoEntry val$entry;
                        final /* synthetic */ MessageObject val$message;

                        1(MessageObject messageObject, MediaController.PhotoEntry photoEntry) {
                            this.val$message = messageObject;
                            this.val$entry = photoEntry;
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC$FileLocation tLRPC$FileLocation, int i, boolean z) {
                            return ChatActivity.this.photoViewerProvider.getPlaceForPhoto(this.val$message, tLRPC$FileLocation, i, z);
                        }

                        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                        public void sendButtonPressed(int i, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
                            final MessageObject messageObject = this.val$message;
                            messageObject.settingAvatar = true;
                            MediaController.PhotoEntry photoEntry = this.val$entry;
                            if (photoEntry.imagePath != null || photoEntry.isVideo) {
                                PhotoUtilities.setImageAsAvatar(photoEntry, ChatActivity.this, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda0
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessageObject.this.settingAvatar = false;
                                    }
                                });
                                return;
                            }
                            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
                            TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                            tLRPC$TL_photos_updateProfilePhoto.id = tLRPC$TL_inputPhoto;
                            TLRPC$Photo tLRPC$Photo = this.val$message.messageOwner.action.photo;
                            tLRPC$TL_inputPhoto.id = tLRPC$Photo.id;
                            tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
                            tLRPC$TL_inputPhoto.file_reference = tLRPC$Photo.file_reference;
                            ConnectionsManager connectionsManager = ChatActivity.this.getConnectionsManager();
                            final MessageObject messageObject2 = this.val$message;
                            connectionsManager.sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda3
                                @Override // org.telegram.tgnet.RequestDelegate
                                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                    ChatActivity.ChatActivityAdapter.2.1.this.lambda$sendButtonPressed$3(messageObject2, tLObject, tLRPC$TL_error);
                                }
                            });
                        }

                        /* JADX INFO: Access modifiers changed from: private */
                        public /* synthetic */ void lambda$sendButtonPressed$3(final MessageObject messageObject, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda2
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatActivity.ChatActivityAdapter.2.1.this.lambda$sendButtonPressed$2(tLObject, messageObject);
                                }
                            });
                        }

                        /* JADX INFO: Access modifiers changed from: private */
                        public /* synthetic */ void lambda$sendButtonPressed$2(TLObject tLObject, MessageObject messageObject) {
                            if (tLObject instanceof TLRPC$TL_photos_photo) {
                                TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                                ChatActivity.this.getMessagesController().putUsers(tLRPC$TL_photos_photo.users, false);
                                TLRPC$User user = ChatActivity.this.getMessagesController().getUser(Long.valueOf(ChatActivity.this.getUserConfig().clientUserId));
                                if ((tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) && user != null) {
                                    PhotoUtilities.applyPhotoToUser(messageObject.messageOwner.action.photo, user, false);
                                    ChatActivity.this.getUserConfig().setCurrentUser(user);
                                    ChatActivity.this.getUserConfig().saveConfig(true);
                                    BulletinFactory.of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user), AndroidUtilities.replaceTags(LocaleController.getString("ApplyAvatarHintTitle", R.string.ApplyAvatarHintTitle)), AndroidUtilities.replaceSingleTag(LocaleController.getString("ApplyAvatarHint", R.string.ApplyAvatarHint), new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$2$1$$ExternalSyntheticLambda1
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            ChatActivity.ChatActivityAdapter.2.1.this.lambda$sendButtonPressed$1();
                                        }
                                    }), null).show();
                                }
                            }
                            messageObject.settingAvatar = false;
                        }

                        /* JADX INFO: Access modifiers changed from: private */
                        public /* synthetic */ void lambda$sendButtonPressed$1() {
                            Bundle bundle = new Bundle();
                            bundle.putLong("user_id", UserConfig.getInstance(((BaseFragment) ChatActivity.this).currentAccount).clientUserId);
                            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
                        }
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public BaseFragment getBaseFragment() {
                        return ChatActivity.this;
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public int getTopicId() {
                        return ChatActivity.this.getTopicId();
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public boolean didLongPress(ChatActionCell chatActionCell3, float f, float f2) {
                        if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                            return false;
                        }
                        return ChatActivity.this.createMenu(chatActionCell3, false, false, f, f2);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void needOpenUserProfile(long j) {
                        ChatActivity.this.openUserProfile(j);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didPressReplyMessage(ChatActionCell chatActionCell3, int i2) {
                        MessageObject messageObject = chatActionCell3.getMessageObject();
                        ChatActivity.this.scrollToMessageId(i2, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
                    }
                });
                chatActionCell = chatActionCell2;
            } else if (i == 2) {
                chatActionCell = new ChatUnreadCell(this.mContext, ChatActivity.this.themeDelegate);
            } else if (i == 3) {
                BotHelpCell botHelpCell = new BotHelpCell(this.mContext, ChatActivity.this.themeDelegate);
                botHelpCell.setDelegate(new BotHelpCell.BotHelpCellDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda0
                    @Override // org.telegram.ui.Cells.BotHelpCell.BotHelpCellDelegate
                    public final void didPressUrl(String str) {
                        ChatActivity.ChatActivityAdapter.this.lambda$onCreateViewHolder$0(str);
                    }
                });
                chatActionCell = botHelpCell;
            } else if (i == 4) {
                Context context = this.mContext;
                ChatActivity chatActivity = ChatActivity.this;
                chatActionCell = new ChatLoadingCell(context, chatActivity.contentView, chatActivity.themeDelegate);
            }
            chatActionCell.setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder(chatActionCell);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateViewHolder$0(String str) {
            if (str.startsWith("@")) {
                ChatActivity.this.getMessagesController().openByUserName(str.substring(1), ChatActivity.this, 0);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                DialogsActivity dialogsActivity = new DialogsActivity(null);
                dialogsActivity.setSearchString(str);
                ChatActivity.this.presentFragment(dialogsActivity);
            } else if (!str.startsWith("/")) {
                ChatActivity.this.processExternalUrl(0, str, null, null, false);
            } else {
                ChatActivity.this.chatActivityEnterView.setCommand(null, str, false, false);
                if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                    ChatActivity.this.hideFieldPanel(false);
                }
            }
        }

        /* JADX WARN: Code restructure failed: missing block: B:150:0x0272, code lost:
            if (r4.getSenderId() == r3.getSenderId()) goto L122;
         */
        /* JADX WARN: Code restructure failed: missing block: B:151:0x0274, code lost:
            r9 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:168:0x02c6, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r4) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L122;
         */
        /* JADX WARN: Code restructure failed: missing block: B:215:0x036d, code lost:
            if (r4.getSenderId() == r3.getSenderId()) goto L183;
         */
        /* JADX WARN: Code restructure failed: missing block: B:216:0x036f, code lost:
            r14 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:233:0x03c1, code lost:
            if (org.telegram.messenger.MessageObject.getPeerId(r4) == org.telegram.messenger.MessageObject.getPeerId(r3.messageOwner.fwd_from.from_id)) goto L183;
         */
        /* JADX WARN: Removed duplicated region for block: B:109:0x01c7  */
        /* JADX WARN: Removed duplicated region for block: B:112:0x01e3  */
        /* JADX WARN: Removed duplicated region for block: B:121:0x0210  */
        /* JADX WARN: Removed duplicated region for block: B:173:0x02d0  */
        /* JADX WARN: Removed duplicated region for block: B:238:0x03cf  */
        /* JADX WARN: Removed duplicated region for block: B:247:0x03ef  */
        /* JADX WARN: Removed duplicated region for block: B:249:0x03f2  */
        /* JADX WARN: Removed duplicated region for block: B:253:0x03fb  */
        /* JADX WARN: Removed duplicated region for block: B:259:0x0422  */
        /* JADX WARN: Removed duplicated region for block: B:260:0x0424  */
        /* JADX WARN: Removed duplicated region for block: B:263:0x0431  */
        /* JADX WARN: Removed duplicated region for block: B:269:0x0447  */
        /* JADX WARN: Removed duplicated region for block: B:272:0x0455  */
        /* JADX WARN: Removed duplicated region for block: B:292:0x04c2  */
        /* JADX WARN: Removed duplicated region for block: B:335:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
        /* JADX WARN: Removed duplicated region for block: B:72:0x00ef  */
        /* JADX WARN: Removed duplicated region for block: B:83:0x0136  */
        /* JADX WARN: Removed duplicated region for block: B:89:0x0156  */
        /* JADX WARN: Removed duplicated region for block: B:90:0x0158  */
        /* JADX WARN: Removed duplicated region for block: B:93:0x015d  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
            boolean z;
            boolean z2;
            int i2;
            int i3;
            boolean z3;
            boolean z4;
            boolean z5;
            boolean z6;
            int itemViewType;
            boolean z7;
            ChatActivity chatActivity;
            int indexOf;
            boolean z8;
            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
            String str;
            String str2;
            int i4;
            int i5;
            TLRPC$ChatFull tLRPC$ChatFull;
            TLRPC$Chat tLRPC$Chat;
            if (i == this.botInfoRow || i == this.botInfoEmptyRow) {
                BotHelpCell botHelpCell = (BotHelpCell) viewHolder.itemView;
                if (!UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                    TLObject tLObject = null;
                    TLRPC$BotInfo tLRPC$BotInfo = ChatActivity.this.botInfo.size() != 0 ? (TLRPC$BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id) : null;
                    String str3 = tLRPC$BotInfo != null ? tLRPC$BotInfo.description : null;
                    if (tLRPC$BotInfo != null && (tLObject = tLRPC$BotInfo.description_document) == null) {
                        tLObject = tLRPC$BotInfo.description_photo;
                    }
                    botHelpCell.setText(true, str3, tLObject, tLRPC$BotInfo);
                } else {
                    botHelpCell.setText(false, LocaleController.getString("RepliesChatInfo", R.string.RepliesChatInfo));
                }
                ChatActivity.this.updateBotHelpCellClick(botHelpCell);
            } else if (i == this.loadingDownRow || i == this.loadingUpRow) {
                ((ChatLoadingCell) viewHolder.itemView).setProgressVisible(ChatActivity.this.loadsCount > 1);
            } else {
                int i6 = this.messagesStartRow;
                if (i < i6 || i >= this.messagesEndRow) {
                    return;
                }
                ArrayList<MessageObject> arrayList = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
                MessageObject messageObject = arrayList.get(i - i6);
                View view = viewHolder.itemView;
                if (view instanceof ChatMessageCell) {
                    final ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                    MessageObject.GroupedMessages validGroupedMessage = ChatActivity.this.getValidGroupedMessage(messageObject);
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatMessageCell.isChat = chatActivity2.currentChat != null || UserObject.isUserSelf(chatActivity2.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser);
                    ChatActivity chatActivity3 = ChatActivity.this;
                    TLRPC$User tLRPC$User = chatActivity3.currentUser;
                    chatMessageCell.isBot = tLRPC$User != null && tLRPC$User.bot;
                    chatMessageCell.isMegagroup = ChatObject.isChannel(chatActivity3.currentChat) && ChatActivity.this.currentChat.megagroup;
                    chatMessageCell.isForum = ChatObject.isForum(ChatActivity.this.currentChat);
                    if (ChatObject.isForum(ChatActivity.this.currentChat)) {
                        ChatActivity chatActivity4 = ChatActivity.this;
                        if (chatActivity4.isTopic && chatActivity4.getTopicId() == 1) {
                            z = true;
                            chatMessageCell.isForumGeneral = z;
                            chatMessageCell.isThreadChat = ChatActivity.this.threadMessageId == 0 || (chatMessageCell.isForum && ChatActivity.this.isTopic);
                            if (ChatActivity.this.chatMode != 1 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                tLRPC$Chat = ChatActivity.this.currentChat;
                                if (tLRPC$Chat.has_link && !tLRPC$Chat.megagroup) {
                                    z2 = true;
                                    chatMessageCell.hasDiscussion = z2;
                                    chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                                    chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                                    chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                                    chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                                    if (validGroupedMessage == null) {
                                        MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(messageObject);
                                        if (groupedMessagePosition != null) {
                                            if (validGroupedMessage.isDocuments) {
                                                i2 = validGroupedMessage.posArray.indexOf(groupedMessagePosition) + i + 1;
                                                i4 = (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(groupedMessagePosition);
                                                z3 = false;
                                                z4 = false;
                                                z5 = false;
                                                z6 = false;
                                            } else {
                                                if ((groupedMessagePosition.flags & 4) != 0) {
                                                    i5 = validGroupedMessage.posArray.indexOf(groupedMessagePosition) + i + 1;
                                                    z5 = false;
                                                    z6 = false;
                                                } else {
                                                    i5 = -100;
                                                    z5 = true;
                                                    z6 = true;
                                                }
                                                if ((groupedMessagePosition.flags & 8) != 0) {
                                                    i4 = (i - validGroupedMessage.posArray.size()) + validGroupedMessage.posArray.indexOf(groupedMessagePosition);
                                                    i2 = i5;
                                                    z3 = false;
                                                    z4 = false;
                                                } else {
                                                    i2 = i5;
                                                    z3 = true;
                                                    z4 = true;
                                                }
                                            }
                                            i3 = i4;
                                        } else {
                                            z3 = false;
                                            z4 = false;
                                            i2 = -100;
                                            z5 = false;
                                            z6 = false;
                                        }
                                        i4 = -100;
                                        i3 = i4;
                                    } else {
                                        i2 = i + 1;
                                        i3 = i - 1;
                                        z3 = false;
                                        z4 = false;
                                        z5 = false;
                                        z6 = false;
                                    }
                                    int itemViewType2 = getItemViewType(i3);
                                    itemViewType = getItemViewType(i2);
                                    if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && itemViewType2 == viewHolder.getItemViewType()) {
                                        MessageObject messageObject2 = arrayList.get(i3 - this.messagesStartRow);
                                        z4 = messageObject2.isOutOwner() != messageObject.isOutOwner() && Math.abs(messageObject2.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                        if (z4) {
                                            if (messageObject.isImportedForward() || messageObject2.isImportedForward()) {
                                                if (messageObject.isImportedForward() && messageObject2.isImportedForward() && Math.abs(messageObject2.messageOwner.fwd_from.date - messageObject.messageOwner.fwd_from.date) <= 300) {
                                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject2.messageOwner.fwd_from;
                                                    String str4 = tLRPC$MessageFwdHeader2.from_name;
                                                    if (str4 != null && (str2 = messageObject.messageOwner.fwd_from.from_name) != null) {
                                                        z4 = str4.equals(str2);
                                                    } else {
                                                        TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader2.from_id;
                                                        if (tLRPC$Peer != null) {
                                                            if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                            }
                                                        }
                                                    }
                                                }
                                                z4 = false;
                                            } else {
                                                ChatActivity chatActivity5 = ChatActivity.this;
                                                if (chatActivity5.currentChat != null) {
                                                    long fromChatId = messageObject2.getFromChatId();
                                                    boolean z9 = fromChatId == messageObject.getFromChatId();
                                                    if (z3 || !z9 || fromChatId >= 0 || !ChatActivity.this.currentChat.megagroup) {
                                                        z4 = z9;
                                                    }
                                                    z4 = false;
                                                } else if (UserObject.isUserSelf(chatActivity5.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                                    if (!messageObject.isPrivateForward()) {
                                                        if (!messageObject2.isPrivateForward()) {
                                                        }
                                                    }
                                                    z4 = false;
                                                }
                                            }
                                        }
                                    }
                                    if (itemViewType == viewHolder.getItemViewType()) {
                                        MessageObject messageObject3 = arrayList.get(i2 - this.messagesStartRow);
                                        z5 = !(messageObject3.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup) && messageObject3.isOutOwner() == messageObject.isOutOwner() && Math.abs(messageObject3.messageOwner.date - messageObject.messageOwner.date) <= 300;
                                        if (z5) {
                                            if (messageObject.isImportedForward() || messageObject3.isImportedForward()) {
                                                if (messageObject.isImportedForward() && messageObject3.isImportedForward() && Math.abs(messageObject.messageOwner.fwd_from.date - messageObject3.messageOwner.fwd_from.date) <= 300) {
                                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader3 = messageObject3.messageOwner.fwd_from;
                                                    String str5 = tLRPC$MessageFwdHeader3.from_name;
                                                    if (str5 != null && (str = messageObject.messageOwner.fwd_from.from_name) != null) {
                                                        z5 = str5.equals(str);
                                                    } else {
                                                        TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader3.from_id;
                                                        if (tLRPC$Peer2 != null) {
                                                            if (messageObject.messageOwner.fwd_from.from_id != null) {
                                                            }
                                                        }
                                                    }
                                                }
                                                z5 = false;
                                            } else {
                                                ChatActivity chatActivity6 = ChatActivity.this;
                                                if (chatActivity6.currentChat != null) {
                                                    long fromChatId2 = messageObject3.getFromChatId();
                                                    boolean z10 = (fromChatId2 != messageObject.getFromChatId() || messageObject.isImportedForward() || messageObject3.isImportedForward()) ? false : true;
                                                    if (z6 || !z10 || fromChatId2 >= 0 || !ChatActivity.this.currentChat.megagroup) {
                                                        z5 = z10;
                                                    }
                                                    z5 = false;
                                                } else if (UserObject.isUserSelf(chatActivity6.currentUser) || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                                                    if (!messageObject.isPrivateForward()) {
                                                        if (!messageObject3.isPrivateForward()) {
                                                        }
                                                    }
                                                    z5 = false;
                                                }
                                            }
                                        }
                                    }
                                    if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup && messageObject.getFromChatId() <= 0 && (tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from) != null && (tLRPC$MessageFwdHeader.saved_from_peer instanceof TLRPC$TL_peerChannel)) {
                                        if (!z6) {
                                            z5 = false;
                                        }
                                        if (!z3) {
                                            z7 = false;
                                            z4 = false;
                                            messageObject.updateTranslation(z7);
                                            if (validGroupedMessage != null) {
                                                int i7 = 0;
                                                while (i7 < validGroupedMessage.messages.size()) {
                                                    validGroupedMessage.messages.get(i7).updateTranslation(z7);
                                                    i7++;
                                                    z7 = false;
                                                }
                                            }
                                            chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z5);
                                            chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                            chatActivity = ChatActivity.this;
                                            if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                                chatActivity.startMessageUnselect();
                                            }
                                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                            if (indexOf != -1) {
                                                if (messageObject.type == 5 && ChatActivity.this.instantCameraView != null && ChatActivity.this.instantCameraView.getTextureView() != null) {
                                                    chatMessageCell.getViewTreeObserver().addOnPreDrawListener(new 3(chatMessageCell));
                                                } else if (!messageObject.isAnyKindOfSticker() || messageObject.isAnimatedEmojiStickers()) {
                                                    z8 = false;
                                                    if (!z8 || ChatActivity.this.chatListItemAnimator == null) {
                                                        ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                                        ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                                        ChatActivity.this.chatActivityEnterView.hideTopView(true);
                                                    }
                                                } else {
                                                    chatMessageCell.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4
                                                        @Override // android.view.ViewTreeObserver.OnPreDrawListener
                                                        public boolean onPreDraw() {
                                                            chatMessageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                                                            MessageObject.SendAnimationData sendAnimationData = chatMessageCell.getMessageObject().sendAnimationData;
                                                            if (sendAnimationData == null) {
                                                                return true;
                                                            }
                                                            ChatActivity.this.animateSendingViews.add(chatMessageCell);
                                                            ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                                            float imageWidth = sendAnimationData.width / photoImage.getImageWidth();
                                                            chatMessageCell.getTransitionParams().ignoreAlpha = true;
                                                            chatMessageCell.getLocationInWindow(r5);
                                                            int[] iArr = {0, (int) (iArr[1] - chatMessageCell.getTranslationY())};
                                                            if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                                iArr[1] = iArr[1] + AndroidUtilities.dp(48.0f);
                                                            }
                                                            AnimatorSet animatorSet = new AnimatorSet();
                                                            AnimationProperties.FloatProperty<MessageObject.SendAnimationData> floatProperty = new AnimationProperties.FloatProperty<MessageObject.SendAnimationData>(this, "p1") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.1
                                                                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                public void setValue(MessageObject.SendAnimationData sendAnimationData2, float f) {
                                                                    sendAnimationData2.currentScale = f;
                                                                }

                                                                @Override // android.util.Property
                                                                public Float get(MessageObject.SendAnimationData sendAnimationData2) {
                                                                    return Float.valueOf(sendAnimationData2.currentScale);
                                                                }
                                                            };
                                                            AnimationProperties.FloatProperty<MessageObject.SendAnimationData> floatProperty2 = new AnimationProperties.FloatProperty<MessageObject.SendAnimationData>("p2") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.2
                                                                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                public void setValue(MessageObject.SendAnimationData sendAnimationData2, float f) {
                                                                    sendAnimationData2.currentX = f;
                                                                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                                                                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                                                                    }
                                                                }

                                                                @Override // android.util.Property
                                                                public Float get(MessageObject.SendAnimationData sendAnimationData2) {
                                                                    return Float.valueOf(sendAnimationData2.currentX);
                                                                }
                                                            };
                                                            AnimationProperties.FloatProperty<MessageObject.SendAnimationData> floatProperty3 = new AnimationProperties.FloatProperty<MessageObject.SendAnimationData>("p3") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.3
                                                                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                public void setValue(MessageObject.SendAnimationData sendAnimationData2, float f) {
                                                                    sendAnimationData2.currentY = f;
                                                                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                                                                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                                                                    }
                                                                }

                                                                @Override // android.util.Property
                                                                public Float get(MessageObject.SendAnimationData sendAnimationData2) {
                                                                    return Float.valueOf(sendAnimationData2.currentY);
                                                                }
                                                            };
                                                            AnimatorSet animatorSet2 = new AnimatorSet();
                                                            animatorSet2.playTogether(ObjectAnimator.ofFloat(sendAnimationData, floatProperty, imageWidth, 1.0f), ObjectAnimator.ofFloat(sendAnimationData, floatProperty3, sendAnimationData.y, iArr[1] + photoImage.getCenterY()));
                                                            animatorSet2.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                                                            ObjectAnimator ofFloat = ObjectAnimator.ofFloat(sendAnimationData, floatProperty2, sendAnimationData.x, iArr[0] + photoImage.getCenterX());
                                                            ofFloat.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                                                            animatorSet.playTogether(ofFloat, animatorSet2);
                                                            animatorSet.setDuration(250L);
                                                            animatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.4
                                                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                                                public void onAnimationEnd(Animator animator) {
                                                                    ChatActivity.this.animateSendingViews.remove(chatMessageCell);
                                                                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                                                                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                                                                        ChatActivity.this.chatListView.invalidate();
                                                                    }
                                                                    chatMessageCell.setAlpha(1.0f);
                                                                    chatMessageCell.getTransitionParams().ignoreAlpha = false;
                                                                }
                                                            });
                                                            animatorSet.start();
                                                            AnimationProperties.FloatProperty<MessageObject.SendAnimationData> floatProperty4 = new AnimationProperties.FloatProperty<MessageObject.SendAnimationData>("alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.5
                                                                @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                                                                public void setValue(MessageObject.SendAnimationData sendAnimationData2, float f) {
                                                                    sendAnimationData2.timeAlpha = f;
                                                                    if (((BaseFragment) ChatActivity.this).fragmentView != null) {
                                                                        ((BaseFragment) ChatActivity.this).fragmentView.invalidate();
                                                                    }
                                                                }

                                                                @Override // android.util.Property
                                                                public Float get(MessageObject.SendAnimationData sendAnimationData2) {
                                                                    return Float.valueOf(sendAnimationData2.timeAlpha);
                                                                }
                                                            };
                                                            AnimatorSet animatorSet3 = new AnimatorSet();
                                                            animatorSet3.playTogether(ObjectAnimator.ofFloat(sendAnimationData, floatProperty4, 0.0f, 1.0f));
                                                            animatorSet3.setDuration(100L);
                                                            animatorSet3.setStartDelay(150L);
                                                            animatorSet3.setInterpolator(new DecelerateInterpolator());
                                                            animatorSet3.start();
                                                            return true;
                                                        }
                                                    });
                                                }
                                                z8 = true;
                                                if (!z8) {
                                                }
                                                ChatActivity.this.animatingMessageObjects.remove(indexOf);
                                                ChatActivity.this.chatActivityEnterView.startMessageTransition();
                                                ChatActivity.this.chatActivityEnterView.hideTopView(true);
                                            }
                                            if (ChatActivity.this.animatingDocuments.isEmpty() || !ChatActivity.this.animatingDocuments.containsKey(messageObject.getDocument())) {
                                                return;
                                            }
                                            ChatActivity.this.animatingDocuments.remove(messageObject.getDocument());
                                            if (ChatActivity.this.chatListItemAnimator != null) {
                                                ChatActivity.this.chatListItemAnimator.onGreetingStickerTransition(viewHolder, ChatActivity.this.greetingsViewContainer);
                                                return;
                                            }
                                            return;
                                        }
                                    }
                                    z7 = false;
                                    messageObject.updateTranslation(z7);
                                    if (validGroupedMessage != null) {
                                    }
                                    chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z5);
                                    chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                                    chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                                    chatActivity = ChatActivity.this;
                                    if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                    }
                                    indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                                    if (indexOf != -1) {
                                    }
                                    if (ChatActivity.this.animatingDocuments.isEmpty()) {
                                        return;
                                    }
                                    return;
                                }
                            }
                            z2 = false;
                            chatMessageCell.hasDiscussion = z2;
                            chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                            chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                            chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                            chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                            if (validGroupedMessage == null) {
                            }
                            int itemViewType22 = getItemViewType(i3);
                            itemViewType = getItemViewType(i2);
                            if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                                MessageObject messageObject22 = arrayList.get(i3 - this.messagesStartRow);
                                if (messageObject22.isOutOwner() != messageObject.isOutOwner()) {
                                }
                                if (z4) {
                                }
                            }
                            if (itemViewType == viewHolder.getItemViewType()) {
                            }
                            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                if (!z6) {
                                }
                                if (!z3) {
                                }
                            }
                            z7 = false;
                            messageObject.updateTranslation(z7);
                            if (validGroupedMessage != null) {
                            }
                            chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z5);
                            chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                            chatActivity = ChatActivity.this;
                            if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                            }
                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                            if (indexOf != -1) {
                            }
                            if (ChatActivity.this.animatingDocuments.isEmpty()) {
                            }
                        }
                    }
                    z = false;
                    chatMessageCell.isForumGeneral = z;
                    chatMessageCell.isThreadChat = ChatActivity.this.threadMessageId == 0 || (chatMessageCell.isForum && ChatActivity.this.isTopic);
                    if (ChatActivity.this.chatMode != 1) {
                        tLRPC$Chat = ChatActivity.this.currentChat;
                        if (tLRPC$Chat.has_link) {
                            z2 = true;
                            chatMessageCell.hasDiscussion = z2;
                            chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                            chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                            chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                            chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                            if (validGroupedMessage == null) {
                            }
                            int itemViewType222 = getItemViewType(i3);
                            itemViewType = getItemViewType(i2);
                            if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                            }
                            if (itemViewType == viewHolder.getItemViewType()) {
                            }
                            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                            }
                            z7 = false;
                            messageObject.updateTranslation(z7);
                            if (validGroupedMessage != null) {
                            }
                            chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z5);
                            chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                            chatActivity = ChatActivity.this;
                            if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                            }
                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                            if (indexOf != -1) {
                            }
                            if (ChatActivity.this.animatingDocuments.isEmpty()) {
                            }
                        }
                    }
                    z2 = false;
                    chatMessageCell.hasDiscussion = z2;
                    chatMessageCell.isPinned = ChatActivity.this.chatMode != 0 && (ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId())) || !(validGroupedMessage == null || validGroupedMessage.messages.isEmpty() || !ChatActivity.this.pinnedMessageObjects.containsKey(Integer.valueOf(validGroupedMessage.messages.get(0).getId()))));
                    chatMessageCell.linkedChatId = (ChatActivity.this.chatMode != 1 || (tLRPC$ChatFull = ChatActivity.this.chatInfo) == null) ? 0L : tLRPC$ChatFull.linked_chat_id;
                    chatMessageCell.isRepliesChat = UserObject.isReplyUser(ChatActivity.this.currentUser);
                    chatMessageCell.isPinnedChat = ChatActivity.this.chatMode != 2;
                    if (validGroupedMessage == null) {
                    }
                    int itemViewType2222 = getItemViewType(i3);
                    itemViewType = getItemViewType(i2);
                    if (!(messageObject.messageOwner.reply_markup instanceof TLRPC$TL_replyInlineMarkup)) {
                    }
                    if (itemViewType == viewHolder.getItemViewType()) {
                    }
                    if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                    }
                    z7 = false;
                    messageObject.updateTranslation(z7);
                    if (validGroupedMessage != null) {
                    }
                    chatMessageCell.setMessageObject(messageObject, validGroupedMessage, z4, z5);
                    chatMessageCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                    chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && messageObject.getId() == ChatActivity.this.highlightMessageId);
                    chatActivity = ChatActivity.this;
                    if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                    }
                    indexOf = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                    if (indexOf != -1) {
                    }
                    if (ChatActivity.this.animatingDocuments.isEmpty()) {
                    }
                } else if (view instanceof ChatActionCell) {
                    ChatActionCell chatActionCell = (ChatActionCell) view;
                    chatActionCell.setMessageObject(messageObject);
                    chatActionCell.setAlpha(1.0f);
                    chatActionCell.setSpoilersSuppressed(ChatActivity.this.chatListView.getScrollState() != 0);
                } else if (view instanceof ChatUnreadCell) {
                    ((ChatUnreadCell) view).setText(LocaleController.getString("UnreadMessages", R.string.UnreadMessages));
                    if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                        ChatActivity.this.createUnreadMessageAfterId = 0;
                    }
                }
            }
        }

        /* loaded from: classes3.dex */
        class 3 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            3(ChatMessageCell chatMessageCell) {
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                if (pipRoundVideoView != null) {
                    pipRoundVideoView.showTemporary(true);
                }
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                ImageReceiver photoImage = this.val$messageCell.getPhotoImage();
                float imageWidth = photoImage.getImageWidth();
                org.telegram.ui.Components.Rect cameraRect = ChatActivity.this.instantCameraView.getCameraRect();
                float f = imageWidth / cameraRect.width;
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.setAlpha(0.0f);
                this.val$messageCell.setTimeAlpha(0.0f);
                this.val$messageCell.getLocationOnScreen(r5);
                int[] iArr = {(int) (iArr[0] + (photoImage.getImageX() - this.val$messageCell.getAnimationOffsetX())), (int) (iArr[1] + (photoImage.getImageY() - this.val$messageCell.getTranslationY()))};
                final InstantCameraView.InstantViewCameraContainer cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                cameraContainer.setPivotX(0.0f);
                cameraContainer.setPivotY(0.0f);
                AnimatorSet animatorSet = new AnimatorSet();
                cameraContainer.setImageReceiver(photoImage);
                ChatActivity.this.instantCameraView.cancelBlur();
                AnimatorSet animatorSet2 = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, f), ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, f), ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_Y, iArr[1] - cameraRect.y), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, 0.0f), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, 0.0f));
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ObjectAnimator ofFloat = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_X, iArr[0] - cameraRect.x);
                ofFloat.setInterpolator(CubicBezierInterpolator.DEFAULT);
                animatorSet2.playTogether(ofFloat, animatorSet);
                animatorSet2.setStartDelay(120L);
                animatorSet2.setDuration(180L);
                if (ChatActivity.this.instantCameraView != null) {
                    ChatActivity.this.instantCameraView.setIsMessageTransition(true);
                }
                animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animator) {
                        3.this.val$messageCell.setAlpha(1.0f);
                        3.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                        AnimationProperties.FloatProperty<ChatMessageCell> floatProperty = new AnimationProperties.FloatProperty<ChatMessageCell>(this, "alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.1
                            @Override // org.telegram.ui.Components.AnimationProperties.FloatProperty
                            public void setValue(ChatMessageCell chatMessageCell, float f2) {
                                chatMessageCell.setTimeAlpha(f2);
                            }

                            @Override // android.util.Property
                            public Float get(ChatMessageCell chatMessageCell) {
                                return Float.valueOf(chatMessageCell.getTimeAlpha());
                            }
                        };
                        AnimatorSet animatorSet3 = new AnimatorSet();
                        animatorSet3.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(3.this.val$messageCell, floatProperty, 1.0f));
                        animatorSet3.setDuration(100L);
                        animatorSet3.setInterpolator(new DecelerateInterpolator());
                        animatorSet3.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3.1.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animator2) {
                                if (ChatActivity.this.instantCameraView != null) {
                                    ChatActivity.this.instantCameraView.setIsMessageTransition(false);
                                    ChatActivity.this.instantCameraView.hideCamera(true);
                                    ChatActivity.this.instantCameraView.setVisibility(4);
                                }
                            }
                        });
                        animatorSet3.start();
                    }
                });
                animatorSet2.start();
                return true;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int i) {
            if (ChatActivity.this.clearingHistory && i == this.botInfoEmptyRow) {
                return 3;
            }
            int i2 = this.messagesStartRow;
            if (i < i2 || i >= this.messagesEndRow) {
                return i == this.botInfoRow ? 3 : 4;
            }
            return (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).get(i - i2).contentType;
        }

        /* JADX WARN: Removed duplicated region for block: B:83:0x01a2  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void onViewAttachedToWindow(RecyclerView.ViewHolder viewHolder) {
            TLRPC$Message tLRPC$Message;
            boolean z;
            boolean z2;
            ChatActivity chatActivity;
            String stickerEmoji;
            MessagesController.EmojiSound emojiSound;
            View view = viewHolder.itemView;
            if ((view instanceof ChatMessageCell) || (view instanceof ChatActionCell)) {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            View view2 = viewHolder.itemView;
            if (view2 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) view2;
                MessageObject messageObject = chatMessageCell.getMessageObject();
                chatMessageCell.showHintButton(true, false, -1);
                if (ChatActivity.this.hintMessageObject != null && ChatActivity.this.hintMessageObject.equals(messageObject)) {
                    chatMessageCell.showHintButton(false, false, ChatActivity.this.hintMessageType);
                }
                if (messageObject.isAnimatedEmoji() && (stickerEmoji = messageObject.getStickerEmoji()) != null && (emojiSound = ChatActivity.this.getMessagesController().emojiSounds.get(stickerEmoji.replace("️", ""))) != null) {
                    ChatActivity.this.getMediaController().playEmojiSound(ChatActivity.this.getAccountInstance(), stickerEmoji, emojiSound, true);
                }
                if (messageObject.updateTranslation(false)) {
                    chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                } else {
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    if (currentMessagesGroup != null) {
                        for (int i = 0; i < currentMessagesGroup.messages.size(); i++) {
                            currentMessagesGroup.messages.get(i).updateTranslation();
                        }
                    }
                }
                if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    chatMessageCell.setCheckBoxVisible(ChatActivity.this.threadMessageObjects == null || !ChatActivity.this.threadMessageObjects.contains(messageObject), false);
                    int i2 = messageObject.getDialogId() == ChatActivity.this.dialog_id ? 0 : 1;
                    if (ChatActivity.this.selectedMessagesIds[i2].indexOfKey(messageObject.getId()) >= 0) {
                        ChatActivity.this.setCellSelectionBackground(messageObject, chatMessageCell, i2, false);
                        z = true;
                    } else {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, false);
                        z = false;
                    }
                    z2 = true;
                } else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setChecked(false, false, false);
                    chatMessageCell.setCheckBoxVisible(false, false);
                    z = false;
                    z2 = false;
                }
                chatMessageCell.setCheckPressed(!z2, z2 && z);
                if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                    if (ChatActivity.this.getMediaDataController().isMessageFound(messageObject.getId(), messageObject.getDialogId() == ChatActivity.this.mergeDialogId) && ChatActivity.this.getMediaDataController().getLastSearchQuery() != null) {
                        chatMessageCell.setHighlightedText(ChatActivity.this.getMediaDataController().getLastSearchQuery());
                        if (((BaseFragment) ChatActivity.this).inPreviewMode || !chatMessageCell.isHighlighted()) {
                            chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId);
                            chatActivity = ChatActivity.this;
                            if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                                chatActivity.startMessageUnselect();
                            }
                        }
                    }
                }
                chatMessageCell.setHighlightedText(null);
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                }
                chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId == Integer.MAX_VALUE && chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId);
                chatActivity = ChatActivity.this;
                if (chatActivity.highlightMessageId != Integer.MAX_VALUE) {
                }
            }
            int adapterPosition = viewHolder.getAdapterPosition();
            int i3 = this.messagesStartRow;
            if (adapterPosition < i3 || adapterPosition >= this.messagesEndRow) {
                return;
            }
            MessageObject messageObject2 = (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).get(adapterPosition - i3);
            View view3 = viewHolder.itemView;
            if (messageObject2 == null || (tLRPC$Message = messageObject2.messageOwner) == null || !tLRPC$Message.media_unread || !tLRPC$Message.mentioned) {
                return;
            }
            if (!((BaseFragment) ChatActivity.this).inPreviewMode && ChatActivity.this.chatMode == 0 && !messageObject2.isVoice() && !messageObject2.isRoundVideo()) {
                ChatActivity.access$21110(ChatActivity.this);
                if (ChatActivity.this.newMentionsCount <= 0) {
                    ChatActivity.this.newMentionsCount = 0;
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                } else {
                    ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                }
                ChatActivity.this.getMessagesController().markMentionMessageAsRead(messageObject2.getId(), ChatObject.isChannel(ChatActivity.this.currentChat) ? ChatActivity.this.currentChat.id : 0L, ChatActivity.this.dialog_id);
                messageObject2.setContentIsRead();
            }
            if (view3 instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell2 = (ChatMessageCell) view3;
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    chatMessageCell2.setHighlighted(true);
                } else {
                    chatMessageCell2.setHighlightedAnimated();
                }
            }
        }

        public void updateRowAtPosition(int i) {
            int i2;
            if (ChatActivity.this.chatLayoutManager == null || this.isFrozen) {
                return;
            }
            int i3 = 0;
            if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                int i4 = 0;
                while (true) {
                    if (i4 >= childCount) {
                        break;
                    }
                    View childAt = ChatActivity.this.chatListView.getChildAt(i4);
                    if ((childAt instanceof ChatMessageCell) && ((ChatMessageCell) childAt).getMessageObject() == ChatActivity.this.unreadMessageObject) {
                        ChatActivity chatActivity = ChatActivity.this;
                        if (chatActivity.messages.indexOf(chatActivity.unreadMessageObject) >= 0) {
                            int i5 = this.messagesStartRow;
                            ChatActivity chatActivity2 = ChatActivity.this;
                            i2 = i5 + chatActivity2.messages.indexOf(chatActivity2.unreadMessageObject);
                            i3 = ChatActivity.this.getScrollingOffsetForView(childAt);
                        }
                    } else {
                        i4++;
                    }
                }
            }
            i2 = -1;
            notifyItemChanged(i);
            if (i2 != -1) {
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(i2, i3);
            }
        }

        public void invalidateRowWithMessageObject(MessageObject messageObject) {
            int childCount = ChatActivity.this.chatListView.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childAt = ChatActivity.this.chatListView.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    if (chatMessageCell.getMessageObject() == messageObject) {
                        chatMessageCell.invalidate();
                        return;
                    }
                }
            }
        }

        public View updateRowWithMessageObject(MessageObject messageObject, boolean z, boolean z2) {
            if (z) {
                int childCount = ChatActivity.this.chatListView.getChildCount();
                for (int i = 0; i < childCount; i++) {
                    View childAt = ChatActivity.this.chatListView.getChildAt(i);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.getMessageObject() == messageObject && !chatMessageCell.isAdminLayoutChanged()) {
                            chatMessageCell.setMessageObject(messageObject, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            return chatMessageCell;
                        }
                    }
                }
            }
            int indexOf = (this.isFrozen ? this.frozenMessages : ChatActivity.this.messages).indexOf(messageObject);
            if (indexOf == -1) {
                return null;
            }
            if (z2) {
                messageObject.stableId = ChatActivity.access$47308();
                notifyDataSetChanged(true);
            } else {
                updateRowAtPosition(indexOf + this.messagesStartRow);
            }
            return null;
        }

        /* JADX WARN: Can't wrap try/catch for region: R(13:1|(1:3)|(2:5|(10:7|(1:9)|10|11|12|13|(2:14|(2:16|(1:18)(3:19|20|(2:22|(1:26)(0))(0)))(1:39))|38|27|(1:37)(2:33|34)))|43|10|11|12|13|(3:14|(0)(0)|18)|38|27|(2:29|31)|37) */
        /* JADX WARN: Code restructure failed: missing block: B:15:0x0055, code lost:
            r7 = move-exception;
         */
        /* JADX WARN: Code restructure failed: missing block: B:16:0x0056, code lost:
            org.telegram.messenger.FileLog.e(r7);
         */
        /* JADX WARN: Removed duplicated region for block: B:20:0x0066  */
        /* JADX WARN: Removed duplicated region for block: B:43:0x0087 A[EDGE_INSN: B:43:0x0087->B:30:0x0087 ?: BREAK  , SYNTHETIC] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void notifyDataSetChanged(boolean z) {
            int size;
            boolean z2;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify data set changed fragmentOpened=" + ChatActivity.this.fragmentOpened);
            }
            if (z) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.fragmentOpened) {
                    if (chatActivity.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                        ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
                    }
                    updateRowsInternal();
                    super.notifyDataSetChanged();
                    size = ChatActivity.this.messages.size() - 1;
                    while (true) {
                        if (size >= 0) {
                            break;
                        }
                        MessageObject messageObject = ChatActivity.this.messages.get(size);
                        if (messageObject.isDateObject) {
                            size--;
                        } else {
                            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                            if (tLRPC$Message != null) {
                                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChannelCreate)) {
                                    z2 = true;
                                }
                            }
                        }
                    }
                    z2 = false;
                    if ((ChatActivity.this.endReached[0] || !(ChatActivity.this.mergeDialogId == 0 || ChatActivity.this.endReached[1])) && !z2) {
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.checkDispatchHideSkeletons(((BaseFragment) chatActivity2).fragmentBeginToShow);
                    return;
                }
            }
            ChatActivity.this.chatListView.setItemAnimator(null);
            updateRowsInternal();
            super.notifyDataSetChanged();
            size = ChatActivity.this.messages.size() - 1;
            while (true) {
                if (size >= 0) {
                }
                size--;
            }
            z2 = false;
            if (ChatActivity.this.endReached[0]) {
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyDataSetChanged() {
            notifyDataSetChanged(false);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemChanged(int i) {
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemChanged(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeChanged(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range changed " + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeChanged(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemInserted(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item inserted " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemInserted(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemMoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item moved" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemMoved(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeInserted(int i, int i2) {
            int i3;
            int i4;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range inserted" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            if (i == 1 && i2 > 0 && (i3 = i + i2) >= (i4 = this.messagesStartRow) && i3 < this.messagesEndRow) {
                MessageObject messageObject = ChatActivity.this.messages.get(i3 - i4);
                MessageObject messageObject2 = ChatActivity.this.messages.get((i3 - this.messagesStartRow) - 1);
                if ((ChatActivity.this.currentChat != null && messageObject.getFromChatId() == messageObject2.getFromChatId()) || (ChatActivity.this.currentUser != null && messageObject.isOutOwner() == messageObject2.isOutOwner())) {
                    notifyItemChanged(i);
                }
            }
            try {
                super.notifyItemRangeInserted(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRemoved(int i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item removed " + i);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRemoved(i);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeRemoved(int i, int i2) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range removed" + i + ":" + i2);
            }
            if (!((BaseFragment) ChatActivity.this).fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeRemoved(i, i2);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class SearchItemListener extends ActionBarMenuItem.ActionBarMenuItemSearchListener {
        private SearchItemListener() {
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canCollapseSearch() {
            if (ChatActivity.this.messagesSearchListView.getTag() != null) {
                ChatActivity.this.showMessagesSearchListView(false);
                return false;
            }
            return true;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchCollapse() {
            TLRPC$Chat tLRPC$Chat;
            if (ChatActivity.this.searchCalendarButton != null) {
                ChatActivity.this.searchCalendarButton.setVisibility(0);
            }
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
            }
            ChatActivity.this.mentionContainer.setReversed(false);
            ChatActivity.this.mentionContainer.getAdapter().setSearchingMentions(false);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
            ChatActivity.this.searchItem.setSearchFieldCaption(null);
            AndroidUtilities.updateViewVisibilityAnimated(ChatActivity.this.avatarContainer, true, 0.95f, true);
            if (ChatActivity.this.editTextItem != null && ChatActivity.this.editTextItem.getTag() != null) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(0);
                    ChatActivity.this.checkEditTextItemMenu();
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            } else if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer()) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && !ChatObject.canSendPlain(tLRPC$Chat))) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            } else {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            }
            if ((ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser)) || (ChatActivity.this.threadMessageObject != null && ChatActivity.this.threadMessageObject.getRepliesCount() < 10)) {
                ChatActivity.this.searchItem.setVisibility(8);
            }
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchExpand() {
            if (ChatActivity.this.threadMessageId != 0 || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                ChatActivity.this.openSearchWithText(null);
            }
            if (ChatActivity.this.openSearchKeyboard) {
                ChatActivity.this.saveKeyboardPositionBeforeTransition();
                AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$SearchItemListener$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.SearchItemListener.this.lambda$onSearchExpand$0();
                    }
                }, 500L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onSearchExpand$0() {
            ChatActivity.this.searchItem.getSearchField().requestFocus();
            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            ChatActivity.this.removeKeyboardPositionBeforeTransition();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchPressed(EditText editText) {
            ChatActivity.this.updateSearchButtons(0, 0, -1);
            ChatActivity.this.getMediaDataController().searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ((BaseFragment) ChatActivity.this).classGuid, 0, ChatActivity.this.threadMessageId, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onTextChanged(EditText editText) {
            ChatActivity.this.showMessagesSearchListView(false);
            ChatActivity.this.createSearchContainer();
            if (!ChatActivity.this.searchingForUser) {
                if (ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchingChatMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", R.string.SearchFrom))) {
                    ChatActivity.this.searchUserButton.callOnClick();
                    return;
                }
                return;
            }
            MentionsAdapter adapter = ChatActivity.this.mentionContainer.getAdapter();
            adapter.searchUsernameOrHashtag("@" + editText.getText().toString(), 0, ChatActivity.this.messages, true, true);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onCaptionCleared() {
            ChatActivity.this.createSearchContainer();
            if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null) {
                ChatActivity.this.searchUserButton.callOnClick();
                return;
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
                ChatActivity.this.searchItem.setSearchFieldText("", true);
            }
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            ChatActivity.this.searchUserButton.setVisibility(0);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean forceShowClear() {
            return ChatActivity.this.searchingForUser;
        }
    }

    private SearchItemListener getSearchItemListener() {
        if (this.searchItemListener == null) {
            this.searchItemListener = new SearchItemListener();
        }
        return this.searchItemListener;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class ChatMessageCellDelegate implements ChatMessageCell.ChatMessageCellDelegate {
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canDrawOutboundsContent() {
            return false;
        }

        private ChatMessageCellDelegate() {
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isReplyOrSelf() {
            return UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHint(ChatMessageCell chatMessageCell, int i) {
            if (i == 0) {
                ChatActivity.this.showPollSolution(chatMessageCell.getMessageObject(), ((TLRPC$TL_messageMediaPoll) chatMessageCell.getMessageObject().messageOwner.media).results);
            } else if (i == 1) {
                MessageObject messageObject = chatMessageCell.getMessageObject();
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = messageObject.messageOwner.fwd_from;
                if (tLRPC$MessageFwdHeader == null || TextUtils.isEmpty(tLRPC$MessageFwdHeader.psa_type)) {
                    return;
                }
                String string = LocaleController.getString("PsaMessageInfo_" + messageObject.messageOwner.fwd_from.psa_type);
                if (TextUtils.isEmpty(string)) {
                    string = LocaleController.getString("PsaMessageInfoDefault", R.string.PsaMessageInfoDefault);
                }
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(string);
                MessageObject.addLinks(false, spannableStringBuilder);
                MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                if (currentMessagesGroup != null) {
                    int size = currentMessagesGroup.posArray.size();
                    int i2 = 0;
                    while (true) {
                        if (i2 >= size) {
                            break;
                        } else if ((currentMessagesGroup.posArray.get(i2).flags & 1) != 0) {
                            MessageObject messageObject2 = currentMessagesGroup.messages.get(i2);
                            if (messageObject2 != messageObject) {
                                int childCount = ChatActivity.this.chatListView.getChildCount();
                                for (int i3 = 0; i3 < childCount; i3++) {
                                    View childAt = ChatActivity.this.chatListView.getChildAt(i3);
                                    if (childAt instanceof ChatMessageCell) {
                                        ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt;
                                        if (messageObject2.equals(chatMessageCell2.getMessageObject())) {
                                            chatMessageCell = chatMessageCell2;
                                        }
                                    }
                                }
                                messageObject = messageObject2;
                            }
                        } else {
                            i2++;
                        }
                    }
                }
                ChatActivity.this.showInfoHint(messageObject, spannableStringBuilder, 1);
            }
            chatMessageCell.showHintButton(false, true, i);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell) {
            MessageObject messageObject;
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                messageObject = currentMessagesGroup.messages.get(0);
            } else {
                messageObject = chatMessageCell.getMessageObject();
            }
            return messageObject != null && messageObject.getId() == ChatActivity.this.commentLoadingMessageId;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressSideButton(ChatMessageCell chatMessageCell) {
            TLRPC$Message tLRPC$Message;
            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
            int i;
            MessageObject.GroupedMessages groupedMessages;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.closeKeyboard();
            }
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (ChatActivity.this.chatMode == 2) {
                ChatActivity.this.chatActivityDelegate.openReplyMessage(messageObject.getId());
                ChatActivity.this.finishFragment();
            } else if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser)) && messageObject.messageOwner.fwd_from.saved_from_peer != null) {
                if (!UserObject.isReplyUser(ChatActivity.this.currentUser) || (tLRPC$MessageReplyHeader = (tLRPC$Message = messageObject.messageOwner).reply_to) == null || (i = tLRPC$MessageReplyHeader.reply_to_top_id) == 0) {
                    ChatActivity.this.openOriginalReplyChat(messageObject);
                } else {
                    ChatActivity.this.openDiscussionMessageChat(tLRPC$MessageReplyHeader.reply_to_peer_id.channel_id, null, i, 0L, -1, tLRPC$Message.fwd_from.saved_from_msg_id, messageObject);
                }
            } else {
                ArrayList<MessageObject> arrayList = null;
                if (messageObject.getGroupId() != 0 && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                    arrayList = groupedMessages.messages;
                }
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    arrayList.add(messageObject);
                }
                ChatActivity chatActivity = ChatActivity.this;
                Context context = ChatActivity.this.getContext();
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity.showDialog(new ShareAlert(context, chatActivity2, arrayList, null, null, ChatObject.isChannel(chatActivity2.currentChat), null, null, false, false, ChatActivity.this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.1
                    @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
                    public void dismissInternal() {
                        super.dismissInternal();
                        AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                        if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                            ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
                        }
                    }

                    @Override // org.telegram.ui.Components.ShareAlert
                    protected void onSend(LongSparseArray<TLRPC$Dialog> longSparseArray, int i2, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
                        ChatActivity.this.createUndoView();
                        if (ChatActivity.this.undoView == null) {
                            return;
                        }
                        if (longSparseArray.size() == 1) {
                            ChatActivity.this.undoView.showWithAction(longSparseArray.valueAt(0).id, 53, Integer.valueOf(i2), tLRPC$TL_forumTopic, (Runnable) null, (Runnable) null);
                        } else {
                            ChatActivity.this.undoView.showWithAction(0L, 53, Integer.valueOf(i2), Integer.valueOf(longSparseArray.size()), (Runnable) null, (Runnable) null);
                        }
                    }
                });
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
                ((BaseFragment) ChatActivity.this).fragmentView.requestLayout();
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean needPlayMessage(MessageObject messageObject, boolean z) {
            if (messageObject.isVoice() || messageObject.isRoundVideo()) {
                boolean playMessage = MediaController.getInstance().playMessage(messageObject, z);
                MediaController.getInstance().setVoiceMessagesPlaylist(playMessage ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return playMessage;
            } else if (messageObject.isMusic()) {
                MediaController mediaController = MediaController.getInstance();
                ChatActivity chatActivity = ChatActivity.this;
                return mediaController.setPlaylist(chatActivity.messages, messageObject, chatActivity.mergeDialogId);
            } else {
                return false;
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void videoTimerReached() {
            ChatActivity.this.showNoSoundHint();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTime(ChatMessageCell chatMessageCell) {
            ChatActivity.this.createUndoView();
            if (ChatActivity.this.undoView == null) {
                return;
            }
            ChatActivity.this.undoView.showWithAction(ChatActivity.this.dialog_id, 47, (Runnable) null);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            if (tLRPC$Chat == null) {
                return;
            }
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else {
                openChat(chatMessageCell, tLRPC$Chat, i);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressHiddenForward(ChatMessageCell chatMessageCell) {
            if (!chatMessageCell.getMessageObject().isImportedForward()) {
                ChatActivity.this.showForwardHint(chatMessageCell);
            } else {
                didPressTime(chatMessageCell);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressOther(ChatMessageCell chatMessageCell, float f, float f2) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.type != 16) {
                ChatActivity.this.createMenu(chatMessageCell, true, false, f, f2, messageObject.isMusic());
                return;
            }
            TLRPC$User tLRPC$User = ChatActivity.this.currentUser;
            if (tLRPC$User != null) {
                boolean isVideoCall = messageObject.isVideoCall();
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$UserFull tLRPC$UserFull = chatActivity.userInfo;
                VoIPHelper.startCall(tLRPC$User, isVideoCall, tLRPC$UserFull != null && tLRPC$UserFull.video_calls_available, chatActivity.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, float f, float f2) {
            boolean z = true;
            if (((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                ChatActivity.this.processRowSelect(chatMessageCell, true, f, f2);
            } else if (chatMessageCell != null && chatMessageCell.getMessageObject() != null && chatMessageCell.getMessageObject().isSponsored()) {
                didPressInstantButton(chatMessageCell, 10);
            } else {
                if (!ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isThreadChat()) {
                    z = false;
                }
                openProfile(tLRPC$User, z);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didLongPressUserAvatar(final ChatMessageCell chatMessageCell, final TLRPC$User tLRPC$User, float f, float f2) {
            AvatarPreviewer.Data of;
            if (isAvatarPreviewerEnabled()) {
                ChatActivity chatActivity = ChatActivity.this;
                int i = (chatActivity.currentChat == null || (chatActivity.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0)) ? 0 : 1;
                AvatarPreviewer.MenuItem[] menuItemArr = new AvatarPreviewer.MenuItem[i + 2];
                menuItemArr[0] = AvatarPreviewer.MenuItem.OPEN_PROFILE;
                menuItemArr[1] = AvatarPreviewer.MenuItem.SEND_MESSAGE;
                if (i != 0) {
                    menuItemArr[2] = AvatarPreviewer.MenuItem.MENTION;
                }
                TLRPC$UserFull userFull = ChatActivity.this.getMessagesController().getUserFull(tLRPC$User.id);
                if (userFull == null) {
                    of = AvatarPreviewer.Data.of(tLRPC$User, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                } else {
                    of = AvatarPreviewer.Data.of(userFull, menuItemArr);
                }
                if (AvatarPreviewer.canPreview(of)) {
                    AvatarPreviewer.getInstance().show((ViewGroup) ((BaseFragment) ChatActivity.this).fragmentView, of, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda6
                        @Override // org.telegram.ui.AvatarPreviewer.Callback
                        public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressUserAvatar$0(chatMessageCell, tLRPC$User, menuItem);
                        }
                    });
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressUserAvatar$0(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User, AvatarPreviewer.MenuItem menuItem) {
            int i = 130.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(tLRPC$User);
            } else if (i == 4) {
                openDialog(chatMessageCell, tLRPC$User);
            } else if (i != 5) {
            } else {
                appendMention(tLRPC$User);
            }
        }

        private void appendMention(TLRPC$User tLRPC$User) {
            SpannableStringBuilder spannableStringBuilder;
            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                CharSequence fieldText = chatActivityEnterView.getFieldText();
                if (fieldText != null) {
                    spannableStringBuilder = new SpannableStringBuilder(fieldText);
                    if (fieldText.charAt(fieldText.length() - 1) != ' ') {
                        spannableStringBuilder.append((CharSequence) " ");
                    }
                } else {
                    spannableStringBuilder = new SpannableStringBuilder();
                }
                if (spannableStringBuilder.length() > 0 && spannableStringBuilder.charAt(spannableStringBuilder.length() - 1) != ' ') {
                    spannableStringBuilder.append(' ');
                }
                String publicUsername = UserObject.getPublicUsername(tLRPC$User);
                if (publicUsername != null) {
                    spannableStringBuilder.append((CharSequence) "@").append((CharSequence) publicUsername).append((CharSequence) " ");
                } else {
                    String firstName = UserObject.getFirstName(tLRPC$User, false);
                    SpannableString spannableString = new SpannableString(firstName + " ");
                    spannableString.setSpan(new URLSpanUserMention("" + tLRPC$User.id, 3), 0, spannableString.length(), 33);
                    spannableStringBuilder.append((CharSequence) spannableString);
                }
                ChatActivity.this.chatActivityEnterView.setFieldText(spannableStringBuilder);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$appendMention$1();
                    }
                }, 200L);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$appendMention$1() {
            ChatActivity.this.chatActivityEnterView.openKeyboard();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didLongPressChannelAvatar(final ChatMessageCell chatMessageCell, final TLRPC$Chat tLRPC$Chat, int i, float f, float f2) {
            AvatarPreviewer.Data of;
            if (isAvatarPreviewerEnabled()) {
                AvatarPreviewer.MenuItem[] menuItemArr = {AvatarPreviewer.MenuItem.OPEN_PROFILE};
                ChatActivity chatActivity = ChatActivity.this;
                TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
                if (tLRPC$Chat2 == null || tLRPC$Chat2.id != tLRPC$Chat.id || chatActivity.isThreadChat()) {
                    menuItemArr = (AvatarPreviewer.MenuItem[]) Arrays.copyOf(menuItemArr, 2);
                    menuItemArr[1] = tLRPC$Chat.broadcast ? AvatarPreviewer.MenuItem.OPEN_CHANNEL : AvatarPreviewer.MenuItem.OPEN_GROUP;
                }
                TLRPC$ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(tLRPC$Chat.id);
                if (chatFull == null) {
                    of = AvatarPreviewer.Data.of(tLRPC$Chat, ((BaseFragment) ChatActivity.this).classGuid, menuItemArr);
                } else {
                    of = AvatarPreviewer.Data.of(tLRPC$Chat, chatFull, menuItemArr);
                }
                if (AvatarPreviewer.canPreview(of)) {
                    AvatarPreviewer.getInstance().show((ViewGroup) ((BaseFragment) ChatActivity.this).fragmentView, of, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda5
                        @Override // org.telegram.ui.AvatarPreviewer.Callback
                        public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didLongPressChannelAvatar$2(tLRPC$Chat, chatMessageCell, menuItem);
                        }
                    });
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didLongPressChannelAvatar$2(TLRPC$Chat tLRPC$Chat, ChatMessageCell chatMessageCell, AvatarPreviewer.MenuItem menuItem) {
            int i = 130.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[menuItem.ordinal()];
            if (i == 1) {
                openProfile(tLRPC$Chat);
            } else if (i == 2 || i == 3) {
                openChat(chatMessageCell, tLRPC$Chat, 0);
            }
        }

        private void openProfile(TLRPC$User tLRPC$User) {
            openProfile(tLRPC$User, false);
        }

        private void openProfile(TLRPC$User tLRPC$User, boolean z) {
            if (tLRPC$User == null || tLRPC$User.id == ChatActivity.this.getUserConfig().getClientUserId()) {
                return;
            }
            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
            int i = 0;
            z = (tLRPC$UserProfilePhoto == null || (tLRPC$UserProfilePhoto instanceof TLRPC$TL_userProfilePhotoEmpty)) ? false : false;
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", tLRPC$User.id);
            bundle.putBoolean("expandPhoto", z);
            ProfileActivity profileActivity = new ProfileActivity(bundle);
            TLRPC$User tLRPC$User2 = ChatActivity.this.currentUser;
            if (tLRPC$User2 != null && tLRPC$User2.id == tLRPC$User.id) {
                i = 1;
            }
            profileActivity.setPlayProfileAnimation(i);
            AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ((BaseFragment) ChatActivity.this).classGuid);
            ChatActivity.this.presentFragment(profileActivity);
        }

        private void openProfile(TLRPC$Chat tLRPC$Chat) {
            openProfile(tLRPC$Chat, false);
        }

        private void openProfile(TLRPC$Chat tLRPC$Chat, boolean z) {
            if (tLRPC$Chat != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", tLRPC$Chat.id);
                bundle.putBoolean("expandPhoto", z);
                ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            }
        }

        private void openDialog(ChatMessageCell chatMessageCell, TLRPC$User tLRPC$User) {
            if (tLRPC$User != null) {
                Bundle bundle = new Bundle();
                bundle.putLong("user_id", tLRPC$User.id);
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        private void openChat(ChatMessageCell chatMessageCell, TLRPC$Chat tLRPC$Chat, int i) {
            ChatActivity chatActivity = ChatActivity.this;
            TLRPC$Chat tLRPC$Chat2 = chatActivity.currentChat;
            if (tLRPC$Chat2 != null && tLRPC$Chat.id == tLRPC$Chat2.id) {
                chatActivity.scrollToMessageId(i, chatMessageCell.getMessageObject().getId(), true, 0, true, 0);
            } else if (tLRPC$Chat2 == null || tLRPC$Chat.id != tLRPC$Chat2.id || chatActivity.isThreadChat()) {
                Bundle bundle = new Bundle();
                bundle.putLong("chat_id", tLRPC$Chat.id);
                if (i != 0) {
                    bundle.putInt("message_id", i);
                }
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(bundle));
                }
            }
        }

        private boolean isAvatarPreviewerEnabled() {
            TLRPC$Chat tLRPC$Chat;
            return UserObject.isUserSelf(ChatActivity.this.currentUser) || ((tLRPC$Chat = ChatActivity.this.currentChat) != null && (!ChatObject.isChannel(tLRPC$Chat) || ChatActivity.this.currentChat.megagroup));
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            if (ChatActivity.this.getParentActivity() != null) {
                if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonRequestPeer)) {
                    ChatActivity.this.chatActivityEnterView.didPressedBotButton(tLRPC$KeyboardButton, chatMessageCell.getMessageObject(), chatMessageCell.getMessageObject(), ChatActivity.this.makeProgressForBotButton(chatMessageCell, tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl ? tLRPC$KeyboardButton.url : null));
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needShowPremiumBulletin(int i) {
            if (i == 0) {
                ChatActivity.this.checkTopUndoView();
                if (ChatActivity.this.topUndoView == null) {
                    return;
                }
                ChatActivity.this.topUndoView.showWithAction(0L, 84, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$needShowPremiumBulletin$3();
                    }
                });
                try {
                    ChatActivity.this.topUndoView.performHapticFeedback(3, 2);
                } catch (Exception unused) {
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$needShowPremiumBulletin$3() {
            new PremiumFeatureBottomSheet(ChatActivity.this, 8, true).show();
            ChatActivity.this.getMessagesController().pressTranscribeButton();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            if (ChatActivity.this.getParentActivity() != null) {
                if ((ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonCallback) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) || (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUserProfile)) && (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl)) {
                    ChatActivity.this.openClickableLink(null, tLRPC$KeyboardButton.url, true, chatMessageCell, chatMessageCell.getMessageObject());
                    try {
                        chatMessageCell.performHapticFeedback(0, 1);
                    } catch (Exception unused) {
                    }
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressReaction(final ChatMessageCell chatMessageCell, TLRPC$ReactionCount tLRPC$ReactionCount, boolean z) {
            int i;
            if (ChatActivity.this.getParentActivity() == null) {
                return;
            }
            if (!z) {
                if (tLRPC$ReactionCount != null) {
                    ChatActivity.this.selectReaction(chatMessageCell.getPrimaryMessageObject(), null, null, 0.0f, 0.0f, ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(tLRPC$ReactionCount.reaction), false, false, false);
                }
            } else if (!ChatObject.isChannelAndNotMegaGroup(ChatActivity.this.currentChat) || ChatActivity.this.dialog_id >= 0) {
                chatMessageCell.performHapticFeedback(0);
                FrameLayout frameLayout = new FrameLayout(ChatActivity.this.getParentActivity()) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.2
                    Path path = new Path();

                    @Override // android.view.ViewGroup, android.view.View
                    public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                        if (keyEvent.getKeyCode() == 4 && keyEvent.getRepeatCount() == 0) {
                            ChatActivity.this.closeMenu();
                        }
                        return super.dispatchKeyEvent(keyEvent);
                    }

                    @Override // android.widget.FrameLayout, android.view.View
                    protected void onMeasure(int i2, int i3) {
                        int min = Math.min(View.MeasureSpec.getSize(i3), AndroidUtilities.dp(300.0f));
                        if (min == 0) {
                            min = AndroidUtilities.dp(300.0f);
                        }
                        super.onMeasure(i2, View.MeasureSpec.makeMeasureSpec(min, Integer.MIN_VALUE));
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        if (Build.VERSION.SDK_INT >= 21) {
                            canvas.save();
                            this.path.rewind();
                            this.path.addRoundRect(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(8.0f), getWidth() - AndroidUtilities.dp(8.0f), getHeight() - AndroidUtilities.dp(8.0f), AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Path.Direction.CW);
                            canvas.clipPath(this.path);
                            super.dispatchDraw(canvas);
                            canvas.restore();
                            return;
                        }
                        super.dispatchDraw(canvas);
                    }
                };
                frameLayout.setLayoutParams(LayoutHelper.createFrame(-2, -2.0f));
                Rect rect = new Rect();
                Drawable mutate = ContextCompat.getDrawable(ChatActivity.this.getParentActivity(), R.drawable.popup_fixed_alert).mutate();
                mutate.setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                mutate.getPadding(rect);
                frameLayout.setBackground(mutate);
                ReactionsLayoutInBubble.ReactionButton reactionButton = chatMessageCell.getReactionButton(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(tLRPC$ReactionCount.reaction));
                if (reactionButton == null) {
                    return;
                }
                int i2 = chatMessageCell.reactionsLayoutInBubble.y;
                AndroidUtilities.dp(28.0f);
                float f = chatMessageCell.reactionsLayoutInBubble.x + reactionButton.x;
                chatMessageCell.getLocationInWindow(new int[2]);
                Activity parentActivity = ChatActivity.this.getParentActivity();
                ChatActivity chatActivity = ChatActivity.this;
                frameLayout.addView(new ReactedUsersListView(parentActivity, chatActivity.themeDelegate, ((BaseFragment) chatActivity).currentAccount, chatMessageCell.getPrimaryMessageObject(), tLRPC$ReactionCount, false).setOnCustomEmojiSelectedListener(new ReactedUsersListView.OnCustomEmojiSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda7
                    @Override // org.telegram.ui.Components.ReactedUsersListView.OnCustomEmojiSelectedListener
                    public final void showCustomEmojiAlert(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$4(reactedUsersListView, arrayList);
                    }
                }).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda8
                    @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                    public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReaction$5(chatMessageCell, reactedUsersListView, j, tLRPC$MessagePeerReaction);
                    }
                }), LayoutHelper.createFrame(240, -2.0f));
                ChatActivity.this.scrimPopupWindow = new ActionBarPopupWindow(frameLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.4
                    @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                    public void dismiss() {
                        super.dismiss();
                        ChatActivity chatActivity2 = ChatActivity.this;
                        if (chatActivity2.scrimPopupWindow != this) {
                            return;
                        }
                        chatActivity2.scrimPopupWindow = null;
                        chatActivity2.menuDeleteItem = null;
                        ChatActivity.this.scrimPopupWindowItems = null;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                            ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                        } else {
                            ChatActivity.this.dimBehindView(false);
                        }
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                            return;
                        }
                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                    }
                };
                ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(220);
                ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                ChatActivity.this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                ChatActivity.this.scrimPopupWindow.setFocusable(true);
                frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                int height = ChatActivity.this.contentView.getHeight();
                int measuredHeight = frameLayout.getMeasuredHeight();
                int measureKeyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                if (measureKeyboardHeight > AndroidUtilities.dp(20.0f)) {
                    height += measureKeyboardHeight;
                }
                int max = Math.max(AndroidUtilities.dp(6.0f), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - frameLayout.getMeasuredWidth(), (int) (f - AndroidUtilities.dp(28.0f))));
                if (AndroidUtilities.isTablet()) {
                    int[] iArr = new int[2];
                    ((BaseFragment) ChatActivity.this).fragmentView.getLocationInWindow(iArr);
                    max += iArr[0];
                }
                if (measuredHeight < height) {
                    float f2 = measuredHeight;
                    float f3 = height / 2.0f;
                    i = (int) ((f2 >= f3 || ((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + ((float) chatMessageCell.reactionsLayoutInBubble.y)) + ((float) reactionButton.y) <= f3) ? ChatActivity.this.chatListView.getY() + chatMessageCell.getY() + chatMessageCell.reactionsLayoutInBubble.y + reactionButton.y + reactionButton.height : (((ChatActivity.this.chatListView.getY() + chatMessageCell.getY()) + chatMessageCell.reactionsLayoutInBubble.y) + reactionButton.y) - f2);
                } else {
                    i = ((BaseFragment) ChatActivity.this).inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                }
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity2.scrimPopupWindow.showAtLocation(chatActivity2.chatListView, 51, ChatActivity.this.scrimPopupX = max, ChatActivity.this.scrimPopupY = i);
                ChatActivity.this.chatListView.stopScroll();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity chatActivity3 = ChatActivity.this;
                TLRPC$Reaction tLRPC$Reaction = tLRPC$ReactionCount.reaction;
                chatActivity3.scrimViewReaction = tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji ? ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon : null;
                ChatActivity.this.dimBehindView((View) chatMessageCell, true);
                ChatActivity.this.hideHints(false);
                if (ChatActivity.this.topUndoView != null) {
                    ChatActivity.this.topUndoView.hide(true, 1);
                }
                if (ChatActivity.this.undoView != null) {
                    ChatActivity.this.undoView.hide(true, 1);
                }
                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                if (chatActivityEnterView == null || chatActivityEnterView.getEditField() == null) {
                    return;
                }
                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$4(ReactedUsersListView reactedUsersListView, ArrayList arrayList) {
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList) { // from class: org.telegram.ui.ChatActivity.ChatMessageCellDelegate.3
                @Override // org.telegram.ui.Components.EmojiPacksAlert, org.telegram.ui.ActionBar.BottomSheet, android.app.Dialog, android.content.DialogInterface
                public void dismiss() {
                    super.dismiss();
                    ChatActivity.this.dimBehindView(false);
                }
            };
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            emojiPacksAlert.setDimBehind(false);
            ChatActivity.this.closeMenu(false);
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReaction$5(ChatMessageCell chatMessageCell, ReactedUsersListView reactedUsersListView, long j, TLRPC$MessagePeerReaction tLRPC$MessagePeerReaction) {
            Bundle bundle = new Bundle();
            if (j > 0) {
                bundle.putLong("user_id", j);
            } else {
                bundle.putLong("chat_id", -j);
            }
            bundle.putInt("report_reaction_message_id", chatMessageCell.getMessageObject().getId());
            bundle.putLong("report_reaction_from_dialog_id", ChatActivity.this.dialog_id);
            ChatActivity.this.presentFragment(new ProfileActivity(bundle));
            ChatActivity.this.closeMenu();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList<TLRPC$TL_pollAnswer> arrayList, int i, int i2, int i3) {
            int i4;
            int i5;
            int i6;
            int i7;
            if (i >= 0 || arrayList.isEmpty()) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                if (ChatActivity.this.pollHintView == null) {
                    ChatActivity.this.pollHintView = new HintView(ChatActivity.this.getParentActivity(), 5, ChatActivity.this.themeDelegate);
                    ChatActivity.this.pollHintView.setAlpha(0.0f);
                    ChatActivity.this.pollHintView.setVisibility(4);
                    ChatActivity chatActivity = ChatActivity.this;
                    int indexOfChild = chatActivity.contentView.indexOfChild(chatActivity.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    ChatActivity chatActivity2 = ChatActivity.this;
                    chatActivity2.contentView.addView(chatActivity2.pollHintView, indexOfChild + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                }
                if (!arrayList.isEmpty() || i >= 0) {
                    i4 = i2;
                    i5 = i3;
                } else {
                    ArrayList<ChatMessageCell.PollButton> pollButtons = chatMessageCell.getPollButtons();
                    int size = pollButtons.size();
                    int i8 = 0;
                    float f = 0.0f;
                    while (true) {
                        if (i8 >= size) {
                            i6 = i2;
                            i7 = i3;
                            break;
                        }
                        ChatMessageCell.PollButton pollButton = pollButtons.get(i8);
                        float y = ((chatMessageCell.getY() + pollButton.y) - AndroidUtilities.dp(4.0f)) - ChatActivity.this.chatListViewPaddingTop;
                        ChatActivity.this.pollHintX = pollButton.x + AndroidUtilities.dp(13.3f);
                        ChatActivity.this.pollHintY = (pollButton.y - AndroidUtilities.dp(6.0f)) + i3;
                        if (y > 0.0f) {
                            i6 = ChatActivity.this.pollHintX;
                            i7 = ChatActivity.this.pollHintY;
                            f = 0.0f;
                            break;
                        }
                        i8++;
                        f = y;
                    }
                    if (f != 0.0f) {
                        ChatActivity.this.chatListView.smoothScrollBy(0, (int) f);
                        ChatActivity.this.pollHintCell = chatMessageCell;
                        return;
                    }
                    i4 = i6;
                    i5 = i7;
                }
                ChatActivity.this.pollHintView.showForMessageCell(chatMessageCell, Integer.valueOf(i), i4, i5, true);
                return;
            }
            ChatActivity.this.getSendMessagesHelper().sendVote(chatMessageCell.getMessageObject(), arrayList, null);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCancelSendButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject.messageOwner.send_state != 0) {
                ChatActivity.this.getSendMessagesHelper().cancelSendingMessage(messageObject);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didLongPress(ChatMessageCell chatMessageCell, float f, float f2) {
            ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2);
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.startMultiselect(chatActivity.chatListView.getChildAdapterPosition(chatMessageCell));
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean canPerformActions() {
            return (((BaseFragment) ChatActivity.this).actionBar == null || ((BaseFragment) ChatActivity.this).actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0 || ((BaseFragment) ChatActivity.this).inPreviewMode) ? false : true;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            ChatActivity.this.didPressMessageUrl(characterStyle, z, chatMessageCell.getMessageObject(), chatMessageCell);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
            Bulletin createContainsEmojiBulletin;
            if (!ChatActivity.this.getMessagesController().premiumLocked && animatedEmojiSpan != null && !animatedEmojiSpan.standard) {
                long documentId = animatedEmojiSpan.getDocumentId();
                TLRPC$Document tLRPC$Document = animatedEmojiSpan.document;
                if (tLRPC$Document == null) {
                    tLRPC$Document = AnimatedEmojiDrawable.findDocument(((BaseFragment) ChatActivity.this).currentAccount, documentId);
                }
                if (tLRPC$Document != null && (createContainsEmojiBulletin = BulletinFactory.of(ChatActivity.this).createContainsEmojiBulletin(tLRPC$Document, 0, new Utilities.Callback() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda4
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressAnimatedEmoji$6((TLRPC$InputStickerSet) obj);
                    }
                })) != null) {
                    createContainsEmojiBulletin.show();
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressAnimatedEmoji$6(TLRPC$InputStickerSet tLRPC$InputStickerSet) {
            ArrayList arrayList = new ArrayList(1);
            arrayList.add(tLRPC$InputStickerSet);
            ChatActivity chatActivity = ChatActivity.this;
            EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity, chatActivity.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
            emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
            ChatActivity.this.showDialog(emojiPacksAlert);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressTopicButton(ChatMessageCell chatMessageCell) {
            int topicId;
            TLRPC$TL_forumTopic findTopic;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (messageObject == null || (topicId = MessageObject.getTopicId(messageObject.messageOwner, true)) == 0 || (findTopic = ChatActivity.this.getMessagesController().getTopicsController().findTopic(ChatActivity.this.currentChat.id, topicId)) == null) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            ForumUtilities.openTopic(chatActivity, chatActivity.currentChat.id, findTopic, messageObject.getId());
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldShowTopicButton() {
            return ChatObject.isForum(ChatActivity.this.currentChat) && !ChatActivity.this.isTopic;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
            ChatActivity.this.getSendMessagesHelper().sendCallback(true, chatMessageCell.getMessageObject(), tLRPC$KeyboardButton, ChatActivity.this);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            try {
                ChatActivity chatActivity = ChatActivity.this;
                EmbedBottomSheet.show(chatActivity, messageObject, chatActivity.photoViewerProvider, str2, str3, str4, str, i, i2, ChatActivity.this.isKeyboardVisible());
            } catch (Throwable th) {
                FileLog.e(th);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressReplyMessage(ChatMessageCell chatMessageCell, int i) {
            TLRPC$Message tLRPC$Message;
            TLRPC$StoryItem tLRPC$StoryItem;
            if (UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                didPressSideButton(chatMessageCell);
                return;
            }
            final MessageObject messageObject = chatMessageCell.getMessageObject();
            if (!messageObject.isReplyToStory() || (tLRPC$StoryItem = (tLRPC$Message = messageObject.messageOwner).replyStory) == null) {
                if (ChatActivity.this.chatMode == 2 || ChatActivity.this.chatMode == 1) {
                    ChatActivity.this.chatActivityDelegate.openReplyMessage(i);
                    ChatActivity.this.finishFragment();
                    return;
                }
                ChatActivity.this.scrollToMessageId(i, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ChatMessageCellDelegate.this.lambda$didPressReplyMessage$7(messageObject);
                    }
                });
            } else if (tLRPC$StoryItem instanceof TLRPC$TL_storyItemDeleted) {
                BulletinFactory.of(ChatActivity.this).createSimpleBulletin(R.raw.story_bomb1, LocaleController.getString("StoryNotFound", R.string.StoryNotFound)).show();
            } else {
                tLRPC$StoryItem.dialogId = tLRPC$Message.reply_to.user_id;
                tLRPC$StoryItem.messageId = messageObject.getId();
                tLRPC$StoryItem.messageType = 3;
                StoriesUtilities.applyViewedUser(tLRPC$StoryItem, ChatActivity.this.currentUser);
                ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), tLRPC$StoryItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressReplyMessage$7(MessageObject messageObject) {
            ChatActivity.this.progressDialogAtMessageId = messageObject.getId();
            ChatActivity.this.progressDialogAtMessageType = 0;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isProgressLoading(ChatMessageCell chatMessageCell, int i) {
            return ChatActivity.this.progressDialogAtMessageId != 0 && chatMessageCell.getMessageObject() != null && ChatActivity.this.progressDialogAtMessageId == chatMessageCell.getMessageObject().getId() && ChatActivity.this.progressDialogAtMessageType == i;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 1) {
                return null;
            }
            return ChatActivity.this.progressDialogLinkSpan;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getProgressLoadingBotButtonUrl(ChatMessageCell chatMessageCell) {
            if (chatMessageCell.getMessageObject() == null || ChatActivity.this.progressDialogAtMessageId == 0 || ChatActivity.this.progressDialogAtMessageId != chatMessageCell.getMessageObject().getId() || ChatActivity.this.progressDialogAtMessageType != 3) {
                return null;
            }
            return ChatActivity.this.progressDialogBotButtonUrl;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j) {
            Bundle bundle = new Bundle();
            bundle.putLong("user_id", j);
            if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                ChatActivity.this.presentFragment(new ChatActivity(bundle));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressViaBot(ChatMessageCell chatMessageCell, String str) {
            if (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                if ((ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0) && ChatActivity.this.chatActivityEnterView != null && str != null && str.length() > 0) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    chatActivityEnterView.setFieldText("@" + str + " ");
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didStartVideoStream(MessageObject messageObject) {
            if (messageObject.isVideo()) {
                ChatActivity.this.sendSecretMessageRead(messageObject, true);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void needReloadPolls() {
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        /* JADX WARN: Code restructure failed: missing block: B:125:0x02ec, code lost:
            if (r12.exists() != false) goto L136;
         */
        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public void didPressImage(ChatMessageCell chatMessageCell, float f, float f2) {
            int i;
            File file;
            TLRPC$Chat tLRPC$Chat;
            final MessageObject messageObject = chatMessageCell.getMessageObject();
            int i2 = 2;
            if (messageObject.type == 23) {
                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                TLRPC$StoryItem tLRPC$StoryItem = tLRPC$MessageMedia.storyItem;
                if (tLRPC$StoryItem == null || (tLRPC$StoryItem instanceof TLRPC$TL_storyItemDeleted)) {
                    return;
                }
                tLRPC$StoryItem.dialogId = tLRPC$MessageMedia.user_id;
                tLRPC$StoryItem.messageId = messageObject.getId();
                tLRPC$StoryItem.messageType = 2;
                StoriesUtilities.applyViewedUser(tLRPC$StoryItem, ChatActivity.this.currentUser);
                ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), messageObject.messageOwner.media.storyItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
                return;
            }
            boolean z = true;
            if (messageObject.isVideo()) {
                if (DownloadController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).canDownloadMedia(messageObject.messageOwner) == 1) {
                    messageObject.putInDownloadsStore = true;
                }
            } else {
                messageObject.putInDownloadsStore = true;
            }
            if (messageObject.isSendError()) {
                ChatActivity.this.createMenu(chatMessageCell, false, false, f, f2);
            } else if (messageObject.isSending()) {
            } else {
                if (messageObject.isDice()) {
                    ChatActivity.this.createUndoView();
                    if (ChatActivity.this.undoView == null) {
                        return;
                    }
                    ChatActivity.this.undoView.showWithAction(0L, (ChatActivity.this.chatActivityEnterView.getVisibility() != 0 || ChatActivity.this.bottomOverlay.getVisibility() == 0) ? 17 : 16, messageObject.getDiceEmoji(), null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatMessageCellDelegate.this.lambda$didPressImage$8(messageObject);
                        }
                    });
                    return;
                }
                if ((messageObject.isAnimatedEmoji() && (!messageObject.isAnimatedAnimatedEmoji() || (ChatActivity.this.emojiAnimationsOverlay.supports(MessageObject.findAnimatedEmojiEmoticon(messageObject.getDocument())) && ChatActivity.this.currentUser != null))) || messageObject.isPremiumSticker()) {
                    ChatActivity.this.restartSticker(chatMessageCell);
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.emojiAnimationsOverlay.onTapItem(chatMessageCell, chatActivity, true);
                    ChatActivity.this.chatListView.cancelClickRunnables(false);
                } else if (messageObject.needDrawBluredPreview()) {
                    Runnable sendSecretMessageRead = ChatActivity.this.sendSecretMessageRead(messageObject, false);
                    chatMessageCell.invalidate();
                    SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                    SecretMediaViewer.getInstance().openMedia(messageObject, ChatActivity.this.photoViewerProvider, sendSecretMessageRead);
                } else if (MessageObject.isAnimatedEmoji(messageObject.getDocument()) && MessageObject.getInputStickerSet(messageObject.getDocument()) != null) {
                    ArrayList arrayList = new ArrayList(1);
                    arrayList.add(MessageObject.getInputStickerSet(messageObject.getDocument()));
                    ChatActivity chatActivity2 = ChatActivity.this;
                    EmojiPacksAlert emojiPacksAlert = new EmojiPacksAlert(chatActivity2, chatActivity2.getParentActivity(), ChatActivity.this.themeDelegate, arrayList);
                    emojiPacksAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                    ChatActivity.this.showDialog(emojiPacksAlert);
                } else {
                    File file2 = null;
                    r0 = null;
                    ChatActivityEnterView chatActivityEnterView = null;
                    file2 = null;
                    if (messageObject.getInputStickerSet() != null) {
                        Activity parentActivity = ChatActivity.this.getParentActivity();
                        ChatActivity chatActivity3 = ChatActivity.this;
                        TLRPC$InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 && ((tLRPC$Chat = ChatActivity.this.currentChat) == null || ChatObject.canSendStickers(tLRPC$Chat))) {
                            chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        }
                        StickersAlert stickersAlert = new StickersAlert(parentActivity, chatActivity3, inputStickerSet, null, chatActivityEnterView, ChatActivity.this.themeDelegate);
                        stickersAlert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                        ChatActivity.this.showDialog(stickersAlert);
                    } else if (messageObject.isVideo() || (i = messageObject.type) == 1 || ((i == 0 && !messageObject.isWebpageDocument()) || messageObject.isGif())) {
                        ChatActivity.this.openPhotoViewerForMessage(chatMessageCell, messageObject);
                    } else {
                        int i3 = messageObject.type;
                        if (i3 == 3) {
                            ChatActivity.this.sendSecretMessageRead(messageObject, true);
                            try {
                                String str = messageObject.messageOwner.attachPath;
                                if (str != null && str.length() != 0) {
                                    file2 = new File(messageObject.messageOwner.attachPath);
                                }
                                if (file2 == null || !file2.exists()) {
                                    file2 = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                }
                                Intent intent = new Intent("android.intent.action.VIEW");
                                if (Build.VERSION.SDK_INT >= 24) {
                                    intent.setFlags(1);
                                    intent.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), ApplicationLoader.getApplicationId() + ".provider", file2), "video/mp4");
                                } else {
                                    intent.setDataAndType(Uri.fromFile(file2), "video/mp4");
                                }
                                ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                            } catch (Exception e) {
                                FileLog.e(e);
                                ChatActivity.this.alertUserOpenError(messageObject);
                            }
                        } else if (i3 == 4) {
                            if (AndroidUtilities.isMapsInstalled(ChatActivity.this)) {
                                if (messageObject.isLiveLocation()) {
                                    TLRPC$Chat tLRPC$Chat2 = ChatActivity.this.currentChat;
                                    if (tLRPC$Chat2 != null && !ChatObject.canSendMessages(tLRPC$Chat2) && !ChatActivity.this.currentChat.megagroup) {
                                        i2 = 6;
                                    }
                                    LocationActivity locationActivity = new LocationActivity(i2);
                                    locationActivity.setDelegate(ChatActivity.this);
                                    locationActivity.setMessageObject(messageObject);
                                    ChatActivity.this.presentFragment(locationActivity);
                                    return;
                                }
                                LocationActivity locationActivity2 = new LocationActivity(ChatActivity.this.currentEncryptedChat == null ? 3 : 0);
                                locationActivity2.setDelegate(ChatActivity.this);
                                locationActivity2.setMessageObject(messageObject);
                                ChatActivity.this.presentFragment(locationActivity2);
                            }
                        } else if (i3 == 9 || i3 == 0) {
                            if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                String str2 = messageObject.messageOwner.attachPath;
                                if (str2 != null && str2.length() != 0) {
                                    file = new File(messageObject.messageOwner.attachPath);
                                }
                                file = null;
                                if (file == null) {
                                    File pathToMessage = ChatActivity.this.getFileLoader().getPathToMessage(messageObject.messageOwner);
                                    if (pathToMessage.exists()) {
                                        file = pathToMessage;
                                    }
                                }
                                Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file, messageObject.getDocumentName(), null, true);
                                if (applyThemeFile == null) {
                                    ChatActivity.this.scrollToPositionOnRecreate = -1;
                                } else {
                                    ChatActivity.this.presentFragment(new ThemePreviewActivity(applyThemeFile));
                                    return;
                                }
                            }
                            if (messageObject.canPreviewDocument()) {
                                PhotoViewer photoViewer = PhotoViewer.getInstance();
                                ChatActivity chatActivity4 = ChatActivity.this;
                                photoViewer.setParentActivity(chatActivity4, chatActivity4.themeDelegate);
                                PhotoViewer photoViewer2 = PhotoViewer.getInstance();
                                ChatActivity chatActivity5 = ChatActivity.this;
                                photoViewer2.openPhoto(messageObject, chatActivity5, messageObject.type != 0 ? chatActivity5.dialog_id : 0L, messageObject.type != 0 ? ChatActivity.this.mergeDialogId : 0L, messageObject.type != 0 ? ChatActivity.this.getTopicId() : 0, ChatActivity.this.photoViewerProvider);
                            } else {
                                z = false;
                            }
                            if (z) {
                                return;
                            }
                            try {
                                AndroidUtilities.openForView(messageObject, ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                            } catch (Exception e2) {
                                FileLog.e(e2);
                                ChatActivity.this.alertUserOpenError(messageObject);
                            }
                        }
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$didPressImage$8(MessageObject messageObject) {
            if (ChatActivity.this.checkSlowModeAlert()) {
                ChatActivity.this.getSendMessagesHelper().sendMessage(SendMessagesHelper.SendMessageParams.of(messageObject.getDiceEmoji(), ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, false, null, null, null, true, 0, null, false));
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressInstantButton(ChatMessageCell chatMessageCell, int i) {
            TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory;
            TLRPC$StoryItem tLRPC$StoryItem;
            TLRPC$Message tLRPC$Message;
            TLRPC$MessageMedia tLRPC$MessageMedia;
            int i2;
            TLRPC$WebPage tLRPC$WebPage;
            MessageObject messageObject = chatMessageCell.getMessageObject();
            if (i == 8) {
                PollVotesAlert.showForPoll(ChatActivity.this, messageObject);
            } else if (i == 0) {
                TLRPC$MessageMedia tLRPC$MessageMedia2 = messageObject.messageOwner.media;
                if (tLRPC$MessageMedia2 == null || (tLRPC$WebPage = tLRPC$MessageMedia2.webpage) == null || tLRPC$WebPage.cached_page == null) {
                    return;
                }
                ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                ArticleViewer.getInstance().open(messageObject);
            } else {
                if (i == 5) {
                    long j = messageObject.messageOwner.media.user_id;
                    TLRPC$User user = j != 0 ? MessagesController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getUser(Long.valueOf(j)) : null;
                    ChatActivity chatActivity = ChatActivity.this;
                    TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject.messageOwner.media;
                    chatActivity.openVCard(user, tLRPC$MessageMedia3.phone_number, tLRPC$MessageMedia3.vcard, tLRPC$MessageMedia3.first_name, tLRPC$MessageMedia3.last_name);
                    return;
                }
                if (messageObject.isSponsored()) {
                    ChatActivity.this.logSponsoredClicked(messageObject);
                    Bundle bundle = new Bundle();
                    if (messageObject.sponsoredWebPage != null) {
                        Browser.openUrl(ChatActivity.this.getContext(), messageObject.sponsoredWebPage.url, true, false);
                        return;
                    } else if (messageObject.sponsoredChatInvite != null) {
                        ChatActivity chatActivity2 = ChatActivity.this;
                        Context context = ChatActivity.this.getContext();
                        TLRPC$ChatInvite tLRPC$ChatInvite = messageObject.sponsoredChatInvite;
                        String str = messageObject.sponsoredChatInviteHash;
                        ChatActivity chatActivity3 = ChatActivity.this;
                        chatActivity2.showDialog(new JoinGroupAlert(context, tLRPC$ChatInvite, str, chatActivity3, chatActivity3.themeDelegate));
                        return;
                    } else {
                        long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                        if (peerId == ChatActivity.this.getDialogId() && (i2 = messageObject.sponsoredChannelPost) != 0) {
                            ChatActivity.this.scrollToMessageId(i2, 0, true, 0, false, 0);
                            return;
                        }
                        if (peerId < 0) {
                            bundle.putLong("chat_id", -peerId);
                        } else {
                            bundle.putLong("user_id", peerId);
                        }
                        int i3 = messageObject.sponsoredChannelPost;
                        if (i3 != 0) {
                            bundle.putInt("message_id", i3);
                        }
                        String str2 = messageObject.botStartParam;
                        if (str2 != null) {
                            bundle.putString("inline_query", str2);
                        }
                        if (ChatActivity.this.getMessagesController().checkCanOpenChat(bundle, ChatActivity.this)) {
                            ChatActivity.this.presentFragment(new ChatActivity(bundle));
                            return;
                        }
                        return;
                    }
                }
                TLRPC$WebPage storyMentionWebpage = messageObject.getStoryMentionWebpage();
                if (storyMentionWebpage == null && (tLRPC$Message = messageObject.messageOwner) != null && (tLRPC$MessageMedia = tLRPC$Message.media) != null) {
                    storyMentionWebpage = tLRPC$MessageMedia.webpage;
                }
                if (storyMentionWebpage == null) {
                    return;
                }
                if (storyMentionWebpage.attributes != null) {
                    for (int i4 = 0; i4 < storyMentionWebpage.attributes.size(); i4++) {
                        if ((storyMentionWebpage.attributes.get(i4) instanceof TLRPC$TL_webPageAttributeStory) && (tLRPC$StoryItem = (tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) storyMentionWebpage.attributes.get(i4)).storyItem) != null) {
                            tLRPC$StoryItem.dialogId = tLRPC$TL_webPageAttributeStory.user_id;
                            tLRPC$StoryItem.messageId = messageObject.getId();
                            tLRPC$TL_webPageAttributeStory.storyItem.messageType = 1;
                            ChatActivity.this.getOrCreateStoryViewer().open(ChatActivity.this.getContext(), tLRPC$TL_webPageAttributeStory.storyItem, StoriesListPlaceProvider.of(ChatActivity.this.chatListView));
                            return;
                        }
                    }
                }
                if (ChatActivity.this.openLinkInternally(storyMentionWebpage.url, chatMessageCell, null, messageObject.getId(), 2)) {
                    return;
                }
                if (ChatActivity.this.progressDialogCurrent != null) {
                    ChatActivity.this.progressDialogCurrent.cancel(true);
                }
                ChatActivity.this.progressDialogCurrent = chatMessageCell.getMessageObject() != null ? new 5(chatMessageCell) : null;
                Browser.openUrl(ChatActivity.this.getParentActivity(), Uri.parse(storyMentionWebpage.url), true, true, ChatActivity.this.progressDialogCurrent);
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes3.dex */
        public class 5 extends Browser.Progress {
            final /* synthetic */ ChatMessageCell val$cell;

            5(ChatMessageCell chatMessageCell) {
                this.val$cell = chatMessageCell;
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void init() {
                ChatActivity.this.progressDialogAtMessageId = this.val$cell.getMessageObject().getId();
                ChatActivity.this.progressDialogAtMessageType = 2;
                ChatActivity.this.progressDialogLinkSpan = null;
                this.val$cell.invalidate();
            }

            @Override // org.telegram.messenger.browser.Browser.Progress
            public void end(boolean z) {
                if (z) {
                    return;
                }
                final ChatActivity chatActivity = ChatActivity.this;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatMessageCellDelegate$5$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.access$43600(ChatActivity.this);
                    }
                }, 250L);
            }
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void didPressCommentButton(ChatMessageCell chatMessageCell) {
            MessageObject messageObject;
            long j;
            int i;
            MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
            if (currentMessagesGroup != null && !currentMessagesGroup.messages.isEmpty()) {
                messageObject = currentMessagesGroup.messages.get(0);
            } else {
                messageObject = chatMessageCell.getMessageObject();
            }
            MessageObject messageObject2 = messageObject;
            TLRPC$MessageReplies tLRPC$MessageReplies = messageObject2.messageOwner.replies;
            if (tLRPC$MessageReplies != null) {
                i = tLRPC$MessageReplies.read_max_id;
                j = tLRPC$MessageReplies.channel_id;
            } else {
                j = 0;
                i = -1;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.openDiscussionMessageChat(chatActivity.currentChat.id, messageObject2, messageObject2.getId(), j, i, 0, null);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public String getAdminRank(long j) {
            String adminRank;
            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.currentChat.megagroup && (adminRank = chatActivity.getMessagesController().getAdminRank(ChatActivity.this.currentChat.id, j)) != null) {
                    return adminRank;
                }
            }
            if (ChatActivity.this.forumTopic == null || ChatActivity.this.forumTopic.from_id == null) {
                return null;
            }
            if (ChatActivity.this.forumTopic.from_id.user_id == j || ChatActivity.this.forumTopic.from_id.channel_id == j || ChatActivity.this.forumTopic.from_id.chat_id == j) {
                return LocaleController.getString("TopicCreator", R.string.TopicCreator);
            }
            return null;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean shouldRepeatSticker(MessageObject messageObject) {
            return !ChatActivity.this.alreadyPlayedStickers.containsKey(messageObject);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void setShouldNotRepeatSticker(MessageObject messageObject) {
            ChatActivity.this.alreadyPlayedStickers.put(messageObject, Boolean.TRUE);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper() {
            return ChatActivity.this.textSelectionHelper;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean hasSelectedMessages() {
            return ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() > 0;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void onDiceFinished() {
            if (ChatActivity.this.fireworksOverlay.isStarted()) {
                return;
            }
            ChatActivity.this.fireworksOverlay.start();
            ChatActivity.this.fireworksOverlay.performHapticFeedback(3, 2);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public PinchToZoomHelper getPinchToZoomHelper() {
            return ChatActivity.this.pinchToZoomHelper;
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean keyboardIsOpened() {
            return ChatActivity.this.contentView.getKeyboardHeight() + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean isLandscape() {
            return ChatActivity.this.contentView.getMeasuredWidth() > ChatActivity.this.contentView.getMeasuredHeight();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public void invalidateBlur() {
            ChatActivity.this.contentView.invalidateBlur();
        }

        @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
        public boolean onAccessibilityAction(int i, Bundle bundle) {
            if (i == 16 || i == R.id.acc_action_small_button || i == R.id.acc_action_msg_options) {
                if (((BaseFragment) ChatActivity.this).inPreviewMode) {
                    ChatActivity chatActivity = ChatActivity.this;
                    if (chatActivity.allowExpandPreviewByClick) {
                        if (((BaseFragment) chatActivity).parentLayout != null) {
                            ((BaseFragment) ChatActivity.this).parentLayout.expandPreviewFragment();
                        }
                        return true;
                    }
                }
                return !canPerformActions();
            }
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public static /* synthetic */ class 130 {
        static final /* synthetic */ int[] $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem;

        static {
            int[] iArr = new int[AvatarPreviewer.MenuItem.values().length];
            $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem = iArr;
            try {
                iArr[AvatarPreviewer.MenuItem.OPEN_PROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_GROUP.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_CHANNEL.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEND_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError unused4) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.MENTION.ordinal()] = 5;
            } catch (NoSuchFieldError unused5) {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void openUserProfile(long j) {
        if (j < 0) {
            Bundle bundle = new Bundle();
            bundle.putLong("chat_id", -j);
            if (getMessagesController().checkCanOpenChat(bundle, this)) {
                presentFragment(new ChatActivity(bundle));
            }
        } else if (j != getUserConfig().getClientUserId()) {
            Bundle bundle2 = new Bundle();
            bundle2.putLong("user_id", j);
            if (this.currentEncryptedChat != null && j == this.currentUser.id) {
                bundle2.putLong("dialog_id", this.dialog_id);
            }
            ProfileActivity profileActivity = new ProfileActivity(bundle2);
            TLRPC$User tLRPC$User = this.currentUser;
            profileActivity.setPlayProfileAnimation((tLRPC$User == null || tLRPC$User.id != j) ? 0 : 1);
            presentFragment(profileActivity);
        }
    }

    private boolean openLinkInternally(String str, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, int i) {
        return openLinkInternally(str, chatMessageCell, characterStyle, i, 1);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean openLinkInternally(String str, final ChatMessageCell chatMessageCell, final CharacterStyle characterStyle, final int i, final int i2) {
        int parseInt;
        int i3;
        if (this.currentChat != null && str != null) {
            Runnable runnable = (chatMessageCell == null || (characterStyle == null && i2 == 1)) ? null : new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda189
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.lambda$openLinkInternally$274(i, i2, characterStyle, chatMessageCell);
                }
            };
            if (str.startsWith("tg:privatepost") || str.startsWith("tg://privatepost")) {
                Uri parse = Uri.parse(str.replace("tg:privatepost", "tg://telegram.org").replace("tg://privatepost", "tg://telegram.org"));
                int intValue = Utilities.parseInt((CharSequence) parse.getQueryParameter("post")).intValue();
                long longValue = Utilities.parseLong(parse.getQueryParameter("channel")).longValue();
                int intValue2 = Utilities.parseInt((CharSequence) parse.getQueryParameter("thread")).intValue();
                long j = this.currentChat.id;
                if (longValue == j && intValue != 0) {
                    if (intValue2 != 0) {
                        openDiscussionMessageChat(j, null, intValue2, 0L, -1, 0, null);
                    } else {
                        this.showScrollToMessageError = true;
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue, i, true, 0, false, 0, runnable);
                        }
                    }
                    return true;
                }
            } else if (ChatObject.getPublicUsername(this.currentChat) != null) {
                try {
                    if (publicMsgUrlPattern == null) {
                        publicMsgUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)/([0-9]+)/?([0-9]+)?");
                        voiceChatUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)\\?(voicechat+)");
                    }
                    Matcher matcher = publicMsgUrlPattern.matcher(str);
                    if (matcher.find(2) && matcher.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher.group(2))) {
                        Uri parse2 = Uri.parse(str);
                        int intValue3 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("thread")).intValue();
                        int intValue4 = Utilities.parseInt((CharSequence) parse2.getQueryParameter("comment")).intValue();
                        if (intValue3 == 0 && intValue4 == 0) {
                            if (matcher.group(4) != null) {
                                i3 = Integer.parseInt(matcher.group(3));
                                parseInt = Integer.parseInt(matcher.group(4));
                            } else {
                                parseInt = Integer.parseInt(matcher.group(3));
                                i3 = 0;
                            }
                            if (!ChatObject.isForum(this.currentChat) || i3 == getTopicId()) {
                                this.showScrollToMessageError = true;
                                if (this.chatMode == 2) {
                                    this.chatActivityDelegate.openReplyMessage(parseInt);
                                    finishFragment();
                                } else {
                                    int timestampFromLink = LaunchActivity.getTimestampFromLink(parse2);
                                    this.startFromVideoTimestamp = timestampFromLink;
                                    if (timestampFromLink >= 0) {
                                        this.startFromVideoMessageId = parseInt;
                                    }
                                    scrollToMessageId(parseInt, i, true, 0, false, 0, runnable);
                                }
                                return true;
                            }
                            return false;
                        }
                        return false;
                    }
                    if (!str.startsWith("tg:resolve") && !str.startsWith("tg://resolve")) {
                        Matcher matcher2 = voiceChatUrlPattern.matcher(str);
                        try {
                            if (matcher2.find(2) && matcher2.find(3) && ChatObject.hasPublicLink(this.currentChat, matcher2.group(2))) {
                                String queryParameter = Uri.parse(str).getQueryParameter("voicechat");
                                if (!TextUtils.isEmpty(queryParameter)) {
                                    this.voiceChatHash = queryParameter;
                                    checkGroupCallJoin(true);
                                    return true;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                    }
                    Uri parse3 = Uri.parse(str.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org"));
                    String lowerCase = parse3.getQueryParameter("domain").toLowerCase();
                    int intValue5 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("post")).intValue();
                    int intValue6 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("thread")).intValue();
                    int intValue7 = Utilities.parseInt((CharSequence) parse3.getQueryParameter("comment")).intValue();
                    if (ChatObject.hasPublicLink(this.currentChat, lowerCase) && intValue5 != 0 && intValue6 == 0 && intValue7 == 0) {
                        if (this.chatMode == 2) {
                            this.chatActivityDelegate.openReplyMessage(intValue5);
                            finishFragment();
                        } else {
                            scrollToMessageId(intValue5, i, true, 0, false, 0, runnable);
                        }
                        return true;
                    }
                    return false;
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            } else {
                try {
                    if (privateMsgUrlPattern == null) {
                        privateMsgUrlPattern = Pattern.compile("(https://)?t.me/c/([0-9]+)/([0-9]+)/?([0-9]+)?");
                    }
                    Matcher matcher3 = privateMsgUrlPattern.matcher(str);
                    if (matcher3.find(2) && matcher3.find(3) && matcher3.group(4) == null) {
                        long parseLong = Long.parseLong(matcher3.group(2));
                        int parseInt2 = Integer.parseInt(matcher3.group(3));
                        if (parseLong == this.currentChat.id && parseInt2 != 0) {
                            Uri parse4 = Uri.parse(str);
                            int intValue8 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("thread")).intValue();
                            int intValue9 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("topic")).intValue();
                            int intValue10 = Utilities.parseInt((CharSequence) parse4.getQueryParameter("comment")).intValue();
                            if (intValue8 == 0 && intValue9 == 0 && intValue10 == 0) {
                                this.showScrollToMessageError = true;
                                if (this.chatMode == 2) {
                                    this.chatActivityDelegate.openReplyMessage(parseInt2);
                                    finishFragment();
                                } else {
                                    scrollToMessageId(parseInt2, i, true, 0, false, 0, runnable);
                                }
                                return true;
                            }
                            return false;
                        }
                    }
                } catch (Exception e3) {
                    FileLog.e(e3);
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openLinkInternally$274(int i, int i2, CharacterStyle characterStyle, ChatMessageCell chatMessageCell) {
        this.progressDialogAtMessageId = i;
        this.progressDialogAtMessageType = i2;
        this.progressDialogLinkSpan = characterStyle;
        chatMessageCell.invalidate();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInMenuMode(boolean z) {
        super.setInMenuMode(z);
        ActionBar actionBar = this.actionBar;
        if (actionBar != null) {
            actionBar.createMenu().setVisibility(this.inMenuMode ? 8 : 0);
        }
    }

    public void setPreloadedSticker(TLRPC$Document tLRPC$Document, boolean z) {
        this.preloadedGreetingsSticker = tLRPC$Document;
        this.forceHistoryEmpty = z;
    }

    /* loaded from: classes3.dex */
    public class ChatScrollCallback extends RecyclerAnimationScrollHelper.AnimationCallback {
        private boolean lastBottom;
        private int lastItemOffset;
        private int lastPadding;
        private MessageObject scrollTo;
        private int position = 0;
        private boolean bottom = true;
        private int offset = 0;

        public ChatScrollCallback() {
        }

        static /* synthetic */ MessageObject access$30202(ChatScrollCallback chatScrollCallback, MessageObject messageObject) {
            chatScrollCallback.scrollTo = messageObject;
            return messageObject;
        }

        static /* synthetic */ boolean access$30302(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.lastBottom = z;
            return z;
        }

        static /* synthetic */ int access$30402(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastItemOffset = i;
            return i;
        }

        static /* synthetic */ int access$30502(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.lastPadding = i;
            return i;
        }

        static /* synthetic */ int access$30602(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.position = i;
            return i;
        }

        static /* synthetic */ int access$30702(ChatScrollCallback chatScrollCallback, int i) {
            chatScrollCallback.offset = i;
            return i;
        }

        static /* synthetic */ boolean access$30802(ChatScrollCallback chatScrollCallback, boolean z) {
            chatScrollCallback.bottom = z;
            return z;
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onStartAnimation() {
            super.onStartAnimation();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollCallbackAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollCallbackAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations);
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                ChatActivity.this.pinchToZoomHelper.finishZoom();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onEndAnimation() {
            if (this.scrollTo != null) {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                int indexOf = ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(this.scrollTo);
                if (indexOf >= 0) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(indexOf, (int) ((this.lastItemOffset + this.lastPadding) - ChatActivity.this.chatListViewPaddingTop), this.lastBottom);
                }
            } else {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(this.position, this.offset, this.bottom);
            }
            this.scrollTo = null;
            ChatActivity.this.checkTextureViewPosition = true;
            ChatActivity.this.updateVisibleRows();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatScrollCallback$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatScrollCallback.this.lambda$onEndAnimation$0();
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onEndAnimation$0() {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollCallbackAnimationIndex);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void recycleView(View view) {
            if (view instanceof ChatMessageCell) {
                ChatActivity.this.chatMessageCellsCache.add((ChatMessageCell) view);
            }
        }
    }

    public static boolean isClickableLink(String str) {
        return str.startsWith("https://") || str.startsWith("@") || str.startsWith("#") || str.startsWith("$") || str.startsWith("video?");
    }

    public SimpleTextView getReplyNameTextView() {
        return this.replyNameTextView;
    }

    public SimpleTextView getReplyObjectTextView() {
        return this.replyObjectTextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public ArrayList<ThemeDescription> getThemeDescriptions() {
        if (this.forceDisallowRedrawThemeDescriptions) {
            return null;
        }
        if (this.isPauseOnThemePreview) {
            this.isPauseOnThemePreview = false;
            return null;
        }
        ThemeDescription.ThemeDescriptionDelegate themeDescriptionDelegate = new ThemeDescription.ThemeDescriptionDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda270
            @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public final void didSetColor() {
                ChatActivity.this.lambda$getThemeDescriptions$275();
            }

            @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
            public /* synthetic */ void onAnimationProgress(float f) {
                ThemeDescription.ThemeDescriptionDelegate.-CC.$default$onAnimationProgress(this, f);
            }
        };
        ArrayList<ThemeDescription> arrayList = new ArrayList<>();
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to1));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to2));
        arrayList.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to3));
        arrayList.add(new ThemeDescription(this.messagesSearchListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite));
        if (this.reportType < 0) {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultSubtitle));
        } else {
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
            ActionBar actionBar = this.actionBar;
            int i = ThemeDescription.FLAG_AB_ITEMSCOLOR;
            int i2 = Theme.key_actionBarActionModeDefaultIcon;
            arrayList.add(new ThemeDescription(actionBar, i, null, null, null, null, i2));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, i2));
            arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, i2));
        }
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuBackground));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItem));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, themeDescriptionDelegate, Theme.key_actionBarDefaultSubmenuItemIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault));
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer != null ? chatAvatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        SimpleTextView titleTextView = chatAvatarContainer2 != null ? chatAvatarContainer2.getTitleTextView() : null;
        int i3 = ThemeDescription.FLAG_IMAGECOLOR;
        int i4 = Theme.key_actionBarDefaultSubtitle;
        arrayList.add(new ThemeDescription(titleTextView, i3, null, null, null, null, i4));
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer3 != null ? chatAvatarContainer3.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_status, (Object) null));
        ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer4 != null ? chatAvatarContainer4.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i4, (Object) null));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch));
        ActionBar actionBar2 = this.actionBar;
        int i5 = ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER;
        int i6 = Theme.key_actionBarDefaultSearchPlaceholder;
        arrayList.add(new ThemeDescription(actionBar2, i5, null, null, null, null, i6));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, i6));
        ActionBar actionBar3 = this.actionBar;
        int i7 = ThemeDescription.FLAG_AB_AM_ITEMSCOLOR;
        int i8 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(actionBar3, i7, null, null, null, null, i8));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop));
        arrayList.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
        arrayList.add(new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i8));
        ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer5 != null ? chatAvatarContainer5.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon));
        ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
        arrayList.add(new ThemeDescription(chatAvatarContainer6 != null ? chatAvatarContainer6.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink));
        Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
        Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
        Theme.MessageDrawable messageDrawable3 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
        Theme.MessageDrawable messageDrawable4 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
        Theme.MessageDrawable messageDrawable5 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
        Theme.MessageDrawable messageDrawable6 = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{messageDrawable, messageDrawable2}, null, Theme.key_chat_inBubble));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{(Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected"), (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected")}, null, Theme.key_chat_inBubbleSelected));
        if (messageDrawable != null) {
            Drawable[] shadowDrawables = messageDrawable.getShadowDrawables();
            int i9 = Theme.key_chat_inBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables, null, i9));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable2.getShadowDrawables(), null, i9));
            Drawable[] shadowDrawables2 = messageDrawable3.getShadowDrawables();
            int i10 = Theme.key_chat_outBubbleShadow;
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, shadowDrawables2, null, i10));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, messageDrawable4.getShadowDrawables(), null, i10));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubble));
        if (!this.themeDelegate.isThemeChangeAvailable()) {
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient1));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient2));
            arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable3, messageDrawable4}, null, Theme.key_chat_outBubbleGradient3));
        }
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{messageDrawable5, messageDrawable6}, null, Theme.key_chat_outBubbleGradientSelectedOverlay));
        Paint themedPaint = getThemedPaint("paintChatActionText");
        int i11 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, themedPaint, null, null, i11));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint("paintChatActionText"), null, null, Theme.key_chat_serviceLink));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_botCardDrawable, getThemedDrawable("drawableShareIcon"), getThemedDrawable("drawableReplyIcon"), getThemedDrawable("drawableBotInline"), getThemedDrawable("drawableBotLink"), getThemedDrawable("drawable_botInvite"), getThemedDrawable("drawableGoIcon"), getThemedDrawable("drawableCommentSticker")}, null, Theme.key_chat_serviceIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkIn, (Object) null));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkOut, (Object) null));
        Drawable[] drawableArr = {Theme.chat_msgNoSoundDrawable};
        int i12 = Theme.key_chat_mediaTimeText;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr, null, i12));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheck")}, null, Theme.key_chat_outSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckSelected")}, null, Theme.key_chat_outSentCheckSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckRead"), getThemedDrawable("drawableMsgOutHalfCheck")}, null, Theme.key_chat_outSentCheckRead));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCheckReadSelected"), getThemedDrawable("drawableMsgOutHalfCheckSelected")}, null, Theme.key_chat_outSentCheckReadSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClockSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgStickerHalfCheck"), getThemedDrawable("drawableMsgStickerCheck"), getThemedDrawable("drawableMsgStickerClock"), getThemedDrawable("drawableMsgStickerViews"), getThemedDrawable("drawableMsgStickerReplies"), getThemedDrawable("drawableMsgStickerPinned")}, null, i11));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaSentClock));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViews"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinned")}, null, Theme.key_chat_outViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutViewsSelected"), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable("drawableMsgOutPinnedSelected")}, null, Theme.key_chat_outViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable, Theme.chat_msgInRepliesDrawable, Theme.chat_msgInPinnedDrawable}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable, Theme.chat_msgInRepliesSelectedDrawable, Theme.chat_msgInPinnedSelectedDrawable}, null, Theme.key_chat_inViewsSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable, Theme.chat_msgMediaRepliesDrawable, Theme.chat_msgMediaPinnedDrawable}, null, Theme.key_chat_mediaViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenu")}, null, Theme.key_chat_outMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutMenuSelected")}, null, Theme.key_chat_outMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu));
        Drawable[] drawableArr2 = {getThemedDrawable("drawableMsgOutInstant")};
        int i13 = Theme.key_chat_outInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr2, null, i13));
        Drawable[] drawableArr3 = {Theme.chat_msgInInstantDrawable, Theme.chat_commentDrawable, Theme.chat_commentArrowDrawable};
        int i14 = Theme.key_chat_inInstant;
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, drawableArr3, null, i14));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudio"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i13));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable("drawableMsgOutCallAudioSelected"), getThemedDrawable("drawableMsgOutCallVideo")}, null, i13));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallDrawable, null, i14));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallSelectedDrawable, null, Theme.key_chat_inInstantSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable}, null, Theme.key_chat_outGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownRedDrawable}, null, Theme.key_fill_RedNormal));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_chat_inGreenCall));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, themeDescriptionDelegate, Theme.key_chat_selectedBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatBotButton"), null, null, Theme.key_chat_botButtonText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint("paintChatTimeBackground"), null, null, Theme.key_chat_mediaTimeBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPsaNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, i12));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_outUrlPaint, null, null, Theme.key_chat_outLinkSelectBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, Theme.key_chat_textSelectBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoader));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoaderSelected));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIconSelected));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLocationBackground));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollCorrectAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollWrongAnswer));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[0]}, null, Theme.key_chat_inPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[1]}, null, Theme.key_chat_outPreviewInstantText));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[0]}, null, Theme.key_chat_inViews));
        arrayList.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[1]}, null, Theme.key_chat_outViews));
        if (!this.themeDelegate.isThemeChangeAvailable()) {
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, Theme.key_chats_unreadCounter));
            TextPaint[] textPaintArr = Theme.dialogs_namePaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr[0], textPaintArr[1], Theme.dialogs_searchNamePaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_name));
            TextPaint[] textPaintArr2 = Theme.dialogs_nameEncryptedPaint;
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{textPaintArr2[0], textPaintArr2[1], Theme.dialogs_searchNameEncryptedPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_secretName));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, Theme.key_chats_secretIcon));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable, Theme.dialogs_fakeDrawable}, null, Theme.key_chats_draft));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint[1], null, null, Theme.key_chats_message_threeLines));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messageNamePaint, null, null, Theme.key_chats_nameMessage_threeLines));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_nameMessage));
            arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chats_attachMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, Theme.dialogs_messagePrintingPaint, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_actionMessage));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_timePaint, null, null, Theme.key_chats_date));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkDrawable}, null, Theme.key_chats_sentCheck));
            arrayList.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkReadDrawable, Theme.dialogs_halfCheckDrawable}, null, Theme.key_chats_sentReadCheck));
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        Paint themedPaint2 = getThemedPaint("paintChatComposeBackground");
        int i15 = Theme.key_chat_messagePanelBackground;
        arrayList.add(new ThemeDescription(mentionsContainerView, 0, null, themedPaint2, null, null, i15));
        MentionsContainerView mentionsContainerView2 = this.mentionContainer;
        Drawable[] drawableArr4 = {Theme.chat_composeShadowDrawable};
        int i16 = Theme.key_chat_messagePanelShadow;
        arrayList.add(new ThemeDescription(mentionsContainerView2, 0, null, null, drawableArr4, null, i16));
        arrayList.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowRoundDrawable}, null, i15));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i15));
        arrayList.add(new ThemeDescription(this.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i16));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i15));
        arrayList.add(new ThemeDescription(this.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i16));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i15));
        arrayList.add(new ThemeDescription(this.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i16));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i15));
        arrayList.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i16));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, getThemedPaint("paintChatComposeBackground"), null, null, i15));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, i16));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelText));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_CURSORCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCursor));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelHint));
        int i17 = Theme.key_chat_messagePanelSend;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i17));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, 24, null, i17));
        int i18 = Theme.key_chat_messagePanelIcons;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i18));
        int i19 = Theme.key_listSelector;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i18));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i18));
        int i20 = Theme.key_chat_recordedVoiceDot;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i18));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoTimelineView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i17));
        int i21 = Theme.key_chat_messagePanelVoicePressed;
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i21));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_messagePanelVoiceLock));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceLockShadow));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordTime));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        int i22 = Theme.key_chat_recordVoiceCancel;
        arrayList.add(new ThemeDescription(chatActivityEnterView, 0, null, null, null, null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceDuration));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, i22));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressInner1));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressOuter1));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCancelInlineBot));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i19));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i20));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceBackground));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgress));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgressInner));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_emojiPanelNewTrending));
        arrayList.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_recordedVoicePlayPause));
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView2 != null ? chatActivityEnterView2.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackground));
        ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView3 != null ? chatActivityEnterView3.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelShadowLine));
        ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView4 != null ? chatActivityEnterView4.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelEmptyText));
        ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView5 != null ? chatActivityEnterView5.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIcon));
        ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView6 != null ? chatActivityEnterView6.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelIconSelected));
        ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView7 != null ? chatActivityEnterView7.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelector));
        ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView8 != null ? chatActivityEnterView8.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelBackspace));
        ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView9 != null ? chatActivityEnterView9.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingTitle));
        ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView10 != null ? chatActivityEnterView10.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelTrendingDescription));
        ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView11 != null ? chatActivityEnterView11.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiBottomPanelIcon));
        ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView12 != null ? chatActivityEnterView12.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiSearchIcon));
        ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView13 != null ? chatActivityEnterView13.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerSetNameHighlight));
        ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
        arrayList.add(new ThemeDescription(chatActivityEnterView14 != null ? chatActivityEnterView14.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, themeDescriptionDelegate, Theme.key_chat_emojiPanelStickerPackSelectorLine));
        ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
        if (chatActivityEnterView15 != null) {
            TrendingStickersAlert trendingStickersAlert = chatActivityEnterView15.getTrendingStickersAlert();
            if (trendingStickersAlert != null) {
                arrayList.addAll(trendingStickersAlert.getThemeDescriptions());
            }
            arrayList.add(new ThemeDescription((View) null, 0, (Class[]) null, (String[]) null, (Paint[]) null, new Drawable[]{this.chatActivityEnterView.getStickersArrowDrawable()}, (ThemeDescription.ThemeDescriptionDelegate) null, i18));
        }
        int i23 = 0;
        while (i23 < 2) {
            UndoView undoView = i23 == 0 ? this.undoView : this.topUndoView;
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_undo_background));
            int i24 = Theme.key_undo_cancelColor;
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i24));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i24));
            int i25 = Theme.key_undo_infoColor;
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i24));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
            arrayList.add(new ThemeDescription(undoView, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
            arrayList.add(new ThemeDescription(undoView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i25));
            i23++;
        }
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPlayPause));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerTitle));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPerformer));
        int i26 = Theme.key_inappPlayerClose;
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"subtitleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i26));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i26));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallBackground));
        arrayList.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallText));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_topPanelLine));
        arrayList.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, themeDescriptionDelegate, Theme.key_windowBackgroundWhite));
        arrayList.add(new ThemeDescription(this.pinnedCounterTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        for (int i27 = 0; i27 < 2; i27++) {
            arrayList.add(new ThemeDescription(this.pinnedNameTextView[i27], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
            arrayList.add(new ThemeDescription(this.pinnedMessageTextView[i27], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        }
        arrayList.add(new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
        arrayList.add(new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
        ImageView imageView = this.closePinned;
        int i28 = ThemeDescription.FLAG_IMAGECOLOR;
        int i29 = Theme.key_chat_topPanelClose;
        arrayList.add(new ThemeDescription(imageView, i28, null, null, null, null, i29));
        arrayList.add(new ThemeDescription(this.pinnedListButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i29));
        arrayList.add(new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i29));
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        int i30 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i31 = Theme.key_chat_topPanelBackground;
        arrayList.add(new ThemeDescription(blurredFrameLayout, i30, null, null, null, null, i31));
        arrayList.add(new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i31));
        arrayList.add(new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i31));
        TextView textView = this.addToContactsButton;
        int i32 = ThemeDescription.FLAG_TEXTCOLOR;
        int i33 = Theme.key_chat_addContact;
        arrayList.add(new ThemeDescription(textView, i32, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_text_RedBold));
        arrayList.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, i33));
        arrayList.add(new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine));
        SimpleTextView simpleTextView = this.replyNameTextView;
        int i34 = ThemeDescription.FLAG_TEXTCOLOR;
        int i35 = Theme.key_chat_replyPanelName;
        arrayList.add(new ThemeDescription(simpleTextView, i34, null, null, null, null, i35));
        SimpleTextView simpleTextView2 = this.replyObjectTextView;
        int i36 = ThemeDescription.FLAG_TEXTCOLOR;
        int i37 = Theme.key_windowBackgroundWhiteGrayText;
        arrayList.add(new ThemeDescription(simpleTextView2, i36, null, null, null, null, i37));
        arrayList.add(new ThemeDescription(this.replyObjectHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i37));
        arrayList.add(new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons));
        arrayList.add(new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i35));
        ImageView imageView2 = this.searchUpButton;
        int i38 = ThemeDescription.FLAG_IMAGECOLOR;
        int i39 = Theme.key_chat_searchPanelIcons;
        arrayList.add(new ThemeDescription(imageView2, i38, null, null, null, null, i39));
        ImageView imageView3 = this.searchUpButton;
        int i40 = ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE;
        int i41 = Theme.key_actionBarActionModeDefaultSelector;
        arrayList.add(new ThemeDescription(imageView3, i40, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i39));
        arrayList.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i39));
        arrayList.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i39));
        arrayList.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_searchPanelText));
        arrayList.add(new ThemeDescription(this.searchAsListTogglerView, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        TextView textView2 = this.replyButton;
        int i42 = ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR;
        int i43 = Theme.key_actionBarActionModeDefaultIcon;
        arrayList.add(new ThemeDescription(textView2, i42, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i43));
        arrayList.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, i41));
        arrayList.add(new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText));
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        int i44 = Theme.key_chat_fieldOverlayText;
        arrayList.add(new ThemeDescription(unreadCounterTextView, 0, null, null, null, null, i44));
        UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
        int i45 = Theme.key_chat_goDownButtonCounterBackground;
        arrayList.add(new ThemeDescription(unreadCounterTextView2, 0, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_messagePanelBackground));
        arrayList.add(new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, i44));
        arrayList.add(new ThemeDescription(this.bottomOverlayImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i44));
        ChatBigEmptyView chatBigEmptyView = this.bigEmptyView;
        int i46 = ThemeDescription.FLAG_TEXTCOLOR;
        int i47 = Theme.key_chat_serviceText;
        arrayList.add(new ThemeDescription(chatBigEmptyView, i46, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartBackground));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartArrowIcon));
        arrayList.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartText));
        View view = this.progressView2;
        int i48 = ThemeDescription.FLAG_SERVICEBACKGROUND;
        int i49 = Theme.key_chat_serviceBackground;
        arrayList.add(new ThemeDescription(view, i48, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, i49));
        if (this.mentionContainer != null) {
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_botSwitchToInlineText));
            int i50 = Theme.key_windowBackgroundWhiteBlackText;
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i50));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteGrayText3));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, Theme.key_chat_inlineResultIcon));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, i50));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
            arrayList.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider));
        }
        HintView hintView = this.gifHintTextView;
        int i51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i52 = Theme.key_chat_gifSaveHintBackground;
        arrayList.add(new ThemeDescription(hintView, i51, null, null, null, null, i52));
        HintView hintView2 = this.gifHintTextView;
        int i53 = ThemeDescription.FLAG_TEXTCOLOR;
        int i54 = Theme.key_chat_gifSaveHintText;
        arrayList.add(new ThemeDescription(hintView2, i53, null, null, null, null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i52));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i54));
        arrayList.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i52));
        arrayList.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i45));
        CounterView counterView = this.pagedownButtonCounter;
        int i55 = ThemeDescription.FLAG_TEXTCOLOR;
        int i56 = Theme.key_chat_goDownButtonCounter;
        arrayList.add(new ThemeDescription(counterView, i55, null, null, null, null, i56));
        ImageView imageView4 = this.pagedownButtonImage;
        int i57 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        int i58 = Theme.key_chat_goDownButton;
        arrayList.add(new ThemeDescription(imageView4, i57, null, null, null, null, i58));
        ImageView imageView5 = this.pagedownButtonImage;
        int i59 = ThemeDescription.FLAG_IMAGECOLOR;
        int i60 = Theme.key_chat_goDownButtonIcon;
        arrayList.add(new ThemeDescription(imageView5, i59, null, null, null, null, i60));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i45));
        arrayList.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, i56));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, i58));
        arrayList.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, i60));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, i49));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i47));
        arrayList.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, i49));
        int i61 = Theme.key_chat_attachIcon;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachGalleryText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachAudioText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachFileText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachContactText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachLocationText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, i61));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPollText));
        arrayList.add(new ThemeDescription(null, 0, null, null, new Drawable[]{Theme.chat_attachEmptyDrawable}, null, Theme.key_chat_attachEmptyImage));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_attachPhotoBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogTextGray2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogScrollGlow));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogGrayLine));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogCameraIcon));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_dialogButtonSelector));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteLinkSelection));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inTextSelectionHighlight));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_TextSelectionCursor));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue1));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient3));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin2));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundGray));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonBackground));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonText));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonText));
        int i62 = Theme.key_chat_inReactionButtonTextSelected;
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i62));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, null, i62));
        arrayList.add(new ThemeDescription(null, 0, null, null, null, themeDescriptionDelegate, Theme.key_chat_BlurAlpha));
        ChatActivityEnterView chatActivityEnterView16 = this.chatActivityEnterView;
        if (chatActivityEnterView16 != null && chatActivityEnterView16.botCommandsMenuContainer != null) {
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"description"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteBlackText));
            arrayList.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"command"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, i37));
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        if (chatActivityMemberRequestsDelegate != null) {
            chatActivityMemberRequestsDelegate.fillThemeDescriptions(arrayList);
        }
        Iterator<ThemeDescription> it = arrayList.iterator();
        while (it.hasNext()) {
            it.next().resourcesProvider = this.themeDelegate;
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getThemeDescriptions$275() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateColors();
        }
        Theme.refreshAttachButtonsColors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.checkColors();
        }
        RecyclerListView recyclerListView = this.chatListView;
        int i = 0;
        if (recyclerListView != null) {
            int childCount = recyclerListView.getChildCount();
            for (int i2 = 0; i2 < childCount; i2++) {
                View childAt = this.chatListView.getChildAt(i2);
                if (childAt instanceof ChatMessageCell) {
                    ((ChatMessageCell) childAt).createSelectorDrawable(0);
                } else if (childAt instanceof ChatActionCell) {
                    ((ChatActionCell) childAt).setInvalidateColors(true);
                }
            }
        }
        RecyclerListView recyclerListView2 = this.messagesSearchListView;
        if (recyclerListView2 != null) {
            int childCount2 = recyclerListView2.getChildCount();
            for (int i3 = 0; i3 < childCount2; i3++) {
                View childAt2 = this.messagesSearchListView.getChildAt(i3);
                if (childAt2 instanceof DialogCell) {
                    ((DialogCell) childAt2).update(0);
                }
            }
        }
        if (this.scrimPopupWindowItems != null) {
            while (true) {
                ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
                if (i >= actionBarMenuSubItemArr.length) {
                    break;
                }
                actionBarMenuSubItemArr[i].setColors(getThemedColor(Theme.key_actionBarDefaultSubmenuItem), getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon));
                this.scrimPopupWindowItems[i].setSelectorColor(getThemedColor(Theme.key_dialogButtonSelector));
                i++;
            }
        }
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            View contentView = actionBarPopupWindow.getContentView();
            contentView.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
            contentView.invalidate();
        }
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView != null) {
            instantCameraView.invalidateBlur();
        }
        PinnedLineView pinnedLineView = this.pinnedLineView;
        if (pinnedLineView != null) {
            pinnedLineView.updateColors();
        }
        ChatActivityEnterTopView chatActivityEnterTopView = this.chatActivityEnterTopView;
        if (chatActivityEnterTopView != null && chatActivityEnterTopView.getEditView() != null) {
            this.chatActivityEnterTopView.getEditView().updateColors();
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem != null) {
            actionBarMenuItem.updateColor();
        }
        setNavigationBarColor(getThemedColor(Theme.key_windowBackgroundGray));
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.updateColors();
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        ChatActivityFragmentView chatActivityFragmentView = this.contentView;
        if (chatActivityFragmentView != null) {
            chatActivityFragmentView.invalidateBlurredViews();
            this.contentView.invalidateBackground();
        }
        INavigationLayout iNavigationLayout = this.parentLayout;
        if (iNavigationLayout != null && iNavigationLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
        SuggestEmojiView suggestEmojiView = this.suggestEmojiPanel;
        if (suggestEmojiView != null) {
            suggestEmojiView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
        if (chatAvatarContainer2 != null && chatAvatarContainer2.getTimeItem() != null) {
            this.avatarContainer.getTimeItem().invalidate();
        }
        TranslateButton translateButton = this.translateButton;
        if (translateButton != null) {
            translateButton.updateColors();
        }
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public ChatAvatarContainer getAvatarContainer() {
        return this.avatarContainer;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public AnimatorSet onCustomTransitionAnimation(boolean z, Runnable runnable) {
        ValueAnimator ofFloat;
        if (z && this.fromPullingDownTransition && getParentLayout() != null && getParentLayout().getFragmentStack().size() > 1) {
            BaseFragment baseFragment = getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
            if (baseFragment instanceof ChatActivity) {
                this.wasManualScroll = true;
                final ChatActivity chatActivity = (ChatActivity) baseFragment;
                chatActivity.setTransitionToChatActivity(this);
                this.fragmentView.setAlpha(0.0f);
                this.contentView.setSkipBackgroundDrawing(true);
                this.avatarContainer.setTranslationY(AndroidUtilities.dp(8.0f));
                this.avatarContainer.getAvatarImageView().setAlpha(0.0f);
                this.avatarContainer.getAvatarImageView().setTranslationY(-AndroidUtilities.dp(8.0f));
                this.toPullingDownTransition = true;
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                FrameLayout frameLayout = this.bottomOverlay;
                if (frameLayout != null) {
                    frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, 1073741824), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                int measuredHeight = chatActivityEnterView2 == null ? 0 : chatActivityEnterView2.getMeasuredHeight();
                FrameLayout frameLayout2 = this.bottomOverlay;
                int max = Math.max(measuredHeight, frameLayout2 == null ? 0 : frameLayout2.getMeasuredHeight());
                ChatActivityEnterView chatActivityEnterView3 = chatActivity.chatActivityEnterView;
                int measuredHeight2 = chatActivityEnterView3 == null ? 0 : chatActivityEnterView3.getMeasuredHeight();
                FrameLayout frameLayout3 = this.bottomOverlay;
                this.pullingBottomOffset = -(Math.max(measuredHeight2, frameLayout3 == null ? 0 : frameLayout3.getMeasuredHeight()) - max);
                final boolean z2 = chatActivity.fragmentContextView.getMeasuredHeight() != this.fragmentContextView.getMeasuredHeight();
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda17
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.this.lambda$onCustomTransitionAnimation$276(chatActivity, z2, valueAnimator);
                    }
                });
                updateChatListViewTopPadding();
                AnimatorSet animatorSet = new AnimatorSet();
                this.fragmentTransition = animatorSet;
                animatorSet.addListener(new 127(chatActivity, runnable));
                this.fragmentTransition.setDuration(300L);
                this.fragmentTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
                this.fragmentTransition.playTogether(ofFloat2);
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
                return this.fragmentTransition;
            }
        }
        if (!this.switchFromTopics || getParentLayout() == null || getParentLayout().getFragmentStack().size() <= 1) {
            return null;
        }
        BaseFragment baseFragment2 = getParentLayout().getFragmentStack().get(getParentLayout().getFragmentStack().size() - 2);
        if (baseFragment2 instanceof TopicsFragment) {
            float[] fArr = {1.0f, 0.0f};
            if (z) {
                // fill-array-data instruction
                fArr[0] = 0.0f;
                fArr[1] = 1.0f;
                ofFloat = ValueAnimator.ofFloat(fArr);
            } else {
                ofFloat = ValueAnimator.ofFloat(fArr);
            }
            baseFragment2.getFragmentView().getWidth();
            this.switchingFromTopicsProgress = z ? 0.0f : 1.0f;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity.128
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.switchingFromTopicsProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
                    ChatActivity.this.contentView.invalidate();
                }
            });
            this.switchingFromTopics = true;
            this.actionBar.invalidate();
            this.contentView.invalidate();
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.fragmentTransition = animatorSet2;
            animatorSet2.addListener(new 129(z, runnable));
            this.fragmentTransition.setDuration(150L);
            this.fragmentTransition.playTogether(ofFloat);
            if (z) {
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
            } else {
                this.fragmentTransition.start();
            }
            return this.fragmentTransition;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onCustomTransitionAnimation$276(ChatActivity chatActivity, boolean z, ValueAnimator valueAnimator) {
        float floatValue = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        chatActivity.setTransitionToChatProgress(floatValue);
        float f = 1.0f - floatValue;
        float dp = AndroidUtilities.dp(8.0f) * f;
        this.avatarContainer.setTranslationY(dp);
        this.avatarContainer.getAvatarImageView().setTranslationY(-dp);
        float f2 = (-AndroidUtilities.dp(8.0f)) * floatValue;
        chatActivity.avatarContainer.setTranslationY(f2);
        chatActivity.avatarContainer.getAvatarImageView().setTranslationY(-f2);
        float f3 = (floatValue * 0.2f) + 0.8f;
        this.avatarContainer.getAvatarImageView().setScaleX(f3);
        this.avatarContainer.getAvatarImageView().setScaleY(f3);
        this.avatarContainer.getAvatarImageView().setAlpha(floatValue);
        float f4 = (0.2f * f) + 0.8f;
        chatActivity.avatarContainer.getAvatarImageView().setScaleX(f4);
        chatActivity.avatarContainer.getAvatarImageView().setScaleY(f4);
        chatActivity.avatarContainer.getAvatarImageView().setAlpha(f);
        ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        FrameLayout frameLayout = chatActivity.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.setTranslationY((-this.pullingBottomOffset) * floatValue);
        }
        if (z) {
            chatActivity.fragmentContextView.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout = chatActivity.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setAlpha(f);
        }
        BlurredFrameLayout blurredFrameLayout2 = chatActivity.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.setAlpha(f);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 127 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ ChatActivity val$previousChat;

        127(ChatActivity chatActivity, Runnable runnable) {
            this.val$previousChat = chatActivity;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$127$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.127.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            super.onAnimationEnd(animator);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.contentView.setSkipBackgroundDrawing(false);
            ChatActivity.this.toPullingDownTransition = false;
            this.val$previousChat.setTransitionToChatProgress(0.0f);
            this.val$previousChat.setTransitionToChatActivity(null);
            ((BaseFragment) ChatActivity.this).fragmentView.setAlpha(1.0f);
            this.val$callback.run();
            ChatActivity.this.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setTranslationY(0.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            if (this.val$previousChat.pinnedMessageView != null) {
                this.val$previousChat.pinnedMessageView.setAlpha(1.0f);
            }
            if (this.val$previousChat.topChatPanelView != null) {
                this.val$previousChat.topChatPanelView.setAlpha(1.0f);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 129 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ boolean val$isOpen;

        129(boolean z, Runnable runnable) {
            this.val$isOpen = z;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animator) {
            super.onAnimationStart(animator);
            this.index = NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animator) {
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.fragmentOpened = true;
            ((BaseFragment) chatActivity).fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            if (this.val$isOpen) {
                ChatActivity.this.switchingFromTopics = false;
            }
            ((BaseFragment) ChatActivity.this).actionBar.invalidate();
            ChatActivity.this.contentView.invalidate();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$129$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.129.this.lambda$onAnimationEnd$0();
                }
            }, 32L);
            this.val$callback.run();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onAnimationEnd$0() {
            NotificationCenter.getInstance(((BaseFragment) ChatActivity.this).currentAccount).onAnimationFinish(this.index);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatActivity(ChatActivity chatActivity) {
        this.pullingDownAnimateToActivity = chatActivity;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setTransitionToChatProgress(float f) {
        this.pullingDownAnimateProgress = f;
        this.fragmentView.invalidate();
        this.chatListView.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void showChatThemeBottomSheet() {
        this.chatThemeBottomSheet = new ChatThemeBottomSheet(this, this.themeDelegate);
        this.chatListView.setOnInterceptTouchListener(ChatActivity$$ExternalSyntheticLambda282.INSTANCE);
        setChildrenEnabled(this.contentView, false);
        showDialog(this.chatThemeBottomSheet, new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda50
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.lambda$showChatThemeBottomSheet$278(dialogInterface);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showChatThemeBottomSheet$278(DialogInterface dialogInterface) {
        this.chatThemeBottomSheet = null;
        this.chatListView.setOnInterceptTouchListener(null);
        setChildrenEnabled(this.contentView, true);
        ChatThemeController.clearWallpaperThumbImages();
    }

    private void setChildrenEnabled(View view, boolean z) {
        if (view instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) view;
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                setChildrenEnabled(viewGroup.getChildAt(i), z);
            }
        }
        if (view == this.chatListView || view == this.contentView) {
            return;
        }
        view.setEnabled(z);
    }

    private void checkThemeEmoticonOrWallpaper() {
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda161
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.lambda$checkThemeEmoticonOrWallpaper$279();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkThemeEmoticonOrWallpaper$279() {
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$UserFull tLRPC$UserFull = this.userInfo;
        String str = tLRPC$UserFull != null ? tLRPC$UserFull.theme_emoticon : null;
        if (str == null && (tLRPC$ChatFull = this.chatInfo) != null) {
            str = tLRPC$ChatFull.theme_emoticon;
        }
        setChatThemeEmoticon(str);
    }

    private void setChatThemeEmoticon(String str) {
        TLRPC$UserFull userFull;
        if (this.themeDelegate == null) {
            return;
        }
        ChatThemeController.getInstance(this.currentAccount).setDialogTheme(this.dialog_id, str, false);
        if (!TextUtils.isEmpty(str)) {
            ChatThemeController.requestChatTheme(str, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda269
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.this.lambda$setChatThemeEmoticon$280((EmojiThemes) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC$TL_error tLRPC$TL_error) {
                    ResultCallback.-CC.$default$onError(this, tLRPC$TL_error);
                }
            });
        }
        TLRPC$WallPaper tLRPC$WallPaper = (this.dialog_id < 0 || (userFull = getMessagesController().getUserFull(this.dialog_id)) == null) ? null : userFull.wallpaper;
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(themeDelegate.chatTheme, tLRPC$WallPaper, this.openAnimationStartTime != 0, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setChatThemeEmoticon$280(EmojiThemes emojiThemes) {
        ThemeDelegate themeDelegate = this.themeDelegate;
        themeDelegate.setCurrentTheme(emojiThemes, themeDelegate.wallpaper, this.openAnimationStartTime != 0, null);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Drawable getThemedDrawable(String str) {
        Drawable drawable = this.themeDelegate.getDrawable(str);
        return drawable != null ? drawable : super.getThemedDrawable(str);
    }

    public Paint getThemedPaint(String str) {
        Paint paint = this.themeDelegate.getPaint(str);
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public float getChatListViewPadding() {
        return this.chatListViewPaddingTop;
    }

    public FragmentContextView getFragmentContextView() {
        return this.fragmentContextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Theme.ResourcesProvider getResourceProvider() {
        return this.themeDelegate;
    }

    /* loaded from: classes3.dex */
    public class ThemeDelegate implements Theme.ResourcesProvider, ForwardingPreviewView.ResourcesDelegate {
        private SparseIntArray animatingColors;
        Theme.MessageDrawable animatingMessageDrawable;
        Theme.MessageDrawable animatingMessageMediaDrawable;
        private Drawable backgroundDrawable;
        private List<EmojiThemes> cachedThemes;
        private EmojiThemes chatTheme;
        int currentServiceColor;
        boolean drawSelectedGradient;
        boolean drawServiceGradient;
        private AnimatorSet patternAlphaAnimator;
        private ValueAnimator patternIntensityAnimator;
        private Bitmap serviceBitmap;
        private Bitmap serviceBitmapSource;
        private Canvas serviceCanvas;
        private BitmapShader serviceShader;
        private BitmapShader serviceShaderSource;
        Bitmap startServiceBitmap;
        int startServiceButtonColor;
        int startServiceColor;
        int startServiceIconColor;
        int startServiceLinkColor;
        int startServiceTextColor;
        private boolean useSourceShader;
        private TLRPC$WallPaper wallpaper;
        private final HashMap<String, Drawable> currentDrawables = new HashMap<>();
        private final HashMap<String, Paint> currentPaints = new HashMap<>();
        private final Matrix actionMatrix = new Matrix();
        private SparseIntArray currentColors = new SparseIntArray();
        private Paint paint = new Paint();
        private boolean isDark = Theme.getActiveTheme().isDark();

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ ColorFilter getAnimatedEmojiColorFilter() {
            ColorFilter colorFilter;
            colorFilter = Theme.chat_animatedEmojiTextColorFilter;
            return colorFilter;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ int getColorOrDefault(int i) {
            int color;
            color = getColor(i);
            return color;
        }

        static /* synthetic */ TLRPC$WallPaper access$39300(ThemeDelegate themeDelegate) {
            return themeDelegate.wallpaper;
        }

        static /* synthetic */ EmojiThemes access$40300(ThemeDelegate themeDelegate) {
            return themeDelegate.chatTheme;
        }

        ThemeDelegate() {
            boolean z = false;
            if (isThemeChangeAvailable()) {
                this.chatTheme = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogTheme(ChatActivity.this.dialog_id);
                TLRPC$WallPaper dialogWallpaper = ChatThemeController.getInstance(((BaseFragment) ChatActivity.this).currentAccount).getDialogWallpaper(ChatActivity.this.dialog_id);
                this.wallpaper = dialogWallpaper;
                EmojiThemes emojiThemes = this.chatTheme;
                if (emojiThemes != null || dialogWallpaper != null) {
                    setupChatTheme(emojiThemes, dialogWallpaper, false, true);
                    z = true;
                }
            }
            if (!z && ThemeEditorView.getInstance() == null) {
                Theme.refreshThemeColors(true, true);
            } else {
                AndroidUtilities.runOnUIThread(ChatActivity$ThemeDelegate$$ExternalSyntheticLambda6.INSTANCE);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0() {
            NotificationCenter globalInstance = NotificationCenter.getGlobalInstance();
            int i = NotificationCenter.didSetNewTheme;
            Boolean bool = Boolean.TRUE;
            globalInstance.lambda$postNotificationNameOnUIThread$1(i, Boolean.FALSE, bool, bool);
        }

        public List<EmojiThemes> getCachedThemes() {
            return this.cachedThemes;
        }

        public void setCachedThemes(List<EmojiThemes> list) {
            this.cachedThemes = list;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public int getColor(int i) {
            int indexOfKey;
            int indexOfKey2;
            SparseIntArray sparseIntArray = this.animatingColors;
            if (sparseIntArray != null && (indexOfKey2 = sparseIntArray.indexOfKey(i)) >= 0) {
                return this.animatingColors.valueAt(indexOfKey2);
            }
            if (this.chatTheme == null) {
                return Theme.getColor(i);
            }
            int indexOfKey3 = this.currentColors.indexOfKey(i);
            if (indexOfKey3 >= 0) {
                return this.currentColors.valueAt(indexOfKey3);
            }
            int fallbackKey = Theme.getFallbackKey(i);
            if (fallbackKey >= 0 && (indexOfKey = this.currentColors.indexOfKey(fallbackKey)) >= 0) {
                return this.currentColors.valueAt(indexOfKey);
            }
            return Theme.getColor(i);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public int getCurrentColor(int i) {
            return getCurrentColor(i, false);
        }

        public int getCurrentColor(int i, boolean z) {
            int indexOfKey;
            SparseIntArray sparseIntArray;
            int indexOfKey2;
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return Theme.getColor(i);
            }
            if (!z && (sparseIntArray = this.animatingColors) != null && (indexOfKey2 = sparseIntArray.indexOfKey(i)) >= 0) {
                return this.animatingColors.valueAt(indexOfKey2);
            }
            SparseIntArray sparseIntArray2 = this.currentColors;
            if (sparseIntArray2 != null && (indexOfKey = sparseIntArray2.indexOfKey(i)) >= 0) {
                return this.currentColors.valueAt(indexOfKey);
            }
            return Theme.getColor(i);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void setAnimatedColor(int i, int i2) {
            SparseIntArray sparseIntArray = this.animatingColors;
            if (sparseIntArray != null) {
                sparseIntArray.put(i, i2);
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            if (this.backgroundDrawable == null || (bitmap = this.serviceBitmap) == null || (bitmapShader = this.serviceShader) == null) {
                Theme.applyServiceShaderMatrix(i, i2, f, f2);
            } else if (this.useSourceShader) {
                Theme.applyServiceShaderMatrix(this.serviceBitmapSource, this.serviceShaderSource, this.actionMatrix, i, i2, f, f2);
            } else {
                Theme.applyServiceShaderMatrix(bitmap, bitmapShader, this.actionMatrix, i, i2, f, f2);
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public boolean hasGradientService() {
            return this.backgroundDrawable != null ? this.serviceShader != null : Theme.hasGradientService();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Drawable getDrawable(String str) {
            if (this.currentDrawables.isEmpty()) {
                return null;
            }
            return this.currentDrawables.get(str);
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Paint getPaint(String str) {
            if (this.chatTheme == null && this.backgroundDrawable == null) {
                return null;
            }
            return this.currentPaints.get(str);
        }

        public boolean isThemeChangeAvailable() {
            ChatActivity chatActivity = ChatActivity.this;
            return chatActivity.currentChat == null && chatActivity.currentEncryptedChat == null && !chatActivity.currentUser.bot && chatActivity.dialog_id >= 0;
        }

        public EmojiThemes getCurrentTheme() {
            return this.chatTheme;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public Drawable getWallpaperDrawable() {
            Drawable drawable = this.backgroundDrawable;
            return drawable != null ? drawable : Theme.getCachedWallpaperNonBlocking();
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public boolean isWallpaperMotion() {
            if (this.chatTheme != null) {
                return false;
            }
            return Theme.isWallpaperMotion();
        }

        public void setCurrentTheme(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z, Boolean bool) {
            setCurrentTheme(emojiThemes, tLRPC$WallPaper, z, bool, false);
        }

        public void setCurrentTheme(final EmojiThemes emojiThemes, final TLRPC$WallPaper tLRPC$WallPaper, final boolean z, Boolean bool, boolean z2) {
            if (((BaseFragment) ChatActivity.this).parentLayout == null) {
                return;
            }
            boolean booleanValue = bool != null ? bool.booleanValue() : this.isDark;
            String emoticon = emojiThemes != null ? emojiThemes.getEmoticon() : null;
            EmojiThemes emojiThemes2 = this.chatTheme;
            String emoticon2 = emojiThemes2 != null ? emojiThemes2.getEmoticon() : null;
            TLRPC$WallPaper tLRPC$WallPaper2 = this.wallpaper;
            if (!z2) {
                if (!isThemeChangeAvailable()) {
                    return;
                }
                if (TextUtils.equals(emoticon2, emoticon) && this.isDark == booleanValue && ChatThemeController.equals(tLRPC$WallPaper, tLRPC$WallPaper2)) {
                    return;
                }
            }
            this.isDark = booleanValue;
            Theme.ThemeInfo currentNightTheme = booleanValue ? Theme.getCurrentNightTheme() : Theme.getCurrentTheme();
            INavigationLayout.ThemeAnimationSettings themeAnimationSettings = new INavigationLayout.ThemeAnimationSettings(currentNightTheme, currentNightTheme.currentAccentId, currentNightTheme.isDark(), !z);
            if (this.chatTheme == null && this.wallpaper == null) {
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                this.drawServiceGradient = cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable;
                initServiceMessageColors(cachedWallpaperNonBlocking);
                this.startServiceTextColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceText);
                this.startServiceLinkColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceButtonColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceIconColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceIcon);
            } else {
                if (this.drawServiceGradient) {
                    Drawable drawable = this.backgroundDrawable;
                    if (drawable instanceof MotionBackgroundDrawable) {
                        this.startServiceBitmap = ((MotionBackgroundDrawable) drawable).getBitmap();
                    }
                }
                Drawable drawable2 = this.backgroundDrawable;
                if (drawable2 != null) {
                    initServiceMessageColors(drawable2);
                }
            }
            this.startServiceColor = this.currentServiceColor;
            this.startServiceTextColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
            this.startServiceLinkColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            this.startServiceButtonColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            this.startServiceIconColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
            if (emojiThemes != null || tLRPC$WallPaper != null) {
                int i = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
            }
            themeAnimationSettings.applyTheme = false;
            themeAnimationSettings.afterStartDescriptionsAddedRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$1(emojiThemes, tLRPC$WallPaper, z);
                }
            };
            if (z) {
                themeAnimationSettings.animationProgress = new INavigationLayout.ThemeAnimationSettings.onAnimationProgress() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.1
                    @Override // org.telegram.ui.ActionBar.INavigationLayout.ThemeAnimationSettings.onAnimationProgress
                    public void setProgress(float f) {
                        ChatActivity.this.chatListView.invalidate();
                        ThemeDelegate themeDelegate = ThemeDelegate.this;
                        themeDelegate.animatingMessageDrawable.crossfadeProgress = f;
                        themeDelegate.animatingMessageMediaDrawable.crossfadeProgress = f;
                        themeDelegate.updateServiceMessageColor(f);
                    }
                };
                themeAnimationSettings.beforeAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$2();
                    }
                };
                themeAnimationSettings.afterAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.lambda$setCurrentTheme$3();
                    }
                };
            } else {
                ChatActivity chatActivity = ChatActivity.this;
                if (chatActivity.contentView != null) {
                    chatActivity.updateBackground();
                }
                themeAnimationSettings.afterStartDescriptionsAddedRunnable.run();
            }
            themeAnimationSettings.onlyTopFragment = true;
            themeAnimationSettings.resourcesProvider = this;
            themeAnimationSettings.duration = 250L;
            ((BaseFragment) ChatActivity.this).parentLayout.animateThemedValues(themeAnimationSettings, null);
            Runnable runnable = ChatActivity.this.onThemeChange;
            if (runnable != null) {
                runnable.run();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$1(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z) {
            setupChatTheme(emojiThemes, tLRPC$WallPaper, z, true);
            initServiceMessageColors(this.backgroundDrawable);
            ChatActivity.this.contentView.invalidateBackground();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$2() {
            this.animatingColors = new SparseIntArray();
            Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOut");
            this.animatingMessageDrawable = messageDrawable;
            messageDrawable.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutStart();
            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable("drawableMsgOutMedia");
            this.animatingMessageMediaDrawable = messageDrawable2;
            messageDrawable2.crossfadeFromDrawable = ((BaseFragment) ChatActivity.this).parentLayout.getMessageDrawableOutMediaStart();
            this.animatingMessageDrawable.crossfadeProgress = 0.0f;
            this.animatingMessageMediaDrawable.crossfadeProgress = 0.0f;
            ChatActivity.this.updateMessagesVisiblePart(false);
            updateServiceMessageColor(0.0f);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setCurrentTheme$3() {
            this.animatingMessageDrawable.crossfadeFromDrawable = null;
            this.animatingMessageMediaDrawable.crossfadeFromDrawable = null;
            this.animatingColors = null;
            updateServiceMessageColor(1.0f);
        }

        private void setupChatTheme(EmojiThemes emojiThemes, TLRPC$WallPaper tLRPC$WallPaper, boolean z, boolean z2) {
            Theme.ThemeInfo theme;
            Theme.ThemeInfo theme2;
            this.chatTheme = emojiThemes;
            this.wallpaper = tLRPC$WallPaper;
            Drawable backgroundImage = ((BaseFragment) ChatActivity.this).fragmentView != null ? ((SizeNotifierFrameLayout) ((BaseFragment) ChatActivity.this).fragmentView).getBackgroundImage() : null;
            final MotionBackgroundDrawable motionBackgroundDrawable = backgroundImage instanceof MotionBackgroundDrawable ? (MotionBackgroundDrawable) backgroundImage : null;
            int phase = motionBackgroundDrawable != null ? motionBackgroundDrawable.getPhase() : 0;
            if ((emojiThemes == null || emojiThemes.showAsDefaultStub) && tLRPC$WallPaper == null) {
                Theme.getServiceMessageColor();
            }
            String str = "Dark Blue";
            String str2 = "Blue";
            if (emojiThemes == null && tLRPC$WallPaper == null) {
                this.currentColors = new SparseIntArray();
                this.currentPaints.clear();
                this.currentDrawables.clear();
                Drawable cachedWallpaperNonBlocking = Theme.getCachedWallpaperNonBlocking();
                if (cachedWallpaperNonBlocking instanceof MotionBackgroundDrawable) {
                    ((MotionBackgroundDrawable) cachedWallpaperNonBlocking).setPhase(phase);
                }
                this.backgroundDrawable = null;
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme2 = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string = sharedPreferences.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string) != null && !Theme.getTheme(string).isDark()) {
                        str2 = string;
                    }
                    String string2 = sharedPreferences.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string2) != null && Theme.getTheme(string2).isDark()) {
                        str = string2;
                    }
                    theme2 = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme2, false, this.isDark);
                initServiceMessageColors(this.backgroundDrawable);
                return;
            }
            if (ApplicationLoader.applicationContext != null) {
                Theme.createChatResources(ApplicationLoader.applicationContext, false);
            }
            if (emojiThemes != null) {
                this.currentColors = emojiThemes.createColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0);
            } else {
                this.currentColors = new SparseIntArray();
            }
            if (tLRPC$WallPaper != null) {
                this.backgroundDrawable = ChatBackgroundDrawable.getOrCreate(this.backgroundDrawable, tLRPC$WallPaper, this.isDark);
            } else {
                this.backgroundDrawable = getBackgroundDrawableFromTheme(emojiThemes, phase);
            }
            AnimatorSet animatorSet = this.patternAlphaAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            if (z) {
                this.patternAlphaAnimator = new AnimatorSet();
                if (motionBackgroundDrawable != null) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$4(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat.addListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat.setDuration(200L);
                    this.patternAlphaAnimator.playTogether(ofFloat);
                }
                Drawable drawable = this.backgroundDrawable;
                if (drawable instanceof MotionBackgroundDrawable) {
                    final MotionBackgroundDrawable motionBackgroundDrawable2 = (MotionBackgroundDrawable) drawable;
                    motionBackgroundDrawable2.setPatternAlpha(0.0f);
                    ValueAnimator ofFloat2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                    ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda1
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.ThemeDelegate.lambda$setupChatTheme$5(MotionBackgroundDrawable.this, valueAnimator);
                        }
                    });
                    ofFloat2.addListener(new AnimatorListenerAdapter(this) { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.3
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            motionBackgroundDrawable2.setPatternAlpha(1.0f);
                        }
                    });
                    ofFloat2.setDuration(250L);
                    this.patternAlphaAnimator.playTogether(ofFloat2);
                }
                this.patternAlphaAnimator.start();
            }
            if (emojiThemes == null) {
                if (Theme.getActiveTheme().isDark() == this.isDark) {
                    theme = Theme.getActiveTheme();
                } else {
                    SharedPreferences sharedPreferences2 = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String string3 = sharedPreferences2.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(string3) != null && !Theme.getTheme(string3).isDark()) {
                        str2 = string3;
                    }
                    String string4 = sharedPreferences2.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(string4) != null && Theme.getTheme(string4).isDark()) {
                        str = string4;
                    }
                    theme = this.isDark ? Theme.getTheme(str) : Theme.getTheme(str2);
                }
                Theme.applyTheme(theme, false, this.isDark);
            }
            if (z2) {
                int i = AndroidUtilities.calcDrawableColor(this.backgroundDrawable)[0];
                initDrawables();
                initPaints();
                initServiceMessageColors(this.backgroundDrawable);
                updateServiceMessageColor(1.0f);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$4(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupChatTheme$5(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        private void initDrawables() {
            Drawable messageDrawable;
            int themeDrawableColorKey;
            for (Map.Entry<String, Drawable> entry : Theme.getThemeDrawablesMap().entrySet()) {
                String key = entry.getKey();
                key.hashCode();
                char c = 65535;
                switch (key.hashCode()) {
                    case -2061232504:
                        if (key.equals("drawableMsgIn")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -2005320132:
                        if (key.equals("drawableMsgInMedia")) {
                            c = 1;
                            break;
                        }
                        break;
                    case -1656383241:
                        if (key.equals("drawableMsgInMediaSelected")) {
                            c = 2;
                            break;
                        }
                        break;
                    case -1451465639:
                        if (key.equals("drawableMsgOutMedia")) {
                            c = 3;
                            break;
                        }
                        break;
                    case -1084641786:
                        if (key.equals("drawableMsgOutSelected")) {
                            c = 4;
                            break;
                        }
                        break;
                    case -8170988:
                        if (key.equals("drawableMsgOutMediaSelected")) {
                            c = 5;
                            break;
                        }
                        break;
                    case 300508483:
                        if (key.equals("drawableMsgInSelected")) {
                            c = 6;
                            break;
                        }
                        break;
                    case 526307915:
                        if (key.equals("drawableMsgOut")) {
                            c = 7;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        messageDrawable = new Theme.MessageDrawable(0, false, false, this);
                        break;
                    case 1:
                        messageDrawable = new Theme.MessageDrawable(1, false, false, this);
                        break;
                    case 2:
                        messageDrawable = new Theme.MessageDrawable(1, false, true, this);
                        break;
                    case 3:
                        messageDrawable = new Theme.MessageDrawable(1, true, false, this);
                        break;
                    case 4:
                        messageDrawable = new Theme.MessageDrawable(0, true, true, this);
                        break;
                    case 5:
                        messageDrawable = new Theme.MessageDrawable(1, true, true, this);
                        break;
                    case 6:
                        messageDrawable = new Theme.MessageDrawable(0, false, true, this);
                        break;
                    case 7:
                        messageDrawable = new Theme.MessageDrawable(0, true, false, this);
                        break;
                    default:
                        Drawable.ConstantState constantState = entry.getValue().getConstantState();
                        messageDrawable = constantState != null ? constantState.newDrawable().mutate() : null;
                        if (messageDrawable != null && (themeDrawableColorKey = Theme.getThemeDrawableColorKey(entry.getKey())) >= 0) {
                            Theme.setDrawableColor(messageDrawable, getColor(themeDrawableColorKey));
                            break;
                        }
                        break;
                }
                if (messageDrawable != null) {
                    this.currentDrawables.put(entry.getKey(), messageDrawable);
                }
            }
        }

        private void initPaints() {
            Paint paint;
            for (Map.Entry<String, Paint> entry : Theme.getThemePaintsMap().entrySet()) {
                Paint value = entry.getValue();
                if (value instanceof TextPaint) {
                    paint = new TextPaint();
                    paint.setTextSize(value.getTextSize());
                    paint.setTypeface(value.getTypeface());
                } else {
                    paint = new Paint();
                }
                if ((value.getFlags() & 1) != 0) {
                    paint.setFlags(1);
                }
                int themePaintColorKey = Theme.getThemePaintColorKey(entry.getKey());
                if (themePaintColorKey >= 0) {
                    paint.setColor(getColor(themePaintColorKey));
                }
                this.currentPaints.put(entry.getKey(), paint);
            }
        }

        private void initServiceMessageColors(Drawable drawable) {
            int i = AndroidUtilities.calcDrawableColor(drawable)[0];
            int currentColor = getCurrentColor(Theme.key_chat_serviceBackground);
            int i2 = Theme.key_chat_selectedBackground;
            int currentColor2 = getCurrentColor(i2);
            if (currentColor != 0 && this.wallpaper == null) {
                i = currentColor;
            }
            this.currentServiceColor = i;
            if (drawable instanceof ChatBackgroundDrawable) {
                drawable = ((ChatBackgroundDrawable) drawable).getDrawable();
            }
            boolean z = (drawable instanceof MotionBackgroundDrawable) && SharedConfig.getDevicePerformanceClass() != 0;
            this.drawServiceGradient = z;
            this.drawSelectedGradient = z;
            if (z) {
                this.serviceBitmap = Bitmap.createBitmap(60, 80, Bitmap.Config.ARGB_8888);
                this.serviceBitmapSource = ((MotionBackgroundDrawable) drawable).getBitmap();
                Canvas canvas = new Canvas(this.serviceBitmap);
                this.serviceCanvas = canvas;
                canvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, (Paint) null);
                Bitmap bitmap = this.serviceBitmap;
                Shader.TileMode tileMode = Shader.TileMode.CLAMP;
                this.serviceShader = new BitmapShader(bitmap, tileMode, tileMode);
                Bitmap bitmap2 = this.serviceBitmapSource;
                Shader.TileMode tileMode2 = Shader.TileMode.CLAMP;
                this.serviceShaderSource = new BitmapShader(bitmap2, tileMode2, tileMode2);
                this.useSourceShader = true;
            } else {
                this.serviceBitmap = null;
                this.serviceShader = null;
                this.serviceBitmapSource = null;
                this.serviceCanvas = null;
                this.useSourceShader = false;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            if (paint != null) {
                if (this.drawServiceGradient) {
                    ColorMatrix colorMatrix = new ColorMatrix();
                    colorMatrix.setSaturation(((MotionBackgroundDrawable) drawable).getIntensity() >= 0 ? 1.8f : 0.5f);
                    paint.setAlpha(MessagesStorage.LAST_DB_VERSION);
                    paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint.setShader(this.serviceShaderSource);
                    paint2.setAlpha(MessagesStorage.LAST_DB_VERSION);
                    paint2.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    paint2.setShader(this.serviceShaderSource);
                } else {
                    paint.setColorFilter(null);
                    paint.setShader(null);
                    paint2.setColorFilter(null);
                    paint2.setShader(null);
                }
            }
            if (paint3 == null) {
                paint3 = new Paint(1);
                this.currentPaints.put("paintChatMessageBackgroundSelected", paint3);
            }
            if (this.drawSelectedGradient) {
                ColorMatrix colorMatrix2 = new ColorMatrix();
                AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2, 2.5f);
                AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2, 0.75f);
                paint3.setAlpha(64);
                paint3.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
                paint3.setShader(this.serviceShaderSource);
                return;
            }
            if (currentColor2 == 0) {
                currentColor2 = getColor(i2);
            }
            paint3.setColor(currentColor2);
            paint3.setColorFilter(null);
            paint3.setShader(null);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void updateServiceMessageColor(float f) {
            Bitmap bitmap;
            Bitmap bitmap2;
            if (this.currentPaints.isEmpty()) {
                return;
            }
            Paint paint = getPaint("paintChatActionBackground");
            Paint paint2 = getPaint("paintChatActionBackgroundSelected");
            Paint paint3 = getPaint("paintChatMessageBackgroundSelected");
            int i = this.currentServiceColor;
            int currentColor = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceText, true);
            int currentColor2 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor3 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceLink, true);
            int currentColor4 = this.drawServiceGradient ? -1 : getCurrentColor(Theme.key_chat_serviceIcon, true);
            if (f != 1.0f) {
                i = ColorUtils.blendARGB(this.startServiceColor, i, f);
                currentColor = ColorUtils.blendARGB(this.startServiceTextColor, currentColor, f);
                currentColor2 = ColorUtils.blendARGB(this.startServiceLinkColor, currentColor2, f);
                currentColor3 = ColorUtils.blendARGB(this.startServiceButtonColor, currentColor3, f);
                currentColor4 = ColorUtils.blendARGB(this.startServiceIconColor, currentColor4, f);
            }
            if (paint != null && !this.drawServiceGradient) {
                paint.setColor(i);
                paint2.setColor(i);
            }
            Paint paint4 = getPaint("paintChatActionText");
            if (paint4 != null) {
                ((TextPaint) paint4).linkColor = currentColor2;
                getPaint("paintChatActionText").setColor(currentColor);
                getPaint("paintChatBotButton").setColor(currentColor3);
            }
            Theme.setDrawableColor(getDrawable("drawableMsgStickerCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerClock"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerHalfCheck"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerPinned"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerReplies"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableMsgStickerViews"), currentColor);
            Theme.setDrawableColor(getDrawable("drawableBotInline"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableBotLink"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawable_botInvite"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableCommentSticker"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableGoIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableReplyIcon"), currentColor4);
            Theme.setDrawableColor(getDrawable("drawableShareIcon"), currentColor4);
            Canvas canvas = this.serviceCanvas;
            if (canvas == null || (bitmap = this.serviceBitmapSource) == null) {
                return;
            }
            if (f != 1.0f && (bitmap2 = this.startServiceBitmap) != null) {
                this.useSourceShader = false;
                canvas.drawBitmap(bitmap2, 0.0f, 0.0f, (Paint) null);
                this.paint.setAlpha((int) (f * 255.0f));
                this.serviceCanvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, this.paint);
                if (paint != null) {
                    paint.setShader(this.serviceShader);
                    paint2.setShader(this.serviceShader);
                }
                if (paint3 != null) {
                    paint3.setShader(this.serviceShader);
                    return;
                }
                return;
            }
            this.useSourceShader = true;
            canvas.drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
            if (paint != null) {
                paint.setShader(this.serviceShaderSource);
                paint2.setShader(this.serviceShaderSource);
            }
            if (paint3 != null) {
                paint3.setShader(this.serviceShaderSource);
            }
        }

        private Drawable getBackgroundDrawableFromTheme(final EmojiThemes emojiThemes, int i) {
            if (emojiThemes.showAsDefaultStub) {
                Drawable drawable = Theme.createBackgroundDrawable(EmojiThemes.getDefaultThemeInfo(this.isDark), emojiThemes.getPreviewColors(((BaseFragment) ChatActivity.this).currentAccount, this.isDark ? 1 : 0), emojiThemes.getWallpaperLink(this.isDark ? 1 : 0), i).wallpaper;
                return new ColorDrawable(-16777216);
            }
            int color = getColor(Theme.key_chat_wallpaper);
            int color2 = getColor(Theme.key_chat_wallpaper_gradient_to1);
            int color3 = getColor(Theme.key_chat_wallpaper_gradient_to2);
            int color4 = getColor(Theme.key_chat_wallpaper_gradient_to3);
            final MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable();
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(this.isDark ? 1 : 0).settings.intensity);
            motionBackgroundDrawable.setColors(color, color2, color3, color4, 0, true);
            motionBackgroundDrawable.setPhase(i);
            final int patternColor = motionBackgroundDrawable.getPatternColor();
            final boolean z = this.isDark;
            emojiThemes.loadWallpaper(z ? 1 : 0, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda7
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.ThemeDelegate.this.lambda$getBackgroundDrawableFromTheme$7(emojiThemes, z, motionBackgroundDrawable, patternColor, (Pair) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC$TL_error tLRPC$TL_error) {
                    ResultCallback.-CC.$default$onError(this, tLRPC$TL_error);
                }
            });
            return motionBackgroundDrawable;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$getBackgroundDrawableFromTheme$7(EmojiThemes emojiThemes, boolean z, final MotionBackgroundDrawable motionBackgroundDrawable, int i, Pair pair) {
            if (pair == null) {
                return;
            }
            long longValue = ((Long) pair.first).longValue();
            Bitmap bitmap = (Bitmap) pair.second;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 == null || longValue != emojiThemes2.getTlTheme(this.isDark ? 1 : 0).id || bitmap == null) {
                return;
            }
            ValueAnimator valueAnimator = this.patternIntensityAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            motionBackgroundDrawable.setPatternBitmap(emojiThemes.getWallpaper(z ? 1 : 0).settings.intensity, bitmap);
            motionBackgroundDrawable.setPatternColorFilter(i);
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.patternIntensityAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda2
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.ThemeDelegate.lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable.this, valueAnimator2);
                }
            });
            this.patternIntensityAnimator.setDuration(250L);
            this.patternIntensityAnimator.start();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable motionBackgroundDrawable, ValueAnimator valueAnimator) {
            motionBackgroundDrawable.setPatternAlpha(((Float) valueAnimator.getAnimatedValue()).floatValue());
        }

        public TLRPC$WallPaper getCurrentWallpaper() {
            return this.wallpaper;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBackground() {
        if (this.contentView == null) {
            return;
        }
        if ((this.themeDelegate.backgroundDrawable == null || this.contentView.getBackgroundImage() == null) && this.contentView.getBackgroundImage() == null) {
            this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateBotHelpCellClick(final BotHelpCell botHelpCell) {
        if (MessagesController.getInstance(this.currentAccount).getTranslateController().isContextTranslateEnabled() && LanguageDetector.hasSupport()) {
            final CharSequence text = botHelpCell.getText();
            LanguageDetector.detectLanguage(text == null ? "" : text.toString(), new LanguageDetector.StringCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda243
                @Override // org.telegram.messenger.LanguageDetector.StringCallback
                public final void run(String str) {
                    ChatActivity.this.lambda$updateBotHelpCellClick$284(botHelpCell, text, str);
                }
            }, new LanguageDetector.ExceptionCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda242
                @Override // org.telegram.messenger.LanguageDetector.ExceptionCallback
                public final void run(Exception exc) {
                    BotHelpCell.this.setClickable(false);
                }
            });
            return;
        }
        botHelpCell.setClickable(false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$284(final BotHelpCell botHelpCell, final CharSequence charSequence, final String str) {
        final String language = LocaleController.getInstance().getCurrentLocale().getLanguage();
        if (str != null && ((!str.equals(language) || str.equals(TranslateController.UNKNOWN_LANGUAGE)) && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(str))) {
            botHelpCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda97
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.lambda$updateBotHelpCellClick$283(str, language, charSequence, botHelpCell, view);
                }
            });
        } else {
            botHelpCell.setClickable(false);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$283(final String str, final String str2, final CharSequence charSequence, BotHelpCell botHelpCell, View view) {
        ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
        Drawable mutate = ContextCompat.getDrawable(getContext(), R.drawable.popup_fixed_alert).mutate();
        mutate.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
        actionBarPopupWindowLayout.setBackground(mutate);
        ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem(getContext(), true, true);
        actionBarMenuSubItem.setTextAndIcon(LocaleController.getString("TranslateMessage", R.string.TranslateMessage), R.drawable.msg_translate);
        actionBarMenuSubItem.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda98
            @Override // android.view.View.OnClickListener
            public final void onClick(View view2) {
                ChatActivity.this.lambda$updateBotHelpCellClick$281(str, str2, charSequence, r5, view2);
            }
        });
        actionBarPopupWindowLayout.addView(actionBarMenuSubItem);
        final ActionBarPopupWindow actionBarPopupWindow = new ActionBarPopupWindow(actionBarPopupWindowLayout, -2, -2);
        final Runnable[] runnableArr = {new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                ActionBarPopupWindow.this.dismiss();
            }
        }};
        actionBarPopupWindow.setPauseNotifications(true);
        actionBarPopupWindow.setDismissAnimationDuration(220);
        actionBarPopupWindow.setOutsideTouchable(true);
        actionBarPopupWindow.setClippingEnabled(true);
        actionBarPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
        actionBarPopupWindow.setFocusable(true);
        actionBarPopupWindow.showAsDropDown(botHelpCell, (botHelpCell.getWidth() / 2) - AndroidUtilities.dp(90.0f), AndroidUtilities.dp(-16.0f), 83);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateBotHelpCellClick$281(String str, String str2, CharSequence charSequence, Runnable[] runnableArr, View view) {
        TranslateAlert2.showAlert(getContext(), this, this.currentAccount, str, str2, charSequence, null, false, null, null);
        if (runnableArr[0] != null) {
            runnableArr[0].run();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    protected boolean allowPresentFragment() {
        return !this.inPreviewMode;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean hideKeyboardOnShow() {
        MessageObject messageObject = this.threadMessageObject;
        if (messageObject != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
            return false;
        }
        return super.hideKeyboardOnShow();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isLightStatusBar() {
        int color;
        if (this.reportType >= 0) {
            Theme.ResourcesProvider resourceProvider = getResourceProvider();
            if (resourceProvider != null) {
                color = resourceProvider.getColorOrDefault(Theme.key_actionBarActionModeDefault);
            } else {
                color = Theme.getColor(Theme.key_actionBarActionModeDefault, null, true);
            }
            return ColorUtils.calculateLuminance(color) > 0.699999988079071d;
        }
        return super.isLightStatusBar();
    }

    public MessageObject.GroupedMessages getGroup(long j) {
        return this.groupedMessagesMap.get(j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public MessageSkeleton getNewSkeleton(boolean z) {
        MessageSkeleton messageSkeleton = new MessageSkeleton();
        TLRPC$Chat tLRPC$Chat = this.currentChat;
        if (tLRPC$Chat != null && ChatObject.isChannelAndNotMegaGroup(tLRPC$Chat)) {
            messageSkeleton.height = AndroidUtilities.dp(128.0f) + Utilities.fastRandom.nextInt(AndroidUtilities.dp(64.0f));
        } else {
            messageSkeleton.height = AndroidUtilities.dp(64.0f) + Utilities.fastRandom.nextInt(AndroidUtilities.dp(64.0f));
        }
        messageSkeleton.width = (int) Math.min((this.chatListView.getWidth() * 0.8f) - (z ? 0 : AndroidUtilities.dp(42.0f)), AndroidUtilities.dp(42.0f) + (((Utilities.fastRandom.nextFloat() * 0.35f) + 0.4f) * this.chatListView.getWidth()));
        return messageSkeleton;
    }

    @Override // org.telegram.ui.Components.ChatActivityInterface
    public SizeNotifierFrameLayout getContentView() {
        return this.contentView;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static final class MessageSkeleton {
        int height;
        int lastBottom;
        int width;

        private MessageSkeleton() {
        }
    }

    /* loaded from: classes3.dex */
    private class RecyclerListViewInternal extends RecyclerListView implements StoriesListPlaceProvider.ClippedView {
        public RecyclerListViewInternal(Context context, ThemeDelegate themeDelegate) {
            super(context, themeDelegate);
        }

        @Override // org.telegram.ui.Stories.StoriesListPlaceProvider.ClippedView
        public void updateClip(int[] iArr) {
            iArr[0] = ((int) ChatActivity.this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
            iArr[1] = ChatActivity.this.chatListView.getMeasuredHeight() - (ChatActivity.this.chatListView.getPaddingBottom() - AndroidUtilities.dp(3.0f));
        }
    }
}
